<?xml version="1.0"?>

<!--
  Copyright (c) 2016, 2017 IBM Corp. and others

  This program and the accompanying materials are made available under
  the terms of the Eclipse Public License 2.0 which accompanies this
  distribution and is available at https://www.eclipse.org/legal/epl-2.0/
  or the Apache License, Version 2.0 which accompanies this distribution and
  is available at https://www.apache.org/licenses/LICENSE-2.0.

  This Source Code may also be made available under the following
  Secondary Licenses when the conditions for such availability set
  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
  General Public License, version 2 with the GNU Classpath
  Exception [1] and GNU General Public License, version 2 with the
  OpenJDK Assembly Exception [2].

  [1] https://www.gnu.org/software/classpath/license.html
  [2] http://openjdk.java.net/legal/assembly-exception.html

  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->

<project name="J9 VM Java8andUp General Bucket" default="build" basedir=".">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<description>
		Build J9 VM Java8andUp General Bucket
	</description>

	<!-- set global properties for this build -->
	<property name="BUILD_ROOT" value="../" />
	<property name="DEST" value="${BUILD_ROOT}/Java8andUp" />

	<!--Properties for this particular build-->
	<property name="src" location="./src" />
	<property name="src_80" location="./src_80" />
	<property name="src_90" location="./src_90" />
	<property name="build" location="./bin" />
	<property name="build_resource" location="./resource" />
	<property name="transformerListener" location="../Utils/src"/>
	<property name="TestUtilities" location="../TestUtilities/src"/>

	<target name="init">
		<mkdir dir="${DEST}" />
		<mkdir dir="${build}" />
		<mkdir dir="${build_resource}" />
	</target>

	<!--compiles the NoSuchMethod test classes. Multiple steps are needed to create classes that call non-existent methods -->
	<target name="compileNoSuchMethod" depends="compile" description="compile NoSuchMethod tests in multiple steps">
		<property name="NoSuchMethod_src" location="${src}/org/openj9/test/NoSuchMethod" />
		<property name="NoSuchMethod_build" location="${build}/org/openj9/test/NoSuchMethod" />
		<!-- copy a fake java.lang.string impl and AppLoaderCallee into source folder-->
		<copy overwrite="true" file="${NoSuchMethod_src}/java/lang/String.java.hide" tofile="${NoSuchMethod_src}/java/lang/String.java" />
		<copy overwrite="true" file="${NoSuchMethod_src}/AppLoaderCallee.java.fake" tofile="${NoSuchMethod_src}/AppLoaderCallee.java"/>
		<if>
			<equals arg1="${JCL_VERSION}" arg2="latest"/>
			<then>
				<property name="compilerargline" value="--patch-module java.base=${NoSuchMethod_src}/java/lang" />
			</then>
			<else>
				<property name="compilerargline" value="-Xmodule:java.base --patch-module java.base=${NoSuchMethod_src}/java/lang" />
			</else>
		</if>
		<!-- Compile the fake string impl and AppLoader caller with it -->
		<if>
			<equals arg1="${JAVA_VERSION}" arg2="SE90"/>
			<then>
				<javac srcdir="${NoSuchMethod_src}" destdir="${build}" includes="**/String.java,*AppLoaderCaller2.java" fork="true"
				debug="on" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
					<compilerarg line ="${compilerargline}" />
					<classpath>
						<pathelement location="../TestConfig/lib/asm-all.jar" />
						<pathelement location="../TestConfig/lib/testng.jar" />
						<pathelement location="../TestConfig/lib/jcommander.jar" />
					</classpath>
				</javac>
			</then>
			<else>
				<javac srcdir="${NoSuchMethod_src}" destdir="${build}" includes="**/String.java,*AppLoaderCaller2.java" fork="true"
				debug="on" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
					<classpath>
						<pathelement location="../TestConfig/lib/asm-all.jar" />
						<pathelement location="../TestConfig/lib/testng.jar" />
						<pathelement location="../TestConfig/lib/jcommander.jar" />
					</classpath>
				</javac>
			</else>
		</if>
		<!-- remove our fake java.lang.string impl -->
		<delete file="${NoSuchMethod_src}/java/lang/String.java" />
		<!-- compile the rest of test code -->
		<javac srcdir="${NoSuchMethod_src}" destdir="${build}" excludes="*/java/*,*AppLoaderCaller2.java" fork="true"
		debug="on" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
			<classpath>
				<pathelement location="../TestConfig/lib/asm-all.jar" />
				<pathelement location="../TestConfig/lib/testng.jar" />
				<pathelement location="../TestConfig/lib/jcommander.jar" />
			</classpath>
		</javac>
		<!-- un-hide our fake string impl -->
		<copy overwrite="true" file="${NoSuchMethod_src}/java/lang/String.java.hide" tofile="${NoSuchMethod_src}/java/lang/String.java" />
		<!-- Replace fake AppLoaderCallee impl with real impl -->
		<copy overwrite="true" file="${NoSuchMethod_src}/AppLoaderCallee.java.real" tofile="${NoSuchMethod_src}/AppLoaderCallee.java"/>
		<delete file="${NoSuchMethod_build}/AppLoaderCallee.class"/>
		<javac srcdir="${NoSuchMethod_src}" destdir="${build}" includes="*AppLoaderCallee.java" fork="true"
		debug="on" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
			<classpath>
				<pathelement location="../TestConfig/lib/asm-all.jar" />
				<pathelement location="../TestConfig/lib/testng.jar" />
				<pathelement location="../TestConfig/lib/jcommander.jar" />
			</classpath>
		</javac>
		<delete file="${NoSuchMethod_src}/AppLoaderCallee.java"/>
		<!-- Restore the source for our fake AppLoaderCallee -->
		<copy overwrite="true" file="${NoSuchMethod_src}/AppLoaderCallee.java.fake" tofile="${NoSuchMethod_src}/AppLoaderCallee.java"/>
		<!-- hide our fake java.lang.string impl -->
		<delete file="${NoSuchMethod_src}/java/lang/String.java" />
	</target>

	<target name="compile" depends="jasm_generator" description="using ${JAVA_VERSION} java compile the source ">
		<echo>Ant version is ${ant.version}</echo>
		<echo>============COMPILER SETTINGS============</echo>
		<echo>===fork:				yes</echo>
		<echo>===executable:			${compiler.javac}</echo>
		<echo>===debug:				on</echo>
		<echo>===destdir:				${DEST}</echo>
		<if>
			<equals arg1="${JAVA_VERSION}" arg2="SE90"/>
			<then>
				<property name="addModules" value="--add-modules java.se.ee,openj9.sharedclasses" />
				<if>
					<equals arg1="${JCL_VERSION}" arg2="latest"/>
					<then>
						<property name="addExports" value="--add-exports java.base/com.ibm.tools.attach.target=ALL-UNNAMED --add-exports java.base/com.ibm.oti.vm=ALL-UNNAMED --add-exports java.base/com.ibm.oti.util=ALL-UNNAMED --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/com.ibm.jit.crypto=ALL-UNNAMED --add-exports java.base/com.ibm.jit=ALL-UNNAMED --add-exports java.base/com.ibm.oti.reflect=ALL-UNNAMED --add-exports java.xml.bind/javax.xml.bind.annotation=ALL-UNNAMED --add-exports java.xml.bind/javax.xml.bind=ALL-UNNAMED" />
					</then>
					<else>
						<property name="addExports" value="--add-exports java.base/com.ibm.tools.attach.target=ALL-UNNAMED --add-exports java.base/com.ibm.oti.vm=ALL-UNNAMED --add-exports java.base/com.ibm.oti.util=ALL-UNNAMED --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/com.ibm.jit.crypto=ALL-UNNAMED --add-exports java.base/com.ibm.jit=ALL-UNNAMED --add-exports java.base/com.ibm.oti.reflect=ALL-UNNAMED --add-exports java.xml.bind/javax.xml.bind.annotation=ALL-UNNAMED --add-exports java.xml.bind/javax.xml.bind=ALL-UNNAMED" />
					</else>
				</if>
				<javac srcdir="${src}" destdir="${build}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
					<src path="${src}" />
					<src path="${src_90}" />
					<src path="${TestUtilities}" />
					<src path="${transformerListener}" />
					<compilerarg line='${addExports}' />
					<compilerarg line='${addModules}' />
					<!-- PR117298-->
					<exclude name="**/Cmvc194280.java" />
					<exclude name="**/resources/**"/>
					<!-- need to be included when OpenJ9 have them. -->
					<exclude name="**/gpu/**"/>
					<!-- requires special compilation methods -->
					<exclude name="**/NoSuchMethod/**" />
					<classpath>
						<pathelement location="../TestConfig/lib/asm-all.jar" />
						<pathelement location="../TestConfig/lib/testng.jar" />
						<pathelement location="../TestConfig/lib/jcommander.jar" />
						<pathelement location="../TestConfig/lib/commons-cli.jar" />
						<pathelement location="../TestConfig/lib/javassist.jar" />
					</classpath>
				</javac>
			</then>
			<else>
				<javac srcdir="${src}" destdir="${build}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
					<src path="${src}" />
					<src path="${src_80}" />
					<src path="${TestUtilities}" />
					<src path="${transformerListener}" />
					<exclude name="**/Cmvc194280.java" />
					<exclude name="**/resources/**"/>
					<exclude name="**/gpu/**"/>
					<!-- requires special compilation methods -->
					<exclude name="**/NoSuchMethod/**" />
					<classpath>
						<pathelement location="../TestConfig/lib/asm-all.jar" />
						<pathelement location="../TestConfig/lib/testng.jar" />
						<pathelement location="../TestConfig/lib/jcommander.jar" />
						<pathelement location="${JAVA_BIN}/../../lib/tools.jar" />
						<pathelement location="../TestConfig/lib/commons-cli.jar" />
						<pathelement location="../TestConfig/lib/javassist.jar" />
					</classpath>
				</javac>
			</else>
		</if>
	</target>

	<target name="jasm_generator" depends="init" description="prepare jasm files">
		<property name="jasm_class_destination" location="${build}/j9vm/test/invoker" />
		<mkdir dir="${jasm_class_destination}" />
		<exec executable="${JAVA_BIN}/java" dir="${jasm_class_destination}">
			<arg line="-jar ${BUILD_ROOT}/TestConfig/lib/asmtools.jar jasm ${src}/j9vm/test/invoker/NodeClass.jasm"/>
		</exec>
		<exec executable="${JAVA_BIN}/java" dir="${jasm_class_destination}">
			<arg line="-jar ${BUILD_ROOT}/TestConfig/lib/asmtools.jar jasm ${src}/j9vm/test/invoker/NodeInterface.jasm"/>
		</exec>
	</target>

	<!-- This target is used to prepare test resource which is located in org/openj9/resources-->
	<target name="pack_resources" depends="compileNoSuchMethod" description="prepare JCL test resources">
		<if>
			<equals arg1="${JAVA_VERSION}" arg2="SE90"/>
			<then>
				<property name="addModules" value="--add-modules java.se.ee" />
			</then>
			<else>
				<property name="addModules" value="" />
			</else>
		</if>
		<!-- compile java files within resources dir without '-parameter' flag in javac command line, README in '${src}/org/openj9/resources/methodparameters/README'-->
		<javac srcdir="${src}" destdir="${build_resource}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
			<include name ="org/openj9/resources/**" />
			<exclude name ="org/openj9/resources/methodparameters/WithParams.java" />
			<compilerarg line='${addModules}' />
		</javac>

		<!-- compile java files within resources dir with '-parameter' flag in javac command line, README in '${src}/org/openj9/resources/methodparameters/README' -->
		<javac srcdir="${src}" destdir="${build_resource}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
			<compilerarg value='-parameters' />
			<include name ="org/openj9/resources/methodparameters/WithParams.java" />
		</javac>

		<jar jarfile="${build_resource}/org/openj9/resources/openj9tr_general.jar">
			<fileset dir="${build_resource}" includes="org/openj9/resources/classinheritance/**"/>
			<fileset dir="${build_resource}" includes="org/openj9/resources/methodparameters/**"/>
			<fileset dir="${build_resource}" includes="org/openj9/resources/security/**"/>
		</jar>

		<!-- generate child.jar -->
		<jar jarfile="${build_resource}/org/openj9/resources/openj9tr_child.jar">
			<fileset dir="${src}/org/openj9/resources/classloader/child/"/>
		</jar>

		<!-- generate parent.jar -->
		<jar jarfile="${build_resource}/org/openj9/resources/openj9tr_parent.jar">
			<fileset dir="${src}/org/openj9/resources/classloader/parent/"/>
		</jar>

		<!-- generate A.jar and B.jar for org.openj9.test.annotationPackage tests-->
		<jar jarfile="${build_resource}/org/openj9/resources/openj9tr_annotationPackage_A.jar">
			<fileset dir="${build_resource}" includes="org/openj9/resources/annotationPackage/A.class"/>
			<fileset dir="${build_resource}" includes="org/openj9/resources/annotationPackage/package-info.class"/>
		</jar>
		<jar jarfile="${build_resource}/org/openj9/resources/openj9tr_annotationPackage_B.jar">
			<fileset dir="${build_resource}" includes="org/openj9/resources/annotationPackage/B.class"/>
		</jar>

		<!-- copy extra test related files into build_resource dir -->
		<copy todir="${build_resource}/org/openj9/resources">
			<fileset dir="${src}/org/openj9/resources/misc" />
		</copy>

		<!-- copy Test_JITHelper dependencies to ${build_resource}, and add them into -Xbootclasspath/a-->
		<copy file="${build}/org/openj9/test/com/ibm/jit/Test_JITHelpersImpl.class" todir="${build_resource}/org/openj9/test/com/ibm/jit" />
	</target>

	<target name="dist" depends="pack_resources" description="generate the distribution">
		<jar jarfile="${DEST}/GeneralTest.jar" filesonly="true">
			<fileset dir="${build}" />
			<fileset dir="${src}/../" includes="*.properties,*.xml" />
		</jar>
		<jar jarfile="${DEST}/TestResources.jar" filesonly="true">
			<fileset dir="${build_resource}" />
		</jar>
		<jar jarfile="${RESOURCES_DIR}/vmargs_${JAVA_VERSION}.jar" filesonly="true" manifest="./META-INF/MANIFEST.MF">
			<fileset dir="${build}" includes="org/openj9/test/vmArguments/*.class"/>
		</jar>
		<copy todir="${DEST}">
			<fileset dir="${src}/../" includes="*.xml,*.policy" />
			<fileset dir="${src}/../" includes="*.mk" />
		</copy>
	</target>

	<target name="clean" depends="dist" description="clean up">
		<!-- Delete the ${build} and ${build_resource} directory trees -->
		<delete dir="${build}" />
		<delete dir="${build_resource}" />
	</target>

	<target name="build">
		<antcall target="clean" inheritall="true" />
	</target>
</project>
