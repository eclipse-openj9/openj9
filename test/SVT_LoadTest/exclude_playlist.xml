<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (c) 2017, 2017 IBM Corp. and others

  This program and the accompanying materials are made available under
  the terms of the Eclipse Public License 2.0 which accompanies this
  distribution and is available at https://www.eclipse.org/legal/epl-2.0/
  or the Apache License, Version 2.0 which accompanies this distribution and
  is available at https://www.apache.org/licenses/LICENSE-2.0.

  This Source Code may also be made available under the following
  Secondary Licenses when the conditions for such availability set
  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
  General Public License, version 2 with the GNU Classpath
  Exception [1] and GNU General Public License, version 2 with the
  OpenJDK Assembly Exception [2].

  [1] https://www.gnu.org/software/classpath/license.html
  [2] http://openjdk.java.net/legal/assembly-exception.html

  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->
<playlist xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../TestConfig/playlist.xsd">

	<!-- Daa Load Tests -->

	<test>
		<testCaseName>SVT_LoadTest.DaaLoadTest_Workload_all</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=DaaLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)DaaLoadTest_all$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.DaaLoadTest_Workload1</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=DaaLoadTest -test-args=$(Q)workload=daa1$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)DaaLoadTest_Daa1$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.DaaLoadTest_Workload2</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=DaaLoadTest -test-args=$(Q)workload=daa2$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)DaaLoadTest_Daa2$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
		<test>
		<testCaseName>SVT_LoadTest.DaaLoadTest_Workload3</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=DaaLoadTest -test-args=$(Q)workload=daa3$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)DaaLoadTest_Daa3$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- ClassLoading Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.ClassloadingLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=ClassloadingLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)ClassloadingLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Concurrent Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.ConcurrentLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=ConcurrentLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)ConcurrentLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Lambda Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.LambdaLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=LambdaLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)LambdaLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Lang Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.LangLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=LangLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)LangLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Math Load Tests -->

	<test>
		<testCaseName>SVT_LoadTest.MathLoadTest_all</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MathLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)MathLoadTest_all$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.MathLoadTest_autosimd</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MathLoadTest -test-args=$(Q)workload=autoSimd$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)MathLoadTest_autoSimd$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.MathLoadTest_bigDecimal</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MathLoadTest -test-args=$(Q)workload=bigDecimal$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)MathLoadTest_bigDecimal$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Mix Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.MixLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MixLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)MixLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- MXBean Load Tests -->

	<test>
		<testCaseName>SVT_LoadTest.MXBeansLoadTest_jvmcpumonitorWl1</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MXBeansLoadTest -test-args=$(Q)workload=jvmcpumonitorWl1$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)MXBeansLoadTest_jvmcpumonitorWl1$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.MXBeansLoadTest_jvmcpumonitorWl2</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MXBeansLoadTest -test-args=$(Q)workload=jvmcpumonitorWl2$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)MXBeansLoadTest_jvmcpumonitorWl2$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.MXBeansLoadTest_mxbean</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MXBeansLoadTest -test-args=$(Q)workload=mxbean$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)MXBeansLoadTest_mxbean$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.MXBeansLoadTest_osmxbean</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MXBeansLoadTest -test-args=$(Q)workload=osmxbean$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)MXBeansLoadTest_osmxbean$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.MXBeansLoadTest_virtualization</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MXBeansLoadTest -test-args=$(Q)workload=virtualization$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)MXBeansLoadTest_virtualization$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Nio Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.NioLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=NioLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)NioLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- SerializationLoadTest Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.SerializationLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=SerializationLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)SerializationLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- UtilLoadTest Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.UtilLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=UtilLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)UtilLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Annotations Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.AnnotationsLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=AnnotationsLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)AnnotationsLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- DirectByteBuffer Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.DirectByteBufferLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=DirectByteBufferLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)DirectByteBufferLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- HeapHog Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.HeapHogLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HeapHogLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)HeapHogLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Locking Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.LockingLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=LockingLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)LockingLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- ObjectTree Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.ObjectTreeLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=ObjectTreeLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)ObjectTreeLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- ReadWrite Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.ReadWriteLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=ReadWriteLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)ReadWriteLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Mauve Load Tests -->

	<test>
		<testCaseName>SVT_LoadTest.MauveMultiThreadLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MauveMultiThreadLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)MauveMultiThreadLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.MauveSingleThreadLoadTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MauveSingleThreadLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)MauveSingleThreadLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Harmony Load Tests -->

	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_all</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=all$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_all$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_jndi</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=jndi$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_jndi$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_luni1</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=luni1$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_luni1$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_luni2</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=luni2$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_luni2$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_luni3</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=luni3$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_luni3$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_luni4</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=luni4$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_luni4$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_network</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=network$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_network$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_nio1</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=nio1$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_nio1$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_nio2</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=nio2$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_nio2$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_others1</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=others1$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_others1$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_others2</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=others2$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_others2$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_others3</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=others3$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_others3$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_security1</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=security1$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_security1$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_security2</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=security2$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_security2$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_security3</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=security3$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_security3$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_security4</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=security4$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_security4$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_security5</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=security5$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_security5$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_security6</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=security6$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_security6$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_serialization</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=serialization$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_serialization$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_sql</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=sql$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_sql$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>


	<!-- //////////////////////
	     The following entries are for load tests with special modes for Concurrent Scavenge
	     that we only want to run on arch.390,bit.64.
	     ///////////////////////-->


	<!-- Daa Load Tests -->

	<test>
		<testCaseName>SVT_LoadTest.DaaLoadTest_Workload_all_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=DaaLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)DaaLoadTest_all$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.DaaLoadTest_Workload1_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=DaaLoadTest -test-args=$(Q)workload=daa1$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)DaaLoadTest_Daa1$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.DaaLoadTest_Workload2_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=DaaLoadTest -test-args=$(Q)workload=daa2$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)DaaLoadTest_Daa2$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
		<test>
		<testCaseName>SVT_LoadTest.DaaLoadTest_Workload3_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=DaaLoadTest -test-args=$(Q)workload=daa3$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)DaaLoadTest_Daa3$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- ClassLoading Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.ClassloadingLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=ClassloadingLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)ClassloadingLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Concurrent Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.ConcurrentLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=ConcurrentLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)ConcurrentLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Lambda Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.LambdaLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=LambdaLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)LambdaLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Lang Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.LangLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=LangLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)LangLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Math Load Tests -->

	<test>
		<testCaseName>SVT_LoadTest.MathLoadTest_all_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MathLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)MathLoadTest_all$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.MathLoadTest_autosimd_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MathLoadTest -test-args=$(Q)workload=autoSimd$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)MathLoadTest_autoSimd$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.MathLoadTest_BigDecimal_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MathLoadTest -test-args=$(Q)workload=bigDecimal$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)MathLoadTest_bigDecimal$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Mix Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.MixLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MixLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)MixLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- MXBean Load Tests -->

	<test>
		<testCaseName>SVT_LoadTest.MXBeansLoadTest_jvmcpumonitorWl1_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MXBeansLoadTest -test-args=$(Q)workload=jvmcpumonitorWl1$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)MXBeansLoadTest_jvmcpumonitorWl1$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.MXBeansLoadTest_jvmcpumonitorWl2_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MXBeansLoadTest -test-args=$(Q)workload=jvmcpumonitorWl2$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)MXBeansLoadTest_jvmcpumonitorWl2$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.MXBeansLoadTest_mxbean_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MXBeansLoadTest -test-args=$(Q)workload=mxbean$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)MXBeansLoadTest_mxbean$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.MXBeansLoadTest_osmxbean_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MXBeansLoadTest -test-args=$(Q)workload=osmxbean$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)MXBeansLoadTest_osmxbean$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.MXBeansLoadTest_virtualization_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MXBeansLoadTest -test-args=$(Q)workload=virtualization$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)MXBeansLoadTest_virtualization$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Nio Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.NioLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=NioLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)NioLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- SerializationLoadTest Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.SerializationLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=SerializationLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)SerializationLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- UtilLoadTest Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.UtilLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=UtilLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)UtilLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Annotations Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.AnnotationsLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=AnnotationsLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)AnnotationsLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- DirectByteBuffer Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.DirectByteBufferLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=DirectByteBufferLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)DirectByteBufferLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- HeapHog Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.HeapHogLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HeapHogLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)HeapHogLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Locking Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.LockingLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=LockingLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)LockingLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- ObjectTree Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.ObjectTreeLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=ObjectTreeLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)ObjectTreeLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- ReadWrite Load Test -->

	<test>
		<testCaseName>SVT_LoadTest.ReadWriteLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=ReadWriteLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)ReadWriteLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Mauve Load Tests -->

	<test>
		<testCaseName>SVT_LoadTest.MauveMultiThreadLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MauveMultiThreadLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)MauveMultiThreadLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.MauveSingleThreadLoadTest_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=MauveSingleThreadLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)MauveSingleThreadLoadTest$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<!-- Harmony Load Tests -->

	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_all_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=all$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_all$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_jndi_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=jndi$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_jndi$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_luni1_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=luni1$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_luni1$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_luni2_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=luni2$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_luni2$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_luni3_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=luni3$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_luni3$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_luni4_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=luni4$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_luni4$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_network_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=network$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_network$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_nio1_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=nio1$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_nio1$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_nio2_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=nio2$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_nio2$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_others1_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=others1$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_others1$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_others2_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=others2$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_others2$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_others3_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=others3$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_others3$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_security1_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=security1$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_security1$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_security2_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=security2$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_security2$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_security3_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=security3$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_security3$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_security4_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=security4$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_security4$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_security5_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=security5$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_security5$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_security6_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=security6$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_security6$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_serialization_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=serialization$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_serialization$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
	<test>
		<testCaseName>SVT_LoadTest.HarmonyLoadTest_sql_ConcurrentScavenge</testCaseName>
		<variations>
			<variation>Mode109-CS</variation>
			<variation>Mode159</variation>
			<variation>Mode159-CS</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=HarmonyLoadTest -test-args=$(Q)suite=sql$(Q) -results-root=$(Q)$(TEMP_ROOT)$(D)HarmonyLoadTest_sql$(Q); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.390,bit.64</platformRequirements>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>
</playlist>