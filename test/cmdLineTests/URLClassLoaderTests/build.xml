<?xml version="1.0"?>

<!--
  Copyright (c) 2016, 2017 IBM Corp. and others

  This program and the accompanying materials are made available under
  the terms of the Eclipse Public License 2.0 which accompanies this
  distribution and is available at https://www.eclipse.org/legal/epl-2.0/
  or the Apache License, Version 2.0 which accompanies this distribution and
  is available at https://www.apache.org/licenses/LICENSE-2.0.

  This Source Code may also be made available under the following
  Secondary Licenses when the conditions for such availability set
  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
  General Public License, version 2 with the GNU Classpath
  Exception [1] and GNU General Public License, version 2 with the
  OpenJDK Assembly Exception [2].

  [1] https://www.gnu.org/software/classpath/license.html
  [2] http://openjdk.java.net/legal/assembly-exception.html

  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->

<project name="URLClassLoaderTests" default="build" basedir=".">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<description>
		Build DataHelperTests   
	</description>

	<!-- set properties for this build -->
	<property name="DEST" value="${BUILD_ROOT}/cmdLineTests/URLClassLoaderTests" />
	<property name="PROJECT_ROOT" location="." />
	<property name="src" location="."/>
	<property name="build.dir" location="./bin"/>
	
	<target name="init">
		<mkdir dir="${DEST}" />
		<mkdir dir="${build.dir}" />
	</target>
	
	<target name="compile" depends="init" description="Compile the source" >
		<echo>Ant version is ${ant.version}</echo>
		<echo>============COMPILER SETTINGS============</echo>
		<echo>===fork:				yes</echo>
		<echo>===executable:			${compiler.javac}</echo>
		<echo>===debug:				on</echo>
		<echo>===destdir:				${DEST}</echo>	

		<!--
		1.) Copy URLClassLoaderTests xml and script files ...
		-->
		<copy todir="${build.dir}">
			<fileset dir="${src}" includes="*.bat,*.sh,*.xml" excludes="playlist.xml" />
		</copy>
		<!--
		2.) Prepare and compile Sanity test cases ...
		-->
		<mkdir dir="${build.dir}/Sanity"/>
		<!-- Sanity/jnurlcldr -->		
		<mkdir dir="${build.dir}/Sanity/jnurlcldr"/>
		<mkdir dir="${build.dir}/Sanity/jnurlcldr/shared"/>
		<mkdir dir="${build.dir}/Sanity/jnurlcldr/shared/sanity"/>		
		<copy todir="${build.dir}/Sanity/jnurlcldr/shared/sanity">
			<fileset dir="./Sanity/jnurlcldr/shared/sanity">
			</fileset>
		</copy>
		<javac srcdir="${build.dir}/Sanity/jnurlcldr/shared/sanity" destdir="${build.dir}/Sanity/" 
			debug="on" debuglevel="lines,vars,source" fork="true" executable="${compiler.javac}"/>

		<!-- Sanity/VerifyClasses/jnurlcldr -->
		<mkdir dir="${build.dir}/Sanity/VerifyClasses"/>
		<mkdir dir="${build.dir}/Sanity/VerifyClasses/jnurlcldr"/>
		<mkdir dir="${build.dir}/Sanity/VerifyClasses/jnurlcldr/shared"/>
		<mkdir dir="${build.dir}/Sanity/VerifyClasses/jnurlcldr/shared/sanity"/>	
		<copy todir="${build.dir}/Sanity/VerifyClasses/jnurlcldr/shared/sanity">
			<fileset dir="./Sanity/VerifyClasses/jnurlcldr/shared/sanity">
			</fileset>
		</copy>		
		<javac srcdir="${build.dir}/Sanity/VerifyClasses/jnurlcldr/shared/sanity" destdir="${build.dir}/Sanity/VerifyClasses/" 
			debug="on" debuglevel="lines,vars,source" fork="true" executable="${compiler.javac}"/>
		
		<!-- Sanity config, batch, and shell files -->
		<copy todir="${build.dir}/Sanity">
			<fileset dir="./Sanity" includes="*.bat,*.sh,*.xml">
			</fileset>
		</copy>
		
		<!--
		3.) Prepare and compile FindStore test cases ...
		-->
		<mkdir dir="${build.dir}/FindStore"/>
		
		<!-- FindStore config, batch, and shell files -->
		<copy todir="${build.dir}/FindStore">
			<fileset dir="./FindStore" includes="*.bat,*.sh,*.xml,nothing.txt">
			</fileset>
		</copy>
		
		<!-- FindStore/jnurlcldr -->
		<mkdir dir="${build.dir}/FindStore/jnurlcldr"/>
		<mkdir dir="${build.dir}/FindStore/jnurlcldr/shared"/>
		<mkdir dir="${build.dir}/FindStore/jnurlcldr/shared/findstore"/>
		<copy todir="${build.dir}/FindStore/jnurlcldr/shared/findstore">
			<fileset dir="./FindStore/jnurlcldr/shared/findstore">
			</fileset>
		</copy>
		<javac srcdir="${build.dir}/FindStore/jnurlcldr/shared/findstore" destdir="${build.dir}/FindStore/" 
			debug="on" debuglevel="lines,vars,source" fork="true" executable="${compiler.javac}"/>
		
		<!-- Copy M,N,O,P class files into the correct directories -->
		<mkdir dir="${build.dir}/FindStore/M_Classes"/>
		<mkdir dir="${build.dir}/FindStore/M_Classes/jnurlcldr"/>
		<mkdir dir="${build.dir}/FindStore/M_Classes/jnurlcldr/shared"/>
		<mkdir dir="${build.dir}/FindStore/M_Classes/jnurlcldr/shared/findstore"/>
		<copy todir="${build.dir}/FindStore/M_Classes/jnurlcldr/shared/findstore">
			<fileset dir="${build.dir}/FindStore/jnurlcldr/shared/findstore" includes="M*.class">
			</fileset>
		</copy>
		
		<mkdir dir="${build.dir}/FindStore/N_Classes"/>
		<mkdir dir="${build.dir}/FindStore/N_Classes/jnurlcldr"/>
		<mkdir dir="${build.dir}/FindStore/N_Classes/jnurlcldr/shared"/>
		<mkdir dir="${build.dir}/FindStore/N_Classes/jnurlcldr/shared/findstore"/>
		<copy todir="${build.dir}/FindStore/N_Classes/jnurlcldr/shared/findstore">
			<fileset dir="${build.dir}/FindStore/jnurlcldr/shared/findstore" includes="N*.class">
			</fileset>
		</copy>
		
		<mkdir dir="${build.dir}/FindStore/O_Classes"/>
		<mkdir dir="${build.dir}/FindStore/O_Classes/jnurlcldr"/>
		<mkdir dir="${build.dir}/FindStore/O_Classes/jnurlcldr/shared"/>
		<mkdir dir="${build.dir}/FindStore/O_Classes/jnurlcldr/shared/findstore"/>
		<copy todir="${build.dir}/FindStore/O_Classes/jnurlcldr/shared/findstore">
			<fileset dir="${build.dir}/FindStore/jnurlcldr/shared/findstore" includes="O*.class">
			</fileset>
		</copy>
		
		<mkdir dir="${build.dir}/FindStore/P_Classes"/>
		<mkdir dir="${build.dir}/FindStore/P_Classes/jnurlcldr"/>
		<mkdir dir="${build.dir}/FindStore/P_Classes/jnurlcldr/shared"/>
		<mkdir dir="${build.dir}/FindStore/P_Classes/jnurlcldr/shared/findstore"/>
		<copy todir="${build.dir}/FindStore/P_Classes/jnurlcldr/shared/findstore">
			<fileset dir="${build.dir}/FindStore/jnurlcldr/shared/findstore" includes="P*.class">
			</fileset>
		</copy>
		
		<!-- Create sharedClassesResults directory -->
		<mkdir dir="${build.dir}/FindStore/sharedClassesResults"/>
		<copy todir="${build.dir}/FindStore/sharedClassesResults">
			<fileset dir="${build.dir}/FindStore" includes="nothing.txt">
			</fileset>
		</copy>
		
		
		<!-- FindStore/VerifyClasses -->
		<mkdir dir="${build.dir}/FindStore/VerifyClasses"/>
		<mkdir dir="${build.dir}/FindStore/VerifyClasses/jnurlcldr"/>
		<mkdir dir="${build.dir}/FindStore/VerifyClasses/jnurlcldr/shared"/>
		<mkdir dir="${build.dir}/FindStore/VerifyClasses/jnurlcldr/shared/findstore"/>		
		<copy todir="${build.dir}/FindStore/VerifyClasses/jnurlcldr/shared/findstore">
			<fileset dir="./FindStore/VerifyClasses/jnurlcldr/shared/findstore">
			</fileset>
		</copy>
		<javac srcdir="${build.dir}/FindStore/VerifyClasses/jnurlcldr/shared/findstore" destdir="${build.dir}/FindStore/VerifyClasses/" 
				debug="on" debuglevel="lines,vars,source" fork="true" executable="${compiler.javac}">
		</javac>
		
		<!--
		3.) Prepare and compile JarExt test cases ...
		-->
		<mkdir dir="${build.dir}/JarExt"/>
				
		<!-- JarExt config, batch, and shell files -->
		<copy todir="${build.dir}/JarExt">
			<fileset dir="./JarExt" includes="*.bat,*.sh,*.xml">
			</fileset>
		</copy>
		
		<!-- JarExt/jnurlcldr -->
		<mkdir dir="${build.dir}/JarExt/jnurlcldr"/>
		<mkdir dir="${build.dir}/JarExt/jnurlcldr/shared"/>
		<mkdir dir="${build.dir}/JarExt/jnurlcldr/shared/jarexttests"/>		
		<copy todir="${build.dir}/JarExt/jnurlcldr/shared/jarexttests">
			<fileset dir="./JarExt/jnurlcldr/shared/jarexttests">
			</fileset>
		</copy>
		<javac srcdir="${build.dir}/JarExt/jnurlcldr/shared/jarexttests" destdir="${build.dir}/JarExt/" 
			debug="on" debuglevel="lines,vars,source" fork="true" executable="${compiler.javac}">
		</javac>
		
		
		<!-- JarExt/VerifyClasses -->
		<mkdir dir="${build.dir}/JarExt/VerifyClasses"/>
		<mkdir dir="${build.dir}/JarExt/VerifyClasses/jnurlcldr"/>
		<mkdir dir="${build.dir}/JarExt/VerifyClasses/jnurlcldr/shared"/>
		<mkdir dir="${build.dir}/JarExt/VerifyClasses/jnurlcldr/shared/jarexttests"/>		
		<copy todir="${build.dir}/JarExt/VerifyClasses/jnurlcldr/shared/jarexttests">
			<fileset dir="./JarExt/VerifyClasses/jnurlcldr/shared/jarexttests">
			</fileset>
		</copy>
		<javac srcdir="${build.dir}/JarExt/VerifyClasses/jnurlcldr/shared/jarexttests" destdir="${build.dir}/JarExt/VerifyClasses/" 
			debug="on" debuglevel="lines,vars,source" fork="true" executable="${compiler.javac}">
		</javac>
		
		<!-- Manifests -->
		<mkdir dir="${build.dir}/JarExt/Manifests"/>
		<mkdir dir="${build.dir}/JarExt/Manifests/B"/>
		<mkdir dir="${build.dir}/JarExt/Manifests/E"/>
		<mkdir dir="${build.dir}/JarExt/Manifests/F"/>
		<mkdir dir="${build.dir}/JarExt/Manifests/H"/>		
		<copy todir="${build.dir}/JarExt/Manifests/B">
			<fileset dir="./JarExt/Manifests/B"></fileset>
		</copy>
		<copy todir="${build.dir}/JarExt/Manifests/E">
			<fileset dir="./JarExt/Manifests/E"></fileset>
		</copy>
		<copy todir="${build.dir}/JarExt/Manifests/F">
			<fileset dir="./JarExt/Manifests/F"></fileset>
		</copy>
		<copy todir="${build.dir}/JarExt/Manifests/H">
			<fileset dir="./JarExt/Manifests/H"></fileset>
		</copy>
		
		<!--
		4.) Prepare and compile SignedSealed test cases ...
		-->
		<mkdir dir="${build.dir}/SignedSealed"/>
						
		<!-- SignedSealed config, batch, and shell files -->
		<copy todir="${build.dir}/SignedSealed">
			<fileset dir="./SignedSealed" includes="*.bat,*.sh,*.xml,benKeyStore,benKeyStore.forMVS">
			</fileset>
		</copy>
		
		<!-- SignedSealed/jnurlcldr -->
		<mkdir dir="${build.dir}/SignedSealed/jnurlcldr"/>
		<mkdir dir="${build.dir}/SignedSealed/jnurlcldr/shared"/>
		<mkdir dir="${build.dir}/SignedSealed/jnurlcldr/shared/notsealed"/>
		<mkdir dir="${build.dir}/SignedSealed/jnurlcldr/shared/signedsealed"/>	
		<copy todir="${build.dir}/SignedSealed/jnurlcldr/shared/notsealed">
			<fileset dir="./SignedSealed/jnurlcldr/shared/notsealed">
			</fileset>
		</copy>		
		<copy todir="${build.dir}/SignedSealed/jnurlcldr/shared/signedsealed">
			<fileset dir="./SignedSealed/jnurlcldr/shared/signedsealed">
			</fileset>
		</copy>
		<javac srcdir="${build.dir}/SignedSealed/jnurlcldr/shared/signedsealed:${build.dir}/SignedSealed/jnurlcldr/shared/notsealed" 
			destdir="${build.dir}/SignedSealed/" debug="on" debuglevel="lines,vars,source" fork="true" executable="${compiler.javac}" >
		</javac>

		<!-- SignedSealed/Manifests -->
		<mkdir dir="${build.dir}/SignedSealed/Manifests"/>
		<mkdir dir="${build.dir}/SignedSealed/Manifests/AB"/>
		<copy todir="${build.dir}/SignedSealed/Manifests/AB">
			<fileset dir="./SignedSealed/Manifests/AB"></fileset>
		</copy>
		
		<!--
		4.) Prepare and compile NonExistJar test cases ...
		-->
		<mkdir dir="${build.dir}/NonExistJar"/>
								
		<!-- NonExistJar config, batch, and shell files -->
		<copy todir="${build.dir}/NonExistJar">
			<fileset dir="./NonExistJar" includes="*.bat,*.sh,*.xml">
			</fileset>
		</copy>
		
		<!-- NonExistJar/jnurlcldr -->
		<mkdir dir="${build.dir}/NonExistJar/jnurlcldr"/>
		<mkdir dir="${build.dir}/NonExistJar/jnurlcldr/shared"/>
		<mkdir dir="${build.dir}/NonExistJar/jnurlcldr/shared/nonexistjar"/>		
		<copy todir="${build.dir}/NonExistJar/jnurlcldr/shared/nonexistjar">
			<fileset dir="./NonExistJar/jnurlcldr/shared/nonexistjar">
			</fileset>
		</copy>		
		<javac srcdir="${build.dir}/NonExistJar/jnurlcldr/shared/nonexistjar" destdir="${build.dir}/NonExistJar/" 
			debug="on" debuglevel="lines,vars,source" fork="true" executable="${compiler.javac}" >
		</javac>

		<!-- NonExistJar/Rogue -->
		<mkdir dir="${build.dir}/NonExistJar/Rogue"/>
		<mkdir dir="${build.dir}/NonExistJar/Rogue/jnurlcldr"/>
		<mkdir dir="${build.dir}/NonExistJar/Rogue/jnurlcldr/shared"/>
		<mkdir dir="${build.dir}/NonExistJar/Rogue/jnurlcldr/shared/nonexistjar"/>
		<copy todir="${build.dir}/NonExistJar/Rogue/jnurlcldr/shared/nonexistjar">
			<fileset dir="./NonExistJar/Rogue/jnurlcldr/shared/nonexistjar">
			</fileset>
		</copy>
		<javac srcdir="${build.dir}/NonExistJar/Rogue/jnurlcldr/shared/nonexistjar" destdir="${build.dir}/NonExistJar/Rogue/" 
			debug="on" debuglevel="lines,vars,source" fork="true" executable="${compiler.javac}" >
		</javac>
	</target>
	

	<target name="dist" depends="compile" description="generate the distribution">
		<jar jarfile="${DEST}/URLClassLoaderTests.jar" filesonly="true">
			<fileset dir="${build.dir}" />
		</jar>
		<copy todir="${DEST}">
			<fileset dir="${src}" />
			<fileset dir="${src}" includes="*.mk" />
		</copy>
	</target>
	
	<target name="clean" depends="dist" description="clean up">
		<!-- Delete the ${build} directory trees -->
		<delete dir="${build.dir}" />
	</target>
	<target name="build" >
		<antcall target="clean" inheritall="true" />
	</target>
</project>