<?xml version="1.0" encoding="UTF-8" standalone="no" ?>

<!--
  Copyright (c) 2017, 2017 IBM Corp. and others

  This program and the accompanying materials are made available under
  the terms of the Eclipse Public License 2.0 which accompanies this
  distribution and is available at https://www.eclipse.org/legal/epl-2.0/
  or the Apache License, Version 2.0 which accompanies this distribution and
  is available at https://www.apache.org/licenses/LICENSE-2.0.

  This Source Code may also be made available under the following
  Secondary Licenses when the conditions for such availability set
  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
  General Public License, version 2 with the GNU Classpath
  Exception [1] and GNU General Public License, version 2 with the
  OpenJDK Assembly Exception [2].

  [1] https://www.gnu.org/software/classpath/license.html
  [2] http://openjdk.java.net/legal/assembly-exception.html

  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->

<!DOCTYPE suite SYSTEM "cmdlinetester.dtd">

<suite id="J9 Command-Line Option Tests" timeout="180">
 <variable name="CP" value="-cp $Q$$FIBJAR$$Q$" />
 <variable name="TARGET" value="VMBench.FibBench" />
 <variable name="CLASS" value="-cp $Q$$FIBJAR$$Q$ VMBench.FibBench" />
 <variable name="FIBOUT" value=".*Fibonacci.*iterations.*" />
 <variable name="SYSPROPS" value="-cp $Q$$RESJAR$$Q$ SystemProperties" />
 <variable name="INVALIDLOCKWORDMODE" value=".*JVMJ9VM110E.*" />
 <variable name="INVALIDLOCKWORDOPTION" value=".*JVMJ9VM111E.*" />
 <variable name="INVALIDTENANTLOCKWORDOPTION" value=".*JVMJ9VM132E.*" />
 <variable name="SCHEDCOMPAT1" value=".*sched_compat_yield=1,.*" />
 <variable name="NOSCHEDCOMPAT" value=".*sched_compat_yield= ,.*" />
 <variable name="SCHEDYIELD" value="yieldAlgorithm=0," />
 <variable name="CONSTANTUSLEEP" value="yieldAlgorithm=2," />
 <variable name="INCREASINGUSLEEP" value="yieldAlgorithm=3," />
 <variable name="VERSION" value="-version" />
 <variable name="INVALIDVERYLONGOPTION" value
 
 <test id="help">
  <command>$EXE$ -help</command>
  <output>.*Usage.*options.*class.*args.*</output>
 </test>

 <test id="classpath">
  <command>$EXE$ -classpath $Q$$FIBJAR$$Q$ $TARGET$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="cp">
  <command>$EXE$ $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="verify">
  <command>$EXE$ -verify $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="noverify">
  <command>$EXE$ -noverify $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="Xint">
  <command>$EXE$ -Xint $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="Xnojit">
  <command>$EXE$ -Xnojit $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="Xnoaot">
  <command>$EXE$ -Xnoaot $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="Xfuture">
  <command>$EXE$ -Xfuture $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="Xnoclassgc">
  <command>$EXE$ -Xnoclassgc $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="Xclassgc">
  <command>$EXE$ -Xclassgc $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="Xalwaysclassgc">
  <command>$EXE$ -Xalwaysclassgc $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="Xgcthreads">
  <command>$EXE$ -Xgcthreads1 $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="Xmine">
  <command>$EXE$ -Xmine2K $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="Xmaxe">
  <command>$EXE$ -Xmaxe16K $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="Xmrx">
  <command>$EXE$ -Xmrx32K $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="Xmoi">
  <command>$EXE$ -Xmoi8M $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="Xmx">
  <command>$EXE$ -Xmx16M $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

 <test id="Xmn">
  <command>$EXE$ -Xmn512K -Xgcpolicy:gencon -verbose:sizes $CLASS$</command>
  <output>.*Xmn.*512K.*space.*</output>
 </test>

 <test id="Xmnx">
  <command>$EXE$ -Xmnx1M -Xgcpolicy:gencon -verbose:sizes $CLASS$</command>
  <output>.*Xmnx1M.*</output>
 </test>

 <test id="X">
  <command>$EXE$ $CP$ -X $TARGET$</command>
  <output type="success">.*options.are.non.standard.and.subject.to.change.without.notice.*</output>
  <output type="success">.*These.extra.options.are.subject.to.change.without.notice.*</output>
  </test>

 <test id="verbose:class">
  <command>$EXE$ $CP$ -verbose:class $TARGET$</command>
  <output>.*class.load:.*</output>
 </test>

 <test id="verbose:gc">
  <command>$EXE$ $CP$ -verbose:gc $TARGET$</command>
  <output>.*verbosegc.*</output>
 </test>

 <test id="verbose:stack">
  <command>$EXE$ $CP$ -verbose:stack $TARGET$</command>
  <output>.*Verbose.stack:.*</output>
 </test>

 <test id="verbose:sizes">
  <command>$EXE$ $CP$ -verbose:sizes $TARGET$</command>
  <output>.*operating.system.thread.stack.size.*</output>
 </test>

 <test id="Xmca">
  <command>$EXE$ $CP$ -Xmca16K -verbose:sizes $TARGET$</command>
  <output>.*Xmca16K.*</output>
 </test>

 <test id="Xmco">
  <command>$EXE$ $CP$ -Xmco64K -verbose:sizes $TARGET$</command>
  <output>.*Xmco64K.*</output>
 </test>

 <test id="Xms">
  <command>$EXE$ $CP$ -Xms4M -verbose:sizes $TARGET$</command>
  <output>.*Xms4M.*</output>
 </test>

 <test id="Xmr">
  <command>$EXE$ $CP$ -Xmr32K -verbose:sizes $TARGET$</command>
  <output>.*Xmr32K.*</output>
 </test>

 <test id="Xmso">
  <command>$EXE$ $CP$ -Xmso256K -verbose:sizes $TARGET$</command>
  <output>.*Xmso256K.*</output>
 </test>

 <test id="Xiss">
  <command>$EXE$ $CP$ -Xiss1K -verbose:sizes $TARGET$</command>
  <output>.*Xiss1K.*</output>
 </test>

 <test id="Xitn0">
  <command>$EXE$ $CP$ -Xitn0 -Xtrace:print={j9bcu.197} $TARGET$</command>
  <output>.*BCU stringInternTableNotCreated</output>
 </test>

 <test id="Xitn10000">
  <command>$EXE$ $CP$ -Xitn10000 -Xtrace:print={j9bcu.195} $TARGET$</command>
  <output>.*BCU stringInternTableCreated: nodeCount=10000</output>
 </test>

 <test id="D">
  <command>$EXE$ -Duser.region=OttawaCanada $SYSPROPS$</command>
  <output>.*OttawaCanada.*</output>
 </test>

 <test id="Xbootclasspath/a">
  <command>$EXE$ $CP$ -Xbootclasspath/a:$Q$$FIBJAR$$Q$ $TARGET$</command>
  <output>$FIBOUT$</output>
 </test>
 
 <test id="-Xlockword bad mode">
  <command>$EXE$ $CP$ -Xlockword:mode=bad $TARGET$</command>
  <output type="required">$INVALIDLOCKWORDMODE$</output>
  <return type="success" value="1" />
 </test>
 
 <test id="-Xlockword default mode">
  <command>$EXE$ $CP$ -Xlockword:mode=default $TARGET$</command>
  <return type="success" value="0" />
 </test>
 
  <test id="-Xlockword minimizeFootprint mode">
  <command>$EXE$ $CP$ -Xlockword:mode=minimizeFootprint $TARGET$</command>
  <return type="success" value="0" />
 </test>
 
 <test id="-Xlockword all mode">
  <command>$EXE$ $CP$ -Xlockword:mode=all $TARGET$</command>
  <return type="success" value="0" />
 </test>
 
 <test id="-Xlockword bad option">
  <command>$EXE$ $CP$ -Xlockword:badoption1 $TARGET$</command>
  <return type="required" value="1" />
  <output type="success" >$INVALIDLOCKWORDOPTION$</output>
 </test>
 
 <test id="-Xlockword bad option trailing separator">
  <command>$EXE$ $CP$ -Xlockword:mode=default, $TARGET$</command>
  <return type="required" value="1" />
  <output type="success" >$INVALIDLOCKWORDOPTION$</output>
 </test>
 
  <test id="-Xlockword empty option">
  <command>$EXE$ $CP$ -Xlockword:, $TARGET$</command>
  <return type="required" value="1" />
  <output type="success" >$INVALIDLOCKWORDOPTION$</output>
 </test>
 
 <test id="-Xlockword setting lockword">
  <command>$EXE$ $CP$ -Xlockword:mode=default,lockword=a $TARGET$</command>
  <return type="success" value="0" />
 </test>
 
 <test id="-Xlockword setting noLockword">
  <command>$EXE$ $CP$ -Xlockword:mode=default,noLockword=b $TARGET$</command>
  <return type="success" value="0" />
 </test>
 
 <test id="-Xlockword setting what">
  <command>$EXE$ $CP$ -Xlockword:what $TARGET$</command>
  <return type="required" value="0" />
  <output type="success" >Lockword Configuration</output>
 </test>
 
 <test id="-Xlockword with two instance on command line">
  <command>$EXE$ $CP$ -Xlockword:what -Xlockword:lockword=a $TARGET$</command>
  <return type="required" value="0" />
  <output type="success" >Lockword Configuration</output>
 </test>
 
  <test id="-Xlockword with duplicates">
  <command>$EXE$ $CP$ -Xlockword:what -Xlockword:lockword=a,lockword=a $TARGET$</command>
  <return type="required" value="0" />
  <output type="success" >Lockword Configuration</output>
 </test>

 <test id="-Xthr:secondarySpinForObjectMonitors on command line">
  <command>$EXE$ $CP$ -Xthr:secondarySpinForObjectMonitors $TARGET$</command>
  <return type="required" value="0" />
   <output>$FIBOUT$</output>
 </test>
 
 <test id="-Xthr:noSecondarySpinForObjectMonitors on command line">
  <command>$EXE$ $CP$ -Xthr:noSecondarySpinForObjectMonitors $TARGET$</command>
  <return type="required" value="0" />
   <output>$FIBOUT$</output>
 </test>
 
 <test id="-Xthr:adaptSpin on command line">
  <command>$EXE$ $CP$ -Xthr:adaptSpin $TARGET$</command>
  <return type="required" value="0" />
   <output>$FIBOUT$</output>
 </test>
 
 <test id="-Xthr:noAdaptSpin on command line">
  <command>$EXE$ $CP$ -Xthr:noAdaptSpin $TARGET$</command>
  <return type="required" value="0" />
   <output>$FIBOUT$</output>
 </test>

 <test id="-Xpreloaduser32">
  <command>$EXE$ $CP$ -Xpreloaduser32 $TARGET$</command>
  <return type="required" value="0" />
  <output>$FIBOUT$</output>
 </test>

 <test id="-Xpreloaduser32 -Xprotectcontiguous">
  <command>$EXE$ $CP$ -Xpreloaduser32 -Xprotectcontiguous $TARGET$</command>
  <return type="required" value="0" />
  <output>$FIBOUT$</output>
 </test>

 <test id="-Xpreloaduser32 -Xnoprotectcontiguous">
  <command>$EXE$ $CP$ -Xpreloaduser32 -Xnoprotectcontiguous $TARGET$</command>
  <return type="required" value="0" />
  <output>$FIBOUT$</output>
 </test>

 <test id="-Xnopreloaduser32">
  <command>$EXE$ $CP$ -Xnopreloaduser32 $TARGET$</command>
  <return type="required" value="0" />
  <output>$FIBOUT$</output>
 </test>

 <test id="-Xnopreloaduser32 -Xprotectcontiguous">
  <command>$EXE$ $CP$ -Xnopreloaduser32 -Xprotectcontiguous $TARGET$</command>
  <return type="required" value="0" />
  <output>$FIBOUT$</output>
 </test>

 <test id="-Xnopreloaduser32 -Xnoprotectcontiguous">
  <command>$EXE$ $CP$ -Xnopreloaduser32 -Xnoprotectcontiguous $TARGET$</command>
  <return type="required" value="0" />
  <output>$FIBOUT$</output>
 </test>

 <test id="-Xprotectcontiguous">
  <command>$EXE$ $CP$ -Xprotectcontiguous $TARGET$</command>
  <return type="required" value="0" />
  <output>$FIBOUT$</output>
 </test>

 <test id="-Xnoprotectcontiguous">
  <command>$EXE$ $CP$ -Xnoprotectcontiguous $TARGET$</command>
  <return type="required" value="0" />
  <output>$FIBOUT$</output>
 </test>
 
  <test id="-Xtune:virtualized">
	<command>$EXE$ $CP$ -Xtune:virtualized $TARGET$</command>
	<return type="success" value="0" />
  </test>

 <test id="-Xthr:cfsYield">
	<command>$EXE$ $CP$ -Xthr:cfsYield -Xtrace:iprint=j9vm.445 $TARGET$</command>
	<output type="success" regex="no">$INCREASINGUSLEEP$</output>
	<output type="success" regex="yes">$SCHEDCOMPAT1$</output>
	<output type="success" regex="yes">$NOSCHEDCOMPAT$</output>
 	<return type="required" value="0" />
 </test>

 <test id="-Xthr:noCfsYield">
  <command>$EXE$ $CP$ -Xthr:noCfsYield -Xtrace:iprint=j9vm.445 $TARGET$</command>
  <output type="success" regex="no">$SCHEDYIELD$</output>
  <output type="success" regex="yes">$SCHEDCOMPAT1$</output>
  <output type="success" regex="yes">$NOSCHEDCOMPAT$</output>
  <return type="required" value="0" />
 </test>
 
 <test id="-Xthr:yieldAlgorithm=3">
  <command>$EXE$ $CP$ -Xthr:yieldAlgorithm=3 -Xtrace:iprint=j9vm.445 $TARGET$</command>
  <output type="success" regex="no">$INCREASINGUSLEEP$</output>
  <return type="required" value="0" />
 </test>

 <test id="-Xthr:yieldUsleepMultiplier=60">
  <command>$EXE$ $CP$  -Xthr:yieldUsleepMultiplier=60 -Xtrace:iprint=j9vm.445 $TARGET$</command>
  <output type="success" regex="no">yieldUsleepMultiplier=60.</output>
  <return type="required" value="0" />
 </test>

 <test id="-Xthr:cfsYield,noCfsYield">
  <command>$EXE$ $CP$ -Xthr:cfsYield,noCfsYield -Xtrace:iprint=j9vm.445 $TARGET$</command>
  <output type="success" regex="no">$SCHEDYIELD$</output>
  <return type="required" value="0" />
 </test>
 
 <test id="-Xthr:yieldAlgorithm=2,yieldUsleepMultiplier=10">
  <command>$EXE$ $CP$ -Xthr:yieldAlgorithm=2,yieldUsleepMultiplier=10 -Xtrace:iprint=j9vm.445 $TARGET$</command>
  <output type="success" regex="no">$CONSTANTUSLEEP$</output>
  <output type="success" regex="no">yieldUsleepMultiplier=10.</output>
  <return type="required" value="0" />
 </test>

 <test id="-Xaggressive">
  <command>$EXE$ $CP$ -Xaggressive -Xtrace:iprint=j9vm.445 $TARGET$</command>
  <output type="success" regex="no">$INCREASINGUSLEEP$</output>
  <output type="success" regex="yes">$SCHEDCOMPAT1$</output>
  <output type="success" regex="yes">$NOSCHEDCOMPAT$</output>
  <return type="required" value="0" />
 </test>

 <test id="defaultBehaviourOfCFS">
  <command>$EXE$ $CP$ -Xtrace:iprint=j9vm.445 $TARGET$</command>
  <output type="success" regex="no">$INCREASINGUSLEEP$</output>
  <output type="success" regex="yes">$SCHEDCOMPAT1$</output>
  <output type="success" regex="yes">$NOSCHEDCOMPAT$</output>
  <return type="required" value="0" />
 </test>
  
 <test id="Test entitledcpus option accepted">
  <command>$EXE$ -Xentitledcpus5 $VERSION$ </command>   		
  <output regex="no" type="success">version</output>
  <output regex="no" type="failure">JVMJ9VM013W</output> 
 </test>

 <test id="Test entitledcpus negative value">
  <command>$EXE$ -Xentitledcpus-1 $VERSION$ </command>
  <output regex="no" type="success">JVMJ9VM013W</output>   
  <output regex="no" type="failure">version</output>
 </test>
	
 <test id="Test entitledcpus non-numeric value">
  <command>$EXE$ -XentitledcpusZ $VERSION$ </command>  
  <output regex="no" type="success">JVMJ9VM013W</output>   
  <output regex="no" type="failure">version</output>
 </test>
	
 <test id="Test entitledcpus alphanumeric value">
  <command>$EXE$ -Xentitledcpus123Z $VERSION$ </command>  
  <output regex="no" type="success">JVMJ9VM013W</output>   
  <output regex="no" type="failure">version</output>
 </test>
 
 
 <test id="Verify -XX:+VMLockClassLoader sets the flag">
  <command>$EXE$ $CP$ -XX:-VMLockClassLoader -XX:+VMLockClassLoader -Xtrace:print=j9vm.463 $TARGET$</command>
  <output type="required" regex="yes">.*locking enabled.*</output>
  <return type="success" value="0" />
 </test>
 
 <test id="Verify -XX:-VMLockClassLoader clears the flag">
  <command>$EXE$ $CP$ -XX:+VMLockClassLoader -XX:-VMLockClassLoader -Xtrace:print=j9vm.463 $TARGET$</command>
  <output type="required" regex="yes">.*locking disabled.*</output>
  <return type="success" value="0" />
 </test>

 <test id="Verify a very long (~1500 bytes) command line option">
  <command>$EXE$ -Djava.home=$INVALIDVERYLONGOPTION$ $VERSION$</command>
  <output regex="no" type="success">Error: Could not create the Java Virtual Machine</output>
  <output regex="no" type="failure">version</output>
 </test> 
 
 <test id="Test combining options -Xint and -XtlhPrefetch">
  <command>$EXE$ -Xint -XtlhPrefetch -version</command>
  <output regex="no" type="success">version</output>
  <output regex="no" type="failure">JVMJ9VM007E</output>
 </test>
  
 <test id="Test option -Xtrace:output" timeout="60">
  <command>$EXE$ -Xtrace:output=testTraceOutput.trc -version</command>
  <output regex="no" type="success">version</output>
 </test>
  
 <test id="-XX:-InterleaveMemory">
  <command>$EXE$ -XX:-InterleaveMemory $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>
<test id="-XX:-InterleaveMemory -XX:+InterleaveMemory">
  <command>$EXE$ -XX:-InterleaveMemory -XX:+InterleaveMemory $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

<test id="-XX:+InterleaveMemory">
  <command>$EXE$ -XX:+InterleaveMemory $CLASS$</command>
  <output>$FIBOUT$</output>
 </test>

<test id="-Xdump:suspendwith=2 -Xdump:java:events=vmstop" platforms="linux.*">
  <command>$EXE$ -Xdump:suspendwith=2 -Xdump:java:events=vmstop $CLASS$</command>
  <output type="success">$FIBOUT$</output>
  <output regex="yes" type="required">.*JVM requested Java dump using.*</output>
 </test>

<test id="-Xdump:suspendwith=2 -Xdump:java:events=vmstop" platforms="win.*,aix.*">
  <command>$EXE$ -Xdump:suspendwith=2 -Xdump:java:events=vmstop $CLASS$</command>
  <output>=2</output> <output regex="yes" type="success">.*Dump option unrecognized.*-Xdump:suspendwith.*</output>
</test>

 <test id="Test system properties that resemble Unicode escapes">
  <command>$EXE$ -Darg1=\u0058 -Darg2=\\u0058 -XshowSettings:properties -version</command>
  <output regex="no" type="success">arg1 = \u0058</output>
  <output regex="no" type="success">arg2 = \\u0058</output>
  </test>
  
 <test id="Test system properties that resemble Unicode escapes (with translation)">
  <command>$EXE$ -Xargencoding -Darg1=\u0058 -Darg2=\\u0058 -XshowSettings:properties -version</command>
  <output regex="no" type="success">arg1 = X</output>
  <output regex="no" type="success">arg2 = \X</output>
  </test>
  
</suite>

