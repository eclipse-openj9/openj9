<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (c) 2017, 2017 IBM Corp. and others

  This program and the accompanying materials are made available under
  the terms of the Eclipse Public License 2.0 which accompanies this
  distribution and is available at https://www.eclipse.org/legal/epl-2.0/
  or the Apache License, Version 2.0 which accompanies this distribution and
  is available at https://www.apache.org/licenses/LICENSE-2.0.

  This Source Code may also be made available under the following
  Secondary Licenses when the conditions for such availability set
  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
  General Public License, version 2 with the GNU Classpath
  Exception [1] and GNU General Public License, version 2 with the
  OpenJDK Assembly Exception [2].

  [1] https://www.gnu.org/software/classpath/license.html
  [2] http://openjdk.java.net/legal/assembly-exception.html

  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->
<playlist xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../TestConfig/playlist.xsd">
	<test>
		<testCaseName>SVT_Modularity.cpmp.test.cpmp</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode101</variation>
			<variation>Mode601</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=CpMpTest -test-args=variant=CpMp -results-root=$(Q)$(TEMP_ROOT)$(D)cpmp.test.cpmp$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.cpmp.test.mp</testCaseName>
		<variations>
			<variation>Mode101</variation>
			<variation>Mode601</variation>
			<variation>Mode119</variation>
			<variation>Mode501</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=CpMpTest -test-args=variant=Mp -results-root=$(Q)$(TEMP_ROOT)$(D)cpmp.test.mp$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.automatic.modules.test1</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode601</variation>
			<variation>Mode119</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=AutomaticModulesTest -test-args=variant=AutomaticModulesTest1 -results-root=$(Q)$(TEMP_ROOT)$(D)automatic.modules.test1$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.automatic.modules.test2</testCaseName>
		<variations>
			<variation>Mode101</variation>
			<variation>Mode501</variation>
			<variation>Mode551</variation>
			<variation>Mode624</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=AutomaticModulesTest -test-args=variant=AutomaticModulesTest2 -results-root=$(Q)$(TEMP_ROOT)$(D)automatic.modules.test2$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.implied.readability.test1</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode601</variation>
			<variation>Mode119</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=AutomaticModulesTest -test-args=variant=ImpliedReadabilityTest1 -results-root=$(Q)$(TEMP_ROOT)$(D)implied.readability.test1$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.implied.readability.test2</testCaseName>
		<variations>
			<variation>Mode101</variation>
			<variation>Mode501</variation>
			<variation>Mode624</variation>
			<variation>Mode117</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=AutomaticModulesTest -test-args=variant=ImpliedReadabilityTest2 -results-root=$(Q)$(TEMP_ROOT)$(D)implied.readability.test2$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.implied.readability.test3</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode601</variation>
			<variation>Mode119</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=AutomaticModulesTest -test-args=variant=ImpliedReadabilityTest3 -results-root=$(Q)$(TEMP_ROOT)$(D)implied.readability.test3$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.explicit.modules.test</testCaseName>
		<variations>
			<variation>Mode101</variation>
			<variation>Mode601</variation>
			<variation>Mode119</variation>
			<variation>Mode501</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=ExplicitModulesTest -results-root=$(Q)$(TEMP_ROOT)$(D)explicit.modules.test$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.jdk.internal.api.test</testCaseName>
		<variations>
			<variation>Mode101</variation>
			<variation>Mode501</variation>
			<variation>Mode624</variation>
			<variation>Mode117</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=JDKInternalAPIsTest -results-root=$(Q)$(TEMP_ROOT)$(D)jdk.internal.api.test$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.classloading.test</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode501</variation>
			<variation>Mode551</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=CLTest -test-args=variant=CLTest -results-root=$(Q)$(TEMP_ROOT)$(D)classloading.test$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.classloading.customimage.test</testCaseName>
		<variations>
			<variation>Mode101</variation>
			<variation>Mode601</variation>
			<variation>Mode501</variation>
			<variation>Mode117</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=CLTestImage -test-args=variant=CLTest -results-root=$(Q)$(TEMP_ROOT)$(D)classloading.customimage.test$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.classloading.resource.test</testCaseName>
		<variations>
			<variation>Mode119</variation>
			<variation>Mode610</variation>
			<variation>Mode301</variation>
			<variation>Mode551</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=CLTest -test-args=variant=CLTestUsingResourceFiles -results-root=$(Q)$(TEMP_ROOT)$(D)classloading.resource.test$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.classloading.customimage.resource.test</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=CLTestImage -test-args=variant=CLTestUsingResourceFiles -results-root=$(Q)$(TEMP_ROOT)$(D)classloading.customimage.resource.test$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.serviceloader.test</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode101</variation>
			<variation>Mode601</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=ServiceLoadersTest -results-root=$(Q)$(TEMP_ROOT)$(D)serviceloader.test$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.patchmodule.test.PlatformModPatchModule</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode101</variation>
			<variation>Mode601</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=PatchModuleTest -test-args=variant=PlatformModPatchModule -results-root=$(Q)$(TEMP_ROOT)$(D)patchmodule.test.PlatformModPatchModule$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.patchmodule.test.AppModPatchModule</testCaseName>
		<variations>
			<variation>Mode119</variation>
			<variation>Mode610</variation>
			<variation>Mode301</variation>
			<variation>Mode551</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=PatchModuleTest -test-args=variant=AppModPatchModule -results-root=$(Q)$(TEMP_ROOT)$(D)patchmodule.test.AppModPatchModule$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.patchmodule.test.UnexportedTypePatchModule</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=PatchModuleTest -test-args=variant=UnexportedTypePatchModule -results-root=$(Q)$(TEMP_ROOT)$(D)patchmodule.test.UnexportedTypePatchModule$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.patchmodule.test.AdvancedPatchModule</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode601</variation>
			<variation>Mode119</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=PatchModuleTest -test-args=variant=AdvancedPatchModule -results-root=$(Q)$(TEMP_ROOT)$(D)patchmodule.test.AdvancedPatchModule$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.patchmodule.test.image.PlatformModPatchModule</testCaseName>
		<variations>
			<variation>Mode119</variation>
			<variation>Mode610</variation>
			<variation>Mode301</variation>
			<variation>Mode551</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=PatchModuleImageTest -test-args=variant=PlatformModPatchModule -results-root=$(Q)$(TEMP_ROOT)$(D)patchmodule.test.image.PlatformModPatchModule$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.patchmodule.test.image.AppModPatchModule</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode601</variation>
			<variation>Mode119</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=PatchModuleImageTest -test-args=variant=AppModPatchModule -results-root=$(Q)$(TEMP_ROOT)$(D)patchmodule.test.image.AppModPatchModule$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.patchmodule.test.image.UnexportedTypePatchModule</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=PatchModuleImageTest -test-args=variant=UnexportedTypePatchModule -results-root=$(Q)$(TEMP_ROOT)$(D)patchmodule.test.image.UnexportedTypePatchModule$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.patchmodule.test.image.AdvancedPatchModule</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode101</variation>
			<variation>Mode601</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=PatchModuleImageTest -test-args=variant=AdvancedPatchModule -results-root=$(Q)$(TEMP_ROOT)$(D)patchmodule.test.image.AdvancedPatchModule$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.upgrademodpath.test.ExpDirModUpgrade</testCaseName>
		<variations>
			<variation>Mode101</variation>
			<variation>Mode610</variation>
			<variation>Mode301</variation>
			<variation>Mode601</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=UpgradeModPathTest -test-args=variant=ExpDirModUpgrade -results-root=$(Q)$(TEMP_ROOT)$(D)upgrademodpath.test.ExpDirModUpgrade$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.upgrademodpath.test.ExpDirModUpgradeCRImage</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode624</variation>
			<variation>Mode551</variation>
			<variation>Mode610</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=UpgradeModPathTest -test-args=variant=ExpDirModUpgradeCRImage -results-root=$(Q)$(TEMP_ROOT)$(D)upgrademodpath.test.ExpDirModUpgradeCRImage$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.upgrademodpath.test.JarredModUpgrade</testCaseName>
		<variations>
			<variation>Mode119</variation>
			<variation>Mode610</variation>
			<variation>Mode101</variation>
			<variation>Mode601</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=UpgradeModPathTest -test-args=variant=JarredModUpgrade -results-root=$(Q)$(TEMP_ROOT)$(D)upgrademodpath.test.JarredModUpgrade$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.upgrademodpath.test.JarredModUpgradeCRImage</testCaseName>
		<variations>
			<variation>Mode117</variation>
			<variation>Mode610</variation>
			<variation>Mode551</variation>
			<variation>Mode601</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=UpgradeModPathTest -test-args=variant=JarredModUpgradeCRImage -results-root=$(Q)$(TEMP_ROOT)$(D)upgrademodpath.test.JarredModUpgradeCRImage$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.jlink.test.requiredmod</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode601</variation>
			<variation>Mode119</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=JlinkTest -test-args=variant=RequiredMod -results-root=$(Q)$(TEMP_ROOT)$(D)jlink.test.requiredmod$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.jlink.test.addmodlimitmod</testCaseName>
		<variations>
			<variation>Mode119</variation>
			<variation>Mode610</variation>
			<variation>Mode301</variation>
			<variation>Mode551</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=JlinkTest -test-args=variant=AddModLimitMod -results-root=$(Q)$(TEMP_ROOT)$(D)jlink.test.addmodlimitmod$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.layers.test</testCaseName>
		<variations>
			<variation>Mode101</variation>
			<variation>Mode551</variation>
			<variation>Mode119</variation>
			<variation>Mode301</variation>
			<variation>Mode117</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=LayersTest -test-args=heapsize=10m -results-root=$(Q)$(TEMP_ROOT)$(D)layers.test$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.loadtest.classloading</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode501</variation>
			<variation>Mode551</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=CLLoadTest -results-root=$(Q)$(TEMP_ROOT)$(D)loadtest.classloading$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.stresstest.classloading.multilayer</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode101</variation>
			<variation>Mode601</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=CLStressWithLayers -results-root=$(Q)$(TEMP_ROOT)$(D)stresstest.classloading.multilayer$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>SVT_Modularity.stresstest.classloading.multilayer.CRI</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode601</variation>
			<variation>Mode119</variation>
		</variations>
		<command>perl $(Q)$(JAVASVT_ROOT)$(D)javasvt$(D)stf$(D)scripts$(D)stf.pl$(Q) -java-args=$(Q)$(JVM_OPTIONS)$(Q) -test-root=$(Q)$(JAVASVT_ROOT)$(D)javasvt$(Q) -javasvt-prereqs=$(Q)$(JAVASVT_ROOT)$(D)..$(D)javasvt_prereqs$(Q) -test=CLStressWithLayersCRI -results-root=$(Q)$(TEMP_ROOT)$(D)stresstest.classloading.multilayer.CRI$(Q); \
	$(TEST_STATUS)</command>
		<tags>
			<tag>extended</tag>
		</tags>
		<subsets>
			<subset>SE90</subset>
		</subsets>
	</test>

</playlist>