// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -5892747615778677812L;

    public static short sFld = 9804;

    public static byte byFld = -113;

    public static float fFld = -86.307F;

    public double dFld = -41.41461;

    public int iFld = 6874;

    public static float fFld1 = -2.360F;

    public static volatile int[] iArrFld = new int[N];

    public int[][] iArrFld1 = new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
    }

    public static long vMeth_check_sum = 0;

    public static long dMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, int i6) {
        int i7 = -28377, i8 = 169, i9 = -13092, i10 = -61003, i11 = -1, i12 = -6, i13 = -5, i14 = -133, i15 = 33, i16 = 61628, iArr[] = new int[N];
        float f = -2.503F;
        boolean b = true;
        double d1 = 7.108354;
        FuzzerUtils.init(iArr, 42);
        iArr = iArr;
        for (i7 = 80; i7 > 2; i7 -= 3) {
            switch(((i7 % 5) * 5) + 72) {
                case 73:
                    f += i7;
                    for (i9 = 1; i9 < 20; i9++) {
                        i10 += (((i9 * i9) + i10) - Test.instanceCount);
                        if (b)
                            continue;
                        i8 = (int) Test.instanceCount;
                        Test.instanceCount *= i7;
                        Test.instanceCount = Test.instanceCount;
                        Test.instanceCount += (-59 + (i9 * i9));
                        for (i11 = 1; 2 > i11; ++i11) {
                            Test.sFld -= (short) i8;
                            iArr[i11 + 1] &= -61;
                            i10 += i8;
                            Test.byFld += (byte) -7;
                            d1 -= i10;
                        }
                        i12 = i10;
                        for (i13 = 1; i13 < 2; ++i13) {
                            Test.instanceCount += i13;
                            i10 += (i13 * i13);
                            d1 -= i13;
                            Test.instanceCount -= i6;
                            i12 &= (int) Test.instanceCount;
                            i5 = i13;
                            i5 -= -6848;
                            i5 += 11;
                            iArr = iArr;
                            i5 -= (int) Test.instanceCount;
                            i8 -= (int) f;
                            iArr[i9] = i9;
                            Test.byFld += (byte) (i13 - i12);
                            i12 += i13;
                        }
                    }
                    i6 <<= (int) Test.instanceCount;
                    for (i15 = i7; i15 < 20; i15++) {
                        f -= (float) d1;
                        i5 -= i13;
                    }
                    break;
                case 80:
                    try {
                        i8 = (8028 % i10);
                        i14 = (199 / i9);
                        iArr[i7] = (i6 % i9);
                    } catch (ArithmeticException a_e) {
                    }
                    break;
                case 90:
                    b = b;
                    break;
                case 85:
                    Test.instanceCount >>= Test.instanceCount;
                    break;
                case 81:
                    iArr[i7 + 1] += i5;
                    break;
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + (b ? 1 : 0) + i11 + i12 + Double.doubleToLongBits(d1) + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr);
    }

    public static double dMeth(long l1) {
        int i1 = 155, i2 = 20026, i3 = -67, i4 = -5, i17 = 55387, i18 = 9, i19 = 78, i20 = -251;
        double d2 = -28.25055;
        boolean b1 = false;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(byArr, (byte) 17);
        for (i1 = 6; 191 > i1; i1++) {
            {
                java.io.PrintStream ax$0 = System.out;
                java.io.PrintStream ax$1 = System.err;
                java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$2);
                System.setErr(ax$2);
                {
                    boolean ax$10 = false;
                    for (int ax$9 = -4400; ax$9 < 1999; ax$9 += 9) {
                        if (!ax$10) {
                            ax$10 = true;
                            {
                                System.setOut(ax$0);
                                System.setErr(ax$1);
                                for (i3 = 1; i3 < 3; ++i3) {
                                    vMeth1(i3, i4);
                                    i2 -= (int) Test.instanceCount;
                                    i4 -= -1225;
                                    if (i1 != 0) {
                                    }
                                    for (i17 = 1; 2 > i17; i17++) {
                                        Test.fFld = (float) d2;
                                        i18 += (i17 ^ (long) Test.fFld);
                                        if (i4 != 0) {
                                        }
                                        i4 <<= i3;
                                        if (i18 != 0) {
                                        }
                                        i4 += (int) d2;
                                        b1 = b1;
                                        i18 <<= (int) Test.instanceCount;
                                    }
                                    for (i19 = 1; 2 > i19; ++i19) {
                                        Test.sFld += (short) (i19 ^ Test.instanceCount);
                                        l1 >>>= Test.sFld;
                                        Test.fFld = i3;
                                        Test.sFld += (short) i4;
                                        l1 *= i1;
                                        i2 += i19;
                                        switch(((i1 % 1) * 5) + 17) {
                                            case 22:
                                                Test.fFld += (i19 - i18);
                                                Test.fFld += (((i19 * i1) + i3) - i19);
                                                if (b1) {
                                                    l1 += (((i19 * i19) + Test.fFld) - l1);
                                                    Test.instanceCount = -6038248449447456103L;
                                                    i4 += i19;
                                                    b1 = b1;
                                                    i2 *= i3;
                                                    i4 = (int) d2;
                                                    i20 += (i19 | (long) Test.fFld);
                                                    d2 = -128;
                                                } else if (b1) {
                                                    byArr[i1 - 1] += (byte) i3;
                                                    Test.sFld -= (short) i17;
                                                    i18 -= i4;
                                                }
                                            default:
                                                Test.fFld = Test.fFld;
                                        }
                                    }
                                }
                                System.setOut(ax$2);
                                System.setErr(ax$2);
                            }
                        }
                        int ax$4 = i20;
                        int ax$5 = i19;
                        int ax$6 = i18;
                        int ax$7 = i1;
                        try {
                            int[] ax$3 = new int[20];
                            while ((ax$3[i18] != i1) & (i1 < i20)) {
                                if (i19 % 20 == 19) {
                                }
                                i19++;
                                i1++;
                            }
                            i1++;
                        } catch (Throwable ax$8) {
                        } finally {
                            i20 = ax$4;
                            i19 = ax$5;
                            i18 = ax$6;
                            i1 = ax$7;
                        }
                    }
                }
                System.setOut(ax$0);
                System.setErr(ax$1);
            }
        }
        long meth_res = l1 + i1 + i2 + i3 + i4 + i17 + i18 + Double.doubleToLongBits(d2) + (b1 ? 1 : 0) + i19 + i20 + FuzzerUtils.checkSum(byArr);
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public static void vMeth(double d, int i, long l) {
        if (ax$11) {
            int ax$12 = i;
            try {
                if (i < 0)
                    ;
            } catch (Throwable ax$13) {
            } finally {
                i = ax$12;
            }
            return;
        }
        int i21 = 0, i22 = -190, i23 = 41444, i24 = -43, i25 = 47, i26 = 3, i27 = -10, i28 = -250, i29 = 1;
        long l3 = 13L, lArr[] = new long[N];
        boolean b2 = true;
        FuzzerUtils.init(lArr, 5317571999370898675L);
        i = (int) (dMeth(Test.instanceCount) + i);
        switch((((i >>> 1) % 6) * 5) + 29) {
            case 35:
                Test.fFld = Test.fFld;
                Test.byFld -= (byte) -131;
                for (i21 = 3; i21 < 146; ++i21) {
                    for (i23 = i21; 4 > i23; ++i23) {
                        Test.instanceCount = Test.instanceCount;
                        i25 = 1;
                        while (--i25 > 0) {
                            i22 += i;
                            i += (int) Test.instanceCount;
                            i = (int) l;
                            i22 -= -4;
                            i22 = 11;
                            i22 += (((i25 * i24) + Test.byFld) - i23);
                            d -= Test.fFld;
                            Test.iArrFld = Test.iArrFld;
                            i22 += i25;
                        }
                        for (i26 = 1; i26 < 1; i26++) {
                            long l2 = 248L;
                            l -= i27;
                            Test.instanceCount += (i26 * i26);
                            Test.iArrFld[i26 - 1] = (int) l;
                            i27 += (((i26 * l2) + l2) - i28);
                            l2 *= Test.byFld;
                        }
                        d = Test.instanceCount;
                        i27 += i23;
                        for (l3 = 1; 1 > l3; ++l3) {
                            Test.iArrFld[i21] >>= 81;
                            Test.fFld += l3;
                            i28 = i22;
                            Test.iArrFld[i23 + 1] -= (int) Test.instanceCount;
                            i28 >>>= i21;
                            i22 >>= 29139;
                            if (b2) {
                                Test.iArrFld[i21] += Test.byFld;
                                i29 = i27;
                                i += (-69 + (l3 * l3));
                                d = 1.54704;
                            }
                        }
                    }
                }
                break;
            case 49:
                Test.iArrFld[(i >>> 1) % N] = (int) l;
                break;
            case 42:
            case 37:
            case 54:
                lArr[(i21 >>> 1) % N] ^= -156L;
                break;
            case 50:
                i27 *= i24;
                break;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + l + i21 + i22 + i23 + i24 + i25 + i26 + i27 + i28 + l3 + i29 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {
        int i30 = -225, i31 = -41958, i32 = 7, i33 = -4, i34 = -219, i35 = -11299, i36 = -2, i37 = -180, i38 = 70, i39 = -60409, i40 = 137, i41 = 11, i42 = -34, i43 = -11, i44 = -12;
        boolean b3 = true;
        float f1 = 58.45F, fArr[] = new float[N];
        long[] lArr1 = new long[N];
        byte[] byArr1 = new byte[N];
        FuzzerUtils.init(lArr1, -40909L);
        FuzzerUtils.init(byArr1, (byte) 34);
        FuzzerUtils.init(fArr, -113.668F);
        {
            java.io.PrintStream ax$16 = System.out;
            java.io.PrintStream ax$17 = System.err;
            java.io.PrintStream ax$18 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$18);
            System.setErr(ax$18);
            try {
                ax$11 = true;
                for (int ax$14 = 0; ax$14 < 6299; ax$14 += 1) vMeth(0.3416767890083495, 1898564373, 3992028860308576145L);
            } catch (java.lang.Throwable ax$15) {
            } finally {
                ax$11 = false;
            }
            System.setOut(ax$16);
            System.setErr(ax$17);
        }
        vMeth(dFld, iFld, Test.instanceCount);
        Test.byFld -= (byte) iFld;
        for (i30 = 3; i30 < 218; i30 += 3) {
            if (b3)
                continue;
            i31 = -5511;
            for (i32 = 2; i32 < 71; ++i32) {
                for (i34 = 1; i34 < 2; ++i34) {
                    lArr1[i30] = i32;
                    Test.fFld = (float) dFld;
                    Test.byFld = (byte) i30;
                    Test.iArrFld[i32 + 1] -= iFld;
                    iFld += (((i34 * Test.instanceCount) + i35) - Test.instanceCount);
                    Test.byFld += (byte) (-22028L + (i34 * i34));
                    Test.instanceCount += (-3352435715L + (i34 * i34));
                    iFld += Test.sFld;
                }
                Test.instanceCount = Test.sFld;
                for (i36 = i32; i36 < 2; ++i36) {
                    try {
                        Test.iArrFld[i32] = (-136 / Test.iArrFld[i30]);
                        i31 = (Test.iArrFld[i30 - 1] / i30);
                        i33 = (60882 % i35);
                    } catch (ArithmeticException a_e) {
                    }
                    lArr1[i32] -= i36;
                }
                for (f1 = 1; f1 < 2; ++f1) {
                    i37 += (int) (f1 + Test.fFld);
                    iFld |= i30;
                    b3 = b3;
                    i35 += (int) (((f1 * Test.instanceCount) + Test.instanceCount) - i33);
                    Test.iArrFld[(int) (f1 - 1)] = i32;
                    lArr1[(int) (f1)] -= i30;
                    Test.fFld += (f1 * i37);
                    Test.fFld -= i37;
                }
                Test.fFld = i32;
                for (i39 = i32; i39 < 2; i39++) {
                    i37 -= (int) Test.instanceCount;
                    Test.instanceCount = i37;
                    Test.instanceCount = i38;
                }
                iArrFld1 = iArrFld1;
                Test.instanceCount &= i31;
                if (b3)
                    break;
                lArr1[i30 - 1] = i35;
                iFld += (199 + (i32 * i32));
            }
            for (i41 = 1; i41 < 71; i41++) {
                for (i43 = i30; i43 < 2; ++i43) {
                    lArr1[i30] += i31;
                    switch(((i37 >>> 1) % 8) + 119) {
                        case 119:
                            i37 += i43;
                            dFld += i44;
                            Test.fFld1 = Test.instanceCount;
                            Test.byFld = (byte) -49;
                            iArrFld1[i43][i41] -= (int) Test.instanceCount;
                            break;
                        case 120:
                            Test.byFld += (byte) i37;
                            dFld = i36;
                            byArr1[i43 + 1] %= (byte) -12;
                            iArrFld1[i41 - 1][i30 - 1] += i38;
                            i44 = Test.sFld;
                            i37 += (i43 - i41);
                            i40 >>= i32;
                            try {
                                i37 = (-10495 % i41);
                                i35 = (i37 / 69);
                                i37 = (-55 % i42);
                            } catch (ArithmeticException a_e) {
                            }
                            fArr[i43] = Test.instanceCount;
                            i38 += (i43 | i36);
                            i38 = (int) Test.fFld1;
                            Test.sFld += (short) (0 + (i43 * i43));
                            dFld -= 201;
                            Test.fFld += i43;
                        case 121:
                            Test.iArrFld[i30] = 54167;
                            iFld *= 81;
                            iArrFld1[i41 + 1][i43] -= (int) Test.instanceCount;
                            i37 -= 46453;
                            Test.byFld += (byte) Test.instanceCount;
                            i33 <<= i44;
                            Test.instanceCount >>= i32;
                            switch(((i33 >>> 1) % 2) + 14) {
                                case 14:
                                    i44 ^= (int) Test.instanceCount;
                                    break;
                                case 15:
                                    i35 -= iFld;
                                    Test.sFld = (short) i41;
                                    iArrFld1[i41 + 1][i30] -= (int) -37011L;
                                    i42 *= (int) Test.instanceCount;
                                    iArrFld1[i30 - 1][i41] -= i42;
                                    break;
                            }
                            break;
                        case 122:
                            try {
                                Test.iArrFld[i41] = (-80 % i33);
                                i44 = (i30 / 150);
                                i37 = (8322 % i39);
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        case 123:
                            try {
                                i38 = (i37 / i42);
                                i33 = (Test.iArrFld[i30 - 1] % iFld);
                                i31 = (-1407357096 % Test.iArrFld[i30 - 1]);
                            } catch (ArithmeticException a_e) {
                            }
                        case 124:
                            i40 ^= i36;
                            break;
                        case 125:
                            dFld = Test.instanceCount;
                            break;
                        case 126:
                            Test.byFld = (byte) -235655110313304252L;
                            break;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i30 i31 b3 = " + i30 + "," + i31 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("f1 i38 i39 = " + Float.floatToIntBits(f1) + "," + i38 + "," + i39);
        FuzzerUtils.out.println("i40 i41 i42 = " + i40 + "," + i41 + "," + i42);
        FuzzerUtils.out.println("i43 i44 lArr1 = " + i43 + "," + i44 + "," + FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println("byArr1 fArr = " + FuzzerUtils.checkSum(byArr1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.byFld = " + Test.instanceCount + "," + Test.sFld + "," + Test.byFld);
        FuzzerUtils.out.println("Test.fFld dFld iFld = " + Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(dFld) + "," + iFld);
        FuzzerUtils.out.println("Test.fFld1 Test.iArrFld iArrFld1 = " + Float.floatToIntBits(Test.fFld1) + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(iArrFld1));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$11 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  dMeth ->  dMeth vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 dMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
