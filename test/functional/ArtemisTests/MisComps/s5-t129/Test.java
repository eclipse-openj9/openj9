// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ListIterator;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -9L;

    public static int iFld = -56176;

    public static int iFld1 = -66;

    public static boolean bFld = true;

    public static float fFld = 1.739F;

    public static volatile byte byFld = -6;

    public short sFld = 13054;

    public static float fArrFld[] = new float[N];

    public static double dArrFld[] = new double[N];

    public static int iArrFld[] = new int[N];

    public short sArrFld[][] = new short[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -107.18F);
        FuzzerUtils.init(Test.dArrFld, 2.38138);
        FuzzerUtils.init(Test.iArrFld, -24914);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6) {
        boolean b = true;
        boolean bArr[] = new boolean[N];
        byte by = 116;
        int i7 = -14;
        int i8 = 14;
        int i9 = -95;
        int i10 = -8;
        int i11 = 13084;
        int i12 = -7;
        int i13 = -41446;
        int i14 = -12185;
        int iArr1[] = new int[N];
        float f1 = 0.601F;
        double d1 = 112.16799;
        long l1 = 8839251682704449355L;
        long l2 = -10L;
        long lArr[] = new long[N];
        short s = 8586;
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr1, -205);
        FuzzerUtils.init(lArr, -2192905375L);
        b = true;
        switch (((i6 >>> 1) % 10) + 66) {
            case 66 :
                Test.instanceCount += i6;
                bArr[((-34184) >>> 1) % N] = b;
                i6 -= by;
                i7 = ((int) (f1));
                for (i8 = 140; 3 < i8; --i8) {
                    f1 *= ((float) (d1));
                    for (l1 = 4; l1 > i8; l1--) {
                        i6 = i8;
                        if (b) {
                            for (i11 = 1; i11 < 1; ++i11) {
                                i9 *= ((int) (l1));
                                try {
                                    i7 = i11 / 1035643255;
                                    i7 = iArr1[((int) (l1 + 1))] % i10;
                                    iArr1[i8] = iArr1[((int) (l1 + 1))] / 241;
                                } catch (ArithmeticException a_e) {
                                }
                                Test.instanceCount += i11;
                                try {
                                    i9 = i7 / 5697;
                                    i12 = i10 % iArr1[i8];
                                    iArr1[i8] = i10 % 1109;
                                } catch (ArithmeticException a_e) {
                                }
                                if (b)
                                    continue;

                                Test.instanceCount += i11 - i11;
                                iArr1[i8 + 1] -= i11;
                                i6 += i6;
                                s = ((short) (i9));
                                Test.instanceCount += 5419;
                                s -= ((short) (i10));
                            }
                            if (b)
                                break;

                            for (i13 = 1; i13 < 1; ++i13) {
                                l2 >>= i8;
                                i7 = i8;
                                s = ((short) (i12));
                                iArr1[((int) (l1))] -= ((int) (l1));
                                Test.instanceCount = i13;
                                b = b;
                                lArr[i13] %= i12 | 1;
                                switch (((int) ((l1 % 1) + 19))) {
                                    case 19 :
                                        f1 += ((i13 * Test.instanceCount) + i11) - i13;
                                        i9 += i13;
                                        i14 <<= i6;
                                        {
                                            final short ax$47 = s;
                                            final int ax$48 = i6;
                                            try {
                                                short[] ax$38 = new short[]{ ((short) (-24523)), ((short) (14295)), ((short) (3755)) };
                                                short[] ax$41 = new short[]{ 20, 10, 0, -10, -20 };
                                                Object[] ax$43 = new Object[]{ "sun.misc.BASE64Encoder" };
                                                Object ax$44 = new Object() {};
                                                boolean ax$37 = false;
                                                for (int ax$36 = -676; ax$36 < (-676 + 14909); ax$36 += 1) {
                                                    Test.AxOutputRedirectionHelper.redirect();
                                                    try {
                                                        ax$41[i6] = ((short) (ax$38[i6] + s));
                                                    } catch (Throwable ax$42) {
                                                    } finally {
                                                    }
                                                    Test.AxOutputRedirectionHelper.recover();
                                                    if (!ax$37) {
                                                        iArr1[i8 - 1] += ((int) (d1));
                                                        ax$37 = true;
                                                    }
                                                    Test.AxOutputRedirectionHelper.redirect();
                                                    try {
                                                        Object ax$45 = ax$43[0];
                                                        ax$43[0] = null;
                                                        ax$43[1] = ax$45;
                                                        ax$43[0] = ax$44;
                                                        ax$43[1] = null;
                                                    } catch (Throwable ax$46) {
                                                    } finally {
                                                    }
                                                    Test.AxOutputRedirectionHelper.recover();
                                                }
                                            } finally {
                                                s = ax$47;
                                                i6 = ax$48;
                                            }
                                        }
                                        break;
                                }
                            }
                        } else {
                            by <<= ((byte) (l2));
                        }
                    }
                }
                break;
            case 67 :
                i14 += i9;
                break;
            case 68 :
                l2 = i14;
                break;
            case 69 :
                f1 -= i7;
                break;
            case 70 :
                f1 -= i10;
                break;
            case 71 :
                i9 = 3217;
                break;
            case 72 :
                i14 *= ((int) (-3761782240L));
                break;
            case 73 :
                iArr1[(Test.iFld >>> 1) % N] = i13;
                break;
            case 74 :
                i12 = 7290;
                break;
            case 75 :
                iArr1[(Test.iFld >>> 1) % N] = i13;
                break;
            default :
                iArr1[(Test.iFld >>> 1) % N] -= ((int) (f1));
        }
        vMeth2_check_sum += (((((((((((((((((i6 + (b ? 1 : 0)) + by) + i7) + Float.floatToIntBits(f1)) + i8) + i9) + Double.doubleToLongBits(d1)) + l1) + i10) + i11) + i12) + s) + i13) + i14) + l2) + FuzzerUtils.checkSum(bArr)) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i3) {
        int i4 = -29028;
        int i5 = -14;
        int i16 = 5253;
        int i17 = -253;
        int i18 = 10;
        int iArr[] = new int[N];
        float f = -43.275F;
        float fArr[] = new float[N];
        byte by1 = 27;
        short s1 = -2687;
        short sArr[] = new short[N];
        boolean b2 = true;
        long lArr1[] = new long[N];
        FuzzerUtils.init(iArr, 47971);
        FuzzerUtils.init(lArr1, 53818L);
        FuzzerUtils.init(sArr, ((short) (-31823)));
        FuzzerUtils.init(fArr, -30.637F);
        i4 = 1;
        while ((i4 += 3) < 107) {
            i5 = 1;
            while ((++i5) < 15) {
                f *= (i3--) * ((i3 - i5) + Test.instanceCount);
                iArr[i5 - 1] = ((int) ((f++) - i5));
                if (true)
                    continue;

                switch (((i4 % 1) * 5) + 84) {
                    case 89 :
                        vMeth2(Test.iFld);
                        i16 = 1;
                        while ((++i16) < 1) {
                            boolean b1 = true;
                            lArr1 = FuzzerUtils.long1array(N, ((long) (76L)));
                            i3 += ((int) (Test.instanceCount));
                            i3 <<= ((int) (Test.instanceCount));
                            i3 *= ((int) (Test.instanceCount));
                            Test.instanceCount <<= i3;
                            iArr[i5 + 1] = ((int) (f));
                            by1 |= ((byte) (2065));
                            if (i3 != 0) {
                                vMeth1_check_sum += ((((((((((((i3 + i4) + i5) + Float.floatToIntBits(f)) + i16) + by1) + i17) + i18) + s1) + (b2 ? 1 : 0)) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr1)) + FuzzerUtils.checkSum(sArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                return;
                            }
                            sArr = sArr;
                            {
                                final long ax$34 = Test.vMeth_check_sum;
                                final int ax$35 = Test.iFld;
                                try {
                                    Double ax$28 = 0.1456039118074508;
                                    long[] ax$32 = new long[]{ 6 };
                                    boolean ax$27 = false;
                                    for (int ax$26 = -808; ax$26 < (-808 + 4347); ax$26 += 1) {
                                        Test.AxOutputRedirectionHelper.redirect();
                                        try {
                                            ax$28 = ax$28 + 2.0;
                                        } catch (Throwable ax$29) {
                                        } finally {
                                        }
                                        Test.AxOutputRedirectionHelper.recover();
                                        if (!ax$27) {
                                            Test.iFld1 ^= i16;
                                            ax$27 = true;
                                        }
                                        Test.AxOutputRedirectionHelper.redirect();
                                        try {
                                            ax$32[iFld] = vMeth_check_sum;
                                            if (iFld == 10) {
                                                vMeth_check_sum++;
                                            }
                                        } catch (Throwable ax$33) {
                                        } finally {
                                        }
                                        Test.AxOutputRedirectionHelper.recover();
                                    }
                                } finally {
                                    Test.vMeth_check_sum = ax$34;
                                    Test.iFld = ax$35;
                                }
                            }
                            if (i4 != 0) {
                                vMeth1_check_sum += ((((((((((((i3 + i4) + i5) + Float.floatToIntBits(f)) + i16) + by1) + i17) + i18) + s1) + (b2 ? 1 : 0)) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr1)) + FuzzerUtils.checkSum(sArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                return;
                            }
                            Test.iFld = i4;
                            if (b1)
                                break;

                            Test.iFld1 >>= i4;
                            Test.instanceCount *= 98;
                        }
                        iArr[i5] -= ((int) (Test.instanceCount));
                        i3 += Test.iFld;
                        iArr[i4] /= ((int) (i16 | 1));
                        for (i17 = 1; i17 > 1; --i17) {
                            s1 += ((short) (i17));
                            if (b2)
                                break;

                            if (i3 != 0) {
                                vMeth1_check_sum += ((((((((((((i3 + i4) + i5) + Float.floatToIntBits(f)) + i16) + by1) + i17) + i18) + s1) + (b2 ? 1 : 0)) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr1)) + FuzzerUtils.checkSum(sArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                return;
                            }
                            iArr[i4 - 1] >>= i18;
                            if (b2)
                                continue;

                            Test.iFld = i18;
                            by1 = ((byte) (i5));
                            Test.instanceCount = Test.iFld;
                            b2 = b2;
                            fArr[i17 + 1] *= s1;
                        }
                        break;
                    default :
                        i3 += i5 * i5;
                }
            }
        }
        vMeth1_check_sum += ((((((((((((i3 + i4) + i5) + Float.floatToIntBits(f)) + i16) + by1) + i17) + i18) + s1) + (b2 ? 1 : 0)) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr1)) + FuzzerUtils.checkSum(sArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(long l) {
        if (Test.ax$8) {
            final float ax$15 = Test.fFld;
            final int ax$14 = Test.iFld;
            Float ax$9 = 0.11870408F;
            Float ax$10 = 55.0F;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                if ((iFld & 1) == 0) {
                    ax$10 = new Float(fFld + 1.0F);
                    ax$9 = new Float(fFld + 2.0F);
                }
            } catch (Throwable ax$13) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iFld = ax$14;
            Test.fFld = ax$15;
            return;
        }
        double d = 9.74154;
        double d2 = 2.122962;
        double dArr[] = new double[N];
        int i2 = 3556;
        int i19 = -185;
        int i20 = -88;
        int i21 = -45;
        int i22 = 65095;
        int i23 = -57182;
        int i24 = 36810;
        int i25 = 115;
        int i26 = -14;
        int i27 = -15190;
        int iArr2[] = new int[N];
        float f2 = -84.17F;
        FuzzerUtils.init(iArr2, -4);
        FuzzerUtils.init(dArr, 2.120052);
        for (d = 9; d < 214; ++d) {
            i2 += i2;
            vMeth1(50);
        }
        Test.iFld += -11;
        for (i19 = 227; i19 > 6; --i19) {
            for (i21 = 1; i21 < 3; ++i21) {
                if (Test.bFld)
                    continue;

                iArr2[i21 - 1] = -34;
                d2 = Test.iFld1;
                Test.fArrFld[i19] -= Test.instanceCount;
                d2 *= Test.instanceCount;
                iArr2[i21] = ((int) (l));
                d2 += 32;
                d2 += i20;
                i20 = Test.iFld1;
                i2 -= ((int) (Test.instanceCount));
                Test.fFld += i20;
                i20 += ((i21 * i21) + Test.iFld) - Test.iFld1;
                i20 = i2;
                dArr[i19 - 1] = Test.iFld1;
            }
            switch (((i19 % 1) * 5) + 110) {
                case 112 :
                    Test.byFld = ((byte) (118));
                    if (Test.bFld)
                        break;

                    i20 += i19;
                    Test.instanceCount *= Test.byFld;
                    for (i23 = 3; i23 > 1; --i23) {
                        Test.iFld1 += i23 * i23;
                        Test.iFld >>= Test.iFld;
                        for (f2 = 1; f2 < 2; f2++) {
                            i22 *= i25;
                        }
                        i24 += i23;
                        d2 = i19;
                        d2 += Test.fFld;
                        for (i26 = 1; 2 > i26; ++i26) {
                            Test.bFld = Test.bFld;
                            if (i22 != 0) {
                                vMeth_check_sum += ((((((((((((((l + Double.doubleToLongBits(d)) + i2) + i19) + i20) + i21) + i22) + Double.doubleToLongBits(d2)) + i23) + i24) + Float.floatToIntBits(f2)) + i25) + i26) + i27) + FuzzerUtils.checkSum(iArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                                return;
                            }
                            Test.instanceCount -= 15263;
                        }
                    }
                    break;
            }
        }
        vMeth_check_sum += ((((((((((((((l + Double.doubleToLongBits(d)) + i2) + i19) + i20) + i21) + i22) + Double.doubleToLongBits(d2)) + i23) + i24) + Float.floatToIntBits(f2)) + i25) + i26) + i27) + FuzzerUtils.checkSum(iArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {
        int i = -22663;
        int i1 = -4626;
        int i28 = 4;
        int i29 = -97;
        int i30 = 72;
        int i31 = 9;
        int i32 = -59008;
        int i33 = 11;
        int i34 = -52575;
        int i35 = -54428;
        int i36 = 21;
        long l3 = -2429844708L;
        long lArr2[] = new long[N];
        double d3 = 93.126535;
        boolean b3 = false;
        boolean bArr1[] = new boolean[N];
        FuzzerUtils.init(bArr1, false);
        FuzzerUtils.init(lArr2, 224L);
        for (i = 3; i < 84; i++) {
            {
                final int ax$25 = i28;
                try {
                    InputStream ax$19 = null;
                    OutputStream ax$20 = null;
                    for (int ax$16 = -917; ax$16 < (-917 + 1561); ax$16 += 1) {
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            i28++;
                        } catch (Throwable ax$18) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                        Test.ax$8 = true;
                        vMeth(3375137648536817945L);
                        Test.ax$8 = false;
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            int ax$21;
                            byte[] ax$22 = new byte[8192];
                            int ax$23;
                            while ((ax$23 = ax$19.read(ax$22)) != (-1)) {
                                ax$20.write(ax$22, 0, ax$23);
                                ax$20.flush();
                            }
                        } catch (Throwable ax$24) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                    }
                } finally {
                    i28 = ax$25;
                }
            }
            vMeth(Test.instanceCount);
            Test.instanceCount += -37573;
            Test.iFld += ((int) (Test.fFld));
            l3 = 1;
            while ((++l3) < 62) {
                i28 = 1;
                do {
                    Test.iFld1 -= Test.iFld;
                    Test.dArrFld[((int) (l3))] += i28;
                    Test.iFld >>= Test.iFld;
                    i1 = -84;
                    Test.instanceCount = Test.instanceCount;
                    Test.instanceCount += ((i28 * Test.iFld1) + Test.fFld) - i;
                    if (Test.bFld)
                        break;

                    Test.fFld *= -214;
                } while ((++i28) < 1 );
                i1 = i28;
                if (Test.bFld) {
                    Test.instanceCount = ((long) (d3));
                    Test.iFld += ((int) (l3 + Test.instanceCount));
                    Test.instanceCount >>= i;
                    if (true) {
                        i1 = i1;
                        if (b3) {
                            bArr1[((int) (l3))] = Test.bFld;
                            for (i29 = 1; i29 > 1; i29--) {
                                Test.instanceCount = 3670611867L;
                                bArr1[((int) (l3 + 1))] = true;
                                Test.instanceCount -= ((long) (Test.fFld));
                                if (Test.bFld)
                                    continue;

                                Test.iFld1 /= 51417;
                            }
                            Test.iFld1 >>= ((int) (l3));
                            i1 *= 6;
                            i30 = i30;
                        } else if (Test.bFld) {
                            i30 *= ((int) (1786490954L));
                            i1 -= Test.iFld1;
                            Test.instanceCount += ((l3 * i1) + i) - i30;
                            Test.fFld *= l3;
                            if (b3)
                                break;

                            Test.iFld1 = i30;
                            d3 = Test.iFld;
                            Test.iFld *= Test.byFld;
                            Test.bFld = true;
                        } else {
                            switch (((i29 >>> 1) % 9) + 69) {
                                case 69 :
                                    try {
                                        Test.iArrFld[((int) (l3 - 1))] = (-39618) % Test.iFld1;
                                        Test.iArrFld[((int) (l3))] = i31 / (-892762415);
                                        i1 = i1 / Test.iArrFld[((int) (l3))];
                                    } catch (ArithmeticException a_e) {
                                    }
                                case 70 :
                                case 71 :
                                    Test.byFld += ((byte) (l3 + Test.iFld));
                                    i32 = 1;
                                    do {
                                        Test.iFld1 = 51795;
                                        lArr2[i - 1] -= l3;
                                        i30 += ((i32 * i30) + i30) - i31;
                                        Test.iFld1 += 14934 + (i32 * i32);
                                        Test.fFld -= i1;
                                        i1 -= i32;
                                        d3 -= i;
                                        Test.instanceCount = i1;
                                        i31 *= Test.iFld1;
                                        Test.iFld1 = i1;
                                        i31 += i32 ^ i1;
                                        Test.iArrFld[i] >>= sFld;
                                    } while ((++i32) < 1 );
                                    sFld = ((short) (Test.fFld));
                                    i30 *= ((int) (Test.fFld));
                                    for (i33 = 1; i33 < 1; i33++) {
                                        Test.fFld += ((i33 * i28) + i1) - i34;
                                        i34 += i33 + i34;
                                        if (Test.bFld)
                                            continue;

                                    }
                                    Test.fFld = Test.fFld;
                                    lArr2[i + 1] -= Test.instanceCount;
                                    switch (((int) (((l3 % 1) * 5) + 46))) {
                                        case 49 :
                                            Test.iArrFld[((int) (l3))] += Test.byFld;
                                            for (i35 = ((int) (l3)); i35 < 1; ++i35) {
                                                i30 = 48;
                                                {
                                                    final boolean ax$7 = b3;
                                                    try {
                                                        String[] ax$2 = new String[]{ "ເ", "ແ", "ໂ", "ໃ", "ໄ" };
                                                        ListIterator ax$5 = null;
                                                        boolean ax$1 = false;
                                                        for (int ax$0 = -792; ax$0 < (-792 + 18452); ax$0 += 1) {
                                                            Test.AxOutputRedirectionHelper.redirect();
                                                            try {
                                                                b3 = ax$2[0].equals("-inline");
                                                            } catch (Throwable ax$4) {
                                                            } finally {
                                                            }
                                                            Test.AxOutputRedirectionHelper.recover();
                                                            if (!ax$1) {
                                                                Test.fFld += i35;
                                                                ax$1 = true;
                                                            }
                                                            Test.AxOutputRedirectionHelper.redirect();
                                                            try {
                                                                ax$5.previous();
                                                            } catch (Throwable ax$6) {
                                                            } finally {
                                                            }
                                                            Test.AxOutputRedirectionHelper.recover();
                                                        }
                                                    } finally {
                                                        b3 = ax$7;
                                                    }
                                                }
                                                Test.instanceCount += ((i35 * i29) + Test.fFld) - i;
                                                d3 = i32;
                                                i1 += i35 - Test.iFld1;
                                                Test.fArrFld[((int) (l3 + 1))] -= 13;
                                                Test.iFld1 = i1;
                                            }
                                            break;
                                    }
                                    break;
                                case 72 :
                                    Test.instanceCount = i30;
                                    break;
                                case 73 :
                                    Test.fFld += Test.iFld;
                                    break;
                                case 74 :
                                    i1 = i33;
                                    break;
                                case 75 :
                                    sArrFld[((int) (l3))][i + 1] = ((short) (35238));
                                    break;
                                case 76 :
                                    i1 -= i29;
                                    break;
                                case 77 :
                                    Test.iArrFld[i + 1] = Test.byFld;
                                default :
                                    i1 = i30;
                            }
                        }
                    } else {
                        d3 = Test.iFld;
                    }
                } else if (b3) {
                    lArr2[((int) (l3))] = -8168;
                }
            }
        }
        FuzzerUtils.out.println((((("i i1 l3 = " + i) + ",") + i1) + ",") + l3);
        FuzzerUtils.out.println((((("i28 d3 i29 = " + i28) + ",") + Double.doubleToLongBits(d3)) + ",") + i29);
        FuzzerUtils.out.println((((("i30 b3 i31 = " + i30) + ",") + (b3 ? 1 : 0)) + ",") + i31);
        FuzzerUtils.out.println((((("i32 i33 i34 = " + i32) + ",") + i33) + ",") + i34);
        FuzzerUtils.out.println((((("i35 i36 bArr1 = " + i35) + ",") + i36) + ",") + FuzzerUtils.checkSum(bArr1));
        FuzzerUtils.out.println("lArr2 = " + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println((((("Test.instanceCount Test.iFld Test.iFld1 = " + Test.instanceCount) + ",") + Test.iFld) + ",") + Test.iFld1);
        FuzzerUtils.out.println((((("Test.bFld Test.fFld Test.byFld = " + (Test.bFld ? 1 : 0)) + ",") + Float.floatToIntBits(Test.fFld)) + ",") + Test.byFld);
        FuzzerUtils.out.println((((("sFld Test.fArrFld Test.dArrFld = " + sFld) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld))) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println((("Test.iArrFld sArrFld = " + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + FuzzerUtils.checkSum(sArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$8 = false;
}
