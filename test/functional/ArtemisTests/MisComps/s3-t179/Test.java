// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.Map;
import java.util.Hashtable;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -2397256826L;

    public float fFld = -71.458F;

    public static int iFld = 184;

    public static volatile double dFld = 88.18794;

    public static float fFld1 = 1.309F;

    public static volatile byte byFld = -13;

    public static double[] dArrFld = new double[N];

    public static float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 83.97452);
        FuzzerUtils.init(Test.fArrFld, -125.276F);
    }

    public static long iMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i3, long l, int i4) {
        if (ax$15) {
            try {
                java.util.Map ax$18 = new Hashtable();
                java.lang.String ax$16 = "3.697852457491911E+27";
                java.lang.Integer ax$17 = new Integer(49);
                ax$18.put(ax$17, ax$16);
            } catch (Throwable ax$19) {
            } finally {
            }
            return 682190324;
        }
        float f = 83.474F, f1 = 121.1018F;
        int i5 = 5, i6 = -12, i7 = 50215, i8 = -54408, i9 = -5, i10 = 0, iArr[] = new int[N];
        byte by = 120;
        FuzzerUtils.init(iArr, 30898);
        for (f = 1; 111 > f; ++f) {
            for (i6 = 5; i6 > f; i6 -= 2) {
                for (i8 = 1; i8 < 1; ++i8) {
                    i3 = 105;
                }
                l >>= Test.instanceCount;
                f1 = Test.iFld;
                i10 = 1;
                while (++i10 < 1) {
                    i9 = Test.iFld;
                    i5 *= (int) Test.dFld;
                    iArr[(int) (f + 1)] <<= i10;
                    i4 += (i10 + i8);
                    i7 -= (int) l;
                    f1 = Test.instanceCount;
                    if (false) {
                        i5 += i9;
                        Test.instanceCount = -12;
                    } else if (false) {
                        i7 = (int) Test.instanceCount;
                        i3 = i6;
                    }
                    switch(((i6 % 10) * 5) + 45) {
                        case 91:
                            Test.instanceCount *= i5;
                            Test.instanceCount += (3727140235L + (i10 * i10));
                            Test.instanceCount += i10;
                            i5 += (int) (0.339F + (i10 * i10));
                            Test.dArrFld[i10 - 1] += i3;
                            switch((i6 % 2) + 20) {
                                case 20:
                                    i7 += i6;
                                    f1 -= 104;
                                case 21:
                                    if (false) {
                                        try {
                                            i3 = (-250 / i8);
                                            i5 = (59 % Test.iFld);
                                            i7 = (-139 % i10);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        by = (byte) i8;
                                        l += (i10 * i10);
                                        f1 = i3;
                                        l = Test.instanceCount;
                                        Test.instanceCount <<= -47647;
                                        Test.dFld -= i4;
                                        i4 |= -37399;
                                        i7 = (int) l;
                                    }
                                    break;
                            }
                            break;
                        case 51:
                        case 95:
                            iArr[i10] >>= (int) l;
                            break;
                        case 57:
                            i9 += (((i10 * Test.instanceCount) + l) - i6);
                            break;
                        case 69:
                            i3 += i10;
                            break;
                        case 64:
                            i5 -= i4;
                            break;
                        case 80:
                            f1 = -41117;
                        case 94:
                        case 60:
                        case 74:
                    }
                }
            }
        }
        long meth_res = i3 + l + i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + by + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static long lMeth() {
        int i1 = -61545, i2 = 126, i11 = 55, i12 = -28607, i13 = 208, iArr1[] = new int[N], iArr2[][] = new int[N][N];
        double d = 45.3997;
        short s = 10794;
        boolean b = false;
        long[][] lArr1 = new long[N][N];
        FuzzerUtils.init(lArr1, 41174L);
        FuzzerUtils.init(iArr1, 52199);
        FuzzerUtils.init(iArr2, -49094);
        for (i1 = 5; i1 < 108; ++i1) {
            if (i1 != 0) {
            }
            d *= (i1 + Math.min(60169, (int) (d + Test.instanceCount)));
            i2 += (i1 * i2);
            Test.instanceCount += (-3970 + (i1 * i1));
            Test.iFld = (--s);
            switch((i1 % 5) + 125) {
                case 125:
                    i2 -= Math.min(iMeth1(-1, Test.instanceCount, i1), i1);
                    Test.fFld1 += -2;
                    Test.fFld1 += 10;
                    lArr1[i1 + 1] = lArr1[i1 - 1];
                    iArr1[i1 - 1] >>>= i1;
                    iArr1[i1 - 1] = Test.iFld;
                    Test.fFld1 += (((i1 * Test.instanceCount) + Test.iFld) - i2);
                    i2 -= (int) Test.instanceCount;
                    Test.fFld1 *= -152;
                    i11 = 5;
                    do {
                        for (i12 = 1; 1 > i12; i12++) {
                            i13 <<= (int) Test.instanceCount;
                            switch(((i12 % 5) * 5) + 66) {
                                case 85:
                                    Test.instanceCount >>>= i2;
                                    break;
                                case 81:
                                    iArr2[i12 + 1][i1] = 27487;
                                    i2 += (int) (-5L + (i12 * i12));
                                    break;
                                case 89:
                                    i13 &= 154;
                                    iArr2[i1 + 1][i1 + 1] = -10188;
                                    i2 -= i12;
                                    i13 -= (int) Test.instanceCount;
                                    s = (short) i11;
                                    i2 += (i12 ^ i12);
                                    Test.instanceCount -= 37617L;
                                    iArr1[i1 + 1] += (int) Test.dFld;
                                    i2 *= Test.iFld;
                                    lArr1[i1 + 1][i1 - 1] = i2;
                                    Test.fFld1 %= 2944281513L;
                                    Test.iFld -= Test.iFld;
                                    break;
                                case 68:
                                    Test.byFld *= (byte) i2;
                                    Test.fFld1 += (i12 + Test.instanceCount);
                                    break;
                                case 80:
                                    Test.instanceCount += i12;
                                default:
                                    i2 >>= (int) Test.instanceCount;
                            }
                        }
                    } while (--i11 > 0);
                    break;
                case 126:
                    lArr1[i1][i1] >>= i13;
                    break;
                case 127:
                    Test.byFld = (byte) i11;
                case 128:
                    if (b)
                        break;
                case 129:
                    Test.fArrFld = Test.fArrFld;
                    break;
                default:
                    i13 = i1;
            }
        }
        long meth_res = i1 + i2 + Double.doubleToLongBits(d) + s + i11 + i12 + i13 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static int iMeth() {
        int i = 16706, i14 = 216, i15 = 56904, i16 = -34052, i17 = 171, i18 = 237, i20 = -183, i21 = -62274, i22 = 9, i23 = -39997, iArr3[] = new int[N];
        boolean b1 = false;
        long[][] lArr = new long[N][N];
        FuzzerUtils.init(lArr, -33515L);
        FuzzerUtils.init(iArr3, -10);
        lArr[(i >>> 1) % N][(i >>> 1) % N] *= (lMeth() - i);
        i = Test.iFld;
        for (i14 = 1; i14 < 122; ++i14) {
            Test.fArrFld[i14 - 1] = i;
            i += (i14 - Test.instanceCount);
            if (b1)
                continue;
            for (i16 = 1; i16 < 5; i16++) {
                i17 += (((i16 * i16) + Test.fFld1) - i);
                Test.instanceCount += (i16 + i17);
                Test.iFld += i17;
                Test.iFld >>= Test.iFld;
                iArr3[i14] -= -8;
            }
            lArr[i14 - 1][i14] <<= 81;
            i += (i14 * i16);
            i *= i15;
            i += (int) 1696548213858624780L;
            Test.dFld = i14;
        }
        iArr3[(i14 >>> 1) % N] += Test.iFld;
        i18 = 1;
        while (++i18 < 92) {
            Test.iFld = i14;
            i15 /= (int) (Test.instanceCount | 1);
            i17 += (i18 - Test.fFld1);
            lArr[i18][i18] >>= 38280;
            Test.byFld -= (byte) i17;
            i17 |= (int) Test.instanceCount;
            if (b1) {
                i <<= (int) Test.instanceCount;
                if (b1)
                    break;
                if (b1)
                    continue;
                for (i20 = 1; i20 < 6; ++i20) {
                    switch((i20 % 1) + 68) {
                        case 68:
                            b1 = b1;
                            i15 += (((i20 * i17) + i14) - i15);
                            Test.fFld1 += Test.instanceCount;
                            for (i22 = 2; i22 > 1; i22 -= 2) {
                                iArr3[i20 - 1] += (int) Test.instanceCount;
                            }
                            Test.instanceCount += Test.instanceCount;
                            break;
                        default:
                            i >>= i23;
                    }
                }
            }
            {
                java.io.PrintStream ax$5 = System.out;
                java.io.PrintStream ax$6 = System.err;
                java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$7);
                System.setErr(ax$7);
                try {
                    for (int ax$3 = -794; ax$3 < 6991; ax$3 += 1) {
                        int ax$1 = i18;
                        try {
                            int[] ax$0 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
                            ax$0[i18] = (i18 & 3);
                        } catch (Throwable ax$2) {
                        } finally {
                            i18 = ax$1;
                        }
                    }
                } catch (Throwable ax$4) {
                }
                System.setOut(ax$5);
                System.setErr(ax$6);
            }
        }
        long meth_res = i + i14 + i15 + (b1 ? 1 : 0) + i16 + i17 + i18 + i20 + i21 + i22 + i23 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        fFld += (iMeth() % (Test.iFld | 1));
        FuzzerUtils.out.println("Test.instanceCount fFld Test.iFld = " + Test.instanceCount + "," + Float.floatToIntBits(fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.dFld Test.fFld1 Test.byFld = " + Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld1) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.dArrFld Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        {
            java.io.PrintStream ax$12 = System.out;
            java.io.PrintStream ax$13 = System.err;
            java.io.PrintStream ax$14 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$14);
            System.setErr(ax$14);
            try {
                for (int ax$10 = -1317; ax$10 < 4659; ax$10 += 1) {
                    int ax$8 = iFld;
                    try {
                        iFld++;
                    } catch (Throwable ax$9) {
                    } finally {
                        iFld = ax$8;
                    }
                }
            } catch (Throwable ax$11) {
            }
            System.setOut(ax$12);
            System.setErr(ax$13);
        }
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$15 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  lMeth ->  lMeth iMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 lMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
