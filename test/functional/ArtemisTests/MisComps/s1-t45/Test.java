// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.net.InetAddress;
import java.util.Vector;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 25042L;

    public static double dFld = 1.114531;

    public static int iFld = 189;

    public static volatile float fFld = 0.484F;

    public static int iFld1 = 22167;

    public static int iFld2 = -14;

    public static short sFld = 29255;

    public static float[] fArrFld = new float[N];

    public static volatile int[] iArrFld = new int[N];

    public static double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -50.128F);
        FuzzerUtils.init(Test.iArrFld, -13);
        FuzzerUtils.init(Test.dArrFld, 68.29918);
    }

    public static long vMeth_check_sum = 0;

    public static long bMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7) {
        if (ax$273) {
            int ax$276 = i6;
            long ax$277 = vMeth1_check_sum;
            int ax$278 = i7;
            try {
                String ax$275 = Long.toString(vMeth1_check_sum, i6);
                int ax$274 = Integer.parseUnsignedInt(ax$275, i6);
                if (Integer.toUnsignedLong(ax$274) != vMeth1_check_sum) {
                    i7++;
                }
            } catch (Throwable ax$279) {
            } finally {
                i6 = ax$276;
                vMeth1_check_sum = ax$277;
                i7 = ax$278;
            }
            return;
        }
        int i8 = 4, i9 = 0, i11 = 1, i12 = -27, i13 = -4, i14 = 2, i15 = -3, i16 = 49, i17 = -14, i18 = 0, iArr[] = new int[N];
        boolean b = true;
        FuzzerUtils.init(iArr, 5);
        for (i8 = 9; i8 < 231; i8 += 3) {
            int i10 = 43142;
            i10 += (i8 | i6);
            iArr[i8 + 1] -= (int) -2539210646756226779L;
            Test.fFld = 35817L;
        }
        for (i11 = 100; 2 < i11; --i11) {
            for (i13 = 1; 6 > i13; ++i13) {
                if (b) {
                    i7 *= i9;
                    iArr[i13 + 1] = i7;
                    i14 += (-12 + (i13 * i13));
                    i6 = -63060;
                    for (i15 = 1; i15 < 2; i15++) {
                        Test.iFld += (-10 + (i15 * i15));
                        Test.instanceCount |= i9;
                        Test.iFld >>= i13;
                        i9 >>= (int) Test.instanceCount;
                        b = b;
                        i6 += (i15 | i12);
                        i7 = (int) -106.589F;
                        i7 += (((i15 * i16) + i11) - i13);
                        i12 <<= (int) 45078L;
                        i6 += (-9 + (i15 * i15));
                        Test.instanceCount <<= i14;
                    }
                    Test.fFld = i9;
                    i14 = i12;
                    for (i17 = 1; 2 > i17; ++i17) {
                        Test.dFld *= i13;
                        i18 += (i17 + i15);
                        i9 += (i17 ^ i9);
                        i16 = i12;
                        i9 <<= i17;
                        if (b) {
                            b = b;
                            Test.instanceCount >>>= Test.iFld;
                            Test.iFld1 += i17;
                            Test.instanceCount *= Test.instanceCount;
                            Test.fArrFld[i17] = Test.instanceCount;
                        }
                    }
                } else if (b) {
                } else if (b) {
                    i6 = 63;
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + i11 + i12 + i13 + i14 + i15 + i16 + (b ? 1 : 0) + i17 + i18 + FuzzerUtils.checkSum(iArr);
    }

    public static boolean bMeth(long l, long l1) {
        if (ax$285) {
            int ax$286 = iFld2;
            try {
                iFld2++;
            } catch (Throwable ax$287) {
            } finally {
                iFld2 = ax$286;
            }
            return true;
        }
        short s1 = -1442;
        boolean b1 = false, bArr[] = new boolean[N];
        int i19 = 27, i20 = -11, i21 = -10, i22 = 189, i23 = -13811, i24 = 63;
        byte by1 = -61;
        long[] lArr = new long[N], lArr1[] = new long[N][N];
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, -27824L);
        FuzzerUtils.init(lArr1, -1981760043125952864L);
        Test.iFld >>= (int) Test.instanceCount;
        if (b1) {
            {
                java.io.PrintStream ax$282 = System.out;
                java.io.PrintStream ax$283 = System.err;
                java.io.PrintStream ax$284 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$284);
                System.setErr(ax$284);
                try {
                    ax$273 = true;
                    for (int ax$280 = 0; ax$280 < 7352; ax$280 += 1) vMeth1(-2080369628, -2082712022);
                } catch (java.lang.Throwable ax$281) {
                } finally {
                    ax$273 = false;
                }
                System.setOut(ax$282);
                System.setErr(ax$283);
            }
            vMeth1(Test.iFld, -11);
            if (b1) {
                Test.iFld = Test.iFld1;
                switch(((8 >>> 1) % 8) + 84) {
                    case 84:
                        s1 = (short) Test.fFld;
                        bArr[(Test.iFld >>> 1) % N] = b1;
                        i19 = 1;
                        while (++i19 < 86) {
                            Test.iFld1 = Test.iFld1;
                            for (i20 = 1; i20 < 6; i20++) {
                                Test.dFld = Test.instanceCount;
                                for (i22 = 1; i22 < 2; i22 += 2) {
                                    switch((((i21 >>> 1) % 4) * 5) + 62) {
                                        case 69:
                                            Test.dFld += l;
                                            i21 += i22;
                                            Test.iArrFld[i22] -= i24;
                                            Test.fFld = Test.iFld;
                                            Test.iFld += (i22 + l);
                                            switch((i20 % 5) + 106) {
                                                case 106:
                                                    lArr[i20 - 1] += (long) Test.dFld;
                                                    Test.dFld += -53;
                                                    b1 = b1;
                                                    l1 = i22;
                                                    if (b1) {
                                                        i24 = by1;
                                                        i23 += (int) (111.892F + (i22 * i22));
                                                        Test.instanceCount = by1;
                                                        Test.instanceCount -= (long) 2.359F;
                                                        Test.iFld >>= Test.iFld1;
                                                        switch((i20 % 9) + 35) {
                                                            case 35:
                                                                i21 -= (int) Test.dFld;
                                                                i23 += (int) (-2L + (i22 * i22));
                                                                Test.iFld += (((i22 * l1) + Test.instanceCount) - Test.instanceCount);
                                                                lArr1[i20][i19 - 1] &= by1;
                                                                Test.iFld ^= Test.iFld;
                                                                l = Test.iFld;
                                                            case 36:
                                                                Test.iArrFld[i19 + 1] = i20;
                                                                break;
                                                            case 37:
                                                                l *= l1;
                                                                break;
                                                            case 38:
                                                                b1 = true;
                                                            case 39:
                                                                Test.iFld = -64558;
                                                            case 40:
                                                                Test.iFld1 = 65374;
                                                                break;
                                                            case 41:
                                                                i21 = 74;
                                                                break;
                                                            case 42:
                                                                Test.instanceCount += (long) (-1.50F + (i22 * i22));
                                                            case 43:
                                                                i21 = i20;
                                                                break;
                                                        }
                                                    } else {
                                                        Test.instanceCount |= Test.iFld1;
                                                    }
                                                case 107:
                                                    Test.iArrFld[i19] += Test.iFld;
                                                case 108:
                                                    i23 += i20;
                                                    break;
                                                case 109:
                                                    bArr[i20 - 1] = b1;
                                                case 110:
                                                    Test.fFld *= i23;
                                                    break;
                                            }
                                            break;
                                        case 77:
                                            if (i22 != 0) {
                                                return ((int) (l + l1 + s1 + (b1 ? 1 : 0) + i19 + i20 + i21 + i22 + i23 + i24 + by1 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(lArr1))) % 2 > 0;
                                            }
                                        case 63:
                                            Test.iArrFld[i19 + 1] = -64085;
                                        case 82:
                                            Test.fFld += i21;
                                            break;
                                        default:
                                            Test.iFld += s1;
                                    }
                                }
                            }
                        }
                        break;
                    case 85:
                        s1 = (short) l1;
                        break;
                    case 86:
                        Test.iArrFld[(Test.iFld >>> 1) % N] = (int) l;
                    case 87:
                        Test.fFld *= -63284;
                        break;
                    case 88:
                        s1 <<= (short) 136;
                    case 89:
                        i24 += (int) Test.fFld;
                        break;
                    case 90:
                        i21 *= Test.iFld;
                        break;
                    case 91:
                        bArr[(i20 >>> 1) % N] = b1;
                        break;
                }
            } else {
                s1 += (short) 15925;
            }
        } else {
            i21 |= (int) l;
            return ((int) (l + l1 + s1 + (b1 ? 1 : 0) + i19 + i20 + i21 + i22 + i23 + i24 + by1 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(lArr1))) % 2 > 0;
        }
        long meth_res = l + l1 + s1 + (b1 ? 1 : 0) + i19 + i20 + i21 + i22 + i23 + i24 + by1 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(lArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void vMeth() {
        int i = -65319, i1 = 0, i2 = 7, i3 = 179, i4 = -228, i5 = 129;
        byte by = 93;
        boolean b2 = false;
        long[] lArr2 = new long[N];
        FuzzerUtils.init(lArr2, 2L);
        for (i = 1; i < 120; ++i) {
            for (i2 = i; i2 < 5; ++i2) {
                short s = 17762;
                s = (short) ((--Test.dFld) * by);
                Test.instanceCount *= (++i3);
                for (i4 = 1; i4 < 1; i4++) {
                    if (bMeth(Test.instanceCount, Test.instanceCount))
                        break;
                    by -= (byte) Test.iFld1;
                    i3 *= -42021;
                    switch(((i2 % 3) * 5) + 114) {
                        case 116:
                            Test.fFld *= Test.instanceCount;
                            if (i2 != 0) {
                                vMeth_check_sum += i + i1 + i2 + i3 + by + i4 + i5 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr2);
                                return;
                            }
                            i5 += (((i4 * i5) + Test.instanceCount) - i);
                            Test.iArrFld = Test.iArrFld;
                            Test.iFld = (int) Test.dFld;
                            Test.instanceCount += Test.instanceCount;
                            i1 += 29;
                            Test.instanceCount += (long) Test.dFld;
                            Test.instanceCount >>= i1;
                            Test.iArrFld[i2 - 1] -= i1;
                            i3 -= (int) Test.dFld;
                            i1 = by;
                            break;
                        case 120:
                            lArr2[i2] >>>= Test.iFld;
                            if (i != 0) {
                                vMeth_check_sum += i + i1 + i2 + i3 + by + i4 + i5 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr2);
                                return;
                            }
                            Test.dFld += i4;
                            if (b2)
                                continue;
                            Test.fFld += Test.instanceCount;
                            if (true)
                                break;
                            Test.iArrFld[i - 1] = 15544;
                        case 125:
                            b2 = b2;
                            lArr2[i4] += 26800L;
                            i1 = i5;
                            Test.instanceCount *= (long) 1.415F;
                            Test.iFld2 = i5;
                            i5 += (((i4 * by) + i1) - i5);
                            i5 += (int) (2.225F + (i4 * i4));
                            Test.iFld %= (int) (i3 | 1);
                            Test.iFld1 -= (int) Test.fFld;
                            break;
                        default:
                            b2 = b2;
                    }
                    {
                        java.io.PrintStream ax$259 = System.out;
                        java.io.PrintStream ax$260 = System.err;
                        java.io.PrintStream ax$261 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$261);
                        System.setErr(ax$261);
                        try {
                            for (int ax$257 = -980; ax$257 < 4428; ax$257 += 1) {
                                try {
                                    int ax$255 = 90000;
                                    if (ax$255 > 0) {
                                    }
                                } catch (Throwable ax$256) {
                                } finally {
                                }
                            }
                        } catch (Throwable ax$258) {
                        }
                        System.setOut(ax$259);
                        System.setErr(ax$260);
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + by + i4 + i5 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {
        int i25 = -5, i26 = -44, i28 = 45, i29 = -58047, i30 = -9, i31 = 106, i32 = -35403, i33 = -11, i34 = 14, i35 = -14, i36 = 3, i37 = 5, i38 = 41240;
        boolean b3 = true, bArr1[] = new boolean[N];
        float f = -77.880F;
        byte by2 = 70;
        double d = -61.63070;
        long[] lArr3 = new long[N];
        FuzzerUtils.init(lArr3, 28L);
        FuzzerUtils.init(bArr1, true);
        vMeth();
        Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
        for (long l2 : lArr3) {
            for (i25 = 1; i25 < 20; i25++) {
                Test.dFld = 7;
                b3 = true;
                bArr1[i25] = b3;
                Test.instanceCount = Test.iFld;
                lArr3[i25] <<= -1720163707L;
                Test.dFld -= Test.iFld1;
            }
            if (b3) {
                Test.fArrFld = Test.fArrFld;
                l2 += Test.iFld1;
                Test.fArrFld[(-39975 >>> 1) % N] -= Test.iFld;
                Test.dArrFld[(i25 >>> 1) % N] -= Test.instanceCount;
                Test.instanceCount += i25;
                Test.iFld2 = (int) Test.instanceCount;
                i26 >>= Test.iFld;
                Test.fFld *= Test.iFld2;
                Test.iFld1 = (int) l2;
                l2 *= Test.iFld1;
            } else {
                Test.iFld -= i25;
                Test.iFld1 = Test.iFld;
                Test.fFld %= (l2 | 1);
                Test.iArrFld[(i25 >>> 1) % N] -= -6;
                Test.iArrFld = Test.iArrFld;
                Test.iFld = 5;
                for (f = 1; f < 20; ++f) {
                    i28 *= 4;
                    lArr3[(int) (f + 1)] *= i26;
                    Test.fFld += Test.iFld;
                }
                l2 += (long) 35.759F;
            }
            Test.iFld >>>= -16716;
            Test.iFld2 -= -50437;
            Test.fFld = i29;
            by2 = (byte) Test.iFld2;
            i28 = 16445;
            if (b3) {
                if (b3)
                    continue;
                Test.iFld += i25;
                for (i30 = 1; i30 < 20; i30++) {
                    for (i32 = 1; i32 < 2; ++i32) {
                        l2 -= 25787;
                        i29 -= i26;
                        i31 <<= -221;
                        Test.iFld += (int) (85L + (i32 * i32));
                        l2 *= Test.iFld;
                        b3 = b3;
                        i31 = (int) Test.instanceCount;
                    }
                }
                if (b3)
                    continue;
                i31 += Test.iFld;
                for (i34 = 1; i34 < 20; i34++) {
                    i33 >>= i28;
                    Test.sFld += (short) i28;
                    for (i36 = 1; i36 < 2; i36++) {
                        Test.sFld = (short) i28;
                        Test.instanceCount += (i36 + i29);
                        Test.dFld -= i35;
                        if (b3)
                            break;
                        i35 = i28;
                        i29 <<= 208;
                        Test.iFld += (int) f;
                        if (b3)
                            continue;
                        Test.sFld = (short) Test.iFld1;
                        i37 += (i36 + by2);
                        Test.fFld = i29;
                        i26 >>= -45;
                        b3 = false;
                    }
                    Test.iArrFld[i34 + 1] += i32;
                    lArr3[i34] = i34;
                    i28 <<= i26;
                    Test.instanceCount *= i30;
                    for (d = i34; d < 2; d++) {
                        Test.iArrFld[i34 + 1] += i26;
                        Test.dFld += i32;
                    }
                }
            } else {
                Test.iFld = -54;
            }
        }
        {
            java.io.PrintStream ax$270 = System.out;
            java.io.PrintStream ax$271 = System.err;
            java.io.PrintStream ax$272 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$272);
            System.setErr(ax$272);
            try {
                for (int ax$268 = -1695; ax$268 < 5424; ax$268 += 1) {
                    try {
                        java.util.Vector ax$263 = new Vector();
                        java.lang.String[][] ax$264 = new java.lang.String[672][2];
                        boolean ax$262 = true;
                        int ax$265 = 8080;
                        java.net.InetAddress ax$266 = null;
                        if (ax$266.isSiteLocalAddress() != ax$262) {
                            ax$263.add(ax$264[ax$265]);
                        }
                    } catch (Throwable ax$267) {
                    } finally {
                    }
                }
            } catch (Throwable ax$269) {
            }
            System.setOut(ax$270);
            System.setErr(ax$271);
        }
        FuzzerUtils.out.println("i25 i26 b3 = " + i25 + "," + i26 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("f i28 i29 = " + Float.floatToIntBits(f) + "," + i28 + "," + i29);
        FuzzerUtils.out.println("by2 i30 i31 = " + by2 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("d i38 lArr3 = " + Double.doubleToLongBits(d) + "," + i38 + "," + FuzzerUtils.checkSum(lArr3));
        FuzzerUtils.out.println("bArr1 = " + FuzzerUtils.checkSum(bArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld Test.iFld1 Test.iFld2 = " + Float.floatToIntBits(Test.fFld) + "," + Test.iFld1 + "," + Test.iFld2);
        FuzzerUtils.out.println("Test.sFld Test.fArrFld Test.iArrFld = " + Test.sFld + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$273 = false;

    private static Boolean ax$285 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  bMeth ->  bMeth vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 bMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
