// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -1077094945240875240L;

    public static double dFld = -10.116898;

    public static short sFld = 2527;

    public static volatile long lFld = 64070L;

    public static volatile float fFld = 0.814F;

    public static boolean[] bArrFld = new boolean[N];

    public static volatile byte[][] byArrFld = new byte[N][N];

    public float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.byArrFld, (byte) -25);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long dMeth_check_sum = 0;

    public static double dMeth(long l1, boolean b, long l2) {
        int i2 = -2, i3 = -5, i4 = -9793, i5 = 0, i6 = -22, i7 = -242, i8 = 200, i9 = 6, iArr2[] = new int[N];
        float f2 = 2.129F;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr2, 48);
        FuzzerUtils.init(byArr, (byte) -81);
        i2 += (int) Test.instanceCount;
        for (i3 = 4; 140 > i3; i3++) {
            iArr2[i3] -= i4;
            Test.instanceCount = i4;
            iArr2 = iArr2;
            l1 += 57987;
            {
                java.io.PrintStream ax$0 = System.out;
                java.io.PrintStream ax$1 = System.err;
                java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$2);
                System.setErr(ax$2);
                {
                    boolean ax$9 = false;
                    for (int ax$8 = -4151; ax$8 < 4876; ax$8 += 8) {
                        if (!ax$9) {
                            ax$9 = true;
                            {
                                System.setOut(ax$0);
                                System.setErr(ax$1);
                                for (i5 = 1; i5 < 4; i5++) {
                                    i4 = (int) Test.dFld;
                                    for (i7 = 1; i7 < 2; i7++) {
                                        l2 = i3;
                                        switch(((i5 >>> 1) % 3) + 109) {
                                            case 109:
                                                Test.sFld = (short) Test.dFld;
                                                i8 = (int) l1;
                                                i6 = i3;
                                                l2 -= i6;
                                                i8 += (14180 + (i7 * i7));
                                                break;
                                            case 110:
                                                i8 = i5;
                                                i4 &= (int) Test.instanceCount;
                                                Test.instanceCount -= (long) 1.34F;
                                                break;
                                            case 111:
                                                i2 += (int) 255648810782663408L;
                                                i4 >>>= i8;
                                                if (b)
                                                    break;
                                                i2 += i7;
                                                f2 += (i7 * i6);
                                                i4 *= 6;
                                                i4 += (i7 * i3);
                                            default:
                                                i6 += i7;
                                        }
                                        iArr2[i5] ^= Test.sFld;
                                        i6 <<= i2;
                                        i9 += (i7 * Test.instanceCount);
                                        i2 -= i2;
                                        byArr[i5 - 1] -= (byte) Test.dFld;
                                        i8 += (-58 + (i7 * i7));
                                        l1 /= (i7 | 1);
                                        i4 = 56139;
                                        Test.dFld = i2;
                                    }
                                    Test.dFld = i8;
                                }
                                System.setOut(ax$2);
                                System.setErr(ax$2);
                            }
                        }
                        int ax$4 = i9;
                        int ax$5 = i2;
                        int ax$6 = i3;
                        try {
                            int[][] ax$3 = new int[10][];
                            for (i2 = 0; i2 < i3; i2++) {
                                ax$3[i9][i2] = (int) ((float) (i9 + 1) / (float) (i2 + 1));
                            }
                        } catch (Throwable ax$7) {
                        } finally {
                            i9 = ax$4;
                            i2 = ax$5;
                            i3 = ax$6;
                        }
                    }
                }
                System.setOut(ax$0);
                System.setErr(ax$1);
            }
        }
        long meth_res = l1 + (b ? 1 : 0) + l2 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f2) + i9 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr);
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public static void vMeth1(int i1, float f1) {
        if (ax$32) {
            try {
                boolean ax$34 = /*timing=*/
                false;
                boolean ax$35 = false;
                boolean ax$33 = false;
                if (!ax$34 && ax$33 != ax$35) {
                    ax$34 = true;
                }
            } catch (Throwable ax$36) {
            } finally {
            }
            return;
        }
        boolean b1 = false;
        int i10 = 237, i11 = 1, i12 = -155, i13 = 252, i14 = -10, i15 = -92, i16 = -9, i17 = 210, iArr1[] = new int[N];
        short[] sArr = new short[N];
        long[] lArr = new long[N];
        float[] fArr = new float[N];
        FuzzerUtils.init(iArr1, 14);
        FuzzerUtils.init(sArr, (short) -30200);
        FuzzerUtils.init(lArr, -41497L);
        FuzzerUtils.init(fArr, 48.767F);
        iArr1 = (iArr1 = (iArr1 = (iArr1 = iArr1)));
        i1 |= (int) ((i1 + Math.max(Test.instanceCount, -1844342522L)) - dMeth(Test.instanceCount, b1, Test.instanceCount));
        for (i10 = 5; i10 < 151; i10++) {
            for (i12 = 1; i12 < 4; i12++) {
                i11 >>>= i13;
                Test.instanceCount -= (long) Test.dFld;
                for (i14 = 1; i14 < 2; i14++) {
                    if (b1) {
                        i11 = 146;
                        i15 += (i14 * i14);
                    }
                    Test.instanceCount += 12633;
                    i13 |= (int) Test.instanceCount;
                    iArr1[i12 - 1] = i14;
                    i1 += (i14 * Test.instanceCount);
                    Test.instanceCount = i12;
                }
                i13 = i15;
                Test.instanceCount += (((i12 * i12) + Test.instanceCount) - i13);
                for (i16 = 2; i16 > 1; i16--) {
                    i15 = i13;
                    if (true) {
                        sArr[i10] = (short) i17;
                        switch((((i14 >>> 1) % 2) * 5) + 104) {
                            case 111:
                                i1 += (((i16 * i15) + i10) - Test.instanceCount);
                                i17 = i1;
                                break;
                            case 108:
                                f1 += f1;
                                Test.instanceCount += i15;
                                iArr1[i12] <<= 5369;
                                Test.instanceCount *= (long) f1;
                                i15 *= (int) Test.dFld;
                                sArr[i12 + 1] = (short) i11;
                                i11 += (i16 * i16);
                                i17 = -61159;
                                lArr[i16 + 1] *= (long) -29.75754;
                                fArr[i16] *= i10;
                                i13 *= i11;
                                b1 = b1;
                                f1 *= i10;
                                break;
                            default:
                                i1 += (int) 8L;
                        }
                    } else if (b1) {
                        f1 += i12;
                    } else {
                        Test.sFld += (short) i15;
                    }
                }
            }
        }
        vMeth1_check_sum += i1 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(long l, byte by) {
        int i = 7, i18 = 14, i19 = 28327, i20 = 11, i21 = -15710, i22 = 48001, iArr[] = new int[N];
        float f = -23.370F, f3 = 0.935F;
        double d = -1.75866;
        boolean b2 = false;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr, 8001);
        FuzzerUtils.init(lArr1, 152L);
        iArr[(i >>> 1) % N] += (int) (((i * Test.dFld) - Integer.reverseBytes(i)) * ((f - l) + (6 + (i + Test.instanceCount))));
        {
            java.io.PrintStream ax$39 = System.out;
            java.io.PrintStream ax$40 = System.err;
            java.io.PrintStream ax$41 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$41);
            System.setErr(ax$41);
            try {
                ax$32 = true;
                for (int ax$37 = 0; ax$37 < 5657; ax$37 += 1) vMeth1(1738564426, (float) 0.208188616437888);
            } catch (java.lang.Throwable ax$38) {
            } finally {
                ax$32 = false;
            }
            System.setOut(ax$39);
            System.setErr(ax$40);
        }
        vMeth1(i, f3);
        d = 83;
        {
            java.io.PrintStream ax$10 = System.out;
            java.io.PrintStream ax$11 = System.err;
            java.io.PrintStream ax$12 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$12);
            System.setErr(ax$12);
            {
                boolean ax$22 = false;
                for (int ax$21 = -2663; ax$21 < 2678; ax$21 += 6) {
                    if (!ax$22) {
                        ax$22 = true;
                        {
                            System.setOut(ax$10);
                            System.setErr(ax$11);
                            do {
                                iArr[(int) (d + 1)] *= i;
                            } while (--d > 0);
                            System.setOut(ax$12);
                            System.setErr(ax$12);
                        }
                    }
                    int ax$16 = i19;
                    int ax$17 = i18;
                    int ax$18 = i20;
                    int ax$19 = i22;
                    try {
                        byte[] ax$13 = new byte[10];
                        if (i22 > 0) {
                            i19 += i22;
                            for (int ax$14 = 0; ax$14 < i22; ax$14++) {
                                int ax$15 = ax$13[i20 + ax$14];
                                i18 = i18 ^ ax$15;
                            }
                        }
                    } catch (Throwable ax$20) {
                    } finally {
                        i19 = ax$16;
                        i18 = ax$17;
                        i20 = ax$18;
                        i22 = ax$19;
                    }
                }
            }
            System.setOut(ax$10);
            System.setErr(ax$11);
        }
        Test.bArrFld[(i >>> 1) % N] = b2;
        Test.sFld = (short) Test.instanceCount;
        Test.dFld = i;
        i18 = 1;
        while (++i18 < 179) {
            i += (((i18 * i) + Test.sFld) - i);
            iArr[i18] = (int) Test.instanceCount;
            lArr1[i18] = Test.sFld;
            i19 = 1;
            while (++i19 < 3) {
                i += i19;
                lArr1[i18] -= (long) f3;
                i -= i18;
                i >>>= i18;
                if (b2) {
                    if (b2) {
                        switch(((i19 >>> 1) % 10) + 7) {
                            case 7:
                            case 8:
                                switch(((i18 % 2) * 5) + 100) {
                                    case 107:
                                        for (i20 = 1; i20 < 1; i20++) {
                                            i = i21;
                                            i21 *= 43934;
                                            i *= i;
                                            lArr1[i20] = (long) -99.332F;
                                            Test.sFld += (short) (((i20 * i19) + i18) - f);
                                            switch((i20 % 9) + 49) {
                                                case 49:
                                                    Test.sFld = (short) i18;
                                                    i21 -= i19;
                                                    l = i18;
                                                    iArr = iArr;
                                                    i21 -= i;
                                                    switch((i18 % 2) + 112) {
                                                        case 112:
                                                            switch((i20 % 8) + 111) {
                                                                case 111:
                                                                    if (i20 != 0) {
                                                                        vMeth_check_sum += l + by + i + Float.floatToIntBits(f) + Float.floatToIntBits(f3) + Double.doubleToLongBits(d) + (b2 ? 1 : 0) + i18 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
                                                                        return;
                                                                    }
                                                                    Test.sFld += (short) (((i20 * f) + f) - Test.sFld);
                                                                    i21 += (i20 * i20);
                                                                case 112:
                                                                    l = Test.instanceCount;
                                                                case 113:
                                                                    iArr[i20 - 1] = i19;
                                                                    break;
                                                                case 114:
                                                                case 115:
                                                                    Test.instanceCount += (((i20 * f3) + i18) - i20);
                                                                    break;
                                                                case 116:
                                                                    i += Test.sFld;
                                                                    break;
                                                                case 117:
                                                                    i <<= i19;
                                                                    break;
                                                                case 118:
                                                                default:
                                                                    i21 += i;
                                                            }
                                                            break;
                                                        case 113:
                                                            Test.byArrFld = Test.byArrFld;
                                                            break;
                                                        default:
                                                            Test.sFld = (short) l;
                                                    }
                                                    break;
                                                case 50:
                                                    i <<= -3;
                                                case 51:
                                                case 52:
                                                    by += (byte) i20;
                                                    break;
                                                case 53:
                                                    if (i18 != 0) {
                                                        vMeth_check_sum += l + by + i + Float.floatToIntBits(f) + Float.floatToIntBits(f3) + Double.doubleToLongBits(d) + (b2 ? 1 : 0) + i18 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
                                                        return;
                                                    }
                                                    break;
                                                case 54:
                                                case 55:
                                                    i21 &= i20;
                                                    break;
                                                case 56:
                                                    iArr[i19] &= i;
                                                    break;
                                                case 57:
                                            }
                                        }
                                    case 105:
                                        b2 = b2;
                                        break;
                                }
                                break;
                            case 9:
                                lArr1[i18] |= Test.lFld;
                                break;
                            case 10:
                                i22 >>>= i20;
                            case 11:
                                iArr[i18] = i;
                                break;
                            case 12:
                                Test.instanceCount = i18;
                                break;
                            case 13:
                                i22 += i19;
                                break;
                            case 14:
                                i += (6754 + (i19 * i19));
                                break;
                            case 15:
                                i = i22;
                                break;
                            case 16:
                                f3 += l;
                        }
                        vMeth_check_sum += l + by + i + Float.floatToIntBits(f) + Float.floatToIntBits(f3) + Double.doubleToLongBits(d) + (b2 ? 1 : 0) + i18 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                } else {
                    i -= by;
                    vMeth_check_sum += l + by + i + Float.floatToIntBits(f) + Float.floatToIntBits(f3) + Double.doubleToLongBits(d) + (b2 ? 1 : 0) + i18 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
                    return;
                }
            }
        }
        vMeth_check_sum += l + by + i + Float.floatToIntBits(f) + Float.floatToIntBits(f3) + Double.doubleToLongBits(d) + (b2 ? 1 : 0) + i18 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {
        byte by1 = 65;
        int i23 = 58500, i24 = 63385, i25 = 36922, i26 = -206, i27 = -232, i28 = 216, i29 = -14, i30 = 11, i31 = -12, iArr3[] = new int[N];
        boolean b3 = false;
        long[] lArr2 = new long[N];
        double[] dArr = new double[N];
        FuzzerUtils.init(lArr2, 144L);
        FuzzerUtils.init(iArr3, -16);
        FuzzerUtils.init(dArr, -2.90974);
        vMeth(Test.instanceCount, by1);
        if (b3) {
            i23 = 1;
            while (++i23 < 196) {
                i24 += (int) Test.lFld;
                if (b3) {
                    lArr2[i23 + 1] = i23;
                    for (i25 = 1; i25 < 26; i25 += 2) {
                        i24 >>= (int) Test.lFld;
                        if (b3)
                            break;
                        iArr3[i25] += (int) Test.lFld;
                        Test.fFld = i24;
                        Test.fFld = -21139;
                        i26 -= i23;
                        iArr3[i25 - 1] >>>= i24;
                        i26 >>= i25;
                        for (i27 = 1; i27 < 3; i27++) {
                            i24 >>>= (int) Test.instanceCount;
                            Test.lFld += i27;
                            Test.instanceCount += (long) Test.dFld;
                            Test.dFld = Test.fFld;
                            i26 = (int) Test.lFld;
                            i28 = -19448;
                        }
                    }
                    Test.fFld -= i26;
                    if (b3) {
                        i24 *= (int) Test.fFld;
                        switch(((-14 >>> 1) % 2) + 76) {
                            case 76:
                                i26 &= (int) 222L;
                                i26 = (int) Test.instanceCount;
                                i28 += (int) -240L;
                                for (i29 = 1; 26 > i29; i29++) {
                                    i24 += (6 + (i29 * i29));
                                    switch(((i23 % 6) * 5) + 42) {
                                        case 69:
                                            iArr3 = iArr3;
                                            Test.lFld += i29;
                                            iArr3[i23] >>= (int) Test.lFld;
                                            Test.dFld -= i29;
                                            i28 = (int) -2L;
                                            Test.instanceCount /= 13;
                                            i26 = (int) Test.lFld;
                                            break;
                                        case 71:
                                            iArr3[i23 + 1] *= i25;
                                            i30 &= (int) Test.lFld;
                                            i26 = (int) Test.lFld;
                                            Test.byArrFld[i29][i29] -= (byte) i27;
                                            i28 += (int) 778831637L;
                                            i26 -= -41;
                                            Test.instanceCount += i29;
                                            dArr[i29] += Test.lFld;
                                            i24 += (i29 * i29);
                                            iArr3[i23] *= i24;
                                            Test.lFld += i29;
                                            break;
                                        case 56:
                                            i26 = i26;
                                            i24 -= i27;
                                            Test.dFld *= i30;
                                            iArr3 = iArr3;
                                            i31 = 2;
                                            do {
                                                Test.lFld >>= i23;
                                                Test.instanceCount = -44;
                                                lArr2[i29 - 1] *= i27;
                                                Test.fFld = i31;
                                                fArrFld[i29 + 1] *= i31;
                                                Test.fFld += Test.lFld;
                                                Test.fFld += i31;
                                                by1 += (byte) (i31 * i31);
                                                Test.fFld += i23;
                                                try {
                                                    iArr3[i31 - 1] = (i26 / -8947);
                                                    i24 = (i27 / -176);
                                                    i30 = (i29 / 51800);
                                                } catch (ArithmeticException a_e) {
                                                }
                                                Test.sFld *= (short) Test.fFld;
                                                Test.fFld += (i31 * i31);
                                                Test.fFld = i26;
                                                Test.fFld /= 10126;
                                                Test.fFld -= 33;
                                            } while ((i31 -= 3) > 0);
                                            {
                                                java.io.PrintStream ax$29 = System.out;
                                                java.io.PrintStream ax$30 = System.err;
                                                java.io.PrintStream ax$31 = new java.io.PrintStream(new java.io.OutputStream() {

                                                    @Override
                                                    public void write(int b) throws java.io.IOException {
                                                        // DO NOTHING: DISCARD ALL OUTPUTS
                                                    }
                                                });
                                                System.setOut(ax$31);
                                                System.setErr(ax$31);
                                                try {
                                                    for (int ax$27 = -3031; ax$27 < 5409; ax$27 += 1) {
                                                        try {
                                                            java.lang.Float ax$23 = new Float(1.0001F);
                                                            java.lang.Float ax$24 = new Float(1.0001F);
                                                            for (int ax$25 = 0; ax$25 < 1000; ax$25++) {
                                                                if ((ax$25 & 1) == 0) {
                                                                    ax$23 = new Float(ax$23 + 1.f);
                                                                } else {
                                                                    ax$24 = new Float(ax$24 + 2.f);
                                                                }
                                                            }
                                                        } catch (Throwable ax$26) {
                                                        } finally {
                                                        }
                                                    }
                                                } catch (Throwable ax$28) {
                                                }
                                                System.setOut(ax$29);
                                                System.setErr(ax$30);
                                            }
                                            i30 += by1;
                                            iArr3[i29] = i27;
                                            Test.fFld -= i29;
                                        case 48:
                                            Test.instanceCount += i29;
                                            by1 = (byte) -81L;
                                            break;
                                        case 63:
                                            i24 += (((i29 * i24) + Test.lFld) - i28);
                                        case 64:
                                            Test.lFld += (((i29 * i29) + i26) - i28);
                                        default:
                                            i28 = (int) 33L;
                                    }
                                }
                                break;
                            case 77:
                                iArr3 = iArr3;
                                break;
                            default:
                                i30 += i24;
                        }
                    } else if (b3) {
                        if (b3)
                            break;
                    } else if (b3) {
                        i26 += Test.sFld;
                    } else {
                        i24 = by1;
                    }
                }
            }
        }
        FuzzerUtils.out.println("by1 i23 i24 = " + by1 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 b3 = " + i25 + "," + i26 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 lArr2 = " + i30 + "," + i31 + "," + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("iArr3 dArr = " + FuzzerUtils.checkSum(iArr3) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.lFld Test.fFld Test.bArrFld = " + Test.lFld + "," + Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("Test.byArrFld fArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$32 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
