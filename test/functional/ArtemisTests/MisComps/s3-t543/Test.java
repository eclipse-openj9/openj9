// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 9L;

    public float fFld = -77.26F;

    public static boolean bFld = false;

    public static int iFld = 12;

    public static short sFld = 13281;

    public static double dFld = -124.7211;

    public int iFld1 = 9;

    public static float[][] fArrFld = new float[N][N];

    public int[] iArrFld = new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.281F);
    }

    public static long dMeth_check_sum = 0;

    public static long byMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vMeth(double d) {
        float f2 = 58.597F;
        int i9 = 122, i10 = -15751, i11 = 2, i12 = 561, i13 = -13, i14 = 13787, iArr[] = new int[N];
        double d1 = -112.39325;
        byte by = 53;
        short[] sArr = new short[N];
        FuzzerUtils.init(iArr, -54006);
        FuzzerUtils.init(sArr, (short) 12215);
        f2 -= Test.instanceCount;
        Test.instanceCount += i9;
        for (i10 = 4; 195 > i10; i10++) {
            i11 += (int) Test.instanceCount;
            i11 += i10;
            f2 += i10;
            for (i12 = 1; i12 < 3; i12++) {
                i13 -= (int) d;
                iArr[i12] = i10;
                for (d1 = 1; d1 < 2; ++d1) {
                    i11 += (int) (d1 * d1);
                    d *= -6L;
                    i13 = i9;
                    by -= (byte) Test.instanceCount;
                    switch((int) ((d1 % 10) + 111)) {
                        case 111:
                            f2 += (float) (d1 * d1);
                            i9 += (-251 + (d1 * d1));
                            i11 *= i11;
                            try {
                                i13 = (132 % i13);
                                i14 = (i9 % i11);
                                iArr[(int) (d1 + 1)] = (i14 % 98);
                            } catch (ArithmeticException a_e) {
                            }
                            if (i10 != 0) {
                                vMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1) + i14 + by + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
                                return;
                            }
                            Test.instanceCount <<= i14;
                            i11 *= (int) Test.instanceCount;
                            iArr[i10] = 74;
                            f2 += (float) (d1 * Test.instanceCount);
                            i13 = -1;
                            break;
                        case 112:
                            iArr[i10 - 1] -= i13;
                            d *= -249L;
                            i11 = i14;
                            f2 += i10;
                            i9 = (int) 11644L;
                            i13 = by;
                            Test.instanceCount >>= i13;
                            i13 += (int) (d1 * d1);
                            break;
                        case 113:
                            sArr[(int) (d1)] += (short) i14;
                            f2 -= Test.instanceCount;
                            if (i13 != 0) {
                                vMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1) + i14 + by + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
                                return;
                            }
                            i11 = (int) f2;
                            break;
                        case 114:
                        case 115:
                            i13 >>>= i11;
                        case 116:
                            f2 *= i12;
                            break;
                        case 117:
                            i9 += 147;
                            break;
                        case 118:
                            i11 -= i14;
                        case 119:
                            Test.bFld = Test.bFld;
                            break;
                        case 120:
                            by += (byte) Test.instanceCount;
                    }
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1) + i14 + by + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public static byte byMeth(long l1, int i4) {
        int i5 = -12, i6 = 100, i7 = -242, i8 = -1565, i15 = 58714, i16 = -195, i17 = -12, i18 = -73, i19 = 139, i20 = 5703, iArr1[] = new int[N];
        float f1 = 2.175F, f3 = -1.472F, fArr[] = new float[N];
        double d2 = 0.18164, dArr1[] = new double[N];
        byte by1 = 127;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(dArr1, 0.30258);
        FuzzerUtils.init(fArr, 39.298F);
        FuzzerUtils.init(iArr1, -28763);
        FuzzerUtils.init(lArr1, 23404L);
        for (i5 = 2; i5 < 107; i5 += 2) {
            i7 = 1;
            while (++i7 < 10) {
                i6 *= (int) (Test.instanceCount++);
                for (f1 = i7; 1 > f1; f1++) {
                    i4 >>= (int) l1;
                }
                l1 += (i7 ^ Test.instanceCount);
                vMeth(d2);
                dArr1[i5 + 1] -= Test.instanceCount;
                if (Test.iFld != 0) {
                }
                fArr[i7 - 1] = Test.iFld;
                iArr1[i5] >>>= Test.iFld;
                i8 %= (int) (l1 | 1);
            }
            Test.sFld += (short) (-163 + (i5 * i5));
            Test.instanceCount = (long) f1;
            Test.instanceCount = Test.iFld;
            Test.instanceCount += (i5 ^ Test.sFld);
            for (i15 = 1; 10 > i15; ++i15) {
                Test.instanceCount *= l1;
                fArr = FuzzerUtils.float1array(N, (float) 55.628F);
                for (i17 = 1; i17 < 2; ++i17) {
                    i18 += -4;
                    i6 >>>= i4;
                    i8 += (i17 * i17);
                    lArr1[i15] -= i8;
                    Test.instanceCount *= i15;
                    i6 += (i17 * Test.iFld);
                }
            }
            i6 += (((i5 * f1) + l1) - l1);
            f3 = 50;
            i8 += i8;
            for (i19 = 1; i19 < 10; i19++) {
                i6 = i20;
                i6 -= (int) 7058L;
                i8 += i19;
                Test.iFld &= i15;
                by1 += (byte) (i19 * i19);
                l1 += Test.sFld;
                i4 += (int) 13L;
            }
        }
        long meth_res = l1 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + Double.doubleToLongBits(d2) + i15 + i16 + i17 + i18 + Float.floatToIntBits(f3) + i19 + i20 + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        byMeth_check_sum += meth_res;
        return (byte) meth_res;
    }

    public static double dMeth(float f, long l, int i1) {
        int i2 = 7, i3 = 149, i21 = -14, i22 = 23475, i23 = 11, i24 = 165, iArr2[] = new int[N];
        byte by2 = 3, byArr[] = new byte[N];
        long l2 = 246L, lArr[] = new long[N];
        double d3 = 18.69970;
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(lArr, -7299L);
        FuzzerUtils.init(iArr2, -60481);
        FuzzerUtils.init(byArr, (byte) 41);
        FuzzerUtils.init(bArr, false);
        lArr[(i1 >>> 1) % N] = (i1 + ((i1 - i1) - (Test.instanceCount & -15147)));
        for (i2 = 82; i2 > 1; i2--) {
            i3 -= (i1++);
            lArr[i2 - 1] = (-byMeth(l, i2));
            Test.iFld >>= (int) 13518L;
            switch(((Test.iFld >>> 1) % 4) + 71) {
                case 71:
                    for (i21 = 1; i21 < 7; ++i21) {
                        by2 = (byte) i3;
                    }
                    Test.iFld = i1;
                    switch(((i2 % 8) * 5) + 102) {
                        case 116:
                            l = l;
                            switch(((2174 >>> 1) % 10) + 93) {
                                case 93:
                                    switch(((i2 % 9) * 5) + 120) {
                                        case 123:
                                            Test.instanceCount = i21;
                                            for (l2 = 7; l2 > i2; l2--) {
                                                i23 += (int) (((l2 * l2) + Test.iFld) - i3);
                                                l += (((l2 * i23) + i21) - f);
                                                Test.iFld = i2;
                                                by2 = (byte) i1;
                                                i1 -= i2;
                                                d3 = 1;
                                                while (++d3 < 1) {
                                                    double d4 = 5.94859;
                                                    Test.iFld += (int) ((long) d3 | i21);
                                                    i1 *= i2;
                                                    i1 -= (int) f;
                                                    Test.fArrFld = Test.fArrFld;
                                                    i1 >>= i24;
                                                    iArr2[(int) (d3 + 1)] = 72;
                                                    d4 *= i21;
                                                    i22 += (int) (d3 - l2);
                                                    lArr = lArr;
                                                    if (i2 != 0) {
                                                    }
                                                    i1 += (int) (((d3 * i2) + Test.instanceCount) - i3);
                                                    byArr[(int) (l2 - 1)] *= (byte) d4;
                                                    f += (float) (d3 - f);
                                                }
                                                Test.instanceCount -= (long) f;
                                                Test.instanceCount -= i22;
                                                bArr[(int) (l2 - 1)] = Test.bFld;
                                            }
                                            break;
                                        case 128:
                                            i23 <<= 2;
                                        case 145:
                                            if (i3 != 0) {
                                            }
                                        case 126:
                                            iArr2[i2 + 1] += 11;
                                            break;
                                        case 151:
                                            Test.instanceCount = i23;
                                            break;
                                        case 140:
                                            l = i22;
                                            break;
                                        case 158:
                                            Test.dFld = i22;
                                        case 164:
                                            Test.instanceCount += (i2 | i3);
                                            break;
                                        case 162:
                                            by2 = (byte) i24;
                                            break;
                                    }
                                case 94:
                                    by2 = (byte) -2576642789L;
                                    break;
                                case 95:
                                    i3 &= 47400;
                                    break;
                                case 96:
                                    i24 = i2;
                                    break;
                                case 97:
                                    i23 *= i1;
                                    break;
                                case 98:
                                    i22 += i23;
                                case 99:
                                    f += (-44 + (i2 * i2));
                                    break;
                                case 100:
                                    Test.sFld *= (short) Test.iFld;
                                    break;
                                case 101:
                                    i23 = by2;
                                    break;
                                case 102:
                                    Test.instanceCount = Test.instanceCount;
                                    break;
                            }
                            break;
                        case 117:
                            l <<= 17;
                        case 123:
                            f -= i1;
                            break;
                        case 122:
                            iArr2[i2 + 1] = (int) Test.instanceCount;
                            break;
                        case 111:
                            Test.iFld *= i3;
                        case 134:
                            l += Test.instanceCount;
                            break;
                        case 120:
                            l += i2;
                        case 137:
                            i23 -= -54626;
                        default:
                            i24 += i2;
                    }
                    break;
                case 72:
                    Test.iFld = i3;
                    break;
                case 73:
                    Test.instanceCount += i21;
                case 74:
                    iArr2[i2 + 1] = (int) Test.instanceCount;
            }
            {
                java.io.PrintStream ax$12 = System.out;
                java.io.PrintStream ax$13 = System.err;
                java.io.PrintStream ax$14 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$14);
                System.setErr(ax$14);
                try {
                    for (int ax$10 = -2135; ax$10 < 7389; ax$10 += 1) {
                        try {
                            java.lang.Object ax$8 = "411848782090993.5";
                            if (ax$8 == null) {
                            }
                        } catch (Throwable ax$9) {
                        } finally {
                        }
                    }
                } catch (Throwable ax$11) {
                }
                System.setOut(ax$12);
                System.setErr(ax$13);
            }
        }
        long meth_res = Float.floatToIntBits(f) + l + i1 + i2 + i3 + i21 + i22 + by2 + l2 + i23 + Double.doubleToLongBits(d3) + i24 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr);
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -136, i26 = -16, i27 = 0, i28 = 5, i29 = -4, i30 = 83, i31 = 17, i32 = 9, i33 = 141;
        byte by3 = 2;
        long l3 = -4L, lArr2[] = new long[N];
        float f4 = -85.93F;
        double[] dArr = new double[N];
        boolean[] bArr1 = new boolean[N];
        FuzzerUtils.init(dArr, 1.7654);
        FuzzerUtils.init(lArr2, 183L);
        FuzzerUtils.init(bArr1, false);
        fFld = (float) ((dArr[(i >>> 1) % N] - dMeth(fFld, Test.instanceCount, 27421)) + Test.instanceCount);
        lArr2[(Test.iFld >>> 1) % N] = Test.iFld;
        fFld += i;
        by3 = (byte) Test.dFld;
        Test.iFld = 245;
        iArrFld = FuzzerUtils.int1array(N, (int) 75);
        Test.sFld <<= (short) Test.iFld;
        Test.sFld -= (short) i;
        for (i26 = 7; 121 > i26; i26 += 3) {
            for (i28 = 2; 132 > i28; i28 += 2) {
                i30 = 3;
                do {
                    iArrFld[i28 + 1] = i26;
                    switch((i26 % 1) + 46) {
                        case 46:
                            i += i27;
                            i27 = i30;
                            i29 += (i30 | i29);
                            break;
                        default:
                            i27 += i26;
                            i29 += i30;
                            i29 += i;
                            iArrFld[i30 - 1] += i27;
                            if (Test.bFld)
                                continue;
                            Test.instanceCount *= i27;
                            Test.iFld += (int) l3;
                            fFld += (i30 * i26);
                            try {
                                i = (i26 / -40488);
                                i = (iFld1 / i);
                                i = (iArrFld[i26] % iFld1);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.instanceCount += i;
                            Test.instanceCount /= (i27 | 1);
                            iFld1 >>>= i29;
                            iFld1 += (i30 * i30);
                            i29 += i29;
                    }
                    l3 = l3;
                    by3 = (byte) Test.iFld;
                    i27 = i;
                    iFld1 -= (int) Test.dFld;
                    iArrFld[i30 - 1] = i29;
                    if (Test.bFld) {
                        i29 = i29;
                        Test.instanceCount -= i30;
                        iFld1 = (int) fFld;
                        Test.iFld *= i26;
                        try {
                            i = (Test.iFld / -41700);
                            i = (i26 / -871192220);
                            iFld1 = (Test.iFld / i26);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.iFld = (int) fFld;
                        l3 += i28;
                        i29 += (((i30 * fFld) + i27) - i);
                        fFld = -149;
                        l3 -= Test.instanceCount;
                        try {
                            i29 = (i28 / i26);
                            i27 = (i / -24);
                            iFld1 = (-29028 % iArrFld[i26 - 1]);
                        } catch (ArithmeticException a_e) {
                        }
                    } else {
                        i27 += (((i30 * fFld) + iFld1) - i29);
                    }
                    l3 -= l3;
                } while (--i30 > 0);
                {
                    java.io.PrintStream ax$19 = System.out;
                    java.io.PrintStream ax$20 = System.err;
                    java.io.PrintStream ax$21 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$21);
                    System.setErr(ax$21);
                    try {
                        for (int ax$17 = -1370; ax$17 < 6964; ax$17 += 1) {
                            boolean ax$15 = bFld;
                            try {
                                if (bFld)
                                    ;
                            } catch (Throwable ax$16) {
                            } finally {
                                bFld = ax$15;
                            }
                        }
                    } catch (Throwable ax$18) {
                    }
                    System.setOut(ax$19);
                    System.setErr(ax$20);
                }
                i27 |= i29;
                i29 += (int) -18712L;
            }
            Test.instanceCount += (i26 * i26);
            for (i31 = i26; i31 < 132; i31++) {
                i -= (int) -3973355367L;
                Test.instanceCount -= (long) Test.dFld;
                fFld -= Test.instanceCount;
                iFld1 >>>= (int) 20L;
                for (f4 = 1; 1 > f4; ++f4) {
                    bArr1[(int) (f4 + 1)] = false;
                    fFld = 247;
                    Test.instanceCount = Test.iFld;
                    Test.fArrFld[(int) (f4 + 1)][(int) (f4 + 1)] = 248L;
                    i27 = i29;
                    i32 >>= i29;
                    switch(((i29 >>> 1) % 3) + 1) {
                        case 1:
                            i29 &= i31;
                            if (Test.bFld)
                                continue;
                            i32 += (int) (((f4 * i31) + Test.sFld) - Test.sFld);
                            Test.iFld += (-19080 + (f4 * f4));
                            fFld -= (float) Test.dFld;
                            iFld1 -= i31;
                            if (Test.bFld)
                                break;
                            i27 = Test.iFld;
                            break;
                        case 2:
                            Test.instanceCount = i27;
                            l3 += (long) (((f4 * i) + f4) - Test.instanceCount);
                            break;
                        case 3:
                            i27 += (int) f4;
                            break;
                        default:
                            i33 = i31;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i by3 i26 = " + i + "," + by3 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 l3 i31 = " + i30 + "," + l3 + "," + i31);
        FuzzerUtils.out.println("i32 f4 i33 = " + i32 + "," + Float.floatToIntBits(f4) + "," + i33);
        FuzzerUtils.out.println("dArr lArr2 bArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(lArr2) + "," + FuzzerUtils.checkSum(bArr1));
        FuzzerUtils.out.println("Test.instanceCount fFld Test.bFld = " + Test.instanceCount + "," + Float.floatToIntBits(fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld Test.sFld Test.dFld = " + Test.iFld + "," + Test.sFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("iFld1 Test.fArrFld iArrFld = " + iFld1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$22) {
            try {
                byte[] ax$23 = new byte[16];
                byte[] ax$27 = new byte[0];
                byte[] ax$26 = new byte[10];
                int ax$24 = Math.min(ax$26.length, Math.min(ax$27.length, ax$23.length));
                for (int ax$25 = 0; ax$25 < ax$24; ax$25++) {
                    ax$26[ax$25] = (byte) ((ax$27[ax$25] + ax$23[ax$25]) >>> 1);
                }
            } catch (Throwable ax$28) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$22 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  dMeth ->  dMeth mainTest
// DEBUG  byMeth ->  byMeth dMeth mainTest
// DEBUG  vMeth ->  vMeth byMeth dMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
