// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 4L;

    public static short sFld = 30418;

    public static int iFld = 6;

    public static byte byFld = 74;

    public static volatile byte byFld1 = 67;

    public boolean bFld = false;

    public static int[] iArrFld = new int[N];

    public static int[] iArrFld1 = new int[N];

    public static double[] dArrFld = new double[N];

    public static float[][] fArrFld = new float[N][N];

    public static long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13);
        FuzzerUtils.init(Test.iArrFld1, 50845);
        FuzzerUtils.init(Test.dArrFld, 83.72799);
        FuzzerUtils.init(Test.fArrFld, 0.403F);
        FuzzerUtils.init(Test.lArrFld, -42068L);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {
        float f1 = -34.274F;
        boolean b = false;
        int i10 = 218, i11 = -27654, i12 = 225, i13 = -57797, i14 = -50230;
        for (double d : Test.dArrFld) {
            Test.iFld += (int) f1;
            if (b)
                continue;
            switch(((Test.iFld >>> 1) % 1) + 21) {
                case 21:
                    for (i10 = 1; i10 < 2; i10++) {
                        Test.iFld = (int) Test.instanceCount;
                        Test.iFld *= (int) Test.instanceCount;
                        i11 += (int) (-70L + (i10 * i10));
                        Test.sFld += (short) (-9054542117848586341L + (i10 * i10));
                        i12 = 2;
                        do {
                            i11 += (int) Test.instanceCount;
                            Test.instanceCount += (i12 ^ Test.instanceCount);
                        } while (--i12 > 0);
                        switch(((i10 % 8) * 5) + 67) {
                            case 82:
                                Test.instanceCount += (i10 * i10);
                                Test.iFld += i10;
                                Test.iFld += (i10 | i12);
                                Test.iFld += (int) Test.instanceCount;
                                Test.instanceCount = i11;
                                Test.fArrFld[i10 + 1][i10 + 1] /= -6516;
                                Test.byFld += (byte) d;
                                Test.iFld -= 3;
                                Test.instanceCount += i12;
                                Test.iArrFld1[i10 - 1] += (int) d;
                                break;
                            case 106:
                                for (i13 = 2; 1 < i13; i13 -= 3) {
                                    Test.dArrFld[i13] = Test.sFld;
                                    Test.instanceCount >>= i10;
                                    d += Test.instanceCount;
                                    switch(((-8872 >>> 1) % 2) + 14) {
                                        case 14:
                                            i11 += (i13 + i12);
                                            f1 += ((long) i13 | (long) Test.iFld);
                                            Test.byFld >>= (byte) i10;
                                            i11 += (((i13 * Test.instanceCount) + Test.iFld) - Test.iFld);
                                            i11 += i13;
                                            Test.iFld += i12;
                                            f1 = i11;
                                            if (i12 != 0) {
                                            }
                                            Test.instanceCount += (i13 - i12);
                                            break;
                                        case 15:
                                            i14 = i12;
                                            break;
                                    }
                                }
                                break;
                            case 74:
                                i14 += (((i10 * Test.instanceCount) + Test.iFld) - i14);
                                break;
                            case 70:
                                if (b)
                                    break;
                            case 71:
                                i11 += (i10 * Test.iFld);
                            case 73:
                                Test.iFld -= i10;
                                break;
                            case 77:
                                if (b)
                                    continue;
                                break;
                            case 105:
                                Test.iFld *= (int) Test.instanceCount;
                                break;
                            default:
                                i11 += (i10 | i11);
                        }
                    }
                    break;
                default:
                    Test.instanceCount = i13;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + (b ? 1 : 0) + i10 + i11 + i12 + i13 + i14;
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(int i2, long l1, int i3) {
        int i4 = -166, i5 = -6, i6 = 56, i7 = -88, i8 = 6, i9 = 36753, i15 = 13, i16 = 10, iArr[] = new int[N];
        float f = -2.174F;
        double d1 = 2.52192;
        long l2 = 49150L, lArr[] = new long[N];
        FuzzerUtils.init(iArr, 20522);
        FuzzerUtils.init(lArr, 46400L);
        for (i4 = 3; i4 < 152; ++i4) {
            Test.iArrFld = (Test.iArrFld = (Test.iArrFld1 = (iArr = Test.iArrFld)));
            for (i6 = 1; i6 < 4; ++i6) {
                for (i8 = 2; i8 > 1; i8--) {
                    f = Test.sFld;
                    i7 = iMeth1();
                    i5 = i4;
                    i7 = i9;
                    Test.sFld -= (short) i8;
                    Test.instanceCount = i3;
                    d1 += i8;
                    lArr[i4] = i6;
                    iArr[i4] = Test.iFld;
                    i9 = (int) l1;
                    Test.byFld ^= (byte) i6;
                    i3 -= i4;
                }
                Test.sFld *= (short) 1.717F;
                for (i15 = i4; 2 > i15; i15++) {
                    switch((i15 % 9) + 20) {
                        case 20:
                            i9 += i15;
                            i2 = (int) l1;
                            Test.byFld &= (byte) Test.iFld;
                            Test.instanceCount *= -166;
                            i2 = i4;
                            break;
                        case 21:
                            Test.instanceCount |= l2;
                            switch((i6 % 9) + 11) {
                                case 11:
                                    l2 = Test.instanceCount;
                                    f += i15;
                                    i3 = (int) l2;
                                    Test.sFld *= (short) Test.instanceCount;
                                    Test.byFld += (byte) Test.sFld;
                                    i3 = 60887;
                                    Test.sFld = (short) i6;
                                    i2 <<= (int) Test.instanceCount;
                                    i9 >>= -8;
                                    {
                                        java.io.PrintStream ax$0 = System.out;
                                        java.io.PrintStream ax$1 = System.err;
                                        java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                            @Override
                                            public void write(int b) throws java.io.IOException {
                                                // DO NOTHING: DISCARD ALL OUTPUTS
                                            }
                                        });
                                        System.setOut(ax$2);
                                        System.setErr(ax$2);
                                        {
                                            boolean ax$7 = false;
                                            for (int ax$6 = -2450; ax$6 < 6341; ax$6 += 9) {
                                                if (!ax$7) {
                                                    ax$7 = true;
                                                    {
                                                        System.setOut(ax$0);
                                                        System.setErr(ax$1);
                                                        try {
                                                            i16 = (7360 / Test.iArrFld[i4]);
                                                            i7 = (40777762 / i6);
                                                            i3 = (iArr[i4] / i2);
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                        System.setOut(ax$2);
                                                        System.setErr(ax$2);
                                                    }
                                                }
                                                long ax$3 = l1;
                                                long ax$4 = l2;
                                                try {
                                                    l1 = l2 % 6;
                                                } catch (Throwable ax$5) {
                                                } finally {
                                                    l1 = ax$3;
                                                    l2 = ax$4;
                                                }
                                            }
                                        }
                                        System.setOut(ax$0);
                                        System.setErr(ax$1);
                                    }
                                    d1 = d1;
                                    break;
                                case 12:
                                case 13:
                                    f /= (i15 | 1);
                                    break;
                                case 14:
                                    i16 *= Test.sFld;
                                    break;
                                case 15:
                                    Test.instanceCount += (i15 | i15);
                                    break;
                                case 16:
                                    d1 -= f;
                                    break;
                                case 17:
                                case 18:
                                    i9 -= Test.sFld;
                                case 19:
                                    l1 += 247;
                                    break;
                                default:
                                    i3 *= i4;
                            }
                        case 22:
                            i5 >>= i5;
                            break;
                        case 23:
                            f += -19;
                        case 24:
                            i3 >>= Test.iFld;
                            break;
                        case 25:
                            i3 += (i15 ^ Test.byFld);
                            break;
                        case 26:
                        case 27:
                            i5 -= (int) l1;
                            break;
                        case 28:
                            f += (i15 - f);
                            break;
                        default:
                            f -= 226;
                    }
                }
            }
        }
        long meth_res = i2 + l1 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i15 + i16 + l2 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(long l) {
        if (ax$17) {
            short ax$20 = sFld;
            int ax$21 = iFld;
            try {
                short[] ax$18 = new short[] { 20, 10, 0, -10, -20 };
                int ax$19 = 1238;
                ax$19 += Math.abs(ax$18[iFld] - sFld);
            } catch (Throwable ax$22) {
            } finally {
                sFld = ax$20;
                iFld = ax$21;
            }
            return;
        }
        int i = -18613, i1 = -1, i17 = 54886, i18 = 200, i19 = -159;
        float f2 = 2.944F;
        boolean b1 = false;
        double d2 = 37.123551, dArr[][] = new double[N][N];
        long l3 = -4920907919678785144L;
        short[] sArr = new short[N];
        FuzzerUtils.init(sArr, (short) 5012);
        FuzzerUtils.init(dArr, -1.100408);
        for (i = 2; i < 165; i++) {
            i1 *= (int) (((14 + iMeth(i, l, i1)) + f2) * i1);
            sArr[i + 1] = (short) i1;
            Test.instanceCount += i;
            Test.fArrFld[i][i] = Test.instanceCount;
            Test.iFld = Test.iFld;
            for (i17 = 1; i17 < 4; ++i17) {
                if (b1)
                    break;
                i18 = (int) -3534574362L;
                i1 <<= (int) l;
                l = Test.iFld;
                i18 -= i17;
                for (d2 = 2; d2 > 1; d2--) {
                    Test.instanceCount += i1;
                    i18 = i19;
                    i18 = 38640;
                    i1 += (int) d2;
                    f2 *= i18;
                    Test.lArrFld[i - 1] >>= i1;
                    Test.iFld *= Test.byFld1;
                    if (b1) {
                        dArr[(int) (d2 + 1)][(int) (d2)] = -39959;
                        Test.iFld = i18;
                    } else if (b1) {
                        i1 += (int) (d2 + f2);
                        Test.instanceCount += (long) (d2 * d2);
                        b1 = b1;
                        Test.iFld = i18;
                        if (b1) {
                            Test.iArrFld[i17] -= (int) l3;
                            Test.instanceCount = Test.sFld;
                            f2 = f2;
                            Test.iArrFld = Test.iArrFld1;
                            i19 = i18;
                            Test.sFld -= (short) Test.iFld;
                            Test.instanceCount *= i18;
                            f2 += (float) ((long) d2 ^ (long) f2);
                            Test.iArrFld1[i17 - 1] = i17;
                        }
                    }
                }
            }
        }
        vMeth_check_sum += l + i + i1 + Float.floatToIntBits(f2) + i17 + i18 + (b1 ? 1 : 0) + Double.doubleToLongBits(d2) + i19 + l3 + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {
        int i20 = 9, i21 = -15368, i22 = 6, i23 = 3, i24 = -65164, i25 = -38028, i26 = 174, i27 = -14, i28 = 11, i29 = -6, i30 = 30615, i31 = 102, i32 = -3, i33 = 21563, i34 = 8, i35 = 5;
        double d3 = -100.5460;
        long l4 = 243L;
        float f3 = 1.117F, f4 = 0.472F;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(byArr, (byte) 0);
        {
            java.io.PrintStream ax$25 = System.out;
            java.io.PrintStream ax$26 = System.err;
            java.io.PrintStream ax$27 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$27);
            System.setErr(ax$27);
            try {
                ax$17 = true;
                for (int ax$23 = 0; ax$23 < 6873; ax$23 += 1) vMeth(8502057914922338455L);
            } catch (java.lang.Throwable ax$24) {
            } finally {
                ax$17 = false;
            }
            System.setOut(ax$25);
            System.setErr(ax$26);
        }
        vMeth(Test.instanceCount);
        for (i20 = 3; i20 < 78; ++i20) {
            if (bFld) {
                i21 -= i21;
                i22 = 1;
                do {
                    Test.iArrFld1[i22 + 1] += (int) d3;
                    Test.iFld *= i21;
                } while (++i22 < 67);
                i21 >>>= i20;
                i21 += (int) -5L;
                for (i23 = 2; i23 < 67; ++i23) {
                    for (i25 = 1; i25 < 2; i25++) {
                        Test.iArrFld[i23] = i25;
                        Test.lArrFld[i23 - 1] = Test.instanceCount;
                        if (bFld)
                            continue;
                        Test.lArrFld[i20] *= Test.iFld;
                    }
                    bFld = bFld;
                    Test.iFld += -10;
                    Test.iArrFld[i23] |= i20;
                }
                for (i27 = 2; 67 > i27; i27++) {
                    i21 <<= i23;
                    Test.instanceCount -= i22;
                }
                for (i29 = 3; i29 < 67; i29++) {
                    Test.instanceCount += (-10L + (i29 * i29));
                    Test.instanceCount *= Test.iFld;
                    i21 += i30;
                    i24 &= (int) l4;
                    Test.iArrFld[i20] = i21;
                    try {
                        Test.iFld = (41505 % i29);
                        Test.iArrFld1[i20 + 1] = (i22 % -143);
                        Test.iArrFld1[i29 - 1] = (-153 % i29);
                    } catch (ArithmeticException a_e) {
                    }
                    for (i31 = i20; i31 < 2; ++i31) {
                        Test.iArrFld[i31] *= (int) 3805L;
                        i24 -= (int) Test.instanceCount;
                        l4 = i28;
                        i24 += i27;
                        i21 = (int) l4;
                    }
                    i33 = 1;
                    while (++i33 < 2) {
                        i26 += i22;
                        Test.lArrFld[i20 - 1] += -15326;
                        i28 = (int) f3;
                        i24 += i33;
                        i21 += (int) l4;
                        if (bFld)
                            continue;
                        i24 += (((i33 * Test.iFld) + i20) - l4);
                        i32 <<= i27;
                        Test.iFld = (int) l4;
                    }
                    Test.instanceCount *= i29;
                    Test.iFld = i33;
                    i28 >>= Test.iFld;
                }
                Test.iFld |= Test.sFld;
                i34 = 1;
                while (++i34 < 67) {
                    for (f4 = 1; f4 < 1; ++f4) {
                        i30 = i25;
                        i24 = i28;
                        i30 = -3;
                        i24 -= i30;
                        switch(((i34 % 2) * 5) + 87) {
                            case 91:
                                i26 += (int) (((f4 * Test.instanceCount) + i30) - i35);
                                Test.iArrFld[i20 + 1] = Test.sFld;
                                l4 -= l4;
                                d3 *= i35;
                                i26 += (int) (f4 * i22);
                                Test.iArrFld[(int) (f4 - 1)] = (int) Test.instanceCount;
                                Test.sFld += (short) (f4 - Test.sFld);
                                i28 = i27;
                                Test.iArrFld1[i20] = i26;
                                i32 ^= i35;
                                Test.iFld -= i32;
                                l4 += Test.sFld;
                                break;
                            case 95:
                            default:
                                switch((((i26 >>> 1) % 7) * 5) + 59) {
                                    case 94:
                                        i30 -= 11131;
                                        i21 += 7;
                                        f3 -= -9117L;
                                        Test.fArrFld = Test.fArrFld;
                                        Test.byFld1 -= (byte) f3;
                                        i28 /= 6;
                                        i26 -= i23;
                                        break;
                                    case 70:
                                        l4 += (long) (f4 * f4);
                                    case 67:
                                        i28 = i21;
                                        break;
                                    case 74:
                                        i21 -= (int) l4;
                                        break;
                                    case 89:
                                        i26 -= (int) l4;
                                        break;
                                    case 61:
                                        i30 -= (int) 9L;
                                        break;
                                    case 78:
                                        try {
                                            i21 = (Test.iArrFld[i20 - 1] / 1805358018);
                                            i24 = (Test.iArrFld[i20 - 1] % i33);
                                            i28 = (Test.iArrFld[i34 - 1] / i28);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        break;
                                    default:
                                        byArr = FuzzerUtils.byte1array(N, (byte) -101);
                                }
                        }
                    }
                }
            } else {
                i35 >>>= -10;
            }
        }
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("d3 i23 i24 = " + Double.doubleToLongBits(d3) + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("l4 i31 i32 = " + l4 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 f3 i34 = " + i33 + "," + Float.floatToIntBits(f3) + "," + i34);
        FuzzerUtils.out.println("f4 i35 byArr = " + Float.floatToIntBits(f4) + "," + i35 + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.iFld = " + Test.instanceCount + "," + Test.sFld + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld Test.byFld1 bFld = " + Test.byFld + "," + Test.byFld1 + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld Test.iArrFld1 Test.dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.fArrFld Test.lArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
            {
                java.io.PrintStream ax$14 = System.out;
                java.io.PrintStream ax$15 = System.err;
                java.io.PrintStream ax$16 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$16);
                System.setErr(ax$16);
                try {
                    for (int ax$12 = -3833; ax$12 < 3236; ax$12 += 1) {
                        try {
                            int[] ax$9 = { 5, 4, 1, 9, 10, 2, 7, 6, 3, 8 };
                            byte[] ax$8 = new byte[16];
                            for (int ax$10 = ax$8[2]; ax$10 < ax$9.length; ax$10++) {
                                ax$9[ax$10] = ax$8[2];
                            }
                        } catch (Throwable ax$11) {
                        } finally {
                        }
                    }
                } catch (Throwable ax$13) {
                }
                System.setOut(ax$14);
                System.setErr(ax$15);
            }
        }
    }

    private static Boolean ax$17 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
