// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.lang.reflect.Modifier;
import java.net.InetAddress;
import java.net.UnknownHostException;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -2763017953712364924L;

    public static boolean bFld = false;

    public static double dFld = -125.12680;

    public static int iFld = 2;

    public static byte byFld = 31;

    public float fFld = 1.914F;

    public int iFld1 = -5;

    public static double[] dArrFld = new double[N];

    public static int[] iArrFld = new int[N];

    public long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.91479);
        FuzzerUtils.init(Test.iArrFld, -12);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1, int i1, double d) {
        float f = 0.94F, f1 = -1.7F;
        int i2 = 62355, i3 = 220, i4 = -5, i5 = -30, iArr[] = new int[N];
        short s = 16543;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, -2405691014681330768L);
        FuzzerUtils.init(iArr, 3);
        l1 += i1;
        for (f = 3; f < 137; f++) {
            i3 = 1;
            while (++i3 < 4) {
                lArr[(int) (f + 1)] += i3;
                for (i4 = (int) (f); i4 < 1; i4++) {
                    i5 = (int) l1;
                    i5 += (i4 * f);
                    lArr[i4] = Test.instanceCount;
                    l1 = i2;
                    i2 = i1;
                    i5 -= (int) Test.instanceCount;
                    iArr[i4] <<= i2;
                    i2 -= i2;
                    s >>= (short) i3;
                    f1 = i2;
                    switch((i3 % 2) + 90) {
                        case 90:
                            Test.instanceCount += i4;
                            f1 = i5;
                            i5 |= s;
                            Test.instanceCount = 75L;
                            iArr[i4 + 1] &= (int) l1;
                            Test.instanceCount <<= i3;
                            iArr[(int) (f)] += (int) Test.instanceCount;
                            break;
                        case 91:
                            lArr[(int) (f)] -= Test.instanceCount;
                            i1 += i4;
                            i1 *= (int) -97L;
                            iArr[(int) (f + 1)] -= (int) f;
                            f1 += i2;
                            i5 *= i1;
                            i1 = 34186;
                            lArr[(int) (f)] = 1807;
                            lArr[(int) (f + 1)] += Test.instanceCount;
                            Test.instanceCount += i4;
                            i5 -= (int) f1;
                            i1 = (int) l1;
                            lArr[i3 - 1] = i3;
                            iArr[i4 + 1] -= -54123;
                            break;
                        default:
                            Test.bFld = Test.bFld;
                    }
                }
                {
                    java.io.PrintStream ax$5 = System.out;
                    java.io.PrintStream ax$6 = System.err;
                    java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$7);
                    System.setErr(ax$7);
                    try {
                        for (int ax$3 = -4254; ax$3 < 4081; ax$3 += 1) {
                            try {
                                java.lang.String ax$1 = "-NaND";
                                int ax$0 = 32866;
                                if (!Modifier.toString(ax$0).equals(ax$1))
                                    ;
                            } catch (Throwable ax$2) {
                            } finally {
                            }
                        }
                    } catch (Throwable ax$4) {
                    }
                    System.setOut(ax$5);
                    System.setErr(ax$6);
                }
            }
        }
        vMeth2_check_sum += l1 + i1 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i2 + i3 + i4 + i5 + s + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i, long l) {
        if (ax$8) {
            long ax$945 = vMeth2_check_sum;
            long ax$946 = l;
            try {
                if (vMeth2_check_sum != l)
                    ;
            } catch (Throwable ax$947) {
            } finally {
                vMeth2_check_sum = ax$945;
                l = ax$946;
            }
            return;
        }
        float f2 = 1.163F;
        int i6 = 3, i7 = 14393, i8 = -146, i9 = 7864, i10 = -9, i11 = -183, i12 = -9, i13 = -249, iArr1[] = new int[N];
        long l2 = -2129281598L, lArr1[] = new long[N];
        short s1 = -16074;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(lArr1, -3594355145741934498L);
        FuzzerUtils.init(iArr1, -208);
        FuzzerUtils.init(byArr, (byte) -8);
        vMeth2(12L, -57794, -120.89309);
        lArr1[(i >>> 1) % N] -= (long) f2;
        for (i6 = 8; i6 < 133; ++i6) {
            i7 = i6;
            f2 *= i7;
            for (i8 = 1; i8 < 5; ++i8) {
                i9 += i8;
                iArr1[i8] = 252;
                for (i10 = 1; i10 < 2; ++i10) {
                    iArr1[i6 + 1] = (int) Test.dFld;
                    i9 = 179;
                    i9 *= (int) l;
                    iArr1[i8] = i9;
                    i9 ^= (int) -8220607735773188541L;
                    byArr[i10 - 1] -= (byte) i11;
                    i9 = i6;
                    if (Test.bFld)
                        continue;
                    l += (i10 + i);
                    switch(((i10 % 1) * 5) + 75) {
                        case 76:
                            Test.dArrFld[i6] += i10;
                            l -= l2;
                            i11 -= i8;
                            i9 += (-76 + (i10 * i10));
                            i12 += (i10 * i10);
                            i11 >>>= Test.iFld;
                            f2 -= f2;
                            l |= Test.instanceCount;
                            f2 += (((i10 * Test.iFld) + l2) - i12);
                            iArr1[i10 + 1] = Test.iFld;
                            iArr1[i8 - 1] = (int) l;
                            switch(((i10 % 9) * 5) + 80) {
                                case 120:
                                    i7 >>= i7;
                                    i += (i10 - i11);
                                    break;
                                case 94:
                                    switch((i6 % 6) + 52) {
                                        case 52:
                                            lArr1[i8] = i11;
                                            i13 += Test.iFld;
                                            f2 += (4 + (i10 * i10));
                                            break;
                                        case 53:
                                            f2 *= 122.171F;
                                            break;
                                        case 54:
                                            f2 += (i10 * i10);
                                        case 55:
                                            iArr1[i6] -= i11;
                                            break;
                                        case 56:
                                            i11 <<= Test.iFld;
                                            break;
                                        case 57:
                                            iArr1[i6 - 1] = -1;
                                            break;
                                        default:
                                            i7 = (int) l;
                                    }
                                    break;
                                case 98:
                                    l2 += (i10 + l2);
                                case 89:
                                    Test.dFld -= Test.dFld;
                                    break;
                                case 97:
                                    Test.iFld *= i7;
                                    break;
                                case 121:
                                    Test.byFld *= (byte) l;
                                case 117:
                                    l2 += (i10 + Test.iFld);
                                case 85:
                                    iArr1 = iArr1;
                                case 113:
                                    s1 = (short) l2;
                            }
                        default:
                            i9 += 164;
                    }
                }
            }
        }
        vMeth1_check_sum += i + l + Float.floatToIntBits(f2) + i6 + i7 + i8 + i9 + i10 + i11 + l2 + i12 + i13 + s1 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr);
    }

    public void vMeth() {
        if (ax$953) {
            try {
                InetAddress ax$954;
                try {
                    ax$954 = InetAddress.getByName("foo.bar");
                } catch (UnknownHostException ax$956) {
                    String ax$955 = ax$956.getMessage();
                    if (ax$955.contains("foo.bar: foo.bar") || ax$955.contains("unknown error"))
                        ;
                }
            } catch (Throwable ax$957) {
            } finally {
            }
            return;
        }
        int i14 = -36081, i15 = 26, i16 = -26442, i17 = 13, i18 = -35957, i19 = -1, i20 = 98;
        float f3 = -2.80F, fArr[] = new float[N];
        short s2 = 1998, sArr[] = new short[N];
        FuzzerUtils.init(sArr, (short) 10103);
        FuzzerUtils.init(fArr, 47.1012F);
        {
            java.io.PrintStream ax$950 = System.out;
            java.io.PrintStream ax$951 = System.err;
            java.io.PrintStream ax$952 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$952);
            System.setErr(ax$952);
            try {
                ax$8 = true;
                for (int ax$948 = 0; ax$948 < 7998; ax$948 += 1) vMeth1(1823228071, -741723531938333057L);
            } catch (java.lang.Throwable ax$949) {
            } finally {
                ax$8 = false;
            }
            System.setOut(ax$950);
            System.setErr(ax$951);
        }
        vMeth1(Test.iFld, Test.instanceCount);
        Test.dFld -= Test.instanceCount;
        sArr[(Test.iFld >>> 1) % N] *= (short) Test.iFld;
        for (i14 = 1; i14 < 153; ++i14) {
            f3 = (float) Test.dFld;
            i16 = 1;
            do {
                Test.iFld -= i15;
                s2 = (short) i16;
                i15 |= i16;
                switch(((i16 % 2) * 5) + 113) {
                    case 120:
                        Test.instanceCount <<= i16;
                        if (Test.iFld != 0) {
                            vMeth_check_sum += i14 + i15 + Float.floatToIntBits(f3) + i16 + s2 + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        }
                        Test.iArrFld[i16 - 1] <<= i15;
                        for (i17 = 1; 1 > i17; ++i17) {
                            Test.iFld += (int) (0.920F + (i17 * i17));
                            fArr[i16 - 1] = Test.byFld;
                            Test.instanceCount = i14;
                        }
                        sArr[i16] += (short) Test.instanceCount;
                        Test.iFld += (i16 ^ i17);
                        i18 = i17;
                        break;
                    case 122:
                        Test.iFld |= i14;
                        for (i19 = 1; i19 < 1; i19++) {
                            Test.bFld = Test.bFld;
                            Test.iFld = -5419;
                            Test.iArrFld[i19] |= (int) Test.instanceCount;
                            switch((i14 % 6) + 2) {
                                case 2:
                                    Test.instanceCount = Test.iFld;
                                    Test.instanceCount >>= 8;
                                    if (Test.bFld)
                                        continue;
                                    break;
                                case 3:
                                    i20 -= (int) f3;
                                    if (Test.bFld)
                                        break;
                                    f3 += i16;
                                    i18 = s2;
                                    break;
                                case 4:
                                    f3 *= f3;
                                    Test.iArrFld[i16 + 1] = i15;
                                    Test.iFld -= (int) -73.560F;
                                case 5:
                                    s2 <<= (short) i18;
                                    break;
                                case 6:
                                    Test.dArrFld = FuzzerUtils.double1array(N, (double) 0.26607);
                                    break;
                                case 7:
                                    if (i18 != 0) {
                                        vMeth_check_sum += i14 + i15 + Float.floatToIntBits(f3) + i16 + s2 + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                        return;
                                    }
                                    break;
                                default:
                                    try {
                                        i18 = (111 / i15);
                                        i20 = (-931374712 / i18);
                                        i15 = (i16 % i20);
                                    } catch (ArithmeticException a_e) {
                                    }
                            }
                        }
                        break;
                    default:
                        f3 += (-5488399061043103493L + (i16 * i16));
                }
            } while (++i16 < 4);
        }
        vMeth_check_sum += i14 + i15 + Float.floatToIntBits(f3) + i16 + s2 + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {
        if (ax$963) {
            boolean ax$964 = bFld;
            try {
                if (!bFld)
                    ;
            } catch (Throwable ax$965) {
            } finally {
                bFld = ax$964;
            }
            return;
        }
        int i21 = 5183, i22 = -1406, i23 = -34722, i24 = 7, i25 = 0, i26 = -38552, i27 = 13, i28 = 88, i29 = -6, i30 = -2, i31 = -223, i32 = -53458, iArr2[] = new int[N];
        short s3 = -19331;
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr2, -4);
        {
            java.io.PrintStream ax$960 = System.out;
            java.io.PrintStream ax$961 = System.err;
            java.io.PrintStream ax$962 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$962);
            System.setErr(ax$962);
            try {
                ax$953 = true;
                for (int ax$958 = 0; ax$958 < 7849; ax$958 += 1) vMeth();
            } catch (java.lang.Throwable ax$959) {
            } finally {
                ax$953 = false;
            }
            System.setOut(ax$960);
            System.setErr(ax$961);
        }
        vMeth();
        Test.iFld &= Test.iFld;
        Test.bFld = true;
        Test.iFld = Test.iFld;
        for (i21 = 3; 113 > i21; ++i21) {
            if (false)
                continue;
            i22 += (5 + (i21 * i21));
            switch((i21 % 9) + 60) {
                case 60:
                    i22 += (i21 ^ (long) fFld);
                    Test.iFld <<= i22;
                    Test.iFld += (i21 * i21);
                    lArrFld[i21] = i21;
                    Test.iFld = i21;
                    for (i23 = 1; i23 < 46; i23++) {
                        fFld = i22;
                        Test.iArrFld[i21] += (int) 142L;
                        Test.dFld = -42625;
                        Test.iFld <<= (int) Test.instanceCount;
                        Test.instanceCount += (44571 + (i23 * i23));
                        if (Test.bFld)
                            break;
                    }
                    break;
                case 61:
                    Test.dFld -= Test.instanceCount;
                    for (i25 = 2; i25 < 46; ++i25) {
                        Test.byFld += (byte) iFld1;
                        for (i27 = 1; i27 < 2; ++i27) {
                            if (true)
                                continue;
                        }
                    }
                case 62:
                    for (i29 = 46; i29 > 2; i29 -= 2) {
                        bArr[i29 - 1] = Test.bFld;
                        i24 += (i29 * Test.iFld);
                        for (i31 = 3; i31 > 1; --i31) {
                            i22 *= i27;
                            if (Test.bFld)
                                break;
                            Test.byFld <<= (byte) i21;
                            lArrFld[i21 - 1] %= (i32 | 1);
                            switch(((i31 % 2) * 5) + 9) {
                                case 18:
                                    i26 *= i31;
                                    Test.instanceCount += Test.iFld;
                                    iArr2[i21 + 1] = -4;
                                    iArr2[i31 + 1] += (int) -1387266733360413466L;
                                    i24 -= s3;
                                    Test.dFld -= i26;
                                    Test.instanceCount += (((i31 * fFld) + i32) - i31);
                                    i32 += (i31 * iFld1);
                                    i32 += (int) Test.dFld;
                                    Test.instanceCount >>= Test.byFld;
                                    Test.iFld += (((i31 * Test.byFld) + i29) - i23);
                                    i26 += (i31 * i31);
                                    break;
                                case 19:
                                    Test.byFld += (byte) (43 + (i31 * i31));
                                    i22 += iFld1;
                                    s3 += (short) (((i31 * s3) + iFld1) - i22);
                                    Test.instanceCount *= i31;
                                    i30 = i32;
                                    i32 = (int) fFld;
                                    break;
                                default:
                                    i28 += (i31 ^ Test.instanceCount);
                                    i28 -= Test.byFld;
                                    s3 -= (short) i29;
                                    iArr2[i29 + 1] |= 19269;
                                    i26 = 2;
                                    fFld -= Test.instanceCount;
                                    try {
                                        i28 = (i29 / i28);
                                        Test.iArrFld[i31] = (3215 % i21);
                                        i30 = (i28 % Test.iFld);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    try {
                                        i30 = (Test.iFld % i30);
                                        i32 = (Test.iArrFld[i31] / 57866);
                                        i30 = (8549 / iArr2[(-5 >>> 1) % N]);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i32 += (int) -4847646775596272401L;
                                    Test.iFld = (int) Test.instanceCount;
                                    fFld *= 11394L;
                                    i24 += (int) Test.instanceCount;
                                    Test.instanceCount += (long) Test.dFld;
                                    if (Test.bFld)
                                        continue;
                                    Test.iArrFld[i21 - 1] -= (int) Test.instanceCount;
                            }
                            fFld %= (i29 | 1);
                            iArr2[i29 + 1] += (int) 2.59839;
                            i26 >>= (int) Test.instanceCount;
                            i26 = i32;
                            i24 -= (int) 53.622F;
                            Test.instanceCount -= (long) fFld;
                            i28 <<= Test.byFld;
                            i28 = i23;
                        }
                    }
                    break;
                case 63:
                    i22 += (i21 * i21);
                case 64:
                    iArr2[i21 - 1] *= i26;
                    break;
                case 65:
                    i28 += i21;
                    break;
                case 66:
                    Test.instanceCount += (((i21 * i25) + fFld) - iFld1);
                    break;
                case 67:
                    Test.instanceCount = -18965;
                    break;
                case 68:
                    i30 <<= i32;
                    break;
                default:
                    Test.byFld = (byte) -47224L;
            }
        }
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("s3 bArr iArr2 = " + s3 + "," + FuzzerUtils.checkSum(bArr) + "," + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.dFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iFld Test.byFld fFld = " + Test.iFld + "," + Test.byFld + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("iFld1 Test.dArrFld Test.iArrFld = " + iFld1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$8 = false;

    private static Boolean ax$953 = false;

    private static Boolean ax$963 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
