// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Random;
import java.util.concurrent.atomic.AtomicIntegerArray;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -125L;

    public static byte byFld = -119;

    public static int iFld = -80;

    public static double dFld = -2.125373;

    public static int iFld1 = -152;

    public static short sFld = -7980;

    public static float fArrFld[] = new float[N];

    public int iArrFld[] = new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.496F);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, int i3) {
        if (Test.ax$32) {
            final int ax$38 = Test.iFld;
            AtomicIntegerArray ax$34 = null;
            AtomicIntegerArray ax$35 = null;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                for (int ax$36 = 0; ax$36 < iFld; ax$36 += 1) {
                    ax$34.set(ax$36, -123);
                    ax$35.set(ax$36, -103);
                }
            } catch (Throwable ax$37) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iFld = ax$38;
            return;
        }
        int i4 = -148;
        int i5 = 51078;
        int i7 = 7;
        int i8 = -49417;
        int i9 = -10;
        int i10 = -13869;
        int iArr[] = new int[N];
        boolean b = true;
        long lArr[] = new long[N];
        FuzzerUtils.init(iArr, 4184);
        FuzzerUtils.init(lArr, 1L);
        i4 = 1;
        do {
            i3 -= ((int) (f));
            i5 = 1;
            do {
                i3 = ((int) (Test.instanceCount));
            } while ((++i5) < 3 );
            i3 += i4 * f;
            i3 = ((int) (Test.instanceCount));
            Test.byFld += ((byte) (174));
            i7 = 1;
            do {
                i3 += i7 * i7;
                switch ((((i4 >>> 1) % 2) * 5) + 43) {
                    case 44 :
                        if (b)
                            break;

                        for (i8 = 1; i8 < 1; i8++) {
                            i9 -= -240;
                            i3 += i8 * i7;
                            switch ((i7 % 1) + 52) {
                                case 52 :
                                    try {
                                        i3 = i5 % 1593392800;
                                        iArr[i8] = iArr[i8] / i10;
                                        i3 = 98 % iArr[i4];
                                    } catch (ArithmeticException a_e) {
                                    }
                                    break;
                            }
                            switch ((i7 % 4) + 74) {
                                case 74 :
                                    iArr[i7 - 1] = i7;
                                    if (i10 != 0) {
                                        vMeth1_check_sum += (((((((((Float.floatToIntBits(f) + i3) + i4) + i5) + i7) + (b ? 1 : 0)) + i8) + i9) + i10) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr);
                                        return;
                                    }
                                    lArr[i4] *= Test.iFld;
                                    i10 <<= i3;
                                    i3 >>>= Test.iFld;
                                    iArr = iArr;
                                    lArr[i8 - 1] |= i7;
                                    i3 -= ((int) (Test.dFld));
                                    i9 += ((int) (Test.instanceCount));
                                    Test.fArrFld[i8] += f;
                                    Test.instanceCount = 22L;
                                    Test.dFld = i4;
                                    Test.iFld += i8 * i8;
                                    i10 += (-74) + (i8 * i8);
                                    Test.dFld += i8;
                                    break;
                                case 75 :
                                    i10 = ((int) (Test.instanceCount));
                                    Test.instanceCount += i8 * i8;
                                    iArr[i4] -= ((int) (f));
                                    break;
                                case 76 :
                                    Test.instanceCount += i8 * i8;
                                    iArr[i7 - 1] -= i5;
                                case 77 :
                                    Test.iFld += ((i8 * Test.iFld) + i7) - Test.byFld;
                                    break;
                            }
                        }
                        break;
                    case 49 :
                    default :
                        i9 += ((int) (Test.instanceCount));
                }
            } while ((++i7) < 3 );
        } while ((++i4) < 239 );
        vMeth1_check_sum += (((((((((Float.floatToIntBits(f) + i3) + i4) + i5) + i7) + (b ? 1 : 0)) + i8) + i9) + i10) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {
        if (Test.ax$18) {
            final int ax$23 = Test.iFld1;
            Long ax$19 = -6881740107312195029L;
            Long ax$21 = 0x2345678900000000L;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                if ((iFld1 & 1) == 0) {
                    ax$21 = new Long(ax$21 + 1);
                } else {
                    ax$19 = ax$19 + 2;
                }
            } catch (Throwable ax$22) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iFld1 = ax$23;
            return;
        }
        float f1 = 117.277F;
        int i11 = -2;
        int i12 = 230;
        int i13 = -10;
        int i14 = -35474;
        int i15 = -22416;
        int iArr1[][] = new int[N][N];
        long l = -15897L;
        long l1 = -147L;
        double d = -31.64189;
        short s = -15350;
        boolean b1 = false;
        FuzzerUtils.init(iArr1, 209);
        {
            final boolean ax$45 = b1;
            try {
                Object ax$42 = new Object();
                Object ax$43 = new Object();
                for (int ax$39 = -687; ax$39 < (-687 + 15281); ax$39 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (!b1) {
                        }
                    } catch (Throwable ax$41) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$32 = true;
                    vMeth1(0.4774559F, 1600183212);
                    Test.ax$32 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (!ax$42.equals(ax$43)) {
                        }
                    } catch (Throwable ax$44) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                b1 = ax$45;
            }
        }
        vMeth1(f1, Test.iFld);
        for (i11 = 10; i11 < 216; i11++) {
            switch ((i11 % 1) + 124) {
                case 124 :
                    for (l = 1; 3 > l; ++l) {
                        f1 = i13;
                    }
                    Test.instanceCount *= i12;
                    i14 = 1;
                    while ((++i14) < 3) {
                        for (d = 1; d > 1; d -= 2) {
                            i13 -= ((int) (f1));
                            Test.iFld <<= ((int) (l));
                            switch ((i11 % 6) + 99) {
                                case 99 :
                                    i12 -= ((int) (l));
                                    i15 = Test.iFld;
                                    iArr1[i11] = iArr1[i11];
                                    switch (((int) ((d % 2) + 53))) {
                                        case 53 :
                                            switch (((i15 >>> 1) % 6) + 88) {
                                                case 88 :
                                                    Test.iFld = i13;
                                                    f1 = i14;
                                                    Test.iFld = ((int) (l1));
                                                    i13 += ((int) (d - i12));
                                                    Test.iFld -= Test.iFld1;
                                                    Test.iFld1 += ((int) (d - Test.iFld1));
                                                    Test.instanceCount -= ((long) (f1));
                                                    switch ((i11 % 2) + 3) {
                                                        case 3 :
                                                            iArr1[i11][((int) (d + 1))] = ((int) (118.18327));
                                                            f1 += l1;
                                                            Test.iFld += ((int) (d * d));
                                                            Test.iFld -= ((int) (f1));
                                                            break;
                                                        case 4 :
                                                            s += ((short) (d * d));
                                                            break;
                                                        default :
                                                            i12 += i12;
                                                            iArr1[i11] = iArr1[((int) (d - 1))];
                                                            Test.dFld += i15;
                                                            Test.byFld += ((byte) (((d * l1) + i13) - Test.instanceCount));
                                                            iArr1[((int) (d))][i14] = ((int) (Test.instanceCount));
                                                            i15 += ((int) (d * d));
                                                            Test.iFld1 = ((int) (1.886F));
                                                            iArr1[i11][i11 - 1] = 9;
                                                    }
                                                case 89 :
                                                    Test.iFld *= i11;
                                                case 90 :
                                                    f1 += i14;
                                                    break;
                                                case 91 :
                                                    if (b1)
                                                        break;

                                                case 92 :
                                                    if (Test.iFld != 0) {
                                                        vMeth_check_sum += ((((((((((Float.floatToIntBits(f1) + i11) + i12) + l) + i13) + i14) + Double.doubleToLongBits(d)) + i15) + l1) + s) + (b1 ? 1 : 0)) + FuzzerUtils.checkSum(iArr1);
                                                        return;
                                                    }
                                                    break;
                                                case 93 :
                                                    l1 = Test.iFld1;
                                                    break;
                                            }
                                        case 54 :
                                            Test.instanceCount = i11;
                                            break;
                                        default :
                                            i13 >>= i15;
                                    }
                                    break;
                                case 100 :
                                    Test.dFld += Test.iFld;
                                case 101 :
                                    i12 = 162;
                                    break;
                                case 102 :
                                    Test.iFld1 -= i12;
                                    break;
                                case 103 :
                                    Test.dFld = 103;
                                    break;
                                case 104 :
                                    Test.fArrFld = Test.fArrFld;
                                    break;
                            }
                        }
                    }
                    break;
            }
        }
        vMeth_check_sum += ((((((((((Float.floatToIntBits(f1) + i11) + i12) + l) + i13) + i14) + Double.doubleToLongBits(d)) + i15) + l1) + s) + (b1 ? 1 : 0)) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i1, int i2) {
        int i16 = -60040;
        int i17 = -2;
        int i18 = 7;
        int i19 = -9231;
        int i20 = 20294;
        int iArr2[][] = new int[N][N];
        float f2 = 31.447F;
        float f3 = -2.481F;
        boolean b2 = true;
        byte byArr[] = new byte[N];
        FuzzerUtils.init(iArr2, 66);
        FuzzerUtils.init(byArr, ((byte) (-52)));
        i1 = (i2++) - i2;
        Test.instanceCount += ((long) (--Test.fArrFld[(i2 >>> 1) % N]));
        {
            try {
                Object ax$25 = new Object();
                ObjectInputStream ax$26 = null;
                Random ax$28 = new Random();
                for (int ax$24 = -424; ax$24 < (-424 + 3208); ax$24 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$25 = ax$26.readObject();
                    } catch (Throwable ax$27) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$18 = true;
                    vMeth();
                    Test.ax$18 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        long ax$29 = ax$28.nextLong();
                        Long ax$30 = new Long(ax$29);
                        if (!ax$30.toString().equals(Long.toString(ax$29)));
                    } catch (Throwable ax$31) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        vMeth();
        i16 = 158;
        do {
            i2 = ((int) (-8L));
            iArr2[i16 - 1] = FuzzerUtils.int1array(N, ((int) (-166)));
            {
                try {
                    int ax$1 = 65535;
                    char[] ax$2 = new char[]{ '⻵', 'ョ', '䦵', '袋', '鰬', '猑', '顼', '?', '芳' };
                    for (int ax$0 = -115; ax$0 < (-115 + 4325); ax$0 += 1) {
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            ax$2[ax$1] = ((char) (ax$1));
                        } catch (Throwable ax$3) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                    }
                } finally {
                }
            }
            for (i17 = 7; i17 > 1; i17 -= 2) {
                i18 = ((int) (Test.instanceCount));
                byArr[i16 + 1] <<= Test.byFld;
                for (i19 = 1; 3 > i19; i19++) {
                    f2 *= i2;
                    Test.instanceCount += 1391304155777883871L + (i19 * i19);
                    if (i19 != 0) {
                    }
                    if (false) {
                        Test.iFld1 += i19;
                        Test.instanceCount += i19 - Test.instanceCount;
                        Test.dFld = 14516L;
                        switch (((i20 >>> 1) % 2) + 56) {
                            case 56 :
                                Test.iFld1 += Test.iFld;
                                i20 <<= i18;
                                i20 -= i1;
                                f3 += i19 * i19;
                                i18 -= i1;
                                Test.iFld *= Test.iFld1;
                                i20 += i16;
                                Test.instanceCount += 4 + (i19 * i19);
                                Test.instanceCount += ((i19 * i17) + i1) - i16;
                                i2 <<= -2;
                            case 57 :
                                if (b2)
                                    continue;

                                i18 -= ((int) (Test.instanceCount));
                                i2 *= i19;
                                if (false)
                                    break;

                        }
                        switch ((((i18 >>> 1) % 7) * 5) + 10) {
                            case 45 :
                                Test.iFld += ((int) (Test.instanceCount));
                                f2 += i1;
                                iArr2[i16][i16 + 1] += Test.iFld1;
                                Test.iFld1 += ((int) (Test.instanceCount));
                                break;
                            case 23 :
                                Test.dFld *= Test.byFld;
                            case 20 :
                                Test.instanceCount >>= -1195789777613874641L;
                                break;
                            case 38 :
                                f3 += i19 * i19;
                                break;
                            case 43 :
                                iArr2[i16][i17 - 1] += ((int) (Test.instanceCount));
                            case 33 :
                                if (b2)
                                    break;

                            case 13 :
                                i2 += i19 + i16;
                                break;
                            default :
                                f3 -= Test.sFld;
                        }
                    }
                }
            }
        } while ((i16 -= 2) > 0 );
        long meth_res = ((((((((((i1 + i2) + i16) + i17) + i18) + i19) + i20) + Float.floatToIntBits(f2)) + Float.floatToIntBits(f3)) + (b2 ? 1 : 0)) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public void mainTest(String[] strArr1) {
        int i = 8292;
        int i21 = -38527;
        int i22 = 138;
        int i23 = 13;
        int i24 = -69;
        int i25 = 103;
        int i26 = 3;
        int i27 = 171;
        int i28 = 13316;
        int i29 = -5341;
        float f4 = -1.54F;
        boolean b3 = false;
        long l2 = -6119679399017281891L;
        long lArr1[][] = new long[N][N];
        short sArr[] = new short[N];
        FuzzerUtils.init(sArr, ((short) (25966)));
        FuzzerUtils.init(lArr1, -163L);
        sArr[(i >>> 1) % N] = ((short) ((((-227) + Test.instanceCount) * sArr[(i >>> 1) % N]) - iMeth(Test.iFld, Test.iFld)));
        for (i21 = 243; i21 > 3; --i21) {
            i23 = 1;
            do {
                f4 += i;
                i += ((int) (28141L));
                lArr1[i21 - 1][i23 + 1] = Test.instanceCount;
                Test.iFld = ((int) (-1474839698L));
                Test.instanceCount -= ((long) (Test.dFld));
                for (i24 = 1; i24 < 3; ++i24) {
                    i22 = i21;
                    i22 += ((int) (33.632F));
                    f4 += i24 - Test.iFld1;
                    i22 >>= -21518;
                    f4 += i24;
                    Test.byFld *= ((byte) (Test.instanceCount));
                    Test.instanceCount += i24 * i24;
                    Test.instanceCount += i24;
                    switch (((i21 % 2) * 5) + 71) {
                        case 74 :
                            Test.iFld |= -146;
                            Test.iFld1 += ((int) (12L + (i24 * i24)));
                            b3 = false;
                            i22 ^= Test.sFld;
                            {
                                final long ax$15 = Test.vMeth1_check_sum;
                                final int ax$16 = i21;
                                final long ax$17 = Test.iMeth_check_sum;
                                try {
                                    float[] ax$10 = new float[]{ 0.4877318F, 0.21942842F, 0.7983231F };
                                    Float ax$11 = 42.0F;
                                    Float ax$12 = 0.83170164F;
                                    boolean ax$5 = false;
                                    for (int ax$4 = -470; ax$4 < (-470 + 10182); ax$4 += 1) {
                                        Test.AxOutputRedirectionHelper.redirect();
                                        try {
                                            i21++;
                                        } catch (Throwable ax$9) {
                                        } finally {
                                        }
                                        Test.AxOutputRedirectionHelper.recover();
                                        if (!ax$5) {
                                            Test.iFld += i;
                                            ax$5 = true;
                                        }
                                        Test.AxOutputRedirectionHelper.redirect();
                                        try {
                                            for (Float ax$13 : ax$10) {
                                                ax$12 += ax$13;
                                                ax$11 += new Float(ax$13 + 1.0F);
                                            }
                                        } catch (Throwable ax$14) {
                                        } finally {
                                        }
                                        Test.AxOutputRedirectionHelper.recover();
                                    }
                                } finally {
                                    Test.vMeth1_check_sum = ax$15;
                                    i21 = ax$16;
                                    Test.iMeth_check_sum = ax$17;
                                }
                            }
                            i22 &= i22;
                            Test.sFld += ((short) (198 + (i24 * i24)));
                            Test.byFld *= ((byte) (Test.instanceCount));
                            Test.dFld -= Test.dFld;
                            i22 = i;
                            break;
                        case 75 :
                            iArrFld[i24 + 1] += ((int) (Test.instanceCount));
                            iArrFld[i23 - 1] -= i23;
                            Test.iFld = Test.byFld;
                            try {
                                i25 = 38 / iArrFld[i24 + 1];
                                i25 = i24 % iArrFld[i24];
                                iArrFld[i21] = Test.iFld / i21;
                            } catch (ArithmeticException a_e) {
                            }
                            i25 = Test.iFld1;
                            iArrFld = FuzzerUtils.int1array(N, ((int) (-19065)));
                            lArr1[i23 - 1][i21 - 1] &= -12;
                            break;
                    }
                    if (b3)
                        break;

                }
                i -= -38501;
                i26 = 1;
                while ((++i26) < 3) {
                    Test.iFld += 21;
                    i25 = Test.iFld1;
                    i25 -= i25;
                    lArr1[i23 - 1] = lArr1[i21 - 1];
                    iArrFld[i21 + 1] -= ((int) (f4));
                    Test.instanceCount += i27;
                    i22 &= -23435;
                    Test.instanceCount = Test.byFld;
                    iArrFld[i26 + 1] = i21;
                }
                if (b3) {
                    Test.iFld1 <<= ((int) (-6L));
                    i25 = ((int) (3L));
                    i22 = i21;
                    Test.instanceCount = Test.iFld;
                    lArr1[i23][i23 - 1] = Test.iFld;
                    iArrFld[i21] /= ((int) (((long) (Test.dFld)) | 1));
                    Test.sFld = ((short) (l2));
                    Test.iFld = i24;
                    for (i28 = 1; i28 < 3; ++i28) {
                        l2 = i29;
                        i27 >>= i25;
                        i22 += i28 * i28;
                        i27 <<= ((int) (Test.instanceCount));
                        Test.iFld >>= i27;
                        i >>>= ((int) (l2));
                        i22 += i28;
                        if (b3) {
                            Test.instanceCount = Test.iFld;
                            Test.iFld1 += (-12) + (i28 * i28);
                            Test.iFld = i26;
                            b3 = b3;
                            Test.instanceCount += ((i28 * Test.byFld) + i) - Test.byFld;
                            i27 -= Test.byFld;
                            f4 = i25;
                            i *= i21;
                            i22 += i28 * i23;
                            Test.instanceCount *= ((long) (Test.dFld));
                        } else {
                            Test.iFld >>= i26;
                        }
                    }
                } else if (b3) {
                    lArr1[i23 - 1][i23] <<= i27;
                } else if (b3) {
                    l2 -= ((long) (-75.482F));
                } else {
                    lArr1[i21][i21] >>= Test.instanceCount;
                }
            } while ((i23 += 2) < 21 );
        }
        FuzzerUtils.out.println((((("i i21 i22 = " + i) + ",") + i21) + ",") + i22);
        FuzzerUtils.out.println((((("i23 f4 i24 = " + i23) + ",") + Float.floatToIntBits(f4)) + ",") + i24);
        FuzzerUtils.out.println((((("i25 b3 i26 = " + i25) + ",") + (b3 ? 1 : 0)) + ",") + i26);
        FuzzerUtils.out.println((((("i27 l2 i28 = " + i27) + ",") + l2) + ",") + i28);
        FuzzerUtils.out.println((((("i29 sArr lArr1 = " + i29) + ",") + FuzzerUtils.checkSum(sArr)) + ",") + FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println((((("Test.instanceCount Test.byFld Test.iFld = " + Test.instanceCount) + ",") + Test.byFld) + ",") + Test.iFld);
        FuzzerUtils.out.println((((("Test.dFld Test.iFld1 Test.sFld = " + Double.doubleToLongBits(Test.dFld)) + ",") + Test.iFld1) + ",") + Test.sFld);
        FuzzerUtils.out.println((("Test.fArrFld iArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld))) + ",") + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$18 = false;

    static Boolean ax$32 = false;
}
