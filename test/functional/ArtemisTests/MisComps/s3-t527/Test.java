// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -47933L;

    public static boolean bFld = false;

    public volatile float fFld = -63.980F;

    public byte byFld = 77;

    public static int iFld = -31022;

    public static int[] iArrFld = new int[N];

    public static long[] lArrFld = new long[N];

    public byte[] byArrFld = new byte[N];

    public short[] sArrFld = new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
        FuzzerUtils.init(Test.lArrFld, 53915L);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long fMeth_check_sum = 0;

    public static float fMeth(long l1, int i4) {
        if (ax$11) {
            int ax$12 = i4;
            int ax$13 = iFld;
            try {
                if (i4 != iFld) {
                }
            } catch (Throwable ax$14) {
            } finally {
                i4 = ax$12;
                iFld = ax$13;
            }
            return (float) 0.4029900571785412;
        }
        float f1 = 89.812F;
        int i5 = 42276, i6 = -251, i7 = 157, i8 = 38066, i9 = 5925, i10 = 229, i11 = -10, iArr[] = new int[N], iArr1[][] = new int[N][N];
        boolean b = true;
        byte by = 61;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, 6959139161628014417L);
        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(iArr1, -127);
        i4 -= (int) f1;
        for (i5 = 123; i5 > 5; --i5) {
            b = b;
            i6 += (i5 - Test.instanceCount);
            for (i7 = 1; i7 < 5; ++i7) {
                for (i9 = i5; 2 > i9; ++i9) {
                    double d = 0.14133;
                    iArr[i7 + 1] = i8;
                    i8 = (int) f1;
                    if (b)
                        break;
                    d -= 13;
                    l1 -= Test.instanceCount;
                    if (b) {
                        i4 += (int) 1756892058L;
                        if (true) {
                            i6 += (int) -80256566L;
                            iArr[i9 + 1] <<= (int) 46992L;
                            l1 = -94;
                            i4 += i9;
                            lArr[i7] = i11;
                            switch((((-9 >>> 1) % 2) * 5) + 59) {
                                case 66:
                                    i4 = (int) d;
                                    iArr[i5] *= (int) l1;
                                    i6 = (int) Test.instanceCount;
                                    iArr[i9 - 1] = (int) 43179L;
                                    l1 >>= -48660;
                                    break;
                                case 67:
                                    i8 = (int) l1;
                                    i4 %= (int) (i8 | 1);
                            }
                            i10 += i10;
                            iArr[i5 + 1] *= i8;
                        } else {
                            l1 *= 8472;
                            iArr1 = iArr1;
                        }
                        i8 &= i9;
                        by += (byte) (((i9 * by) + l1) - i10);
                        i10 = (int) Test.instanceCount;
                        if (i11 != 0) {
                        }
                        i6 += (int) 8631945646079144069L;
                    } else if (b) {
                        i8 -= (int) f1;
                    } else {
                        iArr1[i9 - 1][i7 + 1] = 27518;
                    }
                }
            }
        }
        long meth_res = l1 + i4 + Float.floatToIntBits(f1) + i5 + i6 + (b ? 1 : 0) + i7 + i8 + i9 + i10 + i11 + by + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public static void vMeth1(float f, int i1) {
        int i2 = -10243, i3 = -29, i12 = 4564, i13 = -151, i14 = 58943, i15 = -2, i17 = -18783;
        double d1 = -2.73175, dArr[][] = new double[N][N];
        long[] lArr1 = new long[N];
        boolean[][] bArr = new boolean[N][N];
        FuzzerUtils.init(dArr, -87.56728);
        FuzzerUtils.init(lArr1, -91003496L);
        FuzzerUtils.init(bArr, false);
        for (i2 = 3; 123 > i2; ++i2) {
            Test.instanceCount += (long) fMeth(Test.instanceCount, i1);
            Test.instanceCount = i1;
            i1 >>= i3;
            if (i1 != 0) {
                vMeth1_check_sum += Float.floatToIntBits(f) + i1 + i2 + i3 + i12 + i13 + i14 + i15 + i17 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
                return;
            }
            if (Test.bFld) {
                for (i12 = 1; i12 < 5; i12++) {
                    i13 += (((i12 * i12) + f) - i12);
                    i13 >>>= i13;
                    i13 = 13984;
                    i1 += (i12 - i2);
                    dArr[i2 - 1][i2] *= i13;
                    switch((((i3 >>> 1) % 3) * 5) + 41) {
                        case 53:
                            Test.instanceCount *= i3;
                            lArr1[i2] -= i3;
                            for (i14 = i12; i14 < 2; i14++) {
                                int i16 = 58905;
                                i3 >>>= i15;
                                i15 = (int) Test.instanceCount;
                                Test.bFld = Test.bFld;
                                Test.instanceCount <<= i1;
                                Test.iArrFld[i2] = i1;
                                i3 += i16;
                                i3 = (int) Test.instanceCount;
                                try {
                                    i13 = (-1175113081 % i3);
                                    i1 = (i13 / i2);
                                    i13 = (32 % i16);
                                } catch (ArithmeticException a_e) {
                                }
                                i15 += -3;
                                i3 = i12;
                            }
                            f += i14;
                            Test.instanceCount *= i1;
                            i13 += i12;
                            i17 = 2;
                            while (--i17 > 0) {
                                d1 /= (i15 | 1);
                                if (Test.bFld)
                                    break;
                                i13 = (int) -6042389959367499560L;
                                i3 -= (int) Test.instanceCount;
                                if (Test.bFld)
                                    continue;
                                Test.instanceCount += i17;
                                bArr = bArr;
                            }
                            break;
                        case 51:
                            Test.instanceCount *= i12;
                            break;
                        case 48:
                            Test.iArrFld[i12] = -59;
                            break;
                        default:
                            i13 *= (int) Test.instanceCount;
                    }
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i1 + i2 + i3 + i12 + i13 + i14 + i15 + i17 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
    }

    public void vMeth(long l, int i) {
        float f2 = -55.446F;
        int i18 = -65063, i19 = -50, i20 = 11, i21 = -2113, i22 = 33283, i23 = 37880, i24 = -214, i25 = 44704, i26 = 246, i27 = -6510;
        short s = 6364;
        double d2 = -1.16101;
        vMeth1(f2, i);
        Test.lArrFld = Test.lArrFld;
        i18 = 132;
        do {
            i += (i18 | Test.instanceCount);
            for (i19 = 1; i19 < 4; i19++) {
                Test.instanceCount |= l;
                {
                    java.io.PrintStream ax$0 = System.out;
                    java.io.PrintStream ax$1 = System.err;
                    java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$2);
                    System.setErr(ax$2);
                    {
                        boolean ax$10 = false;
                        for (int ax$9 = -775; ax$9 < 6525; ax$9 += 3) {
                            if (!ax$10) {
                                ax$10 = true;
                                {
                                    System.setOut(ax$0);
                                    System.setErr(ax$1);
                                    if (Test.bFld) {
                                        switch((i19 % 7) + 118) {
                                            case 118:
                                                for (i21 = 1; i21 < 2; i21++) {
                                                    i20 = i22;
                                                    l += (i21 * s);
                                                }
                                                Test.lArrFld[i18] = i19;
                                                byArrFld[i19] >>= (byte) -41602;
                                                if (Test.bFld)
                                                    break;
                                                i = i22;
                                                break;
                                            case 119:
                                                Test.iArrFld[i19] -= i20;
                                                i += (int) f2;
                                                i += (i19 - f2);
                                                for (i23 = 1; i23 < 2; i23++) {
                                                    i &= (int) l;
                                                }
                                                break;
                                            case 120:
                                                i24 = (int) -2306555300L;
                                                i += (-6 + (i19 * i19));
                                                i20 >>= i;
                                                switch((((i19 >>> 1) % 1) * 5) + 4) {
                                                    case 9:
                                                }
                                                i24 *= i;
                                                i20 += (int) f2;
                                                Test.iArrFld[i18] -= 1;
                                                i25 = (int) 10L;
                                                i22 -= i20;
                                                for (i26 = 1; i26 < 2; ++i26) {
                                                    i24 -= i26;
                                                    f2 += (float) -1.119947;
                                                    Test.lArrFld[i26] += i21;
                                                    i = (int) l;
                                                    i24 += i19;
                                                    d2 -= i20;
                                                    l = i20;
                                                }
                                                break;
                                            case 121:
                                                try {
                                                    i25 = (-87 % i27);
                                                    i24 = (i20 % 16);
                                                    Test.iArrFld[i18 + 1] = (i23 % i21);
                                                } catch (ArithmeticException a_e) {
                                                }
                                                break;
                                            case 122:
                                            case 123:
                                                Test.instanceCount = i18;
                                                break;
                                            case 124:
                                                f2 *= i24;
                                            default:
                                                f2 += i26;
                                        }
                                    } else {
                                        i20 += (i19 * i19);
                                    }
                                    System.setOut(ax$2);
                                    System.setErr(ax$2);
                                }
                            }
                            int ax$4 = i19;
                            float ax$5 = f2;
                            int ax$6 = i18;
                            int ax$7 = i20;
                            try {
                                int[][] ax$3 = new int[10][];
                                // The full body of a do-while loop is the loop header.
                                do {
                                    // Some "noise" to avoid hoisting the array reference
                                    // before the dynamic BCE phase runs.
                                    f2++;
                                    // The invariant array reference with corresponding bounds check
                                    // is a candidate for hoisting when dynamic BCE runs. If it is
                                    // not moved to the proper loop preheader, the wrong values
                                    // cause the test to fail.
                                    i19 += ax$3[i18][i18];
                                } while (++i20 < i18);
                            } catch (Throwable ax$8) {
                            } finally {
                                i19 = ax$4;
                                f2 = ax$5;
                                i18 = ax$6;
                                i20 = ax$7;
                            }
                        }
                    }
                    System.setOut(ax$0);
                    System.setErr(ax$1);
                }
            }
        } while (--i18 > 0);
        vMeth_check_sum += l + i + Float.floatToIntBits(f2) + i18 + i19 + i20 + i21 + i22 + s + i23 + i24 + i25 + i26 + i27 + Double.doubleToLongBits(d2);
    }

    public void mainTest(String[] strArr1) {
        int i28 = 17781, i29 = -143, i30 = -47419, i31 = 11, i32 = -6, i33 = -2844, i34 = -11, i35 = -11911;
        double d3 = 2.74269;
        short s1 = 24112;
        float[] fArr = new float[N];
        FuzzerUtils.init(fArr, 0.958F);
        vMeth(Test.instanceCount, 193);
        for (i28 = 245; 7 < i28; i28 -= 3) {
            Test.instanceCount = i29;
            i29 += i29;
            i29 = (int) Test.instanceCount;
            i30 = -23295;
            fFld -= i30;
            Test.bFld = Test.bFld;
            Test.instanceCount += (61013 + (i28 * i28));
            fArr[i28 - 1] = i29;
            i30 = (int) -53173L;
            i30 = i30;
            for (i31 = 4; 64 > i31; i31++) {
                i29 -= (int) fFld;
                i30 += i31;
                i33 = 1;
                while (++i33 < 2) {
                    sArrFld[i31] = (short) i30;
                    i29 = i28;
                    i30 *= (int) Test.instanceCount;
                    d3 = i31;
                    i29 = byFld;
                    Test.instanceCount += (-13 + (i33 * i33));
                    i29 = i32;
                    Test.instanceCount += i33;
                }
                byFld = (byte) -8770185368777237890L;
                if (Test.bFld) {
                    for (i34 = 1; i34 < 2; ++i34) {
                        sArrFld[i28] *= (short) Test.instanceCount;
                        i29 = -47;
                        switch((i34 % 2) + 101) {
                            case 101:
                                Test.instanceCount += (i34 * i34);
                                i35 *= (int) d3;
                                byArrFld[i34] >>>= (byte) i34;
                                break;
                            case 102:
                                switch((i31 % 1) + 50) {
                                    case 50:
                                        i35 += byFld;
                                        i35 += (((i34 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                                        Test.instanceCount += i34;
                                        Test.instanceCount = -1528007548L;
                                        i35 -= (int) Test.instanceCount;
                                        i30 -= (int) fFld;
                                        if (false)
                                            continue;
                                        Test.iArrFld = Test.iArrFld;
                                        fFld += i35;
                                        s1 = (short) -40;
                                        i30 = s1;
                                        break;
                                    default:
                                        i29 >>= i28;
                                        switch(((i31 % 2) * 5) + 20) {
                                            case 29:
                                                i32 = (int) Test.instanceCount;
                                                i32 += (i34 * i35);
                                                i29 = i31;
                                                i32 += i34;
                                                s1 = (short) Test.instanceCount;
                                                i32 >>= 4;
                                                i30 = -4;
                                                break;
                                            case 24:
                                                i35 |= i35;
                                                fFld += i31;
                                                byFld %= (byte) (i32 | 1);
                                                Test.iArrFld[i31 + 1] *= i29;
                                                i35 = (int) -9L;
                                                i30 += i34;
                                                i32 -= i33;
                                                i35 &= s1;
                                                break;
                                            default:
                                                Test.lArrFld[i28 - 1] += Test.iFld;
                                                Test.iFld += i28;
                                                i29 -= (int) Test.instanceCount;
                                                Test.iArrFld[i34] *= (int) Test.instanceCount;
                                                Test.instanceCount = Test.instanceCount;
                                                Test.instanceCount += Test.iFld;
                                                i35 *= byFld;
                                                if (Test.bFld)
                                                    break;
                                                switch(((-17126 >>> 1) % 3) + 67) {
                                                    case 67:
                                                        switch(((Test.iFld >>> 1) % 8) + 30) {
                                                            case 30:
                                                                i29 += (((i34 * Test.instanceCount) + fFld) - Test.instanceCount);
                                                                i35 = -14;
                                                                d3 -= Test.instanceCount;
                                                                break;
                                                            case 31:
                                                                fFld -= Test.iFld;
                                                                break;
                                                            case 32:
                                                                if (Test.bFld)
                                                                    continue;
                                                                break;
                                                            case 33:
                                                                Test.instanceCount += Test.iFld;
                                                            case 34:
                                                                Test.iFld = i33;
                                                                break;
                                                            case 35:
                                                                fFld = i33;
                                                                break;
                                                            case 36:
                                                                i29 <<= (int) Test.instanceCount;
                                                                break;
                                                            case 37:
                                                                if (Test.bFld)
                                                                    break;
                                                                break;
                                                        }
                                                        break;
                                                    case 68:
                                                        Test.iArrFld[i34] += 53241;
                                                        break;
                                                    case 69:
                                                    default:
                                                        Test.lArrFld[i28 + 1] += Test.instanceCount;
                                                }
                                        }
                                }
                                break;
                            default:
                                i30 >>= (int) 1249307638035124267L;
                        }
                    }
                }
            }
        }
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("d3 i34 i35 = " + Double.doubleToLongBits(d3) + "," + i34 + "," + i35);
        FuzzerUtils.out.println("s1 fArr = " + s1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("Test.instanceCount Test.bFld fFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0) + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("byFld Test.iFld Test.iArrFld = " + byFld + "," + Test.iFld + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld byArrFld sArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(byArrFld) + "," + FuzzerUtils.checkSum(sArrFld));
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$11 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
