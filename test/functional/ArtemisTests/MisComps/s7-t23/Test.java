// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.text.DecimalFormat;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 5392604356151810556L;

    public volatile float fFld = 2.229F;

    public static boolean bFld = false;

    public static short sFld = 15203;

    public static double dFld = 0.11912;

    public float fFld1 = -45.789F;

    public long lFld = 104L;

    public static volatile int iArrFld[] = new int[N];

    public static volatile long lArrFld[] = new long[N];

    public static short sArrFld[] = new short[N];

    public float fArrFld[] = new float[N];

    public volatile byte byArrFld[] = new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7764);
        FuzzerUtils.init(Test.lArrFld, 4100329623L);
        FuzzerUtils.init(Test.sArrFld, ((short) (24245)));
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(byte by, long l, long l1) {
        int i4 = 6;
        int i5 = 4;
        int i6 = 44723;
        int i7 = -91;
        int i8 = -4;
        int i9 = -13;
        int i10 = -43257;
        int i11 = -10;
        int i12 = 3954;
        short s = -868;
        double d = -116.33262;
        for (i4 = 170; i4 > 10; i4--) {
            i6 = 1;
            while ((++i6) < 4) {
                boolean b1 = true;
                Test.iArrFld[i6 - 1] >>= s;
                i7 = 1;
                while ((++i7) < 1) {
                    i5 *= i4;
                    Test.iArrFld[i6 + 1] >>= ((int) (l1));
                    i5 >>= i5;
                    l1 += ((i7 * i4) + i7) - l1;
                }
                l1 -= 36484L;
                b1 = b1;
                i5 -= ((int) (10L));
                i5 += i6 - i7;
                if (i6 != 0) {
                    vMeth2_check_sum += ((((((((((((by + l) + l1) + i4) + i5) + i6) + s) + i7) + Double.doubleToLongBits(d)) + i8) + i9) + i10) + i11) + i12;
                    return;
                }
                d = -6776;
                i5 = ((int) (l1));
                i5 *= i5;
                l += i6;
                d -= Test.instanceCount;
            }
            for (i8 = 1; i8 < 4; i8++) {
                boolean b2 = false;
                s *= ((short) (l));
                i9 -= i5;
                b2 = b2;
                Test.iArrFld[i8 + 1] = i9;
                b2 = b2;
                by = ((byte) (d));
            }
            switch ((i4 % 2) + 104) {
                case 104 :
                    i5 <<= i5;
                    if (Test.bFld) {
                        for (i10 = i4; i10 < 4; i10++) {
                            i11 += ((int) ((-7.286F) + (i10 * i10)));
                            i5 += ((int) (l1));
                            i12 = 1;
                            while ((--i12) > 0) {
                                i9 -= i11;
                                Test.iArrFld[i4] -= ((int) (d));
                                i9 <<= i10;
                                i9 = i8;
                                Test.iArrFld[i10 - 1] = i4;
                            }
                        }
                    }
                case 105 :
                    l1 += Test.instanceCount;
                    break;
                default :
                    l1 = ((long) (d));
            }
        }
        vMeth2_check_sum += ((((((((((((by + l) + l1) + i4) + i5) + i6) + s) + i7) + Double.doubleToLongBits(d)) + i8) + i9) + i10) + i11) + i12;
    }

    public static void vMeth1(boolean b, float f) {
        int i2 = -4;
        int i3 = -43759;
        int i13 = -250;
        int i14 = 124;
        byte by1 = -32;
        double d1 = 2.49814;
        double dArr[] = new double[N];
        FuzzerUtils.init(dArr, 1.43);
        for (i2 = 2; i2 < 80; ++i2) {
            i3 >>>= i3 -= -73;
            {
                final boolean ax$16 = Test.bFld;
                final int ax$17 = i2;
                final int ax$18 = i13;
                final double ax$19 = d1;
                try {
                    long[][] ax$7 = new long[][]{ new long[]{ 6821448715940097412L, -3735761162348707908L }, new long[]{ 2065464013628450692L, -6226100413524263125L, -7162357173032347662L, -1870497157783566093L, 7580542550824235093L, -3534790282506445532L, 5579732331138873819L, 8839725963798844975L } };
                    DecimalFormat ax$10 = new DecimalFormat();
                    Number ax$12 = null;
                    String ax$13 = "s";
                    boolean ax$1 = false;
                    for (int ax$0 = -946; ax$0 < (-946 + 7274); ax$0 += 1) {
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            i13 /= i13;
                            i13 += i13;
                            ax$7[i2][i13] >>= 31616;
                            for (i13 = 1; i13 < (1 + 400); i13++) {
                                d1 += d1;
                            }
                        } catch (Throwable ax$9) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                        if (!ax$1) {
                            i3 = i3++;
                            ax$1 = true;
                        }
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            String ax$14 = ax$10.format(ax$12);
                            if (!ax$14.equals(ax$13)) {
                                bFld = true;
                            }
                        } catch (Throwable ax$15) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                    }
                } finally {
                    Test.bFld = ax$16;
                    i2 = ax$17;
                    i13 = ax$18;
                    d1 = ax$19;
                }
            }
            vMeth2(by1, Test.instanceCount, Test.instanceCount);
            Test.instanceCount += i2;
            i3 -= i2;
            dArr = dArr;
            i13 = 1;
            do {
                i3 += i3;
                i3 += ((int) (f));
                dArr = dArr;
                for (d1 = 1; d1 > i2; d1--) {
                    double d2 = 0.29913;
                    if (b)
                        break;

                    Test.instanceCount = Test.instanceCount;
                    f /= ((float) (68.15618));
                    if (Test.bFld)
                        break;

                    Test.iArrFld = Test.iArrFld;
                    d2 %= Test.instanceCount | 1;
                    i14 += ((int) (Test.instanceCount));
                    i3 += ((int) (f));
                    switch ((((i13 >>> 1) % 2) * 5) + 26) {
                        case 32 :
                            i14 = i14;
                            i3 = i3;
                            if (b) {
                                d2 += f;
                            } else if (false) {
                                Test.instanceCount = i2;
                                Test.sFld += ((short) (i2));
                            } else {
                                d2 -= -212;
                                Test.instanceCount += 12;
                                Test.instanceCount = i14;
                                f += Test.instanceCount;
                                Test.iArrFld[i2] *= i14;
                                if (false)
                                    continue;

                                f += (-31035) + (d1 * d1);
                                d2 += i3;
                                Test.iArrFld[((int) (d1 - 1))] >>>= ((int) (Test.instanceCount));
                                f += ((float) (d1 * i2));
                                vMeth1_check_sum += ((((((((b ? 1 : 0) + Float.floatToIntBits(f)) + i2) + i3) + by1) + i13) + Double.doubleToLongBits(d1)) + i14) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                                return;
                            }
                        case 36 :
                            i3 += 12908 + (d1 * d1);
                            break;
                        default :
                            i14 += ((int) (Test.instanceCount));
                    }
                }
            } while ((++i13) < 7 );
        }
        vMeth1_check_sum += ((((((((b ? 1 : 0) + Float.floatToIntBits(f)) + i2) + i3) + by1) + i13) + Double.doubleToLongBits(d1)) + i14) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth() {
        float f1 = -64.457F;
        float fArr[] = new float[N];
        int i15 = 7;
        int i16 = 10;
        int i17 = 4;
        int i18 = 40690;
        int i19 = -7;
        int i20 = 212;
        int i21 = 5;
        int i22 = -50620;
        int i23 = -134;
        int i24 = -133;
        int i25 = -20690;
        byte by2 = -37;
        long l2 = 19000L;
        FuzzerUtils.init(fArr, 39.486F);
        vMeth1(Test.bFld, f1);
        for (i15 = 9; i15 < 253; i15++) {
            Test.dFld = -10115;
            i16 -= -55461;
            i16 -= ((int) (f1));
            for (i17 = i15; i17 < 3; ++i17) {
                i18 -= ((int) (f1));
                Test.lArrFld[i15 + 1] = i16;
                by2 += ((byte) (i17 * i16));
                for (i19 = 1; i19 < 1; ++i19) {
                    i20 = i16;
                    fArr[i15] -= i20;
                    Test.iArrFld = Test.iArrFld;
                    i20 <<= by2;
                    Test.iArrFld[i17 - 1] -= -37775;
                    i20 += ((int) (l2));
                }
                for (i21 = 1; i21 < 1; ++i21) {
                    i20 += (-666) + (i21 * i21);
                    i18 = by2;
                    i18 = ((int) (Test.instanceCount));
                }
                i20 -= -20;
                Test.instanceCount |= i17;
            }
            i16 *= i21;
            i16 = i21;
            f1 += l2;
            i23 = 1;
            while ((++i23) < 3) {
                for (i24 = 1; i24 < 1; ++i24) {
                    i25 += ((i24 * i18) + i18) - Test.instanceCount;
                    Test.dFld += i24;
                    f1 += ((i24 * i17) + Test.instanceCount) - i20;
                    Test.iArrFld[i15] = by2;
                    i16 >>= 12;
                    switch ((i24 % 9) + 61) {
                        case 61 :
                            i18 += i24;
                            if (Test.bFld)
                                continue;

                            i16 = ((int) (l2));
                            i18 += Test.sFld;
                        case 62 :
                            i16 <<= ((int) (l2));
                        case 63 :
                            i20 += (-181) + (i24 * i24);
                        case 64 :
                            i25 ^= ((int) (192L));
                            break;
                        case 65 :
                            i20 += i16;
                            break;
                        case 66 :
                            i16 = i17;
                            break;
                        case 67 :
                            fArr = fArr;
                            break;
                        case 68 :
                            l2 += i24 * i24;
                            break;
                        case 69 :
                            l2 = ((long) (f1));
                            break;
                    }
                }
            }
        }
        vMeth_check_sum += (((((((((((((Float.floatToIntBits(f1) + i15) + i16) + i17) + i18) + by2) + i19) + i20) + l2) + i21) + i22) + i23) + i24) + i25) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {
        int i = -45514;
        int i1 = -156;
        int i26 = 215;
        int i27 = -4;
        int i28 = -7;
        int i29 = 13;
        int i30 = -4275;
        int i31 = -6;
        float f2 = -38.283F;
        byte by3 = 32;
        for (i = 5; 100 > i; i++) {
            fFld -= i1;
        }
        Test.instanceCount |= (i1 *= --i1) + (i1 = i1 |= i);
        vMeth();
        Test.lArrFld[(0 >>> 1) % N] -= Test.sFld;
        Test.iArrFld[(i1 >>> 1) % N] |= i;
        Test.sArrFld[(65027 >>> 1) % N] = ((short) (Test.instanceCount));
        for (i26 = 212; i26 > 8; i26--) {
            i27 += i26;
            for (i28 = 1; i28 < 25; ++i28) {
                i1 += i28;
                Test.sFld = ((short) (i27));
                Test.sArrFld = Test.sArrFld;
                if (false)
                    break;

                fFld += -122;
                for (f2 = 1; f2 < 2; f2++) {
                    i30 *= ((int) (1.11822));
                    i29 -= ((int) (50.127131));
                    switch (((int) ((f2 % 5) + 108))) {
                        case 108 :
                            fArrFld = fArrFld;
                            byArrFld[i26 - 1] = ((byte) (i30));
                            if (Test.bFld) {
                                switch ((((i28 >>> 1) % 2) * 5) + 27) {
                                    case 29 :
                                        Test.lArrFld[i28] -= -1499988362L;
                                        i30 |= Test.sFld;
                                        if (Test.bFld)
                                            break;

                                        switch (((int) ((f2 % 1) + 91))) {
                                            case 91 :
                                                Test.lArrFld[i28] = i;
                                                if (Test.bFld)
                                                    continue;

                                                i29 = i;
                                                Test.dFld *= Test.instanceCount;
                                                by3 *= ((byte) (Test.instanceCount));
                                                Test.lArrFld = Test.lArrFld;
                                                fFld -= i27;
                                            default :
                                                i27 += ((int) (f2 * f2));
                                                i1 += ((int) (((f2 * i26) + i28) - i27));
                                                i1 += ((int) (f2));
                                                Test.instanceCount += ((long) (f2));
                                                fFld -= i28;
                                                i29 = ((int) (f2));
                                                Test.instanceCount <<= -60354;
                                                Test.bFld = Test.bFld;
                                                i29 *= 41614;
                                                Test.instanceCount = i27;
                                                Test.iArrFld[i26 + 1] = i29;
                                        }
                                        switch (((i26 >>> 1) % 4) * 5) {
                                            case 5 :
                                                i30 = i26;
                                                break;
                                            case 7 :
                                                i30 += ((int) (f2));
                                                i30 = ((int) (Test.instanceCount));
                                                Test.instanceCount = -19674;
                                                Test.sFld += ((short) (f2));
                                                Test.bFld = Test.bFld;
                                                Test.dFld = Test.instanceCount;
                                                fFld1 += Test.sFld;
                                            case 18 :
                                                i27 &= -3;
                                                Test.iArrFld[((int) (f2 + 1))] += ((int) (Test.dFld));
                                                switch ((i26 % 2) + 90) {
                                                    case 90 :
                                                        i1 -= i31;
                                                        i27 += ((int) (f2 - by3));
                                                        Test.sFld += ((short) (fFld1));
                                                        i1 += 4;
                                                        i1 += i26;
                                                        Test.lArrFld[i28 + 1] += lFld;
                                                        i27 = i;
                                                        lFld *= i;
                                                        if (Test.bFld)
                                                            continue;

                                                        i1 += i27;
                                                    case 91 :
                                                        i27 = ((int) (lFld));
                                                        Test.iArrFld[i26 + 1] = ((int) (f2));
                                                        fFld += ((f2 * i1) + by3) - lFld;
                                                        i27 += ((int) (f2 - i1));
                                                        i27 -= i;
                                                        Test.iArrFld[((int) (f2 + 1))] += ((int) (Test.instanceCount));
                                                        Test.bFld = Test.bFld;
                                                        i29 >>>= i31;
                                                    default :
                                                        i27 = ((int) (21018L));
                                                }
                                                break;
                                            case 6 :
                                            default :
                                                Test.instanceCount += ((long) (f2 - i29));
                                        }
                                        break;
                                    case 33 :
                                    default :
                                        Test.instanceCount -= 99;
                                }
                            } else if (Test.bFld) {
                                i27 *= ((int) (Test.dFld));
                            } else {
                                Test.bFld = Test.bFld;
                            }
                            break;
                        case 109 :
                            by3 <<= ((byte) (i1));
                            break;
                        case 110 :
                            i30 >>= i31;
                        case 111 :
                            Test.iArrFld[i28] = -17503;
                            break;
                        case 112 :
                            i31 = i31;
                            break;
                        default :
                            i30 += ((int) (f2 * f2));
                    }
                }
            }
        }
        FuzzerUtils.out.println((((("i i1 i26 = " + i) + ",") + i1) + ",") + i26);
        FuzzerUtils.out.println((((("i27 i28 i29 = " + i27) + ",") + i28) + ",") + i29);
        FuzzerUtils.out.println((((("f2 i30 by3 = " + Float.floatToIntBits(f2)) + ",") + i30) + ",") + by3);
        FuzzerUtils.out.println("i31 = " + i31);
        FuzzerUtils.out.println((((("Test.instanceCount fFld Test.bFld = " + Test.instanceCount) + ",") + Float.floatToIntBits(fFld)) + ",") + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println((((("Test.sFld Test.dFld fFld1 = " + Test.sFld) + ",") + Double.doubleToLongBits(Test.dFld)) + ",") + Float.floatToIntBits(fFld1));
        FuzzerUtils.out.println((((("lFld Test.iArrFld Test.lArrFld = " + lFld) + ",") + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println((((("Test.sArrFld fArrFld byArrFld = " + FuzzerUtils.checkSum(Test.sArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld))) + ",") + FuzzerUtils.checkSum(byArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}
