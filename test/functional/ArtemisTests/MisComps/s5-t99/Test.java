// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
public class Test {
    public static final int N = 256;

    public static long instanceCount = 44L;

    public static byte byFld = 50;

    public static volatile double dFld = 0.114153;

    public static int iFld = 3;

    public static double dFld1 = -30.123651;

    public int iFld1 = 186;

    public static float fFld = 0.301F;

    public static long lArrFld[] = new long[N];

    public static boolean bArrFld[] = new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3292219804L);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b1, int i4, int i5) {
        int i6 = -8;
        int i7 = -190;
        int i8 = -4;
        int i9 = -33736;
        int i10 = 45486;
        int i11 = -9;
        int i12 = 42588;
        int i13 = -20408;
        int iArr1[][] = new int[N][N];
        float f1 = -105.341F;
        float fArr1[] = new float[N];
        short s = -6201;
        double d1 = -25.92246;
        FuzzerUtils.init(iArr1, 29);
        FuzzerUtils.init(fArr1, 0.48F);
        i6 = 1;
        do {
            for (i7 = 4; i7 > i6; i7--) {
                {
                    try {
                        int[] ax$19 = new int[]{ -1482486255, -1933155188, 386239658, 1997134441, 1120336961, 943006135, -787492727, -2033555572 };
                        byte[] ax$23 = new byte[16];
                        byte[] ax$24 = new byte[]{ ((byte) (88)), ((byte) (100)), ((byte) (73)), ((byte) (-18)), ((byte) (-16)), ((byte) (11)) };
                        byte[] ax$25 = new byte[]{ ((byte) (35)), ((byte) (51)), ((byte) (-53)), ((byte) (-27)), ((byte) (-99)), ((byte) (88)), ((byte) (72)), ((byte) (-78)) };
                        boolean ax$18 = false;
                        for (int ax$17 = -267; ax$17 < (-267 + 15758); ax$17 += 1) {
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                for (int ax$20 = 0; ax$20 <= 3; ax$20++) {
                                    for (int ax$21 = 0; ax$21 <= 3; ax$21++) {
                                        ax$19[ax$20 * ax$21] += 1;
                                    }
                                }
                            } catch (Throwable ax$22) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                            if (!ax$18) {
                                Test.instanceCount = i4;
                                ax$18 = true;
                            }
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                int ax$26 = Math.min(ax$24.length, Math.min(ax$25.length, ax$23.length));
                                for (int ax$27 = 0; ax$27 < ax$26; ax$27++) {
                                    ax$24[ax$27] = ((byte) ((((ax$25[ax$27] & 0xff) + (ax$23[ax$27] & 0xff)) + 1) >> 1));
                                }
                            } catch (Throwable ax$28) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                        }
                    } finally {
                    }
                }
                i4 = i6;
                i5 = ((int) (-109.62451));
                i9 = 1;
                do {
                    iArr1[i9 + 1][i9] *= ((int) (Test.instanceCount));
                    iArr1[i9 + 1] = iArr1[i6];
                    i8 = i5;
                    i5 += i9;
                    iArr1[i6 - 1][i9] += -54830;
                    Test.byFld = ((byte) (i9));
                    iArr1[i9][i9 - 1] >>= ((int) (Test.instanceCount));
                    i4 += i9 + i8;
                    f1 -= i6;
                    Test.instanceCount >>= i6;
                } while ((++i9) < 1 );
                Test.instanceCount += i7 * i7;
                i8 &= ((int) (Test.instanceCount));
                for (i10 = 1; 1 > i10; ++i10) {
                    i8 = i11;
                    Test.instanceCount += ((i10 * i11) + i12) - s;
                    i4 = i5;
                    Test.instanceCount = 44864L;
                    i13 = i8;
                    i5 = i7;
                    if (b1)
                        break;

                    i5 = ((int) (-76142745L));
                    d1 = i11;
                    iArr1[i6][i10] += ((int) (Test.instanceCount));
                    iArr1[i6][i7 + 1] -= i10;
                    fArr1[i10] -= i10;
                    i13 = i12;
                }
                Test.instanceCount *= i10;
                if (false) {
                    Test.instanceCount = s;
                    i11 += i11;
                    i4 = ((int) (-29737L));
                } else if (b1) {
                    i4 *= ((int) (Test.instanceCount));
                } else {
                    b1 = b1;
                }
            }
        } while ((++i6) < 162 );
        vMeth2_check_sum += (((((((((((((((b1 ? 1 : 0) + i4) + i5) + i6) + i7) + i8) + i9) + Float.floatToIntBits(f1)) + i10) + i11) + i12) + s) + i13) + Double.doubleToLongBits(d1)) + FuzzerUtils.checkSum(iArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth1(int i1) {
        int i2 = 39226;
        int i3 = 8;
        int i14 = -2;
        int i15 = -102;
        int i16 = -11228;
        int i17 = -33307;
        int i18 = -6;
        int i19 = 12;
        int i20 = -5;
        int i21 = -11;
        int i22 = 4615;
        int i23 = 53;
        int i24 = 237;
        int iArr2[] = new int[N];
        boolean b2 = false;
        double d2 = -2.63329;
        float f3 = 30.843F;
        FuzzerUtils.init(iArr2, -27614);
        for (i2 = 9; 244 > i2; i2++) {
            i1 *= i2;
            vMeth2(b2, i2, i3);
            iArr2[i2 + 1] -= i2;
            Test.instanceCount ^= -2763427683L;
            b2 = b2;
            i14 = 1;
            do {
                i1 <<= i2;
                try {
                    i3 = i14 % (-39130);
                    iArr2[i2 + 1] = i2 % i1;
                    iArr2[i14 - 1] = 11 / i3;
                } catch (ArithmeticException a_e) {
                }
                i3 &= ((int) (Test.instanceCount));
            } while ((++i14) < 3 );
            for (i15 = i2; i15 < 3; i15++) {
                Test.instanceCount += ((i15 * i15) + i3) - i1;
            }
            for (i17 = 1; i17 < 3; i17++) {
                iArr2[i2 + 1] |= ((int) (4273098285L));
                Test.lArrFld[i2] |= Test.instanceCount;
                iArr2[i17 - 1] = i14;
                for (d2 = 1; d2 < 2; d2++) {
                    float f2 = -78.648F;
                    f2 = Test.instanceCount;
                }
                Test.instanceCount += i17;
                Test.dFld -= 148;
                for (i20 = 2; i20 > i17; i20--) {
                    if (i18 != 0) {
                        vMeth1_check_sum += ((((((((((((((((i1 + i2) + i3) + (b2 ? 1 : 0)) + i14) + i15) + i16) + i17) + i18) + Double.doubleToLongBits(d2)) + i19) + i20) + i21) + Float.floatToIntBits(f3)) + i22) + i23) + i24) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    if (b2)
                        break;

                    Test.lArrFld[i17 - 1] *= ((long) (f3));
                    Test.lArrFld[i17] = i19;
                    i3 += i20 * i20;
                    Test.instanceCount = Test.instanceCount;
                    Test.instanceCount = 222L;
                    if (i14 != 0) {
                        vMeth1_check_sum += ((((((((((((((((i1 + i2) + i3) + (b2 ? 1 : 0)) + i14) + i15) + i16) + i17) + i18) + Double.doubleToLongBits(d2)) + i19) + i20) + i21) + Float.floatToIntBits(f3)) + i22) + i23) + i24) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    i19 += -8;
                    i22 += i20 * i20;
                }
                f3 -= Test.instanceCount;
                i22 *= -21035;
                i1 += i21;
                for (i23 = 1; 2 > i23; i23++) {
                    i22 = 25105;
                    Test.dFld -= 29;
                }
            }
        }
        vMeth1_check_sum += ((((((((((((((((i1 + i2) + i3) + (b2 ? 1 : 0)) + i14) + i15) + i16) + i17) + i18) + Double.doubleToLongBits(d2)) + i19) + i20) + i21) + Float.floatToIntBits(f3)) + i22) + i23) + i24) + FuzzerUtils.checkSum(iArr2);
    }

    public void vMeth(boolean b, float f, long l) {
        int i = 44204;
        int i25 = 22954;
        int i26 = -27;
        int i27 = 58007;
        int i28 = -118;
        int i29 = 27996;
        int i30 = -43;
        int iArr[] = new int[N];
        double d = 87.3468;
        short s1 = 11336;
        long lArr[][] = new long[N][N];
        float fArr[] = new float[N];
        FuzzerUtils.init(lArr, -2651035099L);
        FuzzerUtils.init(fArr, -2.37F);
        FuzzerUtils.init(iArr, -9439);
        lArr[((-5757) >>> 1) % N][(i >>> 1) % N] += ((long) (((Test.instanceCount / (-4)) % (((long) (35503 - Math.abs(d))) | 1)) + lArr[(i >>> 1) % N][(i >>> 1) % N]));
        i <<= i--;
        fArr[(i >>> 1) % N] = ((float) (((l + d) - (--iArr[(i >>> 1) % N])) * (++iArr[(i >>> 1) % N])));
        i = ((int) ((-Test.instanceCount) * (l + (i - i))));
        i *= i = i--;
        i += ((int) (f));
        vMeth1(i);
        i -= ((int) (Test.instanceCount));
        l = ((long) (f));
        for (i25 = 78; i25 > 3; i25--) {
            for (i27 = 1; i27 < 7; ++i27) {
                for (i29 = i27; 2 > i29; i29++) {
                    i += i26;
                    i28 -= i30;
                    f += ((long) (i29)) ^ ((long) (f));
                    Test.dFld *= l;
                    i26 += ((i29 * Test.instanceCount) + Test.iFld) - i;
                    i30 += ((int) (f));
                    i30 = ((int) (d));
                    i28 = ((int) (Test.instanceCount));
                    l += i29 * i29;
                    iArr[i29] -= i;
                    b = b;
                    i26 *= i25;
                    iArr[i29 + 1] = i28;
                }
                l += ((i27 * s1) + Test.byFld) - i;
                i26 = 2;
                lArr[(42406 >>> 1) % N][i25] >>= Test.instanceCount;
                l = s1;
                switch ((i27 % 4) + 118) {
                    case 118 :
                        f -= -32;
                        Test.dFld1 += Test.instanceCount;
                        lArr[i25 - 1][i25] >>= i27;
                        switch ((i27 % 1) + 98) {
                            case 98 :
                                Test.instanceCount <<= Test.byFld;
                                f += Test.iFld;
                                Test.iFld -= 24987;
                                break;
                        }
                        break;
                    case 119 :
                        s1 = ((short) (i25));
                        break;
                    case 120 :
                        i30 -= i30;
                        break;
                    case 121 :
                        i -= ((int) (Test.instanceCount));
                        break;
                }
            }
        }
        vMeth_check_sum += ((((((((((((((b ? 1 : 0) + Float.floatToIntBits(f)) + l) + i) + Double.doubleToLongBits(d)) + i25) + i26) + i27) + i28) + i29) + i30) + s1) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {
        boolean b3 = false;
        float f4 = -102.209F;
        float fArr2[] = new float[N];
        int i31 = -7;
        int i32 = 12;
        int i33 = -41126;
        int i34 = -95;
        int i35 = -11;
        int i36 = -33;
        int i37 = 10;
        int i38 = 2;
        int i39 = -12;
        int iArr3[] = new int[N];
        short s2 = -9690;
        long l1 = 5L;
        FuzzerUtils.init(iArr3, -25068);
        FuzzerUtils.init(fArr2, 2.894F);
        vMeth(b3, f4, Test.instanceCount);
        Test.instanceCount = Test.iFld;
        Test.instanceCount += Test.instanceCount;
        Test.iFld += 9519;
        for (i31 = 10; i31 < 248; i31++) {
            iArr3[i31] -= ((int) (f4));
            Test.dFld1 = 10;
            if (false)
                continue;

        }
        for (i33 = 15; i33 < 245; i33++) {
            i32 += ((int) (Test.instanceCount));
            for (i35 = 1; i35 < 22; i35++) {
                s2 += ((short) (i36));
                for (i37 = 1; i37 < 2; ++i37) {
                    i38 += 41;
                    Test.instanceCount = Test.instanceCount;
                    switch (((i34 >>> 1) % 4) + 126) {
                        case 126 :
                            try {
                                i34 = i34 % iArr3[i33 + 1];
                                i34 = 82 % i36;
                                iArr3[i37] = (-161) % i35;
                            } catch (ArithmeticException a_e) {
                            }
                            i38 -= i37;
                            i32 += i37 ^ i35;
                            iFld1 += ((int) (Test.dFld1));
                            break;
                        case 127 :
                            i38 *= i33;
                            fArr2[((-24706) >>> 1) % N] = Test.instanceCount;
                        case 128 :
                            i36 -= iFld1;
                            iArr3[((-20) >>> 1) % N] = 30;
                            iFld1 = i33;
                            Test.dFld = -247;
                            Test.dFld1 += Test.instanceCount;
                            break;
                        case 129 :
                            b3 = true;
                            b3 = b3;
                            if (b3)
                                break;

                            Test.fFld += (-5) + (i37 * i37);
                            if (b3)
                                break;

                            Test.lArrFld[i35] >>= i34;
                            switch (((i35 % 2) * 5) + 73) {
                                case 83 :
                                    Test.byFld += ((byte) ((-13) + (i37 * i37)));
                                    Test.fFld += i37 + Test.byFld;
                                    {
                                        final int ax$12 = i39;
                                        final boolean ax$13 = b3;
                                        final int ax$14 = this.iFld1;
                                        final int ax$15 = i31;
                                        final int ax$16 = i35;
                                        try {
                                            double[] ax$7 = new double[]{ 0.8554785207743743, 0.7145070022388954, 0.4754062817836624 };
                                            double[] ax$8 = new double[1];
                                            double[] ax$10 = new double[1];
                                            boolean ax$1 = false;
                                            for (int ax$0 = -741; ax$0 < (-741 + 3715); ax$0 += 1) {
                                                Test.AxOutputRedirectionHelper.redirect();
                                                try {
                                                    b3 = true;
                                                } catch (Throwable ax$6) {
                                                } finally {
                                                }
                                                Test.AxOutputRedirectionHelper.recover();
                                                if (!ax$1) {
                                                    Test.iFld += i37;
                                                    ax$1 = true;
                                                }
                                                Test.AxOutputRedirectionHelper.redirect();
                                                try {
                                                    ax$10[i35] = ax$7[i35] + ax$8[i35];
                                                } catch (Throwable ax$11) {
                                                } finally {
                                                }
                                                Test.AxOutputRedirectionHelper.recover();
                                            }
                                        } finally {
                                            i39 = ax$12;
                                            b3 = ax$13;
                                            this.iFld1 = ax$14;
                                            i31 = ax$15;
                                            i35 = ax$16;
                                        }
                                    }
                                    i36 += i37;
                                    switch (((i37 % 2) * 5) + 126) {
                                        case 128 :
                                            iFld1 += i32;
                                            s2 += ((short) (i36));
                                            break;
                                        case 135 :
                                            i38 += i31;
                                            iFld1 = ((int) (Test.instanceCount));
                                            i36 ^= 56613;
                                            i32 /= ((int) (((long) (Test.fFld)) | 1));
                                            i36 -= ((int) (Test.instanceCount));
                                            Test.iFld >>= 43909;
                                            i39 = i33;
                                            break;
                                        default :
                                            iFld1 -= 18548;
                                            Test.iFld = Test.iFld;
                                    }
                                    iFld1 += i37 + iFld1;
                                    i39 &= i34;
                                    Test.instanceCount &= Test.instanceCount;
                                    switch ((((i34 >>> 1) % 10) * 5) + 43) {
                                        case 78 :
                                            i36 += i37 - iFld1;
                                            i38 += i37 * i37;
                                            i38 += i37 | iFld1;
                                            Test.byFld -= ((byte) (i33));
                                            iArr3[i33] += i39;
                                            i34 *= i31;
                                            switch ((i35 % 2) + 53) {
                                                case 53 :
                                                    s2 += ((short) (((i37 * i38) + i32) - Test.iFld));
                                                    i32 += i37 | i39;
                                                    if (b3)
                                                        break;

                                                    Test.instanceCount += i37;
                                                    Test.instanceCount *= Test.instanceCount;
                                                    switch ((i33 % 10) + 52) {
                                                        case 52 :
                                                            i36 -= 66;
                                                            i38 -= ((int) (1.41F));
                                                            i32 -= 61319;
                                                            Test.instanceCount *= Test.iFld;
                                                            i36 *= i34;
                                                            i39 += i37 * i37;
                                                            Test.iFld -= i31;
                                                            i38 += i37;
                                                            break;
                                                        case 53 :
                                                            i38 += ((i37 * i35) + i35) - Test.byFld;
                                                            break;
                                                        case 54 :
                                                            Test.dFld1 = i39;
                                                        case 55 :
                                                            Test.instanceCount ^= 13971;
                                                            break;
                                                        case 56 :
                                                            i34 *= i36;
                                                        case 57 :
                                                            Test.instanceCount = ((long) (f4));
                                                            break;
                                                        case 58 :
                                                        case 59 :
                                                            i32 -= i31;
                                                            break;
                                                        case 60 :
                                                            Test.lArrFld[i35 - 1] = -212;
                                                            break;
                                                        case 61 :
                                                            i34 += ((int) (f4));
                                                            break;
                                                    }
                                                case 54 :
                                                default :
                                                    Test.instanceCount = i32;
                                            }
                                            break;
                                        case 55 :
                                            Test.instanceCount = Test.instanceCount;
                                            break;
                                        case 68 :
                                            i36 *= i37;
                                        case 47 :
                                            iArr3[i37] += Test.iFld;
                                            break;
                                        case 62 :
                                            Test.bArrFld[i33] = true;
                                            break;
                                        case 46 :
                                            Test.iFld += (-44091) + (i37 * i37);
                                            break;
                                        case 80 :
                                            Test.iFld += Test.byFld;
                                            break;
                                        case 74 :
                                            l1 = i31;
                                        case 49 :
                                            iArr3[i37] += i32;
                                            break;
                                        case 87 :
                                            Test.bArrFld[i33] = true;
                                    }
                                    break;
                                case 79 :
                                    i38 >>= i31;
                                    break;
                            }
                            break;
                    }
                }
            }
        }
        FuzzerUtils.out.println((((("b3 f4 i31 = " + (b3 ? 1 : 0)) + ",") + Float.floatToIntBits(f4)) + ",") + i31);
        FuzzerUtils.out.println((((("i32 i33 i34 = " + i32) + ",") + i33) + ",") + i34);
        FuzzerUtils.out.println((((("i35 i36 s2 = " + i35) + ",") + i36) + ",") + s2);
        FuzzerUtils.out.println((((("i37 i38 i39 = " + i37) + ",") + i38) + ",") + i39);
        FuzzerUtils.out.println((((("l1 iArr3 fArr2 = " + l1) + ",") + FuzzerUtils.checkSum(iArr3)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.byFld Test.dFld = " + Test.instanceCount) + ",") + Test.byFld) + ",") + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println((((("Test.iFld Test.dFld1 iFld1 = " + Test.iFld) + ",") + Double.doubleToLongBits(Test.dFld1)) + ",") + iFld1);
        FuzzerUtils.out.println((((("Test.fFld Test.lArrFld Test.bArrFld = " + Float.floatToIntBits(Test.fFld)) + ",") + FuzzerUtils.checkSum(Test.lArrFld)) + ",") + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}