// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 6L;

    public static float fFld = 2.207F;

    public static volatile short sFld = -10231;

    public boolean bFld = false;

    public volatile byte byFld = 117;

    public static volatile double dFld = 83.55403;

    public static double dArrFld[] = new double[N];

    public static volatile long lArrFld[] = new long[N];

    public static byte byArrFld[] = new byte[N];

    public volatile short sArrFld[] = new short[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 1.55736);
        FuzzerUtils.init(Test.lArrFld, 919117178L);
        FuzzerUtils.init(Test.byArrFld, ((byte) (54)));
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, int i6, long l2) {
        int i7 = 83;
        int i8 = 10323;
        int i9 = -1;
        int i10 = -140;
        int i11 = 4;
        int i12 = -10;
        int i13 = -7;
        int iArr2[] = new int[N];
        boolean b = false;
        boolean bArr[] = new boolean[N];
        double d2 = 0.115871;
        byte by = 1;
        float fArr[] = new float[N];
        FuzzerUtils.init(iArr2, 215);
        FuzzerUtils.init(fArr, -64.115F);
        FuzzerUtils.init(bArr, true);
        i6 >>= i6;
        for (i7 = 206; 12 < i7; i7 -= 2) {
            iArr2[i7 - 1] -= 51236;
            Test.lArrFld[i7] &= i6;
            try {
                i6 = i7 % i8;
                i6 = 668 / i8;
                i8 = 16 % i8;
            } catch (ArithmeticException a_e) {
            }
            for (i9 = i7; i9 < 6; ++i9) {
                iArr2[i7] &= i9;
                i10 = i9;
                switch ((((i7 >>> 1) % 7) * 5) + 2) {
                    case 25 :
                        Test.instanceCount *= -14969;
                        for (i11 = 1; i11 < 1; ++i11) {
                            if (b)
                                break;

                            i12 *= i6;
                            d2 += i10;
                            {
                                final int ax$34 = i10;
                                try {
                                    SortedMap<String, Charset> ax$26 = null;
                                    Set<String> ax$27 = null;
                                    Object ax$32 = new Object();
                                    boolean ax$25 = false;
                                    for (int ax$24 = -15; ax$24 < (-15 + 5527); ax$24 += 1) {
                                        Test.AxOutputRedirectionHelper.redirect();
                                        try {
                                            for (Map.Entry<String, Charset> ax$28 : ax$26.entrySet()) {
                                                String ax$29 = ax$28.getKey();
                                                ax$27.remove(ax$29);
                                            }
                                        } catch (Throwable ax$30) {
                                        } finally {
                                        }
                                        Test.AxOutputRedirectionHelper.recover();
                                        if (!ax$25) {
                                            Test.instanceCount -= 593L;
                                            ax$25 = true;
                                        }
                                        Test.AxOutputRedirectionHelper.redirect();
                                        try {
                                            if (ax$32 == "dead") {
                                                i10 = 1;
                                            }
                                        } catch (Throwable ax$33) {
                                        } finally {
                                        }
                                        Test.AxOutputRedirectionHelper.recover();
                                    }
                                } finally {
                                    i10 = ax$34;
                                }
                            }
                            if (b)
                                continue;

                            i10 += ((i11 * i12) + Test.fFld) - i10;
                            fArr[i11 + 1] = Test.fFld;
                            iArr2[i11 - 1] += i12;
                            i6 += i11;
                            l1 = -62634;
                            i10 -= i7;
                        }
                        i13 = 1;
                        while ((++i13) < 1) {
                            iArr2[i13 + 1] += ((int) (Test.fFld));
                            Test.instanceCount = l1;
                            Test.instanceCount += i13 * i13;
                            Test.instanceCount = ((long) (Test.fFld));
                            i12 += i10;
                            i8 = i8;
                            i10 = i8;
                            i12 += i13 * i13;
                            i6 += ((int) (7L + (i13 * i13)));
                            Test.lArrFld[i7] &= i7;
                            iArr2[i9 - 1] = i11;
                            Test.byArrFld[i9 + 1] += ((byte) (Test.fFld));
                            i6 *= ((int) (Test.instanceCount));
                            i10 = ((int) (-42195L));
                        }
                        break;
                    case 16 :
                        Test.instanceCount -= -11829;
                        break;
                    case 22 :
                        bArr[(i13 >>> 1) % N] = b;
                        break;
                    case 15 :
                        if (false)
                            break;

                        break;
                    case 7 :
                        i8 += i9;
                        break;
                    case 19 :
                    case 29 :
                        i12 -= 90;
                    default :
                        i10 = by;
                }
            }
        }
        vMeth1_check_sum += ((((((((((((((l1 + i6) + l2) + i7) + i8) + i9) + i10) + i11) + i12) + (b ? 1 : 0)) + Double.doubleToLongBits(d2)) + i13) + by) + FuzzerUtils.checkSum(iArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(bArr);
    }

    public int iMeth(short s, int i3) {
        if (Test.ax$0) {
            BigDecimal ax$1 = null;
            String ax$2 = "s";
            Test.AxOutputRedirectionHelper.redirect();
            try {
                if (ax$2.startsWith("0x")) {
                    ax$2 = ax$2.substring(2);
                    int ax$3 = ax$2.indexOf('p');
                    long ax$4 = Long.parseLong(ax$2.substring(ax$3 + 1));
                    int ax$5 = ax$2.indexOf('.');
                    String ax$6;
                    if (ax$5 >= 0) {
                        ax$6 = ax$2.substring(0, ax$5) + ax$2.substring(ax$5 + 1, ax$3);
                        ax$4 -= 4 * ((ax$3 - ax$5) - 1);
                    } else {
                        ax$6 = ax$2.substring(0, ax$3);
                    }
                    ax$1 = new BigDecimal(new BigInteger(ax$6, 16));
                    if (ax$4 >= 0) {
                        ax$1 = ax$1.multiply(BigDecimal.valueOf(2).pow(((int) (ax$4))));
                    } else {
                        ax$1 = ax$1.divide(BigDecimal.valueOf(2).pow(((int) (-ax$4))));
                    }
                } else {
                    ax$1 = new BigDecimal(ax$2);
                }
            } catch (Throwable ax$7) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return -1671423472;
        }
        int i4 = 58;
        int i5 = -14;
        int i14 = -14;
        int i15 = -11;
        int i16 = 31038;
        int i17 = 11;
        int i18 = -69;
        int i19 = 11103;
        int i20 = 12;
        int i21 = 2;
        byte by1 = -122;
        boolean b1 = false;
        long lArr[][] = new long[N][N];
        FuzzerUtils.init(lArr, 3669911667271874198L);
        Test.lArrFld = lArr[(i3 >>> 1) % N] = FuzzerUtils.long1array(N, ((long) (-5206710743286127124L)));
        i3 = i3;
        for (i4 = 8; i4 < 147; i4++) {
            vMeth1(Test.instanceCount, i3, Test.instanceCount);
            i3 += i5;
        }
        if (b1) {
            Test.instanceCount -= Test.instanceCount;
            for (i14 = 6; i14 < 127; ++i14) {
                i16 = 1;
                while ((++i16) < 5) {
                    Test.instanceCount += i5;
                    for (i17 = 1; i17 < 1; i17++) {
                        i5 += i4;
                        Test.instanceCount -= i4;
                        i18 += -121;
                        i5 -= i15;
                        i15 = i5;
                        Test.byArrFld[i17 - 1] = ((byte) (17874));
                        Test.fFld = i17;
                        i15 += i16;
                        i5 += i16;
                        i18 = i17;
                        i5 += ((int) (Test.instanceCount));
                        Test.instanceCount >>= Test.instanceCount;
                        i15 += i17;
                    }
                    i15 += 5;
                    i18 += i3;
                    for (i19 = i14; i19 < 1; ++i19) {
                        if (true)
                            break;

                        i5 = i5;
                        i5 = ((int) (Test.instanceCount));
                        by1 <<= ((byte) (i14));
                        if (b1)
                            break;

                        lArr[i19] = FuzzerUtils.long1array(N, ((long) (7105019381642541649L)));
                        Test.instanceCount -= i20;
                        Test.instanceCount ^= i21;
                    }
                    i21 ^= i14;
                    Test.instanceCount = i4;
                }
            }
        } else if (true) {
            i15 += ((int) (Test.instanceCount));
        }
        long meth_res = (((((((((((((s + i3) + i4) + i5) + i14) + i15) + i16) + i17) + i18) + i19) + i20) + by1) + (b1 ? 1 : 0)) + i21) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public void vMeth(int i1, long l, int i2) {
        double d3 = 2.6865;
        double d4 = 60.49151;
        double d5 = 2.30683;
        int i22 = 6;
        int i23 = -59864;
        int i24 = 26507;
        int i25 = 58;
        int i26 = -1694;
        int i27 = -4234;
        int i28 = -91;
        int i29 = -6046;
        int i30 = -57385;
        int iArr1[] = new int[N];
        long l3 = 125L;
        FuzzerUtils.init(iArr1, 0);
        {
            final int ax$19 = i29;
            final int ax$20 = i30;
            try {
                byte[] ax$9 = new byte[1 << 14];
                OutputStream ax$12 = null;
                short[] ax$14 = new short[]{ 20, 10, 0, -10, -20 };
                short ax$16 = new Short(((short) (1)));
                short[] ax$17 = new short[]{ ((short) (-24301)), ((short) (10484)), ((short) (30319)), ((short) (-17893)), ((short) (-27358)), ((short) (-8421)), ((short) (13549)), ((short) (-18694)), ((short) (11003)) };
                for (int ax$8 = -233; ax$8 < (-233 + 10263); ax$8 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$12.write(ax$9, i29, i29);
                    } catch (Throwable ax$13) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    iMeth(((short) (-10638)), -764595612);
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$17[i30] = ((short) (ax$14[i30] ^ ax$16));
                    } catch (Throwable ax$18) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i29 = ax$19;
                i30 = ax$20;
            }
        }
        iArr1[(i1 >>> 1) % N] >>>= iMeth(Test.sFld, i2) + i1;
        iArr1[(i2 >>> 1) % N] = i1;
        for (d3 = 2; d3 < 125; d3++) {
            for (i23 = ((int) (d3)); i23 < 5; i23++) {
                if (true) {
                    i22 += ((i23 * Test.fFld) + i22) - Test.instanceCount;
                    for (i25 = 1; i25 < 1; i25++) {
                        i2 = ((int) (Test.fFld));
                    }
                    i22 += ((int) (Test.instanceCount));
                    i24 += ((i23 * i22) + i1) - i25;
                    d4 -= Test.instanceCount;
                    iArr1[((int) (d3))] = Test.sFld;
                    Test.instanceCount -= Test.instanceCount;
                    iArr1 = iArr1;
                    for (d5 = 1; d5 > 1; d5 -= 2) {
                        i1 >>= i28;
                    }
                    if (i27 != 0) {
                        vMeth_check_sum += (((((((((((((((i1 + l) + i2) + Double.doubleToLongBits(d3)) + i22) + i23) + i24) + i25) + i26) + Double.doubleToLongBits(d4)) + Double.doubleToLongBits(d5)) + i27) + i28) + i29) + i30) + l3) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    Test.instanceCount += l;
                    i24 >>>= i23;
                    i24 = ((int) (l));
                } else if (bFld) {
                    i28 += i23;
                    l <<= l;
                    sArrFld[((int) (d3))] *= ((short) (Test.fFld));
                    for (i29 = i23; i29 < 1; ++i29) {
                        i28 >>= i30;
                        i26 = -13;
                        Test.instanceCount <<= -5256772762459920539L;
                        if (i30 != 0) {
                            vMeth_check_sum += (((((((((((((((i1 + l) + i2) + Double.doubleToLongBits(d3)) + i22) + i23) + i24) + i25) + i26) + Double.doubleToLongBits(d4)) + Double.doubleToLongBits(d5)) + i27) + i28) + i29) + i30) + l3) + FuzzerUtils.checkSum(iArr1);
                            return;
                        }
                        Test.dArrFld[((int) (d3))] = 39501;
                        if (bFld) {
                            iArr1[i23 + 1] |= ((int) (l));
                            i30 -= ((int) (Test.fFld));
                            i28 *= ((int) (-1016440196L));
                            switch ((i29 % 1) + 103) {
                                case 103 :
                                    try {
                                        i24 = i27 % (-152);
                                        i27 = 1976756227 % i2;
                                        i28 = i30 % (-33923);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i28 = i24;
                                    i22 -= i1;
                                    break;
                                default :
                                    Test.instanceCount = ((long) (Test.fFld));
                            }
                        } else if (bFld) {
                            i22 -= i23;
                        } else {
                            i30 *= ((int) (l3));
                        }
                    }
                }
            }
        }
        vMeth_check_sum += (((((((((((((((i1 + l) + i2) + Double.doubleToLongBits(d3)) + i22) + i23) + i24) + i25) + i26) + Double.doubleToLongBits(d4)) + Double.doubleToLongBits(d5)) + i27) + i28) + i29) + i30) + l3) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {
        int i = -6;
        int i31 = -39769;
        int i32 = 14380;
        int i33 = 5;
        int i34 = -14;
        int i35 = 2;
        int iArr[] = new int[N];
        int iArr3[] = new int[N];
        double d = -20.77242;
        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(iArr3, 35504);
        iArr[(i >>> 1) % N] = ((int) ((--Test.fFld) * ((i - i) - (i & Test.instanceCount))));
        i = ((int) (i + d));
        {
            try {
                boolean ax$22 = true;
                for (int ax$21 = -704; ax$21 < (-704 + 13935); ax$21 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (ax$22 != false) {
                        }
                    } catch (Throwable ax$23) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        for (double d1 : Test.dArrFld) {
            switch (((i >>> 1) % 2) + 24) {
                case 24 :
                    vMeth(i, Test.instanceCount, i);
                    iArr[(i >>> 1) % N] -= ((int) (2.62F));
                    for (i31 = 1; 20 > i31; ++i31) {
                        Test.instanceCount = Test.instanceCount;
                        Test.fFld = -42774;
                        i = ((int) (Test.instanceCount));
                        for (i33 = 1; i33 < 2; ++i33) {
                            switch ((((-105) >>> 1) % 5) + 17) {
                                case 17 :
                                    d += i;
                                    i34 += i33 * i33;
                                    i32 >>= -29788;
                                    i = -54;
                                    Test.fFld += i33;
                                    if (true)
                                        continue;

                                    byFld = byFld;
                                    i += Test.sFld;
                                    i35 += i33 * i33;
                                    i = ((int) (3579575092653350953L));
                                    i35 = i35;
                                    break;
                                case 18 :
                                    Test.fFld = i34;
                                    iArr[i31 - 1] *= ((int) (-106.27F));
                                    i34 *= i31;
                                    i -= ((int) (-2.607F));
                                    iArr[i31] -= ((int) (Test.fFld));
                                    Test.instanceCount = i31;
                                    iArr3[i33] -= i;
                                    i = i;
                                    i35 = i;
                                    break;
                                case 19 :
                                    i35 += ((int) (Test.fFld));
                                    Test.instanceCount -= 58627;
                                    i += ((int) (d1));
                                    i <<= ((int) (15594L));
                                    if (bFld)
                                        continue;

                                    try {
                                        i35 = i32 % 233;
                                        i34 = i33 / i32;
                                        i34 = 872521830 / i34;
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i32 -= ((int) (Test.instanceCount));
                                    Test.dFld -= byFld;
                                    Test.dArrFld[i33] /= Test.instanceCount | 1;
                                    i32 <<= ((int) (Test.instanceCount));
                                    i32 += byFld;
                                    iArr[i31 + 1] *= i31;
                                    iArr[i31 + 1] = ((int) (Test.fFld));
                                    i32 += i33 - Test.instanceCount;
                                    i35 = ((int) (2.335F));
                                    break;
                                case 20 :
                                    Test.dArrFld[i33 - 1] *= i31;
                                    if (bFld)
                                        continue;

                                    i34 += i33 * i33;
                                    iArr3[i31 + 1] += i35;
                                    i34 -= i35;
                                    iArr3[i31 + 1] = i33;
                                    i34 = ((int) (Test.fFld));
                                    Test.fFld += 6 + (i33 * i33);
                                    Test.instanceCount += i33 * i34;
                                    Test.instanceCount += i33 - i31;
                                    break;
                                case 21 :
                                    Test.instanceCount = -153;
                                    try {
                                        i34 = i35 / (-116);
                                        i35 = iArr[i31] % 1722988704;
                                        i32 = i % i34;
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i34 += (-3) + (i33 * i33);
                                    switch (((i31 % 10) * 5) + 76) {
                                        case 97 :
                                            d1 -= Test.fFld;
                                            Test.instanceCount += i33;
                                            Test.fFld *= i;
                                            Test.instanceCount = Test.instanceCount;
                                            Test.fFld = Test.fFld;
                                            i34 += i33;
                                            iArr3[i31] <<= i33;
                                            d1 -= i33;
                                            iArr[i31 - 1] = i35;
                                            if (false) {
                                                i32 = i35;
                                                byFld -= ((byte) (i33));
                                                i = ((int) (d1));
                                                iArr3[i31 + 1] *= ((int) (Test.instanceCount));
                                            } else if (bFld) {
                                                iArr[i33] -= 13;
                                            } else {
                                                i32 = i35;
                                            }
                                            break;
                                        case 102 :
                                        case 98 :
                                            Test.instanceCount += i33 | Test.sFld;
                                            break;
                                        case 112 :
                                            iArr[i33 - 1] = i32;
                                            break;
                                        case 87 :
                                        case 100 :
                                            Test.fFld -= i34;
                                            break;
                                        case 80 :
                                            i += i33 + i35;
                                            break;
                                        case 118 :
                                            Test.fFld = i32;
                                            break;
                                        case 77 :
                                            Test.instanceCount = Test.instanceCount;
                                            break;
                                        case 109 :
                                            i35 += 59;
                                    }
                                    break;
                            }
                        }
                    }
                    break;
                case 25 :
                    i35 += ((int) (Test.fFld));
                    break;
            }
        }
        FuzzerUtils.out.println((((("i d i31 = " + i) + ",") + Double.doubleToLongBits(d)) + ",") + i31);
        FuzzerUtils.out.println((((("i32 i33 i34 = " + i32) + ",") + i33) + ",") + i34);
        FuzzerUtils.out.println((((("i35 iArr iArr3 = " + i35) + ",") + FuzzerUtils.checkSum(iArr)) + ",") + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println((((("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount) + ",") + Float.floatToIntBits(Test.fFld)) + ",") + Test.sFld);
        FuzzerUtils.out.println((((("bFld byFld Test.dFld = " + (bFld ? 1 : 0)) + ",") + byFld) + ",") + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println((((("Test.dArrFld Test.lArrFld Test.byArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld))) + ",") + FuzzerUtils.checkSum(Test.lArrFld)) + ",") + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("sArrFld = " + FuzzerUtils.checkSum(sArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}
