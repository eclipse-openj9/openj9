// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 9179460246252289056L;

    public static int iFld = -178;

    public static byte byFld = 42;

    public static double dFld = 0.56317;

    public static int iFld1 = -39;

    public static short sFld = 4915;

    public static long[] lArrFld = new long[N];

    public static byte[] byArrFld = new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -13L);
        FuzzerUtils.init(Test.byArrFld, (byte) -47);
    }

    public static long vMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i1) {
        if (ax$8) {
            long ax$72 = lMeth_check_sum;
            long ax$73 = vMeth1_check_sum;
            try {
                if (lMeth_check_sum != vMeth1_check_sum)
                    ;
            } catch (Throwable ax$74) {
            } finally {
                lMeth_check_sum = ax$72;
                vMeth1_check_sum = ax$73;
            }
            return;
        }
        int i2 = 8, i3 = 2, i4 = 0, i5 = -27028, i6 = -64, i7 = -11, i8 = -95, i9 = -28506, i10 = 17096, i11 = 124, iArr[] = new int[N];
        boolean b = true;
        float f2 = -1.81F, f3 = -2.376F;
        short s = -27491;
        byte[] byArr = new byte[N];
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr, -2);
        FuzzerUtils.init(byArr, (byte) 53);
        FuzzerUtils.init(dArr, 119.74319);
        for (i2 = 4; i2 < 79; i2 += 3) {
            if (b) {
            }
            Test.instanceCount += (i2 - Test.byFld);
            if (i3 != 0) {
                vMeth1_check_sum += i1 + i2 + i3 + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + s + i10 + i11 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            }
            for (i4 = 1; i4 < 21; i4++) {
                iArr[i2 - 1] += i5;
                Test.dFld /= (i5 | 1);
                iArr[i4 - 1] += -12;
                i5 ^= Test.iFld1;
                iArr[i4 - 1] = (int) -45.125777;
                for (i6 = 1; i6 < 2; i6++) {
                    b = b;
                }
                Test.dFld = 1;
                Test.instanceCount *= i1;
                for (i8 = 1; i8 < 2; ++i8) {
                    f2 *= i3;
                    try {
                        i3 = (1967253346 / i6);
                        i7 = (-893745778 % Test.iFld1);
                        Test.iFld1 = (iArr[i2 + 1] / -2088337046);
                    } catch (ArithmeticException a_e) {
                    }
                    i7 = i6;
                    byArr[i8 - 1] >>= (byte) i5;
                    Test.instanceCount -= Test.instanceCount;
                    Test.byFld += (byte) (i8 * f3);
                    Test.dFld = i3;
                    Test.iFld <<= i3;
                    Test.iFld = Test.byFld;
                    i1 -= Test.iFld1;
                    if (b)
                        continue;
                    Test.instanceCount += Test.instanceCount;
                }
                if (true) {
                    dArr[i2] = s;
                    Test.instanceCount += (i4 - i3);
                    Test.iFld <<= i4;
                    Test.iFld = Test.iFld1;
                    try {
                        Test.iFld1 = (i5 / iArr[i2]);
                        Test.iFld1 = (Test.iFld % -68);
                        i5 = (-104 / Test.iFld1);
                    } catch (ArithmeticException a_e) {
                    }
                    for (i10 = 2; i10 > 1; --i10) {
                        i3 <<= (int) -167L;
                    }
                    if (Test.iFld1 != 0) {
                        vMeth1_check_sum += i1 + i2 + i3 + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + s + i10 + i11 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                    i9 = Test.iFld1;
                } else {
                    iArr[i2] = i4;
                    vMeth1_check_sum += i1 + i2 + i3 + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + s + i10 + i11 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + s + i10 + i11 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth() {
        float f1 = 65.905F, fArr[] = new float[N];
        int i12 = 46, i13 = 114, i14 = 12, i15 = -10, i16 = -152, i17 = -162, i18 = -25234, iArr1[] = new int[N];
        boolean b1 = true;
        long l = -152L;
        byte[] byArr1 = new byte[N];
        short[] sArr = new short[N];
        FuzzerUtils.init(iArr1, 11);
        FuzzerUtils.init(byArr1, (byte) 86);
        FuzzerUtils.init(sArr, (short) -31236);
        FuzzerUtils.init(fArr, 30.280F);
        f1 += (Test.iFld + Math.min(-Test.iFld, Test.iFld));
        {
            java.io.PrintStream ax$77 = System.out;
            java.io.PrintStream ax$78 = System.err;
            java.io.PrintStream ax$79 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$79);
            System.setErr(ax$79);
            try {
                ax$8 = true;
                for (int ax$75 = 0; ax$75 < 6119; ax$75 += 1) vMeth1(2314201);
            } catch (java.lang.Throwable ax$76) {
            } finally {
                ax$8 = false;
            }
            System.setOut(ax$77);
            System.setErr(ax$78);
        }
        vMeth1(Test.iFld1);
        iArr1[(-40229 >>> 1) % N] = Test.iFld;
        f1 = Test.iFld1;
        Test.byFld = (byte) 9682;
        iArr1[(Test.iFld >>> 1) % N] = (int) Test.instanceCount;
        Test.dFld -= -13920;
        Test.iFld -= Test.iFld1;
        i12 = 1;
        while (++i12 < 139) {
            b1 = b1;
            Test.lArrFld[i12] &= Test.iFld;
            Test.iFld = Test.iFld1;
            byArr1[i12 + 1] ^= Test.byFld;
            sArr[i12] *= (short) Test.iFld;
            i13 = Test.sFld;
            Test.iFld += i13;
            for (l = 1; l < 4; l++) {
                Test.instanceCount = -2L;
                Test.iFld = i14;
                for (i15 = 1; i15 < 2; i15++) {
                    iArr1[i12 - 1] *= Test.sFld;
                }
                iArr1 = iArr1;
                fArr[i12] -= i13;
                Test.iFld1 = -19907;
                {
                    java.io.PrintStream ax$0 = System.out;
                    java.io.PrintStream ax$1 = System.err;
                    java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$2);
                    System.setErr(ax$2);
                    {
                        boolean ax$7 = false;
                        for (int ax$6 = -855; ax$6 < 8634; ax$6 += 3) {
                            if (!ax$7) {
                                ax$7 = true;
                                {
                                    System.setOut(ax$0);
                                    System.setErr(ax$1);
                                    try {
                                        i16 = (222 / i15);
                                        i16 = (i15 / 31202);
                                        i13 = (i14 / i14);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    System.setOut(ax$2);
                                    System.setErr(ax$2);
                                }
                            }
                            int ax$4 = i18;
                            try {
                                boolean[] ax$3 = new boolean[] { true, true, false, true, false };
                                ax$3[i18] = false;
                            } catch (Throwable ax$5) {
                            } finally {
                                i18 = ax$4;
                            }
                        }
                    }
                    System.setOut(ax$0);
                    System.setErr(ax$1);
                }
                for (i17 = 1; i17 < 2; ++i17) {
                    Test.iFld1 = (int) Test.instanceCount;
                    Test.dFld = i16;
                    i13 += (i17 - Test.iFld);
                    switch((i12 % 2) + 69) {
                        case 69:
                            switch((int) (((l % 8) * 5) + 86)) {
                                case 105:
                                    Test.byFld += (byte) (((i17 * i17) + Test.sFld) - f1);
                                    Test.dFld -= i14;
                                    f1 += i17;
                                    try {
                                        iArr1[(int) (l - 1)] = (66 % Test.iFld);
                                        iArr1[i12] = (i17 / i18);
                                        Test.iFld1 = (19 / Test.iFld1);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i16 = (int) Test.instanceCount;
                                    i13 = (int) 43352L;
                                case 103:
                                    f1 *= i15;
                                case 107:
                                    b1 = b1;
                                    break;
                                case 113:
                                    Test.dFld = l;
                                case 97:
                                case 95:
                                    Test.lArrFld[i17 - 1] <<= Test.byFld;
                                    break;
                                case 117:
                                case 112:
                                    f1 += (-1.602F + (i17 * i17));
                                    break;
                            }
                        case 70:
                            Test.instanceCount = i17;
                            break;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i12 + (b1 ? 1 : 0) + i13 + l + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr1) + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth(float f, int i) {
        int i19 = -133, i20 = -14, i21 = -28658, i22 = -10298, i23 = 45724, i24 = -26519, i25 = 33949, i26 = -11377, i27 = -168, i28 = -9717, i29 = -1, i30 = -13, iArr2[] = new int[N];
        boolean b3 = true;
        long l1 = 147L;
        float[] fArr1 = new float[N];
        FuzzerUtils.init(fArr1, 113.302F);
        FuzzerUtils.init(iArr2, -106);
        i -= (int) (Double.longBitsToDouble(lMeth()) + i);
        Test.iFld = -29;
        f += -4185788843L;
        for (i19 = 1; 170 > i19; i19++) {
            Test.instanceCount <<= i;
            for (i21 = 1; i21 < 3; ++i21) {
                for (i23 = 1; i23 < 2; ++i23) {
                    if (i20 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f) + i + i19 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + i27 + i28 + i29 + i30 + (b3 ? 1 : 0) + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    Test.iFld1 += (int) (1959192794L + (i23 * i23));
                    fArr1[i19 + 1] = i19;
                }
                iArr2[i21] += (int) f;
            }
            Test.iFld -= (int) f;
            if (false)
                break;
            switch(((i >>> 1) % 4) + 27) {
                case 27:
                    for (i25 = 1; i25 < 3; i25++) {
                        f += (54417L + (i25 * i25));
                        i20 += i20;
                        switch(((i >>> 1) % 2) + 82) {
                            case 82:
                                Test.iFld += (int) f;
                                if (i25 != 0) {
                                    vMeth_check_sum += Float.floatToIntBits(f) + i + i19 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + i27 + i28 + i29 + i30 + (b3 ? 1 : 0) + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr2);
                                    return;
                                }
                                for (i27 = 2; 1 < i27; i27 -= 2) {
                                    boolean b2 = true;
                                    iArr2[i27] <<= (int) 2102254115L;
                                    f = Test.iFld;
                                    Test.iFld += (i27 | Test.instanceCount);
                                    Test.dFld = i24;
                                    if (b2)
                                        continue;
                                    i28 = (int) 178L;
                                    f += i19;
                                    Test.iFld1 -= i25;
                                    i26 -= (int) Test.instanceCount;
                                }
                                for (i29 = 1; i29 < 2; i29++) {
                                    i = (int) Test.dFld;
                                    f -= Test.iFld;
                                    if (b3)
                                        break;
                                    i26 >>= -50932;
                                    f += i29;
                                    if (i20 != 0) {
                                        vMeth_check_sum += Float.floatToIntBits(f) + i + i19 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + i27 + i28 + i29 + i30 + (b3 ? 1 : 0) + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr2);
                                        return;
                                    }
                                }
                                break;
                            case 83:
                                i20 <<= Test.iFld;
                                break;
                        }
                    }
                case 28:
                    Test.instanceCount = Test.sFld;
                case 29:
                    i30 += (((i19 * Test.instanceCount) + Test.instanceCount) - i25);
                    break;
                case 30:
                    l1 += (i19 | (long) f);
                    break;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + i19 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + i27 + i28 + i29 + i30 + (b3 ? 1 : 0) + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {
        float f4 = 0.826F;
        int i31 = 0, i32 = -86, i33 = -175, i34 = -122, i35 = -14, i36 = -29717, iArr3[] = new int[N];
        boolean b4 = true;
        FuzzerUtils.init(iArr3, -51989);
        vMeth(f4, Test.iFld);
        for (i31 = 4; 87 > i31; ++i31) {
            for (i33 = 61; 1 < i33; i33--) {
                for (i35 = 1; i35 < 2; i35 += 3) {
                    Test.byFld >>>= (byte) Test.instanceCount;
                    i34 += i35;
                    Test.sFld ^= (short) Test.iFld;
                    Test.lArrFld[i35 + 1] |= i32;
                    Test.iFld -= (int) 123.762F;
                    try {
                        iArr3[i35 + 1] = (i34 % i31);
                        i32 = (78 % iArr3[i35 + 1]);
                        iArr3[i31] = (i32 / Test.iFld);
                    } catch (ArithmeticException a_e) {
                    }
                    i34 |= i34;
                    i34 = (int) Test.instanceCount;
                    i34 %= (int) (i33 | 1);
                    Test.instanceCount = Test.iFld1;
                    i32 -= i36;
                    Test.iFld1 = i34;
                    switch((((i31 >>> 1) % 7) * 5) + 114) {
                        case 134:
                            Test.dFld *= f4;
                            f4 += i35;
                            Test.instanceCount |= Test.iFld;
                            switch((i35 % 6) + 120) {
                                case 120:
                                    if (b4)
                                        continue;
                                    i36 += i35;
                                    i32 = i31;
                                    i36 *= i33;
                                    iArr3[i31 - 1] *= (int) Test.instanceCount;
                                    i36 += (i35 + Test.sFld);
                                    break;
                                case 121:
                                    iArr3[i33] = (int) Test.instanceCount;
                                    f4 *= i31;
                                    break;
                                case 122:
                                    iArr3 = iArr3;
                                    Test.lArrFld[i35] -= (long) Test.dFld;
                                    i36 += i35;
                                    switch((i35 % 7) + 73) {
                                        case 73:
                                            Test.byFld = (byte) Test.dFld;
                                            i36 *= 138;
                                            if (false) {
                                                i32 |= i36;
                                                i36 += (-5611 + (i35 * i35));
                                                switch((i31 % 5) + 104) {
                                                    case 104:
                                                        f4 = -243;
                                                        i36 = (int) Test.instanceCount;
                                                        switch(((i33 % 10) * 5) + 107) {
                                                            case 154:
                                                                Test.byFld -= (byte) f4;
                                                            case 113:
                                                                Test.instanceCount += (((i35 * f4) + i35) - f4);
                                                                iArr3[i33] |= i32;
                                                                f4 += Test.instanceCount;
                                                                switch((i31 % 6) + 1) {
                                                                    case 1:
                                                                        iArr3[i33 - 1] -= i34;
                                                                        Test.instanceCount >>= Test.byFld;
                                                                        iArr3 = FuzzerUtils.int1array(N, (int) 8);
                                                                        break;
                                                                    case 2:
                                                                        i34 -= (int) Test.instanceCount;
                                                                        i36 *= i31;
                                                                        Test.iFld1 = i34;
                                                                        i32 = i32;
                                                                        Test.iFld1 += (i35 ^ Test.iFld);
                                                                        i32 = i36;
                                                                        i34 += (i35 + Test.iFld);
                                                                        i36 += (((i35 * Test.instanceCount) + i34) - f4);
                                                                        switch((i35 % 5) + 72) {
                                                                            case 72:
                                                                                i36 = i36;
                                                                                i34 += (((i35 * Test.iFld1) + f4) - i33);
                                                                                Test.instanceCount += Test.iFld1;
                                                                                iArr3[i31 - 1] /= -82;
                                                                                break;
                                                                            case 73:
                                                                            case 74:
                                                                                Test.dFld += Test.iFld1;
                                                                                Test.iFld += i35;
                                                                                Test.instanceCount += i33;
                                                                                try {
                                                                                    iArr3[i33 + 1] = (i32 / -341333878);
                                                                                    i34 = (1188764994 % i35);
                                                                                    i36 = (i34 / i33);
                                                                                } catch (ArithmeticException a_e) {
                                                                                }
                                                                                Test.dFld = 3304;
                                                                                Test.dFld = f4;
                                                                                iArr3[i35 - 1] = -11;
                                                                                Test.instanceCount = -1;
                                                                                i36 <<= 87;
                                                                                break;
                                                                            case 75:
                                                                                Test.iFld1 += (i35 * i35);
                                                                                i32 += i35;
                                                                                Test.instanceCount = Test.instanceCount;
                                                                                break;
                                                                            case 76:
                                                                                Test.dFld += Test.instanceCount;
                                                                                break;
                                                                            default:
                                                                                iArr3[i35] *= -2;
                                                                        }
                                                                        break;
                                                                    case 3:
                                                                        i34 += (int) Test.instanceCount;
                                                                        break;
                                                                    case 4:
                                                                        Test.instanceCount = i35;
                                                                        break;
                                                                    case 5:
                                                                        Test.instanceCount += (8442366603334680735L + (i35 * i35));
                                                                        break;
                                                                    case 6:
                                                                        Test.iFld1 *= i36;
                                                                }
                                                                break;
                                                            case 116:
                                                                Test.iFld -= (int) Test.instanceCount;
                                                                break;
                                                            case 109:
                                                                Test.iFld -= i36;
                                                            case 117:
                                                                b4 = true;
                                                                break;
                                                            case 153:
                                                                iArr3[i35] -= Test.byFld;
                                                                break;
                                                            case 155:
                                                                iArr3 = iArr3;
                                                                break;
                                                            case 143:
                                                                i34 = (int) -9116424162486784623L;
                                                                break;
                                                            case 131:
                                                            case 112:
                                                                if (true)
                                                                    continue;
                                                                break;
                                                        }
                                                    case 105:
                                                        f4 *= Test.instanceCount;
                                                    case 106:
                                                        i32 += (i35 | i31);
                                                    case 107:
                                                        i34 = i31;
                                                        break;
                                                    case 108:
                                                        Test.byArrFld[i35] = (byte) 5;
                                                        break;
                                                }
                                            }
                                            break;
                                        case 74:
                                            i36 <<= -12;
                                            break;
                                        case 75:
                                            iArr3[i31 - 1] += (int) Test.dFld;
                                        case 76:
                                            iArr3[i33] >>= (int) Test.instanceCount;
                                            break;
                                        case 77:
                                            Test.iFld = -936;
                                            break;
                                        case 78:
                                            i32 >>>= (int) 0L;
                                            break;
                                        case 79:
                                            Test.lArrFld[i33] -= i32;
                                        default:
                                            i32 = 33711;
                                    }
                                    break;
                                case 123:
                                    Test.iFld1 = (int) Test.dFld;
                                case 124:
                                    Test.iFld -= i35;
                                    break;
                                case 125:
                                    Test.iFld >>= Test.byFld;
                                    break;
                            }
                            break;
                        case 145:
                            i36 += (int) Test.dFld;
                        case 139:
                            f4 -= f4;
                            break;
                        case 126:
                            Test.iFld1 <<= i35;
                        case 136:
                            Test.dFld = i35;
                        case 148:
                            i36 >>= (int) 3863535656L;
                            break;
                        case 117:
                            Test.instanceCount = (long) f4;
                            break;
                    }
                }
            }
        }
        FuzzerUtils.out.println("f4 i31 i32 = " + Float.floatToIntBits(f4) + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 b4 iArr3 = " + i36 + "," + (b4 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld + "," + Test.byFld);
        FuzzerUtils.out.println("Test.dFld Test.iFld1 Test.sFld = " + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld1 + "," + Test.sFld);
        FuzzerUtils.out.println("Test.lArrFld Test.byArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$8 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  lMeth ->  lMeth vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
