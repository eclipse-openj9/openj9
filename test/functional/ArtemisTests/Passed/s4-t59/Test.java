// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.HashSet;
import java.text.AttributedCharacterIterator.Attribute;
import java.util.Set;
import java.math.BigDecimal;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -4L;

    public static int iFld = -49668;

    public static double dFld = -104.85907;

    public static int iFld1 = -47402;

    public static float fFld = 2.981F;

    public int iFld2 = 21357;

    public byte byFld = 98;

    public short sFld = -24755;

    public static long lFld = -3706L;

    public int iFld3 = -11;

    public static int[] iArrFld = new int[N];

    public static long[] lArrFld = new long[N];

    public static double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 128);
        FuzzerUtils.init(Test.lArrFld, 4859305987875481421L);
        FuzzerUtils.init(Test.dArrFld, -76.96324);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3) {
        if (ax$0) {
            try {
                java.util.Set ax$16 = new HashSet();
                ax$16.add(Attribute.LANGUAGE);
                ax$16.add(Attribute.READING);
            } catch (Throwable ax$17) {
            } finally {
            }
            return;
        }
        int i4 = -13, i5 = 103, i6 = 14, i7 = 7196, i8 = -41411, i9 = -43715, i10 = -12, i11 = 30334, iArr[][] = new int[N][N], iArr1[] = new int[N];
        short s1 = 12927;
        boolean b = false;
        float f = -2.662F;
        byte by = -92;
        double[] dArr1 = new double[N];
        FuzzerUtils.init(iArr, -182);
        FuzzerUtils.init(dArr1, 0.45852);
        FuzzerUtils.init(iArr1, 63765);
        i3 += Test.iFld;
        iArr[(i3 >>> 1) % N][(-5 >>> 1) % N] += -22169;
        i3 <<= Test.iFld;
        for (i4 = 5; 153 > i4; i4 += 2) {
            i5 = (int) Test.dFld;
            i5 = (int) -28.3249;
            Test.instanceCount = s1;
        }
        i6 = 100;
        while (--i6 > 0) {
            dArr1[i6 + 1] += 141;
            for (i7 = 1; i7 < 6; ++i7) {
                i3 -= i3;
                b = b;
                Test.instanceCount -= 32;
                f = Test.instanceCount;
                f -= i6;
                Test.iFld >>>= 50867;
                Test.dFld -= -4L;
            }
            Test.instanceCount += (i6 * i6);
            Test.dFld *= f;
            if (Test.iFld != 0) {
                vMeth1_check_sum += i3 + i4 + i5 + s1 + i6 + i7 + i8 + (b ? 1 : 0) + Float.floatToIntBits(f) + i9 + by + i10 + i11 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(iArr1);
                return;
            }
            if (b)
                break;
            Test.instanceCount -= i6;
            i3 >>= i4;
            Test.instanceCount = i8;
        }
        i9 = 1;
        do {
            switch(((i3 >>> 1) % 1) + 32) {
                case 32:
                    Test.instanceCount -= i3;
                    iArr[i9][i9] = i4;
                    Test.iFld >>>= -53;
                    s1 += by;
                    iArr1[i9 + 1] ^= i3;
                    for (i10 = i9; i10 < 4; i10++) {
                        by += (byte) i10;
                        i5 -= (int) Test.instanceCount;
                        i11 = s1;
                        if (Test.iFld1 != 0) {
                            vMeth1_check_sum += i3 + i4 + i5 + s1 + i6 + i7 + i8 + (b ? 1 : 0) + Float.floatToIntBits(f) + i9 + by + i10 + i11 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(iArr1);
                            return;
                        }
                        s1 /= (short) (Test.iFld1 | 1);
                    }
                    break;
                default:
                    if (i4 != 0) {
                        vMeth1_check_sum += i3 + i4 + i5 + s1 + i6 + i7 + i8 + (b ? 1 : 0) + Float.floatToIntBits(f) + i9 + by + i10 + i11 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
            }
        } while (++i9 < 147);
        vMeth1_check_sum += i3 + i4 + i5 + s1 + i6 + i7 + i8 + (b ? 1 : 0) + Float.floatToIntBits(f) + i9 + by + i10 + i11 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i2) {
        if (ax$23) {
            try {
                java.lang.String ax$24 = "4.401253513135038E+30";
                try {
                    BigDecimal d = new BigDecimal(ax$24);
                } catch (NumberFormatException e) {
                }
            } catch (Throwable ax$25) {
            } finally {
            }
            return;
        }
        short s = 29623;
        double d = 58.68849, dArr[][] = new double[N][N];
        int i12 = 229, i13 = 13, i14 = 10, i15 = 46665, i16 = -7799, i17 = -206, i18 = -58247, i19 = 6, i20 = -7, i21 = 54947, iArr2[] = new int[N];
        boolean b1 = true;
        long[] lArr = new long[N];
        FuzzerUtils.init(dArr, 0.59424);
        FuzzerUtils.init(lArr, -3L);
        FuzzerUtils.init(iArr2, -20942);
        s <<= (short) (Test.iFld--);
        d = ((dArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] * Test.instanceCount) + (Long.reverseBytes(Test.instanceCount) | lArr[(179 >>> 1) % N]));
        {
            java.io.PrintStream ax$20 = System.out;
            java.io.PrintStream ax$21 = System.err;
            java.io.PrintStream ax$22 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$22);
            System.setErr(ax$22);
            try {
                ax$0 = true;
                for (int ax$18 = 0; ax$18 < 9544; ax$18 += 1) vMeth1(-1970316395);
            } catch (java.lang.Throwable ax$19) {
            } finally {
                ax$0 = false;
            }
            System.setOut(ax$20);
            System.setErr(ax$21);
        }
        vMeth1(Test.iFld);
        Test.iFld1 %= (int) ((long) (Test.fFld) | 1);
        for (i12 = 4; i12 < 212; i12++) {
            if (b1)
                break;
            try {
                i2 = (-36 / i12);
                Test.iFld1 = (Test.iFld1 % 131);
                i2 = (Test.iFld1 % iArr2[i12]);
            } catch (ArithmeticException a_e) {
            }
            Test.instanceCount <<= -16;
        }
        i14 = 1;
        do {
            Test.iFld1 = 100;
            for (i15 = i14; i15 < 3; i15++) {
                switch(((i14 % 1) * 5) + 21) {
                    case 26:
                        Test.iArrFld = iArr2;
                        Test.fFld += (i15 + i16);
                        if (Test.iFld != 0) {
                            vMeth_check_sum += i2 + s + Double.doubleToLongBits(d) + i12 + i13 + (b1 ? 1 : 0) + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
                            return;
                        }
                    default:
                        Test.fFld /= (i14 | 1);
                        try {
                            Test.iArrFld[i14 + 1] = (Test.iArrFld[i15] / Test.iFld1);
                            Test.iFld1 = (i16 / 33758);
                            iArr2[i14] = (i14 / iArr2[i14 - 1]);
                        } catch (ArithmeticException a_e) {
                        }
                        for (i17 = 1; i17 < 1; ++i17) {
                            Test.iFld1 = i14;
                            i13 -= i12;
                            Test.iArrFld[i14 + 1] >>= i15;
                        }
                        i2 = i12;
                        Test.instanceCount += i17;
                        for (i19 = 1; 1 < i19; i19--) {
                            Test.iFld1 = 0;
                            Test.instanceCount <<= i21;
                            i13 = (int) -134L;
                            iArr2 = iArr2;
                            i16 &= i13;
                            i13 -= Test.iFld;
                            i2 += (i19 - Test.iFld);
                            switch(((i2 >>> 1) % 4) + 116) {
                                case 116:
                                    lArr = lArr;
                                    i16 = i18;
                                    Test.iFld = i20;
                                    i21 -= (int) Test.instanceCount;
                                    Test.instanceCount += -20234;
                                    break;
                                case 117:
                                    i16 = i18;
                                    break;
                                case 118:
                                    Test.instanceCount >>= Test.instanceCount;
                                    break;
                                case 119:
                                    Test.instanceCount -= 8471633223575988110L;
                                    break;
                                default:
                                    i16 -= Test.iFld1;
                            }
                        }
                }
            }
        } while (++i14 < 192);
        vMeth_check_sum += i2 + s + Double.doubleToLongBits(d) + i12 + i13 + (b1 ? 1 : 0) + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth() {
        if (ax$31) {
            try {
                int ax$34 = 0x55;
                int ax$33 = 0x7F;
                for (int ax$32 = 0; ax$32 < ax$34; ax$32++) {
                    ax$33 = (1486662021 - ax$33);
                }
            } catch (Throwable ax$35) {
            } finally {
            }
            return -630806879;
        }
        int i1 = 7, i22 = -244, i23 = 7, i24 = -127, i25 = -60, i26 = 1, i27 = 200;
        short s2 = -8282;
        long l = -3157234646L;
        boolean b2 = true;
        byte by1 = 79;
        i1 = 1;
        while (++i1 < 248) {
            Test.iFld += (((i1 * Test.instanceCount) + i1) - Test.instanceCount);
            Test.iFld *= (int) (Test.instanceCount++);
            {
                java.io.PrintStream ax$28 = System.out;
                java.io.PrintStream ax$29 = System.err;
                java.io.PrintStream ax$30 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$30);
                System.setErr(ax$30);
                try {
                    ax$23 = true;
                    for (int ax$26 = 0; ax$26 < 9688; ax$26 += 1) vMeth(370023409);
                } catch (java.lang.Throwable ax$27) {
                } finally {
                    ax$23 = false;
                }
                System.setOut(ax$28);
                System.setErr(ax$29);
            }
            vMeth(13);
            Test.iFld1 += (((i1 * s2) + Test.iFld1) - Test.iFld1);
            if (true) {
                Test.instanceCount = (long) Test.fFld;
                for (i22 = 1; i22 < 3; i22++) {
                    Test.iFld >>= (int) Test.instanceCount;
                    Test.instanceCount = i1;
                    s2 += (short) Test.iFld1;
                    Test.fFld = (float) -56.6393;
                }
                i23 += i1;
                try {
                    Test.iFld = (i22 % Test.iArrFld[i1 - 1]);
                    Test.iFld = (i23 / i22);
                    Test.iFld1 = (i23 / -30602);
                } catch (ArithmeticException a_e) {
                }
                if (b2) {
                    i23 = i23;
                    Test.iFld1 = i23;
                    Test.iFld1 += (-4 + (i1 * i1));
                    Test.iFld1 -= i1;
                    Test.iArrFld[i1] <<= (int) Test.instanceCount;
                    Test.lArrFld = FuzzerUtils.long1array(N, (long) 0L);
                    Test.instanceCount -= (long) Test.fFld;
                    Test.iFld1 *= (int) Test.fFld;
                    i24 = 1;
                    do {
                        switch((i1 % 1) + 26) {
                            case 26:
                                s2 += (short) (i24 * i23);
                                for (i25 = 1; i25 > 1; i25--) {
                                    i23 -= (int) Test.fFld;
                                    i26 *= (int) Test.fFld;
                                    Test.iFld1 += i23;
                                    switch((i1 % 3) + 110) {
                                        case 110:
                                            Test.instanceCount = i22;
                                            Test.iFld1 *= i1;
                                            Test.iFld1 += (i25 ^ (long) Test.fFld);
                                            Test.iFld -= (int) l;
                                            Test.instanceCount += i26;
                                            i26 += (((i25 * Test.iFld) + Test.fFld) - i27);
                                            break;
                                        case 111:
                                            Test.iFld = i24;
                                            break;
                                        case 112:
                                            Test.fFld += (-113 + (i25 * i25));
                                            break;
                                        default:
                                            Test.instanceCount += -21446;
                                    }
                                }
                        }
                    } while (++i24 < 3);
                } else {
                    by1 -= (byte) i1;
                }
            } else if (b2) {
                Test.dFld *= Test.iFld1;
            }
        }
        long meth_res = i1 + s2 + i22 + i23 + i24 + i25 + i26 + l + i27 + (b2 ? 1 : 0) + by1;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -107, i28 = 97, i29 = 90, i30 = 28035, i31 = -9, i32 = 133, i33 = 9, i34 = 8;
        long l1 = -1428303356931420269L, l2 = -4334791690123945371L;
        boolean b3 = true;
        i = iMeth();
        Test.dFld = Test.instanceCount;
        Test.lArrFld[(i >>> 1) % N] = Test.instanceCount;
        Test.iFld1 = (int) Test.instanceCount;
        switch(((i >>> 1) % 2) + 10) {
            case 10:
                for (l1 = 11; l1 < 180; ++l1) {
                    i ^= Test.iFld1;
                    Test.iFld -= (int) l1;
                    Test.fFld += l1;
                    Test.instanceCount = i;
                    Test.iArrFld[(int) (l1 + 1)] = 8;
                    Test.iArrFld = Test.iArrFld;
                    Test.dFld -= i28;
                    iFld2 <<= i;
                    for (i29 = 1; i29 < 30; ++i29) {
                        i28 += Test.iFld;
                        for (i31 = 1; i31 < 2; i31++) {
                            i <<= 107;
                            switch((((i28 >>> 1) % 4) * 5) + 114) {
                                case 116:
                                    i28 /= (int) (i28 | 1);
                                    Test.iArrFld[(int) (l1)] >>= byFld;
                                    Test.instanceCount ^= i32;
                                    Test.iFld += (i31 + i29);
                                    Test.iFld = (int) Test.instanceCount;
                                    i33 >>= (int) Test.instanceCount;
                                    i30 <<= i32;
                                    i28 <<= i33;
                                case 133:
                                    i32 += (i31 ^ sFld);
                                    Test.iArrFld[i31 - 1] = i30;
                                    Test.instanceCount = l1;
                                    Test.lArrFld[(int) (l1)] *= (long) Test.fFld;
                                    Test.iFld += iFld2;
                                    sFld = (short) 56690;
                                    byFld = (byte) l1;
                                    Test.iFld1 = Test.iFld1;
                                    i += (int) Test.dFld;
                                    Test.lArrFld[i29 - 1] += i;
                                    Test.instanceCount = -7;
                                    i30 = i32;
                                case 126:
                                    i33 += i30;
                                    Test.iArrFld = Test.iArrFld;
                                    Test.fFld = Test.instanceCount;
                                    Test.iArrFld[(int) (l1)] += Test.iFld;
                                    Test.instanceCount *= l1;
                                    break;
                                case 120:
                            }
                            Test.iArrFld[i29 - 1] = -5;
                            i -= i32;
                            switch((i31 % 2) + 106) {
                                case 106:
                                    Test.dFld *= Test.fFld;
                                    Test.iArrFld[i29] += i;
                                    Test.iArrFld[i31] = byFld;
                                    if (true) {
                                        i33 *= -1;
                                        switch(((i31 % 6) * 5) + 59) {
                                            case 64:
                                                Test.dArrFld[i29] /= ((long) (Test.fFld) | 1);
                                                if (true)
                                                    break;
                                                i33 <<= 28587;
                                                break;
                                            case 71:
                                                Test.lArrFld[i29 + 1] >>>= i33;
                                                Test.iArrFld[i29] *= i28;
                                                Test.instanceCount += -233L;
                                                Test.lArrFld[i29 - 1] = 0;
                                                Test.instanceCount += i;
                                                Test.iFld1 *= i;
                                                Test.instanceCount = Test.instanceCount;
                                                Test.iFld1 = i31;
                                                b3 = b3;
                                                try {
                                                    Test.iArrFld[(int) (l1)] = (i28 % i29);
                                                    i30 = (207 % Test.iArrFld[(int) (l1)]);
                                                    iFld2 = (-17822 / i30);
                                                } catch (ArithmeticException a_e) {
                                                }
                                                if (b3)
                                                    break;
                                                i33 = (int) Test.instanceCount;
                                                Test.lFld += Test.lFld;
                                                Test.iArrFld[i29 - 1] -= i34;
                                                Test.iFld = (int) -1.114221;
                                                break;
                                            case 74:
                                                Test.iArrFld[(int) (l1)] += i34;
                                                Test.iArrFld[i29] += (int) -70L;
                                                Test.instanceCount += (i31 | Test.instanceCount);
                                                i += (((i31 * i34) + i29) - i31);
                                            case 89:
                                                byFld = (byte) -231;
                                            case 60:
                                                i28 *= iFld2;
                                            case 82:
                                                iFld3 = (int) l2;
                                        }
                                    } else if (b3) {
                                        Test.iArrFld[i29 + 1] += (int) Test.fFld;
                                    } else {
                                        Test.fFld -= i;
                                    }
                                    break;
                                case 107:
                                    b3 = true;
                                default:
                                    i32 += (int) Test.dFld;
                            }
                        }
                    }
                }
            case 11:
                Test.fFld += l2;
                break;
            default:
                i34 >>>= i33;
        }
        FuzzerUtils.out.println("i l1 i28 = " + i + "," + l1 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 b3 = " + i32 + "," + i33 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("i34 l2 = " + i34 + "," + l2);
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iFld1 Test.fFld iFld2 = " + Test.iFld1 + "," + Float.floatToIntBits(Test.fFld) + "," + iFld2);
        FuzzerUtils.out.println("byFld sFld Test.lFld = " + byFld + "," + sFld + "," + Test.lFld);
        FuzzerUtils.out.println("iFld3 Test.iArrFld Test.lArrFld = " + iFld3 + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$41) {
            int ax$202 = iFld1;
            try {
                if (iFld1 > 0) {
                }
            } catch (Throwable ax$203) {
            } finally {
                iFld1 = ax$202;
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$23 = false;

    private static Boolean ax$31 = false;

    private static Boolean ax$41 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
