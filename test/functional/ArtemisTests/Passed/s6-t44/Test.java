// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Random;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -18502L;

    public static volatile double dFld = 56.127392;

    public static double dFld1 = 1.83885;

    public static short sFld = -29401;

    public static boolean bFld = true;

    public static float fFld = 127.622F;

    public static byte byFld = 115;

    public static volatile int iFld = 76;

    public static long lArrFld[] = new long[N];

    public static double dArrFld[] = new double[N];

    public static volatile byte byArrFld[] = new byte[N];

    public static int iArrFld[] = new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -80L);
        FuzzerUtils.init(Test.dArrFld, 117.106039);
        FuzzerUtils.init(Test.byArrFld, ((byte) (-59)));
        FuzzerUtils.init(Test.iArrFld, -250);
    }

    public static long sMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i3, short s, byte by) {
        int i4 = -12;
        int i5 = -2;
        int i6 = -1;
        int i7 = -142;
        int i8 = 90;
        int i9 = -57084;
        int i10 = 50367;
        int i11 = 9;
        int i12 = 186;
        int iArr[] = new int[N];
        long l = 11L;
        boolean b = false;
        float f1 = 1.521F;
        float fArr[] = new float[N];
        FuzzerUtils.init(iArr, -31594);
        FuzzerUtils.init(fArr, -22.51F);
        for (i4 = 4; i4 < 108; i4++) {
            try {
                i3 = (-62) / i3;
                i5 = i4 / i5;
                i5 = i4 % i4;
            } catch (ArithmeticException a_e) {
            }
            for (i6 = 5; i6 > 1; --i6) {
                for (i8 = 1; i8 < 2; i8 += 2) {
                    i5 >>= i9;
                    Test.dArrFld = FuzzerUtils.double1array(N, ((double) (8.65778)));
                    Test.instanceCount <<= i4;
                    i9 += (-99) + (i8 * i8);
                }
                for (l = 2; l > i4; l--) {
                    float f = 0.522F;
                    i7 -= ((int) (15383L));
                    i3 >>= 22;
                    i9 += (-74) + (l * l);
                    Test.instanceCount += ((l * f) + s) - i8;
                    i9 += i7;
                    b = b;
                    if (b)
                        continue;

                    iArr[i4] ^= i10;
                    if (b)
                        continue;

                }
                f1 += i6;
                f1 = i9;
                f1 += l;
                i9 = ((int) (f1));
                i10 += ((i6 * l) + l) - i6;
                Test.dFld += f1;
                try {
                    i3 = (-7) / i4;
                    i7 = i8 % 17384;
                    i10 = i10 / 238;
                } catch (ArithmeticException a_e) {
                }
            }
            switch (((i6 >>> 1) % 2) + 105) {
                case 105 :
                    by -= ((byte) (i7));
                    by = ((byte) (Test.dFld1));
                    i7 = i10;
                    i10 -= ((int) (-1797450644970003702L));
                    i9 *= by;
                    Test.instanceCount += i4 * by;
                    i7 ^= ((int) (4338851690721149994L));
                    switch ((i4 % 2) + 12) {
                        case 12 :
                            for (i11 = 5; i11 > 1; i11--) {
                                i7 ^= i8;
                                if (b)
                                    continue;

                            }
                            break;
                        case 13 :
                            Test.instanceCount = ((long) (f1));
                            break;
                        default :
                            fArr[i4 - 1] = -252;
                    }
                    break;
                case 106 :
                    by = ((byte) (Test.instanceCount));
                    break;
                default :
                    i3 += i4 ^ i7;
            }
        }
        long meth_res = (((((((((((((((i3 + s) + by) + i4) + i5) + i6) + i7) + i8) + i9) + l) + i10) + (b ? 1 : 0)) + Float.floatToIntBits(f1)) + i11) + i12) + FuzzerUtils.checkSum(iArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static int iMeth() {
        int i1 = 27304;
        int i2 = 10269;
        int i13 = -98;
        int i14 = -16849;
        int i15 = -11;
        int i16 = 9;
        byte by1 = 77;
        double d = 2.119113;
        double dArr[] = new double[N];
        float f2 = 2.814F;
        FuzzerUtils.init(dArr, 80.78982);
        for (i1 = 2; 110 > i1; ++i1) {
            i2 &= iMeth1(-13, Test.sFld, by1);
            i2 ^= i2;
            if (Test.bFld)
                break;

        }
        Test.dFld += i2;
        for (d = 195; d > 10; d--) {
            Test.instanceCount = 6;
            Test.byArrFld = FuzzerUtils.byte1array(N, ((byte) (62)));
            i13 *= ((int) (-7L));
            for (i14 = 1; i14 < 3; ++i14) {
                i2 = i14;
                i15 = i14;
                i13 = i14;
                i2 += 14 + (i14 * i14);
                i13 += i14 * i14;
                dArr[i14] -= i14;
                Test.instanceCount += i14;
                i2 = i14;
                i16 = 1;
                do {
                    f2 += ((long) (i16)) ^ ((long) (i1));
                    f2 += i13;
                    i13 = i1;
                    i13 >>= i1;
                    Test.sFld += ((short) (((i16 * i15) + Test.fFld) - i16));
                    switch ((i14 % 2) + 71) {
                        case 71 :
                            Test.instanceCount <<= -2;
                            f2 = i2;
                            Test.instanceCount = i14;
                            if (Test.bFld)
                                continue;

                            Test.instanceCount = i1;
                            Test.dFld -= i1;
                            Test.fFld = i14;
                            Test.fFld -= ((float) (d));
                            i15 >>= ((int) (Test.instanceCount));
                            Test.bFld = Test.bFld;
                            Test.fFld += Test.fFld;
                            i13 += i16 | i13;
                            break;
                        case 72 :
                            Test.instanceCount &= 21044;
                            break;
                        default :
                            i13 <<= i2;
                    }
                } while ((++i16) < 2 );
            }
        }
        long meth_res = ((((((((i1 + i2) + by1) + Double.doubleToLongBits(d)) + i13) + i14) + i15) + i16) + Float.floatToIntBits(f2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static short sMeth() {
        if (Test.ax$3) {
            final int ax$8 = Test.iFld;
            int[] ax$6 = new int[]{ 0xf1f2f3f4 };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$6[iFld] = iFld;
                iFld = (((iFld ^ 1) + 2) ^ 1) - 2;
                iFld = (((iFld ^ 4) + 8) ^ 4) - 8;
            } catch (Throwable ax$7) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iFld = ax$8;
            return ((short) (-1049));
        }
        int i = 20744;
        int i17 = -163;
        int i18 = -4;
        int i19 = 9;
        int i20 = -24180;
        int i21 = 5;
        int iArr1[][] = new int[N][N];
        long l2 = -8489176256023870051L;
        FuzzerUtils.init(iArr1, -64763);
        Test.lArrFld[(i >>> 1) % N] <<= iMeth();
        Test.dFld1 = Test.instanceCount;
        Test.instanceCount >>= i;
        for (long l1 : Test.lArrFld) {
            for (i17 = 2; 1 < i17; i17 -= 3) {
                Test.lArrFld[i17] += ((long) (Test.fFld));
                i += 13 + (i17 * i17);
                i /= ((int) (i18 | 1));
                Test.iArrFld[(i >>> 1) % N] <<= Test.byFld;
                i = i;
                l1 *= -50339;
                i = ((int) (l1));
                i += ((int) (l1));
                i18 -= i18;
                Test.instanceCount = i18;
                try {
                    i = i / i18;
                    i18 = i17 % 45004;
                    i = 864104324 / i18;
                } catch (ArithmeticException a_e) {
                }
                i18 -= ((int) (Test.dFld1));
            }
            i18 += -22623;
            for (i19 = 1; i19 < 2; ++i19) {
                i20 = 62799;
                Test.byFld = ((byte) (-8L));
                i18 >>= ((int) (l1));
                l1 = ((long) (Test.dFld));
            }
            try {
                i20 = i17 % 1261280745;
                Test.iArrFld[(9503 >>> 1) % N] = i18 % i18;
                i18 = iArr1[(i17 >>> 1) % N][((-32025) >>> 1) % N] / 29;
            } catch (ArithmeticException a_e) {
            }
            for (l2 = 1; l2 < 2; ++l2) {
                Test.dFld1 += i17;
                Test.instanceCount += l2;
                i18 -= i17;
                Test.lArrFld[((int) (l2))] -= i19;
                Test.iArrFld[((int) (l2))] -= i;
                i21 -= ((int) (Test.dFld));
                i21 = i20;
                i = i;
                Test.fFld += l2 * l2;
                if (i19 != 0) {
                }
                i *= i18;
                Test.fFld += ((float) (Test.dFld1));
            }
        }
        long meth_res = ((((((i + i17) + i18) + i19) + i20) + l2) + i21) + FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return ((short) (meth_res));
    }

    public void mainTest(String[] strArr1) {
        int i22 = 4703;
        int i23 = -221;
        int i24 = 24502;
        int i25 = 217;
        int i26 = -55960;
        int i27 = 9;
        int i28 = 39924;
        int i29 = 6;
        int i30 = 116;
        int i31 = 24872;
        long l3 = -4081045934L;
        long l4 = 58L;
        float fArr1[] = new float[N];
        double dArr1[][] = new double[N][N];
        FuzzerUtils.init(fArr1, -1.367F);
        FuzzerUtils.init(dArr1, 0.122828);
        {
            final float ax$22 = Test.fFld;
            final int ax$23 = i30;
            final int ax$24 = i24;
            try {
                Random ax$10 = new Random(69);
                String[] ax$12 = new String[]{ "s", "s", "s", "s" };
                StringBuilder ax$13 = new StringBuilder("foo");
                float[] ax$18 = new float[]{ 0.10279405F, 0.5162244F, 0.072558045F, 0.5794563F };
                for (int ax$9 = -816; ax$9 < (-816 + 5211); ax$9 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$14 = 0; ax$14 < i24; ax$14++) {
                            ax$13.append(ax$12[ax$10.nextInt(ax$12.length)]);
                        }
                    } catch (Throwable ax$15) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$3 = true;
                    sMeth();
                    Test.ax$3 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (long ax$19 = 0; ax$19 < i30; ax$19++) {
                            for (int ax$20 = 0; ax$20 < ax$18.length; ax$20 += 1) {
                                ax$18[ax$20] += fFld;
                            }
                        }
                    } catch (Throwable ax$21) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                Test.fFld = ax$22;
                i30 = ax$23;
                i24 = ax$24;
            }
        }
        Test.instanceCount += sMeth() + Test.iFld;
        for (i22 = 7; i22 < 249; ++i22) {
            Test.iFld -= -106;
            Test.lArrFld[i22 + 1] += i23;
            Test.instanceCount = Test.iFld;
            fArr1[i22] += i22;
            Test.lArrFld = Test.lArrFld;
            Test.iFld >>= i22;
            switch (((i22 % 6) * 5) + 66) {
                case 95 :
                case 71 :
                    i23 -= Test.byFld;
                    for (i24 = 21; i22 < i24; --i24) {
                        for (l3 = 1; l3 > 1; --l3) {
                            Test.instanceCount = i23;
                            Test.fFld += ((l3 * l3) + i22) - i25;
                            Test.fFld += l3 + Test.iFld;
                            Test.dArrFld[((int) (l3))] *= i23;
                            fArr1[i24 + 1] -= ((float) (0.62143));
                            Test.instanceCount <<= i25;
                            Test.iFld = i24;
                            Test.dFld -= i26;
                            Test.iArrFld[i22] = ((int) (Test.dFld1));
                            Test.instanceCount = i22;
                            i25 *= ((int) (1.237F));
                        }
                        Test.fFld += Test.instanceCount;
                        for (i27 = i22; i27 < 1; ++i27) {
                            Test.dFld1 -= Test.instanceCount;
                            i25 += i27;
                            Test.iFld = i23;
                            Test.instanceCount = i24;
                            Test.dFld1 += i25;
                            i28 *= i24;
                        }
                        for (i29 = 1; 1 > i29; ++i29) {
                            i25 += i23;
                            i26 = i22;
                            Test.instanceCount = -3673484568154094475L;
                            Test.iArrFld[i29 + 1] += Test.sFld;
                            Test.iArrFld[i22] *= -243;
                            i28 = -3;
                            Test.fFld += 57663;
                            if (Test.bFld) {
                                Test.instanceCount += ((i29 * i30) + i28) - i26;
                                Test.fFld = i26;
                                i30 += 32;
                                Test.dArrFld = dArr1[i22];
                                Test.dFld1 += i26;
                                {
                                    try {
                                        PropertyChangeListener[] ax$1 = new PropertyChangeListener[]{ null, null, null, null, null, null, null, null };
                                        for (int ax$0 = -694; ax$0 < (-694 + 19592); ax$0 += 1) {
                                            Test.AxOutputRedirectionHelper.redirect();
                                            try {
                                                if (ax$1.length != 4);
                                            } catch (Throwable ax$2) {
                                            } finally {
                                            }
                                            Test.AxOutputRedirectionHelper.recover();
                                        }
                                    } finally {
                                    }
                                }
                                Test.iArrFld[i29] = i22;
                                Test.instanceCount = i22;
                                if (Test.bFld) {
                                    i25 -= i31;
                                    try {
                                        Test.iArrFld[i24] = i26 % 131;
                                        i25 = 56 / Test.iFld;
                                        i30 = Test.iArrFld[i22] % (-15645);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i28 += (-7004) + (i29 * i29);
                                    Test.byFld += ((byte) (22384 + (i29 * i29)));
                                    l4 += i29;
                                    Test.lArrFld[i22 + 1] = Test.byFld;
                                    i25 ^= i31;
                                    i28 += i31;
                                } else {
                                    Test.lArrFld[i24] = -14;
                                    i31 = i31;
                                    if (Test.bFld)
                                        break;

                                    Test.instanceCount = i25;
                                    i23 += i29;
                                    fArr1[i22] = i27;
                                    i25 -= i28;
                                }
                                Test.fFld += i29 * Test.instanceCount;
                                switch ((i22 % 4) + 11) {
                                    case 11 :
                                        i31 = -22574;
                                    case 12 :
                                        l4 <<= i30;
                                        i23 += ((i29 * Test.instanceCount) + i22) - i27;
                                        switch (((i24 >>> 1) % 2) + 117) {
                                            case 117 :
                                            case 118 :
                                            default :
                                                if (true)
                                                    break;

                                                i30 = ((int) (-7316712329806809838L));
                                                Test.dFld1 = i28;
                                                Test.lArrFld[i22 + 1] = Test.iFld;
                                                Test.iArrFld[i29 + 1] += Test.iFld;
                                                try {
                                                    i31 = i26 / (-45);
                                                    i31 = Test.iArrFld[i29 + 1] % i26;
                                                    i25 = i25 / i24;
                                                } catch (ArithmeticException a_e) {
                                                }
                                        }
                                    case 13 :
                                        Test.byFld ^= ((byte) (l3));
                                    case 14 :
                                        Test.iArrFld[i29] = -56431;
                                        break;
                                    default :
                                        Test.iFld += i31;
                                }
                            } else if (true) {
                                i31 += ((i29 * i29) + i27) - i28;
                            } else {
                                Test.sFld -= Test.sFld;
                            }
                        }
                    }
                    break;
                case 90 :
                    i28 += i22 - Test.fFld;
                    break;
                case 96 :
                    i31 += i22;
                    break;
                case 86 :
                case 92 :
                    i28 >>= i27;
                    break;
            }
        }
        FuzzerUtils.out.println((((("i22 i23 i24 = " + i22) + ",") + i23) + ",") + i24);
        FuzzerUtils.out.println((((("i25 l3 i26 = " + i25) + ",") + l3) + ",") + i26);
        FuzzerUtils.out.println((((("i27 i28 i29 = " + i27) + ",") + i28) + ",") + i29);
        FuzzerUtils.out.println((((("i30 i31 l4 = " + i30) + ",") + i31) + ",") + l4);
        FuzzerUtils.out.println((("fArr1 dArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.dFld Test.dFld1 = " + Test.instanceCount) + ",") + Double.doubleToLongBits(Test.dFld)) + ",") + Double.doubleToLongBits(Test.dFld1));
        FuzzerUtils.out.println((((("Test.sFld Test.bFld Test.fFld = " + Test.sFld) + ",") + (Test.bFld ? 1 : 0)) + ",") + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println((((("Test.byFld Test.iFld Test.lArrFld = " + Test.byFld) + ",") + Test.iFld) + ",") + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println((((("Test.dArrFld Test.byArrFld Test.iArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld))) + ",") + FuzzerUtils.checkSum(Test.byArrFld)) + ",") + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$3 = false;
}
