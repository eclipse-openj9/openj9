// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 48244L;

    public static float fFld = -1.267F;

    public static short sFld = -28155;

    public boolean bFld = false;

    public int iFld = 2;

    public byte byFld = 35;

    public static int iFld1 = -134;

    public static int iFld2 = 0;

    public int iFld3 = 158;

    public int iFld4 = -7;

    public static long[] lArrFld = new long[N];

    public static boolean[] bArrFld = new boolean[N];

    public double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2319975810L);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth(double d) {
        int i4 = 58837, i5 = -41867, i6 = -13777, i7 = -1, i8 = 51463, i9 = -121, i10 = -43965, i11 = 5, i12 = 74, i13 = 10, i14 = 0, iArr[] = new int[N];
        byte by = 125, byArr[] = new byte[N];
        FuzzerUtils.init(iArr, -158);
        FuzzerUtils.init(byArr, (byte) -19);
        iArr[(i4 >>> 1) % N] = i4;
        i4 = i4;
        for (i5 = 5; 115 > i5; i5++) {
            i4 = (int) Test.instanceCount;
        }
        i4 *= i6;
        iArr[(i4 >>> 1) % N] &= i4;
        d = Test.instanceCount;
        for (i7 = 3; i7 < 188; ++i7) {
            Test.instanceCount = i7;
            iArr[i7 - 1] *= i7;
            for (i9 = 1; i9 < 3; i9++) {
                Test.instanceCount = i4;
            }
            d += Test.fFld;
            Test.instanceCount &= 4180865868L;
            i11 = 1;
            do {
                i12 += i8;
                Test.instanceCount += i11;
                iArr[i7] += (int) 75.41057;
                i12 = i9;
                i6 = i6;
                Test.fFld += Test.fFld;
                if (i10 != 0) {
                }
            } while (++i11 < 3);
            i10 *= i10;
            i10 = i4;
            i13 = 1;
            do {
                by += (byte) d;
                i14 = 1;
                while (++i14 < 1) {
                    iArr[i7 + 1] += (int) Test.instanceCount;
                    Test.instanceCount ^= i7;
                    byArr[i14 + 1] >>= (byte) i9;
                    i8 = (int) d;
                    by += (byte) (i14 | i9);
                    i12 = (int) -17346L;
                    i12 += -4068;
                    i4 += (int) Test.instanceCount;
                    iArr[i13] += (int) Test.instanceCount;
                    Test.instanceCount = (long) d;
                }
            } while (++i13 < 3);
        }
        long meth_res = Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + by + i14 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth1(int i3) {
        if (ax$0) {
            int ax$3 = iFld1;
            int ax$4 = i3;
            int ax$5 = iFld2;
            try {
                short[] ax$2 = new short[] { 20, 10, 0, -10, -20 };
                short[] ax$1 = new short[] { 20, 10, 0, -10, -20 };
                ax$2[i3] = (short) ((ax$1[i3] & iFld1) >>> iFld2);
            } catch (Throwable ax$6) {
            } finally {
                iFld1 = ax$3;
                i3 = ax$4;
                iFld2 = ax$5;
            }
            return;
        }
        double d1 = 0.5291;
        int i15 = 7, i16 = 3, i17 = 154, i18 = -11, i19 = -52775, i20 = -57498, i21 = 247, i22 = -12844, iArr1[][] = new int[N][N];
        byte by1 = -101;
        boolean b = true;
        short[] sArr = new short[N];
        FuzzerUtils.init(iArr1, 11);
        FuzzerUtils.init(sArr, (short) 318);
        Test.instanceCount -= (Math.abs(lMeth(d1)) * Test.instanceCount);
        Test.fFld = 72.18F;
        for (long l : Test.lArrFld) {
            i3 = i3;
            if (b) {
                Test.instanceCount = Test.instanceCount;
                for (i15 = 1; i15 < 2; i15++) {
                    l += i15;
                    i16 += (((i15 * i3) + i15) - Test.fFld);
                    switch((i15 % 6) + 51) {
                        case 51:
                            Test.instanceCount = -13;
                            Test.instanceCount -= i3;
                            try {
                                i16 = (20120 % i3);
                                i16 = (-1711019109 / i16);
                                i16 = (i3 / i3);
                            } catch (ArithmeticException a_e) {
                            }
                            d1 += i3;
                            for (i17 = 1; i17 < 2; ++i17) {
                                i3 ^= (int) Test.instanceCount;
                            }
                            by1 <<= (byte) i16;
                            try {
                                iArr1[i15 - 1][i15] = (iArr1[(i15 >>> 1) % N][i15 - 1] / i17);
                                iArr1[i15][i15 + 1] = (i3 / 158);
                                i3 = (i18 / 165);
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        case 52:
                            i16 -= i16;
                            Test.fFld -= i18;
                            i16 += (i15 * i15);
                            Test.sFld -= (short) Test.fFld;
                            iArr1[i15][i15 - 1] *= 4532;
                            i18 = i17;
                            l *= i16;
                            switch((i15 % 9) + 94) {
                                case 94:
                                    i19 = 1;
                                    do {
                                        i20 *= i3;
                                        Test.instanceCount >>= i20;
                                        iArr1[i15][i15] -= i17;
                                        sArr[i19 + 1] += (short) i3;
                                        d1 += by1;
                                        iArr1[i15][i19 + 1] = i17;
                                    } while (++i19 < 2);
                                    iArr1[i15 - 1][i15 - 1] -= i3;
                                    i21 = 1;
                                    while (++i21 < 2) {
                                        if (i19 != 0) {
                                            vMeth1_check_sum += i3 + Double.doubleToLongBits(d1) + i15 + i16 + i17 + i18 + by1 + i19 + i20 + i21 + (b ? 1 : 0) + i22 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
                                            return;
                                        }
                                        i3 *= i18;
                                    }
                                    break;
                                case 95:
                                    b = b;
                                    break;
                                case 96:
                                    i3 = (int) -49.483F;
                                    break;
                                case 97:
                                    i16 -= i21;
                                    break;
                                case 98:
                                    iArr1[i15][i15] = (int) Test.instanceCount;
                                case 99:
                                    iArr1[i15][i15 - 1] = (int) -6L;
                                    break;
                                case 100:
                                    Test.lArrFld[i15 + 1] += (long) 1.875F;
                                    break;
                                case 101:
                                    i16 += (((i15 * by1) + i18) - i22);
                                    break;
                                case 102:
                                    Test.fFld -= i18;
                                default:
                                    Test.instanceCount -= i16;
                            }
                            break;
                        case 53:
                            i16 = i18;
                            break;
                        case 54:
                            i16 -= i22;
                            break;
                        case 55:
                            Test.lArrFld[i15 + 1] += i15;
                            break;
                        case 56:
                            Test.instanceCount += i22;
                            break;
                    }
                }
            } else {
                iArr1[(i17 >>> 1) % N] = iArr1[(i17 >>> 1) % N];
            }
        }
        vMeth1_check_sum += i3 + Double.doubleToLongBits(d1) + i15 + i16 + i17 + i18 + by1 + i19 + i20 + i21 + (b ? 1 : 0) + i22 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
    }

    public void vMeth(int i2) {
        int i23 = -28554, i24 = 13, i25 = 62390, i26 = 15917, i27 = -37314, i28 = -5, iArr2[] = new int[N];
        long l1 = 2056645698764228607L;
        byte by2 = -112;
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr2, 227);
        FuzzerUtils.init(dArr, -122.78698);
        {
            java.io.PrintStream ax$9 = System.out;
            java.io.PrintStream ax$10 = System.err;
            java.io.PrintStream ax$11 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$11);
            System.setErr(ax$11);
            try {
                ax$0 = true;
                for (int ax$7 = 0; ax$7 < 8658; ax$7 += 1) vMeth1(-2017570039);
            } catch (java.lang.Throwable ax$8) {
            } finally {
                ax$0 = false;
            }
            System.setOut(ax$9);
            System.setErr(ax$10);
        }
        vMeth1(i2);
        i23 -= (int) Test.instanceCount;
        iArr2[(i23 >>> 1) % N] -= i2;
        try {
            i23 += (int) Test.instanceCount;
            i2 = i23;
            for (i24 = 8; i24 < 150; ++i24) {
                l1 = 1;
                do {
                    i23 -= i2;
                    if (false)
                        break;
                    for (i26 = 1; i26 < 1; i26++) {
                        double d2 = -78.70472;
                        try {
                            i25 = (i23 % -9060);
                            i2 = (iArr2[(int) (l1)] % -978);
                            i25 = (i24 / i27);
                        } catch (ArithmeticException a_e) {
                        }
                        i23 = i25;
                        dArr[i24] = i27;
                        iArr2[(int) (l1 - 1)] -= i26;
                        Test.instanceCount += (i26 * i26);
                        Test.instanceCount = (long) 77.89947;
                        i2 -= i23;
                        switch((int) (((l1 % 4) * 5) + 16)) {
                            case 21:
                                Test.instanceCount -= i26;
                                i25 = i26;
                                switch(((i24 >>> 1) % 1) + 46) {
                                    case 46:
                                        i27 += (int) d2;
                                        switch((i24 % 1) + 82) {
                                            case 82:
                                                switch(((i26 >>> 1) % 8) + 97) {
                                                    case 97:
                                                    case 98:
                                                        i27 += (int) 1.90992;
                                                        i27 += (((i26 * i25) + Test.instanceCount) - l1);
                                                        i25 -= (int) Test.instanceCount;
                                                        break;
                                                    case 99:
                                                        i25 = i24;
                                                        iArr2[i26] = i23;
                                                        i28 = -15327;
                                                        i23 = -33275;
                                                        dArr[i26 + 1] += i24;
                                                        by2 -= (byte) d2;
                                                        i28 = (int) l1;
                                                    case 100:
                                                        i28 -= (int) d2;
                                                        Test.fFld += i28;
                                                        break;
                                                    case 101:
                                                        iArr2[i24] <<= i24;
                                                        break;
                                                    case 102:
                                                        Test.sFld = (short) d2;
                                                        break;
                                                    case 103:
                                                        Test.bArrFld[i24] = false;
                                                        break;
                                                    case 104:
                                                        by2 *= (byte) i26;
                                                        break;
                                                    default:
                                                        i27 = i2;
                                                }
                                                break;
                                        }
                                        break;
                                }
                                break;
                            case 25:
                                Test.lArrFld = Test.lArrFld;
                                break;
                            case 30:
                                Test.fFld += (-10398 + (i26 * i26));
                                break;
                            case 31:
                                iArr2[i24 - 1] += Test.sFld;
                                break;
                        }
                    }
                } while (++l1 < 4);
            }
        } catch (NullPointerException exc1) {
            iArr2[(i24 >>> 1) % N] += i2;
        }
        vMeth_check_sum += i2 + i23 + i24 + i25 + l1 + i26 + i27 + i28 + by2 + FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {
        if (ax$12) {
            int ax$18 = iFld2;
            try {
                java.lang.Object ax$16 = "32180421428746.45";
                java.lang.Object ax$17 = "285.9055773891117";
                if (ax$16 == ax$17) {
                } else {
                    iFld2++;
                }
            } catch (Throwable ax$19) {
            } finally {
                iFld2 = ax$18;
            }
            return;
        }
        int i = -1, i1 = 182, i29 = 111, i30 = 239, i31 = 12, i32 = 8, iArr3[][] = new int[N][N];
        double d3 = -43.59668;
        float[] fArr = new float[N];
        short[] sArr1 = new short[N];
        FuzzerUtils.init(iArr3, 43989);
        FuzzerUtils.init(fArr, -2.255F);
        FuzzerUtils.init(sArr1, (short) 9142);
        for (i = 2; i < 140; i++) {
            vMeth(45189);
            i1 = (int) Test.fFld;
            i29 = 1;
            while (++i29 < 37) {
                Test.bArrFld[i] = bFld;
                i1 += (((i29 * i1) + Test.instanceCount) - Test.instanceCount);
                if (false)
                    continue;
                Test.instanceCount = (long) Test.fFld;
                i1 = (int) 118.224F;
                i1 -= i;
                switch(((54 >>> 1) % 2) + 41) {
                    case 41:
                    case 42:
                        i30 = 1;
                        do {
                            Test.lArrFld = Test.lArrFld;
                            if (bFld) {
                                i1 -= (int) -1.841F;
                                i1 += i30;
                                iArr3[i29 + 1][i29] = -24840;
                                iFld >>>= i29;
                            } else {
                                i1 = 60611;
                                i1 += (int) Test.instanceCount;
                                iArr3[i30][i - 1] -= iFld;
                                switch(((i30 % 6) * 5) + 38) {
                                    case 58:
                                        Test.instanceCount += (i30 * i30);
                                        break;
                                    case 64:
                                    case 44:
                                        Test.instanceCount = iFld;
                                        Test.fFld = i;
                                        Test.fFld %= (Test.instanceCount | 1);
                                        switch((i % 10) + 77) {
                                            case 77:
                                            case 78:
                                                d3 *= i30;
                                                switch((i30 % 10) + 89) {
                                                    case 89:
                                                        fArr[i29 - 1] += (float) d3;
                                                        try {
                                                            iFld = (i30 % i29);
                                                            i1 = (137 / iFld);
                                                            i1 = (i30 / i29);
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                        iArr3[i30 - 1] = iArr3[i30];
                                                        Test.fFld = iFld;
                                                        dArrFld[i] *= Test.instanceCount;
                                                        switch(((i30 % 8) * 5) + 17) {
                                                            case 47:
                                                                iArr3[i29][i] = iFld;
                                                                break;
                                                            case 51:
                                                                byFld ^= (byte) i1;
                                                                if (bFld) {
                                                                    i1 = (int) Test.instanceCount;
                                                                    Test.instanceCount >>>= i1;
                                                                } else {
                                                                    iArr3[i + 1][i] = (int) Test.instanceCount;
                                                                    i1 <<= (int) Test.instanceCount;
                                                                }
                                                                i1 = i;
                                                                Test.iFld1 *= 6646;
                                                                try {
                                                                    Test.iFld1 = (i29 % Test.iFld1);
                                                                    iFld = (-216 % i30);
                                                                    Test.iFld1 = (i30 / iArr3[i30 + 1][i30]);
                                                                } catch (ArithmeticException a_e) {
                                                                }
                                                                Test.instanceCount += (i30 | Test.instanceCount);
                                                                sArr1[i30 + 1] = (short) i1;
                                                                Test.fFld = -226;
                                                                Test.lArrFld[i30] += Test.iFld1;
                                                                Test.lArrFld[i] -= Test.iFld1;
                                                                iFld += (int) Test.instanceCount;
                                                                Test.iFld1 <<= 198;
                                                            case 21:
                                                                Test.iFld1 += (((i30 * Test.fFld) + Test.iFld1) - Test.instanceCount);
                                                                Test.lArrFld[i29] = i29;
                                                                iFld <<= i1;
                                                                Test.instanceCount = Test.instanceCount;
                                                                if (bFld)
                                                                    continue;
                                                                break;
                                                            case 34:
                                                                Test.sFld = (short) d3;
                                                                Test.iFld1 += (i30 * byFld);
                                                                try {
                                                                    Test.iFld1 = (i1 / Test.iFld1);
                                                                    i1 = (-44758 / i);
                                                                    Test.iFld2 = (Test.iFld2 / iFld);
                                                                } catch (ArithmeticException a_e) {
                                                                }
                                                                Test.instanceCount += (((i30 * Test.instanceCount) + Test.iFld2) - Test.iFld1);
                                                                iArr3[i29] = iArr3[i29 - 1];
                                                                iArr3[i29 + 1][i30 - 1] *= (int) Test.instanceCount;
                                                                break;
                                                            case 53:
                                                                Test.iFld2 <<= i30;
                                                                Test.instanceCount += -12;
                                                                Test.fFld += (((i30 * Test.instanceCount) + Test.iFld2) - i31);
                                                                switch(((i % 3) * 5) + 115) {
                                                                    case 117:
                                                                        iArr3 = iArr3;
                                                                        Test.iFld2 = i30;
                                                                        dArrFld[i29 - 1] += 4;
                                                                        Test.iFld1 ^= i30;
                                                                        Test.iFld2 -= 1;
                                                                        Test.iFld1 += byFld;
                                                                        i31 = iFld;
                                                                        Test.iFld2 >>>= (int) -23717L;
                                                                    case 120:
                                                                        Test.instanceCount += (((i30 * Test.fFld) + Test.sFld) - i1);
                                                                        break;
                                                                    case 121:
                                                                        Test.instanceCount |= byFld;
                                                                    default:
                                                                        Test.iFld1 <<= i29;
                                                                }
                                                                break;
                                                            case 25:
                                                                iFld3 += (((i30 * Test.instanceCount) + iFld3) - Test.fFld);
                                                                break;
                                                            case 46:
                                                            case 57:
                                                        }
                                                        break;
                                                    case 90:
                                                        Test.instanceCount *= 13;
                                                        break;
                                                    case 91:
                                                        iFld = (int) d3;
                                                        break;
                                                    case 92:
                                                        iFld = (int) Test.instanceCount;
                                                        break;
                                                    case 93:
                                                        iArr3 = iArr3;
                                                        break;
                                                    case 94:
                                                        Test.instanceCount = Test.instanceCount;
                                                        break;
                                                    case 95:
                                                        try {
                                                            i31 = (iArr3[i29][i29 + 1] / i30);
                                                            iArr3[i30 - 1][i30] = (29 % i1);
                                                            iFld3 = (iArr3[i][i + 1] / -245);
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                        break;
                                                    case 96:
                                                        Test.iFld1 <<= i1;
                                                    case 97:
                                                        fArr[i29] = 251L;
                                                        break;
                                                    case 98:
                                                        Test.fFld += ((long) i30 ^ (long) i32);
                                                        break;
                                                    default:
                                                        Test.iFld2 -= Test.iFld2;
                                                }
                                                break;
                                            case 79:
                                                Test.fFld += ((long) i30 | (long) iFld3);
                                            case 80:
                                            case 81:
                                                byFld = (byte) Test.fFld;
                                            case 82:
                                                Test.sFld -= (short) i32;
                                            case 83:
                                                iFld3 += i30;
                                            case 84:
                                                iArr3[i30 + 1][i] = i;
                                                break;
                                            case 85:
                                                iFld4 += (int) Test.instanceCount;
                                            case 86:
                                                Test.iFld2 = iFld4;
                                                break;
                                            default:
                                                i32 += (((i30 * Test.instanceCount) + Test.iFld1) - iFld4);
                                        }
                                    case 55:
                                        byFld -= (byte) iFld;
                                        break;
                                    case 66:
                                        try {
                                            i32 = (iArr3[i29][i29 + 1] / 55558);
                                            i1 = (-54003 / iArr3[i30][i29 + 1]);
                                            iFld3 = (iFld4 % 214);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        break;
                                    case 51:
                                        Test.iFld2 += (int) Test.fFld;
                                        break;
                                    default:
                                        iFld4 = -253;
                                }
                            }
                        } while (++i30 < 1);
                        break;
                }
            }
        }
        FuzzerUtils.out.println("i i1 i29 = " + i + "," + i1 + "," + i29);
        FuzzerUtils.out.println("i30 d3 i31 = " + i30 + "," + Double.doubleToLongBits(d3) + "," + i31);
        FuzzerUtils.out.println("i32 iArr3 fArr = " + i32 + "," + FuzzerUtils.checkSum(iArr3) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("sArr1 = " + FuzzerUtils.checkSum(sArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("bFld iFld byFld = " + (bFld ? 1 : 0) + "," + iFld + "," + byFld);
        FuzzerUtils.out.println("Test.iFld1 Test.iFld2 iFld3 = " + Test.iFld1 + "," + Test.iFld2 + "," + iFld3);
        FuzzerUtils.out.println("iFld4 Test.lArrFld Test.bArrFld = " + iFld4 + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$25) {
            int ax$49 = iFld1;
            int ax$50 = iFld2;
            try {
                java.lang.String ax$48 = "1.074149625024506E-14";
                if (iFld1 != (int) ax$48.charAt(iFld2)) {
                }
            } catch (Throwable ax$51) {
            } finally {
                iFld1 = ax$49;
                iFld2 = ax$50;
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$12 = false;

    private static Boolean ax$25 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
