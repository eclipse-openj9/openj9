// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.text.SimpleDateFormat;

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = 584004059L;

    public static float fFld = 1.30F;

    public static int iFld = 1;

    public static short sFld = -26843;

    public int iFld1 = 45111;

    public static volatile int[] iArrFld = new int[N];

    public static short[] sArrFld = new short[N];

    public static long[][] lArrFld = new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
        FuzzerUtils.init(Test.sArrFld, (short) -5731);
        FuzzerUtils.init(Test.lArrFld, 3112483310635154417L);
    }

    public static long lMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vMeth() {
        int i4 = 51879, i5 = -89, i6 = -24390, i7 = -28753, i8 = -104, i9 = 3, i10 = 0, i11 = 54976, i12 = 55604, i13 = 98, i14 = 157;
        float f2 = -39.706F;
        short s = -6139, sArr[] = new short[N];
        boolean b = true;
        long[] lArr = new long[N];
        double[] dArr = new double[N];
        FuzzerUtils.init(lArr, -1678531092L);
        FuzzerUtils.init(sArr, (short) 89);
        FuzzerUtils.init(dArr, 2.38570);
        lArr[(i4 >>> 1) % N] = i4;
        sArr[(i4 >>> 1) % N] *= (short) Test.instanceCount;
        for (double d : dArr) {
            if (b) {
                for (i5 = 1; i5 < 2; i5 += 2) {
                    lArr[i5] -= i5;
                    f2 = i7;
                    i4 <<= i5;
                    switch((i5 % 1) + 50) {
                        case 50:
                            for (i8 = 1; 2 > i8; ++i8) {
                                i7 = (int) Test.instanceCount;
                                i4 = i7;
                                i6 >>= -166;
                                Test.iArrFld[i8] >>= i6;
                                Test.fFld -= s;
                                i7 = 27326;
                            }
                            i4 += (((i5 * i8) + Test.instanceCount) - i5);
                            i4 -= i4;
                            if (i7 != 0) {
                                vMeth_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f2) + i7 + i8 + i9 + s + (b ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                                return;
                            }
                            i7 = i4;
                            lArr[i5 + 1] += (long) Test.fFld;
                            if (b)
                                continue;
                            Test.iArrFld[i5] = (int) Test.instanceCount;
                            i7 -= -11249;
                            if (b) {
                                Test.iFld = i8;
                                if (b)
                                    break;
                                for (i10 = 1; i10 < 2; i10++) {
                                    s -= (short) i12;
                                    Test.iArrFld = Test.iArrFld;
                                    dArr[i5 - 1] *= Test.instanceCount;
                                    i6 >>= (int) Test.instanceCount;
                                }
                                for (i13 = 1; i13 < 2; i13++) {
                                    Test.instanceCount |= 42372;
                                    i6 += i8;
                                    i11 = 31567;
                                    i12 -= (int) f2;
                                }
                            } else {
                                i14 *= i9;
                            }
                        default:
                            Test.iArrFld[i5] = i10;
                    }
                }
                vMeth_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f2) + i7 + i8 + i9 + s + (b ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            } else if (b) {
                s >>= (short) Test.iFld;
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f2) + i7 + i8 + i9 + s + (b ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(float f1, int i2, int i3) {
        float f3 = 0.510F, fArr[] = new float[N];
        int i15 = -10935, i16 = 14129, i17 = -42, i18 = -201, i19 = -191, i20 = 33872;
        boolean b1 = false, bArr[] = new boolean[N];
        double d1 = -79.21299;
        short s1 = 16364;
        byte by = 75;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(fArr, 2.297F);
        FuzzerUtils.init(lArr1, 3L);
        FuzzerUtils.init(bArr, true);
        vMeth();
        Test.iArrFld[(Test.iFld >>> 1) % N] += i2;
        for (f3 = 4; 185 > f3; f3++) {
            switch((int) ((f3 % 10) + 30)) {
                case 30:
                    if (b1)
                        break;
                    i2 = i15;
                    for (i16 = 1; 3 > i16; i16++) {
                        for (i18 = 1; i18 < 2; i18++) {
                            i3 = 30499;
                            d1 = 108;
                            i17 = i19;
                            s1 = (short) f1;
                        }
                        Test.iArrFld[(int) (f3 + 1)] = i15;
                        Test.iArrFld[(int) (f3 - 1)] = 27906;
                        i15 -= (int) 108.570F;
                        i17 = 9;
                        Test.iFld = -1;
                        switch((int) (((f3 % 8) * 5) + 74)) {
                            case 113:
                                i20 = 1;
                                do {
                                    s1 |= (short) Test.iFld;
                                    i15 <<= i15;
                                    i19 += i20;
                                    fArr[i20 + 1] += s1;
                                    Test.iArrFld[i20 - 1] += i3;
                                    Test.iArrFld[(int) (f3)] -= Test.iFld;
                                    i17 += (i20 | Test.instanceCount);
                                    fArr[i20] = -13691;
                                    {
                                        java.io.PrintStream ax$0 = System.out;
                                        java.io.PrintStream ax$1 = System.err;
                                        java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                            @Override
                                            public void write(int b) throws java.io.IOException {
                                                // DO NOTHING: DISCARD ALL OUTPUTS
                                            }
                                        });
                                        System.setOut(ax$2);
                                        System.setErr(ax$2);
                                        {
                                            boolean ax$4 = false;
                                            for (int ax$3 = -3952; ax$3 < 2931; ax$3 += 2) {
                                                if (!ax$4) {
                                                    ax$4 = true;
                                                    {
                                                        System.setOut(ax$0);
                                                        System.setErr(ax$1);
                                                        switch((i20 % 1) * 5) {
                                                            case 4:
                                                                d1 = i15;
                                                                lArr1[(int) (f3 - 1)] = i17;
                                                                i17 = s1;
                                                                i17 -= (int) d1;
                                                                Test.instanceCount = i15;
                                                                Test.instanceCount >>= i15;
                                                                break;
                                                        }
                                                        System.setOut(ax$2);
                                                        System.setErr(ax$2);
                                                    }
                                                }
                                            }
                                        }
                                        System.setOut(ax$0);
                                        System.setErr(ax$1);
                                    }
                                    i17 *= (int) Test.instanceCount;
                                    i19 &= i15;
                                    i2 += -12131;
                                } while (++i20 < 2);
                                break;
                            case 76:
                                Test.sArrFld[(int) (f3 + 1)] -= (short) -2734;
                                break;
                            case 82:
                                bArr[i16] = b1;
                                break;
                            case 78:
                                Test.instanceCount = s1;
                                break;
                            case 105:
                                i2 += -5;
                                break;
                            case 108:
                                if (Test.iFld != 0) {
                                }
                                break;
                            case 75:
                                i2 = (int) Test.fFld;
                                break;
                            case 95:
                                Test.iArrFld[i16] = 21;
                                break;
                        }
                    }
                    break;
                case 31:
                case 32:
                    i17 = (int) Test.instanceCount;
                case 33:
                    Test.iArrFld[(int) (f3)] <<= i20;
                    break;
                case 34:
                    Test.sArrFld[(int) (f3)] *= (short) -74.233F;
                    break;
                case 35:
                    by -= (byte) i19;
                    break;
                case 36:
                    i2 += (int) (((f3 * i19) + Test.instanceCount) - Test.instanceCount);
                    break;
                case 37:
                    i19 += (32435 + (f3 * f3));
                    break;
                case 38:
                    Test.iArrFld[(int) (f3)] %= (int) (i3 | 1);
                    break;
                case 39:
                    i15 -= i19;
                    break;
                default:
                    Test.iFld = by;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i2 + i3 + Float.floatToIntBits(f3) + i15 + (b1 ? 1 : 0) + i16 + i17 + i18 + i19 + Double.doubleToLongBits(d1) + s1 + i20 + by + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static long lMeth(int i, int i1) {
        float f = -124.923F, fArr1[] = new float[N];
        int i21 = 2230, i22 = -216, i23 = -61901, i24 = 96, i25 = -65, i26 = 8, i27 = -37064, i28 = -26, i29 = -61308, i30 = -13;
        long l = -1832521439595211880L, lArr2[] = new long[N];
        double d2 = 0.16902, dArr1[] = new double[N];
        byte by1 = 109, byArr[] = new byte[N];
        short s2 = -23632;
        FuzzerUtils.init(lArr2, 8L);
        FuzzerUtils.init(byArr, (byte) 22);
        FuzzerUtils.init(fArr1, -97.482F);
        FuzzerUtils.init(dArr1, -1.100818);
        f -= (((++Test.iArrFld[(i1 >>> 1) % N]) | Test.iArrFld[(i >>> 1) % N]) + (i + iMeth(Test.fFld, i, i1)));
        i >>= i1;
        for (i21 = 236; i21 > 12; i21 -= 2) {
            i >>= (int) l;
            i1 += (((i21 * i1) + i) - Test.instanceCount);
            for (i23 = 1; i23 < 5; i23++) {
                d2 -= i21;
                by1 += (byte) i24;
                Test.instanceCount += i23;
                if (i1 != 0) {
                }
                Test.fFld = (float) d2;
                lArr2[i21] <<= l;
                Test.iArrFld[i21 - 1] -= (int) d2;
                d2 += Test.fFld;
                for (i25 = 1; 2 > i25; ++i25) {
                    {
                        java.io.PrintStream ax$5 = System.out;
                        java.io.PrintStream ax$6 = System.err;
                        java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$7);
                        System.setErr(ax$7);
                        {
                            boolean ax$14 = false;
                            for (int ax$13 = -1653; ax$13 < 4617; ax$13 += 9) {
                                if (!ax$14) {
                                    ax$14 = true;
                                    {
                                        System.setOut(ax$5);
                                        System.setErr(ax$6);
                                        try {
                                            i1 = (i23 / i25);
                                            Test.iArrFld[i25 + 1] = (i1 % 3);
                                            Test.iArrFld[i25 - 1] = (Test.iArrFld[i25 - 1] / i26);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        System.setOut(ax$7);
                                        System.setErr(ax$7);
                                    }
                                }
                                int ax$11 = i29;
                                try {
                                    java.lang.String[] ax$9 = { "com..net", "com..", ".com", ".com." };
                                    boolean[] ax$10 = { true, false, false, false, false, false, false };
                                    java.text.SimpleDateFormat ax$8 = new SimpleDateFormat("yyyy");
                                    try {
                                        ax$8 = new SimpleDateFormat(ax$9[i29]);
                                        if (!ax$10[i29])
                                            System.out.print("   <-- error!");
                                    } catch (Exception exception) {
                                    }
                                } catch (Throwable ax$12) {
                                } finally {
                                    i29 = ax$11;
                                }
                            }
                        }
                        System.setOut(ax$5);
                        System.setErr(ax$6);
                    }
                    i22 += (-26722 + (i25 * i25));
                    i26 -= (int) f;
                    by1 = (byte) -10038;
                    byArr[i25] = (byte) -3125;
                    fArr1 = fArr1;
                }
                l += -3L;
                dArr1 = FuzzerUtils.double1array(N, (double) 0.119534);
                d2 *= i25;
                dArr1[i23] += Test.instanceCount;
                Test.fFld += i25;
                i22 = Test.iFld;
            }
            i24 = (int) l;
            for (i27 = 5; i27 > 1; i27 -= 3) {
                i24 = -5;
                Test.iArrFld[i21] *= i21;
                s2 -= (short) i26;
                for (i29 = 1; i29 < 5; ++i29) {
                    Test.instanceCount *= Test.instanceCount;
                    i26 >>>= (int) Test.instanceCount;
                    by1 -= (byte) i24;
                    Test.instanceCount += -182L;
                }
            }
        }
        long meth_res = i + i1 + Float.floatToIntBits(f) + i21 + i22 + l + i23 + i24 + Double.doubleToLongBits(d2) + by1 + i25 + i26 + i27 + i28 + s2 + i29 + i30 + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i31 = -4, i32 = -252, i33 = -10, i34 = 29950, i35 = 239, i36 = 116, i37 = -228, i38 = 14, i39 = -11, i40 = 57703, i41 = -7;
        boolean b2 = true;
        byte by2 = 50;
        double d3 = 1.104326, d5 = -40.121346;
        float[] fArr2 = new float[N];
        FuzzerUtils.init(fArr2, 1.48F);
        if (b2) {
            Test.instanceCount += ((lMeth(Test.iFld, Test.iFld) + Test.iFld) * Test.iFld);
        } else if (b2) {
            Test.instanceCount -= Test.iFld;
            i31 = 1;
            while (++i31 < 163) {
                Test.iFld *= Test.iFld;
                Test.iFld += (int) 83L;
            }
            b2 = b2;
            Test.instanceCount &= Test.iFld;
            Test.iFld = (int) Test.instanceCount;
            i32 = 172;
            while (--i32 > 0) {
                by2 = (byte) i32;
                Test.instanceCount += i32;
                by2 = (byte) -210;
                Test.instanceCount *= -763;
            }
            by2 += (byte) Test.fFld;
            Test.fFld = -11;
            for (i33 = 120; i33 > 5; --i33) {
                Test.iFld = i33;
                i34 += (i33 * i33);
                i35 = 1;
                while (++i35 < 44) {
                    if (true) {
                        for (d3 = 1; d3 < 1; ++d3) {
                            long l1 = -1L;
                            l1 = -46119;
                            Test.iArrFld = FuzzerUtils.int1array(N, (int) 59632);
                            i36 = 21612;
                            i34 += (int) (((d3 * Test.fFld) + i35) - Test.fFld);
                            Test.fFld = l1;
                            Test.iArrFld[i35] = i34;
                            Test.fFld *= i37;
                            by2 -= (byte) -21490;
                            i37 += (int) (d3 * d3);
                        }
                        Test.sArrFld[i33] += (short) Test.instanceCount;
                        by2 -= (byte) d3;
                        for (i38 = 1; 1 > i38; ++i38) {
                            double d4 = 88.76438;
                            Test.fFld *= i34;
                            switch(((13 >>> 1) % 3) + 11) {
                                case 11:
                                    if (b2) {
                                        Test.fFld += (i38 - Test.iFld);
                                        i39 -= i35;
                                        try {
                                            i39 = (-832343311 / Test.iFld);
                                            i39 = (-140 % i36);
                                            i37 = (-48795 % Test.iArrFld[i38 + 1]);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        Test.iFld += (i38 + i33);
                                        i36 += (((i38 * i33) + Test.instanceCount) - i39);
                                        Test.sFld -= (short) Test.instanceCount;
                                        i36 <<= Test.sFld;
                                        d4 = i32;
                                        i37 += i36;
                                        i36 -= i34;
                                        Test.instanceCount = (long) Test.fFld;
                                    } else {
                                        Test.lArrFld[i38][i38] = Test.instanceCount;
                                        Test.instanceCount -= (long) Test.fFld;
                                    }
                                    iFld1 += i38;
                                    break;
                                case 12:
                                    Test.iArrFld[i35] ^= i36;
                                    Test.instanceCount += (-7 + (i38 * i38));
                                    Test.iArrFld[i38 + 1] -= (int) Test.fFld;
                                    Test.fFld += Test.instanceCount;
                                    i37 += i38;
                                    i34 += i38;
                                    if (b2)
                                        continue;
                                    break;
                                case 13:
                                    Test.instanceCount = (long) Test.fFld;
                                    Test.fFld -= Test.iFld;
                                    Test.iFld += Test.iFld;
                                    break;
                            }
                            i39 += i37;
                            fArr2[i35] += by2;
                            Test.fFld = i34;
                            i36 = Test.iFld;
                            i34 = i39;
                        }
                        d5 -= i33;
                    } else if (b2) {
                        i37 += 56944;
                        i37 -= i31;
                        iFld1 = -8;
                        for (i40 = 1; 1 > i40; ++i40) {
                            i37 = i38;
                            i36 >>= i40;
                            Test.instanceCount -= i31;
                        }
                        Test.instanceCount *= i31;
                    } else {
                        Test.fFld *= i31;
                    }
                }
            }
        } else {
            Test.instanceCount *= 13L;
        }
        FuzzerUtils.out.println("i31 b2 i32 = " + i31 + "," + (b2 ? 1 : 0) + "," + i32);
        FuzzerUtils.out.println("by2 i33 i34 = " + by2 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 d3 i36 = " + i35 + "," + Double.doubleToLongBits(d3) + "," + i36);
        FuzzerUtils.out.println("i37 i38 i39 = " + i37 + "," + i38 + "," + i39);
        FuzzerUtils.out.println("d5 i40 i41 = " + Double.doubleToLongBits(d5) + "," + i40 + "," + i41);
        FuzzerUtils.out.println("fArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld iFld1 Test.iArrFld = " + Test.sFld + "," + iFld1 + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.sArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
            {
                java.io.PrintStream ax$20 = System.out;
                java.io.PrintStream ax$21 = System.err;
                java.io.PrintStream ax$22 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$22);
                System.setErr(ax$22);
                try {
                    for (int ax$18 = -4441; ax$18 < 1217; ax$18 += 1) {
                        try {
                        } catch (Throwable ax$17) {
                        } finally {
                        }
                    }
                } catch (Throwable ax$19) {
                }
                System.setOut(ax$20);
                System.setErr(ax$21);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  lMeth ->  lMeth mainTest
// DEBUG  iMeth ->  iMeth lMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
