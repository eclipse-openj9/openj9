// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 3040371016034498848L;

    public volatile short sFld = -23539;

    public static short sFld1 = -617;

    public double dFld = 66.106009;

    public float fFld = 21.376F;

    public int iFld = -123;

    public static volatile int[][] iArrFld = new int[N][N];

    public float[] fArrFld = new float[N];

    public static long[][] lArrFld = new long[N][N];

    public byte[][] byArrFld = new byte[N][N];

    public static boolean[] bArrFld = new boolean[N];

    public static double[][] dArrFld = new double[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -23514);
        FuzzerUtils.init(Test.lArrFld, -4212210124L);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.dArrFld, -2.59453);
    }

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vMeth() {
        int i4 = 20, i5 = -6, i6 = -11, i7 = 13, i8 = 37104, i9 = -52141, i10 = -174;
        float f = 15.428F;
        double d = 85.92037;
        short[] sArr = new short[N];
        byte[] byArr = new byte[N];
        long[][] lArr = new long[N][N];
        FuzzerUtils.init(sArr, (short) -2849);
        FuzzerUtils.init(byArr, (byte) -79);
        FuzzerUtils.init(lArr, 1L);
        for (i4 = 7; i4 < 178; ++i4) {
            f %= (i5 | 1);
            i5 -= -144;
        }
        Test.iArrFld[(i5 >>> 1) % N][(i4 >>> 1) % N] = 7;
        for (i6 = 15; i6 < 242; i6++) {
            for (i8 = 1; i8 < 3; ++i8) {
                boolean b = true;
                i9 = i5;
                switch((((i9 >>> 1) % 7) * 5) + 19) {
                    case 51:
                        i10 = 1;
                        while (++i10 < 2) {
                            int i11 = 44451;
                            i5 += i10;
                            i9 += (29 + (i10 * i10));
                            d += Test.instanceCount;
                            Test.instanceCount += (0 + (i10 * i10));
                            byArr[i8 + 1] = (byte) Test.instanceCount;
                            f -= i8;
                            if (i7 != 0) {
                                vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
                                return;
                            }
                            i5 = (int) d;
                            try {
                                i5 = (i10 / -32871);
                                Test.iArrFld[i10 - 1][i8] = (i9 / Test.iArrFld[i6 + 1][i6 + 1]);
                                i9 = (325357367 % i6);
                            } catch (ArithmeticException a_e) {
                            }
                            i5 += i10;
                            try {
                                i7 = (-57495 / i6);
                                Test.iArrFld[i6 - 1][i6] = (i5 % Test.iArrFld[i10][i8]);
                                Test.iArrFld[i10 + 1][i8 - 1] = (Test.iArrFld[i10 - 1][i8 + 1] / -21134);
                            } catch (ArithmeticException a_e) {
                            }
                            i11 |= i8;
                        }
                        i7 >>= i5;
                        i9 -= i8;
                        byArr = FuzzerUtils.byte1array(N, (byte) -73);
                        i7 += i6;
                        if (i7 != 0) {
                            vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
                            return;
                        }
                        d += i9;
                        i7 += i9;
                        lArr = lArr;
                        switch((i8 % 9) * 5) {
                            case 45:
                                switch(((i8 >>> 1) % 2) + 97) {
                                    case 97:
                                        Test.instanceCount &= Test.instanceCount;
                                        i5 -= (int) Test.instanceCount;
                                        Test.iArrFld[(i9 >>> 1) % N][i8 - 1] = i9;
                                        i5 = (int) Test.instanceCount;
                                        i5 += -141;
                                        i9 *= (int) Test.instanceCount;
                                        break;
                                    case 98:
                                        i9 = (int) Test.instanceCount;
                                        break;
                                }
                                break;
                            case 8:
                                i5 = i8;
                                break;
                            case 20:
                                i7 += (((i8 * i9) + f) - i4);
                                break;
                            case 44:
                                f = Test.instanceCount;
                                break;
                            case 37:
                                lArr[i8][i6 - 1] ^= i6;
                            case 42:
                                Test.sFld1 >>= (short) i4;
                                break;
                            case 29:
                                {
                                    java.io.PrintStream ax$0 = System.out;
                                    java.io.PrintStream ax$1 = System.err;
                                    java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                        @Override
                                        public void write(int b) throws java.io.IOException {
                                            // DO NOTHING: DISCARD ALL OUTPUTS
                                        }
                                    });
                                    System.setOut(ax$2);
                                    System.setErr(ax$2);
                                    {
                                        boolean ax$4 = false;
                                        for (int ax$3 = -4941; ax$3 < 4880; ax$3 += 2) {
                                            if (!ax$4) {
                                                ax$4 = true;
                                                {
                                                    System.setOut(ax$0);
                                                    System.setErr(ax$1);
                                                    try {
                                                        Test.iArrFld[i8][i8] = (-61529 % i7);
                                                        i9 = (Test.iArrFld[i6][i8] % -29073);
                                                        i5 = (i9 % 1764570944);
                                                    } catch (ArithmeticException a_e) {
                                                    }
                                                    System.setOut(ax$2);
                                                    System.setErr(ax$2);
                                                }
                                            }
                                        }
                                    }
                                    System.setOut(ax$0);
                                    System.setErr(ax$1);
                                }
                                break;
                            case 2:
                                if (i7 != 0) {
                                    vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
                                    return;
                                }
                            case 19:
                                if (b)
                                    break;
                                break;
                            default:
                                Test.iArrFld[i6 - 1][i8] = i7;
                        }
                        break;
                    case 27:
                        Test.iArrFld[i8][i6 - 1] <<= i10;
                        break;
                    case 31:
                        i7 >>= -53;
                        break;
                    case 53:
                    case 39:
                        Test.instanceCount += i8;
                    case 47:
                        d = i6;
                        break;
                    case 42:
                }
            }
        }
        vMeth_check_sum += i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
    }

    public int iMeth1(int i3) {
        if (ax$5) {
            try {
                char[] ax$9 = new char[100];
                char[] ax$8 = new char[] { (char) 0xF3F4 };
                int ax$6 = Math.min(ax$8.length, ax$9.length);
                for (int ax$7 = 0; ax$7 < ax$6; ax$7++) {
                    ax$8[ax$7] = (char) (((ax$9[ax$7] & 0xffff) + 0xffff) >>> 1);
                }
            } catch (Throwable ax$10) {
            } finally {
            }
            return 1199327692;
        }
        int i12 = 165, i13 = -171, i14 = 3, i15 = -11, i16 = 31, i17 = 1, i18 = 53902, i19 = 11, i20 = -61, i21 = -22096, i22 = -34648;
        double d1 = 2.54195;
        float f1 = 96.650F, f2 = 106.277F;
        boolean b1 = true;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(lArr1, -36171L);
        Test.instanceCount *= (long) ((-Test.iArrFld[(i3 >>> 1) % N][(i3 >>> 1) % N]) + (-(--fArrFld[(i3 >>> 1) % N])));
        i3 /= 26;
        vMeth();
        for (i12 = 15; i12 < 248; ++i12) {
            if (i3 != 0) {
            }
        }
        for (i14 = 3; i14 < 79; ++i14) {
            d1 -= i12;
        }
        Test.iArrFld[(177 >>> 1) % N][(-7 >>> 1) % N] -= i14;
        i13 |= -3;
        for (f1 = 94; f1 > 4; f1 -= 3) {
            for (i17 = 17; 1 < i17; --i17) {
                double d2 = 2.53173;
                i3 = 24854;
                i18 = i17;
                if (b1) {
                    if (i12 != 0) {
                    }
                    i16 += i17;
                    d2 -= i18;
                    Test.instanceCount = Test.sFld1;
                    i3 *= -140;
                    for (i19 = 1; i19 < 2; i19++) {
                        i3 = i20;
                        i18 += (i19 + Test.instanceCount);
                        lArr1[i17 - 1] += i19;
                        d2 -= -7;
                        lArr1[i17 - 1] = -1;
                    }
                    i20 -= (int) -8L;
                    switch((int) ((f1 % 2) + 31)) {
                        case 31:
                            Test.instanceCount -= (long) -49.643F;
                            for (i21 = 1; i21 < 2; ++i21) {
                                b1 = b1;
                                if (b1) {
                                    i13 = (int) -158L;
                                    Test.iArrFld[(int) (f1)][(int) (f1 - 1)] = (int) f1;
                                    i20 = i17;
                                    lArr1[i21 + 1] = (long) f1;
                                    sFld <<= (short) i19;
                                    f2 = Test.instanceCount;
                                } else {
                                    Test.iArrFld = Test.iArrFld;
                                }
                            }
                            break;
                        case 32:
                            i16 ^= i19;
                            break;
                        default:
                            i22 += (i17 ^ i14);
                    }
                }
            }
        }
        long meth_res = i3 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i16 + i17 + i18 + i19 + i20 + i21 + i22 + (b1 ? 1 : 0) + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public int iMeth() {
        int i = 10980, i1 = 50588, i2 = 30558, i23 = -10, i24 = -6, i25 = -43, i26 = -64209;
        byte by = 120;
        double d3 = -1.98750, dArr[] = new double[N];
        long[] lArr2[] = new long[N][N], lArr3 = new long[N];
        FuzzerUtils.init(lArr2, 33581L);
        FuzzerUtils.init(lArr3, 6648138988120661844L);
        FuzzerUtils.init(dArr, -92.108690);
        for (i = 9; i < 168; i++) {
            i1 >>>= (Test.iArrFld[i - 1][i] - sFld);
            i2 = (int) ((Test.instanceCount = (-(Test.instanceCount * 14895))) * (i1 + (i2 - i)));
            i2 += (int) (iMeth1(i) + dFld);
            for (i23 = i; i23 < 4; i23++) {
                i24 = i1;
                i2 -= -1;
                Test.instanceCount = sFld;
                i2 = -784;
                Test.instanceCount += i23;
                i24 = i;
                i1 >>= i23;
                i2 = i;
                i24 <<= (int) Test.instanceCount;
                i1 = i23;
                Test.iArrFld[i - 1][i + 1] = i2;
                if (true)
                    continue;
                i2 += (13269 + (i23 * i23));
                fArrFld[i] += i24;
            }
            i2 *= (int) dFld;
            lArr2[i][(i2 >>> 1) % N] = sFld;
            switch((i % 6) + 120) {
                case 120:
                    Test.iArrFld[i + 1][i + 1] >>= i23;
                    i1 = Test.sFld1;
                    i24 <<= i;
                    by = (byte) i1;
                    for (d3 = 4; d3 > i; d3--) {
                        i25 *= 54544;
                    }
                    fFld *= i;
                    i26 = 1;
                    do {
                        Test.instanceCount -= Test.instanceCount;
                        dFld -= Test.instanceCount;
                        Test.iArrFld[i26][i] <<= i25;
                        i24 = (int) dFld;
                        Test.instanceCount = i1;
                        fFld -= -4;
                        lArr3 = lArr3;
                    } while (++i26 < 4);
                    break;
                case 121:
                    i2 *= i1;
                    break;
                case 122:
                    i2 *= i24;
                case 123:
                    i24 >>= (int) Test.instanceCount;
                    break;
                case 124:
                    dFld = i1;
                case 125:
                    by -= (byte) i24;
                    break;
                default:
                    fFld += i;
            }
        }
        long meth_res = i + i1 + i2 + i23 + i24 + by + Double.doubleToLongBits(d3) + i25 + i26 + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(lArr3) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        if (ax$16) {
            try {
                boolean ax$18 = false;
                double[] ax$17 = new double[1];
                if (ax$18) {
                }
                ax$17[0] = 0;
            } catch (Throwable ax$19) {
            } finally {
            }
            return;
        }
        int i27 = 21312, i28 = -150, i29 = -3, i30 = 40149, i31 = 50174, i32 = 55670, i33 = -14, i34 = -57192, i35 = -2, i36 = 59, i37 = -156, i38 = 2, i39 = -13;
        float f3 = 0.911F;
        boolean b2 = false;
        byte by1 = -9;
        long l1 = -3563983521996179111L, l2 = 53511L;
        short[] sArr1 = new short[N];
        FuzzerUtils.init(sArr1, (short) 26222);
        switch(((iMeth() >>> 1) % 6) + 86) {
            case 86:
                i27 = 1;
                do {
                    Test.iArrFld[i27 + 1][i27] <<= i27;
                    if (b2) {
                        fFld = i27;
                        Test.instanceCount = Test.instanceCount;
                        Test.iArrFld[i27][i27] += i27;
                        if (b2) {
                            Test.lArrFld[i27][i27] = sFld;
                            for (f3 = 1; f3 < 39; f3++) {
                                byArrFld[(int) (f3 - 1)][i27] >>>= (byte) -3;
                                Test.instanceCount -= (long) f3;
                                i28 = 5;
                                sArr1[i27 + 1] = (short) i27;
                                i28 <<= i28;
                                switch((int) (((f3 % 1) * 5) + 70)) {
                                    case 71:
                                        Test.lArrFld = Test.lArrFld;
                                        i28 += i27;
                                        i28 += (int) f3;
                                        if (b2)
                                            continue;
                                }
                                sArr1[(int) (f3 + 1)] = (short) 8;
                                Test.instanceCount *= i27;
                                i28 <<= 2;
                                fFld -= fFld;
                            }
                            for (i29 = 2; 39 > i29; ++i29) {
                                i30 = i30;
                                for (i31 = 1; 2 > i31; ++i31) {
                                    i28 = 9;
                                    Test.sFld1 = (short) i28;
                                    Test.instanceCount += (((i31 * Test.instanceCount) + i31) - i28);
                                    Test.iArrFld[i27][i29] += (int) Test.instanceCount;
                                    Test.instanceCount += (i31 + f3);
                                    Test.lArrFld[i27 + 1][i31 - 1] *= i28;
                                    dFld *= i27;
                                    Test.instanceCount = i28;
                                    i30 -= (int) -11952L;
                                    fArrFld[i31 + 1] *= Test.instanceCount;
                                    fFld += (i31 * i31);
                                }
                                for (i33 = 2; i33 > 1; --i33) {
                                    i28 = i32;
                                    i28 |= iFld;
                                    fFld += Test.instanceCount;
                                    Test.iArrFld[i33 + 1][i33 + 1] *= i29;
                                    Test.iArrFld[i33 + 1] = Test.iArrFld[i27];
                                }
                                Test.iArrFld[i29 + 1] = FuzzerUtils.int1array(N, (int) -4);
                                for (i35 = 1; i35 < 2; ++i35) {
                                    iFld -= i34;
                                }
                                Test.instanceCount = Test.instanceCount;
                                if (b2)
                                    continue;
                                i28 = (int) dFld;
                                Test.iArrFld[i27 + 1][i29] = -9;
                                dFld -= i37;
                                switch(i29 + 52) {
                                    case 52:
                                        Test.instanceCount >>= i30;
                                        dFld += sFld;
                                        sFld >>= (short) 0L;
                                        i32 += i30;
                                        fFld = 0L;
                                        Test.sFld1 = (short) i35;
                                        i30 = i28;
                                        Test.iArrFld[i29 - 1][i29 + 1] = 56191;
                                        i30 = -116;
                                        iFld *= (int) Test.instanceCount;
                                        Test.instanceCount -= by1;
                                        for (l1 = 2; l1 > 1; l1--) {
                                            Test.bArrFld[(int) (l1)] = true;
                                            i30 += (int) -27L;
                                            i34 += (int) (l1 * l1);
                                            switch(((i29 % 6) * 5) + 44) {
                                                case 66:
                                                    fFld -= 179;
                                                    iFld = i31;
                                                    fFld = l1;
                                                    i32 += (int) l1;
                                                    fArrFld[(int) (l1 - 1)] = fFld;
                                                case 62:
                                                    Test.iArrFld[i27 - 1][i27] = (int) l1;
                                                    break;
                                                case 70:
                                                    i34 = i34;
                                                    break;
                                                case 48:
                                                    i28 = (int) dFld;
                                                    break;
                                                case 54:
                                                case 63:
                                                    i38 += i29;
                                                    break;
                                            }
                                        }
                                        break;
                                    case 53:
                                    case 54:
                                    case 55:
                                        try {
                                            i28 = (Test.iArrFld[i27][i27 + 1] % 11102);
                                            iFld = (-155 / i28);
                                            i36 = (i32 % i36);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        break;
                                    case 56:
                                        try {
                                            Test.iArrFld[i29][(i35 >>> 1) % N] = (-144104781 % i28);
                                            i38 = (i28 / 161);
                                            Test.iArrFld[i29][i29 - 1] = (13 % i35);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        break;
                                    case 57:
                                        iFld *= (int) l1;
                                        break;
                                    case 58:
                                    case 59:
                                        if (b2)
                                            continue;
                                        break;
                                    case 60:
                                        fFld -= i33;
                                    case 61:
                                        i32 = sFld;
                                        break;
                                    case 62:
                                        i37 &= i31;
                                        break;
                                    case 63:
                                        dFld -= Test.instanceCount;
                                    case 64:
                                        fFld /= (sFld | 1);
                                        break;
                                    case 65:
                                        dFld = f3;
                                        break;
                                    case 66:
                                        iFld <<= i28;
                                        break;
                                    case 67:
                                        fFld *= i30;
                                        break;
                                    case 68:
                                        i28 += (((i29 * i29) + i35) - l1);
                                        break;
                                    case 69:
                                        Test.instanceCount -= i34;
                                        break;
                                    case 70:
                                        i38 -= 42;
                                        break;
                                    case 71:
                                        i37 = (int) l1;
                                        break;
                                    case 72:
                                        byArrFld[i29][i27 - 1] += (byte) fFld;
                                        break;
                                    case 73:
                                        i38 = (int) Test.instanceCount;
                                        break;
                                    case 74:
                                        b2 = true;
                                        break;
                                    case 75:
                                        Test.instanceCount += (((i29 * i38) + by1) - i33);
                                        break;
                                    case 76:
                                        i28 = i28;
                                        break;
                                    case 77:
                                        iFld ^= (int) l1;
                                        break;
                                    case 78:
                                        iFld += i33;
                                        break;
                                    case 79:
                                        i28 = (int) l1;
                                    case 80:
                                        Test.iArrFld[i27][i29 + 1] -= i31;
                                        break;
                                    case 81:
                                        Test.iArrFld[i27 + 1][i29 + 1] = (int) fFld;
                                    case 82:
                                        Test.instanceCount += (i29 * i29);
                                    case 83:
                                        i36 *= (int) f3;
                                    case 84:
                                        Test.instanceCount = i29;
                                        break;
                                    case 85:
                                        Test.instanceCount += Test.sFld1;
                                        break;
                                    case 86:
                                        Test.instanceCount -= i31;
                                        break;
                                    case 87:
                                        fFld += (i29 * i29);
                                    case 88:
                                        dFld = -11527;
                                        break;
                                    case 89:
                                        Test.instanceCount = (long) fFld;
                                        break;
                                    case 90:
                                        Test.instanceCount += (i29 - i28);
                                        break;
                                    case 91:
                                        Test.instanceCount += (-39774 + (i29 * i29));
                                    case 92:
                                        try {
                                            i37 = (Test.iArrFld[i27][i27] % -42);
                                            i38 = (32149 % i37);
                                            iFld = (i28 / 1541369205);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        break;
                                    case 93:
                                        fArrFld[i29 + 1] += i37;
                                    case 94:
                                        Test.iArrFld[i27] = Test.iArrFld[i27];
                                        break;
                                    case 95:
                                    case 96:
                                        i30 >>= i28;
                                    case 97:
                                        Test.sFld1 = (short) i29;
                                    case 98:
                                    case 99:
                                        Test.iArrFld[i29 - 1][i27 + 1] <<= (int) Test.instanceCount;
                                        break;
                                    case 100:
                                        i36 *= 0;
                                        break;
                                    case 101:
                                        byArrFld[i29 + 1][i27 + 1] = (byte) 53;
                                        break;
                                    case 102:
                                        i36 = (int) 118.156F;
                                        break;
                                    case 103:
                                        i30 -= i31;
                                        break;
                                    case 104:
                                        Test.instanceCount |= i39;
                                        break;
                                    case 105:
                                        Test.dArrFld[i27][i29 + 1] = f3;
                                        break;
                                    case 106:
                                        dFld = i29;
                                        break;
                                    case 107:
                                        if (b2)
                                            break;
                                    case 108:
                                        Test.instanceCount = i37;
                                        break;
                                    case 109:
                                    case 110:
                                    case 111:
                                        sFld += (short) (((i29 * i37) + i28) - i33);
                                        break;
                                    case 112:
                                        Test.iArrFld[i29 + 1][i27 + 1] -= i29;
                                        break;
                                    case 113:
                                        if (b2)
                                            break;
                                        break;
                                    case 114:
                                        i32 += (i29 - l1);
                                        break;
                                    case 115:
                                        i36 += (int) (-18312L + (i29 * i29));
                                    case 116:
                                        Test.iArrFld[i27] = FuzzerUtils.int1array(N, (int) 253);
                                    case 117:
                                        Test.instanceCount += (((i29 * i39) + Test.instanceCount) - i27);
                                        break;
                                    case 118:
                                        dFld /= (by1 | 1);
                                    case 119:
                                        fFld += i31;
                                    case 120:
                                        i37 >>= i32;
                                        break;
                                    case 121:
                                        Test.instanceCount += i29;
                                }
                            }
                        } else {
                            fFld += (i27 * i31);
                        }
                    } else {
                        iFld += i27;
                    }
                } while (++i27 < 129);
                break;
            case 87:
                Test.iArrFld[(iFld >>> 1) % N][(i32 >>> 1) % N] <<= i34;
                break;
            case 88:
                i34 = (int) l2;
                break;
            case 89:
                i37 >>>= i38;
                break;
            case 90:
                dFld *= Test.instanceCount;
            case 91:
                fFld -= iFld;
                break;
            default:
                i34 = i35;
        }
        FuzzerUtils.out.println("i27 f3 i28 = " + i27 + "," + Float.floatToIntBits(f3) + "," + i28);
        FuzzerUtils.out.println("b2 i29 i30 = " + (b2 ? 1 : 0) + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 by1 l1 = " + i37 + "," + by1 + "," + l1);
        FuzzerUtils.out.println("i38 i39 l2 = " + i38 + "," + i39 + "," + l2);
        FuzzerUtils.out.println("sArr1 = " + FuzzerUtils.checkSum(sArr1));
        FuzzerUtils.out.println("Test.instanceCount sFld Test.sFld1 = " + Test.instanceCount + "," + sFld + "," + Test.sFld1);
        FuzzerUtils.out.println("dFld fFld iFld = " + Double.doubleToLongBits(dFld) + "," + Float.floatToIntBits(fFld) + "," + iFld);
        FuzzerUtils.out.println("Test.iArrFld fArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("byArrFld Test.bArrFld Test.dArrFld = " + FuzzerUtils.checkSum(byArrFld) + "," + FuzzerUtils.checkSum(Test.bArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$25) {
            try {
                int[] ax$29 = { 0, 1, 2, 3, 0x1234_5678, 0x8000_0000, 0x8000_0001, 0x8000_0002, 0x8000_0003, 0x8765_4321, 0xFFFF_FFFE, 0xFFFF_FFFF };
                int ax$27 = 3200;
                int[] ax$26 = { 1, 3 };
                for (int ax$28 = 0; ax$28 < ax$29.length; ax$28 += 1) {
                    ax$29[ax$28] = (int) (ax$26[ax$28] ^ ax$27);
                }
            } catch (Throwable ax$30) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$5 = false;

    private static Boolean ax$16 = false;

    private static Boolean ax$25 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
