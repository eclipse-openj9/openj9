// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.jar.Attributes.Name;
import java.util.jar.Attributes;
import java.lang.ref.WeakReference;
import java.math.BigInteger;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -6249342020696046841L;

    public static double dFld = 74.53390;

    public static byte byFld = -113;

    public static float fFld = 65.860F;

    public static short sFld = 3893;

    public static long[] lArrFld = new long[N];

    public static int[] iArrFld = new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 9L);
        FuzzerUtils.init(Test.iArrFld, -52494);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5, int i6) {
        int i7 = -24833, i8 = -3, i9 = -14, i10 = 8, i11 = -246, i12 = -234, i13 = 439, i14 = -197, i15 = 140, i16 = -4, i17 = -11057, i18 = 43784, iArr[] = new int[N];
        byte by = 58;
        float f1 = -1.496F, fArr[] = new float[N];
        FuzzerUtils.init(fArr, 2.144F);
        FuzzerUtils.init(iArr, 8139);
        for (i7 = 13; i7 < 214; ++i7) {
            boolean b1 = true;
            Test.instanceCount <<= i8;
            Test.instanceCount >>>= i9;
            if (b1)
                break;
            i6 ^= (int) -2714397640190732958L;
            switch(((i7 % 9) * 5) + 77) {
                case 105:
                    fArr[i7 + 1] = i5;
                    for (i10 = 1; i10 < 3; i10++) {
                        try {
                            iArr[i10 - 1] = (-67 / i11);
                            i8 = (iArr[i7] / i11);
                            i5 = (iArr[i7 + 1] / -61254);
                        } catch (ArithmeticException a_e) {
                        }
                    }
                    i9 -= i11;
                    i11 -= i8;
                    if (i9 != 0) {
                    }
                    i8 = i5;
                    for (i12 = 1; i12 < 3; i12++) {
                        i9 += (8063 + (i12 * i12));
                        by += (byte) Test.instanceCount;
                        iArr[i12 + 1] &= (int) Test.instanceCount;
                    }
                    break;
                case 104:
                    b1 = b1;
                    switch(((i7 % 3) * 5) + 49) {
                        case 56:
                        case 63:
                            for (i14 = 1; 3 > i14; ++i14) {
                                i13 += (((i14 * i8) + i15) - i5);
                                try {
                                    i9 = (1398356287 % i13);
                                    i6 = (i10 % i7);
                                    iArr[i7 + 1] = (i7 % -3562);
                                } catch (ArithmeticException a_e) {
                                }
                                {
                                    java.io.PrintStream ax$5 = System.out;
                                    java.io.PrintStream ax$6 = System.err;
                                    java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                                        @Override
                                        public void write(int b) throws java.io.IOException {
                                            // DO NOTHING: DISCARD ALL OUTPUTS
                                        }
                                    });
                                    System.setOut(ax$7);
                                    System.setErr(ax$7);
                                    try {
                                        for (int ax$3 = -382; ax$3 < 8171; ax$3 += 1) {
                                            try {
                                                short[] ax$0 = new short[] { 20, 10, 0, -10, -20 };
                                                for (int ax$1 = 0; ax$1 < 128; ax$1++) ax$0[ax$1] <<= 4;
                                            } catch (Throwable ax$2) {
                                            } finally {
                                            }
                                        }
                                    } catch (Throwable ax$4) {
                                    }
                                    System.setOut(ax$5);
                                    System.setErr(ax$6);
                                }
                                i11 >>= i14;
                                i11 += (int) (-10L + (i14 * i14));
                            }
                            for (i16 = 3; 1 < i16; --i16) {
                                f1 = Test.instanceCount;
                                i5 = (int) Test.instanceCount;
                                i18 = 1;
                                while (++i18 < 2) {
                                    f1 += i18;
                                    i11 += (-11 + (i18 * i18));
                                    fArr[i7 + 1] -= i14;
                                    i15 = -22895;
                                    Test.instanceCount = by;
                                    i11 >>= i16;
                                    try {
                                        i15 = (i9 % i16);
                                        i11 = (i11 / 12107);
                                        iArr[i16] = (i10 % 40625);
                                    } catch (ArithmeticException a_e) {
                                    }
                                }
                                Test.dFld = f1;
                                if (b1)
                                    continue;
                            }
                        case 50:
                            i17 = by;
                            break;
                    }
                    break;
                case 106:
                    iArr[i7] -= (int) f1;
                    break;
                case 84:
                    if (true)
                        break;
                case 79:
                    Test.instanceCount *= (long) Test.dFld;
                    break;
                case 80:
                    i15 = (int) Test.instanceCount;
                    break;
                case 100:
                    iArr[i7 - 1] += 49718;
                    break;
                case 92:
                    Test.instanceCount -= (long) Test.dFld;
                    break;
                case 110:
                    i13 += i7;
                    break;
                default:
                    i13 = i12;
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + by + i14 + i15 + i16 + i17 + Float.floatToIntBits(f1) + i18 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(int i3) {
        long l1 = 98L;
        int i4 = 10, i20 = -11708, i21 = 34429, i22 = -191, i23 = 12794, i24 = 59146, i25 = 14, iArr1[] = new int[N];
        short s = 23865;
        boolean b2 = true, bArr[] = new boolean[N];
        float f2 = 111.947F, f3 = 1.597F;
        FuzzerUtils.init(iArr1, -12681);
        FuzzerUtils.init(bArr, false);
        for (l1 = 13; l1 < 234; ++l1) {
            if (i4 != 0) {
                vMeth1_check_sum += i3 + l1 + i4 + i20 + i21 + s + i22 + i23 + (b2 ? 1 : 0) + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i24 + i25 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
                return;
            }
            {
                java.io.PrintStream ax$12 = System.out;
                java.io.PrintStream ax$13 = System.err;
                java.io.PrintStream ax$14 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$14);
                System.setErr(ax$14);
                try {
                    for (int ax$10 = -3170; ax$10 < 3297; ax$10 += 1) {
                        try {
                            Attributes.Name ax$8 = new Attributes.Name("");
                        } catch (Throwable ax$9) {
                        } finally {
                        }
                    }
                } catch (Throwable ax$11) {
                }
                System.setOut(ax$12);
                System.setErr(ax$13);
            }
            iMeth(i4, i4);
            i3 += (int) (((l1 * i4) + i3) - i4);
            for (i20 = 1; i20 < 3; ++i20) {
                Test.instanceCount <<= i4;
                s += (short) i20;
                for (i22 = 2; 1 < i22; --i22) {
                    i4 <<= (int) l1;
                    iArr1[(int) (l1 - 1)] -= i23;
                    if (b2)
                        continue;
                    i23 += (int) (-57045L + (i22 * i22));
                    i21 = i22;
                    Test.instanceCount = i23;
                    f2 += (((i22 * i3) + i22) - f3);
                    i3 -= i23;
                    i23 = (int) f3;
                    Test.instanceCount = i23;
                    bArr = bArr;
                    i23 += s;
                    iArr1[i20 - 1] = i3;
                    i21 += (((i22 * i21) + l1) - i23);
                }
                f3 = -76;
                i3 <<= i23;
                f3 += i20;
                Test.instanceCount <<= i23;
                i21 |= i21;
                for (i24 = 1; 2 > i24; i24++) {
                    Test.dFld *= f2;
                    i21 += i22;
                    i21 += i24;
                    Test.instanceCount = i22;
                }
                Test.dFld = i25;
            }
            Test.lArrFld[(int) (l1 - 1)] += -80;
            Test.lArrFld[(int) (l1 - 1)] = (long) Test.dFld;
            f3 += (((l1 * i22) + i20) - i21);
            i3 *= (int) Test.dFld;
        }
        vMeth1_check_sum += i3 + l1 + i4 + i20 + i21 + s + i22 + i23 + (b2 ? 1 : 0) + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i24 + i25 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(long l, float f, boolean b) {
        if (ax$26) {
            try {
                java.lang.String ax$28 = "1.113297501011488E+40";
                BigInteger ax$27 = new BigInteger(ax$28);
            } catch (Throwable ax$29) {
            } finally {
            }
            return;
        }
        int i1 = 142, i2 = 59413, i27 = -162, i28 = 50676, i29 = 232, i30 = -6, i31 = 36461, i32 = 43712;
        double[] dArr = new double[N];
        FuzzerUtils.init(dArr, 40.100652);
        for (i1 = 11; i1 < 237; ++i1) {
            vMeth1(7);
            i2 ^= i1;
            Test.dFld += i1;
            Test.dFld += f;
            i2 += (-12 + (i1 * i1));
        }
        i2 *= i2;
        for (int i26 : Test.iArrFld) {
            i26 += (int) f;
            i27 = 1;
            while (++i27 < 2) {
                i2 *= (int) f;
                try {
                    i2 = (i27 % 260601632);
                    i2 = (i26 % -25688);
                    Test.iArrFld[i27 - 1] = (32797 / i26);
                } catch (ArithmeticException a_e) {
                }
                for (i28 = 1; i28 < 1; ++i28) {
                    Test.lArrFld[i27 + 1] += -6;
                    try {
                        i26 = (i28 / -3824);
                        i26 = (-172 % i27);
                        i29 = (i29 / i27);
                    } catch (ArithmeticException a_e) {
                    }
                    Test.byFld += (byte) i28;
                    i26 += (i28 - i28);
                    try {
                        i29 = (Test.iArrFld[i28 + 1] / i27);
                        Test.iArrFld[i27] = (1106109258 % i2);
                        i29 = (-1239514930 % i27);
                    } catch (ArithmeticException a_e) {
                    }
                    i29 = i26;
                    i2 |= i27;
                    Test.iArrFld = Test.iArrFld;
                    dArr[i28 + 1] -= Test.byFld;
                    l = i1;
                    i26 += (i28 * i28);
                    i2 += (int) l;
                }
            }
            i29 |= i28;
            i2 >>= 231;
            i2 *= i26;
            l = l;
            for (i30 = 2; i30 > 1; i30 -= 2) {
                i26 >>= i27;
                i2 = (int) -1.74103;
                i32 = 1;
                while (++i32 < 2) {
                    f -= i26;
                    Test.iArrFld[i32 - 1] -= i28;
                    Test.iArrFld[i32] += i1;
                    i29 <<= -1;
                }
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + (b ? 1 : 0) + i1 + i2 + i27 + i28 + i29 + i30 + i31 + i32 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {
        int i = 117, i33 = -36037, i34 = -5, i35 = 4, i36 = -190, i37 = 225, i38 = -12594, i39 = -4, i40 = 55338, i41 = -31775, i42 = -45450, i43 = 21226, i44 = -174, i45 = -8335, i46 = 1, i47 = 19042, i48 = -6;
        boolean b3 = false;
        float f4 = 1.36F, f5 = 1.240F;
        long l3 = 1L, l4 = -2015368727672583641L, l5 = -8L;
        i = 103;
        while (--i > 0) {
            {
                java.io.PrintStream ax$32 = System.out;
                java.io.PrintStream ax$33 = System.err;
                java.io.PrintStream ax$34 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$34);
                System.setErr(ax$34);
                try {
                    ax$26 = true;
                    for (int ax$30 = 0; ax$30 < 6903; ax$30 += 1) vMeth(-4565564235538755823L, (float) 0.6564290412144734, true);
                } catch (java.lang.Throwable ax$31) {
                } finally {
                    ax$26 = false;
                }
                System.setOut(ax$32);
                System.setErr(ax$33);
            }
            vMeth(Test.instanceCount, Test.fFld, b3);
            Test.iArrFld[i] -= i;
            Test.instanceCount += (i | i);
            for (i33 = 3; i33 < 49; i33++) {
                i34 += i33;
                try {
                    i34 = (i33 % i);
                    Test.iArrFld[i33 + 1] = (Test.iArrFld[i33] % 35404);
                    i34 = (131 / i);
                } catch (ArithmeticException a_e) {
                }
                Test.lArrFld = Test.lArrFld;
                Test.instanceCount = i33;
            }
            for (i35 = 49; i35 > 2; --i35) {
                i37 = 1;
                while (++i37 < 2) {
                    i34 += (i37 ^ i35);
                    if (false)
                        continue;
                    i36 >>= i35;
                }
                Test.fFld *= Test.fFld;
                f4 = 1;
                do {
                    Test.instanceCount = i38;
                    Test.fFld *= i37;
                    i36 += i;
                    i36 += (int) (f4 * Test.instanceCount);
                    Test.sFld = (short) Test.fFld;
                } while (++f4 < 2);
            }
            i38 += (((i * Test.sFld) + i38) - i35);
            i34 += (i * i);
            i36 *= 11;
        }
        for (i39 = 4; i39 < 193; i39++) {
            Test.instanceCount -= Test.instanceCount;
            i38 += (int) 1.42788;
            for (l3 = 1; 27 > l3; l3++) {
                Test.fFld *= -6;
                Test.instanceCount = i42;
                Test.instanceCount += (5647324990533032003L + (l3 * l3));
                i38 = i41;
            }
            i34 = i38;
            i41 = i40;
            i43 = 1;
            do {
                Test.iArrFld[i39] += (int) f4;
                i41 <<= 20991;
                Test.instanceCount -= i;
                Test.instanceCount *= i40;
                i44 = 1;
                do {
                    i41 = (int) Test.instanceCount;
                    Test.sFld += (short) (13 + (i44 * i44));
                    i36 += 7575;
                    i38 *= (int) 5.199F;
                    Test.sFld = (short) i39;
                } while (++i44 < 1);
                Test.instanceCount *= l4;
                Test.iArrFld[i39 - 1] >>= i33;
            } while (++i43 < 27);
            i41 += (((i39 * i) + i33) - i33);
            switch(((i39 % 2) * 5) + 22) {
                case 30:
                    i45 = 1;
                    while (++i45 < 27) {
                        for (i46 = 1; i46 < 1; ++i46) {
                            Test.fFld = f4;
                            Test.iArrFld[i39] += (int) l4;
                            Test.fFld += (-102 + (i46 * i46));
                            Test.instanceCount /= (l4 | 1);
                            l4 += i46;
                            Test.instanceCount += (3661249603L + (i46 * i46));
                            i36 = i37;
                            if (b3) {
                                Test.iArrFld[i45] >>= (int) l5;
                                Test.iArrFld[i45] -= i44;
                            }
                            {
                                java.io.PrintStream ax$23 = System.out;
                                java.io.PrintStream ax$24 = System.err;
                                java.io.PrintStream ax$25 = new java.io.PrintStream(new java.io.OutputStream() {

                                    @Override
                                    public void write(int b) throws java.io.IOException {
                                        // DO NOTHING: DISCARD ALL OUTPUTS
                                    }
                                });
                                System.setOut(ax$25);
                                System.setErr(ax$25);
                                try {
                                    for (int ax$21 = -1639; ax$21 < 6212; ax$21 += 1) {
                                        boolean ax$19 = b3;
                                        try {
                                            java.lang.ref.WeakReference[] ax$17 = new java.lang.ref.WeakReference[3030];
                                            for (int ax$15 = 0; ax$15 < 1000; ++ax$15) {
                                                Object ax$18 = new Object();
                                                for (int ax$16 = 0; ax$16 < ax$17.length; ++ax$16) {
                                                    ax$17[ax$16] = new WeakReference(ax$18);
                                                }
                                            }
                                            b3 = true;
                                        } catch (Throwable ax$20) {
                                        } finally {
                                            b3 = ax$19;
                                        }
                                    }
                                } catch (Throwable ax$22) {
                                }
                                System.setOut(ax$23);
                                System.setErr(ax$24);
                            }
                            i34 += i36;
                            Test.instanceCount <<= l3;
                        }
                        if (b3)
                            continue;
                        for (f5 = i45; f5 < 1; ++f5) {
                            Test.sFld += (short) f5;
                            i48 *= Test.byFld;
                            if (true)
                                continue;
                            if (b3) {
                                i41 *= i45;
                                Test.dFld -= Test.fFld;
                                Test.iArrFld[i45 - 1] = (int) Test.instanceCount;
                                l4 <<= l5;
                                i40 += (int) (f5 - l3);
                                i41 &= i33;
                            }
                        }
                    }
                case 32:
                    Test.iArrFld[i39] += (int) l5;
                    break;
                default:
                    i41 += (i39 | i);
            }
        }
        FuzzerUtils.out.println("i b3 i33 = " + i + "," + (b3 ? 1 : 0) + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 f4 i38 = " + i37 + "," + Float.floatToIntBits(f4) + "," + i38);
        FuzzerUtils.out.println("i39 i40 l3 = " + i39 + "," + i40 + "," + l3);
        FuzzerUtils.out.println("i41 i42 i43 = " + i41 + "," + i42 + "," + i43);
        FuzzerUtils.out.println("i44 l4 i45 = " + i44 + "," + l4 + "," + i45);
        FuzzerUtils.out.println("i46 i47 l5 = " + i46 + "," + i47 + "," + l5);
        FuzzerUtils.out.println("f5 i48 = " + Float.floatToIntBits(f5) + "," + i48);
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.byFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.fFld Test.sFld Test.lArrFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.sFld + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$26 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
