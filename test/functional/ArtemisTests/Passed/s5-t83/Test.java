// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.math.BigInteger;
import java.net.DatagramPacket;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 2195727432L;

    public double dFld = -2.11989;

    public static boolean bFld = false;

    public static double dFld1 = -47.106004;

    public static volatile short sFld = 17123;

    public static volatile long lFld = -144L;

    public static byte byFld = -103;

    public static long lArrFld[] = new long[N];

    public static byte byArrFld[] = new byte[N];

    public double dArrFld[][] = new double[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -148L);
        FuzzerUtils.init(Test.byArrFld, ((byte) (-65)));
    }

    public static long lMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vMeth(float f2, long l, long l1) {
        if (Test.ax$54) {
            List<Integer> ax$55 = null;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                new CopyOnWriteArrayList<Integer>().addAll(ax$55);
            } catch (Throwable ax$56) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return;
        }
        int i12 = -129;
        int i13 = 8;
        int i14 = -8760;
        int i15 = 8;
        int i16 = 0;
        int i17 = 143;
        int i18 = -6028;
        int i19 = -45821;
        int iArr[] = new int[N];
        FuzzerUtils.init(iArr, -4);
        for (i12 = 245; i12 > 8; i12 -= 3) {
            iArr[i12 - 1] *= i12;
            for (i14 = 7; i14 > 1; i14--) {
                l1 += i14 * i14;
                l = i13;
                if (Test.bFld)
                    break;

                l1 *= i15;
                try {
                    i15 = 1074932629 / iArr[i14];
                    i13 = (-4770) % i13;
                    iArr[i12 - 1] = i13 % iArr[i12 - 1];
                } catch (ArithmeticException a_e) {
                }
                i15 >>>= i13;
                for (i16 = 1; i16 < 2; i16++) {
                    l *= i12;
                    i13 %= ((int) (i14 | 1));
                    Test.dFld1 = 54430L;
                    Test.instanceCount += ((long) (f2));
                    Test.byArrFld = Test.byArrFld;
                }
                for (i18 = 1; 2 > i18; i18++) {
                    switch (((i18 % 1) * 5) + 51) {
                        case 53 :
                            f2 -= i17;
                            i13 += i18 ^ ((long) (f2));
                            Test.bFld = true;
                            i15 <<= i16;
                            Test.sFld >>= ((short) (i14));
                            i17 = i18;
                            if (Test.bFld)
                                break;

                            i13 += i16;
                            l += i18 | l1;
                            l1 -= i17;
                            break;
                        default :
                            if (Test.bFld) {
                                switch (((i14 % 2) * 5) + 13) {
                                    case 21 :
                                        l1 = i19;
                                        Test.dFld1 = i19;
                                        i13 |= ((int) (Test.instanceCount));
                                        i19 += ((int) (f2));
                                        i17 -= i13;
                                        i17 += i18;
                                        Test.lArrFld[i18 + 1] -= -216;
                                        f2 += i18;
                                    case 19 :
                                        i19 = ((int) (l1));
                                }
                            } else if (Test.bFld) {
                                l1 = -30246;
                            } else {
                                i13 = i12;
                            }
                    }
                }
            }
        }
        vMeth_check_sum += ((((((((((Float.floatToIntBits(f2) + l) + l1) + i12) + i13) + i14) + i15) + i16) + i17) + i18) + i19) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {
        int i8 = -34266;
        int i9 = 50;
        int i10 = 12;
        int i11 = -7;
        int i20 = -65200;
        int i21 = -7;
        int i22 = -39344;
        int i23 = 37;
        int i24 = 9;
        int i25 = 246;
        int i26 = -57648;
        int i27 = 7;
        int iArr1[][] = new int[N][N];
        float f1 = 97.63F;
        float fArr[][] = new float[N][N];
        short s = -12605;
        FuzzerUtils.init(iArr1, 52573);
        FuzzerUtils.init(fArr, 66.91F);
        {
            try {
                byte[] ax$2 = new byte[]{ ((byte) (-11)), ((byte) (104)), ((byte) (-65)), ((byte) (-41)), ((byte) (50)) };
                byte[] ax$3 = new byte[]{ ((byte) (75)), ((byte) (115)), ((byte) (23)), ((byte) (-83)), ((byte) (13)), ((byte) (86)) };
                byte[] ax$4 = new byte[]{ ((byte) (124)), ((byte) (-75)), ((byte) (-121)), ((byte) (-127)), ((byte) (69)), ((byte) (59)), ((byte) (91)) };
                Object ax$7 = new Integer(1000);
                Object ax$8 = new Object();
                boolean ax$1 = false;
                for (int ax$0 = -577; ax$0 < (-577 + 18878); ax$0 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$5 = 0; ax$5 < ax$4.length; ax$5 += 1) {
                            ax$4[ax$5] = ((byte) (ax$2[ax$5] & ax$3[ax$5]));
                        }
                    } catch (Throwable ax$6) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    if (!ax$1) {
                        i8 |= ((int) (Test.instanceCount));
                        ax$1 = true;
                    }
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$7 = ax$8;
                    } catch (Throwable ax$9) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        for (i9 = 182; i9 > 3; --i9) {
            i11 += i9 - f1;
            i8 = ((int) ((-i11) * ((f1 + i8) * (i11 ^ i11))));
        }
        {
            final int ax$68 = i9;
            final int ax$69 = i21;
            final int ax$70 = i22;
            final int ax$71 = i26;
            try {
                for (int ax$57 = -83; ax$57 < (-83 + 16066); ax$57 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        int[][] ax$62 = ((int[][]) (new int[i21][i22]));
                        for (i26 = 0; i26 < i21; i26++) {
                            for (i9 = 0; i9 < i22; i9++) {
                                ax$62[i26][i9] = ((int) (((float) (i26 + 1)) / ((float) (i9 + 1))));
                            }
                        }
                    } catch (Throwable ax$63) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$54 = true;
                    vMeth(0.39069963F, 5244167694186097720L, -324162638711261679L);
                    Test.ax$54 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        boolean ax$64 = true;
                        byte[] ax$65 = new byte[128];
                        try {
                            new DatagramPacket(ax$65, 256);
                        } catch (IllegalArgumentException ax$66) {
                            ax$64 = false;
                        }
                        if (ax$64) {
                        }
                    } catch (Throwable ax$67) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i9 = ax$68;
                i21 = ax$69;
                i22 = ax$70;
                i26 = ax$71;
            }
        }
        vMeth(f1, Test.instanceCount, Test.instanceCount);
        i20 = 1;
        do {
            i21 = 1;
            do {
                if (true)
                    continue;

                iArr1[i20 + 1][i20 + 1] *= i10;
                if (Test.bFld)
                    break;

                for (i22 = 1; 1 > i22; ++i22) {
                    if (Test.bFld)
                        break;

                    Test.instanceCount += ((long) (f1));
                    switch ((i22 % 1) + 122) {
                        case 122 :
                            Test.instanceCount = i20;
                            i11 += i23;
                            Test.sFld *= ((short) (Test.instanceCount));
                    }
                    s <<= ((short) (Test.instanceCount));
                    i11 >>= i20;
                    f1 -= ((float) (2.39553));
                }
                i23 += i21 * i21;
                iArr1[i21 - 1][i20 + 1] = i10;
                i23 -= i22;
                i10 -= -2;
                i11 <<= i20;
                Test.sFld *= ((short) (56978));
            } while ((++i21) < 8 );
            switch (((i20 % 7) * 5) + 42) {
                case 65 :
                    i8 += ((int) (1.30801));
                    try {
                        i10 = 174 % i11;
                        i23 = (-35349) % i8;
                        i10 = (-54) % i9;
                    } catch (ArithmeticException a_e) {
                    }
                    for (i24 = 1; i24 < 8; ++i24) {
                        for (i26 = i24; i26 < 2; i26++) {
                            iArr1[i26 - 1][i26 + 1] %= ((int) (i25 | 1));
                            i25 -= ((int) (f1));
                            if (true)
                                continue;

                            iArr1[i26][i26 - 1] >>= ((int) (Test.lFld));
                            if (i24 != 0) {
                            }
                            Test.sFld += ((short) (i26 ^ i20));
                        }
                    }
                    break;
                case 44 :
                    fArr[i20 - 1][i20 - 1] = Test.instanceCount;
                    break;
                case 72 :
                    Test.lFld += i20;
                    break;
                case 55 :
                    f1 *= i25;
                    break;
                case 63 :
                    iArr1[i20][i20] <<= ((int) (Test.lFld));
                    break;
                case 49 :
                    Test.lFld += 188 + (i20 * i20);
                    break;
                case 59 :
            }
        } while ((i20 += 3) < 204 );
        long meth_res = ((((((((((((((i8 + i9) + i10) + i11) + Float.floatToIntBits(f1)) + i20) + i21) + i22) + i23) + s) + i24) + i25) + i26) + i27) + FuzzerUtils.checkSum(iArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static long lMeth(int i1, int i2) {
        int i3 = 170;
        int i4 = 210;
        int i5 = 32570;
        int i6 = -198;
        int i7 = 13589;
        int iArr2[] = new int[N];
        float f = 0.147F;
        float f3 = 15.794F;
        float fArr1[] = new float[N];
        byte by = 72;
        long lArr[] = new long[N];
        FuzzerUtils.init(fArr1, 0.368F);
        FuzzerUtils.init(lArr, 1321L);
        FuzzerUtils.init(iArr2, -8269);
        for (i3 = 6; i3 < 199; i3 += 3) {
            Test.lArrFld[(i3 >>> 1) % N] = ((long) ((f++) - 43777L));
            for (i5 = 1; i5 < 8; ++i5) {
                i7 = 2;
                while ((i7 -= 3) > 0) {
                    int i28 = 12457;
                    i6 += i7;
                    i6 = ~iMeth();
                    switch ((i7 % 2) + 31) {
                        case 31 :
                            i2 = ((int) (Test.instanceCount));
                            switch (((i5 % 10) * 5) + 65) {
                                case 83 :
                                    switch (((i3 % 1) * 5) + 106) {
                                        case 109 :
                                            i1 = ((int) (Test.instanceCount));
                                            fArr1 = fArr1;
                                            i2 = i4;
                                            i4 = ((int) (Test.dFld1));
                                            i4 -= i3;
                                            Test.lArrFld = lArr;
                                            break;
                                        default :
                                            iArr2[i7] -= ((int) (Test.lFld));
                                            Test.dFld1 -= i3;
                                            iArr2[i5 - 1] >>= Test.sFld;
                                            iArr2[i7 + 1] -= i2;
                                            Test.instanceCount = -139;
                                            i4 += ((i7 * Test.byFld) + i3) - Test.instanceCount;
                                            Test.instanceCount += -53707;
                                    }
                                    f += Test.lFld;
                                    i28 = i6;
                                    i6 *= ((int) (f3));
                                    if (i6 != 0) {
                                    }
                                    i2 = i4;
                                    Test.lFld = Test.instanceCount;
                                    Test.lArrFld[i5] >>= i28;
                                    iArr2 = iArr2;
                                    i28 = Test.sFld;
                                    iArr2 = iArr2;
                                    i1 ^= i28;
                                    i2 = -1;
                                    i28 += 2;
                                    {
                                        try {
                                            String[] ax$12 = new String[]{ "6", "3", "2", "2", "1", "-1", "-2", "-2", "-3", "-6", "6", "-6", "6", "-6", "2", "-2", "5", "-5", "5", "-5" };
                                            String ax$13 = "s";
                                            Throwable[] ax$15 = new Throwable[]{ new Throwable(), new Throwable() };
                                            BlockingQueue<Integer> ax$16 = null;
                                            Integer ax$17 = -1907085410;
                                            ReentrantLock ax$18 = new ReentrantLock();
                                            Condition ax$19 = null;
                                            boolean ax$11 = false;
                                            for (int ax$10 = -884; ax$10 < (-884 + 17952); ax$10 += 1) {
                                                Test.AxOutputRedirectionHelper.redirect();
                                                try {
                                                    if (!ax$12[0].equals(ax$13.substring(0, 10))) {
                                                    }
                                                } catch (Throwable ax$14) {
                                                } finally {
                                                }
                                                Test.AxOutputRedirectionHelper.recover();
                                                if (!ax$11) {
                                                    f *= Test.lFld;
                                                    ax$11 = true;
                                                }
                                                Test.AxOutputRedirectionHelper.redirect();
                                                try {
                                                    try {
                                                        ax$18.lock();
                                                        ax$19.signal();
                                                        ax$18.unlock();
                                                        ax$16.put(ax$17);
                                                    } catch (Throwable ax$20) {
                                                        ax$15[0] = ax$20;
                                                    }
                                                } catch (Throwable ax$21) {
                                                } finally {
                                                }
                                                Test.AxOutputRedirectionHelper.recover();
                                            }
                                        } finally {
                                        }
                                    }
                                case 98 :
                                case 76 :
                                    i4 *= ((int) (f));
                                    break;
                                case 103 :
                                    Test.lFld = by;
                                    break;
                                case 81 :
                                    i28 += i7;
                                    break;
                                case 109 :
                                    i4 = 100;
                                    break;
                                case 99 :
                                    i4 = i6;
                                    break;
                                case 100 :
                                    i6 -= i6;
                                    break;
                                case 107 :
                                    iArr2[i3] ^= i5;
                                    break;
                                case 70 :
                                    f3 = ((float) (Test.dFld1));
                                default :
                                    lArr[i5] -= Test.instanceCount;
                            }
                            break;
                        case 32 :
                            Test.lFld *= i3;
                            break;
                        default :
                            iArr2[i7] %= ((int) (i2 | 1));
                    }
                }
            }
        }
        long meth_res = (((((((((((i1 + i2) + i3) + i4) + Float.floatToIntBits(f)) + i5) + i6) + i7) + Float.floatToIntBits(f3)) + by) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return ((long) (meth_res));
    }

    public void mainTest(String[] strArr1) {
        if (Test.ax$32) {
            final long ax$37 = Test.lMeth_check_sum;
            int ax$33 = 0xe0;
            long[] ax$34 = new long[10];
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$34[ax$33] = lMeth_check_sum;
                if (ax$33 == 10) {
                    lMeth_check_sum++;
                }
            } catch (Throwable ax$36) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.lMeth_check_sum = ax$37;
            return;
        }
        int i = -5;
        int i29 = -24161;
        int i30 = 170;
        int i31 = 2097;
        int i32 = 14;
        int i33 = 184;
        int i34 = 4;
        int i35 = -239;
        int i36 = -1611;
        int i37 = -22140;
        int iArr3[] = new int[N];
        float f4 = 1.311F;
        float f5 = -66.81F;
        float f6 = -2.167F;
        long l2 = -50839L;
        short sArr[] = new short[N];
        FuzzerUtils.init(iArr3, 112);
        FuzzerUtils.init(sArr, ((short) (13746)));
        i = ((int) ((dFld - (-828930021897045172L)) - lMeth(i, i)));
        i29 = 170;
        do {
            for (f4 = i29; f4 < 30; ++f4) {
                i += -33158;
            }
            for (i31 = 1; i31 < 30; i31++) {
                iArr3[i31 - 1] |= Test.sFld;
                i33 = 1;
                while ((++i33) < 2) {
                    sArr[i31 + 1] += ((short) (7));
                    i32 = -30;
                    i = ((int) (dFld));
                    Test.instanceCount += 1;
                    i += (-34717) + (i33 * i33);
                    i30 += i33 * i33;
                    dArrFld = FuzzerUtils.double2array(N, ((double) (-1.67576)));
                    i30 += i33 * i33;
                    i30 = 8;
                    i += -172;
                    switch ((((i30 >>> 1) % 2) * 5) + 57) {
                        case 65 :
                            i30 += 16 + (i33 * i33);
                            Test.lFld = Test.byFld;
                            i30 >>= i33;
                            Test.dFld1 -= f4;
                            i += i29;
                            Test.sFld >>= ((short) (i30));
                            i30 = 10;
                            break;
                        case 62 :
                            f5 += i32;
                            i32 = i33;
                            sArr[i31 - 1] -= ((short) (Test.instanceCount));
                            Test.instanceCount >>= Test.byFld;
                            Test.byFld = ((byte) (i33));
                            i = i29;
                            i32 -= ((int) (Test.dFld1));
                            Test.sFld = ((short) (i));
                            iArr3[i29 - 1] = ((int) (Test.instanceCount));
                            dFld %= i29 | 1;
                            if (Test.bFld)
                                break;

                            i += ((i33 * f4) + i32) - i30;
                            break;
                        default :
                            iArr3[i31 - 1] = i32;
                            Test.lFld <<= i32;
                            i = i29;
                    }
                    i32 += ((int) (Test.lFld));
                    Test.bFld = Test.bFld;
                }
            }
            Test.instanceCount += ((i29 * f4) + i32) - Test.lFld;
            i32 += ((int) (Test.instanceCount));
            i32 += i29;
            i32 >>= i33;
            for (f6 = 1; f6 < 30; f6++) {
                switch (((i29 % 7) * 5) + 50) {
                    case 60 :
                        for (i35 = 1; i35 < 2; i35++) {
                            switch ((i29 % 10) + 6) {
                                case 6 :
                                    Test.sFld += ((short) (i37));
                                    i = 123;
                                    l2 += Test.instanceCount;
                                    l2 += ((long) (f4));
                                case 7 :
                                    i36 += i35 * i35;
                                    dArrFld[i29 + 1][i29 - 1] *= Test.dFld1;
                                    l2 += i35 * i35;
                                case 8 :
                                    f5 -= i36;
                                    iArr3[i35 + 1] -= ((int) (-910054508894882321L));
                                    Test.lFld = i31;
                                    f5 = f5;
                                    iArr3[((int) (f6 - 1))] = 14;
                                case 9 :
                                case 10 :
                                    i += i35;
                                    Test.lFld += i35 * i35;
                                    i34 = ((int) (dFld));
                                    l2 ^= i;
                                    Test.dFld1 += i32;
                                    Test.byFld += ((byte) (i35 * i35));
                                    try {
                                        i30 = (-26987) / i;
                                        i = i34 % i33;
                                        i = iArr3[((int) (f6 - 1))] % i34;
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i37 = i29;
                                    f5 /= i36 | 1;
                                    i36 = ((int) (Test.instanceCount));
                                    i32 += i35;
                                    f5 *= ((float) (Test.dFld1));
                                    break;
                                case 11 :
                                    i36 -= ((int) (l2));
                                    break;
                                case 12 :
                                    Test.instanceCount += Test.instanceCount;
                                case 13 :
                                    i36 -= i35;
                                    break;
                                case 14 :
                                    i30 += ((i35 * i30) + i37) - i33;
                                    break;
                                case 15 :
                                    i <<= i31;
                                    break;
                                default :
                                    Test.bFld = Test.bFld;
                            }
                        }
                    case 71 :
                        f5 -= l2;
                    case 65 :
                        l2 += ((long) (f6));
                        break;
                    case 54 :
                    case 75 :
                        l2 -= ((long) (dFld));
                        break;
                    case 85 :
                        iArr3[((int) (f6 + 1))] -= ((int) (Test.dFld1));
                        break;
                    case 55 :
                        i37 += ((int) (((long) (f6)) ^ i33));
                }
            }
        } while ((--i29) > 0 );
        FuzzerUtils.out.println((((("i i29 f4 = " + i) + ",") + i29) + ",") + Float.floatToIntBits(f4));
        FuzzerUtils.out.println((((("i30 i31 i32 = " + i30) + ",") + i31) + ",") + i32);
        FuzzerUtils.out.println((((("i33 f5 f6 = " + i33) + ",") + Float.floatToIntBits(f5)) + ",") + Float.floatToIntBits(f6));
        FuzzerUtils.out.println((((("i34 i35 i36 = " + i34) + ",") + i35) + ",") + i36);
        FuzzerUtils.out.println((((("i37 l2 iArr3 = " + i37) + ",") + l2) + ",") + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println((((("Test.instanceCount dFld Test.bFld = " + Test.instanceCount) + ",") + Double.doubleToLongBits(dFld)) + ",") + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println((((("Test.dFld1 Test.sFld Test.lFld = " + Double.doubleToLongBits(Test.dFld1)) + ",") + Test.sFld) + ",") + Test.lFld);
        FuzzerUtils.out.println((((("Test.byFld Test.lArrFld Test.byArrFld = " + Test.byFld) + ",") + FuzzerUtils.checkSum(Test.lArrFld)) + ",") + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            {
                final long ax$31 = Test.instanceCount;
                try {
                    BigInteger ax$23 = null;
                    BigInteger ax$25 = new BigInteger("85070591730234615847396907784232501249");
                    BigInteger ax$26 = new BigInteger("85070591730234615847396907784232501249");
                    int ax$28 = 0xffff;
                    BigInteger ax$29 = null;
                    for (int ax$22 = -937; ax$22 < (-937 + 17560); ax$22 += 1) {
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            instanceCount = Long.divideUnsigned(ax$26.longValue(), ax$25.longValue());
                            ax$29 = ax$26.divide(ax$25);
                            if (instanceCount != ax$29.longValue()) {
                                ax$28++;
                            }
                            instanceCount = Long.remainderUnsigned(ax$26.longValue(), ax$25.longValue());
                            ax$23 = ax$26.remainder(ax$25);
                            if (instanceCount != ax$23.longValue()) {
                                ax$28++;
                            }
                        } catch (Throwable ax$30) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                    }
                } finally {
                    Test.instanceCount = ax$31;
                }
            }
            for (int i = 0; i < 10; i++) {
                {
                    final int ax$53 = i;
                    try {
                        int[] ax$39 = new int[]{ 1, 3 };
                        AtomicIntegerArray ax$48 = null;
                        for (int ax$38 = -261; ax$38 < (-261 + 17974); ax$38 += 1) {
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                for (int ax$42 = 0; ax$42 <= i; ax$42++) {
                                    ax$39[ax$42] += 1;
                                }
                                for (int ax$43 = i; ax$43 >= 0; ax$43--) {
                                    ax$39[ax$43] += 1;
                                }
                                for (int ax$44 = i + 1; ax$44 < i; ax$44++) {
                                    ax$39[ax$44] += 1;
                                }
                                for (int ax$45 = i - 1; ax$45 >= (i + 1); ax$45--) {
                                    ax$39[ax$45] += 1;
                                }
                            } catch (Throwable ax$46) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                            Test.ax$32 = true;
                            _instance.mainTest(new String[]{ "s", "s", "s" });
                            Test.ax$32 = false;
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                for (int ax$51 = 0; ax$51 < (i - i); ax$51 += 1) {
                                    ax$48.lazySet(ax$51 + i, i);
                                }
                            } catch (Throwable ax$52) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                        }
                    } finally {
                        i = ax$53;
                    }
                }
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$32 = false;

    static Boolean ax$54 = false;
}
