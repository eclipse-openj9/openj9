// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -7312230627688397433L;

    public static short sFld = 32202;

    public static int iFld = 7;

    public int iFld1 = -224;

    public static int[] iArrFld = new int[N];

    public long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 8);
    }

    public static long fMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4) {
        {
            java.io.PrintStream ax$0 = System.out;
            java.io.PrintStream ax$1 = System.err;
            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$2);
            System.setErr(ax$2);
            {
                boolean ax$4 = false;
                for (int ax$3 = -1764; ax$3 < 7561; ax$3 += 7) {
                    if (!ax$4) {
                        ax$4 = true;
                        {
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                            i4 <<= i4;
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                        }
                    }
                }
            }
            System.setOut(ax$0);
            System.setErr(ax$1);
        }
        vMeth1_check_sum += i4;
    }

    public static void vMeth(float f1) {
        int i3 = -12, i5 = -7, i6 = -3, i7 = 206, i8 = 111, i9 = 50378, iArr1[] = new int[N];
        boolean b = true;
        short s = -9471;
        double d = -110.29799;
        float[] fArr = new float[N];
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr1, 229);
        FuzzerUtils.init(fArr, 119.453F);
        FuzzerUtils.init(byArr, (byte) 84);
        i3 &= (++i3);
        vMeth1(-38691);
        i5 = 1;
        while (++i5 < 186) {
            try {
                i3 = (iArr1[i5 + 1] % -511556968);
                iArr1[i5 - 1] = (i5 % -1221162615);
                i3 = (i5 % i5);
            } catch (ArithmeticException a_e) {
            }
            fArr = fArr;
            b = b;
            for (i6 = 1; i6 < 3; ++i6) {
                i3 += (int) Test.instanceCount;
                for (i8 = 1; i8 < 2; ++i8) {
                    byte by = 86;
                    s = (short) 210;
                    f1 -= i5;
                    i7 -= i9;
                    Test.instanceCount += (i8 * i9);
                    i3 = (int) 27.45397;
                    Test.instanceCount = (long) f1;
                    i7 *= i8;
                    switch(((i8 >>> 1) % 2) + 41) {
                        case 41:
                            Test.instanceCount = i5;
                            i7 = by;
                            i7 >>= i6;
                            i9 -= (int) 10.784F;
                            i3 = i9;
                            iArr1[i8 - 1] ^= i6;
                            i9 = i9;
                            Test.instanceCount = Test.instanceCount;
                            iArr1[i8 + 1] >>>= -52518;
                            break;
                        case 42:
                            Test.instanceCount += i9;
                            i7 = -18361;
                            f1 += Test.instanceCount;
                            byArr[i6 - 1] = (byte) d;
                            break;
                    }
                    i3 = 159;
                    i7 *= i9;
                    byArr[i5] += (byte) 1.93F;
                    switch((((i8 >>> 1) % 1) * 5) + 91) {
                        case 93:
                            if (true)
                                continue;
                            i9 = (int) f1;
                            break;
                        default:
                            i7 = i3;
                    }
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i3 + i5 + (b ? 1 : 0) + i6 + i7 + i8 + i9 + s + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(byArr);
    }

    public static float fMeth(float f, int i1, int i2) {
        int i10 = 53140, i11 = -114, i12 = -7, i13 = 14, i14 = 2132;
        byte by1 = -8, byArr1[][] = new byte[N][N];
        float f2 = -77.384F;
        boolean b1 = true;
        double d1 = 0.100222;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, 198L);
        FuzzerUtils.init(byArr1, (byte) -23);
        Test.instanceCount = (long) ((-(Test.instanceCount -= i1)) % (((long) (-94.120F - (Test.instanceCount - f))) | 1));
        vMeth(f);
        for (i10 = 6; i10 < 117; ++i10) {
            for (i12 = 1; i12 < 5; ++i12) {
                switch((((i13 >>> 1) % 1) * 5) + 29) {
                    case 32:
                        i2 *= i2;
                        f -= i10;
                        if (b1) {
                            by1 -= (byte) Test.sFld;
                            i13 -= (int) f;
                            for (f2 = 1; 2 > f2; f2++) {
                                Test.iArrFld[(int) (f2)] *= -66;
                                Test.iFld += (int) 1.28926;
                                Test.instanceCount = Test.instanceCount;
                                Test.iFld += i2;
                                i11 = (int) Test.instanceCount;
                                if (b1)
                                    continue;
                                lArr[i10 + 1] = -152;
                                Test.iArrFld = Test.iArrFld;
                                i13 -= 31;
                                i2 = (int) Test.instanceCount;
                                switch(((7 >>> 1) % 4) + 60) {
                                    case 60:
                                        i1 -= (int) f;
                                        d1 *= d1;
                                        i13 = 60687;
                                        Test.instanceCount *= i13;
                                        i1 = Test.iFld;
                                        Test.iArrFld[i10] <<= (int) Test.instanceCount;
                                        Test.iFld = (int) -2614127195L;
                                        i14 = i1;
                                        Test.sFld = (short) 1.5F;
                                        i13 = i2;
                                        Test.instanceCount = 4;
                                        switch((int) (((f2 % 10) * 5) + 43)) {
                                            case 71:
                                                if (b1) {
                                                    Test.iFld >>= Test.iFld;
                                                } else {
                                                    d1 += f2;
                                                }
                                                break;
                                            case 80:
                                                i14 += (int) (((f2 * i10) + i1) - i11);
                                                break;
                                            case 52:
                                                Test.iArrFld[i12] += Test.iFld;
                                                break;
                                            case 55:
                                                i2 += (int) (f2 * f2);
                                            case 86:
                                                i14 += (int) (((f2 * i2) + i11) - i11);
                                                break;
                                            case 68:
                                                i14 = 11;
                                                break;
                                            case 62:
                                                i2 -= Test.iFld;
                                                break;
                                            case 56:
                                                Test.iFld |= i10;
                                                break;
                                            case 70:
                                                i2 = (int) d1;
                                            case 76:
                                                i14 = -10;
                                                break;
                                            default:
                                                i14 = i12;
                                        }
                                        break;
                                    case 61:
                                        Test.iFld |= i13;
                                    case 62:
                                        try {
                                            Test.iArrFld[i10 + 1] = (i12 / -17943);
                                            i14 = (i12 / i1);
                                            i14 = (-13590 % i12);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        break;
                                    case 63:
                                        i14 = by1;
                                    default:
                                        i2 = i14;
                                }
                            }
                        } else if (true) {
                            byArr1[i10][i10 + 1] = (byte) i1;
                        }
                        break;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + i2 + i10 + i11 + i12 + i13 + by1 + Float.floatToIntBits(f2) + i14 + (b1 ? 1 : 0) + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr1);
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -149, i16 = 6, i17 = -44423, i18 = -226, i19 = -94, i20 = 34987, i21 = -9248, i22 = -197, i23 = -5, i24 = -1, i25 = -6, i27 = -11, i28 = -60030, i29 = -3, i30 = 6822, iArr[] = new int[N];
        float f3 = 2.42F, fArr1[] = new float[N];
        long l = 3793039168L;
        double d2 = 81.97641;
        byte by2 = 116, byArr2[] = new byte[N];
        boolean b2 = false, bArr[][] = new boolean[N][N];
        FuzzerUtils.init(iArr, 26991);
        FuzzerUtils.init(fArr1, -2.968F);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(byArr2, (byte) 84);
        iArr[(i >>> 1) % N] = (int) (fMeth(f3, Test.iFld, i) * i);
        for (int i15 : iArr) {
            for (l = 1; l < 20; ++l) {
                i15 = Test.sFld;
                i15 -= -157;
                d2 += Test.instanceCount;
                try {
                    i = (i15 % -7702);
                    i = (-1643232252 % i15);
                    i15 = (Test.iArrFld[(int) (l + 1)] / 57831);
                } catch (ArithmeticException a_e) {
                }
                Test.sFld += (short) (l | Test.iFld);
                for (i17 = (int) (l); i17 < 2; ++i17) {
                    Test.iArrFld[i17 + 1] -= i17;
                    Test.iArrFld = Test.iArrFld;
                    lArrFld[i17] = (long) 1.359F;
                    Test.iFld = i17;
                    i18 *= (int) 102.532F;
                    i += i18;
                    f3 += 8959;
                    Test.instanceCount += i17;
                    Test.instanceCount &= Test.instanceCount;
                    lArrFld[(int) (l + 1)] = i17;
                    Test.instanceCount = -28103;
                    Test.instanceCount = -64144L;
                }
                by2 -= (byte) -111.39F;
                Test.instanceCount += (long) d2;
                i19 = 1;
                do {
                    Test.instanceCount <<= i15;
                    if (b2)
                        continue;
                } while (++i19 < 2);
                {
                    java.io.PrintStream ax$12 = System.out;
                    java.io.PrintStream ax$13 = System.err;
                    java.io.PrintStream ax$14 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$14);
                    System.setErr(ax$14);
                    try {
                        for (int ax$10 = -109; ax$10 < 7313; ax$10 += 1) {
                            try {
                                short[] ax$6 = new short[] { 20, 10, 0, -10, -20 };
                                short[] ax$5 = new short[] { 20, 10, 0, -10, -20 };
                                short[] ax$8 = new short[] { 20, 10, 0, -10, -20 };
                                for (int ax$7 = 0; ax$7 < ax$8.length; ax$7 += 1) {
                                    ax$8[ax$7] = (short) (ax$5[ax$7] & ax$6[ax$7]);
                                }
                            } catch (Throwable ax$9) {
                            } finally {
                            }
                        }
                    } catch (Throwable ax$11) {
                    }
                    System.setOut(ax$12);
                    System.setErr(ax$13);
                }
                f3 += (l * l);
            }
            switch(((i15 >>> 1) % 2) + 91) {
                case 91:
                    fArr1[(i17 >>> 1) % N] = i17;
                    b2 = b2;
                    bArr = FuzzerUtils.boolean2array(N, (boolean) false);
                    i = (int) Test.instanceCount;
                    if (b2)
                        continue;
                    if (b2)
                        break;
                    Test.iFld -= (int) 117L;
                    i18 -= i18;
                    for (i20 = 1; i20 < 20; ++i20) {
                        for (i22 = 1; i22 < 2; ++i22) {
                            i <<= 144;
                            lArrFld[i22 - 1] = i20;
                            i21 += i;
                            by2 += (byte) (((i22 * Test.sFld) + Test.instanceCount) - f3);
                        }
                        for (i24 = i20; i24 < 2; ++i24) {
                            i25 += (-11 + (i24 * i24));
                            i16 *= (int) f3;
                            i -= Test.sFld;
                            Test.instanceCount *= (long) f3;
                            Test.instanceCount += (((i24 * by2) + i21) - i17);
                            Test.instanceCount += (i24 * i18);
                            Test.sFld += (short) i24;
                        }
                        lArrFld[i20] = l;
                        iArr[i20] *= (int) f3;
                    }
                    byArr2[(iFld1 >>> 1) % N] = (byte) i22;
                    Test.instanceCount *= 197;
                    Test.iArrFld[(i20 >>> 1) % N] += i18;
                    for (i27 = 1; i27 < 20; i27++) {
                        i23 *= (int) d2;
                        i15 = i16;
                        Test.instanceCount += i27;
                        for (i29 = 1; i29 < 2; i29++) {
                            i23 >>= Test.iFld;
                            i16 += (int) d2;
                            iFld1 += (int) (3216521439L + (i29 * i29));
                            Test.instanceCount -= (long) f3;
                            lArrFld[i27 + 1] *= iFld1;
                            i15 += i25;
                            d2 = i27;
                            Test.instanceCount = 71;
                            d2 *= d2;
                            Test.instanceCount += Test.instanceCount;
                            Test.instanceCount = i24;
                        }
                        Test.iArrFld[i27 - 1] = i21;
                        b2 = false;
                        i15 += (-228 + (i27 * i27));
                        i28 += i27;
                    }
                    break;
                case 92:
                    f3 *= i24;
            }
        }
        FuzzerUtils.out.println("i f3 l = " + i + "," + Float.floatToIntBits(f3) + "," + l);
        FuzzerUtils.out.println("i16 d2 i17 = " + i16 + "," + Double.doubleToLongBits(d2) + "," + i17);
        FuzzerUtils.out.println("i18 by2 i19 = " + i18 + "," + by2 + "," + i19);
        FuzzerUtils.out.println("b2 i20 i21 = " + (b2 ? 1 : 0) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i27 i28 = " + i25 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 iArr = " + i29 + "," + i30 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("fArr1 bArr byArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," + FuzzerUtils.checkSum(bArr) + "," + FuzzerUtils.checkSum(byArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.iFld = " + Test.instanceCount + "," + Test.sFld + "," + Test.iFld);
        FuzzerUtils.out.println("iFld1 Test.iArrFld lArrFld = " + iFld1 + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            {
                java.io.PrintStream ax$15 = System.out;
                java.io.PrintStream ax$16 = System.err;
                java.io.PrintStream ax$17 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$17);
                System.setErr(ax$17);
                {
                    boolean ax$23 = false;
                    for (int ax$22 = -3000; ax$22 < 3986; ax$22 += 8) {
                        if (!ax$23) {
                            ax$23 = true;
                            {
                                System.setOut(ax$15);
                                System.setErr(ax$16);
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                                System.setOut(ax$17);
                                System.setErr(ax$17);
                            }
                        }
                        int ax$20 = iFld;
                        try {
                            int[] ax$18 = { 10, 20, 45, 38, 88 };
                            int ax$19 = 0x7fff0000;
                            iFld += ax$18[ax$19];
                        } catch (Throwable ax$21) {
                        } finally {
                            iFld = ax$20;
                        }
                    }
                }
                System.setOut(ax$15);
                System.setErr(ax$16);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  fMeth ->  fMeth mainTest
// DEBUG  vMeth ->  vMeth fMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
