// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.net.DatagramPacket;
import java.net.IDN;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -137L;

    public static volatile double dFld = 0.3875;

    public static boolean bFld = false;

    public static volatile byte byFld = -37;

    public static int iFld = 47126;

    public static volatile float fFld = -52.269F;

    public int iFld1 = 5;

    public static short sFld = -24256;

    public static double[] dArrFld = new double[N];

    public static long[] lArrFld = new long[N];

    public static volatile float[] fArrFld = new float[N];

    public byte[] byArrFld = new byte[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 42.72373);
        FuzzerUtils.init(Test.lArrFld, -57179L);
        FuzzerUtils.init(Test.fArrFld, 97.189F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, int i5, long l) {
        if (ax$517) {
            try {
                final int ax$518 = Integer.MAX_VALUE;
                final int ax$519 = 1;
                new DatagramPacket(new byte[1024], ax$518, ax$519);
            } catch (Throwable ax$520) {
            } finally {
            }
            return;
        }
        int i6 = 57953, i7 = 58976, i8 = 3, i9 = -3, i10 = -191, i11 = -19761, i12 = -63632, i13 = -3, iArr1[] = new int[N];
        byte by = -81;
        boolean b = false, bArr[] = new boolean[N];
        float f1 = -29.615F, fArr[] = new float[N];
        FuzzerUtils.init(iArr1, -63795);
        FuzzerUtils.init(fArr, -1.35F);
        FuzzerUtils.init(bArr, true);
        for (i6 = 4; i6 < 159; i6++) {
            for (i8 = 1; i8 < 4; ++i8) {
                l += i5;
                Test.instanceCount <<= i7;
                i5 = (int) Test.instanceCount;
            }
            switch(((i4 >>> 1) % 2) + 67) {
                case 67:
                    i7 = i6;
                    for (i10 = 1; i10 < 4; i10++) {
                        for (i12 = 1; i12 < 2; ++i12) {
                            by += (byte) (-10 + (i12 * i12));
                            Test.dArrFld[i12 - 1] += i13;
                            i7 <<= (int) -28861L;
                            i5 += (int) l;
                            if (b) {
                                i11 = i12;
                                i7 <<= (int) Test.instanceCount;
                                vMeth2_check_sum += i4 + i5 + l + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + by + (b ? 1 : 0) + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr);
                                return;
                            } else if (b) {
                                Test.instanceCount = -24;
                                iArr1[i12 + 1] += i5;
                                i11 = i4;
                                b = b;
                                if (i5 != 0) {
                                    vMeth2_check_sum += i4 + i5 + l + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + by + (b ? 1 : 0) + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr);
                                    return;
                                }
                            } else {
                                i5 = (int) -1056234051305428014L;
                                iArr1 = iArr1;
                                Test.instanceCount *= l;
                                i7 = (int) Test.dFld;
                                fArr[i12 - 1] = (float) 75.73216;
                                Test.dFld = -13L;
                                i13 <<= i12;
                                Test.dArrFld[i12 + 1] += i11;
                                l = -57329;
                            }
                            l &= i9;
                            switch(((i12 % 1) * 5) + 59) {
                                case 62:
                                    Test.instanceCount += 14561;
                                    f1 = i6;
                                    Test.lArrFld[i12] = (long) Test.dFld;
                                    i4 += (i12 * i4);
                                    bArr[i12 - 1] = b;
                                    break;
                            }
                        }
                    }
                case 68:
                    if (b)
                        break;
            }
        }
        vMeth2_check_sum += i4 + i5 + l + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + by + (b ? 1 : 0) + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1(float f) {
        if (ax$526) {
            int ax$529 = iFld;
            try {
                int ax$527 = 4175;
                // it's non-deterministic.
                if (iFld != 1) {
                    for (int ax$528 = 0; ax$528 < ax$527; ++ax$528) {
                    }
                }
            } catch (Throwable ax$530) {
            } finally {
                iFld = ax$529;
            }
            return;
        }
        int i3 = -5, i14 = 56301, i15 = 57905, i16 = -43423, i17 = 37157, i18 = 30786, i19 = 47902, i20 = 33772, i21 = 4, iArr[] = new int[N];
        byte by1 = 124;
        float[] fArr1 = new float[N];
        FuzzerUtils.init(iArr, 4);
        FuzzerUtils.init(fArr1, 73.693F);
        iArr[(i3 >>> 1) % N] -= (int) Test.instanceCount;
        {
            java.io.PrintStream ax$523 = System.out;
            java.io.PrintStream ax$524 = System.err;
            java.io.PrintStream ax$525 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$525);
            System.setErr(ax$525);
            try {
                ax$517 = true;
                for (int ax$521 = 0; ax$521 < 6780; ax$521 += 1) vMeth2(78933226, -863931905, 7706617076055811231L);
            } catch (java.lang.Throwable ax$522) {
            } finally {
                ax$517 = false;
            }
            System.setOut(ax$523);
            System.setErr(ax$524);
        }
        vMeth2(i3, 6, Test.instanceCount);
        i3 <<= i3;
        for (i14 = 5; i14 < 209; ++i14) {
            i3 |= i3;
            i15 += (i14 * i15);
            for (i16 = 1; i16 < 3; ++i16) {
                i15 = (int) Test.instanceCount;
                Test.dArrFld[i16] -= i17;
                i15 = i14;
                for (i18 = 1; 2 > i18; i18++) {
                    Test.dFld = i16;
                    iArr[i16 + 1] = -1;
                    i17 += (i18 * Test.instanceCount);
                    i17 >>>= i3;
                    iArr[i18] += (int) f;
                    i19 += -85;
                    Test.bFld = Test.bFld;
                    i17 += (((i18 * Test.instanceCount) + i14) - Test.instanceCount);
                    by1 >>= (byte) i18;
                    f = by1;
                    if (false)
                        break;
                    if (Test.bFld)
                        break;
                    Test.instanceCount += (((i18 * i15) + Test.instanceCount) - i14);
                }
                Test.instanceCount -= (long) Test.dFld;
                if (true)
                    continue;
                i17 += (int) (-85.78F + (i16 * i16));
                i3 *= (int) 37.56828;
                iArr[i16 + 1] += (int) Test.instanceCount;
                i19 += (-14 + (i16 * i16));
                Test.instanceCount += (i16 * i16);
            }
            i17 = i15;
            fArr1[i14 - 1] = f;
            i3 += i14;
            for (i20 = i14; i20 < 3; ++i20) {
                Test.dFld = i19;
                i19 += i15;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i3 + i14 + i15 + i16 + i17 + i18 + i19 + by1 + i20 + i21 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth(int i2) {
        float f2 = 0.303F, fArr2[] = new float[N];
        int i22 = 13077, i23 = -100, i24 = -13, i25 = -2, i26 = 3, i27 = 34343, iArr2[] = new int[N];
        short s = 8338;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr2, -3);
        FuzzerUtils.init(byArr, (byte) -45);
        FuzzerUtils.init(fArr2, 2.614F);
        {
            java.io.PrintStream ax$533 = System.out;
            java.io.PrintStream ax$534 = System.err;
            java.io.PrintStream ax$535 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$535);
            System.setErr(ax$535);
            try {
                ax$526 = true;
                for (int ax$531 = 0; ax$531 < 6358; ax$531 += 1) vMeth1((float) 0.2752941752360031);
            } catch (java.lang.Throwable ax$532) {
            } finally {
                ax$526 = false;
            }
            System.setOut(ax$533);
            System.setErr(ax$534);
        }
        vMeth1(f2);
        for (i22 = 5; i22 < 163; ++i22) {
            i2 += (i22 - i2);
            iArr2[i22] = 0;
            i2 += (i22 * Test.byFld);
            i23 -= i2;
            f2 -= (float) Test.dFld;
            byArr[i22] = (byte) i23;
            Test.instanceCount -= i23;
            i23 += (int) f2;
            i2 = i2;
            f2 += (61307 + (i22 * i22));
            for (i24 = 1; i24 < 4; i24++) {
                Test.instanceCount += i25;
                i2 = -165;
                Test.byFld += (byte) (i24 + i25);
                i26 = 1;
                do {
                    i23 = (int) f2;
                    i2 += (i26 * i26);
                    i23 = i25;
                    iArr2[i22 + 1] = (int) Test.instanceCount;
                    i25 = s;
                    f2 *= i24;
                    Test.bFld = Test.bFld;
                    i2 += (-2278 + (i26 * i26));
                    iArr2[i22 + 1] *= (int) f2;
                } while (++i26 < 2);
                i25 += (i24 * f2);
                i2 *= Test.iFld;
                fArr2[i24 + 1] = i27;
                i27 += i2;
                if (Test.bFld) {
                    switch((i24 % 1) + 125) {
                        case 125:
                            byArr[i24 + 1] += (byte) i2;
                            i23 -= i2;
                            i2 += (((i24 * i24) + s) - i27);
                            i23 = (int) 57L;
                            i23 += i27;
                            break;
                        default:
                            iArr2[i22] += i22;
                    }
                } else {
                    i27 = Test.iFld;
                    vMeth_check_sum += i2 + Float.floatToIntBits(f2) + i22 + i23 + i24 + i25 + i26 + s + i27 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
                    return;
                }
            }
        }
        {
            java.io.PrintStream ax$514 = System.out;
            java.io.PrintStream ax$515 = System.err;
            java.io.PrintStream ax$516 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$516);
            System.setErr(ax$516);
            try {
                for (int ax$512 = -3895; ax$512 < 3965; ax$512 += 1) {
                    long ax$509 = vMeth1_check_sum;
                    long ax$510 = vMeth2_check_sum;
                    try {
                        if (vMeth1_check_sum != vMeth2_check_sum)
                            ;
                    } catch (Throwable ax$511) {
                    } finally {
                        vMeth1_check_sum = ax$509;
                        vMeth2_check_sum = ax$510;
                    }
                }
            } catch (Throwable ax$513) {
            }
            System.setOut(ax$514);
            System.setErr(ax$515);
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f2) + i22 + i23 + i24 + i25 + i26 + s + i27 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
    }

    public void mainTest(String[] strArr1) {
        int i = 47411, i1 = 170, i28 = 21082, i29 = 6479, i30 = 7, i31 = 44207, i32 = 6, i33 = -232, iArr3[][] = new int[N][N];
        short[][] sArr = new short[N][N];
        FuzzerUtils.init(iArr3, 85);
        FuzzerUtils.init(sArr, (short) -23040);
        for (i = 3; i < 204; ++i) {
            vMeth(Test.iFld);
            for (i28 = i; i28 < 25; ++i28) {
                i1 >>= (int) 32L;
                Test.iFld = i29;
                Test.bFld = Test.bFld;
                Test.instanceCount += Test.instanceCount;
                i1 >>= 30607;
                i29 *= i;
                Test.fFld *= (float) -1.94313;
                i30 = 1;
                do {
                    i29 = 90;
                    iArr3[i28 - 1][i + 1] += i;
                    Test.instanceCount = -30758;
                    Test.fFld += Test.iFld;
                    Test.iFld = (int) Test.instanceCount;
                    Test.instanceCount <<= i28;
                    sArr[i30 + 1] = sArr[i];
                    i1 += i30;
                    Test.fArrFld[i] = i29;
                    Test.fFld /= 3;
                    Test.bFld = false;
                    Test.instanceCount = Test.iFld;
                } while (--i30 > 0);
                Test.iFld = i1;
                if (true) {
                    Test.iFld <<= i31;
                } else {
                    switch(((i28 % 1) * 5) + 23) {
                        case 28:
                            iFld1 = Test.iFld;
                            Test.sFld = (short) i30;
                            i1 >>= i29;
                            Test.instanceCount *= 2939985805L;
                            Test.byFld += (byte) (i28 * i28);
                            Test.lArrFld[i28] = i29;
                            i31 += (((i28 * i1) + i28) - i31);
                            i29 >>= i28;
                            i29 ^= Test.sFld;
                            Test.fFld = -3;
                            i29 *= (int) Test.dFld;
                            i29 = i31;
                            iFld1 = i31;
                            break;
                        default:
                            Test.iFld = (int) 2.790F;
                            if (Test.bFld)
                                break;
                            for (i32 = 1; i32 < 1; ++i32) {
                                iFld1 += Test.iFld;
                                Test.iFld = 14;
                                if (true)
                                    break;
                                Test.instanceCount -= Test.iFld;
                                Test.lArrFld[i28] = i33;
                                iArr3[i][i28 + 1] -= iFld1;
                                i31 -= i29;
                                switch(((i32 % 5) * 5) + 14) {
                                    case 20:
                                        iArr3[i32][i28] = i;
                                        iArr3[i28 - 1][i32 + 1] = i28;
                                        Test.fFld += (((i32 * Test.instanceCount) + Test.sFld) - Test.fFld);
                                        iArr3[i28][i - 1] /= (int) ((long) (Test.fFld) | 1);
                                        i1 += (((i32 * Test.fFld) + i31) - i33);
                                        Test.lArrFld[i28] -= i32;
                                        iArr3[i32][i + 1] ^= i28;
                                        i29 = -57190;
                                        if (Test.bFld)
                                            continue;
                                        if (Test.bFld) {
                                            Test.fArrFld[i32] = Test.instanceCount;
                                            Test.lArrFld = Test.lArrFld;
                                            i33 = Test.iFld;
                                            Test.instanceCount <<= 52078;
                                            i29 = (int) -35.70273;
                                            Test.fFld -= i32;
                                            Test.instanceCount += i30;
                                        } else {
                                            i1 = iFld1;
                                        }
                                        Test.instanceCount += i28;
                                        Test.lArrFld[i28 + 1] = 31018;
                                        byArrFld[i28 - 1] = (byte) Test.instanceCount;
                                    case 21:
                                        i31 += (int) Test.fFld;
                                        Test.iFld += iFld1;
                                        Test.iFld += (28500 + (i32 * i32));
                                        break;
                                    case 34:
                                        iFld1 = i30;
                                        break;
                                    case 15:
                                        i31 -= i28;
                                    case 16:
                                        Test.iFld = i29;
                                        break;
                                }
                            }
                    }
                }
            }
        }
        FuzzerUtils.out.println("i i1 i28 = " + i + "," + i1 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 iArr3 = " + i32 + "," + i33 + "," + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld Test.iFld Test.fFld = " + Test.byFld + "," + Test.iFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("iFld1 Test.sFld Test.dArrFld = " + iFld1 + "," + Test.sFld + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.lArrFld Test.fArrFld byArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(byArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$536) {
            try {
                java.lang.String ax$537 = "; expected an arithmetic exception: ";
                IDN.toASCII(ax$537);
            } catch (Throwable ax$538) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$517 = false;

    private static Boolean ax$526 = false;

    private static Boolean ax$536 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
