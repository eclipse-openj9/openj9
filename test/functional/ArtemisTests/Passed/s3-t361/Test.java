// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.nio.channels.AsynchronousSocketChannel;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 7L;

    public static short sFld = -18823;

    public static float fFld = 0.695F;

    public static boolean bFld = true;

    public static float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 36.44F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth(int i2, byte by) {
        int i3 = -250, i4 = 184, i5 = -11, i6 = -4, i7 = -58, iArr1[] = new int[N];
        double d = 70.107844;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(lArr1, -34883L);
        FuzzerUtils.init(iArr1, -44156);
        lArr1[(i2 >>> 1) % N] = i2;
        for (i3 = 1; i3 < 152; i3++) {
            for (i5 = 1; 4 > i5; i5++) {
                Test.instanceCount -= i6;
                i7 = 1;
                while (++i7 < 2) {
                    i6 >>= (int) Test.instanceCount;
                    i4 += (i7 | i6);
                    iArr1 = iArr1;
                    Test.instanceCount = i2;
                    lArr1[i7 + 1] -= 1L;
                }
                lArr1[i3] *= i6;
                i4 += i5;
            }
            i4 += i3;
            d -= 1.925F;
        }
        long meth_res = i2 + by + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth1() {
        int i1 = 22, iArr[] = new int[N];
        byte by1 = 101;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, -7941L);
        FuzzerUtils.init(iArr, 5940);
        lArr[(i1 >>> 1) % N] *= i1;
        iArr[(i1 >>> 1) % N] ^= (int) lMeth(i1, by1);
        vMeth1_check_sum += i1 + by1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {
        int i = -235, i8 = -14, i9 = 45525, i10 = -207, i11 = -52895, i12 = 14, i13 = -41947, i14 = 147, i15 = -224, iArr2[] = new int[N];
        long[] lArr2 = new long[N];
        double[] dArr = new double[N];
        FuzzerUtils.init(lArr2, -14L);
        FuzzerUtils.init(dArr, 69.118165);
        FuzzerUtils.init(iArr2, 145);
        i = 1;
        while (++i < 134) {
            vMeth1();
            i8 -= (int) Test.instanceCount;
            i8 = i;
            Test.instanceCount &= -14087;
            lArr2[i - 1] &= i8;
        }
        i8 = -13;
        for (i9 = 5; i9 < 117; i9++) {
            i10 >>= i10;
            i10 *= i;
            for (i11 = 1; i11 < 5; ++i11) {
                dArr[i11] *= i12;
                i13 = 1;
                while (++i13 < 2) {
                    try {
                        i10 = (i12 / 106);
                        i8 = (i9 / 92);
                        i10 = (i9 / i11);
                    } catch (ArithmeticException a_e) {
                    }
                    Test.sFld -= (short) 2819314827L;
                    {
                        java.io.PrintStream ax$0 = System.out;
                        java.io.PrintStream ax$1 = System.err;
                        java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$2);
                        System.setErr(ax$2);
                        {
                            boolean ax$4 = false;
                            for (int ax$3 = -4374; ax$3 < 3502; ax$3 += 7) {
                                if (!ax$4) {
                                    ax$4 = true;
                                    {
                                        System.setOut(ax$0);
                                        System.setErr(ax$1);
                                        switch((i9 % 9) + 10) {
                                            case 10:
                                                Test.fFld += (i13 + i10);
                                                Test.instanceCount = i10;
                                                i8 -= i8;
                                                iArr2[i13] = i11;
                                                Test.instanceCount += i12;
                                                Test.instanceCount |= -27;
                                                Test.fFld = i8;
                                                i10 -= (int) -31433L;
                                                iArr2[i11 + 1] = i;
                                                Test.fArrFld = Test.fArrFld;
                                                iArr2[i13] *= Test.sFld;
                                                i12 = i13;
                                                i10 -= i11;
                                                Test.fFld += (((i13 * i8) + i10) - i12);
                                                i10 -= i14;
                                            case 11:
                                                Test.sFld >>= (short) -3;
                                                i15 = 26;
                                                iArr2[i11 - 1] >>= i8;
                                                break;
                                            case 12:
                                                try {
                                                    iArr2[i11 + 1] = (i12 / i8);
                                                    i10 = (i10 % i12);
                                                    i8 = (i8 / 221);
                                                } catch (ArithmeticException a_e) {
                                                }
                                                i8 *= 6;
                                                i12 <<= Test.sFld;
                                            case 13:
                                                Test.bFld = Test.bFld;
                                                break;
                                            case 14:
                                                lArr2[i9] |= Test.instanceCount;
                                                break;
                                            case 15:
                                                Test.sFld = (short) i15;
                                                break;
                                            case 16:
                                            case 17:
                                                i12 >>= i12;
                                                break;
                                            case 18:
                                                i12 >>>= i11;
                                                break;
                                            default:
                                                i8 += (int) Test.instanceCount;
                                        }
                                        System.setOut(ax$2);
                                        System.setErr(ax$2);
                                    }
                                }
                            }
                        }
                        System.setOut(ax$0);
                        System.setErr(ax$1);
                    }
                }
            }
        }
        vMeth_check_sum += i + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {
        int i16 = 6, i17 = -1298, i18 = -35, i19 = -1958, i20 = 27863, i21 = 0, i22 = 36, i23 = -83, i24 = -11, i25 = -90, i26 = -15552, i27 = -158, iArr3[] = new int[N];
        double d1 = 52.72154, d2 = 2.62867;
        float f = -56.822F;
        byte by2 = 17, byArr[][] = new byte[N][N];
        long[] lArr3 = new long[N];
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(iArr3, -6);
        FuzzerUtils.init(lArr3, 55L);
        FuzzerUtils.init(byArr, (byte) 8);
        FuzzerUtils.init(bArr, false);
        vMeth();
        i16 -= i16;
        for (i17 = 9; i17 < 187; i17++) {
            i16 = (int) d1;
        }
        for (f = 11; 207 > f; ++f) {
            by2 = (byte) i17;
            Test.instanceCount += (long) (f * f);
        }
        i18 += i18;
        iArr3[(i16 >>> 1) % N] = (int) Test.instanceCount;
        i18 *= i17;
        i20 = 1;
        do {
            for (i21 = 2; i21 < 41; i21++) {
                i19 += (((i21 * Test.instanceCount) + Test.fFld) - by2);
                lArr3[(-53488 >>> 1) % N] = (long) Test.fFld;
                d1 *= i21;
                i16 += (int) Test.fFld;
                i18 <<= i19;
                iArr3[i21 + 1] <<= (int) -37862L;
            }
            for (i23 = 1; i23 < 41; ++i23) {
                for (i25 = 1; 2 > i25; i25++) {
                    d1 -= 216L;
                    if (false) {
                        i16 *= (int) f;
                        Test.instanceCount = 196;
                        i26 += i25;
                        Test.fArrFld[i20] -= i18;
                        d1 = -179;
                        i24 = (int) Test.instanceCount;
                        byArr = byArr;
                    } else {
                        if (false)
                            continue;
                        Test.fFld = Test.sFld;
                        i18 >>= i23;
                        d2 = d1;
                    }
                    i22 = (int) Test.fFld;
                    i16 >>>= -46770;
                    if (Test.bFld)
                        continue;
                    i18 >>= i23;
                    i18 = i26;
                    Test.instanceCount >>= i21;
                    Test.instanceCount = 2;
                    iArr3[(i24 >>> 1) % N] += i16;
                    if (Test.bFld) {
                        lArr3[i20 + 1] >>>= Test.instanceCount;
                        i26 >>>= i22;
                        i26 = i25;
                        Test.instanceCount %= (i17 | 1);
                        i16 *= -61530;
                        i22 += 53;
                        Test.fFld *= i20;
                        i22 /= (int) (Test.instanceCount | 1);
                        i26 *= i18;
                        i19 >>= i18;
                        i19 >>= 26772;
                    } else {
                        byArr[i23][i25 - 1] <<= (byte) 77;
                        i22 += (((i25 * i20) + i24) - i17);
                        i16 *= i26;
                        d2 = f;
                        Test.instanceCount = 7;
                        iArr3[i23 - 1] <<= i22;
                    }
                }
                i16 = i21;
                iArr3 = iArr3;
                i27 = 1;
                do {
                    i19 = i21;
                    i26 = i25;
                    i22 = i17;
                    Test.fFld = i25;
                    i26 *= 7;
                    Test.fFld = i20;
                    iArr3[(-10 >>> 1) % N] = by2;
                    bArr = FuzzerUtils.boolean1array(N, (boolean) true);
                    byArr[i27 - 1][i27 - 1] = by2;
                    i16 += (int) Test.instanceCount;
                } while (++i27 < 2);
                {
                    java.io.PrintStream ax$13 = System.out;
                    java.io.PrintStream ax$14 = System.err;
                    java.io.PrintStream ax$15 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$15);
                    System.setErr(ax$15);
                    try {
                        for (int ax$11 = -715; ax$11 < 8447; ax$11 += 1) {
                            float ax$8 = f;
                            float ax$9 = fFld;
                            try {
                                float ax$5 = 46.0f;
                                for (int ax$7 = 0; ax$7 < 12; ax$7++) {
                                    float ax$6 = ax$5;
                                    ax$5 = f;
                                    f = fFld;
                                    fFld = ax$6;
                                }
                            } catch (Throwable ax$10) {
                            } finally {
                                f = ax$8;
                                fFld = ax$9;
                            }
                        }
                    } catch (Throwable ax$12) {
                    }
                    System.setOut(ax$13);
                    System.setErr(ax$14);
                }
                Test.fFld += i21;
                Test.instanceCount += (i23 | i24);
                i26 += (i23 * i23);
            }
        } while (++i20 < 124);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("d1 f i19 = " + Double.doubleToLongBits(d1) + "," + Float.floatToIntBits(f) + "," + i19);
        FuzzerUtils.out.println("by2 i20 i21 = " + by2 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 d2 = " + i25 + "," + i26 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i27 iArr3 lArr3 = " + i27 + "," + FuzzerUtils.checkSum(iArr3) + "," + FuzzerUtils.checkSum(lArr3));
        FuzzerUtils.out.println("byArr bArr = " + FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld Test.fArrFld = " + (Test.bFld ? 1 : 0) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        {
            java.io.PrintStream ax$16 = System.out;
            java.io.PrintStream ax$17 = System.err;
            java.io.PrintStream ax$18 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$18);
            System.setErr(ax$18);
            {
                boolean ax$21 = false;
                for (int ax$20 = -1651; ax$20 < 6003; ax$20 += 2) {
                    if (!ax$21) {
                        ax$21 = true;
                        {
                            System.setOut(ax$16);
                            System.setErr(ax$17);
                            try {
                                Test _instance = new Test();
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                            } catch (Exception ex) {
                                FuzzerUtils.out.println(ex.getClass().getCanonicalName());
                            }
                            System.setOut(ax$18);
                            System.setErr(ax$18);
                        }
                    }
                    try {
                        AsynchronousSocketChannel.open();
                    } catch (Throwable ax$19) {
                    } finally {
                    }
                }
            }
            System.setOut(ax$16);
            System.setErr(ax$17);
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
