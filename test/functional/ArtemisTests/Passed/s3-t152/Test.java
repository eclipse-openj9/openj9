// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.math.BigDecimal;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 3891145233001762294L;

    public float fFld = 70.81F;

    public static int iFld = 59094;

    public static byte byFld = -116;

    public static float fFld1 = 0.424F;

    public boolean bFld = true;

    public short sFld = 1836;

    public static long lFld = -996015743356753321L;

    public volatile int iFld1 = -40912;

    public long lFld1 = -11L;

    public static volatile int[] iArrFld = new int[N];

    public static short[] sArrFld = new short[N];

    public static double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -4);
        FuzzerUtils.init(Test.sArrFld, (short) 5939);
        FuzzerUtils.init(Test.dArrFld, 0.40223);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {
        if (ax$0) {
            try {
                int ax$4 = 7 - 1;
                java.lang.String[][] ax$3 = new java.lang.String[2515][1];
                for (String[] ax$5 : ax$3) {
                    BigDecimal ax$1 = new BigDecimal(ax$5[0]);
                    String ax$2;
                    if (!(ax$2 = ax$1.toPlainString()).equals(ax$5[1])) {
                        ax$4++;
                    }
                    ax$1 = new BigDecimal("-" + ax$5[0]);
                    if (ax$1.signum() != 0 && !(ax$2 = (ax$1.toPlainString())).equals("-" + ax$5[1])) {
                        ax$4++;
                    }
                }
            } catch (Throwable ax$6) {
            } finally {
            }
            return;
        }
        int i2 = -49964, i3 = 0, i4 = -14, i5 = -6, i6 = -2, i7 = 227, i8 = 65, iArr[] = new int[N];
        boolean b = false, bArr[][] = new boolean[N][N];
        float f = -81.923F;
        double d = 99.40991;
        byte by = 66;
        short s = 21131;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr, 37145);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr1, 1L);
        iArr[(i2 >>> 1) % N] = i2;
        for (i3 = 6; i3 < 157; ++i3) {
            if (b)
                continue;
            for (i5 = 4; i5 > 1; --i5) {
                i6 += -63;
                i2 -= -12;
                for (i7 = 1; i7 < 2; ++i7) {
                    Test.instanceCount = i7;
                    i6 += (i7 * i7);
                    f = -13836;
                    i8 = i5;
                }
                if (b) {
                    iArr[i5] = i6;
                    i6 += i5;
                    iArr[i5 + 1] = i7;
                    i8 += 4;
                    i6 -= i7;
                    Test.instanceCount = i4;
                    i8 = 210;
                    i6 = i7;
                    if (i8 != 0) {
                        vMeth1_check_sum += i2 + i3 + i4 + (b ? 1 : 0) + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + by + s + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    if (b) {
                        iArr[i3 - 1] = i5;
                        f *= -1;
                        d += by;
                        Test.instanceCount += i8;
                        i8 -= (int) 410302218L;
                        bArr[i3 - 1][i5 + 1] = b;
                        i8 += (((i5 * i7) + Test.instanceCount) - Test.iFld);
                        f *= 9;
                        lArr1[i3 + 1] ^= i7;
                        s = (short) i6;
                        if (i2 != 0) {
                            vMeth1_check_sum += i2 + i3 + i4 + (b ? 1 : 0) + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + by + s + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1);
                            return;
                        }
                    } else if (b) {
                        Test.instanceCount = (long) f;
                        Test.iFld %= (int) (Test.instanceCount | 1);
                        i8 = (int) 1.94901;
                        i2 >>>= -58;
                    } else if (b) {
                        by *= (byte) f;
                    } else {
                        Test.instanceCount = i6;
                    }
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + (b ? 1 : 0) + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + by + s + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth() {
        int i9 = 1, i10 = 7, i11 = -52803;
        double d1 = 0.99894, d2 = -1.110676;
        float f1 = 1.35F;
        boolean b1 = false;
        long[] lArr2 = new long[N];
        short[] sArr = new short[N];
        FuzzerUtils.init(lArr2, -2122735178217713292L);
        FuzzerUtils.init(sArr, (short) 20289);
        {
            java.io.PrintStream ax$9 = System.out;
            java.io.PrintStream ax$10 = System.err;
            java.io.PrintStream ax$11 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$11);
            System.setErr(ax$11);
            try {
                ax$0 = true;
                for (int ax$7 = 0; ax$7 < 5913; ax$7 += 1) vMeth1();
            } catch (java.lang.Throwable ax$8) {
            } finally {
                ax$0 = false;
            }
            System.setOut(ax$9);
            System.setErr(ax$10);
        }
        vMeth1();
        for (i9 = 122; i9 > 7; --i9) {
            d1 = 1;
            do {
                if (Test.iFld != 0) {
                    vMeth_check_sum += i9 + i10 + Double.doubleToLongBits(d1) + i11 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(sArr);
                    return;
                }
                Test.iFld += (int) ((long) d1 | Test.instanceCount);
                i11 = 1;
                while ((i11 += 3) < 1) {
                    Test.instanceCount -= Test.iFld;
                    i10 *= -134;
                    i10 = Test.iFld;
                    Test.iArrFld[(int) (d1 - 1)] = 10;
                    Test.iFld -= -42992;
                    f1 += i9;
                    Test.iFld += (((i11 * i10) + Test.byFld) - i11);
                    i10 >>>= i10;
                    Test.iArrFld[(int) (d1 + 1)] /= -3;
                    i10 >>= i9;
                    switch(((i9 % 9) * 5) + 123) {
                        case 162:
                        case 156:
                            i10 <<= (int) Test.instanceCount;
                            lArr2[i9 + 1] += 1545664787L;
                            switch((i9 % 5) + 65) {
                                case 65:
                                    Test.iFld += (i11 * i11);
                                    Test.iArrFld[(int) (d1 + 1)] = Test.iFld;
                                    Test.instanceCount = i11;
                                    Test.iArrFld[i9 - 1] = -14288;
                                    break;
                                case 66:
                                    Test.instanceCount += (-14467 + (i11 * i11));
                                    Test.iFld = i10;
                                    Test.iArrFld[i11 - 1] -= (int) f1;
                                    Test.iFld += (int) Test.instanceCount;
                                    Test.iFld *= Test.iFld;
                                    break;
                                case 67:
                                    i10 -= 10;
                                    if (true)
                                        break;
                                    Test.iFld <<= -1853;
                                    Test.instanceCount -= Test.iFld;
                                    i10 >>= -24;
                                    Test.iFld += (i11 * i11);
                                    i10 = i10;
                                    Test.iFld -= (int) 0L;
                                case 68:
                                    d2 += Test.instanceCount;
                                    break;
                                case 69:
                                    Test.iArrFld[i11 + 1] = -25;
                                    break;
                            }
                        case 157:
                            Test.iFld *= i9;
                            break;
                        case 147:
                            i10 += (i11 * i10);
                        case 129:
                            sArr[i11] += (short) d1;
                        case 145:
                            Test.iFld += (i11 * i11);
                            break;
                        case 140:
                        case 127:
                            Test.iFld *= i11;
                            break;
                        case 128:
                            if (b1)
                                break;
                        default:
                            Test.iFld &= (int) Test.instanceCount;
                    }
                }
            } while (++d1 < 5);
        }
        vMeth_check_sum += i9 + i10 + Double.doubleToLongBits(d1) + i11 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth() {
        int i1 = 5, i12 = 0, i13 = 54055, i14 = -7370, i15 = 37251, i16 = -36679;
        double d3 = 62.34025;
        float f2 = -1.703F;
        short s1 = 15156;
        boolean b2 = false;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, 696746366996775879L);
        i1 -= (int) (lArr[(i1 >>> 1) % N]++);
        vMeth();
        for (i12 = 9; i12 < 216; ++i12) {
            i13 += (((i12 * i12) + i12) - Test.iFld);
            for (i14 = 1; i14 < 3; ++i14) {
                Test.fFld1 = i12;
                Test.iFld -= i13;
                Test.iArrFld[i12 - 1] |= i12;
                if (b2) {
                    i13 += -62619;
                    i15 *= (int) -1.880F;
                    Test.iArrFld[i14 - 1] += (int) d3;
                    Test.instanceCount -= i13;
                    Test.iFld = (int) Test.instanceCount;
                    Test.byFld += (byte) (((i14 * Test.instanceCount) + Test.instanceCount) - i1);
                } else if (true) {
                    Test.iArrFld = Test.iArrFld;
                    i15 = (int) Test.instanceCount;
                    i16 = 1;
                    do {
                        Test.iArrFld[i12 - 1] = i12;
                    } while (++i16 < 2);
                    i15 += (i14 + i13);
                    Test.instanceCount = Test.instanceCount;
                    lArr[i14] *= i12;
                    if (b2) {
                        d3 *= i14;
                        lArr[i12] -= i15;
                        switch((i12 % 2) + 118) {
                            case 118:
                                i13 -= i14;
                                f2 = 1;
                                while (++f2 < 2) {
                                    Test.iArrFld[i14 - 1] = i12;
                                    Test.iFld += (int) Test.instanceCount;
                                    Test.iArrFld[i12 + 1] <<= i15;
                                    Test.instanceCount += (182L + (f2 * f2));
                                    if (Test.iFld != 0) {
                                    }
                                    s1 += (short) ((long) f2 | (long) Test.fFld1);
                                    lArr = FuzzerUtils.long1array(N, (long) -8L);
                                    b2 = b2;
                                    Test.iFld /= (int) (Test.instanceCount | 1);
                                }
                                break;
                            case 119:
                                b2 = b2;
                                break;
                            default:
                                i15 = (int) d3;
                        }
                    } else {
                        i13 += (int) Test.fFld1;
                    }
                } else {
                    d3 %= (i15 | 1);
                }
            }
        }
        long meth_res = i1 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d3) + i16 + Float.floatToIntBits(f2) + s1 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = 14, i17 = 13, i18 = -5, i19 = -9, i20 = 153, i21 = -30849, i22 = -28191, i23 = 8;
        double d4 = 0.101243;
        long l = 6L, lArr3[] = new long[N];
        FuzzerUtils.init(lArr3, 6L);
        fFld -= (-((i++) + iMeth()));
        i = i;
        bFld = bFld;
        for (i17 = 215; i17 > 3; i17 -= 2) {
            Test.instanceCount = sFld;
            Test.iFld <<= (int) Test.instanceCount;
            d4 = 85.24777;
            Test.instanceCount = Test.instanceCount;
        }
        bFld = true;
        i19 = 1;
        while (++i19 < 143) {
            for (i20 = 35; i20 > 2; --i20) {
                for (l = i19; l < 2; l++) {
                    Test.byFld = (byte) -5L;
                    i22 += (int) Test.instanceCount;
                    i22 -= i17;
                    i22 = (int) Test.instanceCount;
                    try {
                        i21 = (Test.iFld / 50480);
                        i22 = (-954536317 % i22);
                        Test.iArrFld[(int) (l)] = (i % -23948);
                    } catch (ArithmeticException a_e) {
                    }
                    Test.iFld += (int) (((l * i22) + i20) - i);
                    Test.iArrFld[(int) (l)] = i18;
                    i22 += (int) (l + fFld);
                    Test.instanceCount += Test.instanceCount;
                    Test.iFld = i19;
                    Test.iFld = (int) l;
                    switch(((i18 >>> 1) % 4) + 87) {
                        case 87:
                            i *= i18;
                            Test.instanceCount = l;
                            i += i17;
                            Test.iArrFld[(int) (l - 1)] *= i19;
                            break;
                        case 88:
                            Test.iFld -= (int) -2.629F;
                            i21 = (int) Test.lFld;
                            Test.byFld += (byte) (l - i17);
                            i18 = i19;
                            iFld1 = (int) fFld;
                            iFld1 += Test.iFld;
                            Test.lFld = i;
                            i21 = (int) l;
                            i23 += (int) (((l * i18) + i23) - i);
                            if (bFld) {
                                i21 += (int) (l * l);
                                i ^= i17;
                                switch(((i19 % 2) * 5) + 95) {
                                    case 104:
                                        iFld1 -= i19;
                                        Test.iFld += (int) (((l * i20) + i19) - i);
                                        i |= i23;
                                        break;
                                    case 105:
                                }
                                switch((i19 % 10) + 3) {
                                    case 3:
                                        iFld1 += (int) l;
                                        iFld1 -= i22;
                                        iFld1 = iFld1;
                                        Test.sArrFld = Test.sArrFld;
                                        i21 = i;
                                        i23 = (int) Test.instanceCount;
                                        Test.instanceCount = 3;
                                        Test.dArrFld[i20 - 1] %= (Test.lFld | 1);
                                        fFld += i23;
                                        Test.iFld ^= (int) Test.lFld;
                                        switch(((i19 % 3) * 5) + 83) {
                                            case 84:
                                                Test.lFld = i21;
                                                lArr3[i20 - 1] = (long) Test.fFld1;
                                                Test.iArrFld[(int) (l + 1)] *= (int) d4;
                                                i23 += (int) l;
                                                i18 >>= i20;
                                                i = (int) l;
                                                i = Test.iFld;
                                                sFld = (short) i23;
                                                lArr3[i20 + 1] = 41995;
                                                Test.instanceCount *= i18;
                                                iFld1 &= i19;
                                                Test.lFld += (l * Test.fFld1);
                                                i21 >>>= i;
                                                break;
                                            case 95:
                                                i = (int) Test.lFld;
                                                Test.lFld ^= i20;
                                                bFld = bFld;
                                                Test.instanceCount = iFld1;
                                                bFld = bFld;
                                                i18 = i20;
                                                break;
                                            case 89:
                                                if (bFld)
                                                    break;
                                            default:
                                                lArr3[(int) (l - 1)] = iFld1;
                                        }
                                        break;
                                    case 4:
                                        Test.instanceCount = i18;
                                        break;
                                    case 5:
                                        Test.iArrFld = Test.iArrFld;
                                        break;
                                    case 6:
                                        i22 += (int) d4;
                                        break;
                                    case 7:
                                        Test.lFld = -97;
                                        break;
                                    case 8:
                                        d4 = Test.instanceCount;
                                        break;
                                    case 9:
                                        Test.iFld = i19;
                                        break;
                                    case 10:
                                        lFld1 += -63757;
                                        break;
                                    case 11:
                                        i21 -= i;
                                    case 12:
                                        i += (int) (l ^ Test.iFld);
                                        break;
                                }
                            }
                            break;
                        case 89:
                            Test.iFld -= iFld1;
                            break;
                        case 90:
                            Test.fFld1 /= (i22 | 1);
                        default:
                            if (true)
                                continue;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i i17 i18 = " + i + "," + i17 + "," + i18);
        FuzzerUtils.out.println("d4 i19 i20 = " + Double.doubleToLongBits(d4) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 l i22 = " + i21 + "," + l + "," + i22);
        FuzzerUtils.out.println("i23 lArr3 = " + i23 + "," + FuzzerUtils.checkSum(lArr3));
        FuzzerUtils.out.println("Test.instanceCount fFld Test.iFld = " + Test.instanceCount + "," + Float.floatToIntBits(fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld Test.fFld1 bFld = " + Test.byFld + "," + Float.floatToIntBits(Test.fFld1) + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("sFld Test.lFld iFld1 = " + sFld + "," + Test.lFld + "," + iFld1);
        FuzzerUtils.out.println("lFld1 Test.iArrFld Test.sArrFld = " + lFld1 + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
