// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 165L;

    public static short sFld = 27346;

    public static double dFld = 2.13613;

    public static boolean bFld = false;

    public static double dFld1 = 1.85583;

    public static int iFld = 231;

    public static volatile byte byFld = 118;

    public static long[] lArrFld = new long[N];

    public volatile boolean[] bArrFld = new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -305569173480774108L);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5, int i6) {
        boolean b = false;
        float f1 = -45.565F, f2 = -2.752F;
        int i7 = -130, i8 = 24331, i9 = -3, i10 = 4, i11 = 2, i12 = 2302, i13 = 9, iArr[] = new int[N], iArr1[][] = new int[N][N];
        byte by = 54;
        double d = -26.98113, dArr[] = new double[N];
        long[] lArr = new long[N];
        short[] sArr = new short[N];
        FuzzerUtils.init(iArr, 7);
        FuzzerUtils.init(iArr1, -13);
        FuzzerUtils.init(lArr, 6L);
        FuzzerUtils.init(dArr, -1.60423);
        FuzzerUtils.init(sArr, (short) -22812);
        b = b;
        iArr[(i5 >>> 1) % N] -= (int) f1;
        for (i7 = 5; i7 < 219; i7++) {
            if (b)
                break;
            if (b) {
                iArr[i7] = i6;
                for (i9 = i7; 3 > i9; ++i9) {
                    i6 += (int) Test.instanceCount;
                    i8 = i5;
                }
                i8 -= i5;
                i10 = i8;
                by += (byte) i5;
                b = b;
                i6 |= -14356;
                iArr1 = iArr1;
                for (f2 = i7; f2 < 3; f2++) {
                    i10 /= (int) (Test.instanceCount | 1);
                    lArr[i7] = Test.instanceCount;
                    Test.instanceCount += i5;
                    Test.instanceCount -= Test.instanceCount;
                }
                i12 = 3;
                while ((i12 -= 2) > 0) {
                    f1 = (float) d;
                    iArr1[i12 + 1][i7 + 1] >>= i12;
                    Test.instanceCount = (long) 103.375F;
                    d += i8;
                    i5 += i5;
                    Test.instanceCount = i6;
                    Test.sFld -= (short) i9;
                    i13 = 1;
                    do {
                        dArr[i7 - 1] = i11;
                        i6 += (((i13 * i6) + i7) - i10);
                        i11 += (31 + (i13 * i13));
                        i6 -= (int) d;
                        switch(((i12 % 1) * 5) + 29) {
                            case 33:
                                sArr[i13 - 1] *= (short) Test.instanceCount;
                                i8 = 13;
                                i11 = i8;
                                break;
                            default:
                                by >>= (byte) -3;
                        }
                    } while (++i13 < 2);
                }
                {
                    java.io.PrintStream ax$6 = System.out;
                    java.io.PrintStream ax$7 = System.err;
                    java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$8);
                    System.setErr(ax$8);
                    try {
                        for (int ax$4 = -3832; ax$4 < 2002; ax$4 += 1) {
                            int ax$2 = i9;
                            try {
                                long[] ax$1 = new long[60];
                                long[] ax$0 = new long[64];
                                for (; i9 < ax$1.length - 4; i9 += 4) {
                                    ax$1[i9 + 0] = (long) (ax$0[i9 + 0] << 0);
                                    ax$1[i9 + 1] = (long) (ax$0[i9 + 1] << 1);
                                    ax$1[i9 + 2] = (long) (ax$0[i9 + 2] << 2);
                                    ax$1[i9 + 3] = (long) (ax$0[i9 + 3] << 3);
                                }
                            } catch (Throwable ax$3) {
                            } finally {
                                i9 = ax$2;
                            }
                        }
                    } catch (Throwable ax$5) {
                    }
                    System.setOut(ax$6);
                    System.setErr(ax$7);
                }
            } else if (b) {
                iArr[i7] = 40662;
            } else {
                i8 -= i6;
            }
        }
        long meth_res = i5 + i6 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + by + Float.floatToIntBits(f2) + i11 + i12 + Double.doubleToLongBits(d) + i13 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(int i3, long l, int i4) {
        short s = -24909, s1 = -30415;
        int i14 = -13, i15 = -6, i16 = 78, i17 = -31379, i18 = -91, i19 = 9, i20 = -58421, iArr2[] = new int[N];
        byte by1 = -4;
        double d1 = -68.29376;
        float f3 = 122.270F, fArr[] = new float[N];
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr2, -252);
        FuzzerUtils.init(fArr, 82.894F);
        FuzzerUtils.init(lArr1, 146L);
        i4 /= (int) (i3 | 1);
        s >>= (short) iMeth(i3, i3);
        i14 = 1;
        while (++i14 < 102) {
            i4 *= -27;
            l += by1;
            i4 = i4;
            i3 = i4;
            i4 = 8;
            i3 *= -11;
            iArr2[(i4 >>> 1) % N] >>= (int) Test.instanceCount;
            i3 += (int) Test.dFld;
            i3 = i14;
            s1 = (short) 0;
            if (Test.bFld) {
                Test.instanceCount -= i15;
                i15 -= 47;
                l = (long) 1.79510;
                i3 = i3;
                iArr2[i14 - 1] -= (int) Test.instanceCount;
                i4 += i3;
            } else if (Test.bFld) {
                Test.instanceCount += i14;
                for (i16 = 1; i16 < 5; i16++) {
                    long l1 = 2710386929045121209L;
                    i17 -= i15;
                    l1 += (i16 * Test.instanceCount);
                    for (d1 = 1; d1 < 2; ++d1) {
                        Test.dFld = -9;
                        i4 += (int) (((d1 * f3) + i16) - i18);
                        iArr2[i16 - 1] &= (int) l;
                        iArr2[i14] += i4;
                        f3 -= f3;
                    }
                    fArr[i16 + 1] -= f3;
                    i17 -= i4;
                    l *= Test.sFld;
                    i19 = 1;
                    do {
                        Test.dFld += i20;
                        try {
                            i20 = (i16 % i14);
                            iArr2[i19] = (i15 / i18);
                            i18 = (-125 % i14);
                        } catch (ArithmeticException a_e) {
                        }
                        lArr1[i19 + 1] = (long) f3;
                    } while (++i19 < 2);
                }
            } else {
                iArr2[i14 + 1] <<= i3;
            }
        }
        vMeth1_check_sum += i3 + l + i4 + s + i14 + by1 + s1 + i15 + i16 + i17 + Double.doubleToLongBits(d1) + i18 + Float.floatToIntBits(f3) + i19 + i20 + FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(float f, int i2) {
        float f4 = -80.510F;
        int i21 = 12, i22 = -808, i23 = 55222, i24 = 13, i25 = 6, i26 = 0, i27 = 85, iArr3[] = new int[N], iArr4[] = new int[N];
        byte by2 = -114;
        FuzzerUtils.init(iArr3, 21897);
        FuzzerUtils.init(iArr4, 13);
        try {
            vMeth1(12, Test.instanceCount, i2);
            i2 &= i2;
            for (f4 = 5; 163 > f4; ++f4) {
                iArr3[(int) (f4 - 1)] <<= 1;
                i2 -= (int) Test.instanceCount;
                for (i22 = 1; i22 < 4; i22++) {
                    iArr3[i22 + 1] *= i2;
                    i23 >>= (int) Test.instanceCount;
                    switch(((i21 >>> 1) % 10) + 32) {
                        case 32:
                            for (i24 = (int) (f4); i24 < 2; i24++) {
                                Test.instanceCount <<= Test.instanceCount;
                                iArr4[i24 - 1] <<= (int) Test.instanceCount;
                                if (Test.bFld)
                                    continue;
                                Test.sFld -= (short) i22;
                                Test.instanceCount >>>= Test.instanceCount;
                                i21 += (int) 6L;
                                i23 *= (int) Test.instanceCount;
                                i21 += (i24 ^ Test.instanceCount);
                                i23 -= i2;
                                i23 = (int) Test.instanceCount;
                                i2 -= i23;
                                i25 += Test.sFld;
                            }
                            i25 = (int) Test.dFld1;
                            i23 <<= 40548;
                            Test.instanceCount += i22;
                            if (Test.bFld)
                                break;
                            iArr3[i22] = i24;
                            for (i26 = (int) (f4); i26 < 2; ++i26) {
                                if (true)
                                    break;
                                if (Test.bFld) {
                                    i25 = (int) Test.instanceCount;
                                    Test.lArrFld[i26 + 1] = Test.instanceCount;
                                    i23 = i24;
                                    i27 = -9951;
                                    iArr3[i26] <<= (int) 195L;
                                    i2 = 21358;
                                } else if (true) {
                                    f = i21;
                                }
                            }
                            break;
                        case 33:
                            Test.instanceCount = by2;
                            break;
                        case 34:
                            iArr3[(int) (f4 - 1)] *= i23;
                        case 35:
                            i25 *= (int) Test.instanceCount;
                        case 36:
                            Test.lArrFld[(int) (f4 - 1)] *= 6215026218740460205L;
                            break;
                        case 37:
                        case 38:
                            by2 <<= (byte) -45234;
                            break;
                        case 39:
                            i25 += i26;
                            break;
                        case 40:
                        case 41:
                            Test.instanceCount += i27;
                            break;
                        default:
                            i2 -= (int) 123.710F;
                    }
                }
            }
        } catch (NullPointerException exc1) {
            Test.instanceCount = i22;
        } finally {
            Test.instanceCount -= Test.instanceCount;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i2 + Float.floatToIntBits(f4) + i21 + i22 + i23 + i24 + i25 + i26 + i27 + by2 + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(iArr4);
    }

    public void mainTest(String[] strArr1) {
        int i = -251, i1 = -8418, i28 = -11133, i29 = 8, i30 = -14, i31 = 176, i32 = 11, i33 = 0, i34 = 65217, iArr5[] = new int[N], iArr6[][] = new int[N][N];
        float f5 = 2.604F, f6 = -101.447F, fArr1[] = new float[N];
        boolean b1 = true;
        byte[] byArr = new byte[N];
        short[] sArr1 = new short[N];
        double[] dArr1 = new double[N];
        FuzzerUtils.init(fArr1, 87.983F);
        FuzzerUtils.init(iArr5, -205);
        FuzzerUtils.init(byArr, (byte) 22);
        FuzzerUtils.init(iArr6, 0);
        FuzzerUtils.init(sArr1, (short) -25812);
        FuzzerUtils.init(dArr1, 1.114793);
        for (i = 1; i < 88; i += 3) {
            vMeth(f5, i1);
            fArr1[i - 1] = i;
            for (i28 = 173; i28 > 7; i28 -= 3) {
                Test.lArrFld = FuzzerUtils.long1array(N, (long) 5565041733915172692L);
                i29 += (((i28 * Test.iFld) + Test.iFld) - Test.iFld);
                i30 = 1;
                do {
                    f5 = Test.iFld;
                    if (Test.bFld)
                        continue;
                    f5 -= i28;
                    if (Test.bFld)
                        continue;
                    i1 += (i30 ^ Test.iFld);
                    Test.iFld += 14;
                    fArr1[i30 + 1] = -868294438L;
                    iArr5[i30] = -22;
                    iArr5[i30 - 1] >>= i30;
                    Test.instanceCount += i30;
                    i1 = (int) Test.dFld1;
                    i29 += i30;
                } while (++i30 < 4);
                Test.lArrFld[i + 1] = -3;
                i29 += i;
                i29 = i29;
                f6 = 1;
                while (++f6 < 4) {
                    Test.instanceCount -= Test.instanceCount;
                    Test.iFld *= i30;
                    Test.instanceCount = -7;
                    i1 = (int) Test.instanceCount;
                    if (Test.bFld)
                        break;
                }
                byArr[i + 1] *= (byte) -9;
                bArrFld[i] = Test.bFld;
                switch((i28 % 3) + 104) {
                    case 104:
                        for (i31 = 4; i31 > 1; i31 -= 3) {
                            try {
                                i1 = (i % iArr5[i]);
                                iArr5[i31 - 1] = (i % i31);
                                i32 = (i28 % iArr5[i31 - 1]);
                            } catch (ArithmeticException a_e) {
                            }
                            f5 = Test.instanceCount;
                            iArr6 = iArr6;
                            sArr1[i28] = (short) i31;
                            i32 = -15929;
                        }
                        dArr1[i28 + 1] += 10;
                        break;
                    case 105:
                        i32 -= Test.byFld;
                        Test.iFld <<= i;
                        i33 = 1;
                        do {
                            i29 = i;
                            i32 += (int) Test.instanceCount;
                            switch(((i % 2) * 5) + 87) {
                                case 92:
                                    Test.lArrFld[i28] = -48L;
                                    i32 <<= (int) Test.instanceCount;
                                    break;
                                case 93:
                                    if (b1) {
                                        if (true)
                                            break;
                                        try {
                                            i32 = (99 / i28);
                                            Test.iFld = (i31 / i1);
                                            i29 = (i30 % 842);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        i1 = (int) Test.instanceCount;
                                    } else if (b1) {
                                        Test.iFld = i31;
                                        Test.byFld <<= (byte) Test.iFld;
                                        Test.iFld += (i33 * i28);
                                        Test.instanceCount = i30;
                                        if (b1)
                                            continue;
                                        Test.iFld >>>= -55440;
                                        if (Test.bFld) {
                                            iArr6[i][i - 1] |= i;
                                            i32 += i33;
                                            Test.instanceCount = 25268;
                                            i29 -= (int) Test.instanceCount;
                                            f5 += i28;
                                            iArr6[i28 - 1][i + 1] = i31;
                                            i32 += 147;
                                            sArr1[i - 1] = (short) Test.instanceCount;
                                            Test.instanceCount = 252;
                                            iArr6[i28][i - 1] *= 168;
                                            i1 = (int) 471919346L;
                                            i29 += Test.sFld;
                                            Test.instanceCount += i31;
                                            i29 = (int) -45498L;
                                        } else if (false) {
                                            Test.iFld += (((i33 * i) + i32) - i34);
                                            Test.instanceCount += (i33 * i33);
                                            Test.iFld >>>= -114;
                                        }
                                        iArr5[i28 + 1] *= 43468;
                                    } else if (b1) {
                                        i1 = (int) Test.instanceCount;
                                    } else {
                                        i32 += i31;
                                    }
                                    break;
                            }
                        } while (++i33 < 4);
                        break;
                    case 106:
                    default:
                        Test.iFld *= i34;
                }
                {
                    java.io.PrintStream ax$14 = System.out;
                    java.io.PrintStream ax$15 = System.err;
                    java.io.PrintStream ax$16 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$16);
                    System.setErr(ax$16);
                    try {
                        for (int ax$12 = -3098; ax$12 < 6401; ax$12 += 1) {
                            try {
                                boolean[] ax$9 = new boolean[] { true, true, false, true, false };
                                for (int ax$10 = 0; ax$10 < ax$9.length; ax$10++) {
                                    ax$9[ax$10] = false;
                                }
                            } catch (Throwable ax$11) {
                            } finally {
                            }
                        }
                    } catch (Throwable ax$13) {
                    }
                    System.setOut(ax$14);
                    System.setErr(ax$15);
                }
            }
        }
        FuzzerUtils.out.println("i i1 f5 = " + i + "," + i1 + "," + Float.floatToIntBits(f5));
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("f6 i31 i32 = " + Float.floatToIntBits(f6) + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 b1 i34 = " + i33 + "," + (b1 ? 1 : 0) + "," + i34);
        FuzzerUtils.out.println("fArr1 iArr5 byArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," + FuzzerUtils.checkSum(iArr5) + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("iArr6 sArr1 dArr1 = " + FuzzerUtils.checkSum(iArr6) + "," + FuzzerUtils.checkSum(sArr1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.dFld1 Test.iFld = " + (Test.bFld ? 1 : 0) + "," + Double.doubleToLongBits(Test.dFld1) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld Test.lArrFld bArrFld = " + Test.byFld + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(bArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
