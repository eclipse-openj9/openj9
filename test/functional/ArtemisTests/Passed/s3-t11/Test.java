// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Collections;

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = 631530440L;

    public byte byFld = -100;

    public static int iFld = 12;

    public static short sFld = -21008;

    public boolean bFld = false;

    public static float fFld = 2.724F;

    public static volatile double dFld = -2.99064;

    public volatile long lFld = -2L;

    public int[] iArrFld = new int[N];

    public static short[][] sArrFld = new short[N][N];

    public static boolean[] bArrFld = new boolean[N];

    public static double[] dArrFld = new double[N];

    public long[][] lArrFld = new long[N][N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short) 5947);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.dArrFld, 0.23142);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(short s) {
        int i12 = -35607, i13 = -180, i14 = -4095, i15 = -127, i16 = 3, i17 = -102, i18 = 254, i19 = 2, iArr1[] = new int[N];
        long l1 = 8L;
        byte by = -20, byArr[] = new byte[N];
        double d1 = 11.73823;
        boolean b = false;
        FuzzerUtils.init(byArr, (byte) -15);
        FuzzerUtils.init(iArr1, -2);
        for (i12 = 5; i12 < 91; i12++) {
            i14 = 1;
            do {
                i13 += i12;
                Test.instanceCount = 0;
            } while ((i14 += 2) < 6);
            byArr[i12 + 1] <<= (byte) i13;
            Test.sArrFld[i12][i12] -= (short) Test.instanceCount;
            iArr1[i12] += -13;
            i13 += (i12 * i12);
            i13 = i14;
            for (l1 = 1; l1 < 6; l1++) {
                float f1 = 0.142F;
                iArr1[(int) (l1)] |= i13;
                i15 += i12;
                i15 = 26026;
                i15 *= i13;
                for (i16 = 1; 2 > i16; ++i16) {
                    Test.instanceCount = -7059;
                    Test.instanceCount += i16;
                    i17 += 40882;
                    i13 -= i12;
                    by += (byte) l1;
                    Test.instanceCount = i14;
                    s <<= (short) i12;
                    Test.iFld = Test.iFld;
                    d1 %= (Test.iFld | 1);
                    i17 -= i13;
                }
                Test.instanceCount = Test.instanceCount;
                Test.iFld = (int) Test.instanceCount;
                Test.iFld += (-237 + (l1 * l1));
                f1 = i13;
                for (i18 = 2; i18 > i12; i18--) {
                    Test.instanceCount &= Test.instanceCount;
                    Test.instanceCount += (i18 + f1);
                    if (b)
                        break;
                    d1 *= i14;
                    Test.iFld = Test.iFld;
                    iArr1[i12] = (int) d1;
                    Test.instanceCount = s;
                }
            }
        }
        long meth_res = s + i12 + i13 + i14 + l1 + i15 + i16 + i17 + by + Double.doubleToLongBits(d1) + i18 + i19 + (b ? 1 : 0) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1() {
        int i5 = -34439, i6 = 0, i7 = -10334, i8 = 183, i9 = 188, i10 = 11329, i11 = -231, i20 = -244, i21 = -152, i22 = -8, i23 = -16467, i24 = 5, iArr[] = new int[N];
        float f = 0.207F;
        byte by1 = -78;
        boolean b1 = true;
        FuzzerUtils.init(iArr, 4);
        i5 = (i5++);
        for (i6 = 6; i6 < 152; i6++) {
            for (i8 = 1; 4 > i8; ++i8) {
                for (i10 = i8; i10 < 2; i10++) {
                    i7 <<= i6;
                    iArr = iArr;
                    i5 += (int) (((Test.instanceCount * f) - i11) * (i7++));
                    i11 += (int) (Test.instanceCount % ((--i11) | 1));
                    iArr[i8 + 1] >>= (-((-(i10 - i11)) - iMeth(Test.sFld)));
                    Test.instanceCount += Test.instanceCount;
                    Test.instanceCount += i10;
                }
                Test.instanceCount = i9;
                for (i20 = 1; i20 < 2; i20++) {
                    i7 += (((i20 * i20) + Test.instanceCount) - i6);
                    Test.iFld = (int) Test.instanceCount;
                    iArr[i6] >>= i9;
                    i5 = i10;
                    by1 = (byte) Test.iFld;
                    f += (54 + (i20 * i20));
                    iArr = iArr;
                    i22 += i10;
                    Test.iFld -= i8;
                    Test.bArrFld[i6] = b1;
                    f = 17060;
                }
                iArr[i6 + 1] += -150;
                for (i23 = 1; i23 < 2; i23++) {
                    long l2 = 39749L;
                    i7 <<= (int) Test.instanceCount;
                    iArr[i6] = i21;
                    Test.iFld >>= (int) Test.instanceCount;
                    i11 >>>= (int) -1L;
                    Test.sArrFld[i23 + 1][i6] = (short) f;
                    Test.instanceCount *= -45174;
                    l2 <<= i6;
                    Test.bArrFld[i8] = b1;
                    Test.sArrFld[i23][i6 - 1] <<= by1;
                    if (b1)
                        continue;
                    {
                        java.io.PrintStream ax$5 = System.out;
                        java.io.PrintStream ax$6 = System.err;
                        java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$7);
                        System.setErr(ax$7);
                        try {
                            for (int ax$3 = -3565; ax$3 < 4425; ax$3 += 1) {
                                try {
                                    Object ax$0;
                                    ax$0 = Array.newInstance(String.class, 2);
                                    String[] ax$1 = (String[]) ax$0;
                                    ax$1[0] = "entry zero";
                                    Array.set(ax$0, 1, "entry one");
                                    try {
                                        Array.set(ax$0, 2, "entry two");
                                    } catch (ArrayIndexOutOfBoundsException abe) {
                                    }
                                    if (!"entry zero".equals(Array.get(ax$0, 0)))
                                        ;
                                    if (!"entry one".equals(ax$1[1]))
                                        ;
                                    if (ax$1.length != Array.getLength(ax$0) || ax$1.length != 2) {
                                    }
                                    try {
                                        Array.set(ax$0, 0, new Integer(5));
                                    } catch (IllegalArgumentException iae) {
                                    }
                                } catch (Throwable ax$2) {
                                } finally {
                                }
                            }
                        } catch (Throwable ax$4) {
                        }
                        System.setOut(ax$5);
                        System.setErr(ax$6);
                    }
                    by1 |= (byte) i22;
                }
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + i20 + i21 + by1 + i22 + (b1 ? 1 : 0) + i23 + i24 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l) {
        double d = -6.73107;
        int i2 = 39684, i3 = 67, i4 = 9302, i25 = 202, i26 = 63494, i27 = 5708, i28 = -12827, i29 = 81, i30 = 56449, i31 = 6956, iArr2[] = new int[N], iArr3[][] = new int[N][N];
        float f2 = -3.491F, f3 = -30.547F;
        boolean b2 = false;
        byte by2 = -17;
        long l3 = 12L;
        FuzzerUtils.init(iArr2, -12);
        FuzzerUtils.init(iArr3, -11);
        for (d = 8; d < 189; d++) {
            for (i3 = 1; i3 < 3; ++i3) {
                vMeth1();
                i2 += (i3 * i3);
                i2 += (int) l;
                Test.sFld += (short) (((i3 * f2) + i4) - Test.iFld);
                for (i25 = 1; i25 < 2; ++i25) {
                    i4 <<= i26;
                    iArr2[(int) (d - 1)] = -244;
                    Test.sArrFld[(int) (d + 1)][i25] += (short) -3369582701925331309L;
                    i26 *= i3;
                }
                i26 -= (int) d;
                l += (i3 * i3);
                iArr3 = FuzzerUtils.int2array(N, (int) 16823);
                for (i27 = 1; i27 < 2; ++i27) {
                    f2 += i27;
                    if (i3 != 0) {
                        vMeth_check_sum += l + Double.doubleToLongBits(d) + i2 + i3 + i4 + Float.floatToIntBits(f2) + i25 + i26 + i27 + i28 + i29 + i30 + i31 + (b2 ? 1 : 0) + by2 + Float.floatToIntBits(f3) + l3 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3);
                        return;
                    }
                }
                i28 += (int) l;
            }
            i29 = 1;
            do {
                for (i30 = 1; 1 > i30; i30++) {
                    switch(((i30 % 5) * 5) + 12) {
                        case 25:
                            b2 = b2;
                            iArr3[i30][i29] += i29;
                            Test.dArrFld[i29] -= i30;
                            by2 = (byte) i2;
                            iArr2[(int) (d - 1)] = Test.sFld;
                            l += (i30 + i28);
                            i2 = i26;
                            Test.sFld ^= (short) i29;
                            i28 >>= i31;
                            break;
                        case 32:
                            i31 += (i30 * i30);
                            break;
                        case 37:
                            f3 += (i30 * i30);
                            break;
                        case 22:
                            Test.iFld += i30;
                            i4 += (222 + (i30 * i30));
                            i4 -= (int) l;
                            l3 += l3;
                            b2 = b2;
                            break;
                        case 27:
                            l += (i30 - i2);
                            break;
                        default:
                            i2 = i27;
                    }
                }
            } while (++i29 < 3);
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d) + i2 + i3 + i4 + Float.floatToIntBits(f2) + i25 + i26 + i27 + i28 + i29 + i30 + i31 + (b2 ? 1 : 0) + by2 + Float.floatToIntBits(f3) + l3 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {
        int i = 1, i1 = -23466, i32 = -12, i33 = 3, i34 = -8, i35 = -64, i36 = -26653, i37 = 6841, i38 = -17794, i39 = 63611;
        long l4 = -50656L, l5 = 5L;
        byte[] byArr1 = new byte[N];
        FuzzerUtils.init(byArr1, (byte) 17);
        for (i = 106; i > 5; i -= 3) {
            i1 = iArrFld[i - 1];
            i1 >>= (++i1);
            byFld += (byte) i;
            vMeth(-10L);
            Test.dArrFld[i - 1] += i1;
            Test.iFld >>= -49365;
            Test.instanceCount += Test.iFld;
            for (i32 = 9; i32 < 152; ++i32) {
                if (bFld)
                    continue;
                for (l4 = 2; l4 > 1; --l4) {
                    if (bFld) {
                        iArrFld[(int) (l4 + 1)] ^= i1;
                    } else if (bFld) {
                    } else if (false) {
                        i34 >>= 5;
                        Test.dArrFld = Test.dArrFld;
                        lArrFld[(i33 >>> 1) % N][i] = (long) Test.fFld;
                        i34 %= (int) (i34 | 1);
                        i1 %= (int) (Test.instanceCount | 1);
                        Test.iFld += Test.iFld;
                    }
                    i34 *= Test.iFld;
                    l5 %= ((long) (Test.dFld) | 1);
                    i34 = (int) Test.instanceCount;
                    i34 = Test.sFld;
                    Test.fFld = Test.instanceCount;
                    Test.fFld = -28254;
                    Test.dArrFld[i32 + 1] += Test.instanceCount;
                    i1 += Test.sFld;
                    i33 %= (int) (i | 1);
                    bFld = bFld;
                }
                for (i35 = 1; i35 < 2; i35++) {
                    Test.instanceCount = Test.iFld;
                    Test.dFld = i32;
                    bFld = false;
                    i36 -= i36;
                    Test.dFld = Test.fFld;
                    i33 += (i35 * i35);
                    switch((((i37 >>> 1) % 1) * 5) + 127) {
                        case 128:
                            l5 += (long) Test.fFld;
                            i33 = (int) l4;
                            Test.fFld *= Test.sFld;
                            break;
                    }
                    i37 = (int) Test.instanceCount;
                    i36 = i32;
                    lArrFld[i32][i] += i35;
                }
                switch((i32 % 6) + 112) {
                    case 112:
                        for (i38 = 1; i38 < 2; i38++) {
                            bFld = bFld;
                            i39 -= (int) Test.instanceCount;
                            Test.fFld = byFld;
                            Test.instanceCount += 3;
                            Test.dArrFld[i + 1] += i33;
                            i39 += (i38 ^ i32);
                            i37 >>>= (int) l4;
                            switch((i32 % 3) + 12) {
                                case 12:
                                    Test.dArrFld[i] += i;
                                    break;
                                case 13:
                                    Test.instanceCount += i38;
                                    Test.sFld += (short) -22177;
                                    Test.dFld -= Test.fFld;
                                    byFld *= (byte) Test.fFld;
                                    i33 >>= 55200;
                                    Test.fFld += i37;
                                    i37 += (i38 + Test.fFld);
                                    byArr1[i32 + 1] >>= (byte) 250;
                                    byFld += (byte) i33;
                                    i36 = (int) Test.instanceCount;
                                    break;
                                case 14:
                                    switch((i38 % 7) + 123) {
                                        case 123:
                                            Test.instanceCount *= i35;
                                            i1 += -188;
                                            l5 += (((i38 * i32) + i38) - i36);
                                            iArrFld[i] = (int) -56.78F;
                                            switch(((i38 % 1) * 5) + 27) {
                                                case 32:
                                                    iArrFld[i38] &= (int) Test.instanceCount;
                                                    Test.iFld = i35;
                                                    i1 -= (int) Test.instanceCount;
                                                    i37 -= (int) l5;
                                                    break;
                                                default:
                                                    if (bFld)
                                                        continue;
                                            }
                                            break;
                                        case 124:
                                            Test.instanceCount -= i1;
                                            break;
                                        case 125:
                                            Test.iFld = (int) Test.fFld;
                                            break;
                                        case 126:
                                            iArrFld[i38 + 1] = (int) Test.fFld;
                                            break;
                                        case 127:
                                            i39 += -12;
                                            break;
                                        case 128:
                                            Test.instanceCount += (i38 ^ l5);
                                            break;
                                        case 129:
                                            Test.fFld *= -3760;
                                            break;
                                        default:
                                            l5 >>= i32;
                                    }
                            }
                        }
                        break;
                    case 113:
                        i36 -= i1;
                        break;
                    case 114:
                        Test.dFld *= i35;
                    case 115:
                        i34 = i34;
                        break;
                    case 116:
                        i1 -= i34;
                    case 117:
                        Test.dFld = i37;
                    default:
                        i37 += (((i32 * Test.fFld) + lFld) - i38);
                }
            }
        }
        FuzzerUtils.out.println("i i1 i32 = " + i + "," + i1 + "," + i32);
        FuzzerUtils.out.println("i33 l4 i34 = " + i33 + "," + l4 + "," + i34);
        FuzzerUtils.out.println("l5 i35 i36 = " + l5 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 i38 i39 = " + i37 + "," + i38 + "," + i39);
        FuzzerUtils.out.println("byArr1 = " + FuzzerUtils.checkSum(byArr1));
        FuzzerUtils.out.println("Test.instanceCount byFld Test.iFld = " + Test.instanceCount + "," + byFld + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld bFld Test.fFld = " + Test.sFld + "," + (bFld ? 1 : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld lFld iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + lFld + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.sArrFld Test.bArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(Test.bArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
        {
            java.io.PrintStream ax$12 = System.out;
            java.io.PrintStream ax$13 = System.err;
            java.io.PrintStream ax$14 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$14);
            System.setErr(ax$14);
            try {
                for (int ax$10 = -4995; ax$10 < 3020; ax$10 += 1) {
                    try {
                        Collection ax$8 = Collections.synchronizedCollection(null);
                    } catch (Throwable ax$9) {
                    } finally {
                    }
                }
            } catch (Throwable ax$11) {
            }
            System.setOut(ax$12);
            System.setErr(ax$13);
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
