// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.SortedSet;
import java.util.TreeSet;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 125L;

    public float fFld = 2.659F;

    public short sFld = 29652;

    public static byte byFld = -103;

    public static double dFld = 37.119222;

    public static int iFld = 9;

    public static float fFld1 = -30.911F;

    public static int[] iArrFld = new int[N];

    public static short[] sArrFld = new short[N];

    public float[] fArrFld = new float[N];

    public static long[][] lArrFld = new long[N][N];

    public static double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 21);
        FuzzerUtils.init(Test.sArrFld, (short) -6425);
        FuzzerUtils.init(Test.lArrFld, 8748541930322475131L);
        FuzzerUtils.init(Test.dArrFld, 43.4184);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public void vMeth(int i2) {
        sFld *= (short) ((i2 * (Test.instanceCount + Test.instanceCount)) + Math.max(-165, i2 + sFld));
        vMeth_check_sum += i2;
    }

    public static void vMeth1() {
        if (ax$7) {
            try {
                java.util.SortedSet ax$8 = new TreeSet();
                ax$8.last();
            } catch (Throwable ax$9) {
            } finally {
            }
            return;
        }
        int i4 = 160, i5 = 5, i6 = 122, i7 = -14, i8 = -3, i9 = -8, i10 = -7973, i11 = 14, i12 = -3, i13 = 82;
        float f = 1.230F;
        short s = -16166;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, 34053973L);
        for (i4 = 222; i4 > 9; --i4) {
            boolean b = false;
            i5 += 51408;
            Test.instanceCount += i5;
            Test.instanceCount += (long) f;
            Test.iArrFld[i4] = s;
            Test.iArrFld[i4 + 1] = i5;
            b = b;
            for (i6 = 3; i6 > 1; i6 -= 3) {
                i7 += (((i6 * Test.instanceCount) + i5) - Test.instanceCount);
                i7 ^= i7;
                Test.sArrFld[i6] >>= (short) Test.instanceCount;
                Test.byFld = (byte) 1.792F;
                for (i8 = i6; i8 < 3; i8 += 3) {
                    i9 += i4;
                    lArr[i4 - 1] *= (long) f;
                    i9 = 60066;
                    Test.instanceCount -= 0;
                    Test.iArrFld[i6 - 1] &= -55538;
                }
            }
            Test.iArrFld[i4] = (int) 123.64F;
            i9 -= i9;
            for (i10 = 1; i10 < 3; ++i10) {
                switch((i10 % 1) + 92) {
                    case 92:
                        if (b)
                            continue;
                        switch(((i8 >>> 1) % 1) + 104) {
                            case 104:
                                for (i12 = 1; i12 < 2; i12++) {
                                    try {
                                        Test.iArrFld[i12] = (-62 % i10);
                                        i5 = (Test.iArrFld[i10 + 1] % i4);
                                        i11 = (49 % i6);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i11 |= 32212;
                                    f += i6;
                                    if (b) {
                                        f *= i9;
                                    } else if (true) {
                                        i5 <<= 7;
                                        Test.instanceCount -= 118;
                                        Test.iArrFld[i10] += i6;
                                        i13 += (int) Test.instanceCount;
                                        f -= i8;
                                        if (b)
                                            break;
                                        i9 += i9;
                                        vMeth1_check_sum += i4 + i5 + Float.floatToIntBits(f) + s + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(lArr);
                                        return;
                                    } else {
                                        f -= 0;
                                    }
                                }
                                break;
                        }
                        break;
                    default:
                        Test.iArrFld[i10] += (int) f;
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + Float.floatToIntBits(f) + s + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth1(int i3) {
        int i14 = 2, i15 = 2, i16 = -12, i18 = -19735;
        long l1 = 1459259469L;
        double d = -2.61872;
        boolean b1 = true;
        {
            java.io.PrintStream ax$12 = System.out;
            java.io.PrintStream ax$13 = System.err;
            java.io.PrintStream ax$14 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$14);
            System.setErr(ax$14);
            try {
                ax$7 = true;
                for (int ax$10 = 0; ax$10 < 9737; ax$10 += 1) vMeth1();
            } catch (java.lang.Throwable ax$11) {
            } finally {
                ax$7 = false;
            }
            System.setOut(ax$12);
            System.setErr(ax$13);
        }
        vMeth1();
        i14 = 1;
        while (++i14 < 248) {
            i3 = -21;
            Test.dFld -= Test.instanceCount;
            i3 -= (int) l1;
            Test.iArrFld[i14] = (int) -245L;
            i3 -= i14;
            i15 = 1;
            do {
                int i17 = -21;
                i3 += (-45 + (i15 * i15));
                i16 = 1;
                do {
                    i3 = i15;
                    i3 += (int) Test.instanceCount;
                    i3 = i16;
                    i3 = (int) -3L;
                    i3 ^= i15;
                    i3 = -171;
                    Test.dFld -= Test.dFld;
                    i3 -= i15;
                    Test.iArrFld[i15 + 1] += (int) 1.692F;
                } while (++i16 < 3);
                i17 *= i3;
                i17 += (int) Test.instanceCount;
                Test.byFld &= (byte) i15;
                for (d = 1; d < 3; d++) {
                    if (b1)
                        continue;
                    switch((i15 % 2) + 24) {
                        case 24:
                            Test.iFld += (int) Test.fFld1;
                            Test.instanceCount += (3720957272238670847L + (d * d));
                            if (i16 != 0) {
                            }
                            if (true)
                                break;
                            i17 += (int) Test.instanceCount;
                            i18 *= -19322;
                            Test.byFld += (byte) (d * d);
                            break;
                        case 25:
                            Test.iArrFld[(int) (d)] = (int) Test.instanceCount;
                            Test.iArrFld[i15 + 1] = 11;
                            if (b1)
                                continue;
                            i17 += (int) (d * d);
                            i3 = (int) l1;
                            break;
                    }
                }
            } while ((i15 += 2) < 3);
        }
        long meth_res = i3 + i14 + l1 + i15 + i16 + Double.doubleToLongBits(d) + i18 + (b1 ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public int iMeth() {
        int i19 = 20080, i20 = -31, i21 = -45, i22 = -6207, i23 = 0, i24 = 49, i25 = 152, i26 = -2, i27 = 232, i28 = 144, i29 = 13, i30 = 63916, i31 = -3544, i32 = 6;
        long l2 = -25L;
        boolean b2 = true;
        vMeth(iMeth1(Test.iFld));
        for (i19 = 3; i19 < 82; ++i19) {
            Test.dFld += -110.175F;
            i20 <<= Test.iFld;
            Test.byFld = (byte) 9;
            for (i21 = i19; 7 > i21; i21++) {
                i23 = 1;
                while (++i23 < 1) {
                    sFld = sFld;
                    sFld *= (short) i19;
                    Test.iArrFld = Test.iArrFld;
                }
            }
            switch((((i22 >>> 1) % 3) * 5) + 1) {
                case 16:
                    for (i24 = 1; 7 > i24; ++i24) {
                        i22 -= -33141;
                        Test.instanceCount -= Test.instanceCount;
                        Test.iArrFld[i24 + 1] *= Test.iFld;
                        if (i23 != 0) {
                        }
                        i25 *= (int) Test.fFld1;
                        for (l2 = 1; 2 > l2; ++l2) {
                            Test.instanceCount -= i20;
                        }
                        for (i27 = 2; i27 > 1; i27 -= 2) {
                            Test.instanceCount >>= Test.instanceCount;
                            fArrFld[i24] *= i21;
                            i25 += (i27 - l2);
                            fArrFld[i19] -= i19;
                        }
                        fFld -= 2.402F;
                        i26 = Test.iFld;
                        switch((i24 % 1) + 118) {
                            case 118:
                                sFld <<= (short) i19;
                                i20 = Test.iFld;
                                for (i29 = 1; i29 < 2; i29++) {
                                    if (b2)
                                        continue;
                                    i30 >>= i22;
                                    i25 += (i29 | i22);
                                    Test.sArrFld = FuzzerUtils.short1array(N, (short) 26731);
                                }
                                break;
                            default:
                                for (i31 = 1; i31 < 2; i31++) {
                                    Test.byFld ^= (byte) 9;
                                    i26 -= i23;
                                }
                        }
                    }
                    break;
                case 13:
                    Test.instanceCount = i28;
                case 5:
                    Test.dFld *= i19;
                    break;
            }
        }
        long meth_res = i19 + i20 + i21 + i22 + i23 + i24 + i25 + l2 + i26 + i27 + i28 + i29 + i30 + (b2 ? 1 : 0) + i31 + i32;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = 176, i1 = -8, i34 = -8, i35 = -57031, i36 = -60032, i37 = -14835, i38 = -29026, i39 = -249, i40 = -5;
        byte by = -45;
        long l = -158L, l3 = -1882394530715251894L, l4 = 2966500309508976989L, l5 = -6015525417058407728L;
        boolean b3 = true;
        for (i = 166; i > 10; i -= 2) {
            fFld += i;
            Test.iArrFld[i - 1] *= (int) ((++Test.instanceCount) * by);
            l = 1;
            while (++l < 65) {
                Test.instanceCount -= Math.abs(Test.iArrFld[(int) (l + 1)]--);
            }
            if (b3) {
                i1 += (i * i);
                Test.iArrFld[i - 1] >>= iMeth();
                i1 += (((i * Test.instanceCount) + Test.iFld) - i1);
                i1 += Test.byFld;
                try {
                    i1 = (146 % i);
                    Test.iFld = (i1 / i1);
                    Test.iFld = (206 / i);
                } catch (ArithmeticException a_e) {
                }
                for (l3 = 3; 65 > l3; l3++) {
                    i1 += (int) (((l3 * i35) + i) - l3);
                    for (l4 = 1; l4 < 2; l4++) {
                        i35 *= i35;
                        Test.instanceCount += (186920700L + (l4 * l4));
                        if (b3)
                            break;
                        i35 *= (int) 34L;
                        Test.iArrFld[i - 1] = (int) Test.fFld1;
                        Test.iFld = i1;
                        Test.instanceCount += (l4 * l4);
                        try {
                            i36 = (i1 / -155);
                            i35 = (i34 / -29761);
                            i35 = (i34 % i34);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.dFld *= i;
                        Test.instanceCount = (long) Test.fFld1;
                    }
                    switch((((i >>> 1) % 6) * 5) + 89) {
                        case 116:
                            fFld += (l3 + i36);
                            break;
                        case 118:
                            i35 = (int) Test.dFld;
                            i1 += (int) Test.fFld1;
                            i35 = (int) l3;
                            i37 *= (int) fFld;
                            i38 = 1;
                            do {
                                fFld /= (i36 | 1);
                                i37 += i36;
                                Test.iArrFld = Test.iArrFld;
                            } while (++i38 < 2);
                            switch(((i37 >>> 1) % 5) + 47) {
                                case 47:
                                case 48:
                                    i35 = Test.iFld;
                                    switch((int) (((l3 % 1) * 5) + 27)) {
                                        case 32:
                                            i36 = i38;
                                            Test.instanceCount = l3;
                                            i37 += (int) (((l3 * i34) + i1) - Test.byFld);
                                            Test.iArrFld = Test.iArrFld;
                                            Test.fFld1 += (((l3 * i34) + Test.iFld) - sFld);
                                            l5 = 1;
                                            while (++l5 < 2) {
                                                Test.iArrFld[(int) (l3 - 1)] -= (int) 8717953492489729666L;
                                                i1 = Test.byFld;
                                                sFld -= (short) Test.iFld;
                                                Test.fFld1 = i34;
                                                fArrFld[(int) (l3)] = -5;
                                                Test.iFld |= i38;
                                                Test.iArrFld[(int) (l3)] = Test.byFld;
                                                Test.lArrFld = Test.lArrFld;
                                                i34 += (int) (l5 | Test.byFld);
                                                by >>= (byte) Test.iFld;
                                                i37 += (105 + (l5 * l5));
                                                Test.iArrFld[(int) (l5)] = i36;
                                            }
                                            i34 -= i37;
                                            for (i39 = i; i39 < 2; ++i39) {
                                                i37 = 1;
                                                if (b3)
                                                    continue;
                                                Test.fFld1 = i37;
                                                Test.instanceCount += (((i39 * i36) + i38) - i);
                                                switch((i39 % 10) + 21) {
                                                    case 21:
                                                        if (b3) {
                                                            Test.byFld += (byte) (i39 | i);
                                                            i36 += i35;
                                                            i37 = i1;
                                                            i36 += (((i39 * i37) + i40) - i35);
                                                            try {
                                                                i40 = (Test.iArrFld[(int) (l3)] / -910885610);
                                                                i36 = (i40 % i1);
                                                                i34 = (-1278569248 % Test.iFld);
                                                            } catch (ArithmeticException a_e) {
                                                            }
                                                            i37 -= i;
                                                            Test.instanceCount = i39;
                                                            switch((((i35 >>> 1) % 2) * 5) + 8) {
                                                                case 17:
                                                                case 10:
                                                                    i40 += (int) 231L;
                                                                    Test.instanceCount -= i34;
                                                                    break;
                                                                default:
                                                                    i37 += -243;
                                                                    if (true)
                                                                        continue;
                                                            }
                                                        } else if (b3) {
                                                            fFld = 223L;
                                                        } else if (b3) {
                                                            i37 = i39;
                                                        } else {
                                                            Test.instanceCount = (long) Test.dFld;
                                                        }
                                                        break;
                                                    case 22:
                                                        Test.iArrFld[(int) (l3)] = i34;
                                                    case 23:
                                                        i36 = (int) 1.90517;
                                                        break;
                                                    case 24:
                                                        Test.iFld = by;
                                                        break;
                                                    case 25:
                                                        Test.iArrFld[i] = 181;
                                                        break;
                                                    case 26:
                                                        i35 <<= i1;
                                                        break;
                                                    case 27:
                                                        Test.instanceCount = l3;
                                                        break;
                                                    case 28:
                                                        Test.instanceCount -= l3;
                                                    case 29:
                                                        Test.iFld = i36;
                                                        break;
                                                    case 30:
                                                }
                                            }
                                            break;
                                        default:
                                            i34 += (int) (((l3 * Test.instanceCount) + l4) - Test.fFld1);
                                    }
                                    break;
                                case 49:
                                case 50:
                                    i40 = i;
                                    break;
                                case 51:
                                    i36 <<= i35;
                                    break;
                                default:
                                    i36 += i37;
                            }
                            break;
                        case 111:
                        case 102:
                            Test.dArrFld[(int) (l3)] -= sFld;
                            break;
                        case 100:
                            i35 += (int) (l3 ^ i38);
                            break;
                        case 101:
                            i34 = (int) 6527540288234045725L;
                            break;
                        default:
                            Test.iFld -= Test.iFld;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i i1 by = " + i + "," + i1 + "," + by);
        FuzzerUtils.out.println("l l3 i34 = " + l + "," + l3 + "," + i34);
        FuzzerUtils.out.println("i35 l4 i36 = " + i35 + "," + l4 + "," + i36);
        FuzzerUtils.out.println("b3 i37 i38 = " + (b3 ? 1 : 0) + "," + i37 + "," + i38);
        FuzzerUtils.out.println("l5 i39 i40 = " + l5 + "," + i39 + "," + i40);
        FuzzerUtils.out.println("Test.instanceCount fFld sFld = " + Test.instanceCount + "," + Float.floatToIntBits(fFld) + "," + sFld);
        FuzzerUtils.out.println("Test.byFld Test.dFld Test.iFld = " + Test.byFld + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld1 Test.iArrFld Test.sArrFld = " + Float.floatToIntBits(Test.fFld1) + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("fArrFld Test.lArrFld Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            {
                java.io.PrintStream ax$0 = System.out;
                java.io.PrintStream ax$1 = System.err;
                java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$2);
                System.setErr(ax$2);
                {
                    boolean ax$6 = false;
                    for (int ax$5 = -4938; ax$5 < 3330; ax$5 += 6) {
                        if (!ax$6) {
                            ax$6 = true;
                            {
                                System.setOut(ax$0);
                                System.setErr(ax$1);
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                                System.setOut(ax$2);
                                System.setErr(ax$2);
                            }
                        }
                        try {
                            java.lang.Object ax$3 = "7.853148124279642";
                            if (!ax$3.equals(String.CASE_INSENSITIVE_ORDER)) {
                            }
                        } catch (Throwable ax$4) {
                        } finally {
                        }
                    }
                }
                System.setOut(ax$0);
                System.setErr(ax$1);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$7 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 iMeth1 iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
