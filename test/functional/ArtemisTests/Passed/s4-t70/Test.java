// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.concurrent.atomic.AtomicInteger;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -149L;

    public static byte byFld = -22;

    public static volatile float fFld = 41.497F;

    public static boolean bFld = false;

    public static float[] fArrFld = new float[N];

    public static short[] sArrFld = new short[N];

    public double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 113.434F);
        FuzzerUtils.init(Test.sArrFld, (short) 5226);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(long l) {
        int i6 = -5, i7 = 47056, i8 = 42710, i9 = -58, i10 = -127, i11 = 47694, i12 = 63180, iArr1[][] = new int[N][N];
        float f = 2.929F;
        boolean b = true;
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr1, 183);
        FuzzerUtils.init(dArr, 114.83748);
        i6 = 1;
        while (++i6 < 209) {
            for (i7 = 3; i7 > 1; i7 -= 2) {
                i8 = i8;
                i8 += i9;
                i9 = i6;
                l >>= 1253315172376317545L;
                i9 -= i7;
                f += (3434556353296261209L + (i7 * i7));
                i9 = i9;
                iArr1[i6 + 1][i6 - 1] = 6;
                switch((((i7 >>> 1) % 1) * 5) + 53) {
                    case 57:
                        for (i10 = i7; i10 < 3; i10++) {
                            i9 *= i6;
                            i8 = i7;
                            l = l;
                            Test.instanceCount = i7;
                            i11 += (i10 * i10);
                            Test.instanceCount = -40914;
                            i11 = -15566;
                            i8 -= i6;
                            i11 &= i10;
                            i9 -= i10;
                            i8 = i10;
                            if (i9 != 0) {
                            }
                            {
                                java.io.PrintStream ax$5 = System.out;
                                java.io.PrintStream ax$6 = System.err;
                                java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                                    @Override
                                    public void write(int b) throws java.io.IOException {
                                        // DO NOTHING: DISCARD ALL OUTPUTS
                                    }
                                });
                                System.setOut(ax$7);
                                System.setErr(ax$7);
                                try {
                                    for (int ax$3 = -1331; ax$3 < 8005; ax$3 += 1) {
                                        int ax$1 = i9;
                                        try {
                                            java.lang.Object[] ax$0 = new Object[100000];
                                            if (i9 != -1)
                                                ax$0[i9] = null;
                                        } catch (Throwable ax$2) {
                                        } finally {
                                            i9 = ax$1;
                                        }
                                    }
                                } catch (Throwable ax$4) {
                                }
                                System.setOut(ax$5);
                                System.setErr(ax$6);
                            }
                            i12 >>>= i7;
                            if (i9 != 0) {
                            }
                            i12 = i6;
                        }
                        i11 -= (int) l;
                        Test.byFld &= (byte) l;
                        if (b) {
                            l = Test.instanceCount;
                            i8 += (i7 * i8);
                            i11 >>>= i7;
                            i12 = 12;
                            l += (((i7 * Test.instanceCount) + i12) - i12);
                            l += l;
                            f *= f;
                        } else if (b) {
                            iArr1[i7][i6 - 1] >>= i11;
                        }
                        break;
                    default:
                        dArr[i7 + 1] -= 1.411F;
                }
            }
        }
        long meth_res = l + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + i10 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(int i4, int i5) {
        if (ax$47) {
            try {
                byte[] ax$54 = new byte[16];
                byte[] ax$55 = new byte[16];
                if (ax$55.length != ax$54.length) {
                } else {
                    boolean ax$57 = false;
                    // Expect different byte[] between UTF-16LE and UTF-16BE
                    // even though encoder was previously cached by last call
                    // to getBytes().
                    for (int ax$56 = 0; ax$56 < ax$55.length; ax$56++) {
                        if (ax$55[ax$56] != ax$54[ax$56])
                            ax$57 = true;
                    }
                    if (!ax$57)
                        ;
                }
            } catch (Throwable ax$58) {
            } finally {
            }
            return;
        }
        int i13 = 52685, i14 = -63056, i15 = -25761, i16 = -10, i17 = -41331, i18 = -20289, i19 = -53641, i21 = -12, i22 = -48626, iArr[] = new int[N];
        double d = 59.110689, d1 = -1.123089, dArr1[] = new double[N];
        long l1 = -1443257598L, lArr[] = new long[N];
        boolean b1 = false, bArr[][] = new boolean[N][N];
        float[] fArr = new float[N];
        FuzzerUtils.init(iArr, 48862);
        FuzzerUtils.init(dArr1, 0.43111);
        FuzzerUtils.init(lArr, 2336258719L);
        FuzzerUtils.init(fArr, -18.691F);
        FuzzerUtils.init(bArr, false);
        i5 -= iArr[(i5 >>> 1) % N];
        Test.instanceCount >>= ((i4 - iMeth(Test.instanceCount)) * i4);
        i4 >>= i4;
        for (i13 = 15; i13 < 253; i13++) {
            i5 = (int) Test.fFld;
        }
        i15 = 1;
        do {
            d += -111;
            for (l1 = i15; l1 < 3; ++l1) {
                short s1 = -22625;
                s1 %= (short) (i16 | 1);
                Test.instanceCount = i15;
                for (i17 = 1; i17 < 1; ++i17) {
                    int i20 = 9;
                    i16 += i14;
                    Test.instanceCount -= (long) Test.fFld;
                    d = i5;
                    i16 = i13;
                    if (false)
                        continue;
                    Test.instanceCount = Test.instanceCount;
                    Test.fFld += 6;
                    i19 += i17;
                    dArr1[i15] = i16;
                    lArr[i17 + 1] = i13;
                    Test.fFld -= 3;
                    i18 -= i4;
                    i16 += (11 + (i17 * i17));
                    fArr[i15] *= i20;
                    bArr[(int) (l1)][i15 - 1] = b1;
                }
                i4 += (int) (((l1 * i14) + l1) - i4);
                Test.instanceCount -= l1;
                i5 -= i14;
                if (b1)
                    break;
                d1 = 1;
                while (++d1 < 1) {
                    Test.instanceCount += (long) (((d1 * s1) + Test.fFld) - l1);
                }
                i18 <<= 25667;
                i14 += (int) (-2635248827L + (l1 * l1));
                for (i21 = 1; i21 < 1; ++i21) {
                    s1 = (short) i15;
                    fArr[(int) (l1)] = Test.instanceCount;
                }
            }
        } while (++i15 < 171);
        vMeth1_check_sum += i4 + i5 + i13 + i14 + i15 + Double.doubleToLongBits(d) + l1 + i16 + i17 + i18 + i19 + (b1 ? 1 : 0) + Double.doubleToLongBits(d1) + i21 + i22 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(int i2, int i3) {
        short s = 27576;
        int i23 = -164, i24 = -30808, i25 = -19, i26 = 5, i27 = 250, iArr2[] = new int[N];
        double d2 = -1.96815;
        boolean b2 = false;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr2, -54525);
        FuzzerUtils.init(lArr1, 2356408113L);
        i3 -= (int) (Test.instanceCount + ((-(i3 + i2)) + i2));
        Test.instanceCount = s;
        {
            java.io.PrintStream ax$61 = System.out;
            java.io.PrintStream ax$62 = System.err;
            java.io.PrintStream ax$63 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$63);
            System.setErr(ax$63);
            try {
                ax$47 = true;
                for (int ax$59 = 0; ax$59 < 8022; ax$59 += 1) vMeth1(1583724295, 422710187);
            } catch (java.lang.Throwable ax$60) {
            } finally {
                ax$47 = false;
            }
            System.setOut(ax$61);
            System.setErr(ax$62);
        }
        vMeth1(i2, i3);
        for (float f1 : Test.fArrFld) {
            iArr2[(i2 >>> 1) % N] &= i2;
            Test.instanceCount += Test.byFld;
            for (i23 = 1; 2 > i23; i23++) {
                i24 += (int) Test.instanceCount;
                iArr2[i23] = i23;
                for (i25 = i23; 2 > i25; i25++) {
                    i26 = (int) 4L;
                    i24 -= Test.byFld;
                    i2 >>= 31114;
                    if (i24 != 0) {
                        vMeth_check_sum += i2 + i3 + s + i23 + i24 + i25 + i26 + Double.doubleToLongBits(d2) + (b2 ? 1 : 0) + i27 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    switch((i23 % 2) + 16) {
                        case 16:
                            lArr1 = lArr1;
                            break;
                        case 17:
                            i24 -= (int) f1;
                            i3 -= (int) f1;
                            i3 += (i25 - i24);
                            iArr2[i25 + 1] *= (int) 12L;
                            i3 &= i24;
                            i24 -= (int) 69L;
                            switch(((i23 % 1) * 5) + 61) {
                                case 63:
                                    iArr2[i25] = i23;
                                    Test.byFld += (byte) Test.instanceCount;
                                    s >>= (short) i23;
                                    break;
                                default:
                                    try {
                                        i24 = (iArr2[i25 + 1] / i26);
                                        i26 = (2 % i26);
                                        i2 = (i25 / i25);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    Test.fFld += (9 + (i25 * i25));
                                    lArr1[i23 + 1] += i26;
                                    Test.instanceCount += (long) d2;
                            }
                            if (b2)
                                break;
                            Test.instanceCount >>>= Test.instanceCount;
                            i24 = i3;
                            i26 += i23;
                            i2 += (((i25 * i3) + Test.fFld) - i2);
                            break;
                        default:
                            i27 = i24;
                            i3 += (int) -4216225762L;
                    }
                    {
                        java.io.PrintStream ax$36 = System.out;
                        java.io.PrintStream ax$37 = System.err;
                        java.io.PrintStream ax$38 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$38);
                        System.setErr(ax$38);
                        try {
                            for (int ax$34 = -3779; ax$34 < 2712; ax$34 += 1) {
                                try {
                                    java.util.concurrent.atomic.AtomicInteger ax$32 = new AtomicInteger(100);
                                    ax$32.incrementAndGet();
                                } catch (Throwable ax$33) {
                                } finally {
                                }
                            }
                        } catch (Throwable ax$35) {
                        }
                        System.setOut(ax$36);
                        System.setErr(ax$37);
                    }
                }
            }
        }
        vMeth_check_sum += i2 + i3 + s + i23 + i24 + i25 + i26 + Double.doubleToLongBits(d2) + (b2 ? 1 : 0) + i27 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {
        int i = -13, i1 = -10, i28 = -4, i29 = -6, i30 = 121, i31 = 5, i32 = 211, i33 = 59, i34 = -6, i35 = -56785, i36 = 20125, i37 = -129, i38 = -15637, i39 = -28, i40 = 0, iArr3[] = new int[N];
        double d3 = -17.79592;
        short s2 = 12159;
        boolean[] bArr1 = new boolean[N];
        long[] lArr2 = new long[N];
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr3, -2);
        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(lArr2, -30203L);
        FuzzerUtils.init(byArr, (byte) -126);
        for (i = 3; i < 226; ++i) {
            vMeth(i1, i1);
            iArr3[i] -= i;
            Test.instanceCount /= (i | 1);
            switch((i % 2) + 79) {
                case 79:
                    switch((i % 6) + 26) {
                        case 26:
                            for (i28 = 1; i28 < 23; i28++) {
                                i29 = (int) Test.fFld;
                                switch((i % 4) + 93) {
                                    case 93:
                                        Test.instanceCount = 7393;
                                        d3 = -139;
                                        for (i30 = 1; i30 < 2; ++i30) {
                                            iArr3[i - 1] = i1;
                                            i31 += (i30 * i30);
                                            i1 -= i32;
                                            Test.instanceCount = Test.instanceCount;
                                            i31 += i28;
                                        }
                                        switch((i % 9) + 31) {
                                            case 31:
                                                Test.fArrFld[i28] = i1;
                                                i31 += (i28 * i32);
                                                for (i33 = i28; i33 < 2; i33++) {
                                                    Test.sArrFld[i33] = (short) i31;
                                                    switch(((i % 2) * 5) + 98) {
                                                        case 102:
                                                            i31 *= 36652;
                                                            i31 = i32;
                                                            i31 <<= (int) -2L;
                                                            if (Test.bFld)
                                                                break;
                                                            s2 = (short) d3;
                                                            iArr3[i33 - 1] = i1;
                                                            iArr3[i33] += i33;
                                                            i34 /= 9;
                                                            i31 *= (int) d3;
                                                            i1 |= -51;
                                                            i32 = s2;
                                                            break;
                                                        case 108:
                                                            iArr3[i] += 14;
                                                            Test.fFld -= -4;
                                                            i32 = i32;
                                                            Test.instanceCount %= ((long) (Test.fFld) | 1);
                                                            break;
                                                    }
                                                    Test.instanceCount &= 83L;
                                                    i29 += i31;
                                                    i31 &= i29;
                                                    try {
                                                        i29 = (-54839 % iArr3[i28]);
                                                        i31 = (-50 % i28);
                                                        i31 = (i29 % 220);
                                                    } catch (ArithmeticException a_e) {
                                                    }
                                                    i29 <<= (int) Test.instanceCount;
                                                    bArr1 = FuzzerUtils.boolean1array(N, (boolean) true);
                                                    i31 *= (int) Test.fFld;
                                                    i32 = i31;
                                                    lArr2[i] = i30;
                                                    Test.instanceCount += i1;
                                                    i34 >>>= i33;
                                                }
                                                i29 += (int) -206L;
                                                switch(((i28 % 1) * 5) + 46) {
                                                    case 48:
                                                        i29 *= i32;
                                                        for (i35 = 1; 2 > i35; ++i35) {
                                                            switch((i % 10) + 81) {
                                                                case 81:
                                                                    i36 *= i29;
                                                                    i37 += (int) Test.instanceCount;
                                                                    break;
                                                                case 82:
                                                                    i36 = (int) Test.instanceCount;
                                                                    i1 += (int) d3;
                                                                    Test.sArrFld[i35 - 1] = (short) i35;
                                                                    dArrFld[i + 1] *= -2.7677;
                                                                    i34 -= i30;
                                                                    i29 = i35;
                                                                    d3 = i37;
                                                                    i34 -= i32;
                                                                    break;
                                                                case 83:
                                                                    d3 -= Test.instanceCount;
                                                                    d3 = Test.byFld;
                                                                    i29 = 36;
                                                                    break;
                                                                case 84:
                                                                    i29 *= (int) Test.fFld;
                                                                    switch((((40965 >>> 1) % 8) * 5) + 23) {
                                                                        case 46:
                                                                            Test.instanceCount -= Test.instanceCount;
                                                                            i34 = i28;
                                                                            i29 += i34;
                                                                            break;
                                                                        case 34:
                                                                            i37 = 25495;
                                                                            Test.bFld = Test.bFld;
                                                                            i31 += (((i35 * i37) + i37) - Test.fFld);
                                                                        case 62:
                                                                            i34 = i29;
                                                                            break;
                                                                        case 45:
                                                                            Test.instanceCount -= i35;
                                                                            break;
                                                                        case 63:
                                                                            i36 >>= -3143;
                                                                        case 27:
                                                                            iArr3[(i28 >>> 1) % N] = (int) Test.instanceCount;
                                                                            break;
                                                                        case 60:
                                                                            i1 += i35;
                                                                            break;
                                                                        case 41:
                                                                            i37 += (11 + (i35 * i35));
                                                                            break;
                                                                    }
                                                                    break;
                                                                case 85:
                                                                    Test.byFld += (byte) i33;
                                                                    break;
                                                                case 86:
                                                                    i32 += i32;
                                                                    break;
                                                                case 87:
                                                                    i1 = i30;
                                                                    break;
                                                                case 88:
                                                                    i34 -= -3;
                                                                    break;
                                                                case 89:
                                                                    d3 -= i;
                                                                case 90:
                                                                    i36 += (71 + (i35 * i35));
                                                                    break;
                                                                default:
                                                                    i37 = i34;
                                                            }
                                                        }
                                                        break;
                                                    default:
                                                        Test.instanceCount += (((i28 * Test.instanceCount) + i29) - i33);
                                                }
                                            case 32:
                                                i34 += (((i28 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                                                break;
                                            case 33:
                                                Test.instanceCount += 136;
                                                break;
                                            case 34:
                                                i31 *= i36;
                                                break;
                                            case 35:
                                                i32 = (int) -7.667F;
                                                break;
                                            case 36:
                                                i38 *= i28;
                                                break;
                                            case 37:
                                                byArr[i] -= (byte) -11;
                                                break;
                                            case 38:
                                                Test.byFld = (byte) i32;
                                                break;
                                            case 39:
                                                Test.instanceCount = 84;
                                                break;
                                            default:
                                                Test.fFld /= ((long) (d3) | 1);
                                        }
                                        break;
                                    case 94:
                                        i38 -= i28;
                                        break;
                                    case 95:
                                    case 96:
                                        Test.instanceCount >>= Test.instanceCount;
                                        break;
                                    default:
                                        i37 = i36;
                                }
                            }
                        case 27:
                            iArr3[i] = (int) Test.instanceCount;
                            break;
                        case 28:
                            i32 = -254;
                            break;
                        case 29:
                            try {
                                i29 = (i39 % 165);
                                i34 = (i38 / i33);
                                i32 = (-8 % i40);
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        case 30:
                            i36 >>= (int) Test.instanceCount;
                            break;
                        case 31:
                            try {
                                i39 = (iArr3[i - 1] / i28);
                                i39 = (i39 % -14724);
                                i1 = (i / i40);
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        default:
                            Test.instanceCount |= Test.instanceCount;
                    }
                    {
                        java.io.PrintStream ax$44 = System.out;
                        java.io.PrintStream ax$45 = System.err;
                        java.io.PrintStream ax$46 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$46);
                        System.setErr(ax$46);
                        try {
                            for (int ax$42 = -4926; ax$42 < 4188; ax$42 += 1) {
                                int ax$40 = i40;
                                try {
                                    long[] ax$39 = { // 7-bit
                                    0x0FL, 0x7FL, 0xFFL };
                                    for (; i40 < ax$39.length; i40++) {
                                        ax$39[i40] = (long) (i40 & 3);
                                    }
                                } catch (Throwable ax$41) {
                                } finally {
                                    i40 = ax$40;
                                }
                            }
                        } catch (Throwable ax$43) {
                        }
                        System.setOut(ax$44);
                        System.setErr(ax$45);
                    }
                case 80:
                    Test.instanceCount *= Test.instanceCount;
                    break;
                default:
                    Test.fArrFld[i] = Test.instanceCount;
            }
        }
        FuzzerUtils.out.println("i i1 i28 = " + i + "," + i1 + "," + i28);
        FuzzerUtils.out.println("i29 d3 i30 = " + i29 + "," + Double.doubleToLongBits(d3) + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 s2 i35 = " + i34 + "," + s2 + "," + i35);
        FuzzerUtils.out.println("i36 i37 i38 = " + i36 + "," + i37 + "," + i38);
        FuzzerUtils.out.println("i39 i40 iArr3 = " + i39 + "," + i40 + "," + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("bArr1 lArr2 byArr = " + FuzzerUtils.checkSum(bArr1) + "," + FuzzerUtils.checkSum(lArr2) + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.fFld = " + Test.instanceCount + "," + Test.byFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld Test.fArrFld Test.sArrFld = " + (Test.bFld ? 1 : 0) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$64) {
            try {
                // Run long enough to trigger an OSR
                for (int ax$65 = 200000; ax$65 != 0; ax$65--) {
                }
            } catch (Throwable ax$66) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$47 = false;

    private static Boolean ax$64 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
