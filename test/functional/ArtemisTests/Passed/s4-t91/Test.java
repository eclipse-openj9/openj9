// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 13L;

    public static float fFld = 5.33F;

    public boolean bFld = false;

    public static float fFld1 = 1.62F;

    public static long[] lArrFld = new long[N];

    public static int[] iArrFld = new int[N];

    public static volatile long[] lArrFld1 = new long[N];

    public float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 243L);
        FuzzerUtils.init(Test.iArrFld, 50);
        FuzzerUtils.init(Test.lArrFld1, 3137L);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth(float f, int i5) {
        int i6 = -2, i7 = 37482, i8 = -31578, i9 = -4565, i10 = -60666, i11 = -9, i12 = -12, i13 = 14, i14 = -46;
        byte by = 39;
        short s = -25218;
        double d1 = 31.118338;
        boolean b = true;
        float[] fArr = new float[N];
        FuzzerUtils.init(fArr, -101.740F);
        for (i6 = 9; i6 < 222; ++i6) {
            i5 += (((i6 * i7) + Test.instanceCount) - i7);
            if (b) {
                f += (i6 * i6);
                Test.lArrFld[i6 + 1] <<= 14;
                i5 += (i6 * i6);
                Test.instanceCount += (i6 ^ i7);
                i7 = i5;
                i7 >>>= i5;
                f %= -74;
                Test.instanceCount -= i6;
            } else if (false) {
                Test.lArrFld[i6 + 1] = i5;
                for (i8 = 1; i8 < 3; i8++) {
                    f += (i8 * i5);
                    i9 = i9;
                    Test.instanceCount = i6;
                    Test.instanceCount >>= i5;
                    fArr[i8] *= f;
                    i9 *= (int) -270302827L;
                    Test.iArrFld[i6] -= i5;
                    fArr[i6 - 1] += by;
                    Test.instanceCount += i8;
                    i7 -= i8;
                    s <<= s;
                }
                i7 <<= (int) Test.instanceCount;
                if (i5 != 0) {
                }
                for (d1 = 3; d1 > i6; d1 -= 2) {
                    for (i11 = 1; i11 > 1; i11 -= 2) {
                        f -= i9;
                    }
                    for (i13 = 1; i13 < 1; ++i13) {
                        i14 += i13;
                        i12 = i7;
                        i5 += (((i13 * i9) + Test.instanceCount) - i11);
                        s += (short) (i13 * i13);
                        i5 = (int) Test.instanceCount;
                        Test.instanceCount *= i10;
                        Test.lArrFld[i13 + 1] = Test.instanceCount;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + i9 + by + s + Double.doubleToLongBits(d1) + i10 + i11 + i12 + i13 + i14 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth(int i2) {
        int i3 = 23, i4 = -55025, i15 = 14099, i16 = 505, i17 = -7, i18 = 6, i19 = -2, iArr[] = new int[N];
        boolean b1 = false;
        byte by1 = 122;
        short s1 = 11153;
        float[] fArr1 = new float[N];
        long[] lArr = new long[N];
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(fArr1, -1.255F);
        FuzzerUtils.init(lArr, 27L);
        FuzzerUtils.init(dArr, -31.111264);
        for (i3 = 1; i3 < 95; ++i3) {
            float f1 = -81.885F;
            iArr[i3] *= (int) lMeth(f1, 2);
            if (b1) {
                fArr1[i3 + 1] += 36684;
                i15 = 1;
                do {
                    for (i16 = i3; i16 < 1; ++i16) {
                        f1 -= f1;
                        Test.lArrFld1[i15] -= Test.instanceCount;
                        i2 = (int) f1;
                    }
                    i17 &= i3;
                    for (i18 = 1; i18 < 1; ++i18) {
                        i17 += (int) Test.instanceCount;
                        i17 = i18;
                        i2 >>= (int) 2558921761L;
                        iArr[i15 - 1] -= (int) f1;
                        Test.instanceCount += i17;
                        Test.instanceCount += (i18 * i18);
                        try {
                            i17 = (i19 % i4);
                            i4 = (i15 % i4);
                            i19 = (i19 / -10365);
                        } catch (ArithmeticException a_e) {
                        }
                        lArr[i3] = i19;
                        switch(((i15 >>> 1) % 7) + 35) {
                            case 35:
                                if (b1)
                                    continue;
                                dArr[i18] -= i4;
                                Test.instanceCount -= i3;
                                i17 += i19;
                                iArr[i3] *= 58816;
                                break;
                            case 36:
                                Test.instanceCount = (long) f1;
                                f1 = -14805L;
                                switch(((i15 >>> 1) % 7) + 96) {
                                    case 96:
                                        Test.iArrFld[i3] = (int) Test.instanceCount;
                                        i2 += (i18 * i18);
                                        Test.instanceCount += i18;
                                        i19 += i15;
                                    case 97:
                                        i19 = 30148;
                                        i19 += (i18 * i18);
                                        i17 += (int) (17043L + (i18 * i18));
                                        i19 = i19;
                                        i4 -= (int) Test.instanceCount;
                                        break;
                                    case 98:
                                        i17 = 8472;
                                        break;
                                    case 99:
                                        i19 = -1;
                                        break;
                                    case 100:
                                        by1 -= (byte) i2;
                                        break;
                                    case 101:
                                        iArr[i15] -= (int) f1;
                                        break;
                                    case 102:
                                        f1 = i4;
                                        break;
                                    default:
                                        if (i4 != 0) {
                                            vMeth_check_sum += i2 + i3 + i4 + i15 + i16 + i17 + i18 + i19 + (b1 ? 1 : 0) + by1 + s1 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                                            return;
                                        }
                                }
                                break;
                            case 37:
                                i2 += i18;
                                break;
                            case 38:
                                Test.instanceCount = -14L;
                                break;
                            case 39:
                                Test.iArrFld = Test.iArrFld;
                                break;
                            case 40:
                                f1 -= 57143;
                                break;
                            case 41:
                                i19 >>= s1;
                                break;
                            default:
                                Test.iArrFld[i15] = i18;
                        }
                    }
                } while (++i15 < 6);
            } else if (b1) {
                f1 = i3;
            } else {
                i17 += i15;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i15 + i16 + i17 + i18 + i19 + (b1 ? 1 : 0) + by1 + s1 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(int i1) {
        double d = 1.79088, d2 = -108.61130, dArr1[] = new double[N];
        int i20 = 202, i21 = -159, i22 = -9819, i23 = 13, i24 = -1, i25 = -129, i26 = 1, i27 = -11, i28 = 50818, i29 = 53726, iArr1[][] = new int[N][N];
        long l = 5144602896641819961L;
        boolean b2 = true;
        short s2 = -24947;
        FuzzerUtils.init(iArr1, -217);
        FuzzerUtils.init(dArr1, 0.63097);
        d = 1;
        while (++d < 94) {
            vMeth(i1);
            i1 -= -4951;
            for (i20 = 1; i20 < 6; ++i20) {
                i21 -= (int) Test.instanceCount;
                i21 /= (int) (i20 | 1);
                Test.fFld -= -6254;
                iArr1 = iArr1;
                i1 *= (int) Test.fFld;
                d2 += i20;
                for (i22 = i20; 2 > i22; ++i22) {
                    Test.instanceCount -= i1;
                }
                i1 = (int) d;
                Test.fFld *= i1;
                for (i24 = (int) (d); 2 > i24; ++i24) {
                    l = i1;
                    if (b2)
                        continue;
                    i21 = i24;
                    Test.iArrFld[i20] -= (int) Test.fFld;
                    l = s2;
                    dArr1[i20 + 1] = Test.instanceCount;
                    i25 -= (int) Test.fFld;
                    i25 += i24;
                    Test.iArrFld[i20 + 1] += i20;
                    Test.fFld = l;
                }
                s2 <<= (short) i22;
            }
        }
        for (i26 = 248; i26 > 11; --i26) {
            Test.fFld += i26;
            for (i28 = 1; i28 < 3; i28 += 2) {
                Test.iArrFld[i26 - 1] |= i1;
                i25 = (int) l;
                Test.instanceCount |= Test.instanceCount;
                i23 = (int) Test.instanceCount;
                i25 += i28;
                i25 += (-14 + (i28 * i28));
            }
            i29 += (int) d2;
            i23 += (((i26 * i23) + i24) - i28);
        }
        long meth_res = i1 + Double.doubleToLongBits(d) + i20 + i21 + Double.doubleToLongBits(d2) + i22 + i23 + i24 + i25 + l + (b2 ? 1 : 0) + s2 + i26 + i27 + i28 + i29 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -57781, i30 = -42730, i31 = 7, i32 = -1, i33 = -11, i34 = -4, i35 = -28097, i36 = -221, i37 = 23593, i38 = -13184, i39 = 24, i40 = -7, i41 = 2, i42 = -56207, i43 = 3, i44 = -5, i45 = -12, i46 = 9;
        short s3 = -30789;
        byte by2 = 86;
        double d3 = 1.105625, d4 = 109.94752;
        Test.lArrFld[(i >>> 1) % N] >>= ((i - iMeth(i)) * -50938);
        for (i30 = 9; i30 < 153; i30++) {
            for (i32 = 2; i32 < 35; ++i32) {
                Test.instanceCount += (i32 * i32);
                i = -24485;
                i33 += (i32 * i);
            }
            for (i34 = 1; i34 < 35; i34++) {
                i31 += (((i34 * s3) + s3) - Test.instanceCount);
                by2 >>= (byte) i30;
                Test.fFld = by2;
                if (bFld)
                    continue;
            }
            for (i36 = 2; 35 > i36; i36++) {
                Test.instanceCount <<= Test.instanceCount;
                try {
                    Test.iArrFld[i30] = (244 / Test.iArrFld[i36 - 1]);
                    Test.iArrFld[i30] = (1099436040 % i31);
                    i37 = (Test.iArrFld[i30] / 2022);
                } catch (ArithmeticException a_e) {
                }
                i35 += (((i36 * i) + i35) - Test.instanceCount);
            }
            Test.fFld = Test.instanceCount;
            i37 += i30;
            for (i38 = 2; i38 < 35; i38++) {
                i40 = 1;
                while (++i40 < 2) {
                    i35 &= 10;
                    d3 += d3;
                    Test.instanceCount += (i40 - i30);
                    Test.iArrFld[i40] -= i39;
                    i += (i40 + i38);
                    d3 -= Test.instanceCount;
                    i39 *= i;
                    Test.instanceCount += i40;
                    i33 += i;
                    if (bFld)
                        continue;
                    d4 -= 123.480F;
                    if (bFld)
                        break;
                    Test.instanceCount = (long) Test.fFld;
                }
                for (i41 = 1; i41 < 2; ++i41) {
                    i42 = i;
                    switch((i30 % 2) + 123) {
                        case 123:
                            d3 += s3;
                            bFld = bFld;
                            i = i37;
                            d3 -= i32;
                            i35 += (-36529 + (i41 * i41));
                            i *= i40;
                            i -= -106;
                            i31 = (int) Test.instanceCount;
                            i33 -= (int) d4;
                            i31 <<= (int) 254L;
                            Test.instanceCount = i;
                            i37 = (int) Test.instanceCount;
                            Test.instanceCount >>= i39;
                            break;
                        case 124:
                            try {
                                i35 = (16809 / i40);
                                i37 = (i32 % 46);
                                i35 = (i37 % i30);
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        default:
                            fArrFld = fArrFld;
                    }
                    i33 += i;
                    by2 <<= (byte) i40;
                    i = i38;
                    i31 = i40;
                    Test.lArrFld1[i41] = i37;
                    s3 = (short) Test.fFld;
                    Test.iArrFld[i41] >>= by2;
                }
            }
            i33 = (int) Test.fFld;
            i35 += (((i30 * i42) + Test.instanceCount) - Test.instanceCount);
        }
        for (float f2 : fArrFld) {
            if (true)
                continue;
            for (i43 = 1; i43 < 20; i43++) {
                for (i45 = 1; i45 < 2; ++i45) {
                    switch((i45 % 3) + 4) {
                        case 4:
                            Test.iArrFld[i43 - 1] *= (int) d3;
                            by2 = (byte) 1.68379;
                            i39 += (((i45 * Test.fFld1) + Test.fFld1) - Test.instanceCount);
                            i44 *= i32;
                            switch(((i45 % 3) * 5) + 113) {
                                case 114:
                                    Test.iArrFld = Test.iArrFld;
                                    i31 = i38;
                                    Test.iArrFld[i45 + 1] &= i39;
                                    Test.iArrFld = FuzzerUtils.int1array(N, (int) 8);
                                    i44 = (int) -3784800502L;
                                    Test.instanceCount = i34;
                                    break;
                                case 124:
                                    Test.instanceCount &= -29993;
                                    break;
                                case 123:
                                    i = (int) Test.instanceCount;
                                default:
                                    Test.fFld = -2L;
                            }
                            break;
                        case 5:
                            i44 += (int) Test.fFld;
                            break;
                        case 6:
                            if (bFld)
                                break;
                            break;
                        default:
                            Test.instanceCount /= ((long) (d4) | 1);
                    }
                }
            }
        }
        FuzzerUtils.out.println("i i30 i31 = " + i + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 s3 by2 = " + i35 + "," + s3 + "," + by2);
        FuzzerUtils.out.println("i36 i37 i38 = " + i36 + "," + i37 + "," + i38);
        FuzzerUtils.out.println("i39 i40 d3 = " + i39 + "," + i40 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("d4 i41 i42 = " + Double.doubleToLongBits(d4) + "," + i41 + "," + i42);
        FuzzerUtils.out.println("i43 i44 i45 = " + i43 + "," + i44 + "," + i45);
        FuzzerUtils.out.println("i46 = " + i46);
        FuzzerUtils.out.println("Test.instanceCount Test.fFld bFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld1 Test.lArrFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld1) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld1 fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
