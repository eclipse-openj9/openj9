// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.nio.channels.SocketChannel;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 1706017336141396437L;

    public float fFld = 0.779F;

    public static volatile double dFld = 0.13369;

    public static byte byFld = -18;

    public static long lFld = -14L;

    public static long lFld1 = 28166L;

    public short sFld = -30111;

    public static int[] iArrFld = new int[N];

    public static long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -34805);
        FuzzerUtils.init(Test.lArrFld, -59168L);
    }

    public static long lMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i7) {
        int i8 = 9, i9 = 25683, i10 = 13, i11 = 224, i12 = -64908, i13 = -11, i14 = 10, i15 = 8;
        boolean b = true;
        long l1 = -11246L, lArr[] = new long[N];
        FuzzerUtils.init(lArr, -14L);
        for (i8 = 8; i8 < 248; ++i8) {
            Test.iArrFld[i8 + 1] = i9;
            Test.instanceCount = i9;
            for (i10 = 3; i10 > 1; i10 -= 2) {
                for (i12 = 1; 3 > i12; ++i12) {
                    i13 >>= i10;
                    lArr[i10 + 1] = i13;
                    i7 -= i11;
                }
                Test.instanceCount = i10;
                for (i14 = 1; i14 < 3; i14++) {
                    Test.iArrFld[i10 - 1] *= (int) Test.instanceCount;
                    i9 >>>= i13;
                    Test.iArrFld[i14 + 1] >>= 3;
                    i11 = (int) Test.instanceCount;
                    i11 -= (int) Test.instanceCount;
                    i9 /= (int) ((long) (Test.dFld) | 1);
                    i11 += (((i14 * i13) + i14) - i13);
                    Test.instanceCount = i14;
                    Test.dFld *= Test.dFld;
                    switch((((173 >>> 1) % 8) * 5) + 1) {
                        case 9:
                            i7 += (-182 + (i14 * i14));
                            Test.iArrFld[i14 + 1] &= i14;
                            switch((((29487 >>> 1) % 8) * 5) + 27) {
                                case 63:
                                    i11 += (int) -1.74922;
                                    Test.iArrFld[i14 + 1] -= i8;
                                    i9 += i11;
                                    b = false;
                                    i7 = Test.byFld;
                                    Test.instanceCount += Test.instanceCount;
                                    Test.dFld *= Test.dFld;
                                    lArr = lArr;
                                    Test.instanceCount = -2L;
                                    i13 += i14;
                                    i13 -= (int) -231L;
                                    Test.instanceCount = (long) Test.dFld;
                                    break;
                                case 42:
                                case 58:
                                    i11 -= i8;
                                    i7 = (int) -2683975075227162330L;
                                    break;
                                case 37:
                                    l1 -= Test.instanceCount;
                                case 54:
                                    i15 = (int) Test.instanceCount;
                                    break;
                                case 57:
                                    i15 *= -41475;
                                    break;
                                case 65:
                                case 66:
                            }
                            break;
                        case 22:
                            i7 = i7;
                            break;
                        case 21:
                            try {
                                i11 = (-34224 / Test.iArrFld[i8]);
                                i7 = (i9 / i11);
                                i11 = (i13 % Test.iArrFld[i10]);
                            } catch (ArithmeticException a_e) {
                            }
                            {
                                java.io.PrintStream ax$6 = System.out;
                                java.io.PrintStream ax$7 = System.err;
                                java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                                    @Override
                                    public void write(int b) throws java.io.IOException {
                                        // DO NOTHING: DISCARD ALL OUTPUTS
                                    }
                                });
                                System.setOut(ax$8);
                                System.setErr(ax$8);
                                try {
                                    for (int ax$4 = -3893; ax$4 < 5536; ax$4 += 1) {
                                        try {
                                            float[] ax$2 = new float[16];
                                            float[] ax$0 = new float[16];
                                            for (int ax$1 = 0; ax$1 < ax$2.length; ax$1 += 1) {
                                                ax$2[ax$1] = ax$0[ax$1] + (float) (ax$1 & 3);
                                            }
                                        } catch (Throwable ax$3) {
                                        } finally {
                                        }
                                    }
                                } catch (Throwable ax$5) {
                                }
                                System.setOut(ax$6);
                                System.setErr(ax$7);
                            }
                            break;
                        case 39:
                        case 33:
                            i13 *= (int) -13.377F;
                            break;
                        case 23:
                            Test.byFld += (byte) i7;
                            break;
                        case 25:
                            i15 = i8;
                        case 24:
                            i7 += i12;
                    }
                }
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + l1 + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(long l) {
        int i4 = 205, i5 = 3, i6 = -32783, i16 = -7;
        float f = 85.190F, fArr[] = new float[N];
        FuzzerUtils.init(fArr, 17.525F);
        i4 -= (int) (-((i4 + i4) * (Test.instanceCount++)));
        {
            java.io.PrintStream ax$9 = System.out;
            java.io.PrintStream ax$10 = System.err;
            java.io.PrintStream ax$11 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$11);
            System.setErr(ax$11);
            {
                boolean ax$17 = false;
                for (int ax$16 = -58; ax$16 < 5975; ax$16 += 3) {
                    if (!ax$17) {
                        ax$17 = true;
                        {
                            System.setOut(ax$9);
                            System.setErr(ax$10);
                            for (i5 = 2; i5 < 118; i5 += 2) {
                                fArr = (fArr = (fArr = fArr));
                                Test.instanceCount -= -67L;
                                Test.dFld *= iMeth1(i5);
                                i4 = (int) Test.lFld;
                                f = i5;
                            }
                            System.setOut(ax$11);
                            System.setErr(ax$11);
                        }
                    }
                    int ax$14 = i4;
                    try {
                        java.nio.channels.SocketChannel[] ax$12 = new java.nio.channels.SocketChannel[936];
                        // clean-up
                        for (int ax$13 = 0; ax$13 < i4; ax$13++) {
                            ax$12[ax$13].close();
                        }
                    } catch (Throwable ax$15) {
                    } finally {
                        i4 = ax$14;
                    }
                }
            }
            System.setOut(ax$9);
            System.setErr(ax$10);
        }
        l += -62;
        i16 = 1;
        do {
            Test.iArrFld[i16 + 1] *= (int) Test.lFld;
            i4 = 31474;
            i6 *= (int) Test.dFld;
        } while (++i16 < 149);
        long meth_res = l + i4 + i5 + i6 + Float.floatToIntBits(f) + i16 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public long lMeth(int i2, int i3) {
        if (ax$18) {
            try {
                java.lang.Object[] ax$23 = new Object[250];
                int ax$19 = 0;
                try {
                    // Exercise the implicit null check in the unverified entry point
                    for (int ax$21 = 0; ax$21 < 40000; ax$21++) {
                        int ax$20 = ax$23.length;
                        if (ax$21 < 20000)
                            ax$20 = 1;
                        for (int ax$22 = 0; ax$22 < ax$20; ax$22++) {
                            ax$19 += ax$23[ax$22].hashCode();
                        }
                    }
                } catch (NullPointerException e) {
                    // this is expected.  A true failure causes a crash
                }
            } catch (Throwable ax$24) {
            } finally {
            }
            return -3090315439840809288L;
        }
        int i17 = -4, i18 = 3, i19 = -38089, i20 = -30509;
        short s = 13515;
        boolean b1 = false;
        long l2 = -141L, lArr1[] = new long[N];
        FuzzerUtils.init(lArr1, -211570879L);
        fFld *= (float) Math.sqrt(iMeth(Test.lFld) + i2);
        i17 = 1;
        do {
            i3 *= (int) Test.lFld;
            i2 ^= (int) Test.instanceCount;
            for (i18 = i17; i18 < 3; i18++) {
                Test.instanceCount = (long) 1.516F;
                Test.dFld = fFld;
                switch((((i17 >>> 1) % 1) * 5) + 75) {
                    case 76:
                        switch(((i18 % 10) * 5) + 8) {
                            case 33:
                                i19 += s;
                                lArr1[i17] = Test.instanceCount;
                                lArr1 = lArr1;
                                break;
                            case 57:
                                i19 = 24819;
                                break;
                            case 27:
                                if (true)
                                    continue;
                                i20 = 1;
                                while (++i20 < 1) {
                                    Test.instanceCount = i20;
                                    i2 %= (int) (i18 | 1);
                                    Test.lFld -= i20;
                                    i2 |= i3;
                                    i2 = i20;
                                    switch((i18 % 1) + 7) {
                                        case 7:
                                            switch((((i18 >>> 1) % 5) * 5) + 29) {
                                                case 37:
                                                    i2 = i18;
                                                    i19 += (((i20 * Test.instanceCount) + i19) - i3);
                                                    if (b1)
                                                        continue;
                                                    Test.iArrFld[i18 + 1] -= -11;
                                                    i2 += (int) fFld;
                                                    i3 = (int) 124L;
                                                    i3 = i2;
                                                    i2 += (i20 * i20);
                                                    i2 += i20;
                                                    Test.lFld += Test.lFld1;
                                                    Test.lFld += (((i20 * i2) + Test.instanceCount) - fFld);
                                                    break;
                                                case 42:
                                                    s = (short) i18;
                                                    Test.lFld1 <<= i20;
                                                    break;
                                                case 44:
                                                    i19 += (((i20 * i19) + i20) - Test.instanceCount);
                                                    i19 += (int) Test.instanceCount;
                                                    break;
                                                case 52:
                                                    Test.iArrFld[i20] = i19;
                                                    break;
                                                case 49:
                                                    lArr1[i20 + 1] >>= 224;
                                            }
                                            break;
                                    }
                                }
                            case 20:
                                i3 += (int) fFld;
                                break;
                            case 25:
                                fFld -= 9;
                            case 54:
                                i19 -= i2;
                            case 34:
                                fFld += (i18 - l2);
                                break;
                            case 41:
                                i19 += i18;
                                break;
                            case 37:
                                i2 ^= i2;
                                break;
                            case 53:
                                Test.iArrFld[i18 - 1] *= (int) Test.instanceCount;
                                break;
                            default:
                                i19 = 60;
                        }
                        break;
                    default:
                        fFld += i18;
                }
            }
        } while (++i17 < 213);
        long meth_res = i2 + i3 + i17 + i18 + i19 + s + i20 + (b1 ? 1 : 0) + l2 + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {
        if (ax$30) {
            try {
                int ax$34 = 268435455;
                int[] ax$31 = { 1, 3 };
                for (int ax$32 = 0; ax$32 < ax$34; ax$32++) {
                    for (int ax$33 = 0; ax$33 <= ax$32; ax$33++) {
                        ax$31[ax$33] += 1;
                    }
                    for (int ax$33 = ax$32; ax$33 >= 0; ax$33--) {
                        ax$31[ax$33] += 1;
                    }
                    for (int ax$33 = ax$32 + 1; ax$33 < ax$34; ax$33++) {
                        ax$31[ax$33] += 1;
                    }
                    for (int ax$33 = ax$34 - 1; ax$33 >= ax$32 + 1; ax$33--) {
                        ax$31[ax$33] += 1;
                    }
                }
            } catch (Throwable ax$35) {
            } finally {
            }
            return;
        }
        int i = 40226, i1 = 202, i21 = 59794, i22 = 165, i23 = -11;
        long l3 = -3471781054L, l4 = 32943L;
        boolean b2 = true;
        byte by = -97;
        float[] fArr1 = new float[N];
        FuzzerUtils.init(fArr1, -2.378F);
        if (b2) {
            for (i = 2; 98 > i; i += 3) {
                i1 <<= (i1++);
                {
                    java.io.PrintStream ax$27 = System.out;
                    java.io.PrintStream ax$28 = System.err;
                    java.io.PrintStream ax$29 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$29);
                    System.setErr(ax$29);
                    try {
                        ax$18 = true;
                        for (int ax$25 = 0; ax$25 < 8360; ax$25 += 1) lMeth(-774844827, 1432350981);
                    } catch (java.lang.Throwable ax$26) {
                    } finally {
                        ax$18 = false;
                    }
                    System.setOut(ax$27);
                    System.setErr(ax$28);
                }
                lMeth(i, i1);
                i1 += (((i * fFld) + Test.instanceCount) - i);
                fFld = sFld;
                Test.lFld1 += (i * i);
                i1 += (186 + (i * i));
                i21 = 1;
                while (++i21 < 157) {
                    for (i22 = i; i22 < 1; i22++) {
                        Test.dFld += 36779;
                        i1 = i1;
                        l3 -= i23;
                        l4 += i23;
                        i1 += -17013;
                        Test.lFld1 <<= i;
                        switch((i22 % 4) + 125) {
                            case 125:
                                i23 += (i22 | (long) fFld);
                                i1 += (i22 ^ (long) fFld);
                                break;
                            case 126:
                                Test.iArrFld[i - 1] += (int) 1.72583;
                                l4 += i22;
                                i23 += (-145 + (i22 * i22));
                                l3 += (long) fFld;
                                i1 = i23;
                            case 127:
                                Test.byFld += (byte) i1;
                                break;
                            case 128:
                                l3 += Test.byFld;
                                i23 <<= i;
                                i23 -= i;
                                i23 = i1;
                                i23 += (((i22 * l3) + sFld) - i23);
                                break;
                            default:
                                Test.byFld += (byte) (i22 * i);
                                fFld += Test.byFld;
                                i23 += (int) 2.748F;
                                Test.lFld1 += l3;
                                fFld -= Test.lFld1;
                                Test.iArrFld = Test.iArrFld;
                        }
                        if (b2) {
                            i23 *= i22;
                            if (b2) {
                                i1 += i22;
                                i23 += i22;
                                if (true)
                                    continue;
                                fFld += i22;
                                if (b2)
                                    continue;
                                try {
                                    i23 = (-160 % i23);
                                    i23 = (i22 / 1844);
                                    i1 = (i22 % -58482);
                                } catch (ArithmeticException a_e) {
                                }
                                i23 += (int) Test.lFld;
                            } else if (b2) {
                                i23 -= (int) l3;
                            } else {
                                i1 -= i;
                                switch((((i >>> 1) % 6) * 5) + 111) {
                                    case 113:
                                        Test.iArrFld[i - 1] ^= i23;
                                        switch(((i21 % 2) * 5) + 88) {
                                            case 90:
                                            case 89:
                                                fFld += i22;
                                                Test.iArrFld = Test.iArrFld;
                                                switch((i % 4) + 106) {
                                                    case 106:
                                                        i23 += (int) -137L;
                                                        i1 = (int) l3;
                                                        fFld += ((long) i22 | (long) i1);
                                                        fFld -= i23;
                                                    case 107:
                                                        Test.dFld *= -38779;
                                                        Test.dFld *= i1;
                                                        i1 = i21;
                                                        break;
                                                    case 108:
                                                        i1 += (-44237 + (i22 * i22));
                                                        fFld += (i22 * i22);
                                                        fFld = i22;
                                                        Test.byFld >>>= (byte) -29251;
                                                        i1 *= sFld;
                                                        i1 >>= (int) l4;
                                                        l4 -= i22;
                                                        l3 /= (by | 1);
                                                        Test.iArrFld[i] *= (int) fFld;
                                                        Test.lFld ^= by;
                                                        Test.instanceCount += (((i22 * l3) + Test.lFld) - i23);
                                                    case 109:
                                                        i1 *= (int) l3;
                                                        fArr1[i22 - 1] *= Test.instanceCount;
                                                        Test.dFld = -216;
                                                        break;
                                                }
                                            default:
                                                i23 += i21;
                                        }
                                        break;
                                    case 121:
                                        i23 ^= i21;
                                        break;
                                    case 128:
                                        if (b2)
                                            break;
                                    case 122:
                                        Test.lFld1 += (i22 + i22);
                                        break;
                                    case 115:
                                        Test.iArrFld[i] += -10;
                                        break;
                                    case 133:
                                        i23 = i22;
                                        break;
                                    default:
                                        fArr1[i22 - 1] *= sFld;
                                }
                            }
                        } else if (false) {
                            if (b2)
                                continue;
                        }
                    }
                }
            }
        } else if (b2) {
            i23 = sFld;
        } else {
            Test.lArrFld[(i >>> 1) % N] *= -6;
        }
        FuzzerUtils.out.println("i i1 i21 = " + i + "," + i1 + "," + i21);
        FuzzerUtils.out.println("i22 i23 l3 = " + i22 + "," + i23 + "," + l3);
        FuzzerUtils.out.println("l4 b2 by = " + l4 + "," + (b2 ? 1 : 0) + "," + by);
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("Test.instanceCount fFld Test.dFld = " + Test.instanceCount + "," + Float.floatToIntBits(fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld Test.lFld Test.lFld1 = " + Test.byFld + "," + Test.lFld + "," + Test.lFld1);
        FuzzerUtils.out.println("sFld Test.iArrFld Test.lArrFld = " + sFld + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$18 = false;

    private static Boolean ax$30 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  lMeth ->  lMeth mainTest
// DEBUG  iMeth ->  iMeth lMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
