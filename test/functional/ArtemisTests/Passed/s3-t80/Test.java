// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.Pipe;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 3670628851847609388L;

    public int iFld = 13;

    public static volatile int iFld1 = -39;

    public static boolean bFld = false;

    public static byte byFld = -23;

    public static short sFld = -24497;

    public static volatile int iFld2 = -10;

    public boolean bFld1 = true;

    public double dFld = -22.108488;

    public static double[] dArrFld = new double[N];

    public static boolean[] bArrFld = new boolean[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.31895);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i1, byte by, int i2) {
        int i3 = -9, i4 = -128, i5 = 0, i6 = 3, i7 = -28831, i8 = -47911, i9 = 8, i10 = 0, i11 = 35635, i12 = -27546, i13 = 2503, i14 = -9, i15 = 40119, iArr[] = new int[N];
        double d = 0.27817;
        short s1 = 25046;
        float f2 = 86.755F;
        long l1 = -54465L, lArr[] = new long[N];
        FuzzerUtils.init(iArr, 126);
        FuzzerUtils.init(lArr, 3127446199444393990L);
        iArr[(Test.iFld1 >>> 1) % N] -= i2;
        i2 *= i2;
        for (i3 = 6; i3 < 128; ++i3) {
            Test.instanceCount = Test.iFld1;
            i1 = (int) 1.651F;
            if (Test.iFld1 != 0) {
            }
        }
        i4 = Test.iFld1;
        for (i5 = 2; 87 > i5; ++i5) {
            switch(((i4 >>> 1) % 3) + 2) {
                case 2:
                    iArr[i5 + 1] += i5;
                    d *= d;
                    break;
                case 3:
                    if (Test.bFld)
                        continue;
                    for (i7 = 6; i7 > 1; i7--) {
                        lArr[i7] += 50587;
                    }
                    try {
                        i4 = (-31247 / i8);
                        iArr[i5 + 1] = (iArr[i5] % -50312);
                        i2 = (iArr[i5 - 1] % -34043);
                    } catch (ArithmeticException a_e) {
                    }
                    Test.iFld1 >>= i3;
                    s1 += (short) (14L + (i5 * i5));
                case 4:
                    Test.instanceCount >>= i4;
                    for (i9 = 1; i9 < 6; ++i9) {
                        i4 += (int) f2;
                        i10 *= i8;
                        f2 /= ((long) (f2) | 1);
                        for (i11 = 1; i11 < 2; ++i11) {
                            i6 <<= (int) -2L;
                            i12 = i8;
                            i4 = i4;
                            iArr[i5 - 1] *= i13;
                        }
                        if (false)
                            break;
                        lArr[i9 + 1] >>= i12;
                        for (i14 = 1; 2 > i14; i14++) {
                            switch((i5 % 9) + 93) {
                                case 93:
                                    if (Test.bFld)
                                        break;
                                    l1 += (i14 + i6);
                                    Test.instanceCount |= 156;
                                    i10 ^= (int) Test.instanceCount;
                                    i15 = 10;
                                    Test.instanceCount += (-2 + (i14 * i14));
                                    break;
                                case 94:
                                    Test.instanceCount += (i14 * i14);
                                    break;
                                case 95:
                                    i12 *= (int) 3889L;
                                    break;
                                case 96:
                                    f2 += (i14 * i14);
                                    break;
                                case 97:
                                case 98:
                                    {
                                        java.io.PrintStream ax$0 = System.out;
                                        java.io.PrintStream ax$1 = System.err;
                                        java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                            @Override
                                            public void write(int b) throws java.io.IOException {
                                                // DO NOTHING: DISCARD ALL OUTPUTS
                                            }
                                        });
                                        System.setOut(ax$2);
                                        System.setErr(ax$2);
                                        {
                                            boolean ax$8 = false;
                                            for (int ax$7 = -4578; ax$7 < 1433; ax$7 += 2) {
                                                if (!ax$8) {
                                                    ax$8 = true;
                                                    {
                                                        System.setOut(ax$0);
                                                        System.setErr(ax$1);
                                                        if (Test.iFld1 != 0) {
                                                        }
                                                        System.setOut(ax$2);
                                                        System.setErr(ax$2);
                                                    }
                                                }
                                                int ax$5 = i11;
                                                try {
                                                    float[] ax$4 = new float[10];
                                                    float[] ax$3 = { -16777215.5f, -16777215.0f, -0.49999998f, -0.4999999701976776123046875f, 0.4999999701976776123046875f, 0.49999998f, 16777215.0f, 16777215.5f };
                                                    ax$3[i11] = ax$4[i11] * 2.5f;
                                                } catch (Throwable ax$6) {
                                                } finally {
                                                    i11 = ax$5;
                                                }
                                            }
                                        }
                                        System.setOut(ax$0);
                                        System.setErr(ax$1);
                                    }
                                    break;
                                case 99:
                                    Test.instanceCount = i12;
                                    break;
                                case 100:
                                    iArr[i14 - 1] += (int) l1;
                                    break;
                                case 101:
                                    s1 = (short) f2;
                                    break;
                                default:
                                    iArr = iArr;
                            }
                        }
                    }
                    break;
            }
        }
        long meth_res = i1 + by + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + s1 + i9 + i10 + Float.floatToIntBits(f2) + i11 + i12 + i13 + i14 + i15 + l1 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(long l) {
        int i16 = 0, i17 = -107, i18 = -146, i19 = -9, i20 = 115, i21 = -7182, i22 = 29729, i23 = -221, i24 = 47740, i25 = -13, i26 = 16629, i27 = -169, iArr1[][] = new int[N][N], iArr2[] = new int[N];
        long l2 = 1683704132L, lArr1[] = new long[N], lArr2[][] = new long[N][N];
        float f3 = -3.548F, fArr1[] = new float[N];
        double d1 = -1.72486, d2 = 81.14766;
        byte[] byArr = new byte[N];
        short[] sArr = new short[N];
        FuzzerUtils.init(iArr1, 56360);
        FuzzerUtils.init(fArr1, -2.362F);
        FuzzerUtils.init(byArr, (byte) -65);
        FuzzerUtils.init(iArr2, 13);
        FuzzerUtils.init(lArr1, 21929L);
        FuzzerUtils.init(lArr2, 10L);
        FuzzerUtils.init(sArr, (short) 12516);
        Test.iFld1 -= (iMeth(-24768, Test.byFld, Test.iFld1) + Test.iFld1);
        iArr1[(Test.iFld1 >>> 1) % N][(Test.iFld1 >>> 1) % N] = (int) l;
        for (i16 = 7; i16 < 217; i16++) {
            for (i18 = 1; i18 < 3; ++i18) {
                Test.iFld1 += (int) (-4954591396342920259L + (i18 * i18));
                switch(((i18 % 10) * 5) + 112) {
                    case 150:
                        l2 >>= Test.iFld1;
                        f3 *= i18;
                        i20 += i18;
                        i19 += 66;
                        d1 *= i17;
                        i17 <<= i17;
                        for (i21 = 1; i21 < 2; i21++) {
                            Test.iFld1 <<= Test.iFld1;
                            i22 += Test.byFld;
                        }
                        i17 += i18;
                        Test.byFld += (byte) i18;
                        if (false) {
                            i22 -= -12;
                            i20 >>= 18922;
                            Test.dArrFld[i16 - 1] += i22;
                            for (i23 = 2; i23 > 1; i23 -= 2) {
                                Test.byFld += (byte) (i23 * i23);
                                l *= Test.iFld1;
                                switch((i16 % 2) + 60) {
                                    case 60:
                                        switch(i16 + 77) {
                                            case 77:
                                                fArr1 = fArr1;
                                                i24 = 191;
                                                iArr1[i23][i23 - 1] = i22;
                                                switch(((i18 % 2) * 5) + 83) {
                                                    case 90:
                                                        l += (((i23 * i16) + l) - i19);
                                                        iArr1[i16 - 1][i16] = i22;
                                                        break;
                                                    case 93:
                                                        i17 <<= i20;
                                                        i22 = (int) d1;
                                                        i24 = i21;
                                                        Test.iFld1 -= i19;
                                                        break;
                                                    default:
                                                        if (i24 != 0) {
                                                            vMeth1_check_sum += l + i16 + i17 + i18 + i19 + l2 + Float.floatToIntBits(f3) + i20 + Double.doubleToLongBits(d1) + i21 + i22 + i23 + i24 + Double.doubleToLongBits(d2) + i25 + i26 + i27 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(sArr);
                                                            return;
                                                        }
                                                }
                                                break;
                                            case 78:
                                                i22 += i23;
                                                break;
                                            case 79:
                                                i22 -= (int) d1;
                                            case 80:
                                                Test.byFld &= (byte) l;
                                                break;
                                            case 81:
                                                Test.byFld >>>= (byte) Test.instanceCount;
                                                break;
                                            case 82:
                                                d2 = d1;
                                            case 83:
                                                i20 >>= 5;
                                                break;
                                            case 84:
                                                i24 += i23;
                                                break;
                                            case 85:
                                                if (Test.bFld)
                                                    continue;
                                                break;
                                            case 86:
                                                f3 += i22;
                                                break;
                                            case 87:
                                                i20 = i22;
                                                break;
                                            case 88:
                                                i17 *= i21;
                                                break;
                                            case 89:
                                                Test.iFld1 = Test.iFld1;
                                                break;
                                            case 90:
                                                byArr[i16] = (byte) d1;
                                                break;
                                            case 91:
                                                Test.sFld -= (short) i19;
                                                break;
                                            case 92:
                                                Test.iFld1 *= -2;
                                                break;
                                            case 93:
                                                l = i22;
                                            case 94:
                                                iArr2 = iArr1[i16];
                                                break;
                                            case 95:
                                            case 96:
                                                f3 -= i20;
                                                break;
                                            case 97:
                                            case 98:
                                                l2 += i23;
                                                break;
                                            case 99:
                                                i25 += i25;
                                                break;
                                            case 100:
                                                i25 += (((i23 * i21) + i24) - i19);
                                                break;
                                            case 101:
                                                Test.sFld += (short) (5258929458858547457L + (i23 * i23));
                                            case 102:
                                            case 103:
                                                Test.instanceCount = -162;
                                            case 104:
                                                i25 -= i22;
                                            case 105:
                                                Test.iFld1 -= (int) l2;
                                                break;
                                            case 106:
                                                Test.bFld = Test.bFld;
                                                break;
                                            case 107:
                                                i17 += (int) l2;
                                                break;
                                            case 108:
                                                lArr1[i18 - 1] += Test.byFld;
                                            case 109:
                                                if (Test.bFld)
                                                    continue;
                                                break;
                                            case 110:
                                                iArr1 = FuzzerUtils.int2array(N, (int) 104);
                                                break;
                                            case 111:
                                                f3 = 83L;
                                                break;
                                            case 112:
                                            case 113:
                                                l *= i16;
                                            case 114:
                                                iArr1[i18 + 1][i16] = i26;
                                                break;
                                            case 115:
                                                i20 += i23;
                                            case 116:
                                                Test.instanceCount <<= i21;
                                                break;
                                            case 117:
                                                i26 -= i24;
                                                break;
                                            case 118:
                                                i22 = (int) l2;
                                                break;
                                            case 119:
                                                lArr1[i23 - 1] = i18;
                                                break;
                                            case 120:
                                                l = i16;
                                            case 121:
                                                iArr1[i23 + 1][i18] -= i26;
                                                break;
                                            case 122:
                                                f3 = i27;
                                                break;
                                            case 123:
                                                iArr1[i18 + 1][i23] = Test.sFld;
                                                break;
                                            case 124:
                                                l >>>= l;
                                                break;
                                            case 125:
                                                i22 += i20;
                                                break;
                                            case 126:
                                                i25 += (5 + (i23 * i23));
                                            case 127:
                                                byArr[i16 - 1] -= (byte) l2;
                                            case 128:
                                                Test.iFld1 <<= Test.sFld;
                                                break;
                                            case 129:
                                                i22 += (int) l;
                                                break;
                                            case 130:
                                                iArr2[i18 + 1] = i24;
                                                break;
                                            case 131:
                                                if (Test.bFld)
                                                    continue;
                                                break;
                                            case 132:
                                                i22 += (int) l2;
                                                break;
                                            case 133:
                                                if (Test.bFld)
                                                    continue;
                                            case 134:
                                                d2 += l;
                                            case 135:
                                                Test.instanceCount = 38997;
                                            case 136:
                                                iArr2[i16] = Test.iFld2;
                                            case 137:
                                                Test.instanceCount -= l2;
                                            case 138:
                                                d2 += d2;
                                                break;
                                            case 139:
                                                f3 = Test.iFld2;
                                                break;
                                            case 140:
                                                f3 = l;
                                                break;
                                            case 141:
                                                if (Test.bFld)
                                                    continue;
                                                break;
                                            case 142:
                                                if (Test.bFld)
                                                    continue;
                                                break;
                                            case 143:
                                                fArr1[i16] = Test.instanceCount;
                                                break;
                                            case 144:
                                                lArr2 = lArr2;
                                                break;
                                            case 145:
                                                f3 *= -146;
                                                break;
                                            case 146:
                                                Test.iFld1 = (int) d1;
                                                break;
                                        }
                                    case 61:
                                        i27 += i20;
                                        break;
                                    default:
                                        sArr = sArr;
                                }
                            }
                        } else if (Test.bFld) {
                            i24 = -24829;
                        } else if (Test.bFld) {
                            iArr1[i18 + 1][i16] = 4;
                        } else {
                            iArr1[i16 + 1][i16] -= (int) d2;
                            vMeth1_check_sum += l + i16 + i17 + i18 + i19 + l2 + Float.floatToIntBits(f3) + i20 + Double.doubleToLongBits(d1) + i21 + i22 + i23 + i24 + Double.doubleToLongBits(d2) + i25 + i26 + i27 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(sArr);
                            return;
                        }
                        {
                            java.io.PrintStream ax$19 = System.out;
                            java.io.PrintStream ax$20 = System.err;
                            java.io.PrintStream ax$21 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$21);
                            System.setErr(ax$21);
                            try {
                                for (int ax$17 = -1276; ax$17 < 8227; ax$17 += 1) {
                                    try {
                                        int[] ax$9 = new int[20];
                                        short[] ax$13 = new short[] { 20, 10, 0, -10, -20 };
                                        long[] ax$10 = new long[10];
                                        int ax$14 = 0x00018000;
                                        byte[] ax$15 = new byte[16];
                                        for (int ax$11 = 0, ax$12 = -103; ax$11 < ax$14; ax$11++, ax$12++) {
                                            ax$15[ax$11] = (byte) ax$12;
                                            ax$13[ax$11] = (short) ax$12;
                                            ax$9[ax$11] = ax$12;
                                            ax$10[ax$11] = ax$12;
                                        }
                                    } catch (Throwable ax$16) {
                                    } finally {
                                    }
                                }
                            } catch (Throwable ax$18) {
                            }
                            System.setOut(ax$19);
                            System.setErr(ax$20);
                        }
                        break;
                    case 142:
                        Test.instanceCount -= l;
                        break;
                    case 152:
                        Test.iFld2 -= Test.iFld2;
                        break;
                    case 138:
                        l2 = i23;
                        break;
                    case 136:
                        i20 = i24;
                        break;
                    case 156:
                        i22 = -6933;
                        break;
                    case 162:
                        l2 %= (i19 | 1);
                        break;
                    case 148:
                        Test.bFld = true;
                        break;
                    case 133:
                        i27 = i21;
                        break;
                    case 118:
                        l *= Test.iFld1;
                        break;
                    default:
                        i22 |= i24;
                }
            }
        }
        vMeth1_check_sum += l + i16 + i17 + i18 + i19 + l2 + Float.floatToIntBits(f3) + i20 + Double.doubleToLongBits(d1) + i21 + i22 + i23 + i24 + Double.doubleToLongBits(d2) + i25 + i26 + i27 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i, float f1, boolean b) {
        int i28 = -88, i29 = -184, i30 = 6, i31 = 12, i32 = -10, i33 = -21222, i34 = 13101, i35 = 0, i36 = -64328, iArr3[][] = new int[N][N];
        short[] sArr1 = new short[N];
        byte[] byArr1 = new byte[N];
        long[] lArr3 = new long[N];
        FuzzerUtils.init(iArr3, -13);
        FuzzerUtils.init(sArr1, (short) 4654);
        FuzzerUtils.init(byArr1, (byte) -38);
        FuzzerUtils.init(lArr3, 9L);
        vMeth1(Test.instanceCount);
        for (i28 = 7; i28 < 215; ++i28) {
            double d3 = -126.85361;
            d3 += Test.iFld1;
            for (i30 = 1; i30 < 3; ++i30) {
                Test.instanceCount += (((i30 * Test.iFld2) + i28) - Test.instanceCount);
                iArr3[i30 + 1][i30] = i29;
                Test.iFld1 |= i31;
                i *= i30;
            }
            for (i32 = 1; i32 < 3; i32++) {
                i = Test.iFld2;
                i34 = 1;
                while (++i34 < 2) {
                    Test.instanceCount -= Test.instanceCount;
                    f1 = 209;
                    Test.iFld1 += i34;
                    Test.instanceCount += (i34 + i29);
                    Test.instanceCount -= i31;
                    d3 %= 74;
                    iArr3[i34][i34 + 1] *= Test.iFld1;
                    i += i32;
                    i29 += (i34 * i34);
                    Test.instanceCount += i34;
                    if (i33 != 0) {
                        vMeth_check_sum += i + Float.floatToIntBits(f1) + (b ? 1 : 0) + i28 + i29 + i30 + i31 + i32 + i33 + i34 + i35 + i36 + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(sArr1) + FuzzerUtils.checkSum(byArr1) + FuzzerUtils.checkSum(lArr3);
                        return;
                    }
                    i29 = i;
                    Test.byFld = (byte) i;
                    sArr1[i28 + 1] = (short) i29;
                }
                switch((i28 % 7) + 61) {
                    case 61:
                        i *= (int) f1;
                        i35 = 1;
                        do {
                            i33 += i35;
                            iArr3 = iArr3;
                            byArr1[i28] += (byte) Test.iFld2;
                            Test.sFld += (short) (((i35 * i32) + i30) - Test.instanceCount);
                            Test.iFld2 >>= Test.byFld;
                            i36 += (i35 * i35);
                        } while (++i35 < 2);
                        {
                            java.io.PrintStream ax$27 = System.out;
                            java.io.PrintStream ax$28 = System.err;
                            java.io.PrintStream ax$29 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$29);
                            System.setErr(ax$29);
                            try {
                                for (int ax$25 = -4548; ax$25 < 1881; ax$25 += 1) {
                                    int ax$23 = i29;
                                    try {
                                        boolean[] ax$22 = new boolean[576];
                                        ax$22[i29] = !ax$22[20];
                                    } catch (Throwable ax$24) {
                                    } finally {
                                        i29 = ax$23;
                                    }
                                }
                            } catch (Throwable ax$26) {
                            }
                            System.setOut(ax$27);
                            System.setErr(ax$28);
                        }
                        f1 = Test.iFld1;
                        iArr3[i32 + 1][i28 + 1] -= -197;
                        Test.instanceCount = i30;
                        break;
                    case 62:
                        Test.bArrFld[i32 + 1] = Test.bFld;
                        break;
                    case 63:
                        b = b;
                        break;
                    case 64:
                        Test.instanceCount <<= i;
                        break;
                    case 65:
                        iArr3[(i31 >>> 1) % N] = iArr3[(Test.iFld2 >>> 1) % N];
                        break;
                    case 66:
                        i29 += Test.iFld1;
                        break;
                    case 67:
                        i36 /= (int) ((long) (f1) | 1);
                        break;
                    default:
                        lArr3[i32 + 1] >>>= i28;
                }
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f1) + (b ? 1 : 0) + i28 + i29 + i30 + i31 + i32 + i33 + i34 + i35 + i36 + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(sArr1) + FuzzerUtils.checkSum(byArr1) + FuzzerUtils.checkSum(lArr3);
    }

    public void mainTest(String[] strArr1) {
        float f = 67.799F, f4 = 0.112F, fArr[] = new float[N];
        short s = 4176;
        int i37 = -61375, i38 = 37519, i39 = -51838, i40 = -162, i41 = -13, iArr4[] = new int[N], iArr5[][] = new int[N][N];
        byte by1 = -83;
        double d4 = 0.50842;
        long l3 = 51170L, lArr4[] = new long[N];
        boolean b1 = false;
        FuzzerUtils.init(fArr, 126.129F);
        FuzzerUtils.init(iArr4, 14549);
        FuzzerUtils.init(lArr4, 2028917294021356656L);
        FuzzerUtils.init(iArr5, 150);
        f = 3;
        switch((((iFld + -74) >>> 1) % 1) + 43) {
            case 43:
                iFld += (int) (Integer.reverseBytes(-50 + (s + 0)) + fArr[(iFld >>> 1) % N]);
                vMeth(Test.iFld1, f, bFld1);
                i37 = 1;
                do {
                    Test.iFld1 += Test.iFld1;
                    iFld += i37;
                    iArr4 = iArr4;
                    fArr[i37] -= 14;
                    i38 = 1;
                    do {
                        switch(((i37 >>> 1) % 7) + 74) {
                            case 74:
                                Test.iFld1 -= by1;
                                Test.instanceCount = iFld;
                                for (d4 = 1; d4 < 1; ++d4) {
                                    lArr4[i38 - 1] = i37;
                                    iArr5 = FuzzerUtils.int2array(N, (int) -26);
                                }
                                fArr = fArr;
                                for (i40 = i37; i40 < 1; i40++) {
                                    i39 *= i40;
                                    iArr5[i37] = iArr5[i37 - 1];
                                    l3 = -210L;
                                    l3 = Test.instanceCount;
                                    iFld *= Test.iFld1;
                                    lArr4[i40] += 0;
                                }
                                dFld = i41;
                                f += (((i38 * i40) + i40) - i41);
                                Test.instanceCount += (i38 + Test.iFld1);
                                iFld -= i40;
                                i39 <<= s;
                                f4 = 1;
                                do {
                                    int i42 = 12;
                                    i39 -= Test.iFld2;
                                    i39 ^= (int) l3;
                                    i41 = Test.iFld2;
                                    iFld = i40;
                                    Test.dArrFld[(int) (f4 + 1)] = i39;
                                    lArr4[(int) (f4)] *= (long) f;
                                    lArr4[i37] = -5;
                                    Test.instanceCount %= (long) -115.128201;
                                    switch((i37 % 1) + 70) {
                                        case 70:
                                            Test.instanceCount = l3;
                                            if (bFld1)
                                                continue;
                                            lArr4 = lArr4;
                                            iArr4[(int) (f4 - 1)] >>= i38;
                                            Test.iFld2 *= i37;
                                            if (bFld1)
                                                break;
                                            if (Test.bFld) {
                                                i41 += Test.byFld;
                                                Test.iFld2 += (int) -62.88F;
                                                f *= (float) dFld;
                                                i41 += (int) ((long) f4 ^ by1);
                                                Test.bArrFld[i38 - 1] = bFld1;
                                                l3 ^= Test.instanceCount;
                                                iFld -= (int) f4;
                                                i41 += (int) (((f4 * f) + l3) - i41);
                                                Test.dArrFld[i37] -= i37;
                                            } else {
                                                Test.instanceCount *= (long) f4;
                                                lArr4[i38 + 1] = iFld;
                                                i42 += (int) (((f4 * Test.iFld2) + iFld) - Test.sFld);
                                            }
                                            iArr4[(int) (f4)] += (int) -11L;
                                            f *= i37;
                                            lArr4[(int) (f4 - 1)] = Test.iFld1;
                                            if (false)
                                                break;
                                            i42 = iFld;
                                            iArr4[i38] -= (int) Test.instanceCount;
                                            switch((i37 % 7) + 11) {
                                                case 11:
                                                    dFld *= i42;
                                                    break;
                                                case 12:
                                                case 13:
                                                    i41 += (29003 + (f4 * f4));
                                                    f = i37;
                                                    if (Test.bFld)
                                                        break;
                                                    switch((i37 % 1) + 81) {
                                                        case 81:
                                                            i41 <<= i39;
                                                            Test.iFld1 += i40;
                                                            i42 -= iFld;
                                                            Test.instanceCount += (long) f4;
                                                            break;
                                                        default:
                                                            l3 = i39;
                                                    }
                                                case 14:
                                                case 15:
                                                case 16:
                                                    if (b1)
                                                        break;
                                                    break;
                                                case 17:
                                                    iFld *= (int) -4282690905606310420L;
                                                default:
                                                    i41 = (int) f4;
                                            }
                                            break;
                                        default:
                                            i41 = (int) Test.instanceCount;
                                    }
                                } while (++f4 < 1);
                                break;
                            case 75:
                                iArr4[i38 - 1] >>= i40;
                            case 76:
                            case 77:
                                try {
                                    Test.iFld2 = (i39 % 8867);
                                    iArr5[i38 - 1][i38 - 1] = (-194 / Test.iFld1);
                                    Test.iFld2 = (iArr5[i37][i38 - 1] / Test.iFld2);
                                } catch (ArithmeticException a_e) {
                                }
                            case 78:
                                iArr5[i37][i37] += i37;
                                break;
                            case 79:
                                if (Test.bFld)
                                    continue;
                                break;
                            case 80:
                                Test.bArrFld[i37] = b1;
                        }
                    } while (++i38 < 24);
                } while (++i37 < 209);
                break;
            default:
                Test.instanceCount <<= -15765;
        }
        FuzzerUtils.out.println("f s i37 = " + Float.floatToIntBits(f) + "," + s + "," + i37);
        FuzzerUtils.out.println("i38 by1 d4 = " + i38 + "," + by1 + "," + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("i39 i40 i41 = " + i39 + "," + i40 + "," + i41);
        FuzzerUtils.out.println("l3 f4 b1 = " + l3 + "," + Float.floatToIntBits(f4) + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("fArr iArr4 lArr4 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," + FuzzerUtils.checkSum(iArr4) + "," + FuzzerUtils.checkSum(lArr4));
        FuzzerUtils.out.println("iArr5 = " + FuzzerUtils.checkSum(iArr5));
        FuzzerUtils.out.println("Test.instanceCount iFld Test.iFld1 = " + Test.instanceCount + "," + iFld + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.bFld Test.byFld Test.sFld = " + (Test.bFld ? 1 : 0) + "," + Test.byFld + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld2 bFld1 dFld = " + Test.iFld2 + "," + (bFld1 ? 1 : 0) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.dArrFld Test.bArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$30) {
            try {
                Selector ax$33 = Selector.open();
                Pipe ax$31 = Pipe.open();
                ax$31.source().configureBlocking(false);
                ax$31.source().register(ax$33, SelectionKey.OP_READ);
                ax$33.wakeup();
                // ensure wakeup is consumed by selectNow
                Thread.sleep(2000);
                ax$33.selectNow();
                long ax$32 = System.currentTimeMillis();
                int ax$35 = ax$33.select(2000);
                long ax$34 = System.currentTimeMillis();
                ax$31.source().close();
                ax$31.sink().close();
                ax$33.close();
                if (ax$34 - ax$32 < 1000)
                    ;
            } catch (Throwable ax$36) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$30 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
