// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.net.DatagramPacket;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -8L;

    public static short sFld = 27196;

    public static int iFld = -12;

    public static double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.123340);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2) {
        int i3 = 181, i4 = 144, i5 = -48017, i6 = 7, i7 = 207, i8 = 53480, iArr1[] = new int[N];
        boolean b1 = false;
        float f1 = 1.983F, fArr[] = new float[N];
        byte by = 60;
        long[] lArr = new long[N];
        FuzzerUtils.init(iArr1, 61853);
        FuzzerUtils.init(lArr, 174L);
        FuzzerUtils.init(fArr, 9.55F);
        for (i3 = 6; i3 < 140; i3++) {
            if (b1)
                continue;
            f1 = 96;
            i2 += (i3 * i2);
            for (i5 = 1; i5 < 4; i5++) {
                i2 += (i5 ^ (long) f1);
                switch(((i5 % 9) * 5) + 31) {
                    case 50:
                        iArr1[i3] += (int) -6825531558823319589L;
                        i6 = by;
                        i2 += (i5 + Test.instanceCount);
                        i2 += (i5 - i2);
                        i2 = (int) f1;
                        break;
                    case 34:
                        i2 = (int) f1;
                        {
                            java.io.PrintStream ax$0 = System.out;
                            java.io.PrintStream ax$1 = System.err;
                            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                            {
                                boolean ax$4 = false;
                                for (int ax$3 = -1407; ax$3 < 4691; ax$3 += 9) {
                                    if (!ax$4) {
                                        ax$4 = true;
                                        {
                                            System.setOut(ax$0);
                                            System.setErr(ax$1);
                                            for (i7 = 2; i7 > 1; --i7) {
                                                i8 &= i6;
                                                i2 -= (int) Test.instanceCount;
                                                i4 += (i7 * i7);
                                                Test.instanceCount = 6;
                                                f1 -= Test.instanceCount;
                                                i2 += i7;
                                                if (b1)
                                                    continue;
                                            }
                                            System.setOut(ax$2);
                                            System.setErr(ax$2);
                                        }
                                    }
                                }
                            }
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                        }
                        i6 = i4;
                        i8 += i8;
                        Test.instanceCount += (((i5 * Test.instanceCount) + i4) - i6);
                        iArr1[i3] = i5;
                        Test.instanceCount = 11217;
                        lArr[i5] = i3;
                    case 56:
                        fArr[i5 - 1] += i2;
                    case 51:
                        i8 = -239;
                        switch(((i5 % 3) * 5) + 86) {
                            case 89:
                                i6 *= (int) 1.308F;
                                f1 -= -61706;
                                i8 -= i3;
                                if (b1) {
                                    i6 = (int) Test.instanceCount;
                                    if (b1)
                                        break;
                                    i6 = i8;
                                } else if (true) {
                                    i2 *= 27569;
                                } else if (b1) {
                                    Test.instanceCount -= i2;
                                }
                            case 91:
                                f1 -= f1;
                                break;
                            case 99:
                                i4 = (int) Test.instanceCount;
                                break;
                            default:
                                iArr1[i3 - 1] = (int) Test.instanceCount;
                        }
                        break;
                    case 70:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 46:
                        i6 += i7;
                        break;
                    case 32:
                        i4 = (int) Test.instanceCount;
                        break;
                    case 75:
                        iArr1 = iArr1;
                        break;
                    case 55:
                        fArr[i3 + 1] += -23;
                        break;
                    default:
                        iArr1[i3 - 1] -= i3;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + i5 + i6 + by + i7 + i8 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(boolean b) {
        if (ax$5) {
            try {
                float[] ax$6 = { -16777215.5f, -16777215.0f, -0.49999998f, -0.4999999701976776123046875f, 0.4999999701976776123046875f, 0.49999998f, 16777215.0f, 16777215.5f };
                float[] ax$8 = new float[16];
                for (int ax$7 = 0; ax$7 < 100; ax$7++) {
                    ax$6[ax$7] = ax$8[ax$7] * 2.5f;
                }
            } catch (Throwable ax$9) {
            } finally {
            }
            return;
        }
        double d = 27.63923, d1 = -2.87724;
        int i1 = 146, i9 = 43746, i10 = 12, i11 = -64434, iArr[] = new int[N], iArr2[] = new int[N];
        float f = 0.107F;
        byte by1 = 27, byArr[] = new byte[N];
        short s = -31498, sArr[] = new short[N];
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(iArr, 110);
        FuzzerUtils.init(sArr, (short) 12320);
        FuzzerUtils.init(byArr, (byte) -80);
        FuzzerUtils.init(iArr2, 8);
        FuzzerUtils.init(bArr, false);
        for (d = 1; d < 233; ++d) {
            b = (((i1 + i1) * (f = -12L)) > ((i1 / (Test.instanceCount | 1)) - (d1++)));
            if (b) {
                iArr[(int) (d)] ^= iMeth(i1);
                iArr[(int) (d - 1)] -= 6;
                i1 >>>= i1;
                sArr[(int) (d)] = (short) i1;
            } else {
                i1 %= (int) (i1 | 1);
                i9 = 1;
                do {
                    by1 = (byte) i9;
                    Test.instanceCount |= i1;
                    switch((((i1 >>> 1) % 2) * 5) + 46) {
                        case 48:
                            f -= i9;
                            switch(((-248 >>> 1) % 1) + 56) {
                                case 56:
                                    if (i1 != 0) {
                                        vMeth1_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d) + i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i9 + by1 + i10 + i11 + s + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
                                        return;
                                    }
                                    i1 -= i9;
                                    for (i10 = i9; i10 < 1; ++i10) {
                                        switch(((i10 % 4) * 5) + 77) {
                                            case 95:
                                                i11 -= (int) Test.instanceCount;
                                                iArr[(int) (d + 1)] <<= i11;
                                                if (true)
                                                    continue;
                                                d1 *= -6;
                                                i1 |= i9;
                                                byArr[(int) (d + 1)] >>= (byte) i1;
                                                i11 = (int) f;
                                                iArr2 = iArr;
                                                bArr[(i9 >>> 1) % N] = b;
                                                iArr[i10 - 1] = (int) f;
                                                i11 = (int) Test.instanceCount;
                                                f *= 47;
                                                i1 += (((i10 * Test.instanceCount) + Test.instanceCount) - i1);
                                                switch(((i10 >>> 1) % 2) + 54) {
                                                    case 54:
                                                        if (i11 != 0) {
                                                            vMeth1_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d) + i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i9 + by1 + i10 + i11 + s + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
                                                            return;
                                                        }
                                                        if (b)
                                                            continue;
                                                        f += (((i10 * by1) + f) - i1);
                                                        iArr[i10 + 1] = (int) Test.instanceCount;
                                                        i11 += (((i10 * i1) + f) - s);
                                                        break;
                                                    case 55:
                                                        f += i9;
                                                    default:
                                                        b = false;
                                                }
                                                break;
                                            case 82:
                                                d1 = i11;
                                            case 92:
                                                f += i9;
                                            case 87:
                                                if (b)
                                                    continue;
                                                break;
                                            default:
                                                iArr2[i9 - 1] <<= i11;
                                        }
                                    }
                                    break;
                                default:
                                    if (b)
                                        break;
                            }
                            break;
                        case 51:
                            f += (((i9 * i9) + i11) - i1);
                            break;
                        default:
                            if (b)
                                continue;
                    }
                } while (++i9 < 3);
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d) + i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i9 + by1 + i10 + i11 + s + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(long l1) {
        boolean b2 = false;
        float f2 = 1.360F;
        int i13 = 9, i14 = -10, i15 = 4, i16 = -105, i17 = 5161, i18 = -11, i19 = -3, i20 = 12, i21 = 28897, iArr3[] = new int[N], iArr4[][] = new int[N][N], iArr5[] = new int[N];
        byte by2 = -59;
        short s1 = -16595, sArr1[][] = new short[N][N];
        double d3 = 90.111071;
        FuzzerUtils.init(iArr3, 30726);
        FuzzerUtils.init(iArr4, 12);
        FuzzerUtils.init(sArr1, (short) -30334);
        FuzzerUtils.init(iArr5, 15631);
        {
            java.io.PrintStream ax$12 = System.out;
            java.io.PrintStream ax$13 = System.err;
            java.io.PrintStream ax$14 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$14);
            System.setErr(ax$14);
            try {
                ax$5 = true;
                for (int ax$10 = 0; ax$10 < 6537; ax$10 += 1) vMeth1(false);
            } catch (java.lang.Throwable ax$11) {
            } finally {
                ax$5 = false;
            }
            System.setOut(ax$12);
            System.setErr(ax$13);
        }
        vMeth1(b2);
        for (int i12 : iArr3) {
            i12 += (int) f2;
        }
        i13 *= (int) Test.instanceCount;
        iArr3[(i13 >>> 1) % N] = (int) -93.117496;
        i13 *= i13;
        f2 = i13;
        i13 /= (int) (l1 | 1);
        i14 = 1;
        while (++i14 < 111) {
            iArr4[i14 - 1][i14] = i14;
            sArr1[i14 - 1][i14] <<= (short) i13;
            iArr4[i14][i14 - 1] &= i13;
            for (i15 = 1; i15 < 5; ++i15) {
                i16 *= -60499;
            }
            i13 %= (int) (i16 | 1);
            i16 += i13;
            try {
                i13 = (i16 % 67);
                iArr5[i14 - 1] = (197 % i15);
                iArr4[i14][i14 + 1] = (57260 % i14);
            } catch (ArithmeticException a_e) {
            }
            f2 *= 15819;
            iArr5 = iArr4[i14 - 1];
        }
        for (i17 = 201; i17 > 1; --i17) {
            l1 -= (long) -103.41079;
            for (i19 = 1; i19 < 3; i19++) {
                i21 = 1;
                do {
                    i20 *= 13;
                    i16 /= (int) ((long) (f2) | 1);
                    i20 = i14;
                    by2 += (byte) i14;
                    if (b2)
                        continue;
                    i20 = i20;
                    i20 *= i16;
                    i18 += (i21 * i21);
                    switch(((i14 >>> 1) % 7) + 122) {
                        case 122:
                            Test.instanceCount += (i21 * s1);
                            Test.instanceCount -= 9268;
                            iArr3[i19 + 1] = i13;
                            if (i14 != 0) {
                                vMeth_check_sum += l1 + (b2 ? 1 : 0) + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + by2 + s1 + Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(iArr4) + FuzzerUtils.checkSum(sArr1) + FuzzerUtils.checkSum(iArr5);
                                return;
                            }
                            iArr5[i19 - 1] *= -124;
                        case 123:
                            d3 -= i18;
                            break;
                        case 124:
                            i16 += i21;
                            break;
                        case 125:
                            iArr4[i17 + 1][i17] *= (int) Test.instanceCount;
                            break;
                        case 126:
                            iArr5[i17 - 1] = i14;
                            break;
                        case 127:
                            Test.instanceCount = 11;
                            break;
                        case 128:
                    }
                } while (++i21 < 2);
            }
        }
        vMeth_check_sum += l1 + (b2 ? 1 : 0) + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + by2 + s1 + Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(iArr4) + FuzzerUtils.checkSum(sArr1) + FuzzerUtils.checkSum(iArr5);
    }

    public void mainTest(String[] strArr1) {
        if (ax$15) {
            try {
                byte[] ax$16 = new byte[] { 0, -1, -2, -3, -4 };
                boolean ax$17 = false;
                try {
                    /* length greater than buffer length */
                    new DatagramPacket(ax$16, 256);
                } catch (IllegalArgumentException e) {
                    /* correct exception */
                    ax$17 = false;
                }
            } catch (Throwable ax$18) {
            } finally {
            }
            return;
        }
        long l = 7L, l2 = 137L, l3 = -4115405632L, l4 = 8L, lArr1[] = new long[N];
        int i = -167, i22 = -37165, i23 = -233, i24 = -199, i25 = 82, i26 = -5, i27 = 6, i28 = 61, i29 = 197, i30 = -11, i31 = 46076, iArr6[] = new int[N];
        double d4 = 1.40049;
        float f3 = 78.760F, f4 = 0.941F;
        byte by3 = -38;
        boolean b3 = true, bArr1[] = new boolean[N];
        FuzzerUtils.init(iArr6, 49078);
        FuzzerUtils.init(lArr1, 3188515241648536705L);
        FuzzerUtils.init(bArr1, true);
        for (l = 4; l < 91; ++l) {
            vMeth(Test.instanceCount);
            i = i;
            l2 = 1;
            while (++l2 < 58) {
                i += i;
                try {
                    i = (i / 329702112);
                    i = (i % 123);
                    i = (iArr6[(int) (l2)] / i);
                } catch (ArithmeticException a_e) {
                }
                i -= (int) l2;
                i += (int) l2;
                d4 = i;
                f3 -= i;
                i = i;
                for (i22 = 1; i22 < 1; ++i22) {
                    i23 <<= i;
                    i &= (int) l2;
                    Test.instanceCount *= i;
                    iArr6[(int) (l + 1)] *= 25483;
                    by3 <<= (byte) -10;
                    i23 -= i23;
                    switch((int) ((l % 3) + 110)) {
                        case 110:
                            Test.instanceCount = 19063;
                            Test.instanceCount *= Test.instanceCount;
                            i = i22;
                            f3 = i;
                            by3 = (byte) -31;
                            i23 += (34407 + (i22 * i22));
                            b3 = b3;
                            break;
                        case 111:
                            Test.instanceCount -= 0;
                            i23 = i;
                            i += i22;
                            break;
                        case 112:
                            i += (((i22 * i23) + i) - i22);
                            i <<= i22;
                            i23 += i22;
                            i23 = i22;
                            d4 += -10L;
                            i += (((i22 * i22) + i23) - i);
                            Test.instanceCount -= i22;
                            i *= i22;
                            Test.instanceCount += Test.instanceCount;
                            i = i22;
                            i23 += (((i22 * i) + Test.sFld) - i24);
                            Test.instanceCount = 64332;
                            break;
                    }
                    lArr1[(int) (l + 1)] >>>= i22;
                    i23 += i22;
                    i24 += (((i22 * i24) + l) - l3);
                    f3 = i22;
                }
                i23 += (int) (l2 * l2);
                i23 = i24;
                l3 = l2;
            }
            for (i25 = 2; i25 < 58; i25++) {
                iArr6[(int) (l)] >>>= i24;
                i += i25;
                bArr1[(int) (l)] = b3;
                f3 = f3;
                l3 <<= i25;
                for (i27 = 1; i27 < 2; i27++) {
                    i = (int) l;
                    Test.instanceCount += (i27 ^ i27);
                    i24 += (i27 ^ i29);
                    Test.instanceCount >>= i27;
                    i28 += i24;
                    i23 >>= -17071;
                    i23 = i23;
                    iArr6[i27 + 1] <<= (int) l;
                    iArr6[(int) (l)] -= -9;
                    f3 += -27;
                    d4 *= l2;
                }
                l3 += i26;
                i28 -= i24;
                switch(((Test.iFld >>> 1) % 2) + 87) {
                    case 87:
                    case 88:
                        for (l4 = 1; l4 < 2; l4++) {
                            l3 += i29;
                        }
                        for (f4 = 1; 2 > f4; f4 += 2) {
                            bArr1[i25] = true;
                            if (b3)
                                break;
                            i28 >>= i28;
                        }
                        break;
                    default:
                        Test.sFld += (short) (i25 ^ i25);
                }
            }
        }
        FuzzerUtils.out.println("l i l2 = " + l + "," + i + "," + l2);
        FuzzerUtils.out.println("d4 f3 i22 = " + Double.doubleToLongBits(d4) + "," + Float.floatToIntBits(f3) + "," + i22);
        FuzzerUtils.out.println("i23 by3 b3 = " + i23 + "," + by3 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("i24 l3 i25 = " + i24 + "," + l3 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 l4 i30 = " + i29 + "," + l4 + "," + i30);
        FuzzerUtils.out.println("f4 i31 iArr6 = " + Float.floatToIntBits(f4) + "," + i31 + "," + FuzzerUtils.checkSum(iArr6));
        FuzzerUtils.out.println("lArr1 bArr1 = " + FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(bArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.iFld = " + Test.instanceCount + "," + Test.sFld + "," + Test.iFld);
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$5 = false;

    private static Boolean ax$15 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
