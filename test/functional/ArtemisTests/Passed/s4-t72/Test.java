// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.text.SimpleDateFormat;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -46509L;

    public static float fFld = 56.815F;

    public short sFld = 7006;

    public static short sFld1 = -21219;

    public double[] dArrFld = new double[N];

    public long[][] lArrFld = new long[N][N];

    public static int[] iArrFld = new int[N];

    public static long[] lArrFld1 = new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 195);
        FuzzerUtils.init(Test.lArrFld1, 128L);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f) {
        if (ax$10) {
            try {
                double[] ax$11 = { 0.0, 1.0, 2.0, 3.0 };
                for (int ax$12 = 0; ax$12 < 128; ax$12++) ax$11[ax$12] = Math.abs(ax$11[ax$12]);
            } catch (Throwable ax$13) {
            } finally {
            }
            return;
        }
        int i7 = -200, i8 = -188, i9 = -13, i10 = 7, i11 = 8, i12 = -3, i13 = -98, i14 = 51235, i15 = 5, i16 = 33032;
        double d4 = 81.1358;
        boolean b2 = true;
        short s = -17278;
        float[] fArr = new float[N];
        FuzzerUtils.init(fArr, 50.198F);
        i7 = 185;
        do {
            d4 = i7;
            i8 %= -5;
            switch((i7 % 2) + 40) {
                case 40:
                    for (i9 = 1; i9 < 3; ++i9) {
                        long l = -244L;
                        if (false)
                            break;
                        i10 += (((i9 * Test.instanceCount) + l) - i7);
                        Test.iArrFld[i7 - 1] -= (int) Test.instanceCount;
                        Test.iArrFld[i9] = i8;
                        f -= 13;
                        i10 -= (int) -119.48313;
                        if (i8 != 0) {
                            vMeth2_check_sum += Float.floatToIntBits(f) + i7 + Double.doubleToLongBits(d4) + i8 + i9 + i10 + i11 + i12 + i13 + i14 + (b2 ? 1 : 0) + i15 + i16 + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        }
                        i10 |= i8;
                        for (i11 = 1; i11 < 2; ++i11) {
                            boolean b1 = true;
                            if (i12 != 0) {
                                vMeth2_check_sum += Float.floatToIntBits(f) + i7 + Double.doubleToLongBits(d4) + i8 + i9 + i10 + i11 + i12 + i13 + i14 + (b2 ? 1 : 0) + i15 + i16 + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                return;
                            }
                            i8 = i8;
                            i10 >>= i13;
                            i12 = i10;
                            i10 = -184;
                            i12 += (i11 + i9);
                            if (b1)
                                continue;
                            Test.iArrFld[i7] -= i13;
                            Test.lArrFld1[i9 + 1] = (long) f;
                            l -= i8;
                            l = i13;
                            l += (long) d4;
                            i13 += i11;
                        }
                    }
                    i14 = 1;
                    while (++i14 < 3) {
                        f += -9.747F;
                        f -= 28;
                        if (b2)
                            break;
                        for (i15 = 1; i15 < 1; i15++) {
                            if (b2)
                                break;
                            Test.iArrFld[i14 + 1] *= (int) Test.instanceCount;
                        }
                        i13 += i15;
                        Test.lArrFld1 = Test.lArrFld1;
                    }
                    i10 = i14;
                case 41:
                    i10 += (((i7 * i10) + i14) - s);
                    break;
                default:
                    fArr[i7 + 1] = i11;
            }
        } while (--i7 > 0);
        vMeth2_check_sum += Float.floatToIntBits(f) + i7 + Double.doubleToLongBits(d4) + i8 + i9 + i10 + i11 + i12 + i13 + i14 + (b2 ? 1 : 0) + i15 + i16 + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(double d2, double d3, int i3) {
        int i4 = 129, i5 = -8, i6 = -12650, i18 = 51830, i19 = -242, i20 = 13, i21 = 12, i22 = -170, i23 = -19944, iArr1[] = new int[N];
        byte by2 = 46;
        boolean b3 = true;
        float f1 = 2.857F, fArr1[][] = new float[N][N];
        long l1 = 53L;
        short[] sArr = new short[N];
        FuzzerUtils.init(sArr, (short) 13861);
        FuzzerUtils.init(iArr1, -11546);
        FuzzerUtils.init(fArr1, -100.237F);
        for (i4 = 3; i4 < 85; i4++) {
            if (b3) {
                i6 = 1;
                while (++i6 < 7) {
                    if (i5 != 0) {
                        vMeth1_check_sum += Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i3 + i4 + i5 + i6 + i18 + i19 + i20 + by2 + i21 + i22 + (b3 ? 1 : 0) + Float.floatToIntBits(f1) + l1 + i23 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                        return;
                    }
                    {
                        java.io.PrintStream ax$16 = System.out;
                        java.io.PrintStream ax$17 = System.err;
                        java.io.PrintStream ax$18 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$18);
                        System.setErr(ax$18);
                        try {
                            ax$10 = true;
                            for (int ax$14 = 0; ax$14 < 6235; ax$14 += 1) vMeth2((float) 0.8488183421537041);
                        } catch (java.lang.Throwable ax$15) {
                        } finally {
                            ax$10 = false;
                        }
                        System.setOut(ax$16);
                        System.setErr(ax$17);
                    }
                    vMeth2(Test.fFld);
                    switch(((i6 % 7) * 5) + 100) {
                        case 126:
                            sArr[i4 - 1] = (short) Test.instanceCount;
                            iArr1[i6] = 3;
                            for (i18 = 1; i18 > i6; i18 -= 2) {
                                Test.fFld = Test.instanceCount;
                                fArr1[i18 - 1] = FuzzerUtils.float1array(N, (float) 88.868F);
                                try {
                                    i20 = (i19 % 1617743134);
                                    i5 = (i6 % -189);
                                    i19 = (53352 % i6);
                                } catch (ArithmeticException a_e) {
                                }
                                i20 /= (int) 2.690F;
                                i5 += i18;
                                i5 += i18;
                                i3 += -30371;
                                by2 = (byte) i20;
                                Test.instanceCount = i19;
                            }
                            for (i21 = i6; 1 > i21; ++i21) {
                                Test.instanceCount += (i21 + i3);
                                b3 = b3;
                            }
                            f1 = 1;
                            do {
                                b3 = b3;
                                i5 = 8924;
                                Test.instanceCount &= i18;
                                Test.instanceCount = i6;
                                Test.instanceCount = Test.instanceCount;
                                Test.iArrFld[i6 - 1] = Test.sFld1;
                                Test.instanceCount = (long) Test.fFld;
                                i5 |= i6;
                                Test.instanceCount += (long) (f1 * Test.fFld);
                                Test.instanceCount += (long) (f1 * f1);
                                Test.lArrFld1 = Test.lArrFld1;
                                if (i22 != 0) {
                                    vMeth1_check_sum += Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i3 + i4 + i5 + i6 + i18 + i19 + i20 + by2 + i21 + i22 + (b3 ? 1 : 0) + Float.floatToIntBits(f1) + l1 + i23 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                                    return;
                                }
                                d2 = Test.instanceCount;
                                fArr1[(int) (f1 - 1)][i6] += i19;
                                l1 += (long) ((long) f1 | (long) f1);
                            } while (++f1 < 1);
                            break;
                        case 104:
                            Test.iArrFld[i6 - 1] += i6;
                            break;
                        case 109:
                            i3 ^= i3;
                            break;
                        case 128:
                        case 111:
                            iArr1[i4] *= i3;
                            break;
                        case 125:
                            i19 -= (int) 46.90828;
                        case 117:
                            i23 = i20;
                            break;
                    }
                }
            } else if (true) {
                l1 += (((i4 * i21) + l1) - Test.instanceCount);
            } else {
                fArr1[i4][i4 + 1] += -1;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i3 + i4 + i5 + i6 + i18 + i19 + i20 + by2 + i21 + i22 + (b3 ? 1 : 0) + Float.floatToIntBits(f1) + l1 + i23 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth(double d1, int i2) {
        byte by1 = -108;
        boolean b4 = true;
        int i24 = 38381, i25 = 89, i26 = 0, i27 = -53830;
        i2 *= by1;
        vMeth1(1.91499, d1, -47);
        i2 |= Test.sFld1;
        b4 = false;
        i2 -= (int) Test.instanceCount;
        Test.iArrFld[(-82 >>> 1) % N] += by1;
        for (i24 = 7; i24 < 174; i24++) {
            Test.instanceCount += (i24 * i24);
            i25 <<= Test.sFld1;
            i26 = 1;
            while (++i26 < 3) {
                i27 = 1;
                do {
                    i25 = (int) Test.instanceCount;
                    i25 = -63936;
                    if (b4) {
                        i25 = (int) Test.fFld;
                        Test.instanceCount = i27;
                        d1 *= -130;
                    } else {
                        i2 *= i25;
                        by1 += (byte) (((i27 * i26) + Test.instanceCount) - i26);
                        Test.iArrFld = Test.iArrFld;
                        switch(((i25 >>> 1) % 9) + 103) {
                            case 103:
                                i25 += (i27 * i27);
                                Test.instanceCount += by1;
                                i2 = (int) Test.instanceCount;
                                Test.instanceCount = i24;
                            case 104:
                                Test.iArrFld[i26] *= (int) Test.fFld;
                                d1 -= Test.instanceCount;
                                Test.instanceCount -= (long) 42.64656;
                                Test.iArrFld[i26] = (int) Test.instanceCount;
                                Test.iArrFld[i24 + 1] *= (int) 24895L;
                                Test.iArrFld[i27 - 1] -= i24;
                                i25 = (int) 1.124F;
                                i25 >>>= 59542;
                                break;
                            case 105:
                                switch(((i26 >>> 1) % 8) + 97) {
                                    case 97:
                                        Test.sFld1 |= (short) Test.instanceCount;
                                        Test.instanceCount -= (long) 1.141F;
                                        i25 ^= i2;
                                        break;
                                    case 98:
                                        by1 += (byte) -1052803334L;
                                        break;
                                    case 99:
                                        if (b4)
                                            break;
                                        break;
                                    case 100:
                                        i2 = 11119;
                                        break;
                                    case 101:
                                        i2 *= (int) Test.instanceCount;
                                        break;
                                    case 102:
                                        Test.instanceCount = Test.instanceCount;
                                        break;
                                    case 103:
                                        Test.instanceCount += i27;
                                        break;
                                    case 104:
                                        i25 = 249;
                                        break;
                                }
                                break;
                            case 106:
                                i25 &= 6;
                                break;
                            case 107:
                                Test.instanceCount += (((i27 * by1) + i26) - i27);
                            case 108:
                                if (b4)
                                    continue;
                                break;
                            case 109:
                                Test.sFld1 += (short) (37.410F + (i27 * i27));
                                break;
                            case 110:
                                i25 += i27;
                                break;
                            case 111:
                                i2 += i2;
                        }
                    }
                } while (--i27 > 0);
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i2 + by1 + (b4 ? 1 : 0) + i24 + i25 + i26 + i27;
    }

    public void mainTest(String[] strArr1) {
        int i = -48363, i1 = 18313, i28 = 10, i29 = -12747, i30 = 8888, i31 = -13, i32 = -13, i33 = 13, i34 = 4, i35 = -94, i36 = 53, iArr[] = new int[N], iArr2[][] = new int[N][N];
        byte by = -45, byArr[][] = new byte[N][N];
        double d = -1.104303;
        boolean b = true, bArr[] = new boolean[N];
        long l2 = 13L;
        float f2 = 0.649F, fArr2[] = new float[N];
        FuzzerUtils.init(iArr, -39658);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr2, 0.979F);
        FuzzerUtils.init(iArr2, 2);
        FuzzerUtils.init(byArr, (byte) -109);
        for (i = 246; i > 2; --i) {
            dArrFld[i] -= Test.fFld;
            by <<= (byte) i1;
            iArr[i] = (int) (Math.min(i, sFld * 13961) * (lArrFld[i][i] - (++i1)));
            by = (byte) (d - (++i1));
            if (b = bArr[i - 1])
                break;
            i1 = iArr[i - 1];
            vMeth(d, i1);
            for (l2 = 1; l2 < 21; l2++) {
                i28 |= i;
                b = b;
                for (i29 = 1; i29 < 2; i29++) {
                    fArr2[i + 1] *= Test.fFld;
                    Test.fFld *= i29;
                    i1 *= -88;
                    by -= (byte) l2;
                    Test.instanceCount <<= i29;
                    i30 = -214;
                    if (b)
                        break;
                    i1 = i28;
                    sFld *= (short) i;
                    Test.instanceCount += (i29 * i29);
                }
                i31 = 1;
                do {
                    Test.instanceCount += Test.instanceCount;
                    Test.fFld %= (i29 | 1);
                    i30 += i32;
                    i1 <<= i31;
                    iArr2 = iArr2;
                } while (++i31 < 2);
                {
                    java.io.PrintStream ax$7 = System.out;
                    java.io.PrintStream ax$8 = System.err;
                    java.io.PrintStream ax$9 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$9);
                    System.setErr(ax$9);
                    try {
                        for (int ax$5 = -2619; ax$5 < 6949; ax$5 += 1) {
                            try {
                                int ax$2 = 0x8000_0000;
                                java.lang.String[] ax$1 = new String[75];
                                boolean[] ax$3 = new boolean[] { true, true, false, true, false };
                                java.text.SimpleDateFormat ax$0 = new SimpleDateFormat("yyyy");
                                try {
                                    ax$0 = new SimpleDateFormat(ax$1[ax$2]);
                                    if (!ax$3[ax$2])
                                        System.out.print("   <-- error!");
                                } catch (Exception exception) {
                                }
                            } catch (Throwable ax$4) {
                            } finally {
                            }
                        }
                    } catch (Throwable ax$6) {
                    }
                    System.setOut(ax$7);
                    System.setErr(ax$8);
                }
                for (i33 = 2; i33 > 1; i33 -= 2) {
                    i1 = i31;
                    i32 = i34;
                    i34 -= i28;
                    f2 += i33;
                    Test.instanceCount *= i34;
                    by = (byte) 29510L;
                    byArr[i33 + 1][i33 - 1] >>>= (byte) 27714;
                    Test.instanceCount -= -33881L;
                    Test.instanceCount += (0L + (i33 * i33));
                }
                for (i35 = i; i35 < 2; ++i35) {
                    Test.fFld = 0;
                    i36 = 29574;
                    i28 += (59341 + (i35 * i35));
                    i1 -= i36;
                    switch((i35 % 4) + 111) {
                        case 111:
                            i32 += (int) -58938L;
                            i36 += (156 + (i35 * i35));
                            i32 = (int) l2;
                            if (b)
                                break;
                            bArr[i + 1] = b;
                            i1 -= by;
                            i1 = by;
                            Test.instanceCount += i30;
                            break;
                        case 112:
                            fArr2[i35] -= i35;
                            i28 = sFld;
                            i34 += (i35 ^ i);
                            Test.fFld *= Test.instanceCount;
                            Test.fFld = Test.sFld1;
                            i28 = i36;
                            f2 = i1;
                            switch(((i30 >>> 1) % 3) + 38) {
                                case 38:
                                    if (b)
                                        continue;
                                    Test.instanceCount += (-128 + (i35 * i35));
                                    break;
                                case 39:
                                    i32 -= (int) l2;
                                    by = (byte) i1;
                                    iArr = iArr;
                                    Test.lArrFld1[i35] += i29;
                                    switch((int) ((l2 % 5) + 50)) {
                                        case 50:
                                            i28 = i28;
                                            break;
                                        case 51:
                                            Test.instanceCount %= ((long) (d) | 1);
                                            i34 += (i35 * i35);
                                            i28 /= (int) (i32 | 1);
                                            d += i35;
                                            Test.instanceCount <<= l2;
                                            Test.instanceCount *= i30;
                                            Test.instanceCount -= i35;
                                        case 52:
                                        case 53:
                                        case 54:
                                            i34 += i35;
                                            break;
                                    }
                                    break;
                                case 40:
                                default:
                                    d = Test.instanceCount;
                            }
                            break;
                        case 113:
                            Test.instanceCount = l2;
                            break;
                        case 114:
                            Test.iArrFld[i35 - 1] = i35;
                        default:
                            Test.fFld += i35;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i i1 by = " + i + "," + i1 + "," + by);
        FuzzerUtils.out.println("d b l2 = " + Double.doubleToLongBits(d) + "," + (b ? 1 : 0) + "," + l2);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 f2 i35 = " + i34 + "," + Float.floatToIntBits(f2) + "," + i35);
        FuzzerUtils.out.println("i36 iArr bArr = " + i36 + "," + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("fArr2 iArr2 byArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + "," + FuzzerUtils.checkSum(iArr2) + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld sFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + sFld);
        FuzzerUtils.out.println("Test.sFld1 dArrFld lArrFld = " + Test.sFld1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld1));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$19) {
            long ax$24 = vMeth2_check_sum;
            try {
                java.lang.String ax$23 = "3.160782854106722E-9";
                java.lang.String ax$21 = "{null=NULL, a=A, b=B, c=C}";
                int ax$22 = 0x88776655;
                int ax$20 = 0xf000;
                ax$23 = ax$21.substring(0, ax$22) + ax$21.substring(ax$22 + 1, ax$20);
                vMeth2_check_sum -= 4 * (ax$20 - ax$22 - 1);
            } catch (Throwable ax$25) {
            } finally {
                vMeth2_check_sum = ax$24;
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$10 = false;

    private static Boolean ax$19 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
