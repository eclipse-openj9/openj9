// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -48L;

    public static volatile short sFld = 17148;

    public static float fFld = 109.442F;

    public static short sFld1 = -15981;

    public static int iFld = -250;

    public static int iFld1 = 7;

    public static volatile int[] iArrFld = new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(long l) {
        if (ax$10) {
            try {
                boolean ax$11 = false;
                ax$11 = true;
            } catch (Throwable ax$12) {
            } finally {
            }
            return 1290549267;
        }
        int i12 = -9, i13 = -11, i14 = -37578, i15 = -9, i16 = 157;
        long l1 = 10L, l2 = 111L, lArr1[] = new long[N];
        double d2 = 0.57652, dArr1[][] = new double[N][N];
        boolean b = true;
        FuzzerUtils.init(lArr1, -6200785690501686202L);
        FuzzerUtils.init(dArr1, -32.104462);
        i12 += (int) 1.481F;
        l -= l;
        for (i13 = 6; 166 > i13; i13++) {
            for (l1 = 1; l1 < 4; ++l1) {
                if (i13 != 0) {
                }
                switch(((i13 % 2) * 5) + 98) {
                    case 101:
                        i16 = 1;
                        do {
                            i14 += i13;
                            i14 -= i14;
                            i14 += i14;
                            Test.iArrFld[(int) (l1 + 1)] = 1973;
                            i14 = -11;
                            i14 -= i13;
                            l = Test.instanceCount;
                            switch(((i16 % 2) * 5) + 88) {
                                case 93:
                                    switch(((i12 >>> 1) % 9) + 77) {
                                        case 77:
                                            i14 = (int) Test.fFld;
                                            if (i12 != 0) {
                                            }
                                            i12 = 55;
                                            lArr1[i16 - 1] = -112;
                                            Test.iArrFld = Test.iArrFld;
                                            i15 = (int) l;
                                            i12 /= (int) -2.269F;
                                            if (i14 != 0) {
                                            }
                                            i15 *= (int) -63631L;
                                            Test.instanceCount += i16;
                                            switch((int) (((l1 % 1) * 5) + 26)) {
                                                case 27:
                                                    d2 *= i12;
                                                default:
                                                    i15 = (int) Test.instanceCount;
                                                    i12 = i16;
                                            }
                                            i15 += -7;
                                            Test.iArrFld[i16 + 1] -= (int) Test.instanceCount;
                                            if (b) {
                                                i12 = i12;
                                                Test.fFld += 37450;
                                                i14 = i15;
                                                i12 += (((i16 * i14) + l2) - i13);
                                            } else {
                                                i12 += i15;
                                            }
                                            break;
                                        case 78:
                                        case 79:
                                            i15 -= i13;
                                            break;
                                        case 80:
                                            Test.iArrFld[i16] >>>= i12;
                                            break;
                                        case 81:
                                            Test.instanceCount += i16;
                                            break;
                                        case 82:
                                            lArr1[i13] += i12;
                                            break;
                                        case 83:
                                            dArr1[i16][i13 - 1] += d2;
                                            break;
                                        case 84:
                                            i15 += i12;
                                            break;
                                        case 85:
                                            d2 *= -22;
                                            break;
                                    }
                                case 91:
                                    i12 += (int) Test.fFld;
                            }
                        } while (++i16 < 2);
                        break;
                    case 102:
                        l2 += (long) Test.fFld;
                        break;
                }
            }
        }
        long meth_res = l + i12 + i13 + i14 + l1 + i15 + i16 + Double.doubleToLongBits(d2) + l2 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(int i4, int i5, int i6) {
        if (ax$18) {
            int ax$21 = i5;
            int ax$22 = i4;
            try {
                char[] ax$20 = new char[] { (char) 0xF3F4 };
                char[] ax$19 = new char[100];
                i5 += Math.abs(((short) ax$19[i4]) - ((short) ax$20[i4]));
            } catch (Throwable ax$23) {
            } finally {
                i5 = ax$21;
                i4 = ax$22;
            }
            return;
        }
        int i7 = 82, i8 = -1, i9 = 134, i10 = 20, i11 = 4, i17 = 14, i18 = -8917;
        double d1 = -1.80856;
        boolean b1 = false;
        byte by2 = -114;
        long[] lArr = new long[N];
        float[] fArr = new float[N];
        FuzzerUtils.init(lArr, -3089607225L);
        FuzzerUtils.init(fArr, 65.827F);
        for (i7 = 5; i7 < 123; i7++) {
            i9 = 5;
            while (--i9 > 0) {
                for (i10 = 1; i10 < 1; i10++) {
                    byte by1 = -27;
                    i4 >>= (int) (((-35575 - (-136 + (by1 - d1))) - Test.instanceCount) - ((Test.fFld + 9) - (i5 - i10)));
                    d1 += (lArr[i7] - (i4--));
                    i11 ^= (int) (lArr[i9 + 1] - (lArr[i10 - 1]++));
                    i4 -= (int) (iMeth(Test.instanceCount) - Test.fFld);
                    Test.iArrFld[i9 - 1] >>= Test.sFld1;
                    b1 = false;
                    i8 = 2;
                    Test.iArrFld[i7] -= -216;
                    b1 = b1;
                    i5 = (int) Test.instanceCount;
                    i6 = i7;
                }
                for (i17 = 1; 1 > i17; i17++) {
                    d1 -= Test.sFld;
                    switch(((i7 % 7) * 5) + 19) {
                        case 43:
                            Test.instanceCount += (i17 * i17);
                            Test.instanceCount += i9;
                            i4 += i17;
                            Test.fFld += (i17 * i17);
                            i4 <<= i5;
                            d1 += -9922L;
                            break;
                        case 35:
                            Test.fFld -= i18;
                            if (false)
                                break;
                            Test.iArrFld[i7 - 1] = (int) Test.instanceCount;
                            Test.instanceCount &= i4;
                            Test.instanceCount *= i18;
                            switch((((i11 >>> 1) % 7) * 5) + 98) {
                                case 104:
                                    i18 += (int) Test.instanceCount;
                                    Test.iArrFld[i17] += -123;
                                    Test.iArrFld[i9 + 1] = i11;
                                    i6 <<= by2;
                                    i4 = i10;
                                    Test.iArrFld[i9] -= by2;
                                    i5 += (int) Test.instanceCount;
                                    break;
                                case 127:
                                    i8 >>>= 28918;
                                    break;
                                case 103:
                                    Test.fFld += (i17 * i17);
                                case 115:
                                    Test.fFld = i7;
                                    break;
                                case 100:
                                    by2 += (byte) (i17 * i17);
                                    break;
                                case 106:
                                    Test.fFld = i11;
                                    break;
                                case 126:
                                    if (b1)
                                        break;
                                    break;
                                default:
                                    Test.sFld1 += (short) i17;
                            }
                            break;
                        case 27:
                            lArr[i9 - 1] -= i11;
                            break;
                        case 40:
                            fArr[i17 + 1] = i10;
                        case 54:
                            d1 += i17;
                            break;
                        case 50:
                            i5 = (int) d1;
                            break;
                        case 49:
                            Test.iArrFld[i9 + 1] *= i18;
                    }
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + i17 + i18 + by2 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i, int i1) {
        int i2 = -142, i3 = 18650, i19 = 206, i20 = 13, i21 = -207, i22 = -39370, i23 = 65080, i24 = -15522, i25 = 39, i26 = 11, i27 = 0, i28 = 142, iArr[] = new int[N];
        double d = 2.85512, dArr[] = new double[N];
        byte by = 93;
        boolean b2 = true, bArr[] = new boolean[N];
        long[] lArr2 = new long[N];
        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(dArr, 2.13724);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr2, -24709L);
        for (i2 = 2; i2 < 127; ++i2) {
            iArr[i2 + 1] += (int) 41891L;
            d += (by = (byte) (Test.instanceCount = (long) dArr[i2 + 1]));
            Test.sFld = (short) (i2 + (i = Math.max(i3, i1)));
            i += i2;
            {
                java.io.PrintStream ax$26 = System.out;
                java.io.PrintStream ax$27 = System.err;
                java.io.PrintStream ax$28 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$28);
                System.setErr(ax$28);
                try {
                    ax$18 = true;
                    for (int ax$24 = 0; ax$24 < 5367; ax$24 += 1) vMeth1(-1806836326, -1851195899, 997688563);
                } catch (java.lang.Throwable ax$25) {
                } finally {
                    ax$18 = false;
                }
                System.setOut(ax$26);
                System.setErr(ax$27);
            }
            vMeth1(i1, Test.iFld, 3);
        }
        for (i19 = 3; 84 > i19; i19++) {
            Test.instanceCount = 14;
            i1 -= (int) Test.fFld;
        }
        {
            java.io.PrintStream ax$7 = System.out;
            java.io.PrintStream ax$8 = System.err;
            java.io.PrintStream ax$9 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$9);
            System.setErr(ax$9);
            try {
                for (int ax$5 = -541; ax$5 < 5293; ax$5 += 1) {
                    try {
                        int ax$2 = 0x80010000;
                        double[] ax$1 = { 0.0, 1.0, 2.0, 3.0 };
                        double[] ax$3 = new double[1];
                        double[] ax$0 = { 0.0, 1.0, 2.0, 3.0 };
                        ax$3[ax$2] = (ax$0[ax$2] * ax$1[ax$2]);
                    } catch (Throwable ax$4) {
                    } finally {
                    }
                }
            } catch (Throwable ax$6) {
            }
            System.setOut(ax$7);
            System.setErr(ax$8);
        }
        for (i21 = 5; 107 > i21; i21++) {
            for (i23 = 1; i23 < 5; ++i23) {
                Test.instanceCount += Test.instanceCount;
                for (i25 = 1; i25 < 2; ++i25) {
                    dArr[i25] = 96.331F;
                    i1 += (i25 + i23);
                    i22 += (i25 + i25);
                    dArr[i25 + 1] *= -33482;
                }
                switch(((Test.iFld >>> 1) % 4) + 32) {
                    case 32:
                        if (b2)
                            break;
                        for (i27 = 2; 1 < i27; --i27) {
                            switch(((i23 % 2) * 5) + 71) {
                                case 81:
                                    d += 117;
                                    i1 <<= (int) Test.instanceCount;
                                    d -= i;
                                    Test.iFld1 = (int) d;
                                    i26 = i25;
                                    Test.iFld = i21;
                                    Test.fFld += (((i27 * Test.instanceCount) + Test.iFld) - Test.sFld1);
                                    if (b2) {
                                        bArr = bArr;
                                        iArr[i23 + 1] = i1;
                                        d = Test.fFld;
                                    } else {
                                        Test.iArrFld[i27 - 1] >>= i20;
                                        Test.instanceCount |= 64466;
                                        b2 = false;
                                        i1 = i25;
                                        iArr[i27 + 1] = i;
                                    }
                                    break;
                                case 80:
                                    iArr[i27] ^= i26;
                                default:
                                    iArr[i21] = (int) Test.instanceCount;
                            }
                        }
                        break;
                    case 33:
                        i28 += i23;
                        break;
                    case 34:
                        iArr[i21 + 1] = i1;
                    case 35:
                        lArr2[i23 - 1] *= (long) d;
                        break;
                    default:
                        Test.instanceCount = i28;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + Double.doubleToLongBits(d) + by + i19 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + (b2 ? 1 : 0) + i27 + i28 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {
        if (ax$29) {
            int ax$32 = iFld1;
            int ax$33 = iFld;
            try {
                int[] ax$30 = { 1, 2, 3, 4 };
                for (int ax$31 = 0; ax$31 < iFld; ax$31++) {
                    iFld1 += ax$30[ax$31];
                }
            } catch (Throwable ax$34) {
            } finally {
                iFld1 = ax$32;
                iFld = ax$33;
            }
            return;
        }
        vMeth(Test.iFld1, -25);
        Test.iFld1 = 1;
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld1 Test.iFld Test.iFld1 = " + Test.sFld1 + "," + Test.iFld + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$40) {
            int ax$44 = iFld1;
            try {
                int[] ax$43 = { 10, 20, 45, 38, 88 };
                int[] ax$41 = { 1, 3 };
                int[] ax$42 = new int[51];
                ax$43[iFld1] = (int) (ax$41[iFld1] | ax$42[iFld1]);
            } catch (Throwable ax$45) {
            } finally {
                iFld1 = ax$44;
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$10 = false;

    private static Boolean ax$18 = false;

    private static Boolean ax$29 = false;

    private static Boolean ax$40 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
