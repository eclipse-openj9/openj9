// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 61703L;

    public int iFld = -44783;

    public static byte byFld = 17;

    public static int iFld1 = 34711;

    public static short sFld = 11129;

    public static volatile int iFld2 = -33953;

    public static double dFld = 1.17197;

    public static int iFld3 = -1;

    public volatile boolean bFld = true;

    public float fFld = 80.247F;

    public static int[] iArrFld = new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 14);
    }

    public static long fMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, double d) {
        int i6 = -222, i7 = -215, i8 = 20318, i9 = -2, i10 = 9, i11 = -1;
        float f = -2.43F;
        boolean b = false;
        long l1 = 4L, lArr[] = new long[N];
        short[] sArr = new short[N];
        FuzzerUtils.init(lArr, -2204L);
        FuzzerUtils.init(sArr, (short) -15890);
        lArr[(-2 >>> 1) % N] = Test.instanceCount;
        i5 = (int) Test.instanceCount;
        for (i6 = 4; i6 < 148; ++i6) {
            for (i8 = 1; i8 < 4; i8++) {
                Test.instanceCount *= i9;
                switch(((i6 % 9) * 5) + 8) {
                    case 23:
                    case 12:
                        Test.iArrFld[i8 - 1] = i7;
                        for (i10 = 1; 2 > i10; ++i10) {
                            lArr[i8] -= (long) f;
                            if (b)
                                continue;
                            d += i5;
                            Test.byFld += (byte) (((i10 * i6) + l1) - i8);
                            i7 = i6;
                            i7 = i10;
                            lArr[i10] += (long) d;
                            i7 += i8;
                            Test.byFld = (byte) d;
                            if (i6 != 0) {
                                vMeth1_check_sum += i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + (b ? 1 : 0) + l1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
                                return;
                            }
                            try {
                                i11 = (i7 % i10);
                                i11 = (i9 / -214);
                                Test.iArrFld[i8 + 1] = (25663 % Test.iFld1);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.instanceCount += i10;
                            i9 |= i9;
                            i7 = i9;
                            switch(((i10 % 9) * 5) + 38) {
                                case 78:
                                    switch((((i6 >>> 1) % 10) * 5) + 66) {
                                        case 70:
                                            Test.iFld1 = i10;
                                            if (b) {
                                                i7 *= (int) d;
                                                l1 += i9;
                                                d -= i11;
                                                switch((i6 % 4) + 23) {
                                                    case 23:
                                                    case 24:
                                                        Test.byFld = (byte) l1;
                                                        Test.byFld += (byte) l1;
                                                        Test.byFld = (byte) 47037;
                                                        sArr = sArr;
                                                        f -= 26259;
                                                        Test.instanceCount += i10;
                                                        i7 += (((i10 * l1) + i5) - i5);
                                                        break;
                                                    case 25:
                                                        i11 = i8;
                                                    case 26:
                                                        i7 -= Test.iFld1;
                                                        break;
                                                }
                                            } else {
                                                l1 *= i9;
                                            }
                                            break;
                                        case 84:
                                            f -= 81.86F;
                                            break;
                                        case 104:
                                            Test.iArrFld[i10] -= Test.byFld;
                                            break;
                                        case 82:
                                            Test.instanceCount = i7;
                                            break;
                                        case 108:
                                            Test.iArrFld[(i11 >>> 1) % N] *= (int) Test.instanceCount;
                                            break;
                                        case 91:
                                            i5 |= Test.iFld1;
                                        case 72:
                                            d += Test.sFld;
                                        case 111:
                                            Test.iArrFld[i10] -= (int) f;
                                            break;
                                        case 109:
                                            Test.iArrFld[i6] = i7;
                                            break;
                                        case 71:
                                            i5 <<= i5;
                                            break;
                                    }
                                case 57:
                                    i5 += (i10 + i10);
                                    break;
                                case 83:
                                    Test.iArrFld[i10] *= 107;
                                    break;
                                case 44:
                                case 55:
                                    i5 -= (int) Test.instanceCount;
                                    break;
                                case 54:
                                    i9 <<= Test.sFld;
                                case 69:
                                    if (b)
                                        break;
                                    break;
                                case 50:
                                    Test.iFld1 -= i11;
                                    break;
                                case 74:
                                    f += i6;
                                    break;
                                default:
                                    Test.iFld1 &= (int) Test.instanceCount;
                            }
                        }
                    case 47:
                        i7 += (i8 ^ i8);
                        break;
                    case 44:
                        Test.instanceCount = i6;
                        break;
                    case 18:
                        Test.iFld1 *= (int) d;
                    case 10:
                        i9 = (int) Test.instanceCount;
                    case 43:
                        f += (((i8 * i7) + i10) - i5);
                    case 46:
                        i5 *= i5;
                        break;
                    case 15:
                        i9 <<= Test.iFld1;
                        break;
                    default:
                        lArr[i8] >>>= 6;
                }
            }
        }
        vMeth1_check_sum += i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + (b ? 1 : 0) + l1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i4) {
        if (ax$8) {
            int ax$9 = i4;
            int ax$10 = iFld3;
            int ax$11 = iFld2;
            try {
                i4 = iFld3 - iFld2;
            } catch (Throwable ax$12) {
            } finally {
                i4 = ax$9;
                iFld3 = ax$10;
                iFld2 = ax$11;
            }
            return;
        }
        double d1 = -20.111931;
        int i12 = 40970, i13 = 27647, i14 = 11704, i15 = -8, i16 = 5, i17 = -6522, i18 = 143;
        float f1 = -2.683F;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(lArr1, 193L);
        i4 += Math.abs(Math.min(--i4, i4--));
        vMeth1(i4, d1);
        for (i12 = 4; i12 < 109; ++i12) {
            i14 = 5;
            while ((i14 -= 3) > 0) {
                for (i15 = 1; i15 < 3; i15++) {
                    i13 -= 68;
                    Test.instanceCount *= Test.instanceCount;
                    Test.instanceCount = i15;
                    lArr1[i12 + 1] <<= i13;
                    Test.iFld1 += (int) f1;
                    Test.iArrFld[i15] = Test.byFld;
                    i13 <<= i14;
                    Test.sFld ^= (short) i12;
                }
                Test.instanceCount = (long) f1;
                switch((i12 % 2) + 68) {
                    case 68:
                        Test.instanceCount += (long) f1;
                        i16 += (int) (-24.634F + (i14 * i14));
                        break;
                    case 69:
                        i13 *= i12;
                        switch(((i14 % 1) * 5) + 6) {
                            case 8:
                                Test.iArrFld = FuzzerUtils.int1array(N, (int) 2);
                                i13 += (int) f1;
                                Test.instanceCount &= i16;
                                f1 -= -6;
                                for (i17 = 1; i17 < 3; i17++) {
                                    f1 += (i17 * Test.instanceCount);
                                    Test.instanceCount += i17;
                                    Test.instanceCount = Test.instanceCount;
                                    f1 -= Test.iFld1;
                                    i4 -= (int) 8639286467112127412L;
                                    Test.iFld1 = (int) Test.instanceCount;
                                    Test.iFld1 = i16;
                                    Test.iFld1 += Test.sFld;
                                    i4 *= i14;
                                    i4 += (i17 + Test.instanceCount);
                                    Test.sFld += (short) (i17 * i17);
                                    Test.iFld1 <<= Test.iFld1;
                                }
                                Test.instanceCount += (((i14 * i13) + Test.sFld) - f1);
                                break;
                            default:
                                i18 = (int) f1;
                        }
                        break;
                    default:
                        if (Test.iFld2 != 0) {
                            vMeth_check_sum += i4 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f1) + i17 + i18 + FuzzerUtils.checkSum(lArr1);
                            return;
                        }
                }
            }
        }
        vMeth_check_sum += i4 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f1) + i17 + i18 + FuzzerUtils.checkSum(lArr1);
    }

    public float fMeth(int i, int i1, long l) {
        int i2 = 20, i3 = -14, i19 = -217, i20 = 137, i21 = 11168, i22 = -12;
        short[] sArr1 = new short[N];
        long[] lArr2 = new long[N];
        FuzzerUtils.init(sArr1, (short) 30653);
        FuzzerUtils.init(lArr2, 3462910300434429305L);
        for (i2 = 2; i2 < 82; ++i2) {
            switch((((Math.abs(iFld) >>> 1) % 7) * 5) + 34) {
                case 47:
                    {
                        java.io.PrintStream ax$15 = System.out;
                        java.io.PrintStream ax$16 = System.err;
                        java.io.PrintStream ax$17 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$17);
                        System.setErr(ax$17);
                        try {
                            ax$8 = true;
                            for (int ax$13 = 0; ax$13 < 9930; ax$13 += 1) vMeth(-1422783666);
                        } catch (java.lang.Throwable ax$14) {
                        } finally {
                            ax$8 = false;
                        }
                        System.setOut(ax$15);
                        System.setErr(ax$16);
                    }
                    vMeth(iFld);
                    for (i19 = 1; 7 > i19; ++i19) {
                        for (i21 = 1; i21 < 2; ++i21) {
                            float f2 = -109.629F;
                            i20 >>= i2;
                            Test.dFld *= Test.iFld2;
                            sArr1[i2 - 1] = (short) 1.12258;
                            i1 += (i21 - Test.instanceCount);
                            l -= i2;
                            i3 += i22;
                            Test.iFld1 += i19;
                            Test.byFld += (byte) (i21 + Test.instanceCount);
                            Test.instanceCount -= i21;
                            f2 = Test.iFld1;
                            l <<= Test.iFld2;
                            if (bFld) {
                                f2 += Test.iFld3;
                                Test.instanceCount += (i21 + i19);
                                Test.iFld1 += (i21 | iFld);
                                f2 += (i21 * l);
                                if (bFld) {
                                    i -= (int) Test.instanceCount;
                                    Test.iFld2 = iFld;
                                    switch(((i21 % 2) * 5) + 113) {
                                        case 119:
                                            Test.iFld2 *= i1;
                                            Test.instanceCount += (long) Test.dFld;
                                            iFld += (i21 + iFld);
                                            l = i3;
                                            Test.dFld /= (i3 | 1);
                                            Test.iFld2 += (i21 * i1);
                                            i = Test.byFld;
                                            Test.iArrFld[i19] += i;
                                            Test.instanceCount = (long) f2;
                                            i3 += (((i21 * Test.iFld2) + l) - Test.instanceCount);
                                            Test.instanceCount = Test.sFld;
                                            Test.instanceCount = 9;
                                            break;
                                        case 115:
                                        default:
                                            iFld = (int) Test.dFld;
                                    }
                                } else {
                                    l *= i;
                                }
                            } else {
                                lArr2[i21] *= l;
                            }
                        }
                    }
                    break;
                case 51:
                    i *= (int) Test.instanceCount;
                case 53:
                    i = i1;
                    break;
                case 54:
                    i += (((i2 * iFld) + l) - l);
                    break;
                case 66:
                case 43:
                    Test.iFld1 *= i20;
                    break;
                case 35:
                    l |= Test.instanceCount;
                    break;
                default:
                    i22 += i2;
            }
        }
        long meth_res = i + i1 + l + i2 + i3 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(sArr1) + FuzzerUtils.checkSum(lArr2);
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i23 = -36929, i24 = 200, i25 = -8, i26 = 15418, i27 = 6, i28 = -45256, i29 = -27331, i30 = 85, i31 = -69, i32 = -16178, i33 = -103, i34 = -6, i35 = -70, i36 = -13790, i37 = -11;
        double d2 = -118.63634;
        long[] lArr3 = new long[N];
        byte[] byArr = new byte[N];
        FuzzerUtils.init(lArr3, -4485743039279888503L);
        FuzzerUtils.init(byArr, (byte) 103);
        Test.instanceCount = (long) (Integer.reverseBytes(--iFld) + (fMeth(Test.iFld1, -2, Test.instanceCount) * Test.iFld1));
        Test.instanceCount += 1;
        Test.iFld2 <<= Test.iFld1;
        fFld *= Test.iFld1;
        iFld = (int) fFld;
        Test.iFld1 >>= Test.iFld1;
        i23 = 1;
        do {
            for (i24 = 1; 173 > i24; i24 += 2) {
                for (i26 = i24; i26 < 3; i26++) {
                    Test.iFld1 -= -23220;
                    i27 += (i26 - i23);
                    i25 >>= i26;
                }
                for (i28 = 1; i28 < 3; ++i28) {
                    i29 += i25;
                    if (bFld)
                        break;
                    Test.iFld3 <<= i26;
                    fFld += (i28 * i28);
                    fFld = Test.instanceCount;
                    Test.instanceCount = Test.instanceCount;
                    switch((i23 % 1) + 39) {
                        case 39:
                    }
                    lArr3[i24 + 1] -= iFld;
                    iFld += (((i28 * Test.byFld) + Test.iFld1) - Test.byFld);
                }
                i30 = 1;
                do {
                    i27 = i25;
                    i27 += (((i30 * fFld) + i30) - i28);
                    bFld = bFld;
                    if (bFld)
                        continue;
                    fFld += i30;
                    Test.dFld += i27;
                    Test.iArrFld[i24] = iFld;
                    Test.iArrFld[i23] = Test.sFld;
                } while (++i30 < 3);
                Test.dFld += Test.sFld;
                i25 = Test.iFld2;
                d2 = 1;
                while (++d2 < 3) {
                    Test.dFld = -72.83953;
                    Test.dFld = i26;
                    byArr[i23 + 1] += (byte) d2;
                    iFld = iFld;
                    i27 &= Test.iFld3;
                    Test.iFld2 *= (int) 121.532F;
                }
                iFld |= i31;
                for (i32 = i24; 3 > i32; ++i32) {
                    i33 >>= iFld;
                    Test.iFld1 += i27;
                    if (bFld)
                        break;
                    try {
                        i33 = (Test.iArrFld[i24] / Test.iFld2);
                        i33 = (-216 % Test.iFld3);
                        i29 = (916767665 % Test.iFld2);
                    } catch (ArithmeticException a_e) {
                    }
                    {
                        java.io.PrintStream ax$5 = System.out;
                        java.io.PrintStream ax$6 = System.err;
                        java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$7);
                        System.setErr(ax$7);
                        try {
                            for (int ax$3 = -2840; ax$3 < 7103; ax$3 += 1) {
                                try {
                                    boolean[] ax$0 = new boolean[1];
                                    for (int ax$1 = 0; ax$1 < 128; ax$1++) ax$0[ax$1] = !ax$0[ax$1];
                                } catch (Throwable ax$2) {
                                } finally {
                                }
                            }
                        } catch (Throwable ax$4) {
                        }
                        System.setOut(ax$5);
                        System.setErr(ax$6);
                    }
                    i33 += i32;
                    Test.instanceCount >>= i25;
                    i27 += (int) fFld;
                }
                for (i34 = 1; i34 < 3; ++i34) {
                    if (bFld) {
                        iFld -= (int) -4509506245206590307L;
                        i31 *= (int) 3512348854111801136L;
                        iFld -= i34;
                        fFld = (float) d2;
                        Test.dFld += i33;
                        Test.sFld = (short) fFld;
                        Test.instanceCount += (i34 * i34);
                        bFld = false;
                        if (bFld)
                            continue;
                        i35 += i30;
                    }
                    try {
                        Test.iFld2 = (iFld / Test.iArrFld[i24 - 1]);
                        i31 = (-6492 % i26);
                        i25 = (-203 / Test.iFld1);
                    } catch (ArithmeticException a_e) {
                    }
                    bFld = bFld;
                    i27 += (5 + (i34 * i34));
                    Test.byFld *= (byte) 23;
                    Test.instanceCount = (long) fFld;
                }
                i29 -= i24;
            }
        } while ((i23 += 3) < 87);
        i29 += (int) Test.instanceCount;
        Test.sFld -= (short) Test.instanceCount;
        for (i36 = 9; i36 < 202; ++i36) {
            i35 += (int) (-5L + (i36 * i36));
            Test.instanceCount -= Test.instanceCount;
            Test.iFld2 += (i36 ^ Test.iFld1);
            Test.sFld <<= (short) i35;
            fFld += fFld;
        }
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 d2 = " + i29 + "," + i30 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 lArr3 byArr = " + i37 + "," + FuzzerUtils.checkSum(lArr3) + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("Test.instanceCount iFld Test.byFld = " + Test.instanceCount + "," + iFld + "," + Test.byFld);
        FuzzerUtils.out.println("Test.iFld1 Test.sFld Test.iFld2 = " + Test.iFld1 + "," + Test.sFld + "," + Test.iFld2);
        FuzzerUtils.out.println("Test.dFld Test.iFld3 bFld = " + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld3 + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("fFld Test.iArrFld = " + Float.floatToIntBits(fFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$8 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  fMeth ->  fMeth mainTest
// DEBUG  vMeth ->  vMeth fMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
