// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = -1587373382L;

    public static float fFld = 112.414F;

    public static volatile short sFld = 22759;

    public static long lFld = -12L;

    public static int iFld = -9;

    public static double dFld = 47.18453;

    public short sFld1 = 14692;

    public int[] iArrFld = new int[N];

    public static int[] iArrFld1 = new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -45664);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f, int i3, int i4) {
        if (ax$0) {
            try {
                double[] ax$1 = new double[1];
                ax$1[20] = 11;
                for (int ax$2 = 0; ax$2 < ax$1.length; ax$2++) {
                    ax$1[ax$2] = ax$1[20] + 2;
                }
            } catch (Throwable ax$3) {
            } finally {
            }
            return;
        }
        int i5 = -122, i6 = 3, i7 = -7, i8 = -16012, i9 = 10, i10 = 1, i11 = -53;
        byte by = 85;
        double d = 66.129042, dArr[] = new double[N];
        short s = -8804;
        boolean b = true;
        long[] lArr = new long[N];
        float[] fArr = new float[N];
        FuzzerUtils.init(lArr, -147L);
        FuzzerUtils.init(fArr, -2.174F);
        FuzzerUtils.init(dArr, -79.28734);
        Test.instanceCount <<= i3;
        Test.instanceCount = (long) f;
        if (b) {
            i3 *= i3;
            i4 = (int) f;
            i3 -= i3;
            i4 = (int) Test.instanceCount;
            f -= f;
            i3 /= (int) (i4 | 1);
            i5 = 1;
            do {
                Test.instanceCount += (i5 * i5);
                try {
                    i4 = (i4 / i4);
                    Test.iArrFld1[i5 + 1] = (Test.iArrFld1[i5] % i3);
                    i3 = (Test.iArrFld1[i5] / 141);
                } catch (ArithmeticException a_e) {
                }
                for (i6 = 1; i6 < 6; ++i6) {
                    Test.instanceCount += i6;
                    i7 = (int) Test.instanceCount;
                    for (i8 = 1; i8 < 2; i8++) {
                        Test.iArrFld1[i8 + 1] = i10;
                        lArr[i5 + 1] = -119;
                        if (b) {
                            Test.instanceCount = i3;
                            if (b) {
                                i3 = i9;
                                i3 = i7;
                                switch((i5 % 2) + 86) {
                                    case 86:
                                        Test.instanceCount = Test.instanceCount;
                                        by |= (byte) i4;
                                        f = i11;
                                        d -= i4;
                                        Test.iArrFld1[i6 - 1] += (int) Test.instanceCount;
                                        fArr[i5 - 1] += i11;
                                        f = by;
                                        Test.instanceCount -= i11;
                                        i4 += i8;
                                        i9 >>= i5;
                                        dArr[i8] += f;
                                        s = (short) i4;
                                        i11 += i11;
                                        break;
                                    case 87:
                                        i9 += i8;
                                        break;
                                }
                            } else if (false) {
                                i9 = i8;
                            }
                        }
                    }
                }
            } while ((i5 += 2) < 179);
        } else {
            i7 >>= (int) Test.instanceCount;
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + by + i11 + Double.doubleToLongBits(d) + s + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(long l, int i2, long l1) {
        long l2 = 55256L;
        int i12 = 131, i13 = 145, i14 = 8, i15 = 73;
        byte by1 = 9;
        boolean b1 = false;
        float[] fArr1 = new float[N];
        FuzzerUtils.init(fArr1, 87.852F);
        {
            java.io.PrintStream ax$6 = System.out;
            java.io.PrintStream ax$7 = System.err;
            java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$8);
            System.setErr(ax$8);
            try {
                ax$0 = true;
                for (int ax$4 = 0; ax$4 < 6206; ax$4 += 1) vMeth2((float) 0.4976803487359772, 746883148, 1209584039);
            } catch (java.lang.Throwable ax$5) {
            } finally {
                ax$0 = false;
            }
            System.setOut(ax$6);
            System.setErr(ax$7);
        }
        vMeth2(Test.fFld, i2, i2);
        try {
            for (l2 = 1; 80 > l2; ++l2) {
                i13 = 1;
                while (++i13 < 7) {
                    fArr1 = fArr1;
                    i14 = 1;
                    while (++i14 < 1) {
                        double d1 = 79.78311;
                        d1 += i14;
                        if (b1) {
                            i12 *= i12;
                            if (i12 != 0) {
                                vMeth1_check_sum += l + i2 + l1 + l2 + i12 + i13 + i14 + i15 + by1 + (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                                return;
                            }
                            i15 = 17;
                            i2 = by1;
                            Test.fFld = Test.sFld;
                            l *= i2;
                            l1 *= i14;
                        } else {
                            i2 -= 7158;
                            Test.iArrFld1[(int) (l2 + 1)] = (int) 449643182L;
                            if (b1)
                                continue;
                            if (b1) {
                                if (i13 != 0) {
                                    vMeth1_check_sum += l + i2 + l1 + l2 + i12 + i13 + i14 + i15 + by1 + (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                                    return;
                                }
                                i15 += (int) l1;
                                Test.iArrFld1[i13 + 1] *= (int) -86.60150;
                                switch((int) (((l2 % 2) * 5) + 30)) {
                                    case 38:
                                        i15 += (i14 * i14);
                                        i15 = -52826;
                                        i15 &= i13;
                                        i12 >>= (int) Test.instanceCount;
                                        i2 += (int) Test.fFld;
                                        i15 += i14;
                                        Test.fFld = Test.fFld;
                                        Test.iArrFld1[i13 - 1] = (int) Test.lFld;
                                        i2 = (int) Test.fFld;
                                        Test.iArrFld1[i14 + 1] = (int) -2L;
                                    case 37:
                                        i2 = i13;
                                        by1 += (byte) l;
                                        i15 -= i14;
                                        Test.iArrFld1[(int) (l2 - 1)] >>= i2;
                                }
                            } else if (b1) {
                                if (i14 != 0) {
                                    vMeth1_check_sum += l + i2 + l1 + l2 + i12 + i13 + i14 + i15 + by1 + (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                                    return;
                                }
                            } else {
                                Test.instanceCount += i13;
                            }
                            vMeth1_check_sum += l + i2 + l1 + l2 + i12 + i13 + i14 + i15 + by1 + (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                            return;
                        }
                    }
                }
            }
        } catch (NegativeArraySizeException exc1) {
            l += 7L;
        }
        vMeth1_check_sum += l + i2 + l1 + l2 + i12 + i13 + i14 + i15 + by1 + (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth() {
        if (ax$9) {
            int ax$13 = iFld;
            try {
                boolean ax$12 = true;
                int ax$10 = 499501;
                int ax$11 = 2054;
                // Non-fair queues are lifo in our implementation
                if (ax$12 ? ax$11 != iFld : ax$11 != ax$10 - 1 - iFld)
                    ;
            } catch (Throwable ax$14) {
            } finally {
                iFld = ax$13;
            }
            return;
        }
        int i16 = 12, i17 = 236, i18 = -3, i19 = 43219, i20 = -66, i21 = -12943, i22 = 6;
        boolean b2 = true;
        byte by2 = -74, byArr[] = new byte[N];
        float[][] fArr2 = new float[N][N];
        double[] dArr1 = new double[N];
        FuzzerUtils.init(fArr2, -121.257F);
        FuzzerUtils.init(byArr, (byte) -58);
        FuzzerUtils.init(dArr1, 0.32016);
        vMeth1(47648L, 9, Test.lFld);
        Test.sFld -= (short) Test.iFld;
        for (i16 = 1; i16 < 131; ++i16) {
            i17 >>= Test.iFld;
            fArr2[i16][i16 + 1] -= Test.iFld;
            Test.iFld = i16;
            Test.iFld <<= i16;
            Test.instanceCount *= (long) Test.dFld;
            for (i18 = 1; i18 < 4; i18++) {
                Test.fFld = 2223252815L;
                b2 = b2;
                Test.lFld += (108 + (i18 * i18));
                for (i20 = 1; i20 < 2; i20++) {
                    i17 &= i20;
                    Test.lFld /= ((long) (Test.dFld) | 1);
                    Test.iFld += (i20 * i20);
                    Test.iArrFld1[i16] -= i17;
                    Test.instanceCount += i16;
                    switch(((-61462 >>> 1) % 4) + 58) {
                        case 58:
                            byArr[i16] = (byte) i18;
                            i17 = (int) Test.instanceCount;
                            i19 += i21;
                            switch((i16 % 2) + 22) {
                                case 22:
                                    switch(((i16 % 2) * 5) + 65) {
                                        case 67:
                                            i17 = Test.iFld;
                                            i19 = -11844;
                                            Test.lFld ^= i21;
                                            Test.dFld /= (i18 | 1);
                                            Test.lFld = Test.lFld;
                                            Test.sFld = (short) i19;
                                            i21 = i18;
                                            i19 >>>= i18;
                                            i19 = i17;
                                            break;
                                        case 66:
                                            dArr1[i16 - 1] -= i17;
                                            i21 = -7612;
                                            Test.iFld = by2;
                                            i22 <<= i16;
                                            break;
                                        default:
                                            try {
                                                i19 = (-37 % Test.iArrFld1[i18 - 1]);
                                                i19 = (i20 / i19);
                                                Test.iArrFld1[i16 + 1] = (Test.iFld % i18);
                                            } catch (ArithmeticException a_e) {
                                            }
                                    }
                                    break;
                                case 23:
                                    Test.iFld = Test.sFld;
                                    break;
                            }
                        case 59:
                            i21 = (int) Test.fFld;
                        case 60:
                            Test.fFld *= Test.instanceCount;
                            break;
                        case 61:
                            Test.iArrFld1 = Test.iArrFld1;
                            break;
                        default:
                            Test.fFld += (i20 * i20);
                    }
                }
            }
        }
        vMeth_check_sum += i16 + i17 + i18 + i19 + (b2 ? 1 : 0) + i20 + i21 + by2 + i22 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {
        int i = 58288, i1 = 12, i23 = -13, i24 = 94, i25 = -2, i26 = 0, i27 = -55, i28 = -218, i29 = 9;
        boolean b3 = false, bArr[] = new boolean[N];
        byte by3 = -55;
        float f1 = -37.954F;
        long[] lArr1 = new long[N];
        double[][] dArr2 = new double[N][N];
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr1, -55L);
        FuzzerUtils.init(dArr2, 0.21460);
        for (i = 3; i < 161; ++i) {
            i1 <<= (int) (((-51638 ^ (Test.instanceCount + Test.instanceCount)) * (i - Test.instanceCount)) - (--iArrFld[i - 1]));
            i1 ^= (int) Test.instanceCount;
            {
                java.io.PrintStream ax$17 = System.out;
                java.io.PrintStream ax$18 = System.err;
                java.io.PrintStream ax$19 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$19);
                System.setErr(ax$19);
                try {
                    ax$9 = true;
                    for (int ax$15 = 0; ax$15 < 8626; ax$15 += 1) vMeth();
                } catch (java.lang.Throwable ax$16) {
                } finally {
                    ax$9 = false;
                }
                System.setOut(ax$17);
                System.setErr(ax$18);
            }
            vMeth();
        }
        for (i23 = 1; 82 > i23; ++i23) {
            switch((i23 % 10) + 68) {
                case 68:
                    if (true) {
                        iArrFld[i23 - 1] += (int) Test.lFld;
                        i24 *= (int) Test.lFld;
                        Test.instanceCount = -25945;
                        try {
                            Test.iFld = (i23 / -1497360376);
                            i1 = (Test.iFld % 64144);
                            i1 = (i % -1235893909);
                        } catch (ArithmeticException a_e) {
                        }
                        for (i25 = 1; i25 < 62; i25++) {
                            Test.iFld += (i25 ^ i25);
                            bArr[i25 + 1] = true;
                            Test.instanceCount = i;
                            if (b3)
                                continue;
                            iArrFld[i25] += i1;
                            Test.lFld = i25;
                            i1 /= (int) (i1 | 1);
                            iArrFld[i23] <<= (int) Test.lFld;
                            i24 += i;
                            Test.instanceCount &= Test.iFld;
                        }
                        i26 += i25;
                        i27 = 62;
                        do {
                            Test.iFld = (int) -8747236557171243523L;
                            i1 ^= (int) Test.lFld;
                            by3 *= (byte) i25;
                            i1 *= i1;
                            i26 = (int) Test.lFld;
                            for (i28 = 1; i28 < 1; ++i28) {
                                Test.iFld = 96;
                                lArr1 = FuzzerUtils.long1array(N, (long) 11L);
                                i26 *= (int) Test.lFld;
                                Test.iArrFld1[i28] <<= (int) Test.instanceCount;
                                i1 += (i28 - Test.instanceCount);
                                Test.dFld += -77088454L;
                                if (b3)
                                    continue;
                                if (false)
                                    break;
                                i26 = Test.sFld;
                                i24 = 6;
                                i26 += (((i28 * i29) + i23) - Test.fFld);
                                i1 &= i28;
                                switch(((i28 % 8) * 5) + 18) {
                                    case 49:
                                        lArr1[i28] *= i25;
                                        Test.dFld = Test.iFld;
                                        b3 = false;
                                        i24 += (i28 * i28);
                                        iArrFld[i28 - 1] *= 49;
                                        i26 >>= i25;
                                        Test.instanceCount += (i28 - Test.lFld);
                                        b3 = true;
                                        Test.iFld -= i23;
                                        Test.fFld -= Test.instanceCount;
                                        Test.fFld += (-2 + (i28 * i28));
                                    case 22:
                                        Test.iArrFld1[i27 + 1] -= i;
                                        i24 >>= i24;
                                        f1 = -1293;
                                        i26 += (i28 * Test.lFld);
                                        Test.instanceCount <<= -56;
                                        i29 += (i28 ^ i24);
                                        Test.lFld -= i27;
                                        Test.lFld <<= -13;
                                    case 26:
                                        i26 *= 17715;
                                        f1 -= i29;
                                        Test.instanceCount = i24;
                                        i29 |= i27;
                                        i1 <<= i1;
                                        i26 -= (int) Test.dFld;
                                        Test.instanceCount <<= i1;
                                        Test.dFld *= f1;
                                        sFld1 -= (short) 26.242F;
                                        if (b3)
                                            break;
                                        i24 >>>= i23;
                                        dArr2[i23 + 1][i23 + 1] -= i25;
                                        break;
                                    case 40:
                                        Test.fFld -= i27;
                                        break;
                                    case 32:
                                        Test.dFld += 2860226139L;
                                        break;
                                    case 42:
                                        if (false)
                                            break;
                                    case 53:
                                        dArr2[i28 - 1][i23] -= Test.dFld;
                                        break;
                                    case 30:
                                        lArr1 = lArr1;
                                        break;
                                    default:
                                        f1 += (i28 - i27);
                                }
                            }
                        } while (--i27 > 0);
                    }
                    break;
                case 69:
                    i29 *= (int) Test.dFld;
                    break;
                case 70:
                    i1 = i29;
                    break;
                case 71:
                    try {
                        Test.iArrFld1[i23 + 1] = (35740 / i1);
                        i24 = (i23 / -126);
                        i26 = (i28 % i27);
                    } catch (ArithmeticException a_e) {
                    }
                    break;
                case 72:
                    i24 -= (int) Test.fFld;
                    break;
                case 73:
                    i1 |= i24;
                    break;
                case 74:
                    b3 = true;
                    break;
                case 75:
                    i26 = (int) Test.instanceCount;
                    break;
                case 76:
                    i29 = (int) Test.instanceCount;
                    break;
                case 77:
                    dArr2[i23][i23] -= Test.lFld;
                    break;
            }
        }
        FuzzerUtils.out.println("i i1 i23 = " + i + "," + i1 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("b3 i27 by3 = " + (b3 ? 1 : 0) + "," + i27 + "," + by3);
        FuzzerUtils.out.println("i28 i29 f1 = " + i28 + "," + i29 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("bArr lArr1 dArr2 = " + FuzzerUtils.checkSum(bArr) + "," + FuzzerUtils.checkSum(lArr1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.lFld Test.iFld Test.dFld = " + Test.lFld + "," + Test.iFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("sFld1 iArrFld Test.iArrFld1 = " + sFld1 + "," + FuzzerUtils.checkSum(iArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld1));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$20) {
            int ax$24 = iFld;
            try {
                long[] ax$23 = new long[60];
                long[] ax$21 = { 7L, 7L, 5L, 5L, 7L, 7L, 7L, 5L, 5L };
                for (int ax$22 = 0; ax$22 < iFld; ax$22++) {
                    if (ax$23[ax$22] != ax$21[ax$22]) {
                    }
                }
            } catch (Throwable ax$25) {
            } finally {
                iFld = ax$24;
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$9 = false;

    private static Boolean ax$20 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
