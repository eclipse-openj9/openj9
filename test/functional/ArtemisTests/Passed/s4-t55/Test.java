// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -7428542532183781366L;

    public static double dFld = 0.104190;

    public static short sFld = -468;

    public static byte byFld = -123;

    public static float fFld = 12.560F;

    public boolean bFld = true;

    public int iFld = 55474;

    public byte byFld1 = -100;

    public static boolean[] bArrFld = new boolean[N];

    public short[] sArrFld = new short[N];

    public static volatile int[] iArrFld = new int[N];

    public static double[] dArrFld = new double[N];

    public static float[] fArrFld = new float[N];

    public long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.iArrFld, 47);
        FuzzerUtils.init(Test.dArrFld, -67.94452);
        FuzzerUtils.init(Test.fArrFld, 93.456F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public void vMeth2() {
        int i1 = -46, i2 = -28472, i3 = -7, i4 = 200, i5 = 8, i6 = -152, i7 = 3, i8 = -51587, i9 = -56169, i10 = -13, i11 = -240, i12 = -218, iArr[] = new int[N];
        boolean b = false;
        float f1 = 2.198F;
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr, 33099);
        FuzzerUtils.init(dArr, -42.34754);
        for (i1 = 7; i1 < 173; i1++) {
            b = b;
            i2 += (i1 * i1);
        }
        Test.dFld -= f1;
        i2 <<= i1;
        Test.instanceCount += i2;
        i3 = 1;
        while (++i3 < 149) {
            i2 >>= i2;
            iArr[i3 - 1] = i2;
            i2 += i2;
            Test.sFld >>= (short) i1;
            for (i4 = 1; i4 < 4; i4++) {
                Test.instanceCount += (-117 + (i4 * i4));
                Test.sFld -= (short) Test.dFld;
                i6 ^= 24982;
                Test.instanceCount = -2;
                dArr[i4] += 9L;
            }
            for (i7 = 1; i7 < 4; ++i7) {
                i5 -= i5;
                Test.byFld -= (byte) f1;
                switch(((i4 >>> 1) % 9) + 43) {
                    case 43:
                        for (i9 = i7; i9 < 2; ++i9) {
                            f1 *= i1;
                            iArr[i3 - 1] += i4;
                            i5 += (i9 * i9);
                            i5 = i10;
                            i8 >>= (int) Test.instanceCount;
                            Test.instanceCount -= (long) Test.dFld;
                            i6 += i9;
                            i10 -= i7;
                            Test.instanceCount += i4;
                            Test.instanceCount -= Test.instanceCount;
                            i8 += (int) Test.instanceCount;
                            switch((i7 % 7) + 110) {
                                case 110:
                                    Test.bArrFld[(i3 >>> 1) % N] = b;
                                    i10 += (((i9 * i9) + i10) - i9);
                                    i6 -= -75;
                                case 111:
                                    iArr[i3] |= i5;
                                    break;
                                case 112:
                                    if (i10 != 0) {
                                        vMeth2_check_sum += i1 + i2 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                                        return;
                                    }
                                    break;
                                case 113:
                                    Test.instanceCount += i9;
                                    break;
                                case 114:
                                    i8 = (int) Test.instanceCount;
                                    break;
                                case 115:
                                    i2 += (i9 - f1);
                                    break;
                                case 116:
                                    i5 += (((i9 * i6) + i7) - Test.byFld);
                                    break;
                                default:
                                    i11 -= 0;
                            }
                        }
                        break;
                    case 44:
                        iArr[i7 - 1] = i4;
                        break;
                    case 45:
                    case 46:
                        i12 += (i7 - Test.instanceCount);
                        break;
                    case 47:
                        i8 = (int) Test.instanceCount;
                        break;
                    case 48:
                        iArr[i7] -= (int) Test.instanceCount;
                        break;
                    case 49:
                    case 50:
                        iArr[i3] *= i10;
                        break;
                    case 51:
                        i5 -= Test.byFld;
                }
            }
        }
        vMeth2_check_sum += i1 + i2 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void vMeth1(long l2) {
        int i13 = 26938, i14 = 4, i15 = -10, i16 = 216, i17 = 138, i18 = 20, iArr1[][] = new int[N][N];
        double d = 125.101950;
        long[] lArr = new long[N];
        FuzzerUtils.init(iArr1, 7);
        FuzzerUtils.init(lArr, 2061L);
        vMeth2();
        for (i13 = 3; i13 < 196; ++i13) {
            switch((i13 % 2) + 111) {
                case 111:
                    Test.fFld += i13;
                    i14 *= (int) Test.instanceCount;
                    i14 *= i14;
                    i14 += i13;
                    try {
                        i14 = (iArr1[i13 + 1][i13] / -8447);
                        i14 = (i14 / 14340);
                        i14 = (-119 / i14);
                    } catch (ArithmeticException a_e) {
                    }
                    iArr1[i13 - 1][i13] += i14;
                    for (i15 = 3; i15 > 1; i15 -= 3) {
                        d = 1;
                        while (++d < 3) {
                            Test.instanceCount += Test.instanceCount;
                            try {
                                i14 = (i13 / 906725319);
                                i14 = (-48091 / i13);
                                i16 = (i15 % i15);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.instanceCount += (long) d;
                        }
                        for (i17 = 3; 1 < i17; --i17) {
                            if (bFld) {
                                switch(((i15 % 9) * 5) + 18) {
                                    case 46:
                                        i16 -= (int) Test.fFld;
                                    case 63:
                                    case 25:
                                        i16 -= i15;
                                        Test.sFld += (short) i15;
                                        switch((i15 % 10) + 98) {
                                            case 98:
                                                lArr[i13] = 205;
                                                if (i18 != 0) {
                                                    vMeth1_check_sum += l2 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d) + i17 + i18 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
                                                    return;
                                                }
                                                Test.byFld -= (byte) i17;
                                                if (bFld) {
                                                    sArrFld[i15 - 1] = (short) i15;
                                                    i16 += (int) (-209291551475697045L + (i17 * i17));
                                                    iArr1[i17][i17 + 1] += i15;
                                                    i16 = i18;
                                                    if (bFld) {
                                                        lArr[i13 + 1] *= -52464;
                                                        i16 -= (int) Test.instanceCount;
                                                        i18 *= Test.sFld;
                                                        try {
                                                            i14 = (1091704863 % i15);
                                                            i16 = (-1212434935 / i16);
                                                            i18 = (i18 % 36740);
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                        lArr[i13] = i15;
                                                        i16 -= Test.sFld;
                                                        i16 *= i14;
                                                    } else {
                                                        i14 += -51765;
                                                    }
                                                } else if (bFld) {
                                                    i18 += i17;
                                                }
                                                break;
                                            case 99:
                                                if (i14 != 0) {
                                                    vMeth1_check_sum += l2 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d) + i17 + i18 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
                                                    return;
                                                }
                                                break;
                                            case 100:
                                                Test.instanceCount += (((i17 * i13) + Test.instanceCount) - Test.instanceCount);
                                                break;
                                            case 101:
                                                Test.dFld *= 31910;
                                                break;
                                            case 102:
                                                i18 += (i17 * i17);
                                                break;
                                            case 103:
                                                i16 += i17;
                                            case 104:
                                                i18 += Test.sFld;
                                                break;
                                            case 105:
                                            case 106:
                                                i18 += (i17 - Test.sFld);
                                                break;
                                            case 107:
                                                if (bFld)
                                                    continue;
                                                break;
                                            default:
                                                Test.dFld *= i16;
                                        }
                                        break;
                                    case 33:
                                        Test.sFld += (short) (i17 * i14);
                                    case 20:
                                        Test.fFld = Test.fFld;
                                        break;
                                    case 34:
                                        l2 -= 100;
                                        break;
                                    case 52:
                                        l2 += (i17 + Test.fFld);
                                        break;
                                    case 42:
                                    case 29:
                                        if (bFld)
                                            break;
                                }
                            } else {
                                i14 >>= i13;
                            }
                        }
                    }
                    break;
                case 112:
                    i14 -= iFld;
                    break;
                default:
                    Test.fFld -= 28193;
            }
        }
        vMeth1_check_sum += l2 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d) + i17 + i18 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(long l, float f, long l1) {
        short s = 2913;
        int i = 105, i20 = -222, i21 = -21041, i22 = 213, i23 = 250, i24 = 0;
        s = (short) (((--i) * (i - i)) - (i--));
        vMeth1(l1);
        sArrFld[(iFld >>> 1) % N] = (short) i;
        Test.bArrFld = Test.bArrFld;
        for (int i19 : Test.iArrFld) {
            i20 = 1;
            while (++i20 < 2) {
                i >>= -53006;
                i >>= 11;
                i += i;
                Test.byFld += (byte) i20;
            }
            {
                java.io.PrintStream ax$5 = System.out;
                java.io.PrintStream ax$6 = System.err;
                java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$7);
                System.setErr(ax$7);
                try {
                    for (int ax$3 = -3907; ax$3 < 4274; ax$3 += 1) {
                        try {
                            java.lang.String ax$1 = "1.804873986089417E+19";
                            java.lang.String ax$0 = "3.172254094127582E+16";
                            if (ax$0 == null || !ax$0.contains(ax$1)) {
                            }
                        } catch (Throwable ax$2) {
                        } finally {
                        }
                    }
                } catch (Throwable ax$4) {
                }
                System.setOut(ax$5);
                System.setErr(ax$6);
            }
            Test.instanceCount *= -2;
            Test.fFld = i;
            iFld = -144;
            iFld = iFld;
            if (false) {
                for (i21 = 2; i21 > 1; i21 -= 3) {
                    for (i23 = 1; i23 < 2; i23++) {
                        i19 >>= i;
                        i = i19;
                        l &= i22;
                        Test.fFld *= i20;
                        switch((i21 % 2) + 1) {
                            case 1:
                                iFld = (int) l;
                                iFld = (int) l1;
                                if (bFld) {
                                    l1 *= Test.instanceCount;
                                    f = (float) Test.dFld;
                                    switch((i21 % 2) + 74) {
                                        case 74:
                                            l >>= i;
                                            Test.iArrFld = Test.iArrFld;
                                            Test.instanceCount ^= i23;
                                            Test.byFld += (byte) i23;
                                            Test.sFld *= (short) 18133;
                                            i24 -= (int) l;
                                            i19 *= -29401;
                                            i24 += i23;
                                            Test.dFld += Test.instanceCount;
                                            break;
                                        case 75:
                                            i19 -= (int) f;
                                    }
                                } else if (bFld) {
                                    i22 = 0;
                                }
                                break;
                            case 2:
                                iFld += i23;
                                break;
                            default:
                                iFld += (int) (-1.398F + (i23 * i23));
                        }
                    }
                }
            } else if (true) {
                bFld = bFld;
            } else {
                bFld = bFld;
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + l1 + s + i + i20 + i21 + i22 + i23 + i24;
    }

    public void mainTest(String[] strArr1) {
        int i25 = -43554, i26 = 52646, i27 = 201, i28 = 1, i29 = -6357, i30 = -8, i31 = 29079, i32 = -8, i33 = 0, i34 = 121, iArr2[][] = new int[N][N];
        float f2 = 1.483F;
        long l3 = 233001162L;
        FuzzerUtils.init(iArr2, -30417);
        vMeth(Test.instanceCount, Test.fFld, Test.instanceCount);
        for (i25 = 3; i25 < 110; ++i25) {
            Test.iArrFld[i25] -= i25;
            i26 += (2626 + (i25 * i25));
        }
        Test.dArrFld[(i25 >>> 1) % N] *= i25;
        iFld -= i25;
        for (i27 = 7; 249 > i27; i27++) {
            Test.iArrFld[i27 - 1] &= i26;
            i28 += (((i27 * i27) + Test.fFld) - iFld);
            i29 = 1;
            while (++i29 < 21) {
                iFld += (i29 ^ Test.instanceCount);
                for (f2 = 1; f2 > 1; --f2) {
                    Test.instanceCount += (long) (((f2 * i28) + i27) - l3);
                    Test.fArrFld[(int) (f2)] = i30;
                    i26 -= i25;
                    {
                        java.io.PrintStream ax$8 = System.out;
                        java.io.PrintStream ax$9 = System.err;
                        java.io.PrintStream ax$10 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$10);
                        System.setErr(ax$10);
                        {
                            boolean ax$12 = false;
                            for (int ax$11 = -4124; ax$11 < 3616; ax$11 += 8) {
                                if (!ax$12) {
                                    ax$12 = true;
                                    {
                                        System.setOut(ax$8);
                                        System.setErr(ax$9);
                                        try {
                                            i30 = (-232 % iFld);
                                            i30 = (-175 / iFld);
                                            i30 = (0 % i30);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        System.setOut(ax$10);
                                        System.setErr(ax$10);
                                    }
                                }
                            }
                        }
                        System.setOut(ax$8);
                        System.setErr(ax$9);
                    }
                    Test.fFld = i29;
                    Test.dFld *= i27;
                    lArrFld[i27 + 1] = 46741;
                    Test.iArrFld[i27 - 1] >>= i27;
                    Test.iArrFld = Test.iArrFld;
                }
                Test.instanceCount >>= iFld;
                i31 = 1;
                while (++i31 < 1) {
                    Test.fFld *= i25;
                }
                i30 = i26;
                i32 = 1;
                while (++i32 < 1) {
                    try {
                        Test.iArrFld[i27 - 1] = (i26 / -31598);
                        i30 = (i28 / 189);
                        i28 = (i27 / Test.iArrFld[i32 + 1]);
                    } catch (ArithmeticException a_e) {
                    }
                    i28 = -7;
                    switch((i29 % 2) + 45) {
                        case 45:
                            i28 += i32;
                            if (bFld)
                                continue;
                            break;
                        case 46:
                            switch((((9 >>> 1) % 9) * 5) + 33) {
                                case 73:
                                    switch(((i29 % 8) * 5) + 1) {
                                        case 20:
                                            if (bFld)
                                                continue;
                                            l3 += (-29376 + (i32 * i32));
                                            byFld1 -= (byte) -1886025648570899779L;
                                            i28 -= (int) Test.fFld;
                                            lArrFld[i32] = i31;
                                            i26 = i25;
                                            i26 &= -24411;
                                            Test.instanceCount <<= iFld;
                                            break;
                                        case 23:
                                            i28 += (int) l3;
                                            break;
                                        case 26:
                                            i28 += byFld1;
                                            Test.sFld += (short) i30;
                                            i26 &= i25;
                                            i30 |= Test.sFld;
                                            i28 += (((i32 * Test.instanceCount) + Test.instanceCount) - Test.sFld);
                                            iArr2 = iArr2;
                                            i28 *= (int) l3;
                                            l3 = iFld;
                                            Test.fFld -= f2;
                                            i26 = i29;
                                            break;
                                        case 19:
                                        case 8:
                                            Test.fFld += i29;
                                            i30 = (int) Test.instanceCount;
                                            i26 += i32;
                                            Test.iArrFld[i27] = (int) l3;
                                            Test.dFld = -9;
                                            break;
                                        case 39:
                                            Test.fFld -= i31;
                                            i28 = (int) Test.instanceCount;
                                            i33 = iFld;
                                            i28 = -234;
                                            lArrFld = lArrFld;
                                            break;
                                        case 31:
                                            try {
                                                i26 = (Test.iArrFld[i32] / -1201268939);
                                                i28 = (i25 / iArr2[i29][i29]);
                                                iFld = (-57966 / i25);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            i26 += (((i32 * i30) + i32) - i32);
                                            switch(((i28 >>> 1) % 2) + 34) {
                                                case 34:
                                                    i33 &= (int) l3;
                                                    iFld += i32;
                                                    iFld += i30;
                                                    i28 = iFld;
                                                    i30 <<= i29;
                                                    i33 = (int) 31896L;
                                                    switch(((-14 >>> 1) % 5) + 57) {
                                                        case 57:
                                                            Test.fFld *= Test.instanceCount;
                                                            i30 = (int) l3;
                                                            Test.fFld += ((long) i32 ^ (long) Test.fFld);
                                                            break;
                                                        case 58:
                                                            l3 = -86;
                                                            break;
                                                        case 59:
                                                            Test.iArrFld[i29] *= (int) Test.instanceCount;
                                                            break;
                                                        case 60:
                                                            Test.instanceCount = i27;
                                                        case 61:
                                                            iFld += (int) Test.fFld;
                                                    }
                                                case 35:
                                                    Test.dFld -= Test.instanceCount;
                                                    break;
                                            }
                                        case 4:
                                            i34 += (((i32 * i27) + f2) - i30);
                                            break;
                                    }
                                    break;
                                case 72:
                                    lArrFld[i29] = (long) f2;
                                    break;
                                case 49:
                                    sArrFld[i32 - 1] -= Test.sFld;
                                    break;
                                case 65:
                                    i33 >>= i27;
                                    break;
                                case 37:
                                    Test.byFld <<= byFld1;
                                    break;
                                case 75:
                                    Test.fFld -= 208L;
                                    break;
                                case 70:
                                    i33 = i28;
                                    break;
                                case 55:
                                    iArr2[i27][i32] = (int) l3;
                                    break;
                                case 57:
                                    i34 += (int) Test.instanceCount;
                                    break;
                            }
                    }
                }
            }
        }
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 f2 = " + i28 + "," + i29 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i30 l3 i31 = " + i30 + "," + l3 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.byFld Test.fFld bFld = " + Test.byFld + "," + Float.floatToIntBits(Test.fFld) + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("iFld byFld1 Test.bArrFld = " + iFld + "," + byFld1 + "," + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("sArrFld Test.iArrFld Test.dArrFld = " + FuzzerUtils.checkSum(sArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.fArrFld lArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$13) {
            try {
                float[] ax$14 = new float[16];
                for (int ax$15 = 0; ax$15 < 128; ax$15++) ax$14[ax$15] = Math.abs(ax$14[ax$15]);
            } catch (Throwable ax$16) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$13 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
