// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 3901935419526676968L;

    public static boolean bFld = true;

    public static volatile short sFld = 3531;

    public int iFld = 10;

    public static float fFld = 2.516F;

    public double dFld = 17.66235;

    public static volatile int iFld1 = 1;

    public static volatile byte byFld = -124;

    public static volatile byte[] byArrFld = new byte[N];

    public static int[] iArrFld = new int[N];

    public static volatile double[] dArrFld = new double[N];

    public static volatile boolean[][] bArrFld = new boolean[N][N];

    public long[][] lArrFld = new long[N][N];

    public float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte) -79);
        FuzzerUtils.init(Test.iArrFld, 46868);
        FuzzerUtils.init(Test.dArrFld, -94.125199);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;

    public static long fMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static float fMeth(int i1, long l) {
        i1 <<= Test.byArrFld[(-34675 >>> 1) % N];
        long meth_res = i1 + l;
        {
            java.io.PrintStream ax$0 = System.out;
            java.io.PrintStream ax$1 = System.err;
            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$2);
            System.setErr(ax$2);
            {
                boolean ax$4 = false;
                for (int ax$3 = -3208; ax$3 < 2129; ax$3 += 5) {
                    if (!ax$4) {
                        ax$4 = true;
                        {
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                            fMeth_check_sum += meth_res;
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                        }
                    }
                }
            }
            System.setOut(ax$0);
            System.setErr(ax$1);
        }
        return (float) meth_res;
    }

    public static void vMeth1(float f1, long l1, long l2) {
        int i7 = -237, i8 = -50235, i9 = -14, i10 = 8, i11 = 127, i12 = -112, i13 = -16, i14 = -47790, i15 = -64647, i16 = 240, i17 = -17990;
        double d = 0.66090, d1 = -52.54185;
        float[] fArr = new float[N];
        long[] lArr = new long[N];
        FuzzerUtils.init(fArr, -2.290F);
        FuzzerUtils.init(lArr, 37782L);
        for (i7 = 3; i7 < 197; ++i7) {
            i8 = (int) Test.instanceCount;
            i8 <<= i8;
        }
        for (byte by : Test.byArrFld) {
            l1 += i8;
            fArr[(41041 >>> 1) % N] = i8;
            for (i9 = 1; 2 > i9; i9++) {
                f1 = f1;
                i10 >>= i8;
                i11 = 1;
                while (++i11 < 2) {
                    Test.iArrFld[i11 + 1] = (int) Test.instanceCount;
                    Test.instanceCount = i11;
                    if (i9 != 0) {
                        vMeth1_check_sum += Float.floatToIntBits(f1) + l1 + l2 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + i13 + Double.doubleToLongBits(d1) + i14 + i15 + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    if (Test.bFld)
                        continue;
                    Test.dArrFld = FuzzerUtils.double1array(N, (double) 1.93989);
                    Test.dArrFld[i11 + 1] += l2;
                    i10 = (int) l2;
                    i8 &= i9;
                }
                i8 = (int) d;
            }
            for (i12 = 1; 2 > i12; ++i12) {
                f1 = i8;
                i8 &= i11;
            }
            Test.bFld = true;
            i8 = i11;
            for (d1 = 1; d1 < 2; d1++) {
                try {
                    i8 = (-49 % i14);
                    i8 = (i13 / 1);
                    i14 = (-1815480341 / i9);
                } catch (ArithmeticException a_e) {
                }
                Test.instanceCount >>= l2;
                Test.sFld -= (short) f1;
                i15 = 2;
                do {
                    i14 = i15;
                    l2 = i10;
                    Test.instanceCount = i7;
                    if (Test.bFld)
                        break;
                } while ((i15 -= 3) > 0);
                i13 = (int) l2;
                for (i16 = (int) (d1); i16 < 2; i16++) {
                    lArr[i16 + 1] = i15;
                    i10 -= (int) 281092345L;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + l1 + l2 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + i13 + Double.doubleToLongBits(d1) + i14 + i15 + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i3, int i4, float f) {
        int i5 = 1, i6 = 7623, i18 = 131, i19 = 13, i20 = -44126, i21 = -13, i22 = -10, i23 = 28426, i24 = 224, i25 = 38272, i26 = 13, iArr[][] = new int[N][N];
        long l3 = 7485299725126836446L;
        byte by1 = 113;
        FuzzerUtils.init(iArr, 11);
        for (i5 = 6; i5 < 205; i5 += 3) {
            vMeth1(f, Test.instanceCount, Test.instanceCount);
            for (i18 = 1; 8 > i18; i18++) {
                f %= -1017068569491477171L;
                for (i20 = 1; i20 < 2; i20++) {
                    Test.iArrFld[i20] = (int) 44.108978;
                    i4 |= (int) -2450917610362556484L;
                    Test.instanceCount += i20;
                    Test.iArrFld[i20] = i19;
                    Test.instanceCount += i18;
                    Test.instanceCount = i21;
                }
                Test.instanceCount += (4 + (i18 * i18));
                i4 = i20;
                i3 = i4;
            }
            for (l3 = 1; l3 < 8; ++l3) {
                i23 = 1;
                do {
                    iArr = iArr;
                    i19 += (i23 * i23);
                    i22 %= (int) (i6 | 1);
                    i4 *= i23;
                    i6 *= i18;
                    Test.instanceCount = -9274;
                } while (++i23 < 2);
                i24 = 1;
                {
                    java.io.PrintStream ax$5 = System.out;
                    java.io.PrintStream ax$6 = System.err;
                    java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$7);
                    System.setErr(ax$7);
                    {
                        boolean ax$9 = false;
                        for (int ax$8 = -2396; ax$8 < 5260; ax$8 += 9) {
                            if (!ax$9) {
                                ax$9 = true;
                                {
                                    System.setOut(ax$5);
                                    System.setErr(ax$6);
                                    do {
                                        i6 += i24;
                                        by1 = (byte) i5;
                                        i22 = i20;
                                        i6 &= 11;
                                    } while (++i24 < 2);
                                    System.setOut(ax$7);
                                    System.setErr(ax$7);
                                }
                            }
                        }
                    }
                    System.setOut(ax$5);
                    System.setErr(ax$6);
                }
                switch((int) ((l3 % 8) + 78)) {
                    case 78:
                        i3 ^= i22;
                        f += (((l3 * l3) + i6) - i21);
                        for (i25 = 1; i25 < 2; i25++) {
                            Test.instanceCount += (i25 * i25);
                            Test.bArrFld[i25][i5] = Test.bFld;
                            Test.instanceCount += (i25 * i25);
                            by1 += (byte) i25;
                            i22 += (i25 - Test.instanceCount);
                            i6 = Test.sFld;
                        }
                        break;
                    case 79:
                        i26 += (int) l3;
                    case 80:
                        f *= Test.instanceCount;
                        break;
                    case 81:
                        Test.instanceCount >>= i24;
                        break;
                    case 82:
                    case 83:
                        i19 = i3;
                        break;
                    case 84:
                        i21 = i3;
                        break;
                    case 85:
                        iArr[(int) (l3 + 1)] = iArr[i5 + 1];
                        break;
                }
            }
        }
        long meth_res = i3 + i4 + Float.floatToIntBits(f) + i5 + i6 + i18 + i19 + i20 + i21 + l3 + i22 + i23 + i24 + by1 + i25 + i26 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth() {
        int i2 = 109, i27 = -3, i28 = 111, i29 = 7, i30 = -46030, i31 = 9, i32 = -7, i33 = 12139;
        float f2 = 60.1006F;
        byte by2 = -108;
        double d2 = 0.104347;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(lArr1, 1L);
        Test.instanceCount = (long) ((fMeth(i2, Test.instanceCount) + Math.max(i2, i2)) - (-(i2 * i2)));
        Test.instanceCount += (((--i2) + iMeth(i2, i2, f2)) * i2);
        i2 = (int) Test.instanceCount;
        if (Test.bFld) {
            Test.instanceCount = i2;
            i2 = i2;
        } else if (true) {
            i2 += i2;
            for (i27 = 7; i27 < 254; i27++) {
                Test.instanceCount = 0;
                lArr1[i27] += by2;
                i2 += (int) d2;
                f2 = i27;
                if (Test.bFld)
                    continue;
                for (i29 = 1; i29 < 3; i29++) {
                    switch(((i27 % 2) * 5) + 80) {
                        case 81:
                            f2 -= i28;
                            Test.iArrFld[(-48053 >>> 1) % N] = (int) Test.instanceCount;
                            for (i31 = i29; i31 < 2; ++i31) {
                                i30 = (int) d2;
                                switch((i31 % 8) + 85) {
                                    case 85:
                                        Test.instanceCount += (53400 + (i31 * i31));
                                        Test.instanceCount += (((i31 * i2) + Test.instanceCount) - Test.instanceCount);
                                        break;
                                    case 86:
                                        d2 = 6;
                                        i32 = Test.sFld;
                                        Test.instanceCount += (12 + (i31 * i31));
                                        if (i31 != 0) {
                                            vMeth_check_sum += i2 + Float.floatToIntBits(f2) + i27 + i28 + by2 + Double.doubleToLongBits(d2) + i29 + i30 + i31 + i32 + i33 + FuzzerUtils.checkSum(lArr1);
                                            return;
                                        }
                                        d2 *= i29;
                                        i33 |= -10825;
                                        break;
                                    case 87:
                                        Test.instanceCount ^= i2;
                                        try {
                                            i28 = (i30 / 11920);
                                            Test.iArrFld[i31] = (i31 % -909918910);
                                            Test.iArrFld[i29 + 1] = (236 % Test.iArrFld[i31]);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        Test.instanceCount += (i31 + i31);
                                        i2 += (i31 * i31);
                                        f2 = i2;
                                        i30 >>>= i29;
                                        i2 += (((i31 * i2) + f2) - by2);
                                        Test.instanceCount += i28;
                                        break;
                                    case 88:
                                        i32 >>= i2;
                                        break;
                                    case 89:
                                        Test.instanceCount += i30;
                                        break;
                                    case 90:
                                        i2 <<= by2;
                                    case 91:
                                        try {
                                            i28 = (i27 % i28);
                                            i32 = (i31 % i27);
                                            Test.iArrFld[i27] = (i30 / -1253837433);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        break;
                                    case 92:
                                        i2 += i2;
                                    default:
                                        i2 = (int) -1.377F;
                                }
                            }
                            break;
                        case 82:
                            i33 -= i31;
                            break;
                    }
                    {
                        java.io.PrintStream ax$15 = System.out;
                        java.io.PrintStream ax$16 = System.err;
                        java.io.PrintStream ax$17 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$17);
                        System.setErr(ax$17);
                        try {
                            for (int ax$13 = -1106; ax$13 < 6811; ax$13 += 1) {
                                try {
                                    byte[] ax$11 = new byte[] { 0, -1, -2, -3, -4 };
                                    for (int ax$10 = 0; ax$10 < 256; ax$10++) {
                                        ax$11[ax$10] = (byte) ax$10;
                                    }
                                } catch (Throwable ax$12) {
                                } finally {
                                }
                            }
                        } catch (Throwable ax$14) {
                        }
                        System.setOut(ax$15);
                        System.setErr(ax$16);
                    }
                }
            }
        } else {
            Test.iArrFld[(i29 >>> 1) % N] >>= i2;
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f2) + i27 + i28 + by2 + Double.doubleToLongBits(d2) + i29 + i30 + i31 + i32 + i33 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {
        if (ax$25) {
            long ax$27 = vMeth1_check_sum;
            int ax$28 = iFld1;
            try {
                int ax$26 = iFld1 % 4;
                vMeth1_check_sum += (ax$26 > 1.0f) ? 1L : 2L;
            } catch (Throwable ax$29) {
            } finally {
                vMeth1_check_sum = ax$27;
                iFld1 = ax$28;
            }
            return;
        }
        int i = 96, i34 = 6, i35 = -5839, i36 = -1, i37 = -1, i38 = 48235, i39 = -51179, i40 = -5, iArr1[][] = new int[N][N];
        byte by3 = -23;
        short[][] sArr = new short[N][N];
        FuzzerUtils.init(iArr1, 94);
        FuzzerUtils.init(sArr, (short) 630);
        i = 1;
        do {
            vMeth();
            iFld >>= 4269;
            by3 = (byte) i;
            iFld = (int) -5L;
            i34 = 1;
            while (++i34 < 63) {
                lArrFld[i] = lArrFld[i34 + 1];
                Test.fFld = Test.instanceCount;
                for (i35 = 1; i35 < 1; i35++) {
                    i36 = (int) Test.instanceCount;
                    by3 /= (byte) ((long) (Test.fFld) | 1);
                    if (Test.bFld)
                        break;
                }
                for (i37 = 1; i37 < 1; ++i37) {
                    Test.byArrFld[i34 + 1] >>= (byte) i34;
                    Test.byArrFld[i + 1] = (byte) Test.instanceCount;
                }
                dFld *= Test.sFld;
                for (i39 = 1; i39 > 1; i39 -= 3) {
                    Test.instanceCount &= 31098;
                    i36 += i39;
                    switch((i34 % 2) + 5) {
                        case 5:
                            Test.instanceCount += iFld;
                            fArrFld = fArrFld;
                            i38 = iFld;
                            i36 *= i38;
                            switch((i % 7) + 30) {
                                case 30:
                                    iFld += (((i39 * Test.fFld) + by3) - i40);
                                    break;
                                case 31:
                                    i40 += i39;
                                    i36 += Test.iFld1;
                                    i36 -= i;
                                case 32:
                                    Test.iFld1 *= i40;
                                    Test.iFld1 -= (int) Test.instanceCount;
                                    Test.instanceCount *= i;
                                    break;
                                case 33:
                                    fArrFld = fArrFld;
                                    Test.iArrFld[i34 - 1] = 123;
                                    Test.instanceCount >>= i38;
                                    Test.fFld -= Test.iFld1;
                                    Test.iArrFld[i34] = by3;
                                    i36 += (((i39 * Test.instanceCount) + i37) - iFld);
                                    switch(((i38 >>> 1) % 2) + 73) {
                                        case 73:
                                            iFld += (int) Test.instanceCount;
                                            switch(((i36 >>> 1) % 1) + 107) {
                                                case 107:
                                                    Test.instanceCount = (long) Test.fFld;
                                                    Test.iArrFld[i39 - 1] *= Test.iFld1;
                                                    try {
                                                        i36 = (29202 % i36);
                                                        Test.iArrFld[i34 - 1] = (i37 % Test.iArrFld[i]);
                                                        i38 = (Test.iArrFld[i39] / iFld);
                                                    } catch (ArithmeticException a_e) {
                                                    }
                                                    switch(((iFld >>> 1) % 1) + 119) {
                                                        case 119:
                                                            i36 += (int) -3009867866575233063L;
                                                            break;
                                                        default:
                                                            switch((i34 % 3) + 84) {
                                                                case 84:
                                                                    i40 -= i35;
                                                                    Test.iArrFld[i34 - 1] -= i38;
                                                                    Test.instanceCount -= (long) Test.fFld;
                                                                    iFld = (int) Test.instanceCount;
                                                                    i38 += (28493 + (i39 * i39));
                                                                    Test.iFld1 += -27231;
                                                                    Test.fFld += i;
                                                                    switch((i % 2) + 63) {
                                                                        case 63:
                                                                            i40 += Test.iFld1;
                                                                            lArrFld[i][i39] >>>= i37;
                                                                            if (Test.bFld) {
                                                                                i40 = i39;
                                                                                iFld = i;
                                                                            } else if (false) {
                                                                                Test.dArrFld = FuzzerUtils.double1array(N, (double) -2.156);
                                                                                Test.instanceCount += (-45410 + (i39 * i39));
                                                                                iArr1 = FuzzerUtils.int2array(N, (int) -40946);
                                                                                i40 >>= Test.sFld;
                                                                                switch((i39 % 2) + 121) {
                                                                                    case 121:
                                                                                        i38 = by3;
                                                                                        iFld += (i39 ^ i36);
                                                                                        Test.instanceCount >>>= i37;
                                                                                        if (Test.bFld)
                                                                                            continue;
                                                                                        i40 -= i34;
                                                                                        i40 *= (int) Test.instanceCount;
                                                                                        break;
                                                                                    case 122:
                                                                                        switch(((i39 >>> 1) % 2) + 56) {
                                                                                            case 56:
                                                                                                Test.instanceCount += i39;
                                                                                                i38 += 48230;
                                                                                                dFld += i36;
                                                                                            case 57:
                                                                                                iFld += (((i39 * i38) + i40) - Test.fFld);
                                                                                                break;
                                                                                            default:
                                                                                                sArr[i34][i] = Test.sFld;
                                                                                        }
                                                                                        break;
                                                                                    default:
                                                                                        i38 -= (int) Test.instanceCount;
                                                                                }
                                                                            } else if (true) {
                                                                                dFld += by3;
                                                                            }
                                                                            break;
                                                                        case 64:
                                                                            Test.instanceCount -= by3;
                                                                            break;
                                                                    }
                                                                    break;
                                                                case 85:
                                                                case 86:
                                                                    iFld += (i39 * i39);
                                                                    break;
                                                                default:
                                                                    Test.fFld = 20;
                                                            }
                                                    }
                                                default:
                                                    Test.instanceCount -= Test.instanceCount;
                                            }
                                            break;
                                        case 74:
                                            lArrFld[i][i34] |= i37;
                                            break;
                                    }
                                case 34:
                                case 35:
                                    i36 = (int) dFld;
                                    break;
                                case 36:
                                    Test.instanceCount += (((i39 * i34) + i36) - i35);
                                    break;
                                default:
                                    Test.instanceCount = i;
                            }
                            break;
                        case 6:
                            Test.byFld = (byte) i35;
                            break;
                    }
                }
            }
        } while ((i += 3) < 242);
        FuzzerUtils.out.println("i by3 i34 = " + i + "," + by3 + "," + i34);
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("i38 i39 i40 = " + i38 + "," + i39 + "," + i40);
        FuzzerUtils.out.println("iArr1 sArr = " + FuzzerUtils.checkSum(iArr1) + "," + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.sFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0) + "," + Test.sFld);
        FuzzerUtils.out.println("iFld Test.fFld dFld = " + iFld + "," + Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iFld1 Test.byFld Test.byArrFld = " + Test.iFld1 + "," + Test.byFld + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("Test.iArrFld Test.dArrFld Test.bArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("lArrFld fArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            {
                java.io.PrintStream ax$18 = System.out;
                java.io.PrintStream ax$19 = System.err;
                java.io.PrintStream ax$20 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$20);
                System.setErr(ax$20);
                {
                    boolean ax$24 = false;
                    for (int ax$23 = -1061; ax$23 < 8889; ax$23 += 6) {
                        if (!ax$24) {
                            ax$24 = true;
                            {
                                System.setOut(ax$18);
                                System.setErr(ax$19);
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                                System.setOut(ax$20);
                                System.setErr(ax$20);
                            }
                        }
                        boolean ax$21 = bFld;
                        try {
                            bFld = true;
                        } catch (Throwable ax$22) {
                        } finally {
                            bFld = ax$21;
                        }
                    }
                }
                System.setOut(ax$18);
                System.setErr(ax$19);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$25 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  fMeth ->  fMeth vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
