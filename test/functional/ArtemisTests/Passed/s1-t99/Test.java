// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -1255344252567898771L;

    public static double dFld = 2.46086;

    public static byte byFld = 100;

    public static int iFld = -54;

    public static boolean bFld = false;

    public short sFld = 3049;

    public static int iFld1 = -57176;

    public static long[] lArrFld = new long[N];

    public static float[][] fArrFld = new float[N][N];

    public static int[] iArrFld = new int[N];

    public static int[][] iArrFld1 = new int[N][N];

    public static int[] iArrFld2 = new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 0L);
        FuzzerUtils.init(Test.fArrFld, 2.9F);
        FuzzerUtils.init(Test.iArrFld, 250);
        FuzzerUtils.init(Test.iArrFld1, 108);
        FuzzerUtils.init(Test.iArrFld2, 0);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth() {
        int i5 = -162, i6 = 5, i7 = -2896, i8 = 4, i9 = -2, i10 = 22056, i11 = -9, i12 = -39, i13 = 1109, i14 = -6, i15 = 24970, i16 = 10699, iArr[] = new int[N];
        float f1 = -2.908F;
        long l1 = -2429063757330771485L, lArr[] = new long[N];
        boolean b = false;
        double[] dArr1 = new double[N];
        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(lArr, 55776L);
        FuzzerUtils.init(dArr1, 0.82706);
        iArr[(156 >>> 1) % N] -= i5;
        f1 *= 9;
        Test.instanceCount = i5;
        iArr[(i5 >>> 1) % N] *= i5;
        for (i6 = 5; i6 < 225; ++i6) {
            i5 = -109;
            for (l1 = 1; l1 < 3; ++l1) {
                i7 *= i8;
                for (i9 = i6; 2 > i9; i9++) {
                    i5 = i9;
                    i10 += i9;
                    i7 = i8;
                    i7 <<= i8;
                    try {
                        i10 = (-1026 / i7);
                        i5 = (i7 % i7);
                        iArr[i6] = (i10 / i8);
                    } catch (ArithmeticException a_e) {
                    }
                    lArr[i6 - 1] |= i9;
                    i5 += (int) 9L;
                    i5 = i7;
                    i8 = i6;
                    iArr[i9 + 1] = (int) l1;
                    Test.instanceCount = (long) Test.dFld;
                    i10 += (((i9 * i8) + Test.instanceCount) - i5);
                    f1 += (((i9 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                    if (i8 != 0) {
                    }
                }
                i8 += (int) (((l1 * l1) + i8) - i5);
            }
            switch(((i6 % 1) * 5) + 43) {
                case 45:
                    i10 = (int) f1;
            }
            dArr1[i6 - 1] = i11;
            switch(((i6 % 4) * 5) + 15) {
                case 29:
                    i5 += i8;
                    for (i12 = 1; i12 < 3; ++i12) {
                        for (i14 = 1; i14 < 2; ++i14) {
                            Test.instanceCount = Test.instanceCount;
                            b = b;
                            i16 = i12;
                            i11 >>= 8595;
                        }
                        dArr1[i12] -= l1;
                        Test.byFld ^= (byte) Test.instanceCount;
                    }
                case 19:
                    f1 = Test.byFld;
                    break;
                case 33:
                    i7 = i15;
                case 32:
                    i5 = (int) f1;
                    break;
            }
        }
        long meth_res = i5 + Float.floatToIntBits(f1) + i6 + i7 + l1 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + i16 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(short s, int i3, int i4) {
        if (ax$0) {
            try {
                int ax$4 = 0xBC00009A;
                int ax$3 = 0x100;
                if (ax$4 > ax$3) {
                }
            } catch (Throwable ax$5) {
            } finally {
            }
            return;
        }
        int i17 = 11, i18 = -54820, i19 = 31, i20 = -10, i21 = -40386, i22 = -87, i23 = -224, iArr1[] = new int[N], iArr2[][] = new int[N][N];
        float f2 = 8.762F;
        boolean b1 = false, bArr[] = new boolean[N];
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr1, -12);
        FuzzerUtils.init(lArr1, 9L);
        FuzzerUtils.init(iArr2, -54580);
        FuzzerUtils.init(bArr, true);
        i4 = iMeth();
        i17 = 1;
        do {
            i4 = i4;
            iArr1[i17 - 1] = i4;
            Test.iFld = 223;
            for (i18 = 1; i18 < 2; i18++) {
                Test.iFld = i20;
                try {
                    i20 = (-1369737878 % i4);
                    i4 = (Test.iFld / 19663);
                    i3 = (iArr1[i17 + 1] % 3665);
                } catch (ArithmeticException a_e) {
                }
                Test.instanceCount += (long) 88.120224;
                f2 = Test.instanceCount;
                lArr1[i17 + 1] *= 38006;
                for (i21 = 1; i21 < 2; ++i21) {
                    iArr1 = iArr1;
                    i22 += i17;
                    if (b1)
                        break;
                    Test.instanceCount >>= Test.instanceCount;
                    if (b1) {
                        i4 -= (int) 7L;
                        s += (short) (i21 * i21);
                        lArr1[i21 - 1] *= i19;
                        i19 ^= (int) Test.instanceCount;
                        try {
                            i20 = (i22 % i21);
                            i20 = (-77 % i17);
                            i22 = (206826957 % i18);
                        } catch (ArithmeticException a_e) {
                        }
                    } else if (b1) {
                        i3 -= (int) 3.93568;
                        i20 = (int) 123.4122;
                        iArr2 = iArr2;
                        Test.iFld >>= 27;
                        Test.iFld += i21;
                        Test.dFld *= i21;
                        i23 >>= i17;
                    } else {
                        Test.instanceCount = Test.instanceCount;
                        i20 += (i21 ^ i21);
                        Test.byFld = (byte) i23;
                        bArr[i17 - 1] = b1;
                        i23 = (int) Test.instanceCount;
                    }
                    Test.dFld = i19;
                    try {
                        i19 = (iArr1[i21 + 1] / 22553);
                        i23 = (iArr1[i17] % i3);
                        i3 = (-51 % i19);
                    } catch (ArithmeticException a_e) {
                    }
                    if (b1)
                        continue;
                }
            }
        } while (++i17 < 251);
        vMeth1_check_sum += s + i3 + i4 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f2) + i21 + i22 + (b1 ? 1 : 0) + i23 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(long l, float f, int i2) {
        short s1 = 4633, s2 = -29384, sArr[] = new short[N];
        int i24 = -248, i25 = 54163, i26 = 46739, i27 = 17871, i28 = 72, i29 = 9, i30 = 7, i31 = 128, i32 = 12718, i33 = -85;
        FuzzerUtils.init(sArr, (short) -5618);
        {
            java.io.PrintStream ax$8 = System.out;
            java.io.PrintStream ax$9 = System.err;
            java.io.PrintStream ax$10 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$10);
            System.setErr(ax$10);
            try {
                ax$0 = true;
                for (int ax$6 = 0; ax$6 < 6656; ax$6 += 1) vMeth1((short) -1476350063, 1406933698, 1185892552);
            } catch (java.lang.Throwable ax$7) {
            } finally {
                ax$0 = false;
            }
            System.setOut(ax$8);
            System.setErr(ax$9);
        }
        vMeth1(s1, Test.iFld, -12);
        Test.dFld = i24;
        Test.instanceCount = i2;
        s2 >>= (short) l;
        i24 >>= i2;
        for (i25 = 11; i25 < 228; ++i25) {
            try {
                Test.iFld = (i26 % i26);
                i26 = (i2 / 30291);
                Test.iFld = (i24 % i24);
            } catch (ArithmeticException a_e) {
            }
            if (Test.iFld != 0) {
                vMeth_check_sum += l + Float.floatToIntBits(f) + i2 + s1 + i24 + s2 + i25 + i26 + i27 + i28 + i29 + i30 + i31 + i32 + i33 + FuzzerUtils.checkSum(sArr);
                return;
            }
            i24 += (int) Test.dFld;
        }
        for (long l2 : Test.lArrFld) {
            for (i27 = 1; i27 < 2; i27++) {
                i26 += (-12 + (i27 * i27));
                i26 <<= i25;
                i28 += (i27 | i26);
            }
            l2 = 14;
        }
        Test.fArrFld[(i2 >>> 1) % N][(i25 >>> 1) % N] -= l;
        Test.bFld = true;
        l += (long) f;
        i29 = 1;
        do {
            for (i30 = i29; i30 < 6; ++i30) {
                Test.fArrFld[i30 + 1][i29 + 1] += f;
                Test.iFld += (i30 + i25);
                for (i32 = 1; i32 < 1; ++i32) {
                    i33 = (int) l;
                    Test.iArrFld[i30] -= i26;
                    Test.iArrFld1 = Test.iArrFld1;
                    i28 = i29;
                    l = 143;
                    i28 += i32;
                    switch((i30 % 2) + 24) {
                        case 24:
                            i31 += i25;
                            sArr[i30] >>= (short) i2;
                            l = i29;
                            i33 += s2;
                            i2 = i24;
                            Test.byFld = (byte) i30;
                            break;
                        case 25:
                            i31 = (int) Test.instanceCount;
                            break;
                    }
                }
            }
        } while (++i29 < 87);
        vMeth_check_sum += l + Float.floatToIntBits(f) + i2 + s1 + i24 + s2 + i25 + i26 + i27 + i28 + i29 + i30 + i31 + i32 + i33 + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {
        int i = 31880, i1 = -79, i34 = 12, i35 = 12, i36 = 5, i37 = 19, i38 = -250, i39 = -7, i40 = -220, i41 = -227, i42 = -35968;
        float f3 = 76.807F;
        long l3 = 5835L, l4 = 5348L, l5 = -5L;
        boolean b2 = true, bArr1[][] = new boolean[N][N];
        double[] dArr = new double[N];
        byte[] byArr = new byte[N];
        short[] sArr1 = new short[N];
        FuzzerUtils.init(dArr, 2.128494);
        FuzzerUtils.init(byArr, (byte) -40);
        FuzzerUtils.init(sArr1, (short) -12805);
        FuzzerUtils.init(bArr1, false);
        i = 1;
        while (++i < 81) {
            dArr = (dArr = (dArr = dArr));
            i1 = (int) -2.83814;
            vMeth(-11L, f3, i1);
            sFld += (short) Test.iFld;
            Test.iFld = (int) Test.instanceCount;
        }
        Test.iArrFld[(-79 >>> 1) % N] = (int) Test.instanceCount;
        for (i34 = 4; 119 > i34; i34++) {
            for (i36 = 2; i36 < 44; i36++) {
                byArr = FuzzerUtils.byte1array(N, (byte) 55);
                Test.byFld = (byte) Test.instanceCount;
                for (i38 = 1; 2 > i38; i38++) {
                    i1 = i38;
                    i35 = i;
                    i39 &= (int) Test.instanceCount;
                    i39 *= (int) l3;
                    f3 += -10878;
                    i37 = (int) -14L;
                    Test.iArrFld[i38] = 2;
                    i39 += 31434;
                    Test.dFld += i1;
                    i37 <<= (int) l4;
                }
                for (i40 = 1; i40 < 2; i40++) {
                    l4 -= Test.iFld;
                    i39 &= (int) Test.instanceCount;
                    Test.bFld = Test.bFld;
                    Test.lArrFld[i34] -= Test.instanceCount;
                    Test.instanceCount = i39;
                    l3 += l3;
                    Test.instanceCount = i37;
                    Test.fArrFld[i36 - 1][i34] /= (i37 | 1);
                    sArr1[i36] = (short) i39;
                }
                i41 += i40;
                Test.iArrFld1[i34 + 1][i36 - 1] += i38;
                switch(((Test.iFld >>> 1) % 7) + 62) {
                    case 62:
                        try {
                            i37 = (-50447 / i34);
                            i39 = (i36 / i41);
                            Test.iArrFld[i34 - 1] = (i39 / i36);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.iFld = (int) f3;
                        i42 = 1;
                        do {
                            f3 += (i42 * i1);
                            i41 += i39;
                            if (b2) {
                                l4 += i38;
                                i37 >>= i41;
                                Test.iArrFld2[i36 - 1] -= i42;
                                f3 *= Test.byFld;
                                Test.iArrFld[i36 + 1] -= Test.byFld;
                                Test.instanceCount <<= l3;
                                l5 += -233;
                                try {
                                    i1 = (i1 / -57434);
                                    Test.iArrFld1[i36 - 1][i42 + 1] = (29460 % i35);
                                    i37 = (50005 % i39);
                                } catch (ArithmeticException a_e) {
                                }
                                l5 += (((i42 * i35) + Test.byFld) - Test.instanceCount);
                                Test.iFld1 += (((i42 * Test.instanceCount) + sFld) - i);
                                switch((i36 % 10) + 22) {
                                    case 22:
                                        l3 *= i35;
                                        Test.byFld = (byte) -6086;
                                        i1 += 62609;
                                        if (Test.bFld)
                                            continue;
                                        dArr[i42 - 1] = Test.dFld;
                                        l4 >>= i41;
                                        Test.iArrFld2[i36] -= i;
                                        f3 += (((i42 * i35) + Test.byFld) - i39);
                                        l4 >>= i35;
                                        break;
                                    case 23:
                                        i35 >>= (int) 148L;
                                        Test.instanceCount = Test.iFld1;
                                        bArr1[i42 - 1][i36 + 1] = Test.bFld;
                                        l5 >>= 10521L;
                                        i1 += (-11 + (i42 * i42));
                                        i35 |= 4621;
                                    case 24:
                                        Test.dFld += i37;
                                        i37 = 46615;
                                        sFld += (short) (((i42 * i1) + l5) - l5);
                                        Test.iFld += (((i42 * i41) + f3) - Test.instanceCount);
                                        i1 += i42;
                                        i37 -= i36;
                                        i41 <<= i40;
                                        l4 <<= -67;
                                        break;
                                    case 25:
                                        Test.iArrFld2[i36 + 1] += i40;
                                        break;
                                    case 26:
                                        Test.iFld1 += i42;
                                        break;
                                    case 27:
                                    case 28:
                                        i35 += (((i42 * Test.byFld) + sFld) - i1);
                                        break;
                                    case 29:
                                        i35 = (int) f3;
                                        break;
                                    case 30:
                                        i39 |= i41;
                                    case 31:
                                        Test.instanceCount += l4;
                                }
                            }
                        } while (++i42 < 2);
                        break;
                    case 63:
                        f3 += l5;
                        break;
                    case 64:
                        i41 *= (int) l3;
                    case 65:
                        f3 += (i36 - i35);
                        break;
                    case 66:
                        i1 += (i36 * i36);
                    case 67:
                        Test.byFld -= (byte) 61427L;
                        break;
                    case 68:
                        Test.iFld1 |= i41;
                        break;
                    default:
                        try {
                            i41 = (i38 / Test.iFld1);
                            i39 = (Test.iArrFld1[i36][i34] % Test.iArrFld[i34 - 1]);
                            Test.iFld1 = (i1 / i34);
                        } catch (ArithmeticException a_e) {
                        }
                }
            }
        }
        FuzzerUtils.out.println("i i1 f3 = " + i + "," + i1 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 i38 i39 = " + i37 + "," + i38 + "," + i39);
        FuzzerUtils.out.println("l3 l4 i40 = " + l3 + "," + l4 + "," + i40);
        FuzzerUtils.out.println("i41 i42 l5 = " + i41 + "," + i42 + "," + l5);
        FuzzerUtils.out.println("b2 dArr byArr = " + (b2 ? 1 : 0) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("sArr1 bArr1 = " + FuzzerUtils.checkSum(sArr1) + "," + FuzzerUtils.checkSum(bArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.byFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.iFld Test.bFld sFld = " + Test.iFld + "," + (Test.bFld ? 1 : 0) + "," + sFld);
        FuzzerUtils.out.println("Test.iFld1 Test.lArrFld Test.fArrFld = " + Test.iFld1 + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld Test.iArrFld1 Test.iArrFld2 = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld1) + "," + FuzzerUtils.checkSum(Test.iArrFld2));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
