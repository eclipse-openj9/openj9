// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.Random;
import java.util.SortedSet;
import java.util.TreeSet;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 24051L;

    public byte byFld = 42;

    public static double dFld = 41.104930;

    public static boolean bFld = true;

    public static int iFld = 183;

    public float fFld = 120.14F;

    public static double[] dArrFld = new double[N];

    public static int[] iArrFld = new int[N];

    public static long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.71753);
        FuzzerUtils.init(Test.iArrFld, -96);
        FuzzerUtils.init(Test.lArrFld, 54600L);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l) {
        if (ax$8) {
            try {
                long[] ax$24 = new long[10];
                long[] ax$31 = new long[10];
                boolean[] ax$27 = { true, false, false, false, false, false, false };
                int ax$25 = 9039;
                java.util.Random ax$26 = new Random(69);
                for (int ax$28 = 0; ax$28 < ax$25; ax$28++) {
                    long ax$30 = ax$26.nextLong();
                    for (int ax$29 = 0; ax$29 < 64; ax$29++) {
                        ax$27[ax$28 * 64 + ax$29] = (ax$30 & (1L << ax$29)) != 0;
                    }
                    ax$31[ax$28] = 0;
                    ax$24[ax$28] = ax$30;
                }
            } catch (Throwable ax$32) {
            } finally {
            }
            return;
        }
        int i5 = 36699, i6 = 31575, i7 = 8, i8 = 195, i9 = -8, i10 = 12, i11 = 13363, i12 = 55428, i13 = 11, iArr1[] = new int[N];
        double d = 1.112900;
        boolean b = false;
        float f1 = -31.480F, fArr[] = new float[N];
        short s1 = 6972;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, -1009491588L);
        FuzzerUtils.init(iArr1, 2);
        FuzzerUtils.init(fArr, 124.51F);
        for (i5 = 4; 139 > i5; ++i5) {
            i6 *= (int) d;
            for (i7 = 1; 4 > i7; ++i7) {
                if (b)
                    break;
                l = i5;
                i9 = 1;
                while (++i9 < 2) {
                    iArr1[i9 - 1] *= i6;
                    l = 0;
                    i8 = 226;
                }
                i8 >>= (int) l;
                i6 = i7;
                if (b)
                    break;
                try {
                    i6 = (-541147918 % i5);
                    i8 = (iArr1[i5 - 1] % 134);
                    i6 = (i5 / i6);
                } catch (ArithmeticException a_e) {
                }
                i6 -= i8;
                Test.instanceCount = 115;
            }
            l += (i5 * i5);
            i8 += (((i5 * Test.instanceCount) + f1) - i7);
            fArr[i5 + 1] = -12;
            for (i10 = 1; 4 > i10; i10++) {
                for (i12 = 2; i12 > 1; --i12) {
                    if (b) {
                        d *= i9;
                        l += i9;
                        i13 += i10;
                        i11 += (i12 + i8);
                        f1 += ((long) i12 ^ (long) Test.instanceCount);
                        i13 += (157 + (i12 * i12));
                    }
                    s1 = (short) i9;
                    if (b)
                        break;
                    l = i7;
                    i13 &= (int) -3828487689L;
                    if (i6 != 0) {
                        vMeth1_check_sum += l + i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + (b ? 1 : 0) + i9 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + s1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    b = false;
                    if (i11 != 0) {
                        vMeth1_check_sum += l + i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + (b ? 1 : 0) + i9 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + s1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    f1 *= f1;
                    i6 += i12;
                    iArr1[i12] *= i9;
                }
            }
        }
        vMeth1_check_sum += l + i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + (b ? 1 : 0) + i9 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + s1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(byte by, int i3, int i4) {
        short s = -28474;
        float f2 = 84.253F;
        int i14 = 146, i15 = -58, i16 = -10, i17 = 13, i18 = 30, i19 = -51404;
        s -= (short) (i3--);
        {
            java.io.PrintStream ax$35 = System.out;
            java.io.PrintStream ax$36 = System.err;
            java.io.PrintStream ax$37 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$37);
            System.setErr(ax$37);
            try {
                ax$8 = true;
                for (int ax$33 = 0; ax$33 < 6975; ax$33 += 1) vMeth1(3295773184782306772L);
            } catch (java.lang.Throwable ax$34) {
            } finally {
                ax$8 = false;
            }
            System.setOut(ax$35);
            System.setErr(ax$36);
        }
        vMeth1(Test.instanceCount);
        i3 = i3;
        f2 += -1087;
        i3 += i4;
        Test.instanceCount -= Test.instanceCount;
        i3 |= i3;
        Test.iArrFld[(i4 >>> 1) % N] *= i4;
        i4 *= 69;
        switch((((i4 >>> 1) % 1) * 5) + 60) {
            case 63:
                i3 = i3;
                i4 -= i3;
                i4 *= (int) -208L;
                i3 = -100;
                for (i14 = 101; 1 < i14; i14 -= 2) {
                    for (i16 = 1; i16 < 11; i16++) {
                        for (i18 = 1; i18 < 2; ++i18) {
                            Test.iArrFld[i18 + 1] -= i16;
                            f2 = (float) Test.dFld;
                            Test.iArrFld[i16] = (int) 96L;
                            try {
                                i15 = (-1638179457 / i4);
                                i17 = (121 / i4);
                                i15 = (i18 % i3);
                            } catch (ArithmeticException a_e) {
                            }
                            switch((i18 % 8) + 70) {
                                case 70:
                                    Test.instanceCount = i15;
                                    i19 += (((i18 * i4) + i19) - f2);
                                    f2 = (float) 1.76071;
                                    Test.instanceCount += (i18 * i18);
                                    i15 = (int) f2;
                                    break;
                                case 71:
                                    i15 = i14;
                                    i19 += (i18 + by);
                                    Test.bFld = Test.bFld;
                                    Test.iArrFld[i16 - 1] *= i4;
                                    i3 = i19;
                                    i3 = i16;
                                    i4 = (int) Test.instanceCount;
                                    i15 *= (int) -2L;
                                    i4 += (i18 - i19);
                                    break;
                                case 72:
                                    Test.iArrFld[i18] |= -19290;
                                case 73:
                                    i19 += (i18 ^ i18);
                                case 74:
                                    i19 = (int) Test.instanceCount;
                                    break;
                                case 75:
                                    i17 = (int) 1.123476;
                                    break;
                                case 76:
                                    Test.bFld = Test.bFld;
                                    break;
                                case 77:
                                    if (Test.bFld)
                                        continue;
                            }
                        }
                    }
                }
                break;
            default:
                i19 <<= 50975;
        }
        long meth_res = by + i3 + i4 + s + Float.floatToIntBits(f2) + i14 + i15 + i16 + i17 + i18 + i19;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(float f) {
        byte by1 = 21;
        long l2 = 64L, l3 = 26L;
        int i20 = -23322, i21 = -9, i22 = 178, i23 = 32644;
        float[] fArr1 = new float[N];
        FuzzerUtils.init(fArr1, -44.176F);
        Test.instanceCount = iMeth(by1, 45275, Test.iFld);
        Test.lArrFld[(Test.iFld >>> 1) % N] = -48;
        Test.iArrFld[(Test.iFld >>> 1) % N] |= Test.iFld;
        Test.iFld = by1;
        Test.dArrFld[(-3 >>> 1) % N] -= Test.iFld;
        l2 = 1;
        while (++l2 < 145) {
            Test.dFld = Test.iFld;
            for (i20 = 1; i20 < 4; i20++) {
                Test.iFld += (int) Test.instanceCount;
                Test.instanceCount = i20;
                i22 = 1;
                while (++i22 < 2) {
                    i21 >>= (int) l2;
                    Test.dFld = l2;
                }
                for (l3 = 2; 1 < l3; l3--) {
                    fArr1[(i20 >>> 1) % N] += Test.iFld;
                    if (i22 != 0) {
                        vMeth_check_sum += Float.floatToIntBits(f) + by1 + l2 + i20 + i21 + i22 + l3 + i23 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                        return;
                    }
                    if (Test.bFld) {
                        switch(((i20 % 9) * 5) + 69) {
                            case 95:
                                if (Test.bFld)
                                    continue;
                                i21 = 5924;
                                i23 *= (int) Test.instanceCount;
                                Test.iFld += (int) (((l3 * f) + i20) - i23);
                                i23 -= i20;
                                i23 = Test.iFld;
                                break;
                            case 92:
                                Test.dFld -= 660668618273180426L;
                            case 71:
                                i23 += i23;
                                f = i21;
                                if (Test.bFld)
                                    continue;
                                Test.dFld = Test.instanceCount;
                                Test.iFld += (int) l2;
                                break;
                            case 75:
                                Test.instanceCount -= i21;
                                break;
                            case 107:
                                Test.iFld |= -151;
                                f += (-44627L + (l3 * l3));
                            case 96:
                                i23 = (int) -3L;
                                Test.iFld ^= i23;
                                Test.iFld = 37826;
                                i23 += 117;
                                break;
                            case 100:
                                fArr1[(int) (l2 + 1)] *= f;
                                break;
                            case 84:
                                i23 += (77 + (l3 * l3));
                                break;
                            case 85:
                                i21 *= (int) l3;
                                break;
                        }
                    }
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + by1 + l2 + i20 + i21 + i22 + l3 + i23 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {
        int i = -23197, i1 = -94, i2 = 10, i24 = 3, i25 = 162, i26 = -2401, i27 = 3, i28 = 155, i29 = -41476, i30 = 12432, i31 = -55327, iArr[] = new int[N];
        float f3 = 2.619F, fArr2[] = new float[N];
        short s2 = 4059;
        boolean b1 = false, bArr[] = new boolean[N];
        FuzzerUtils.init(iArr, 35);
        FuzzerUtils.init(fArr2, -2.415F);
        FuzzerUtils.init(bArr, false);
        Test.instanceCount = i;
        for (i1 = 9; i1 < 203; ++i1) {
            try {
                i = (i % i1);
                i = (i2 % 47);
                i = (i1 % iArr[i1]);
            } catch (ArithmeticException a_e) {
            }
            byFld >>= (byte) (Test.dArrFld[i1 + 1] - (i2++));
            vMeth(fFld);
            Test.instanceCount -= Test.instanceCount;
            if (b1) {
                for (i24 = 1; i24 < 26; i24++) {
                    Test.instanceCount = i1;
                    i += (int) (11L + (i24 * i24));
                    i = Test.iFld;
                    Test.iArrFld[i24] = Test.iFld;
                    fFld -= Test.instanceCount;
                    fFld += Test.iFld;
                    Test.lArrFld[i1 + 1] -= Test.iFld;
                }
                if (Test.bFld)
                    break;
                for (i26 = 1; i26 < 26; i26++) {
                    i25 = -36390;
                }
                i28 = 1;
                while (++i28 < 26) {
                    byFld += (byte) (((i28 * i1) + i27) - Test.instanceCount);
                    i27 <<= (int) Test.instanceCount;
                    Test.instanceCount = (long) Test.dFld;
                    switch(((i1 % 8) * 5) + 33) {
                        case 47:
                            for (i29 = 1; 1 < i29; i29 -= 3) {
                                f3 = Test.instanceCount;
                                fFld = i30;
                                i25 -= i2;
                                Test.instanceCount += (i29 * i29);
                                Test.instanceCount = i2;
                                fFld = f3;
                                Test.iFld = i;
                                Test.iArrFld = iArr;
                                f3 *= i24;
                                i25 -= Test.iFld;
                                Test.iFld /= (int) (i2 | 1);
                                i25 >>= i27;
                                i += (int) fFld;
                            }
                            i30 = -69;
                            i25 += (((i28 * f3) + i30) - fFld);
                            i31 = 1;
                            do {
                                if (Test.bFld)
                                    continue;
                                s2 = (short) -21;
                                switch((i28 % 6) + 76) {
                                    case 76:
                                        i += Test.iFld;
                                        i27 += (int) Test.instanceCount;
                                        Test.instanceCount += Test.instanceCount;
                                        iArr[i28 + 1] = (int) f3;
                                        iArr[i28 - 1] = i2;
                                        iArr[i1] -= Test.iFld;
                                        iArr[i1 - 1] += i1;
                                        i2 <<= i30;
                                        i25 ^= (int) Test.instanceCount;
                                        i25 -= i29;
                                        i2 += i1;
                                        iArr[i1] <<= 226;
                                        switch(((i1 % 1) * 5) + 49) {
                                            case 53:
                                                s2 += (short) i31;
                                                Test.instanceCount -= (long) fFld;
                                                Test.instanceCount = (long) fFld;
                                                fArr2[i31 + 1] = i29;
                                                break;
                                        }
                                        Test.instanceCount <<= Test.iFld;
                                        break;
                                    case 77:
                                        i += i31;
                                        Test.iFld = i27;
                                        break;
                                    case 78:
                                        i27 = -78;
                                    case 79:
                                        s2 >>= (short) i31;
                                        try {
                                            i25 = (i2 % 907585084);
                                            iArr[i28 - 1] = (i27 % -41431);
                                            i25 = (i27 % 41038);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        i25 -= i30;
                                        Test.instanceCount = byFld;
                                        iArr[i31] += (int) Test.instanceCount;
                                        i27 *= i29;
                                        iArr[i28] = (int) 1.293F;
                                        i2 += i26;
                                        Test.instanceCount >>>= i26;
                                        f3 *= 55611;
                                        Test.iFld = Test.iFld;
                                        break;
                                    case 80:
                                        Test.iArrFld = Test.iArrFld;
                                        break;
                                    case 81:
                                }
                            } while (++i31 < 1);
                            {
                                java.io.PrintStream ax$5 = System.out;
                                java.io.PrintStream ax$6 = System.err;
                                java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                                    @Override
                                    public void write(int b) throws java.io.IOException {
                                        // DO NOTHING: DISCARD ALL OUTPUTS
                                    }
                                });
                                System.setOut(ax$7);
                                System.setErr(ax$7);
                                try {
                                    for (int ax$3 = -2322; ax$3 < 3361; ax$3 += 1) {
                                        int ax$1 = i31;
                                        try {
                                            byte[] ax$0 = new byte[0];
                                            ax$0[i31] += 5;
                                        } catch (Throwable ax$2) {
                                        } finally {
                                            i31 = ax$1;
                                        }
                                    }
                                } catch (Throwable ax$4) {
                                }
                                System.setOut(ax$5);
                                System.setErr(ax$6);
                            }
                        case 67:
                            i >>>= i25;
                            break;
                        case 66:
                            i2 -= (int) 10L;
                        case 51:
                            bArr[i1 + 1] = true;
                            break;
                        case 60:
                            iArr[i1] >>= (int) Test.instanceCount;
                            break;
                        case 62:
                            Test.lArrFld[i1] |= i;
                            break;
                        case 49:
                            i27 = byFld;
                            break;
                        case 71:
                            Test.instanceCount += (75 + (i28 * i28));
                            break;
                    }
                }
            } else if (b1) {
                fArr2[i1 - 1] -= i2;
            } else if (b1) {
                iArr[i1 - 1] >>= i1;
            } else {
                Test.dFld -= i24;
            }
        }
        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 f3 i31 = " + i30 + "," + Float.floatToIntBits(f3) + "," + i31);
        FuzzerUtils.out.println("s2 b1 iArr = " + s2 + "," + (b1 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("fArr2 bArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("Test.instanceCount byFld Test.dFld = " + Test.instanceCount + "," + byFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.iFld fFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.dArrFld Test.iArrFld Test.lArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$38) {
            try {
                try {
                    SortedSet ax$39 = new TreeSet(String.CASE_INSENSITIVE_ORDER);
                    ax$39.headSet(null);
                } catch (NullPointerException e) {
                }
            } catch (Throwable ax$40) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$8 = false;

    private static Boolean ax$38 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
