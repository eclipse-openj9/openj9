// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -1070167135L;

    public static double dFld = -1.61279;

    public static boolean bFld = true;

    public static short sFld = 22490;

    public static byte byFld = -40;

    public float[] fArrFld = new float[N];

    public static int[] iArrFld = new int[N];

    public static float[] fArrFld1 = new float[N];

    public static volatile double[] dArrFld = new double[N];

    public static long[][] lArrFld = new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
        FuzzerUtils.init(Test.fArrFld1, -1.298F);
        FuzzerUtils.init(Test.dArrFld, -1.19898);
        FuzzerUtils.init(Test.lArrFld, 83L);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4, long l1) {
        if (ax$8) {
            int ax$12 = i4;
            try {
                int ax$9 = 65535;
                int ax$10 = 0xFFFFFFFF;
                int ax$11 = 9039;
                for (ax$9 = 500; ax$9 >= ax$10; ax$9 -= 2) {
                    ax$11 += 2000 / ax$9;
                    i4 = ax$11;
                }
            } catch (Throwable ax$13) {
            } finally {
                i4 = ax$12;
            }
            return 1675049976;
        }
        int i5 = -22598, i6 = -4, i7 = 243, i8 = 52238, i9 = 22979, i10 = 48275, i11 = 4, iArr[] = new int[N];
        float f2 = 2.333F;
        long l2 = -177L, l3 = 11L;
        double d1 = 0.104244, dArr[] = new double[N];
        short s = -12957;
        FuzzerUtils.init(iArr, -239);
        FuzzerUtils.init(dArr, 0.1805);
        i4 = 64293;
        Test.dFld = i4;
        for (i5 = 11; i5 < 211; ++i5) {
            Test.iArrFld[i5] <<= i4;
            switch((i5 % 8) + 23) {
                case 23:
                    i7 = 1;
                    do {
                        for (i8 = 1; i8 > 1; i8 -= 3) {
                            i4 = i4;
                            if (Test.bFld)
                                break;
                            f2 += l1;
                            Test.fArrFld1[i7] = 22936;
                            i9 += (i8 * i8);
                            i4 >>= i5;
                            Test.instanceCount -= Test.instanceCount;
                            i6 = (int) Test.instanceCount;
                            l1 += (i8 * i8);
                            i6 += (((i8 * i4) + i5) - i8);
                            f2 += (i8 - Test.instanceCount);
                            f2 *= i5;
                            Test.dFld *= i9;
                            i4 = (int) l1;
                            Test.iArrFld = Test.iArrFld;
                        }
                    } while (++i7 < 3);
                    for (l2 = 1; 3 > l2; l2++) {
                        i10 -= (int) Test.dFld;
                        i4 >>= i6;
                        iArr[i5] &= i5;
                        if (Test.bFld) {
                            for (d1 = 1; 2 > d1; d1++) {
                                l1 = (long) -23.68103;
                                i4 = i8;
                                if (i10 != 0) {
                                }
                                i11 = i11;
                                i11 = i6;
                                i10 = (int) l1;
                                Test.instanceCount *= i6;
                                l1 = i4;
                                Test.instanceCount >>>= s;
                            }
                        } else if (Test.bFld) {
                            dArr = dArr;
                        }
                    }
                    break;
                case 24:
                    i10 = i11;
                    break;
                case 25:
                    i9 >>>= (int) l2;
                    break;
                case 26:
                    i11 += (i5 | i6);
                case 27:
                    i9 += i5;
                    break;
                case 28:
                    i6 |= (int) Test.instanceCount;
                    break;
                case 29:
                    Test.iArrFld[i5 - 1] = i11;
                    break;
                case 30:
                    l3 += i7;
                    break;
                default:
                    try {
                        i9 = (i6 % -150);
                        i4 = (i11 % i4);
                        i4 = (-2118249888 % i5);
                    } catch (ArithmeticException a_e) {
                    }
            }
        }
        long meth_res = i4 + l1 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f2) + l2 + i10 + Double.doubleToLongBits(d1) + i11 + s + l3 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(long l, int i3) {
        float f1 = 1.156F, f3 = 1.481F;
        byte by = -118;
        int i12 = -55, i13 = 1, i14 = 59841, i15 = -207, i16 = -117, i17 = 79, i18 = -99;
        long l4 = 7L, lArr[] = new long[N];
        FuzzerUtils.init(lArr, -11L);
        i3 >>>= (int) (Test.iArrFld[(i3 >>> 1) % N] = (int) ((f1 - i3) * (Test.instanceCount - 11)));
        i3 *= (--i3);
        f1 -= (iMeth(i3, l) | by);
        i3 = i3;
        Test.dFld += i3;
        i3 <<= (int) Test.instanceCount;
        i3 -= (int) Test.dFld;
        f1 = 2.323F;
        lArr[(i3 >>> 1) % N] -= 0L;
        Test.instanceCount = l;
        lArr[(i3 >>> 1) % N] = (long) -1.793F;
        Test.iArrFld[(i3 >>> 1) % N] += (int) Test.instanceCount;
        i3 -= 12;
        i3 = i3;
        f1 -= -2.819F;
        i3 -= i3;
        f1 += 116L;
        f1 += i3;
        Test.dFld += i3;
        i12 = 1;
        while (++i12 < 240) {
            Test.sFld = (short) i12;
            for (i13 = 1; i13 < 3; i13++) {
                for (l4 = 2; l4 > 1; l4--) {
                    f1 -= 10;
                }
                i16 = 1;
                while (++i16 < 2) {
                    i14 = i3;
                    Test.iArrFld[i13 - 1] += i16;
                    i15 >>= i14;
                    Test.iArrFld[i16 - 1] >>= 49480;
                    i15 *= Test.sFld;
                    f3 += (i16 * i12);
                }
                for (i17 = 1; i17 < 2; ++i17) {
                    i3 += Test.sFld;
                    i14 -= 26698;
                    i15 += i14;
                    i18 = (int) l;
                    i14 = i3;
                }
            }
        }
        vMeth1_check_sum += l + i3 + Float.floatToIntBits(f1) + by + i12 + i13 + i14 + l4 + i15 + i16 + Float.floatToIntBits(f3) + i17 + i18 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i1) {
        double d = 92.47497;
        int i2 = 225, i19 = -10, i20 = 11, i21 = 25849, i22 = -132, i23 = -29910;
        long l5 = 17534L;
        for (d = 5; d < 201; ++d) {
            vMeth1(Test.instanceCount, i2);
            for (l5 = 1; l5 < 3; l5++) {
                for (i20 = 1; i20 < 2; i20++) {
                    try {
                        i1 = (i19 / Test.iArrFld[(int) (l5 - 1)]);
                        i2 = (i2 / i21);
                        i21 = (Test.iArrFld[i20 + 1] / Test.iArrFld[(int) (d + 1)]);
                    } catch (ArithmeticException a_e) {
                    }
                    i2 &= (int) Test.instanceCount;
                    i21 %= (int) (i21 | 1);
                    if (Test.bFld)
                        continue;
                }
                Test.dArrFld[(int) (l5 - 1)] = i2;
                for (i22 = 1; i22 < 2; i22++) {
                    Test.lArrFld[i22 + 1][(int) (d)] = -13451;
                    i19 = (int) l5;
                    i23 = i23;
                    i1 += i21;
                    try {
                        i21 = (Test.iArrFld[i22 + 1] / i22);
                        i2 = (-95 % i2);
                        i1 = (i23 / 63710);
                    } catch (ArithmeticException a_e) {
                    }
                    i2 >>= (int) l5;
                    Test.instanceCount += i22;
                    Test.dFld -= i20;
                    Test.dFld = i19;
                    i1 >>= i21;
                    i23 += i22;
                    Test.iArrFld[i22 - 1] *= i20;
                    if (i23 != 0) {
                        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + i2 + l5 + i19 + i20 + i21 + i22 + i23;
                        return;
                    }
                }
            }
        }
        Test.lArrFld[(i22 >>> 1) % N][(i20 >>> 1) % N] >>= l5;
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + i2 + l5 + i19 + i20 + i21 + i22 + i23;
    }

    public void mainTest(String[] strArr1) {
        int i = -111, i24 = 35, i25 = 137, i26 = 4, i28 = 47434, i29 = -7, i30 = -127, i31 = 23325, i32 = 1877, i33 = -3808, i34 = -5, i35 = 44809, i36 = -1, i37 = 23, i38 = -2, i39 = 8776;
        float f = -30.450F;
        double[][] dArr1 = new double[N][N];
        short[] sArr = new short[N];
        FuzzerUtils.init(dArr1, -1.124142);
        FuzzerUtils.init(sArr, (short) 1927);
        i += (int) ((fArrFld[(i >>> 1) % N]--) * f);
        vMeth(i);
        i24 = 1;
        do {
            for (i25 = 2; i25 < 38; ++i25) {
                i26 <<= i25;
                Test.instanceCount -= i25;
                f += i25;
            }
            Test.instanceCount <<= i26;
        } while (++i24 < 133);
        i28 = 1;
        do {
            if (Test.bFld) {
                i29 = 1;
                do {
                    i26 -= i28;
                    i26 = (int) 1.83331;
                    i26 += i;
                } while (++i29 < 61);
                Test.instanceCount *= i29;
                i30 = 1;
                {
                    java.io.PrintStream ax$0 = System.out;
                    java.io.PrintStream ax$1 = System.err;
                    java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$2);
                    System.setErr(ax$2);
                    {
                        boolean ax$7 = false;
                        for (int ax$6 = -2625; ax$6 < 6100; ax$6 += 1) {
                            if (!ax$7) {
                                ax$7 = true;
                                {
                                    System.setOut(ax$0);
                                    System.setErr(ax$1);
                                    while (++i30 < 61) {
                                        f *= i29;
                                        i26 <<= i26;
                                        i *= i30;
                                        Test.instanceCount += (((i30 * Test.byFld) + i30) - i28);
                                        Test.lArrFld[i28 + 1][i28 + 1] <<= i30;
                                        for (i31 = 1; i31 > 1; i31 -= 2) {
                                            Test.lArrFld[i31] = Test.lArrFld[i28 - 1];
                                            Test.bFld = Test.bFld;
                                            Test.instanceCount = (long) 68.761F;
                                            i26 += (i31 | i);
                                            i33 = (int) f;
                                            i32 = (int) Test.instanceCount;
                                            i33 += (int) (-7082790152840191925L + (i31 * i31));
                                            i += (int) -2.875F;
                                            Test.iArrFld[i30] *= 4;
                                            dArr1 = dArr1;
                                        }
                                        f += (-30083 + (i30 * i30));
                                        i32 += i33;
                                        for (i34 = 1; 1 > i34; ++i34) {
                                            Test.sFld += (short) i29;
                                            i32 |= (int) Test.instanceCount;
                                            Test.instanceCount *= (long) 1.1021F;
                                            i33 += (i34 * i34);
                                            i += i31;
                                            Test.instanceCount = (long) f;
                                            i35 += (int) Test.instanceCount;
                                        }
                                        i33 += (i30 | i35);
                                        try {
                                            i35 = (i35 % i25);
                                            i35 = (-19135 / i24);
                                            i = (i30 / i24);
                                        } catch (ArithmeticException a_e) {
                                        }
                                    }
                                    System.setOut(ax$2);
                                    System.setErr(ax$2);
                                }
                            }
                            try {
                                java.lang.Object ax$4 = "322709565712.6364";
                                java.lang.Object ax$3 = "SunPKCS11-Solaris";
                                ax$4 = (int[]) ax$3;
                            } catch (Throwable ax$5) {
                            } finally {
                            }
                        }
                    }
                    System.setOut(ax$0);
                    System.setErr(ax$1);
                }
                for (i36 = 2; i36 < 61; ++i36) {
                    Test.iArrFld[i28 - 1] += (int) f;
                    f = i32;
                    Test.instanceCount += (i36 + Test.instanceCount);
                    Test.sFld -= (short) i34;
                    switch((i28 % 6) + 98) {
                        case 98:
                            for (i38 = 1; i38 < 2; i38++) {
                                i32 += (int) (-105L + (i38 * i38));
                                i33 = 13;
                                i26 = -24;
                                f *= (float) -104.100648;
                                Test.instanceCount >>= i28;
                                Test.byFld &= (byte) -152;
                                sArr[i36 + 1] -= (short) Test.instanceCount;
                                fArrFld[i28] += -64140;
                                Test.lArrFld[i36 - 1][i28 - 1] = i31;
                                i37 >>>= i32;
                                Test.sFld = (short) i33;
                                if (Test.bFld) {
                                    Test.instanceCount += (i38 * i38);
                                    i35 += i37;
                                    i39 = i31;
                                    f += i38;
                                    Test.dArrFld[i38 - 1] = Test.dFld;
                                    i32 -= (int) Test.instanceCount;
                                    Test.instanceCount >>= Test.byFld;
                                    Test.iArrFld[i38 - 1] &= (int) Test.instanceCount;
                                    Test.lArrFld[i28 + 1][i28 - 1] = i38;
                                    i35 -= i24;
                                } else {
                                    i39 += (i38 * i38);
                                    i35 /= (int) (i29 | 1);
                                }
                            }
                        case 99:
                            Test.byFld -= (byte) f;
                            break;
                        case 100:
                            i32 -= i26;
                            break;
                        case 101:
                            try {
                                i26 = (i39 % i28);
                                i35 = (-88 % Test.iArrFld[i28]);
                                i37 = (Test.iArrFld[i36] % 937008308);
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        case 102:
                            try {
                                Test.iArrFld[i36 - 1] = (i30 / 34);
                                i37 = (i30 % -23863);
                                i33 = (214 / i25);
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        case 103:
                            i += Test.byFld;
                            break;
                        default:
                            i37 += (i36 ^ Test.instanceCount);
                    }
                }
            } else if (Test.bFld) {
                i26 = i33;
            } else {
                Test.sFld = (short) i;
            }
        } while (++i28 < 82);
        FuzzerUtils.out.println("i f i24 = " + i + "," + Float.floatToIntBits(f) + "," + i24);
        FuzzerUtils.out.println("i25 i26 i28 = " + i25 + "," + i26 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("i38 i39 dArr1 = " + i38 + "," + i39 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld Test.byFld fArrFld = " + Test.sFld + "," + Test.byFld + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld Test.fArrFld1 Test.dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld1)) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$8 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
