// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 7L;

    public int iFld = -9835;

    public static double dFld = 52.73856;

    public static boolean bFld = true;

    public float fFld = -1.290F;

    public static int iFld1 = 13;

    public byte byFld = -116;

    public int[] iArrFld = new int[N];

    public static volatile float[] fArrFld = new float[N];

    public static byte[][] byArrFld = new byte[N][N];

    public static int[] iArrFld1 = new int[N];

    public static double[][] dArrFld = new double[N][N];

    public short[] sArrFld = new short[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.162F);
        FuzzerUtils.init(Test.byArrFld, (byte) -30);
        FuzzerUtils.init(Test.iArrFld1, 15699);
        FuzzerUtils.init(Test.dArrFld, -1.18343);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i9, int i10) {
        if (ax$0) {
            try {
                boolean ax$2 = false;
                int ax$1 = 0x00018000;
                if (ax$1 == 2057) {
                } else {
                    ax$2 = true;
                }
            } catch (Throwable ax$3) {
            } finally {
            }
            return;
        }
        byte by = -38;
        int i11 = 0, i12 = -120, i13 = -7344, i14 = -9, i15 = 22206, i16 = -6, i17 = -11, iArr[] = new int[N];
        boolean b = false;
        float f = -2.520F;
        double d1 = 37.75940;
        short s = 13336;
        FuzzerUtils.init(iArr, -39482);
        by = (byte) i10;
        for (i11 = 190; 4 < i11; i11 -= 2) {
            for (i13 = 1; i13 < 6; i13++) {
                iArr[i13 + 1] <<= i14;
                for (i15 = 2; i15 > 1; i15 -= 3) {
                    i9 = i12;
                    if (b)
                        break;
                    f += i9;
                    i12 += -7;
                    i9 = i15;
                    switch((i11 % 2) + 42) {
                        case 42:
                            i12 >>>= (int) Test.instanceCount;
                            i16 += i14;
                            i14 = by;
                            f -= 11471;
                            i10 += (i15 | i13);
                            i14 += i15;
                            d1 = -163;
                            f *= (float) d1;
                            iArr[i11 - 1] += s;
                            i12 &= i16;
                            i14 += (i15 * i15);
                            switch((i11 % 4) + 56) {
                                case 56:
                                    d1 %= (Test.instanceCount | 1);
                                    f -= 6.463F;
                                    i10 = (int) 1L;
                                    f += i12;
                                    switch((i13 % 4) + 92) {
                                        case 92:
                                            s >>= s;
                                            f = f;
                                            iArr[i11 - 1] += i11;
                                            f = 11;
                                            i14 = 12608;
                                            d1 = Test.instanceCount;
                                            i12 -= i9;
                                            if (true)
                                                break;
                                            break;
                                        case 93:
                                            iArr[i11] += i10;
                                            break;
                                        case 94:
                                            i14 += i15;
                                        case 95:
                                            i17 = i17;
                                            break;
                                        default:
                                    }
                                    break;
                                case 57:
                                    Test.byArrFld[i11 + 1][i11] -= (byte) -5145103429092482637L;
                                    break;
                                case 58:
                                    iArr[i13 + 1] = -21110;
                                    break;
                                case 59:
                                    i9 = (int) f;
                                    break;
                                default:
                                    Test.instanceCount *= (long) -46.111432;
                            }
                            break;
                        case 43:
                            i12 += (i15 | i10);
                            break;
                        default:
                            if (i15 != 0) {
                                vMeth2_check_sum += i9 + i10 + by + i11 + i12 + i13 + i14 + i15 + i16 + (b ? 1 : 0) + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + s + i17 + FuzzerUtils.checkSum(iArr);
                                return;
                            }
                    }
                }
            }
        }
        vMeth2_check_sum += i9 + i10 + by + i11 + i12 + i13 + i14 + i15 + i16 + (b ? 1 : 0) + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + s + i17 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i6, long l, long l1) {
        if (ax$9) {
            int ax$12 = i6;
            int ax$13 = iFld1;
            try {
                int ax$11 = 0x00018001;
                for (int ax$10 = 0; ax$10 < 10; ++ax$10) {
                    // The operation has been hoisted out of the inner loop.
                    // Note that we depend on the compiler's block numbering to
                    // check if it has been moved.
                    i6 += ax$11 * iFld1;
                }
            } catch (Throwable ax$14) {
            } finally {
                i6 = ax$12;
                iFld1 = ax$13;
            }
            return;
        }
        int i7 = 125, i8 = 22026, i18 = -130, i19 = 229, i20 = -50685, i21 = 184, i22 = 14, i23 = 2, i24 = 33, i25 = -12, i26 = -10, i27 = 240, i28 = 0, iArr1[] = new int[N];
        float f1 = 35.740F, fArr[] = new float[N];
        short s1 = -13597;
        FuzzerUtils.init(fArr, 2.721F);
        FuzzerUtils.init(iArr1, 2);
        for (i7 = 2; i7 < 94; ++i7) {
            i8 += (i7 * i8);
        }
        {
            java.io.PrintStream ax$6 = System.out;
            java.io.PrintStream ax$7 = System.err;
            java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$8);
            System.setErr(ax$8);
            try {
                ax$0 = true;
                for (int ax$4 = 0; ax$4 < 6014; ax$4 += 1) vMeth2(-748852480, -1499896070);
            } catch (java.lang.Throwable ax$5) {
            } finally {
                ax$0 = false;
            }
            System.setOut(ax$6);
            System.setErr(ax$7);
        }
        vMeth2(-3535, i6);
        if (true) {
            for (i18 = 7; i18 < 118; i18++) {
                fArr[i18 - 1] = i18;
                for (i20 = 1; i20 < 5; ++i20) {
                    boolean b1 = false;
                    i6 += (i20 | i18);
                    i21 = i8;
                    Test.instanceCount -= (long) 2.950F;
                    i8 -= (int) l1;
                    f1 %= (i8 | 1);
                    Test.dFld += 214;
                    for (i22 = i20; i22 < 2; ++i22) {
                        i23 = i18;
                        i19 = i20;
                        i19 = (int) Test.instanceCount;
                        iArr1[i20 + 1] += i6;
                        if (true)
                            break;
                        i6 += (i22 + i8);
                        iArr1[i18] += (int) l;
                        i21 += i22;
                    }
                    i21 += (((i20 * i7) + l1) - i7);
                    if (b1)
                        continue;
                    l1 *= i7;
                    iArr1[i20 - 1] = i6;
                    Test.instanceCount += (i20 ^ l);
                }
                for (i24 = 1; i24 < 5; i24++) {
                    for (i26 = 1; 2 > i26; ++i26) {
                        try {
                            iArr1[i18 + 1] = (i19 / i19);
                            iArr1[i26 - 1] = (i20 / i26);
                            i8 = (343757030 / i19);
                        } catch (ArithmeticException a_e) {
                        }
                        try {
                            iArr1[i26 - 1] = (i23 / i22);
                            i8 = (Test.iArrFld1[i24] / 74);
                            i23 = (52442 / Test.iArrFld1[i26]);
                        } catch (ArithmeticException a_e) {
                        }
                        i8 >>>= i25;
                    }
                    i28 = 2;
                    while (--i28 > 0) {
                        i21 = (int) f1;
                        l += (((i28 * l) + i25) - l);
                    }
                    i8 >>= (int) l1;
                    i21 += i26;
                }
            }
        } else if (Test.bFld) {
            Test.dFld = i6;
        } else if (false) {
            Test.iArrFld1[(i27 >>> 1) % N] <<= s1;
        }
        vMeth1_check_sum += i6 + l + l1 + i7 + i8 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f1) + i22 + i23 + i24 + i25 + i26 + i27 + i28 + s1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth() {
        int i29 = 153, i30 = -30801, i31 = -4, i32 = 52903, i33 = 97, i34 = 0;
        byte by1 = -74;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, -4388333106018540519L);
        iArrFld = (iArrFld = (iArrFld = (iArrFld = FuzzerUtils.int1array(N, (int) 240))));
        lArr[(81 >>> 1) % N] = Integer.reverseBytes(iFld);
        Test.fArrFld[(iFld >>> 1) % N] += (iFld--);
        {
            java.io.PrintStream ax$17 = System.out;
            java.io.PrintStream ax$18 = System.err;
            java.io.PrintStream ax$19 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$19);
            System.setErr(ax$19);
            try {
                ax$9 = true;
                for (int ax$15 = 0; ax$15 < 6032; ax$15 += 1) vMeth1(-189450796, 2189297243950210728L, 8319676947100893815L);
            } catch (java.lang.Throwable ax$16) {
            } finally {
                ax$9 = false;
            }
            System.setOut(ax$17);
            System.setErr(ax$18);
        }
        vMeth1(iFld, Test.instanceCount, Test.instanceCount);
        i29 = 1;
        do {
            if (iFld != 0) {
                vMeth_check_sum += i29 + i30 + i31 + i32 + i33 + i34 + by1 + FuzzerUtils.checkSum(lArr);
                return;
            }
            i30 = 1;
            do {
                iFld = -39556;
            } while (++i30 < 7);
            i31 = 7;
            do {
                float f2 = 0.525F;
                Test.instanceCount += i31;
                Test.instanceCount += (i31 * i31);
                iFld += (((i31 * f2) + Test.instanceCount) - i30);
                iArrFld[i29] += (int) Test.dFld;
            } while (--i31 > 0);
            for (i32 = 1; i32 < 7; ++i32) {
                Test.bFld = Test.bFld;
                i33 = iFld;
                i34 = 1;
                while ((i34 += 2) < 2) {
                    short s2 = 15789;
                    Test.instanceCount -= i30;
                    i33 = -240;
                    iFld = i33;
                    i33 <<= by1;
                    i33 += (((i34 * i29) + i33) - iFld);
                    Test.instanceCount = (long) Test.dFld;
                    Test.dFld *= i32;
                    switch((i32 % 10) + 97) {
                        case 97:
                            if (false)
                                break;
                            iFld = i30;
                            if (Test.bFld)
                                continue;
                            Test.instanceCount -= (long) Test.dFld;
                            switch((i32 % 8) + 101) {
                                case 101:
                                    switch(((i34 % 3) * 5) + 50) {
                                        case 55:
                                            iFld += (i34 - Test.instanceCount);
                                            iFld = by1;
                                            if (true)
                                                break;
                                            Test.dArrFld[i34 - 1][i29] *= -85;
                                            i33 = (int) Test.instanceCount;
                                            iFld = 1;
                                            break;
                                        case 54:
                                            iFld += (int) fFld;
                                        case 62:
                                            iFld += (i34 * i34);
                                        default:
                                            iFld += (i34 * i34);
                                    }
                                    break;
                                case 102:
                                    i33 = 59470;
                                    break;
                                case 103:
                                    Test.instanceCount = (long) Test.dFld;
                                    break;
                                case 104:
                                    i33 = iFld;
                                    break;
                                case 105:
                                    Test.instanceCount *= (long) Test.dFld;
                                    break;
                                case 106:
                                    Test.iArrFld1[i29 - 1] -= (int) Test.instanceCount;
                                    break;
                                case 107:
                                    i33 = i34;
                                    break;
                                case 108:
                                    Test.dFld -= iFld;
                                default:
                                    iFld += by1;
                            }
                            break;
                        case 98:
                            iFld = i33;
                            break;
                        case 99:
                            Test.fArrFld[i34 + 1] -= i30;
                        case 100:
                        case 101:
                            Test.iFld1 -= -122;
                            break;
                        case 102:
                            Test.dFld += -22983;
                            break;
                        case 103:
                            if (Test.bFld)
                                continue;
                            break;
                        case 104:
                            Test.iArrFld1[i34 + 1] = i32;
                            break;
                        case 105:
                            Test.instanceCount = i31;
                        case 106:
                            Test.instanceCount += s2;
                            break;
                    }
                }
            }
        } while ((i29 += 2) < 144);
        vMeth_check_sum += i29 + i30 + i31 + i32 + i33 + i34 + by1 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {
        int i = 6, i1 = -173, i2 = 56265, i3 = -51992, i4 = -113, i5 = -4, i35 = -64436, i36 = 7, i37 = -14103, i38 = 185, i39 = -14, i40 = 38909, iArr2[][] = new int[N][N];
        double d = 42.82286;
        short s3 = 4198;
        float f3 = 84.329F;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr2, -13);
        FuzzerUtils.init(lArr1, -189L);
        i -= (int) (++Test.instanceCount);
        i -= (int) Math.min((Test.instanceCount + Test.instanceCount) + (i - i), Test.instanceCount--);
        for (i1 = 3; 93 > i1; ++i1) {
            i = (++iArrFld[i1 + 1]);
            for (d = 2; d < 56; d++) {
                for (i4 = 1; i4 < 2; ++i4) {
                    Test.instanceCount -= (-(--Test.instanceCount));
                    vMeth();
                    i2 += (i4 + i5);
                    fFld = Test.iFld1;
                    i += i4;
                    Test.instanceCount = (long) 2.188F;
                    i += i2;
                    s3 += (short) i35;
                }
                i2 -= i4;
                for (i36 = 1; i36 < 2; ++i36) {
                    iArrFld[(int) (d - 1)] -= 5435;
                    iArrFld[i36] = i2;
                    i35 = i4;
                    iArr2 = FuzzerUtils.int2array(N, (int) -40709);
                    s3 += (short) (i36 * i36);
                    i2 += (int) fFld;
                    iFld <<= i1;
                    Test.instanceCount -= (long) Test.dFld;
                    if (Test.bFld) {
                        i2 >>= i35;
                        Test.iFld1 += (i36 + byFld);
                        lArr1[i36] = Test.instanceCount;
                        Test.instanceCount = -20047;
                    } else {
                        i3 += (i36 * i36);
                        fFld += i2;
                        i35 = iFld;
                        i2 = -6;
                        byFld += (byte) Test.iFld1;
                    }
                    Test.instanceCount -= i;
                    i2 += 56048;
                    i5 += i36;
                    Test.iFld1 *= i36;
                    if (Test.bFld)
                        continue;
                    Test.iArrFld1[i36 + 1] = (int) Test.instanceCount;
                }
                iFld = (int) Test.instanceCount;
                Test.iFld1 += (-120 + (d * d));
                sArrFld[i1 - 1] += (short) Test.instanceCount;
                for (i38 = (int) (d); i38 < 2; i38++) {
                    i2 += (i38 * i38);
                    Test.dArrFld[i1 + 1][(int) (d + 1)] -= Test.instanceCount;
                    i2 |= s3;
                    iArr2[i1][i38 - 1] -= i3;
                    i3 = i38;
                    iArrFld[i1 + 1] = i37;
                    Test.dFld = Test.iFld1;
                }
                lArr1[i1] = i39;
                i40 = 2;
                do {
                    iFld += i40;
                    s3 += (short) 4286102194L;
                    iArrFld[i1 + 1] = i35;
                    iFld >>= i5;
                    f3 -= iFld;
                    i2 += i5;
                    i37 += (int) f3;
                    byFld = (byte) 2.99267;
                } while (--i40 > 0);
                i35 += (int) (d + i2);
                switch((((i >>> 1) % 5) * 5) + 99) {
                    case 124:
                        i = i1;
                        iArrFld[(int) (d + 1)] = (int) -3020954331L;
                        iFld = i2;
                        iArrFld[i1 - 1] = i4;
                    case 103:
                        i37 = i39;
                        iFld -= (int) f3;
                        i39 <<= (int) Test.instanceCount;
                        switch((((i4 >>> 1) % 1) * 5) + 104) {
                            case 107:
                                i5 &= byFld;
                                fFld = fFld;
                                Test.iFld1 += 42089;
                                i += (int) (d * d);
                                break;
                            default:
                                s3 = (short) 235;
                        }
                        break;
                    case 119:
                        iFld = (int) -9L;
                        break;
                    case 108:
                        Test.dFld *= 8;
                        break;
                    case 117:
                }
            }
        }
        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("d i3 i4 = " + Double.doubleToLongBits(d) + "," + i3 + "," + i4);
        FuzzerUtils.out.println("i5 s3 i35 = " + i5 + "," + s3 + "," + i35);
        FuzzerUtils.out.println("i36 i37 i38 = " + i36 + "," + i37 + "," + i38);
        FuzzerUtils.out.println("i39 i40 f3 = " + i39 + "," + i40 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("iArr2 lArr1 = " + FuzzerUtils.checkSum(iArr2) + "," + FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println("Test.instanceCount iFld Test.dFld = " + Test.instanceCount + "," + iFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld fFld Test.iFld1 = " + (Test.bFld ? 1 : 0) + "," + Float.floatToIntBits(fFld) + "," + Test.iFld1);
        FuzzerUtils.out.println("byFld iArrFld Test.fArrFld = " + byFld + "," + FuzzerUtils.checkSum(iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.byArrFld Test.iArrFld1 Test.dArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("sArrFld = " + FuzzerUtils.checkSum(sArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$9 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
