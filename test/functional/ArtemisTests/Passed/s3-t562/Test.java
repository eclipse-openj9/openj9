// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = -43776L;

    public static volatile float fFld = 0.621F;

    public static long lFld = 64L;

    public static int iFld = 48510;

    public static volatile short sFld = 6404;

    public double dFld = 22.39342;

    public byte byFld = -24;

    public static float[] fArrFld = new float[N];

    public static volatile long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.465F);
        FuzzerUtils.init(Test.lArrFld, 40991L);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {
        if (ax$7) {
            int ax$11 = iFld;
            try {
                double ax$9 = 4.04;
                double[] ax$10 = new double[1];
                double[] ax$8 = { 0.0, 1.0, 2.0, 3.0 };
                ax$10[iFld] = (ax$8[iFld] / ax$9);
            } catch (Throwable ax$12) {
            } finally {
                iFld = ax$11;
            }
            return;
        }
        int i6 = -1, i7 = -2, i8 = 52707, i9 = 7, i10 = 42858, i11 = 3, i12 = -7750, i13 = 6119, i14 = -6, iArr1[][] = new int[N][N];
        float f = -4.989F;
        boolean b = false, bArr[] = new boolean[N];
        byte by = -110;
        double d = 0.56384, dArr1[][] = new double[N][N];
        long l1 = 218L, lArr[] = new long[N];
        short[][] sArr = new short[N][N];
        FuzzerUtils.init(iArr1, -2);
        FuzzerUtils.init(dArr1, -1.68081);
        FuzzerUtils.init(lArr, 304996158L);
        FuzzerUtils.init(sArr, (short) 10271);
        FuzzerUtils.init(bArr, true);
        for (i6 = 5; i6 < 128; ++i6) {
            short s = -4231;
            Test.instanceCount += (-26 + (i6 * i6));
            Test.instanceCount += (((i6 * i7) + i6) - i6);
            f += (((i6 * s) + i7) - i6);
            i7 = i6;
            i7 = i7;
            for (i8 = 1; i8 < 5; ++i8) {
                if (b)
                    continue;
                Test.fArrFld[i6] %= (i7 | 1);
            }
            by += (byte) i6;
            if (b) {
                if (i9 != 0) {
                    vMeth2_check_sum += i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + (b ? 1 : 0) + by + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) + l1 + i14 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(bArr);
                    return;
                }
                i9 += i9;
                iArr1 = FuzzerUtils.int2array(N, (int) -124);
                iArr1[i6 + 1][i6 + 1] = i7;
                i9 -= i6;
                for (i10 = i6; i10 < 5; i10++) {
                    for (i12 = i10; 1 > i12; i12++) {
                        d *= Test.instanceCount;
                        dArr1[i12 + 1][(i13 >>> 1) % N] = f;
                        i11 += (int) -1.43211;
                        i11 += (((i12 * Test.instanceCount) + i11) - i11);
                    }
                    for (l1 = 1; l1 < 1; ++l1) {
                        i13 += (int) Test.instanceCount;
                        f = s;
                        Test.instanceCount *= -54583;
                        i9 += (int) l1;
                        s += (short) l1;
                        lArr[i6] = i7;
                        sArr[i6][i10 - 1] = (short) i6;
                        b = b;
                        switch(((-5 >>> 1) % 2) + 122) {
                            case 122:
                                lArr[i10 + 1] -= -1L;
                                try {
                                    i7 = (iArr1[i6 - 1][(int) (l1)] / -5);
                                    i7 = (45298 % i6);
                                    i13 = (i6 % 33660);
                                } catch (ArithmeticException a_e) {
                                }
                                iArr1[i10][(int) (l1 + 1)] -= (int) l1;
                                i9 = i12;
                                bArr = bArr;
                                break;
                            case 123:
                                i14 *= i8;
                                break;
                            default:
                                by = (byte) i14;
                        }
                    }
                }
            } else if (b) {
                lArr[i6 + 1] = -17864;
            } else if (true) {
                i9 -= i9;
                vMeth2_check_sum += i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + (b ? 1 : 0) + by + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) + l1 + i14 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(bArr);
                return;
            } else {
                i9 = (int) l1;
            }
        }
        vMeth2_check_sum += i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + (b ? 1 : 0) + by + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) + l1 + i14 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1() {
        int i15 = -12208, i16 = -4, i17 = -5, i18 = 1, i19 = 58257, i20 = 0, i21 = 7, iArr2[] = new int[N];
        float f1 = -1.193F;
        byte by1 = -116;
        boolean b1 = true;
        short s1 = -20540;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr2, -7);
        FuzzerUtils.init(lArr1, 34085L);
        {
            java.io.PrintStream ax$15 = System.out;
            java.io.PrintStream ax$16 = System.err;
            java.io.PrintStream ax$17 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$17);
            System.setErr(ax$17);
            try {
                ax$7 = true;
                for (int ax$13 = 0; ax$13 < 6322; ax$13 += 1) vMeth2();
            } catch (java.lang.Throwable ax$14) {
            } finally {
                ax$7 = false;
            }
            System.setOut(ax$15);
            System.setErr(ax$16);
        }
        vMeth2();
        i15 >>= i15;
        for (f1 = 12; f1 < 205; f1++) {
            i15 -= (int) Test.instanceCount;
            i17 = 1;
            while (++i17 < 3) {
                for (i18 = 1; i18 < 1; i18++) {
                    i16 -= 46750;
                    i16 = i20;
                    i15 |= i16;
                    i21 >>= i16;
                    switch((int) (((f1 % 9) * 5) + 108)) {
                        case 141:
                            i15 = i20;
                            i20 += i18;
                            Test.fFld += by1;
                            b1 = b1;
                            if (i18 != 0) {
                                vMeth1_check_sum += i15 + Float.floatToIntBits(f1) + i16 + i17 + i18 + i19 + i20 + i21 + by1 + (b1 ? 1 : 0) + s1 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
                                return;
                            }
                            iArr2[i18] = (int) Test.instanceCount;
                            i21 = (int) Test.instanceCount;
                            Test.fFld -= i17;
                            i15 += (i18 - i21);
                            i16 *= i20;
                            s1 *= (short) -3581722838L;
                            i15 = i20;
                            s1 = (short) -4;
                            break;
                        case 120:
                            i21 -= by1;
                            i16 += (i18 + i20);
                            Test.instanceCount += i18;
                            Test.instanceCount += i18;
                            Test.instanceCount *= (long) 2.94F;
                            switch((i17 % 10) + 97) {
                                case 97:
                                    Test.fFld = Test.instanceCount;
                                    iArr2[i18 - 1] ^= i21;
                                    i15 = i17;
                                    by1 = (byte) i18;
                                    i16 += (i18 * i18);
                                    iArr2[(int) (f1)] -= s1;
                                    Test.instanceCount -= i16;
                                    break;
                                case 98:
                                    i19 += i18;
                                    break;
                                case 99:
                                    b1 = false;
                                    break;
                                case 100:
                                case 101:
                                    Test.instanceCount += (i18 - i17);
                                    break;
                                case 102:
                                case 103:
                                    {
                                        java.io.PrintStream ax$0 = System.out;
                                        java.io.PrintStream ax$1 = System.err;
                                        java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                            @Override
                                            public void write(int b) throws java.io.IOException {
                                                // DO NOTHING: DISCARD ALL OUTPUTS
                                            }
                                        });
                                        System.setOut(ax$2);
                                        System.setErr(ax$2);
                                        {
                                            boolean ax$6 = false;
                                            for (int ax$5 = -382; ax$5 < 9598; ax$5 += 5) {
                                                if (!ax$6) {
                                                    ax$6 = true;
                                                    {
                                                        System.setOut(ax$0);
                                                        System.setErr(ax$1);
                                                        try {
                                                            iArr2[i18] = (i21 % i16);
                                                            i21 = (i17 % i19);
                                                            i20 = (i20 / 8147);
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                        System.setOut(ax$2);
                                                        System.setErr(ax$2);
                                                    }
                                                }
                                                int ax$3 = i19;
                                                try {
                                                    do {
                                                    } while (i19++ != 44);
                                                } catch (Throwable ax$4) {
                                                } finally {
                                                    i19 = ax$3;
                                                }
                                            }
                                        }
                                        System.setOut(ax$0);
                                        System.setErr(ax$1);
                                    }
                                    break;
                                case 104:
                                    b1 = b1;
                                    break;
                                case 105:
                                    Test.instanceCount -= i18;
                                case 106:
                                    iArr2[i17 - 1] = -44722;
                            }
                            break;
                        case 147:
                            if (i15 != 0) {
                                vMeth1_check_sum += i15 + Float.floatToIntBits(f1) + i16 + i17 + i18 + i19 + i20 + i21 + by1 + (b1 ? 1 : 0) + s1 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
                                return;
                            }
                            break;
                        case 117:
                            iArr2 = iArr2;
                            break;
                        case 121:
                            i21 += (int) (-2.363F + (i18 * i18));
                            break;
                        case 114:
                            i21 += (240 + (i18 * i18));
                            break;
                        case 131:
                            lArr1[i17] = Test.instanceCount;
                            break;
                        case 139:
                            i16 = i19;
                            break;
                        case 146:
                            i19 -= i16;
                            break;
                    }
                }
            }
        }
        vMeth1_check_sum += i15 + Float.floatToIntBits(f1) + i16 + i17 + i18 + i19 + i20 + i21 + by1 + (b1 ? 1 : 0) + s1 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth(long l, int i4, int i5) {
        double d1 = -49.55015, d2 = -1.42990;
        int i22 = 57677, i23 = 7, i24 = 9, i25 = -13, i26 = 5, i27 = 224, iArr3[] = new int[N];
        byte by2 = 81;
        boolean b2 = false;
        short s2 = -2702, sArr1[][] = new short[N][N];
        FuzzerUtils.init(iArr3, 233);
        FuzzerUtils.init(sArr1, (short) 31229);
        vMeth1();
        for (d1 = 5; d1 < 90; d1++) {
            l = i4;
            i4 |= i22;
            by2 -= (byte) 20;
            for (i23 = 1; 6 > i23; ++i23) {
                Test.instanceCount = i22;
                i25 = 1;
                while (++i25 < 2) {
                    b2 = b2;
                    if (b2)
                        break;
                    if (b2)
                        break;
                    iArr3[(int) (d1 - 1)] |= i22;
                    Test.instanceCount >>>= 70;
                    i4 = (int) Test.lFld;
                    d2 *= i23;
                    l = i4;
                }
                iArr3[i23 + 1] = i23;
                l *= -253;
                for (i26 = (int) (d1); i26 < 2; i26++) {
                    i24 = -17568;
                    Test.lFld *= i25;
                    i4 |= by2;
                    i24 -= i5;
                    i24 = (int) d2;
                    Test.instanceCount -= (long) d1;
                    switch(((-27495 >>> 1) % 2) + 44) {
                        case 44:
                            i4 -= (int) d1;
                            if (true) {
                                if (i22 != 0) {
                                    vMeth_check_sum += l + i4 + i5 + Double.doubleToLongBits(d1) + i22 + by2 + i23 + i24 + i25 + (b2 ? 1 : 0) + Double.doubleToLongBits(d2) + i26 + i27 + s2 + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(sArr1);
                                    return;
                                }
                                s2 += (short) Test.lFld;
                                l *= i27;
                            } else if (true) {
                                Test.lArrFld[i26 + 1] = i22;
                                i4 = (int) -57880L;
                                l <<= Test.instanceCount;
                                Test.fFld -= 241;
                                sArr1[i26 - 1][(int) (d1 - 1)] = (short) Test.fFld;
                                i4 |= i26;
                            } else {
                                i24 -= i27;
                            }
                        case 45:
                            iArr3 = FuzzerUtils.int1array(N, (int) 1);
                            break;
                    }
                }
            }
        }
        vMeth_check_sum += l + i4 + i5 + Double.doubleToLongBits(d1) + i22 + by2 + i23 + i24 + i25 + (b2 ? 1 : 0) + Double.doubleToLongBits(d2) + i26 + i27 + s2 + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(sArr1);
    }

    public void mainTest(String[] strArr3) {
        int i3 = -26721, i28 = -3, i29 = 24329, i30 = -41401, i31 = 1, i32 = -4085, i34 = 11, i35 = 192, i36 = -14585, i37 = 31520, iArr4[] = new int[N];
        boolean b3 = true, bArr1[] = new boolean[N];
        double[] dArr2 = new double[N];
        short[] sArr2 = new short[N];
        FuzzerUtils.init(iArr4, 62324);
        FuzzerUtils.init(bArr1, false);
        FuzzerUtils.init(dArr2, -83.127997);
        FuzzerUtils.init(sArr2, (short) -25480);
        i3 = 151;
        do {
            vMeth(Test.instanceCount, i3, 168);
            iArr4[i3] = i3;
            Test.lFld += i3;
            i28 = 1;
            while (++i28 < 34) {
                Test.iFld ^= i28;
                for (i29 = 1; i29 < 1; i29++) {
                    Test.iFld += (int) Test.fFld;
                    Test.iFld -= (int) Test.instanceCount;
                    Test.instanceCount &= Test.iFld;
                    Test.iFld /= (int) (i30 | 1);
                    bArr1[i29 + 1] = b3;
                    Test.iFld = (int) 174L;
                }
                Test.lArrFld[i3] = i30;
                for (i31 = i3; i31 < 1; i31++) {
                    int i33 = 235;
                    Test.lArrFld = Test.lArrFld;
                    i30 *= i29;
                    Test.iFld = 25852;
                    Test.instanceCount = i28;
                    Test.iFld += -209;
                    Test.sFld += (short) i31;
                    Test.iFld += i31;
                    dArr2[i31 + 1] = -4;
                    bArr1[i28 - 1] = b3;
                    Test.lArrFld[i28] = (long) dFld;
                    Test.lFld -= i32;
                    Test.lArrFld[i3] = Test.lFld;
                }
                Test.fArrFld[i3] = Test.lFld;
                i30 = 12726;
                i30 += i3;
                i30 = i29;
                switch(((Test.iFld >>> 1) % 1) + 90) {
                    case 90:
                        i30 <<= byFld;
                        Test.iFld += i28;
                        i30 <<= (int) Test.instanceCount;
                        byFld += (byte) (6284 + (i28 * i28));
                        for (i34 = 1; i34 < 1; i34++) {
                            Test.lArrFld = Test.lArrFld;
                            i35 = (int) Test.fFld;
                            i35 *= (int) Test.lFld;
                            i35 += 43464;
                            i35 = i31;
                            i35 = (int) Test.lFld;
                            i35 *= (int) Test.fFld;
                            i35 *= Test.iFld;
                            byFld = (byte) 26.68F;
                            i32 += (-166 + (i34 * i34));
                        }
                        sArr2[i28 - 1] *= (short) i28;
                        Test.instanceCount *= i30;
                        Test.fFld -= i30;
                        b3 = b3;
                        for (i36 = 1; 1 > i36; ++i36) {
                            if (true) {
                                Test.fArrFld[i28 + 1] -= -13;
                                switch((i36 % 1) + 95) {
                                    case 95:
                                        i30 >>= 241;
                                        switch(((253 >>> 1) % 9) + 66) {
                                            case 66:
                                                if (b3)
                                                    continue;
                                                dFld = dFld;
                                                Test.lFld *= Test.lFld;
                                                byFld = (byte) i28;
                                                switch((i36 % 1) + 123) {
                                                    case 123:
                                                        if (b3)
                                                            continue;
                                                        Test.iFld += (-10 + (i36 * i36));
                                                        i35 = i34;
                                                        i35 += i28;
                                                        i32 += (i36 - Test.instanceCount);
                                                        if (false)
                                                            break;
                                                        Test.sFld >>= (short) -8990563617079307755L;
                                                        Test.fFld += i36;
                                                        break;
                                                }
                                                i35 = (int) Test.instanceCount;
                                                Test.iFld += (i36 * i36);
                                                try {
                                                    i35 = (iArr4[i36 + 1] / i34);
                                                    i30 = (i35 / 242);
                                                    i35 = (i30 / i34);
                                                } catch (ArithmeticException a_e) {
                                                }
                                                iArr4[i28 + 1] = (int) Test.lFld;
                                                iArr4[i3 - 1] -= 45042;
                                                break;
                                            case 67:
                                                i35 ^= (int) -67L;
                                            case 68:
                                                Test.instanceCount += i36;
                                            case 69:
                                                Test.fFld *= i37;
                                            case 70:
                                                i32 = i34;
                                                break;
                                            case 71:
                                                i32 += i36;
                                                break;
                                            case 72:
                                                Test.fArrFld = Test.fArrFld;
                                            case 73:
                                                Test.lFld = (long) -8.121753;
                                            case 74:
                                                Test.instanceCount += i30;
                                                break;
                                            default:
                                                Test.instanceCount += (i36 * i36);
                                        }
                                }
                            } else if (b3) {
                                Test.sFld = (short) i36;
                            }
                        }
                    default:
                        i35 = Test.sFld;
                }
            }
        } while (--i3 > 0);
        FuzzerUtils.out.println("i3 i28 i29 = " + i3 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 b3 i31 = " + i30 + "," + (b3 ? 1 : 0) + "," + i31);
        FuzzerUtils.out.println("i32 i34 i35 = " + i32 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 i37 iArr4 = " + i36 + "," + i37 + "," + FuzzerUtils.checkSum(iArr4));
        FuzzerUtils.out.println("bArr1 dArr2 sArr2 = " + FuzzerUtils.checkSum(bArr1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)) + "," + FuzzerUtils.checkSum(sArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.lFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Test.lFld);
        FuzzerUtils.out.println("Test.iFld Test.sFld dFld = " + Test.iFld + "," + Test.sFld + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("byFld Test.fArrFld Test.lArrFld = " + byFld + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr2) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr2);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$7 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
