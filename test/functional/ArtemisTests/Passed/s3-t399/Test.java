// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 3045752494L;

    public double dFld = -56.53988;

    public static float fFld = 2.112F;

    public static volatile short sFld = 27494;

    public static byte byFld = 93;

    public static long[] lArrFld = new long[N];

    public static volatile int[] iArrFld = new int[N];

    public static double[] dArrFld = new double[N];

    public static int[] iArrFld1 = new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -4425333104890569809L);
        FuzzerUtils.init(Test.iArrFld, 3);
        FuzzerUtils.init(Test.dArrFld, 4.107427);
        FuzzerUtils.init(Test.iArrFld1, -1);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(long l1, int i2, int i3) {
        int i4 = -1, i5 = -11, i6 = -178, i7 = -84, i8 = -1, iArr1[] = new int[N];
        boolean b = true, bArr[] = new boolean[N];
        byte by = -15;
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, 47751);
        Test.sFld -= (short) i3;
        l1 = 187;
        for (i4 = 124; i4 > 5; --i4) {
            i6 = 1;
            do {
                for (i7 = 1; i7 > 1; i7 -= 3) {
                    bArr[i7] = b;
                    b = b;
                    switch((((i7 >>> 1) % 8) * 5) + 68) {
                        case 74:
                            i2 = i5;
                            Test.sFld >>= (short) 60878;
                            i2 <<= -21833;
                            i3 += -4231;
                            i2 += i5;
                            break;
                        case 80:
                            Test.fFld += i7;
                            l1 >>= i2;
                            Test.instanceCount >>= l1;
                            switch(((i7 % 3) * 5) + 2) {
                                case 16:
                                    if (i3 != 0) {
                                    }
                                    iArr1[i7] += 1;
                                    i5 >>= i3;
                                    Test.fFld /= (l1 | 1);
                                    switch(((i6 % 6) * 5) + 55) {
                                        case 82:
                                            if (b)
                                                break;
                                            i5 += i7;
                                            iArr1[i4 + 1] -= i6;
                                            Test.instanceCount = i6;
                                            if (b) {
                                                i8 = (int) -1.48520;
                                                i5 -= i3;
                                            }
                                            i3 = (int) Test.instanceCount;
                                            Test.fFld += i5;
                                            i3 -= (int) Test.instanceCount;
                                            iArr1[i6] -= i8;
                                            break;
                                        case 74:
                                        case 60:
                                            iArr1[i6 + 1] = i5;
                                            iArr1[i6 + 1] = 14551;
                                            i2 = -81;
                                            i8 <<= i8;
                                            break;
                                        case 71:
                                            Test.fFld += Test.fFld;
                                            break;
                                        case 65:
                                            iArr1[i6 - 1] = (int) Test.instanceCount;
                                            break;
                                        case 79:
                                            if (b)
                                                break;
                                            break;
                                    }
                                case 7:
                                    i8 += (-33341 + (i7 * i7));
                                    break;
                                case 10:
                                    i8 += (i7 * Test.instanceCount);
                                    break;
                                default:
                                    i2 += i6;
                            }
                            break;
                        case 108:
                            l1 += i7;
                            break;
                        case 70:
                            Test.instanceCount += (((i7 * Test.instanceCount) + i4) - by);
                            break;
                        case 81:
                            i3 = i8;
                            break;
                        case 85:
                            i3 += i6;
                            break;
                        case 78:
                            i8 = (int) Test.instanceCount;
                            break;
                        case 98:
                            l1 |= l1;
                            break;
                        default:
                            l1 &= 153;
                    }
                }
            } while (++i6 < 5);
        }
        long meth_res = l1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) + by + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(long l) {
        int i9 = 9, i10 = 42394, i11 = -4, i12 = 10, i13 = -10;
        double d1 = 0.40186, d2 = -2.76189;
        byte by1 = -54;
        float[] fArr = new float[N];
        FuzzerUtils.init(fArr, 121.753F);
        Test.fFld *= ((-iMeth(l, i9, i9)) * i9);
        for (i10 = 5; 202 > i10; ++i10) {
            if (false)
                break;
            l *= i11;
            i9 = (int) 3385988902L;
            i11 -= i10;
            if (false) {
                i9 = -2;
                if (true)
                    continue;
                for (d1 = 1; d1 < 3; ++d1) {
                    d2 = 1;
                    do {
                        Test.lArrFld[(int) (d2)] *= i11;
                        switch((int) ((d2 % 2) + 114)) {
                            case 114:
                                i9 += (int) Test.instanceCount;
                                i13 += (int) (((d2 * l) + Test.fFld) - i10);
                                Test.instanceCount /= (i9 | 1);
                            case 115:
                                Test.iArrFld = Test.iArrFld;
                                i11 -= (int) l;
                                by1 *= (byte) i12;
                                l <<= 178L;
                                break;
                            default:
                                Test.sFld -= (short) i13;
                                Test.instanceCount *= i12;
                        }
                        i12 = 58;
                        fArr[(int) (d2)] = l;
                        i12 += (87 + (d2 * d2));
                        Test.fFld += i12;
                        l = (long) Test.fFld;
                        Test.iArrFld = FuzzerUtils.int1array(N, (int) 194);
                        Test.iArrFld[(int) (d2)] -= i12;
                        i11 = by1;
                        try {
                            i11 = (i11 / Test.iArrFld[i10]);
                            Test.iArrFld[(int) (d1 - 1)] = (i12 / i12);
                            i9 = (i9 / i10);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.lArrFld[i10] = i12;
                        Test.fFld += (float) (d2 + i12);
                        Test.fFld = i10;
                        Test.instanceCount = 11;
                    } while (++d2 < 2);
                    Test.iArrFld[i10 + 1] += (int) Test.fFld;
                    Test.dArrFld[(int) (d1 + 1)] *= i12;
                }
                vMeth1_check_sum += l + i9 + i10 + i11 + Double.doubleToLongBits(d1) + i12 + Double.doubleToLongBits(d2) + i13 + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            } else {
                i9 <<= i13;
            }
        }
        vMeth1_check_sum += l + i9 + i10 + i11 + Double.doubleToLongBits(d1) + i12 + Double.doubleToLongBits(d2) + i13 + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth() {
        if (ax$19) {
            long ax$21 = iMeth_check_sum;
            long ax$22 = vMeth1_check_sum;
            try {
                boolean ax$20 = true;
                if (vMeth1_check_sum != iMeth_check_sum) {
                    ax$20 = true;
                }
            } catch (Throwable ax$23) {
            } finally {
                iMeth_check_sum = ax$21;
                vMeth1_check_sum = ax$22;
            }
            return;
        }
        int i1 = 9, i14 = -27100, i15 = -237, i16 = 9935, i17 = 7740, i18 = 6, i19 = 34878, i20 = 0, i21 = 45340, i22 = 60463, i23 = 52952, i24 = 9, i25 = 22319, i26 = -12, iArr[] = new int[N];
        boolean b1 = true;
        float[] fArr1 = new float[N];
        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(fArr1, 1.264F);
        dFld += ((i1++) + (i1--));
        iArr = (iArr = (iArr = (iArr = iArr)));
        iArr[(i1 >>> 1) % N] = (int) ((iArr[(i1 >>> 1) % N] = (int) (i1 + dFld)) + ((++dFld) - i1));
        vMeth1(Test.instanceCount);
        for (i14 = 14; 238 > i14; i14 += 2) {
            for (i16 = i14; i16 < 5; ++i16) {
                fArr1[i14] = (float) dFld;
                i15 = 3;
                Test.instanceCount /= (i1 | 1);
                Test.sFld ^= (short) Test.instanceCount;
                i18 = 1;
                while (--i18 > 0) {
                    i15 += (int) Test.instanceCount;
                }
                i17 -= i14;
            }
            Test.instanceCount |= i1;
            if (b1) {
                for (i19 = 5; i19 > 1; i19--) {
                    i15 = (int) Test.instanceCount;
                    i20 += (i19 * Test.instanceCount);
                    for (i21 = 1; i21 < 2; i21++) {
                        if (i19 != 0) {
                            vMeth_check_sum += i1 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                            return;
                        }
                        i22 = (int) Test.fFld;
                        Test.instanceCount += i21;
                        Test.iArrFld[i21] *= i18;
                    }
                    i1 -= i16;
                    Test.byFld %= (byte) (i21 | 1);
                    i17 ^= i16;
                    iArr[i14 + 1] >>= i18;
                    Test.fFld *= -100.648F;
                    for (i23 = 1; i23 < 2; i23 += 3) {
                        Test.fFld += i19;
                        iArr[i23 - 1] += Test.byFld;
                        i24 *= -2;
                        i1 *= i23;
                    }
                    for (i25 = 1; i25 < 2; ++i25) {
                        iArr[i14 - 1] &= i22;
                        iArr[i14] >>= i19;
                        i24 += (i25 * i25);
                    }
                }
            } else {
                Test.instanceCount = Test.instanceCount;
            }
        }
        vMeth_check_sum += i1 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {
        double d = -68.111090, d3 = 0.44029;
        int i = -2324, i27 = -18866, i28 = -8, i29 = 50029, i30 = 166, i31 = 2, i32 = -56755, i33 = 0, i34 = -13, i35 = 19713, i36 = 12, i37 = -1;
        float f = 1.817F;
        boolean b2 = true;
        byte by2 = 86, byArr[] = new byte[N];
        long l2 = -31047L;
        FuzzerUtils.init(byArr, (byte) -21);
        d = 1;
        do {
            i >>>= (int) (((Test.instanceCount + i) * (--f)) + (i *= (int) (Test.instanceCount + -120.674F)));
            i = Integer.reverseBytes((int) ((i + i) % (Math.max(Test.instanceCount, Test.instanceCount) | 1)));
            {
                java.io.PrintStream ax$26 = System.out;
                java.io.PrintStream ax$27 = System.err;
                java.io.PrintStream ax$28 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$28);
                System.setErr(ax$28);
                try {
                    ax$19 = true;
                    for (int ax$24 = 0; ax$24 < 6631; ax$24 += 1) vMeth();
                } catch (java.lang.Throwable ax$25) {
                } finally {
                    ax$19 = false;
                }
                System.setOut(ax$26);
                System.setErr(ax$27);
            }
            vMeth();
            for (i27 = 1; i27 < 23; ++i27) {
                i += i27;
                Test.iArrFld[(int) (d - 1)] += i28;
                Test.dArrFld[(i27 >>> 1) % N] *= i28;
                i >>= -37679;
                Test.instanceCount += Test.instanceCount;
            }
            Test.iArrFld[(int) (d)] &= i28;
            for (i29 = 1; i29 < 23; ++i29) {
                {
                    java.io.PrintStream ax$0 = System.out;
                    java.io.PrintStream ax$1 = System.err;
                    java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$2);
                    System.setErr(ax$2);
                    {
                        boolean ax$8 = false;
                        for (int ax$7 = -4181; ax$7 < 5120; ax$7 += 7) {
                            if (!ax$8) {
                                ax$8 = true;
                                {
                                    System.setOut(ax$0);
                                    System.setErr(ax$1);
                                    try {
                                        Test.iArrFld[(int) (d + 1)] = (i29 % 3639);
                                        i30 = (Test.iArrFld[(int) (d - 1)] % i29);
                                        i28 = (i / i30);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    System.setOut(ax$2);
                                    System.setErr(ax$2);
                                }
                            }
                            boolean ax$5 = b2;
                            try {
                                boolean[] ax$3 = new boolean[1];
                                for (// NOTE: bitwise and, not the common &&
                                // NOTE: bitwise and, not the common &&
                                // NOTE: bitwise and, not the common &&
                                int ax$4 = 0; ax$4 < 128; ax$4++) ax$3[ax$4] &= b2;
                            } catch (Throwable ax$6) {
                            } finally {
                                b2 = ax$5;
                            }
                        }
                    }
                    System.setOut(ax$0);
                    System.setErr(ax$1);
                }
                Test.instanceCount = -33768;
                i -= Test.sFld;
                switch(((i29 % 2) * 5) + 74) {
                    case 78:
                        b2 = b2;
                        i -= i27;
                        i30 *= i;
                        b2 = true;
                        for (i31 = 1; i31 < 2; ++i31) {
                            try {
                                i28 = (i28 % -50690);
                                Test.iArrFld[(int) (d + 1)] = (Test.iArrFld[i29] % -58308);
                                Test.iArrFld1[i29 + 1] = (i / -777293352);
                            } catch (ArithmeticException a_e) {
                            }
                        }
                        i += (i29 * i29);
                        Test.dArrFld[i29] = 1029157317695988142L;
                        Test.iArrFld[(int) (d)] >>= (int) Test.instanceCount;
                        i33 = 1;
                        do {
                            Test.instanceCount = 5587;
                            i30 = i30;
                            i30 ^= i32;
                            i28 -= i32;
                            i32 += (int) dFld;
                            Test.sFld |= (short) i;
                            i28 ^= i33;
                            i30 = i30;
                            i32 >>= 6777;
                            Test.byFld += (byte) d;
                            Test.byFld -= (byte) i;
                            Test.lArrFld[i29] <<= i;
                            i28 >>= (int) -7L;
                            i28 <<= i29;
                        } while (++i33 < 2);
                        break;
                    case 82:
                        Test.fFld -= -585;
                        Test.instanceCount += (i29 - i31);
                        for (d3 = 1; d3 < 2; d3++) {
                            Test.instanceCount >>>= 7377809296663926221L;
                            Test.byFld = (byte) i33;
                            Test.instanceCount *= Test.byFld;
                            i30 += (int) (((d3 * i31) + by2) - by2);
                            Test.iArrFld = FuzzerUtils.int1array(N, (int) 50548);
                            Test.instanceCount <<= i34;
                            Test.sFld *= (short) i34;
                            Test.instanceCount = Test.instanceCount;
                            i <<= i;
                            i30 += -40679;
                            i34 = i33;
                            i30 += (int) d3;
                            Test.lArrFld = Test.lArrFld;
                        }
                        i32 += (-37731 + (i29 * i29));
                        break;
                    default:
                        i30 += (i29 * i30);
                        i30 ^= i33;
                }
                i32 = (int) -5L;
                Test.lArrFld[(int) (d - 1)] += i34;
                Test.dArrFld[i29 + 1] -= i29;
                if (b2)
                    break;
                i30 -= i28;
                i30 -= -12;
                i28 = i32;
                Test.instanceCount -= i27;
            }
            for (l2 = 1; l2 < 23; l2++) {
                switch((int) ((d % 2) + 2)) {
                    case 2:
                        Test.sFld += (short) l2;
                        for (i36 = 2; 1 < i36; i36 -= 2) {
                            switch((int) ((d % 6) + 90)) {
                                case 90:
                                    by2 += (byte) (2630454501723967834L + (i36 * i36));
                                    i34 = (int) f;
                                    byArr[i36] = (byte) i32;
                                    break;
                                case 91:
                                    i30 += (int) Test.instanceCount;
                                case 92:
                                    i = (int) -2.734F;
                                    break;
                                case 93:
                                    i30 = i31;
                                case 94:
                                    if (b2)
                                        break;
                                    break;
                                case 95:
                                    i37 = (int) l2;
                                    break;
                                default:
                                    i37 = Test.byFld;
                            }
                        }
                        break;
                    case 3:
                        Test.iArrFld1[(int) (d + 1)] -= (int) f;
                        break;
                }
            }
        } while (++d < 227);
        FuzzerUtils.out.println("d i f = " + Double.doubleToLongBits(d) + "," + i + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 b2 i31 = " + i30 + "," + (b2 ? 1 : 0) + "," + i31);
        FuzzerUtils.out.println("i32 i33 d3 = " + i32 + "," + i33 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i34 by2 l2 = " + i34 + "," + by2 + "," + l2);
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("Test.instanceCount dFld Test.fFld = " + Test.instanceCount + "," + Double.doubleToLongBits(dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld Test.byFld Test.lArrFld = " + Test.sFld + "," + Test.byFld + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld Test.dArrFld Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld1));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
        {
            java.io.PrintStream ax$16 = System.out;
            java.io.PrintStream ax$17 = System.err;
            java.io.PrintStream ax$18 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$18);
            System.setErr(ax$18);
            try {
                for (int ax$14 = -2620; ax$14 < 3702; ax$14 += 1) {
                    try {
                        short[] ax$12 = new short[] { 20, 10, 0, -10, -20 };
                        short[] ax$9 = new short[] { 20, 10, 0, -10, -20 };
                        int ax$10 = 12295;
                        for (int ax$11 = 0; ax$11 < ax$10; ax$11++) {
                            ax$12[ax$11] = (short) (ax$9[ax$11] >> 1);
                        }
                    } catch (Throwable ax$13) {
                    } finally {
                    }
                }
            } catch (Throwable ax$15) {
            }
            System.setOut(ax$16);
            System.setErr(ax$17);
        }
    }

    private static Boolean ax$19 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
