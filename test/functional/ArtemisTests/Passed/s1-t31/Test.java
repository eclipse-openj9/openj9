// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = -3398672448278064976L;

    public boolean bFld = false;

    public byte byFld = 37;

    public double dFld = 1.30644;

    public static int iFld = -14246;

    public static int[] iArrFld = new int[N];

    public static byte[] byArrFld = new byte[N];

    public static float[] fArrFld = new float[N];

    public static long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -37760);
        FuzzerUtils.init(Test.byArrFld, (byte) -98);
        FuzzerUtils.init(Test.fArrFld, 37.757F);
        FuzzerUtils.init(Test.lArrFld, 5561987864513267864L);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {
        if (ax$17) {
            int ax$25 = iFld;
            try {
                int ax$24 = 0xff80;
                for (int ax$23 = 0; ax$23 < ax$24; ax$23++) {
                    int ax$21 = iFld;
                    iFld = ax$21 + ax$23;
                    int ax$22 = iFld;
                    iFld = ax$22 + 2 * ax$23;
                }
            } catch (Throwable ax$26) {
            } finally {
                iFld = ax$25;
            }
            return;
        }
        int i7 = 49693, i8 = -153, i9 = -2, i10 = 2, i11 = 3, i12 = 8, i13 = -1, i14 = 59115, i15 = 13, iArr1[] = new int[N];
        double d1 = -83.106990;
        short s = 31533;
        float f = 0.953F;
        boolean b = false;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, -3969576142L);
        FuzzerUtils.init(iArr1, -145);
        Test.instanceCount &= Test.instanceCount;
        for (i7 = 13; 226 > i7; ++i7) {
            d1 += i7;
        }
        for (i9 = 2; i9 < 135; ++i9) {
            Test.instanceCount &= s;
            i8 -= (int) Test.instanceCount;
            f -= 65.586F;
        }
        b = b;
        i11 = 108;
        do {
            for (i12 = 1; 5 > i12; ++i12) {
                i13 = (int) Test.instanceCount;
                f = -186;
                i10 -= 47;
                s = (short) -35866;
                lArr[i12] >>= Test.instanceCount;
                if (b)
                    continue;
                iArr1[i12 + 1] = i9;
                i14 = 1;
                do {
                    i13 += (i14 - Test.instanceCount);
                    Test.instanceCount += (((i14 * i12) + Test.instanceCount) - i12);
                    i8 += (int) Test.instanceCount;
                    lArr = lArr;
                    iArr1[i14 + 1] -= (int) f;
                    s *= (short) Test.instanceCount;
                    if (false) {
                        i13 += 89;
                        f -= Test.instanceCount;
                        i10 -= i8;
                        i10 += (((i14 * i8) + Test.instanceCount) - Test.instanceCount);
                        switch(i11 % 10) {
                            case 0:
                                f -= i15;
                                iArr1[i11 + 1] = (int) Test.instanceCount;
                                i10 += (int) 1207213630155885649L;
                                i15 = i11;
                                Test.instanceCount -= Test.instanceCount;
                                Test.instanceCount -= (long) d1;
                                i13 -= i7;
                                break;
                            case 1:
                                Test.instanceCount *= i10;
                            case 2:
                                f = i12;
                            case 3:
                                Test.instanceCount = i12;
                            case 4:
                                i10 += (((i14 * i11) + i11) - i9);
                                break;
                            case 5:
                                i13 += (i14 + i9);
                            case 6:
                                b = b;
                                break;
                            case 7:
                                iArr1[i12] %= (int) ((long) (f) | 1);
                                break;
                            case 8:
                                iArr1 = iArr1;
                                break;
                            case 9:
                                i10 *= (int) Test.instanceCount;
                            default:
                                f -= i12;
                        }
                    } else {
                        iArr1[i14 - 1] &= i7;
                    }
                } while (++i14 < 2);
            }
        } while (--i11 > 0);
        vMeth1_check_sum += i7 + i8 + Double.doubleToLongBits(d1) + i9 + i10 + s + Float.floatToIntBits(f) + (b ? 1 : 0) + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i6, double d) {
        int i16 = 53, i17 = 235, i18 = -9, i19 = -53772, i20 = 5, i21 = 0, i22 = -50352, i23 = 75, i24 = -27680, i25 = -7, i26 = 227, i27 = -6181, i28 = -14, i29 = -130, i30 = -39590;
        float f1 = 3.416F, fArr[] = new float[N];
        double d2 = 0.41445;
        byte by = 74;
        short s1 = 8513;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(fArr, 2.708F);
        FuzzerUtils.init(lArr1, 5L);
        {
            java.io.PrintStream ax$29 = System.out;
            java.io.PrintStream ax$30 = System.err;
            java.io.PrintStream ax$31 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$31);
            System.setErr(ax$31);
            try {
                ax$17 = true;
                for (int ax$27 = 0; ax$27 < 6457; ax$27 += 1) vMeth1();
            } catch (java.lang.Throwable ax$28) {
            } finally {
                ax$17 = false;
            }
            System.setOut(ax$29);
            System.setErr(ax$30);
        }
        vMeth1();
        i6 += (int) Test.instanceCount;
        i6 += i6;
        for (i16 = 3; i16 < 155; i16++) {
            f1 = -14;
            for (d2 = 1; 4 > d2; ++d2) {
                i18 -= i17;
                Test.iArrFld[i16 - 1] -= i16;
                Test.instanceCount += by;
            }
            f1 += (21458 + (i16 * i16));
        }
        Test.instanceCount = i6;
        for (i19 = 108; i19 > 4; --i19) {
            for (i21 = 1; i21 < 5; i21++) {
                i20 += (((i21 * i17) + f1) - i20);
                i20 += (i21 | (long) f1);
            }
            i17 += i19;
        }
        for (i23 = 3; i23 < 163; i23++) {
            d += i20;
            Test.instanceCount += (long) d;
            i18 += (i23 * i23);
            fArr[i23] -= i18;
            Test.iArrFld[i23] = i22;
            for (i25 = 1; 4 > i25; i25++) {
                Test.instanceCount += (i25 - f1);
                Test.iArrFld[i25 - 1] += s1;
            }
            lArr1[i23] -= i19;
            if (i25 != 0) {
            }
            for (i27 = 1; i27 < 4; i27++) {
                i24 += s1;
                f1 -= (float) d;
                i24 += i23;
                for (i29 = 1; 2 > i29; i29 += 3) {
                    switch((i27 % 4) + 17) {
                        case 17:
                            i17 *= (int) d2;
                            lArr1[i23 + 1] = 40528;
                            if (false)
                                break;
                            d -= i17;
                            break;
                        case 18:
                            Test.iArrFld[i27 + 1] = 59369;
                            break;
                        case 19:
                            Test.instanceCount ^= i21;
                            break;
                        case 20:
                        default:
                            i26 = -107;
                    }
                }
            }
        }
        long meth_res = i6 + Double.doubleToLongBits(d) + i16 + i17 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + i18 + by + i19 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + s1 + i27 + i28 + i29 + i30 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void vMeth(int i, int i1) {
        int i2 = 26874, i3 = 14, i4 = -39973, i5 = 17, i31 = -77, i32 = 103, i33 = -8731, i34 = -44169, i35 = -7, i36 = 18553, i37 = 0, i38 = -17007, i39 = -13, i40 = 13, iArr[][] = new int[N][N];
        double d3 = -38.82856;
        float f2 = 0.933F, f3 = -86.393F, fArr1[] = new float[N];
        long[] lArr2 = new long[N];
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr, -9089);
        FuzzerUtils.init(lArr2, -47457L);
        FuzzerUtils.init(byArr, (byte) 73);
        FuzzerUtils.init(fArr1, 84.683F);
        for (i2 = 13; i2 < 210; i2++) {
            iArr[i2 - 1][i2 - 1] -= i1;
            for (i4 = 1; i4 < 3; ++i4) {
                i3 = iMeth(i5, d3);
            }
            if (i != 0) {
                vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d3) + i31 + i32 + Float.floatToIntBits(f2) + i33 + i34 + i35 + i36 + i37 + i38 + Float.floatToIntBits(f3) + i39 + i40 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                return;
            }
            {
                java.io.PrintStream ax$4 = System.out;
                java.io.PrintStream ax$5 = System.err;
                java.io.PrintStream ax$6 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$6);
                System.setErr(ax$6);
                try {
                    for (int ax$2 = -1256; ax$2 < 5118; ax$2 += 1) {
                        try {
                            int[] ax$0 = { -11 };
                            ax$0[0] = 6;
                        } catch (Throwable ax$1) {
                        } finally {
                        }
                    }
                } catch (Throwable ax$3) {
                }
                System.setOut(ax$4);
                System.setErr(ax$5);
            }
            iArr[i2][i2 + 1] = i;
            if (i4 != 0) {
                vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d3) + i31 + i32 + Float.floatToIntBits(f2) + i33 + i34 + i35 + i36 + i37 + i38 + Float.floatToIntBits(f3) + i39 + i40 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                return;
            }
            i += i2;
            for (i31 = 3; i31 > 1; i31--) {
                f2 = 90;
                f2 += (i31 * f2);
            }
            for (i33 = 1; i33 < 3; ++i33) {
                lArr2[i2 - 1] = Test.instanceCount;
                f2 += (((i33 * i2) + i1) - i3);
                i1 >>= i31;
                lArr2[i2] = i3;
                lArr2[i33 + 1] *= (long) d3;
                i3 += i33;
                lArr2[i33 - 1] = i1;
            }
            if (i33 != 0) {
                vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d3) + i31 + i32 + Float.floatToIntBits(f2) + i33 + i34 + i35 + i36 + i37 + i38 + Float.floatToIntBits(f3) + i39 + i40 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                return;
            }
            switch(((i2 % 4) * 5) + 61) {
                case 76:
                case 71:
                    for (i35 = 1; i35 < 3; i35++) {
                        Test.instanceCount = -13;
                        bFld = bFld;
                        byArr = byArr;
                        i3 = i1;
                        for (i37 = i35; i37 < 2; i37++) {
                            i36 = i1;
                            Test.instanceCount -= -49798;
                            lArr2[i2] = i31;
                        }
                        fArr1 = fArr1;
                        if (bFld)
                            break;
                        i5 += (i35 * f3);
                    }
                    for (i39 = 1; i39 < 3; ++i39) {
                        i3 >>= i39;
                    }
                    if (bFld)
                        continue;
                    break;
                case 64:
                    f3 += ((long) i2 ^ (long) i39);
                    break;
                case 74:
                    i40 += (i2 ^ Test.instanceCount);
                default:
                    i40 += (i2 * i2);
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d3) + i31 + i32 + Float.floatToIntBits(f2) + i33 + i34 + i35 + i36 + i37 + i38 + Float.floatToIntBits(f3) + i39 + i40 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {
        int i41 = 11, i42 = -8, i43 = 11, i44 = 14, i45 = -10633, i46 = 108, i47 = -4, i48 = -41716, i49 = 26719, i50 = -84;
        long l = 2914247897L, l1 = 0L, l2 = 13L;
        float f4 = 2.704F, f5 = 19.845F;
        short s3 = -20502;
        double[] dArr = new double[N];
        FuzzerUtils.init(dArr, -42.70607);
        vMeth(i41, i41);
        l = 1;
        do {
            i41 = i41;
        } while (++l < 163);
        for (i42 = 4; i42 < 126; i42++) {
            i41 += (((i42 * i43) + f4) - i42);
            i43 = i43;
            i41 = i43;
            for (i44 = 1; i44 < 41; ++i44) {
                short s2 = -14854;
                switch(((-40911 >>> 1) % 2) + 2) {
                    case 2:
                        switch((i44 % 8) + 30) {
                            case 30:
                                Test.iArrFld[i44 - 1] += (int) l;
                                Test.instanceCount += Test.instanceCount;
                                Test.byArrFld[i42 - 1] -= (byte) s2;
                                i45 += (int) f4;
                                i41 += i44;
                                i43 += (((i44 * i43) + i43) - f4);
                                if (bFld)
                                    continue;
                                Test.iArrFld[i44 + 1] >>>= i41;
                                Test.iArrFld[i44] -= i45;
                                try {
                                    i45 = (i41 % -11068);
                                    i41 = (22441 / i45);
                                    i45 = (10321 / i41);
                                } catch (ArithmeticException a_e) {
                                }
                                {
                                    java.io.PrintStream ax$14 = System.out;
                                    java.io.PrintStream ax$15 = System.err;
                                    java.io.PrintStream ax$16 = new java.io.PrintStream(new java.io.OutputStream() {

                                        @Override
                                        public void write(int b) throws java.io.IOException {
                                            // DO NOTHING: DISCARD ALL OUTPUTS
                                        }
                                    });
                                    System.setOut(ax$16);
                                    System.setErr(ax$16);
                                    try {
                                        for (int ax$12 = -1229; ax$12 < 5537; ax$12 += 1) {
                                            try {
                                                java.lang.Short ax$9 = new Short((short) 0xFFFFFFFF);
                                                java.lang.Short ax$10 = new Short((short) 1);
                                                short[] ax$7 = new short[] { 20, 10, 0, -10, -20 };
                                                for (Short ax$8 : ax$7) {
                                                    ax$10 = (short) (ax$10 + ax$8);
                                                    ax$9 = (short) (ax$9 + new Short((short) (ax$8 + 1)));
                                                }
                                            } catch (Throwable ax$11) {
                                            } finally {
                                            }
                                        }
                                    } catch (Throwable ax$13) {
                                    }
                                    System.setOut(ax$14);
                                    System.setErr(ax$15);
                                }
                                i43 /= 4;
                                i45 -= -10;
                                i41 = i43;
                                byFld *= (byte) l;
                                for (i46 = 1; i46 < 2; i46++) {
                                    Test.iArrFld[i44 - 1] = i47;
                                    Test.iArrFld[i44] -= byFld;
                                    s3 *= (short) f4;
                                    i47 += i46;
                                }
                                break;
                            case 31:
                                i45 >>= -238;
                                i47 += (((i44 * i45) + i45) - Test.instanceCount);
                                bFld = bFld;
                                if (bFld)
                                    continue;
                                i45 += i45;
                                bFld = bFld;
                                break;
                            case 32:
                                i41 += i44;
                                f4 += (-119L + (i44 * i44));
                                f4 += (((i44 * Test.instanceCount) + i41) - i45);
                                dArr[i44 + 1] -= Test.instanceCount;
                                for (i48 = 1; 2 > i48; ++i48) {
                                    byFld = (byte) -9;
                                    i43 -= i43;
                                    i41 += (int) l;
                                    f4 = 160;
                                    Test.iArrFld[i48 - 1] = i49;
                                    if (bFld)
                                        break;
                                    i41 *= 53008;
                                }
                                Test.iArrFld[i42 - 1] *= s3;
                                i45 += (((i44 * l) + i42) - i47);
                                for (f5 = 1; f5 < 2; ++f5) {
                                    i45 >>= (int) -2323646971L;
                                    i50 += (37 + (f5 * f5));
                                    if (bFld)
                                        break;
                                    l1 = 112;
                                    f4 += i49;
                                    i45 = i46;
                                    i49 += i47;
                                    if (bFld) {
                                        dFld += l1;
                                        Test.fArrFld[i42 - 1] += s3;
                                    } else if (bFld) {
                                        i47 += (int) ((long) f5 | i41);
                                        l1 = l1;
                                        Test.lArrFld[(int) (f5)] *= i44;
                                        i49 += i44;
                                        i47 += i42;
                                        i41 = byFld;
                                        i45 += (3 + (f5 * f5));
                                        i47 = (int) Test.instanceCount;
                                        Test.iArrFld[i42 + 1] = -31346;
                                        Test.lArrFld[i42] -= i49;
                                    } else {
                                        Test.iArrFld[i44 + 1] -= i49;
                                        Test.instanceCount = 37551;
                                        if (bFld)
                                            break;
                                        dFld = Test.iFld;
                                        i45 += (int) (((f5 * i42) + f5) - Test.iFld);
                                    }
                                }
                                break;
                            case 33:
                                bFld = bFld;
                                break;
                            case 34:
                                l1 <<= i45;
                                break;
                            case 35:
                                bFld = bFld;
                                break;
                            case 36:
                                i45 += i44;
                                break;
                            case 37:
                                Test.iArrFld = Test.iArrFld;
                                break;
                        }
                        break;
                    case 3:
                        i49 -= 199;
                        break;
                    default:
                        Test.instanceCount += l2;
                }
            }
        }
        FuzzerUtils.out.println("i41 l i42 = " + i41 + "," + l + "," + i42);
        FuzzerUtils.out.println("i43 f4 i44 = " + i43 + "," + Float.floatToIntBits(f4) + "," + i44);
        FuzzerUtils.out.println("i45 i46 i47 = " + i45 + "," + i46 + "," + i47);
        FuzzerUtils.out.println("s3 i48 i49 = " + s3 + "," + i48 + "," + i49);
        FuzzerUtils.out.println("f5 i50 l1 = " + Float.floatToIntBits(f5) + "," + i50 + "," + l1);
        FuzzerUtils.out.println("l2 dArr = " + l2 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("Test.instanceCount bFld byFld = " + Test.instanceCount + "," + (bFld ? 1 : 0) + "," + byFld);
        FuzzerUtils.out.println("dFld Test.iFld Test.iArrFld = " + Double.doubleToLongBits(dFld) + "," + Test.iFld + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.byArrFld Test.fArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$17 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
