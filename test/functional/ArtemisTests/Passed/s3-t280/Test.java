// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.UUID;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 177L;

    public static volatile short sFld = -1395;

    public double dFld = 4.2750;

    public boolean bFld = false;

    public static volatile int iFld = 162;

    public static volatile int[] iArrFld = new int[N];

    public long[] lArrFld = new long[N];

    public static float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -21314);
        FuzzerUtils.init(Test.fArrFld, 0.174F);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth() {
        int i13 = 11, i14 = 6, i15 = -50828, i16 = -238, i17 = 2187, i18 = 1, i19 = -22709, i20 = 3, i21 = 8;
        float f = 0.315F;
        double d1 = -1.85609;
        byte by = 84;
        long l = -11L, lArr1[] = new long[N];
        boolean b = false;
        FuzzerUtils.init(lArr1, -182L);
        i13 -= i13;
        Test.iArrFld[(i13 >>> 1) % N] *= i13;
        for (i14 = 11; i14 < 203; i14++) {
            for (i16 = 1; i16 < 3; i16++) {
                Test.instanceCount %= ((long) (f) | 1);
                Test.instanceCount += (i16 * i16);
                i13 = (int) -47828L;
                d1 = f;
                i17 += by;
                Test.iArrFld[i16 - 1] *= (int) Test.instanceCount;
            }
            if (i15 != 0) {
            }
            i18 = 1;
            while (++i18 < 3) {
                Test.instanceCount = -54003;
                i13 = i15;
                for (i19 = i18; i19 < 1; i19 += 3) {
                    i13 = i17;
                }
                Test.sFld >>= (short) i19;
                i15 = -106;
                i21 = 1;
                do {
                    d1 -= i13;
                    i17 -= (int) d1;
                    i13 = i17;
                    i15 = (int) l;
                    f *= by;
                    if (b)
                        break;
                    if (b) {
                        i13 -= i20;
                        i15 -= (int) l;
                        d1 += f;
                        Test.instanceCount = 41298;
                        Test.sFld = (short) i16;
                        Test.sFld -= (short) 6661;
                        i15 ^= i16;
                        Test.instanceCount += i21;
                        Test.iArrFld[i21 - 1] += i19;
                        if (i20 != 0) {
                        }
                        lArr1[i18 - 1] = Test.instanceCount;
                    } else {
                        Test.sFld = (short) i21;
                    }
                } while (++i21 < 1);
            }
        }
        long meth_res = i13 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + by + i18 + i19 + i20 + i21 + l + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static int iMeth(int i4) {
        int i5 = -24524, i6 = -64029, i7 = 7, i8 = -29337, i9 = 14, i10 = -9, i11 = 27990, i12 = 11, i22 = -57996, iArr[] = new int[N];
        short s = -26731;
        double d = 61.73114;
        boolean b1 = true, bArr[] = new boolean[N];
        float f1 = 28.518F;
        long[] lArr = new long[N];
        FuzzerUtils.init(iArr, -43305);
        FuzzerUtils.init(lArr, -173L);
        FuzzerUtils.init(bArr, true);
        for (i5 = 3; i5 < 98; i5++) {
            s = (short) i4;
            i4 += i5;
            Test.instanceCount = (long) (i5 - ((--d) + (Test.instanceCount >> Test.instanceCount)));
        }
        for (i7 = 9; i7 < 203; i7++) {
            for (i9 = i7; i9 < 3; i9++) {
                for (i11 = 1; i11 < 1; ++i11) {
                    iArr = (iArr = iArr);
                    i12 = (++i8);
                    if (i7 != 0) {
                    }
                    if (true) {
                        s += (short) (lArr[i7] - Test.instanceCount);
                        Test.instanceCount = Math.min(Math.abs(-3859591521129733808L), lMeth());
                        i4 += (-48485 + (i11 * i11));
                    } else {
                        if (true)
                            break;
                        i6 <<= 233;
                        bArr[i7] = b1;
                        i6 ^= i4;
                    }
                }
                i22 = 1;
                while (++i22 < 1) {
                    i8 = i9;
                    if (b1)
                        continue;
                    i8 >>>= i9;
                    Test.instanceCount <<= 11;
                    switch(((i7 % 2) * 5) + 59) {
                        case 65:
                            i8 += (((i22 * Test.instanceCount) + Test.instanceCount) - i7);
                            i12 &= (int) Test.instanceCount;
                            i4 &= i11;
                            i10 = s;
                            i12 += (((i22 * i7) + f1) - i22);
                            i8 = (int) f1;
                            iArr[i9 + 1] -= (int) Test.instanceCount;
                            f1 = i12;
                            i6 = i8;
                            Test.iArrFld[i7 - 1] += i10;
                            i12 = i10;
                            i12 *= (int) Test.instanceCount;
                            Test.instanceCount = i4;
                            break;
                        case 60:
                            Test.iArrFld[i7 - 1] *= (int) Test.instanceCount;
                            break;
                        default:
                            d *= i12;
                    }
                }
            }
        }
        long meth_res = i4 + i5 + i6 + s + Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 + i11 + i12 + (b1 ? 1 : 0) + i22 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth() {
        int i2 = 0, i3 = -50033;
        long[] lArr2 = new long[N];
        FuzzerUtils.init(lArr2, -7898341055628698091L);
        for (i2 = 3; 230 > i2; i2++) {
            Test.instanceCount >>= (iMeth(i2) * Test.sFld);
            lArr2[i2] -= 178;
            i3 = i3;
            if (true)
                continue;
        }
        vMeth_check_sum += i2 + i3 + FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {
        int i = -48, i1 = 25408, i23 = 219, i24 = 22662, i25 = 17, i26 = -41086, i27 = 26547, i28 = 56966, i29 = 2265, i30 = -1413, i31 = 29611;
        float f2 = 15.259F, fArr[] = new float[N];
        boolean b2 = false;
        long l1 = 1729358330L;
        byte by1 = 22;
        double[] dArr = new double[N];
        short[] sArr = new short[N];
        FuzzerUtils.init(fArr, -20.982F);
        FuzzerUtils.init(dArr, 1.55486);
        FuzzerUtils.init(sArr, (short) -26425);
        for (i = 1; i < 166; i++) {
            vMeth();
            i23 = 31;
            while (--i23 > 0) {
                switch(((i23 % 5) * 5) + 4) {
                    case 14:
                        Test.iArrFld[i] = i;
                        if (b2) {
                            try {
                                i1 = (i % -219);
                                i1 = (i23 / 1703429828);
                                i1 = (i23 % Test.iArrFld[i]);
                            } catch (ArithmeticException a_e) {
                            }
                            i1 |= i23;
                            i1 = i;
                            for (i24 = 1; i24 > 1; i24--) {
                                Test.instanceCount *= (long) f2;
                                b2 = false;
                                fArr[i24] -= (float) dFld;
                                i25 = (int) Test.instanceCount;
                                try {
                                    Test.iArrFld[i24 - 1] = (i24 / Test.iArrFld[i24 + 1]);
                                    i25 = (55 / i25);
                                    i1 = (Test.iArrFld[i - 1] / i);
                                } catch (ArithmeticException a_e) {
                                }
                                lArrFld[i24] = -15484;
                                i25 += (int) Test.instanceCount;
                                i25 *= (int) -109.747F;
                                f2 += (float) dFld;
                                Test.sFld = (short) Test.instanceCount;
                                dFld += -6;
                                i25 = i25;
                                dArr = dArr;
                            }
                            Test.instanceCount = i24;
                            if (b2)
                                continue;
                            i25 >>= i1;
                            for (l1 = i23; l1 < 1; ++l1) {
                                if (b2)
                                    continue;
                                dFld = 12L;
                                dFld += i1;
                                i25 *= (int) f2;
                                by1 += (byte) 51.221F;
                                bFld = b2;
                                f2 -= i25;
                                Test.sFld >>= (short) i26;
                                by1 >>= (byte) Test.iFld;
                                sArr = sArr;
                                Test.instanceCount *= i1;
                                Test.instanceCount = l1;
                            }
                            Test.instanceCount *= Test.iFld;
                            switch((i23 % 1) + 122) {
                                case 122:
                                    Test.instanceCount += (((i23 * l1) + f2) - i1);
                                    {
                                        java.io.PrintStream ax$0 = System.out;
                                        java.io.PrintStream ax$1 = System.err;
                                        java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                            @Override
                                            public void write(int b) throws java.io.IOException {
                                                // DO NOTHING: DISCARD ALL OUTPUTS
                                            }
                                        });
                                        System.setOut(ax$2);
                                        System.setErr(ax$2);
                                        {
                                            boolean ax$7 = false;
                                            for (int ax$6 = -1183; ax$6 < 5005; ax$6 += 7) {
                                                if (!ax$7) {
                                                    ax$7 = true;
                                                    {
                                                        System.setOut(ax$0);
                                                        System.setErr(ax$1);
                                                        for (i27 = 1; 1 > i27; ++i27) {
                                                            Test.iArrFld[i27] <<= i28;
                                                            dArr[i - 1] += i;
                                                        }
                                                        System.setOut(ax$2);
                                                        System.setErr(ax$2);
                                                    }
                                                }
                                                int ax$4 = i29;
                                                try {
                                                    int[][] ax$3 = new int[10][];
                                                    // "above" the deoptimization "barrier" on the bounds.
                                                    ax$3[1][i29] = 1;
                                                    ax$3[2][i29] = 2;
                                                    ax$3[99][i29] = 3;
                                                } catch (Throwable ax$5) {
                                                } finally {
                                                    i29 = ax$4;
                                                }
                                            }
                                        }
                                        System.setOut(ax$0);
                                        System.setErr(ax$1);
                                    }
                                    i26 = (int) -1.62133;
                                    bFld = b2;
                            }
                            i1 -= i25;
                            i1 += (i23 * l1);
                            Test.instanceCount = i;
                            Test.instanceCount += i23;
                        }
                        Test.fArrFld[i] -= by1;
                        switch((i23 % 7) + 55) {
                            case 55:
                            case 56:
                                i29 = 1;
                                while (++i29 < 1) {
                                    i25 = i25;
                                    Test.iFld >>= (int) 3281342751L;
                                    i1 += (((i29 * Test.instanceCount) + i23) - Test.sFld);
                                    Test.instanceCount *= (long) -123.116681;
                                    i28 = (int) 656181103543086045L;
                                    by1 = (byte) i25;
                                    Test.instanceCount <<= 0;
                                    i25 += (i29 * i24);
                                    i26 = 1;
                                    Test.iFld += i29;
                                    Test.iFld += i29;
                                }
                                i26 += -252;
                                i26 *= i1;
                                Test.iFld += (((i23 * f2) + l1) - l1);
                                for (i30 = 1; i30 < 1; i30++) {
                                    dFld -= 205;
                                    Test.instanceCount = Test.iFld;
                                    if (bFld)
                                        break;
                                    i26 += (((i30 * i28) + i28) - i24);
                                }
                                lArrFld[i] -= Test.instanceCount;
                                b2 = bFld;
                                break;
                            case 57:
                                i1 += (int) dFld;
                                break;
                            case 58:
                                f2 *= i27;
                                break;
                            case 59:
                                by1 += (byte) 33;
                                break;
                            case 60:
                                Test.instanceCount += (-5131 + (i23 * i23));
                                break;
                            case 61:
                                i28 += i23;
                                break;
                        }
                        break;
                    case 26:
                        Test.iFld += (i23 * i24);
                    case 15:
                        bFld = b2;
                        break;
                    case 17:
                    case 21:
                        Test.instanceCount = 8;
                        break;
                    default:
                        dFld = i31;
                }
            }
        }
        FuzzerUtils.out.println("i i1 i23 = " + i + "," + i1 + "," + i23);
        FuzzerUtils.out.println("i24 i25 f2 = " + i24 + "," + i25 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("b2 l1 i26 = " + (b2 ? 1 : 0) + "," + l1 + "," + i26);
        FuzzerUtils.out.println("by1 i27 i28 = " + by1 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("fArr dArr sArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld dFld = " + Test.instanceCount + "," + Test.sFld + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("bFld Test.iFld Test.iArrFld = " + (bFld ? 1 : 0) + "," + Test.iFld + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
        {
            java.io.PrintStream ax$12 = System.out;
            java.io.PrintStream ax$13 = System.err;
            java.io.PrintStream ax$14 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$14);
            System.setErr(ax$14);
            try {
                for (int ax$10 = -4847; ax$10 < 1200; ax$10 += 1) {
                    try {
                        java.util.UUID ax$8 = new UUID(34L, 64L);
                        try {
                            ax$8.timestamp();
                        } catch (UnsupportedOperationException uoe) {
                            // Correct result
                        }
                    } catch (Throwable ax$9) {
                    } finally {
                    }
                }
            } catch (Throwable ax$11) {
            }
            System.setOut(ax$12);
            System.setErr(ax$13);
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
