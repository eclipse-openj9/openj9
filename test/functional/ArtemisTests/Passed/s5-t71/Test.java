// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.Inet6Address;
import java.net.InetAddress;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -56L;

    public static volatile int iFld = -45723;

    public static short sFld = 9610;

    public static float fFld = -46.521F;

    public static double dFld = -96.122313;

    public static int iArrFld[] = new int[N];

    public static float fArrFld[] = new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 7);
        FuzzerUtils.init(Test.fArrFld, 0.58F);
    }

    public static long vMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i8, boolean b) {
        int i9 = -34;
        int i10 = -12;
        int i11 = -43;
        int i12 = -10;
        int i13 = 2;
        int iArr[] = new int[N];
        int iArr1[] = new int[N];
        float f1 = 0.864F;
        double d = 2.112292;
        double dArr[] = new double[N];
        short s = 13097;
        short sArr[] = new short[N];
        long lArr[] = new long[N];
        FuzzerUtils.init(lArr, -1009480194130233607L);
        FuzzerUtils.init(sArr, ((short) (14929)));
        FuzzerUtils.init(dArr, -94.11137);
        FuzzerUtils.init(iArr, -86);
        FuzzerUtils.init(iArr1, 61);
        Test.iArrFld[((-221) >>> 1) % N] = ((int) (Test.instanceCount));
        i8 = ((int) (Test.instanceCount));
        for (i9 = 3; i9 < 144; i9++) {
            switch ((((-6) >>> 1) % 2) + 97) {
                case 97 :
                    lArr[i9] >>= 3126836781298182488L;
                    i11 = 1;
                    do {
                        Test.instanceCount >>>= i10;
                        i8 -= i8;
                        for (i12 = 1; 1 > i12; ++i12) {
                            Test.instanceCount += i10;
                            f1 = Test.instanceCount;
                            if (b) {
                                Test.iArrFld[i9 + 1] ^= i8;
                            } else if (b) {
                            } else {
                                i10 /= ((int) (((long) (f1)) | 1));
                                if (i8 != 0) {
                                }
                                sArr = sArr;
                                f1 += ((float) (d));
                                switch (((((-6) >>> 1) % 7) * 5) + 60) {
                                    case 76 :
                                        if (b)
                                            break;

                                        switch ((i11 % 8) + 28) {
                                            case 28 :
                                                i8 += ((int) ((-8545323266811919607L) + (i12 * i12)));
                                                f1 += i13;
                                                Test.fArrFld[i11 - 1] = i12;
                                                Test.instanceCount += i12;
                                                if (i13 != 0) {
                                                }
                                                i10 += i12 * i12;
                                                i13 += i12 - i11;
                                                break;
                                            case 29 :
                                                f1 += i10;
                                                i8 += i8;
                                            case 30 :
                                                d -= i8;
                                                lArr[i11] *= ((long) (3.634F));
                                                if (i8 != 0) {
                                                }
                                                Test.fArrFld[i9 - 1] -= ((float) (d));
                                                break;
                                            case 31 :
                                                if (b)
                                                    break;

                                                i8 += i12 * i12;
                                                Test.instanceCount *= i10;
                                                i13 *= i12;
                                                break;
                                            case 32 :
                                                f1 -= Test.instanceCount;
                                                break;
                                            case 33 :
                                                i10 -= i10;
                                                break;
                                            case 34 :
                                                Test.iArrFld[i12 - 1] = ((int) (9L));
                                            case 35 :
                                                dArr[i11] -= Test.instanceCount;
                                                break;
                                            default :
                                                i13 += ((int) ((-2605137320L) + (i12 * i12)));
                                        }
                                    case 88 :
                                        iArr = iArr1;
                                        break;
                                    case 86 :
                                        Test.fArrFld[i9] += s;
                                        break;
                                    case 68 :
                                        Test.iArrFld[i11] = i12;
                                        break;
                                    case 62 :
                                        if (false)
                                            continue;

                                        break;
                                    case 83 :
                                        try {
                                            i8 = i10 / (-48672);
                                            i8 = i9 % i9;
                                            i8 = iArr[i12 + 1] % 2512772;
                                        } catch (ArithmeticException a_e) {
                                        }
                                        break;
                                    case 74 :
                                        if (b)
                                            continue;

                                        break;
                                    default :
                                        i8 = i9;
                                }
                            }
                        }
                    } while ((++i11) < 4 );
                case 98 :
                    i10 = i10;
                default :
                    Test.instanceCount *= ((long) (f1));
            }
        }
        long meth_res = (((((((((((((i8 + (b ? 1 : 0)) + i9) + i10) + i11) + i12) + i13) + Float.floatToIntBits(f1)) + Double.doubleToLongBits(d)) + s) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(sArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static long lMeth(int i1, float f, int i2) {
        int i3 = 11947;
        int i4 = 64829;
        int i5 = -33952;
        int i6 = -128;
        int i7 = 0;
        boolean b1 = false;
        byte by = 107;
        double d1 = 99.70665;
        double dArr1[] = new double[N];
        float fArr[] = new float[N];
        long lArr1[] = new long[N];
        FuzzerUtils.init(fArr, -2.882F);
        FuzzerUtils.init(lArr1, -2185337952L);
        FuzzerUtils.init(dArr1, -54.11506);
        for (i3 = 134; 1 < i3; i3--) {
            if ((++Test.iArrFld[i3]) < ((i2--) - (Test.iArrFld[i3 - 1] - (Test.iArrFld[i3 - 1]--))))
                continue;

            Test.iArrFld[i3 - 1] = ((int) (Math.abs(fArr[i3 + 1])));
            i5 = 1;
            do {
                for (i6 = i5; i6 < 1; i6++) {
                    Test.iArrFld[i6 - 1] -= iMeth(i7, b1);
                    by += ((byte) (i6 - f));
                    switch (((i1 >>> 1) % 9) + 60) {
                        case 60 :
                        case 61 :
                            i4 += i3;
                            Test.instanceCount += i6 + Test.instanceCount;
                            lArr1[i3 - 1] = i7;
                            f = i5;
                            if (b1)
                                continue;

                            i7 &= i5;
                            i2 += i6 * i6;
                            switch (((i6 % 3) * 5) + 99) {
                                case 105 :
                                    i1 = ((int) (f));
                                    i1 += i6 + f;
                                    by += ((byte) (i2));
                                    i7 += i6 * i6;
                                    i4 &= i4;
                                    i4 = ((int) (Test.instanceCount));
                                    if (b1)
                                        break;

                                    by *= by;
                                    Test.instanceCount += Test.instanceCount;
                                    i4 -= i3;
                                    dArr1 = dArr1;
                                    i7 += i1;
                                    i1 -= i4;
                                    Test.iArrFld = Test.iArrFld;
                                    break;
                                case 112 :
                                    Test.instanceCount *= i7;
                                    i4 = i3;
                                    i2 <<= i4;
                                    break;
                                case 109 :
                                    i4 = ((int) (Test.instanceCount));
                                    Test.iArrFld[i6 - 1] -= i2;
                                default :
                                    d1 = 149;
                            }
                            fArr[i3] = i6;
                            break;
                        case 62 :
                            i4 += i2;
                            break;
                        case 63 :
                            f += i2;
                            break;
                        case 64 :
                            i2 += ((int) (d1));
                        case 65 :
                            if (i4 != 0) {
                            }
                            break;
                        case 66 :
                            Test.iArrFld[i6] = -5;
                            break;
                        case 67 :
                            Test.iArrFld[i5 - 1] -= ((int) (Test.instanceCount));
                            break;
                        case 68 :
                            f = Test.instanceCount;
                            break;
                    }
                }
            } while ((++i5) < 4 );
        }
        long meth_res = ((((((((((((i1 + Float.floatToIntBits(f)) + i2) + i3) + i4) + i5) + i6) + i7) + (b1 ? 1 : 0)) + by) + Double.doubleToLongBits(d1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(lArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        lMeth_check_sum += meth_res;
        return ((long) (meth_res));
    }

    public static void vMeth() {
        float f2 = -2.314F;
        int i14 = 150;
        int i15 = -2387;
        int i16 = -18;
        int i17 = 14123;
        int i18 = -3;
        int i19 = 41765;
        int i20 = 0;
        int iArr2[][] = new int[N][N];
        double d2 = -2.114083;
        double d3 = 44.93755;
        long lArr2[] = new long[N];
        FuzzerUtils.init(iArr2, 7902);
        FuzzerUtils.init(lArr2, 7L);
        lMeth(Test.iFld, f2, 45);
        Test.iFld += ((int) (Test.instanceCount));
        for (i14 = 8; i14 < 202; ++i14) {
            Test.iArrFld[i14 + 1] = Test.iFld;
            Test.iArrFld[i14 - 1] >>= -2;
            i16 = 1;
            while ((++i16) < 3) {
                f2 += (-61689L) + (i16 * i16);
                i15 = ((int) (f2));
                i15 -= Test.iFld;
                f2 = -30248L;
                Test.iFld >>= i14;
                for (d2 = 1; 1 > d2; ++d2) {
                    i15 += i17;
                    Test.iFld -= i15;
                    if (i17 != 0) {
                        vMeth_check_sum += ((((((((((Float.floatToIntBits(f2) + i14) + i15) + i16) + Double.doubleToLongBits(d2)) + i17) + i18) + i19) + Double.doubleToLongBits(d3)) + i20) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(lArr2);
                        return;
                    }
                    Test.instanceCount += 228 + (d2 * d2);
                }
                i17 >>= i16;
                i15 += ((int) (d2));
                f2 *= i16;
                Test.instanceCount = i16;
                switch (((Test.iFld >>> 1) % 7) + 21) {
                    case 21 :
                        for (i18 = 1; i18 < 1; i18++) {
                            i15 += i18;
                            Test.iArrFld[i14 + 1] = i18;
                            i17 += i18 * i18;
                            iArr2 = iArr2;
                            f2 += i19;
                            Test.iFld += i18 | Test.instanceCount;
                            d3 *= i17;
                            i17 += i18;
                            Test.iFld += 244 + (i18 * i18);
                            lArr2[i14] = Test.instanceCount;
                            i19 = ((int) (Test.instanceCount));
                            Test.instanceCount = Test.instanceCount;
                            f2 = f2;
                            i17 >>>= i15;
                        }
                        Test.sFld *= ((short) (-9));
                        break;
                    case 22 :
                        Test.iFld >>= i16;
                        break;
                    case 23 :
                        Test.instanceCount -= ((long) (f2));
                        break;
                    case 24 :
                        i19 *= i14;
                    case 25 :
                        i19 -= i20;
                        break;
                    case 26 :
                    case 27 :
                        i20 = ((int) (Test.instanceCount));
                        break;
                    default :
                        i17 ^= Test.iFld;
                }
            }
        }
        vMeth_check_sum += ((((((((((Float.floatToIntBits(f2) + i14) + i15) + i16) + Double.doubleToLongBits(d2)) + i17) + i18) + i19) + Double.doubleToLongBits(d3)) + i20) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {
        int i = -29882;
        int i21 = -107;
        int i22 = -56454;
        int i23 = 104;
        int i24 = 254;
        int i25 = -147;
        int i26 = 40611;
        int i27 = -64314;
        int i28 = -33978;
        int i29 = -106;
        int i30 = -25134;
        int i31 = -34670;
        int i32 = 212;
        int i33 = 0;
        float f3 = 2.311F;
        boolean b2 = true;
        boolean bArr[] = new boolean[N];
        double d4 = 1.129293;
        double d5 = 0.6402;
        double d6 = 67.119235;
        long lArr3[] = new long[N];
        FuzzerUtils.init(lArr3, -143L);
        FuzzerUtils.init(bArr, true);
        i = 1;
        while ((++i) < 192) {
            vMeth();
            for (i21 = 1; i21 < 27; i21++) {
                for (i23 = 1; 2 > i23; ++i23) {
                    Test.fArrFld[i23 - 1] *= i24;
                    i22 += i22;
                    Test.instanceCount = Test.iFld;
                    Test.iFld = i21;
                    Test.iArrFld[i23 - 1] = ((int) (-1.287F));
                }
                for (i25 = 1; 2 > i25; i25++) {
                    i26 = Test.iFld;
                    Test.fArrFld[i25] *= Test.instanceCount;
                    lArr3[i + 1] -= 20;
                    f3 = Test.instanceCount;
                    b2 = b2;
                    f3 += Test.instanceCount;
                }
                i24 *= i;
                Test.iArrFld[i - 1] += i23;
                lArr3[i - 1] = i21;
            }
            i26 <<= i23;
            Test.iFld = i23;
            try {
                i26 = (-159) % i;
                i24 = i23 / Test.iArrFld[i];
                i26 = (-190) % i22;
            } catch (ArithmeticException a_e) {
            }
        }
        for (i27 = 1; i27 < 136; i27++) {
            i28 += i27;
            Test.fArrFld[i27] = Test.sFld;
            i22 += i22;
            d4 = 1;
            while ((++d4) < 38) {
                i22 -= -247;
                Test.sFld -= ((short) (f3));
                lArr3[((int) (d4 - 1))] = -64559;
                Test.iArrFld[i27] *= Test.iFld;
                Test.iFld |= i24;
                i24 += ((int) (((d4 * Test.instanceCount) + Test.instanceCount) - i22));
                i29 = 1;
                do {
                    Test.iFld += ((i29 * i28) + i28) - i27;
                    Test.iArrFld[((int) (d4))] = ((int) (Test.fFld));
                    i26 -= i22;
                    i26 += Test.iFld;
                } while ((++i29) < 1 );
                if (b2)
                    break;

                Test.dFld = Test.iFld;
                i30 = 1;
                while ((++i30) < 1) {
                    Test.fFld = i29;
                    lArr3[((int) (d4 - 1))] += ((long) (Test.fFld));
                    Test.sFld = ((short) (i29));
                    i24 = i28;
                    Test.instanceCount >>>= i24;
                    if (b2)
                        break;

                    i24 -= ((int) (Test.instanceCount));
                }
            }
            i26 = ((int) (Test.instanceCount));
            Test.iFld -= Test.sFld;
            switch ((i27 % 8) + 117) {
                case 117 :
                    switch ((i27 % 4) + 109) {
                        case 109 :
                            Test.instanceCount += ((i27 * Test.instanceCount) + i23) - i23;
                            for (d5 = 38; d5 > 1; d5--) {
                                Test.instanceCount += ((long) (d5));
                                Test.iArrFld = Test.iArrFld;
                                i28 = i30;
                                for (i32 = ((int) (d5)); i32 < 2; ++i32) {
                                    Test.instanceCount = ((long) (d4));
                                    Test.sFld *= ((short) (Test.instanceCount));
                                    Test.iFld += ((int) (d6));
                                    switch (((int) (((d5 % 2) * 5) + 90))) {
                                        case 93 :
                                            if (b2)
                                                break;

                                            Test.instanceCount = i26;
                                            Test.instanceCount <<= i31;
                                            i22 |= i25;
                                            b2 = b2;
                                            try {
                                                i22 = i32 % i;
                                                i31 = 14668 % i29;
                                                Test.iArrFld[((int) (d5))] = i26 % 59599;
                                            } catch (ArithmeticException a_e) {
                                            }
                                            i33 = ((int) (Test.fFld));
                                            if (b2)
                                                break;

                                            Test.iArrFld[i32] = i21;
                                            if (true)
                                                continue;

                                            i24 = ((int) (Test.instanceCount));
                                        case 95 :
                                            Test.iFld = i31;
                                            Test.instanceCount += i32 ^ i27;
                                            break;
                                    }
                                }
                            }
                            break;
                        case 110 :
                            try {
                                Test.iFld = i22 / i24;
                                i31 = i31 / i33;
                                i22 = (-204) % i25;
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        case 111 :
                            i31 ^= ((int) (Test.instanceCount));
                            break;
                        case 112 :
                            i28 += ((int) (f3));
                            break;
                        default :
                            Test.fFld += i27 * Test.fFld;
                    }
                    break;
                case 118 :
                    Test.iFld *= ((int) (54.922F));
                    break;
                case 119 :
                    i31 -= i31;
                case 120 :
                    i26 -= i24;
                    break;
                case 121 :
                case 122 :
                    {
                        try {
                            InetAddress ax$1 = null;
                            for (int ax$0 = -267; ax$0 < (-267 + 19469); ax$0 += 1) {
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    if (ax$1 instanceof Inet6Address) {
                                        Inet6Address ax$2 = ((Inet6Address) (ax$1));
                                        Object ax$3 = ax$2.getScopedInterface();
                                        if (ax$3 instanceof String) {
                                        }
                                    }
                                } catch (Throwable ax$4) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                            }
                        } finally {
                        }
                    }
                    Test.iFld >>>= i22;
                    break;
                case 123 :
                    Test.instanceCount += i27;
                    break;
                case 124 :
                    bArr[i27 + 1] = b2;
                    break;
                default :
                    bArr[i27 - 1] = b2;
            }
        }
        FuzzerUtils.out.println((((("i i21 i22 = " + i) + ",") + i21) + ",") + i22);
        FuzzerUtils.out.println((((("i23 i24 i25 = " + i23) + ",") + i24) + ",") + i25);
        FuzzerUtils.out.println((((("i26 f3 b2 = " + i26) + ",") + Float.floatToIntBits(f3)) + ",") + (b2 ? 1 : 0));
        FuzzerUtils.out.println((((("i27 i28 d4 = " + i27) + ",") + i28) + ",") + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println((((("i29 i30 d5 = " + i29) + ",") + i30) + ",") + Double.doubleToLongBits(d5));
        FuzzerUtils.out.println((((("i31 i32 i33 = " + i31) + ",") + i32) + ",") + i33);
        FuzzerUtils.out.println((((("d6 lArr3 bArr = " + Double.doubleToLongBits(d6)) + ",") + FuzzerUtils.checkSum(lArr3)) + ",") + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println((((("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount) + ",") + Test.iFld) + ",") + Test.sFld);
        FuzzerUtils.out.println((((("Test.fFld Test.dFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld)) + ",") + Double.doubleToLongBits(Test.dFld)) + ",") + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}
