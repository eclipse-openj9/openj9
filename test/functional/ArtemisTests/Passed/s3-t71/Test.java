// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -1091875485171764526L;

    public static int iFld = -9;

    public static float fFld = 0.485F;

    public static double dFld = -2.88766;

    public static byte byFld = 59;

    public static volatile int[][] iArrFld = new int[N][N];

    public static short[] sArrFld = new short[N];

    public static long[] lArrFld = new long[N];

    public static volatile float[] fArrFld = new float[N];

    public static boolean[] bArrFld = new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -14);
        FuzzerUtils.init(Test.sArrFld, (short) -28125);
        FuzzerUtils.init(Test.lArrFld, 2180942509L);
        FuzzerUtils.init(Test.fArrFld, -69.806F);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, int i1, int i2) {
        float f = -1.974F, f1 = -36.915F, f2 = -50.869F;
        double d2 = 60.19542, dArr[][] = new double[N][N];
        int i3 = -7, i4 = -203, i5 = 55, i6 = 7, i7 = -2, iArr[] = new int[N];
        long l1 = 0L, lArr[] = new long[N];
        short s1 = -18431;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr, -58262);
        FuzzerUtils.init(dArr, 8.71835);
        FuzzerUtils.init(byArr, (byte) -4);
        FuzzerUtils.init(lArr, -91L);
        f = i2;
        f = i1;
        f = f;
        i2 += i1;
        iArr[(i1 >>> 1) % N] -= (int) d2;
        i3 = 1;
        while (++i3 < 129) {
            i1 = (int) Test.instanceCount;
            iArr = FuzzerUtils.int1array(N, (int) 16195);
            iArr[i3] += (int) Test.instanceCount;
            i2 -= 189;
            d2 -= 4355973251089518981L;
            for (l1 = 1; l1 < 4; l1++) {
                for (i5 = 1; i5 < 2; i5++) {
                    l += i5;
                    Test.instanceCount *= (long) f;
                    i1 -= i5;
                    i1 >>= -191;
                    i2 -= (int) f1;
                    f = 10;
                    Test.instanceCount += (i5 + Test.instanceCount);
                    iArr[(int) (l1 + 1)] += i1;
                    Test.instanceCount += i5;
                    i6 += (i5 * i5);
                }
                for (f2 = 2; f2 > l1; f2 -= 3) {
                    dArr[(int) (l1 + 1)][(int) (l1)] = f1;
                    if (i7 != 0) {
                        vMeth2_check_sum += l + i1 + i2 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i3 + l1 + i4 + i5 + i6 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i7 + s1 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    byArr[(int) (l1)] <<= (byte) i1;
                    Test.instanceCount += -39949;
                    if (i2 != 0) {
                        vMeth2_check_sum += l + i1 + i2 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i3 + l1 + i4 + i5 + i6 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i7 + s1 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    switch((int) ((f2 % 2) + 68)) {
                        case 68:
                            i6 = (int) Test.instanceCount;
                            i7 = i1;
                            i7 += (13 + (f2 * f2));
                            lArr[(int) (l1)] *= i7;
                            s1 += (short) ((long) f2 ^ l1);
                            i7 += (int) 95.98056;
                            i7 += -182;
                        case 69:
                            iArr[(int) (f2 - 1)] = i2;
                            break;
                        default:
                            i7 = i1;
                    }
                }
            }
        }
        vMeth2_check_sum += l + i1 + i2 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i3 + l1 + i4 + i5 + i6 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i7 + s1 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(short s) {
        if (ax$11) {
            int ax$14 = iFld;
            try {
                java.lang.Object[] ax$12 = new Object[100000];
                java.lang.Object[] ax$13 = new Object[250];
                ax$13[iFld] = ax$12[iFld];
            } catch (Throwable ax$15) {
            } finally {
                iFld = ax$14;
            }
            return;
        }
        float f3 = 124.587F;
        int i8 = 59339, i9 = 6, i10 = -13, i11 = -14, i13 = -13, i14 = -7, i15 = -43590, i16 = -14, i17 = -1, i18 = -11, i19 = 58924;
        byte by = -4;
        double[] dArr1 = new double[N];
        FuzzerUtils.init(dArr1, -47.107794);
        vMeth2(-11L, Test.iFld, Test.iFld);
        Test.iArrFld[(-1 >>> 1) % N][(Test.iFld >>> 1) % N] = Test.iFld;
        Test.iFld -= (int) f3;
        Test.instanceCount += Test.iFld;
        for (i8 = 11; i8 < 222; i8 += 3) {
            by += (byte) -16931;
        }
        Test.sArrFld[(Test.iFld >>> 1) % N] -= (short) f3;
        for (i10 = 229; i10 > 6; i10--) {
            int i12 = 11437;
            boolean b = false;
            Test.instanceCount += i12;
            switch((i10 % 3) + 9) {
                case 9:
                    switch(((i10 % 7) * 5) + 107) {
                        case 122:
                            b = b;
                            for (i13 = i10; i13 < 3; i13++) {
                                i12 = i12;
                            }
                            for (i15 = 3; i15 > 1; i15 -= 3) {
                                Test.instanceCount &= 8;
                                i9 = (int) Test.instanceCount;
                                i14 = -4;
                                i12 -= i15;
                                Test.instanceCount += (i15 + i10);
                                for (i17 = 1; i17 < 3; i17++) {
                                    Test.instanceCount = i13;
                                    Test.lArrFld = Test.lArrFld;
                                }
                                Test.instanceCount *= i17;
                                Test.iArrFld[i15 - 1][i10 - 1] /= (int) (s | 1);
                                i18 += (i15 * i15);
                                i19 = 1;
                                do {
                                    i11 -= 8;
                                    Test.instanceCount -= i16;
                                    i12 = i17;
                                    by += (byte) Test.instanceCount;
                                    Test.iFld %= (int) (i15 | 1);
                                    Test.instanceCount += (i19 + Test.instanceCount);
                                    try {
                                        i12 = (i15 % i16);
                                        i12 = (-195676803 / i18);
                                        i9 = (Test.iArrFld[i19 + 1][i15 + 1] / i13);
                                    } catch (ArithmeticException a_e) {
                                    }
                                } while (++i19 < 3);
                            }
                            i9 *= i17;
                            i14 -= (int) Test.instanceCount;
                            Test.iFld += (int) Test.instanceCount;
                            break;
                        case 127:
                        case 112:
                            i14 = (int) Test.instanceCount;
                            break;
                        case 128:
                            dArr1[i10] += Test.instanceCount;
                            break;
                        case 132:
                            f3 += -40687L;
                            break;
                        case 124:
                            Test.iFld -= by;
                            break;
                        case 142:
                            i18 = i14;
                            break;
                    }
                    break;
                case 10:
                    s = (short) i13;
                    break;
                case 11:
                    by = (byte) i14;
                    break;
            }
        }
        vMeth1_check_sum += s + Float.floatToIntBits(f3) + i8 + i9 + by + i10 + i11 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static void vMeth(int i, double d, double d1) {
        if (ax$21) {
            long ax$22 = vMeth1_check_sum;
            long ax$23 = vMeth2_check_sum;
            try {
                vMeth2_check_sum = vMeth1_check_sum;
            } catch (Throwable ax$24) {
            } finally {
                vMeth1_check_sum = ax$22;
                vMeth2_check_sum = ax$23;
            }
            return;
        }
        int i20 = -9, i21 = -32735, i22 = -4, i23 = -10, i24 = 9, i25 = 1;
        short s2 = -21987;
        long l2 = -44L;
        byte[][] byArr1 = new byte[N][N];
        boolean[] bArr = new boolean[N];
        float[] fArr = new float[N];
        FuzzerUtils.init(byArr1, (byte) 92);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr, -1.101F);
        {
            java.io.PrintStream ax$18 = System.out;
            java.io.PrintStream ax$19 = System.err;
            java.io.PrintStream ax$20 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$20);
            System.setErr(ax$20);
            try {
                ax$11 = true;
                for (int ax$16 = 0; ax$16 < 8683; ax$16 += 1) vMeth1((short) -265329949);
            } catch (java.lang.Throwable ax$17) {
            } finally {
                ax$11 = false;
            }
            System.setOut(ax$18);
            System.setErr(ax$19);
        }
        vMeth1((short) (8301));
        for (i20 = 6; i20 < 126; i20++) {
            byArr1[i20][i20 - 1] -= (byte) Test.instanceCount;
            for (i22 = i20; i22 < 5; i22++) {
                Test.instanceCount += (((i22 * Test.instanceCount) + Test.instanceCount) - i20);
                Test.lArrFld = FuzzerUtils.long1array(N, (long) 5L);
                for (i24 = 1; i24 > 1; i24--) {
                    boolean b1 = false;
                    s2 -= (short) Test.fFld;
                    Test.fFld += (i24 * Test.fFld);
                    i21 *= (int) Test.instanceCount;
                    Test.instanceCount += (-115 + (i24 * i24));
                    i *= i20;
                    i21 %= (int) ((long) (Test.fFld) | 1);
                    i >>= Test.iFld;
                    b1 = b1;
                    if (b1) {
                        bArr = FuzzerUtils.boolean1array(N, (boolean) true);
                        fArr[i22] += -49;
                        d += -2;
                        i23 += i24;
                        Test.iArrFld[i22][i20] = i24;
                        Test.iArrFld[i24] = Test.iArrFld[i24 + 1];
                        Test.lArrFld[i20 - 1] -= s2;
                        i25 *= (int) Test.instanceCount;
                        Test.instanceCount = i23;
                        Test.instanceCount += (((i24 * Test.iFld) + Test.instanceCount) - i25);
                        i25 = (int) l2;
                        i25 += 11;
                        Test.iArrFld[i22 - 1][i24 - 1] -= i;
                        if (b1)
                            break;
                        Test.instanceCount = (long) d;
                    } else if (b1) {
                        s2 >>= (short) -172;
                        b1 = b1;
                        if (b1)
                            continue;
                        i25 >>= i22;
                        Test.instanceCount -= i22;
                        if (b1)
                            break;
                    } else {
                        l2 = i22;
                    }
                }
            }
        }
        vMeth_check_sum += i + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i20 + i21 + i22 + i23 + i24 + i25 + s2 + l2 + FuzzerUtils.checkSum(byArr1) + FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {
        boolean b2 = true;
        int i26 = 4, i27 = 4, i28 = -17411, i29 = 46321, i30 = 57337, i31 = -219;
        short s3 = -4806;
        double[] dArr2 = new double[N];
        FuzzerUtils.init(dArr2, -69.8271);
        {
            java.io.PrintStream ax$27 = System.out;
            java.io.PrintStream ax$28 = System.err;
            java.io.PrintStream ax$29 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$29);
            System.setErr(ax$29);
            try {
                ax$21 = true;
                for (int ax$25 = 0; ax$25 < 5665; ax$25 += 1) vMeth(-779439415, 0.4663453129189892, 0.27410765665725845);
            } catch (java.lang.Throwable ax$26) {
            } finally {
                ax$21 = false;
            }
            System.setOut(ax$27);
            System.setErr(ax$28);
        }
        vMeth(3, Test.dFld, Test.dFld);
        Test.fArrFld[(Test.iFld >>> 1) % N] = Test.instanceCount;
        Test.bArrFld[(Test.iFld >>> 1) % N] = b2;
        i26 = 1;
        do {
            i27 = 1;
            while (++i27 < 22) {
                Test.iFld -= (int) Test.dFld;
                Test.instanceCount += Test.instanceCount;
                Test.iFld += (46483 + (i27 * i27));
                Test.lArrFld[i26 - 1] = i26;
                Test.iFld += (i27 | i26);
                for (i28 = 1; i28 < 1; i28++) {
                    Test.lArrFld[i28 - 1] *= i26;
                    i29 += i28;
                    Test.iFld += (i28 ^ Test.iFld);
                    i29 = i28;
                    i29 += (int) Test.fFld;
                    Test.iFld ^= i26;
                    s3 -= (short) i28;
                    Test.iArrFld[i27][i28 + 1] += -10;
                    Test.iArrFld[i26][i28 - 1] = 5;
                }
                b2 = b2;
                i29 += i27;
                b2 = b2;
                dArr2 = dArr2;
                for (i30 = 1; 1 > i30; i30++) {
                    float f4 = 124.194F;
                    i29 += i31;
                    s3 -= (short) Test.dFld;
                    Test.iArrFld[i30 - 1][i30 - 1] *= (int) Test.instanceCount;
                    switch(((i30 % 6) * 5) + 114) {
                        case 143:
                            i31 = -12;
                            Test.instanceCount = (long) Test.fFld;
                            Test.iArrFld[i30 - 1][i27 - 1] = i31;
                            i31 >>= -23298;
                            Test.iArrFld[i30][i27 - 1] += 0;
                            Test.dFld *= i26;
                            i31 *= (int) Test.instanceCount;
                            Test.fFld += (-1 + (i30 * i30));
                            Test.iArrFld[i30 - 1][i26] = 10;
                            break;
                        case 137:
                            Test.iFld = i31;
                            i29 += (int) (2267104178L + (i30 * i30));
                            Test.instanceCount += (i30 + Test.instanceCount);
                            Test.instanceCount += (i30 * i30);
                            Test.instanceCount = i26;
                            f4 *= i30;
                            Test.iArrFld[i27][i26] -= (int) Test.instanceCount;
                            break;
                        case 135:
                            i31 += (int) Test.dFld;
                            Test.iFld += i30;
                            if (true) {
                                Test.dFld -= Test.byFld;
                                i29 += i30;
                                Test.dFld += i29;
                            } else {
                                Test.instanceCount = i30;
                                Test.instanceCount = i30;
                                i31 *= (int) Test.fFld;
                                switch((i27 % 5) + 119) {
                                    case 119:
                                        s3 = (short) i27;
                                        Test.instanceCount += (i30 * i30);
                                        try {
                                            i31 = (17856 / i30);
                                            i31 = (1308 % i29);
                                            i29 = (Test.iArrFld[i30 + 1][i30 - 1] % 1081764290);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        i29 = Test.iFld;
                                        Test.iArrFld[i27 + 1][i26] = -8883;
                                        Test.iFld += (((i30 * i27) + Test.iFld) - Test.instanceCount);
                                        switch(((i27 % 8) * 5) + 101) {
                                            case 128:
                                                Test.iArrFld[i26 - 1][i27 + 1] = i29;
                                                break;
                                            case 117:
                                                Test.instanceCount >>= i30;
                                                Test.iFld = i28;
                                                Test.iArrFld[i30 + 1][i26] += (int) Test.instanceCount;
                                                Test.iFld >>>= 7411;
                                                i29 = Test.iFld;
                                                f4 -= 13L;
                                                Test.instanceCount -= (long) Test.dFld;
                                                break;
                                            case 138:
                                                Test.instanceCount = i29;
                                                Test.iFld = i30;
                                                i29 ^= Test.byFld;
                                                Test.iFld -= i26;
                                                i29 ^= i30;
                                                break;
                                            case 130:
                                            case 132:
                                                if (b2)
                                                    continue;
                                                break;
                                            case 129:
                                                Test.instanceCount += i29;
                                                break;
                                            case 106:
                                                Test.iFld = 22110;
                                                break;
                                            case 124:
                                                if (false)
                                                    continue;
                                            default:
                                                s3 = (short) 6;
                                        }
                                        break;
                                    case 120:
                                        i31 = i26;
                                        break;
                                    case 121:
                                        i31 = (int) 53021L;
                                        break;
                                    case 122:
                                        Test.iFld += i30;
                                        break;
                                    case 123:
                                        i29 -= (int) Test.dFld;
                                    default:
                                        Test.instanceCount = -14;
                                }
                            }
                        case 140:
                            Test.instanceCount ^= Test.instanceCount;
                            break;
                        case 139:
                            Test.instanceCount >>= Test.instanceCount;
                            break;
                        case 119:
                            try {
                                Test.iFld = (i28 / Test.iArrFld[i30 - 1][i27 - 1]);
                                Test.iArrFld[i30 - 1][i26] = (Test.iArrFld[i27 + 1][i27] / -155);
                                i29 = (-1552785716 % i31);
                            } catch (ArithmeticException a_e) {
                            }
                            {
                                java.io.PrintStream ax$8 = System.out;
                                java.io.PrintStream ax$9 = System.err;
                                java.io.PrintStream ax$10 = new java.io.PrintStream(new java.io.OutputStream() {

                                    @Override
                                    public void write(int b) throws java.io.IOException {
                                        // DO NOTHING: DISCARD ALL OUTPUTS
                                    }
                                });
                                System.setOut(ax$10);
                                System.setErr(ax$10);
                                try {
                                    for (int ax$6 = -2827; ax$6 < 5070; ax$6 += 1) {
                                        try {
                                            int ax$1 = 0x00012340;
                                            int[] ax$4 = new int[] { 0xF1F2F3F4 };
                                            int ax$3 = 143444;
                                            int[] ax$0 = new int[] { 0xF1F2F3F4 };
                                            for (int ax$2 = 0; ax$2 < ax$4.length; ax$2 += 1) {
                                                ax$4[ax$2] = (int) ((ax$0[ax$2] + ax$1) << ax$3);
                                            }
                                        } catch (Throwable ax$5) {
                                        } finally {
                                        }
                                    }
                                } catch (Throwable ax$7) {
                                }
                                System.setOut(ax$8);
                                System.setErr(ax$9);
                            }
                        default:
                            i31 += i27;
                    }
                }
            }
        } while (++i26 < 238);
        FuzzerUtils.out.println("b2 i26 i27 = " + (b2 ? 1 : 0) + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 s3 = " + i28 + "," + i29 + "," + s3);
        FuzzerUtils.out.println("i30 i31 dArr2 = " + i30 + "," + i31 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld Test.byFld Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + Test.byFld + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.sArrFld Test.lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.bArrFld = " + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$11 = false;

    private static Boolean ax$21 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
