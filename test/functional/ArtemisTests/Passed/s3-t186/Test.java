// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -3949968018L;

    public static volatile double dFld = -76.56633;

    public static int iFld = 45;

    public static float fFld = 35.700F;

    public static int iFld1 = -24610;

    public int iFld2 = -192;

    public long[] lArrFld = new long[N];

    public static int[][] iArrFld = new int[N][N];

    public static long[] lArrFld1 = new long[N];

    public static double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -11);
        FuzzerUtils.init(Test.lArrFld1, -1886393144L);
        FuzzerUtils.init(Test.dArrFld, -50.120317);
    }

    public static long vSmallMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth(long l, int i4) {
        if (ax$26) {
            try {
                java.lang.Integer ax$30 = new Integer(7);
                java.lang.Integer ax$31 = new Integer(-3);
                java.lang.Integer ax$29 = new Integer(49);
                int[] ax$27 = { 1, 2, 3, 4 };
                for (Integer ax$28 : ax$27) {
                    ax$31 += ax$28;
                    ax$30 += ax$28 + ax$29;
                }
            } catch (Throwable ax$32) {
            } finally {
            }
            return;
        }
        Test.dFld -= (((-67.901F + Math.min(i4, i4)) * Test.dFld) + Test.dFld);
        vSmallMeth_check_sum += l + i4;
    }

    public static void vMeth1(boolean b) {
        int i5 = -4, i6 = 58582, i7 = -71, i8 = 41, i9 = 8489, i10 = 84;
        float f1 = 0.832F, f2 = -17.594F;
        byte by1 = 96;
        short[] sArr = new short[N];
        long[] lArr = new long[N];
        FuzzerUtils.init(sArr, (short) -20837);
        FuzzerUtils.init(lArr, -31082L);
        for (i5 = 2; 182 > i5; i5++) {
            Test.dFld += i6;
            i6 += (i5 * i5);
            for (f1 = 3; f1 > 1; --f1) {
                b = b;
                by1 >>>= (byte) Test.instanceCount;
                f2 -= (float) -2.89213;
                i6 = i5;
                i7 *= i5;
                Test.iFld += (246 + (f1 * f1));
                f2 += (f1 * i7);
                i8 = 1;
                do {
                    if (Test.iFld != 0) {
                        vMeth1_check_sum += (b ? 1 : 0) + i5 + i6 + Float.floatToIntBits(f1) + i7 + by1 + Float.floatToIntBits(f2) + i8 + i9 + i10 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                } while (++i8 < 2);
                for (i9 = (int) (f1); i9 < 2; ++i9) {
                    Test.instanceCount += i10;
                    i6 ^= i5;
                    Test.dFld = 11;
                    i10 -= i10;
                    i10 = i6;
                    sArr[(int) (f1 + 1)] = (short) Test.instanceCount;
                    i7 = (int) f1;
                    i7 += (123 + (i9 * i9));
                    lArr[(int) (f1 - 1)] += (long) f2;
                    Test.iFld = (int) Test.instanceCount;
                    i10 <<= 10;
                    i10 += (((i9 * i9) + i6) - Test.iFld);
                }
                Test.instanceCount = i10;
                f2 %= ((long) (f1) | 1);
                {
                    java.io.PrintStream ax$0 = System.out;
                    java.io.PrintStream ax$1 = System.err;
                    java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$2);
                    System.setErr(ax$2);
                    {
                        boolean ax$9 = false;
                        for (int ax$8 = -3033; ax$8 < 5195; ax$8 += 5) {
                            if (!ax$9) {
                                ax$9 = true;
                                {
                                    System.setOut(ax$0);
                                    System.setErr(ax$1);
                                    i7 = i8;
                                    System.setOut(ax$2);
                                    System.setErr(ax$2);
                                }
                            }
                            int ax$5 = i9;
                            int ax$6 = i10;
                            try {
                                int[] ax$3 = { 0, 1, 2, 3, 0x1234_5678, 0x8000_0000, 0x8000_0001, 0x8000_0002, 0x8000_0003, 0x8765_4321, 0xFFFF_FFFE, 0xFFFF_FFFF };
                                for (int ax$4 = 0; ax$4 < i9; ax$4++) {
                                    ax$3[ax$4] += 1;
                                }
                                for (int ax$4 = i9 - 1; ax$4 >= 0; ax$4--) {
                                    ax$3[ax$4] += 1;
                                }
                                for (int ax$4 = i9; ax$4 < i10; ax$4++) {
                                    ax$3[ax$4] += 1;
                                }
                                for (int ax$4 = i10 - 1; ax$4 >= i9; ax$4--) {
                                    ax$3[ax$4] += 1;
                                }
                            } catch (Throwable ax$7) {
                            } finally {
                                i9 = ax$5;
                                i10 = ax$6;
                            }
                        }
                    }
                    System.setOut(ax$0);
                    System.setErr(ax$1);
                }
                i7 += (-13 + (f1 * f1));
                Test.instanceCount += (long) f1;
            }
            Test.iFld = (int) 1.53936;
            i6 = i7;
        }
        Test.iFld %= (int) (by1 | 1);
        i7 <<= (int) Test.instanceCount;
        i6 >>= i5;
        i6 += (int) 52.49457;
        vMeth1_check_sum += (b ? 1 : 0) + i5 + i6 + Float.floatToIntBits(f1) + i7 + by1 + Float.floatToIntBits(f2) + i8 + i9 + i10 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {
        boolean b1 = false;
        float f3 = -119.1012F, fArr1[] = new float[N];
        double d = -122.90408, dArr[] = new double[N];
        int i11 = 11, i12 = 4287, i13 = -1, i14 = -71, i15 = -239, i16 = 50358, i17 = -9, i18 = 50171, i19 = -146, i20 = 4848, i21 = 31418, i22 = 12, iArr[] = new int[N];
        byte[] byArr = new byte[N];
        FuzzerUtils.init(byArr, (byte) 65);
        FuzzerUtils.init(fArr1, 1.191F);
        FuzzerUtils.init(iArr, 2);
        FuzzerUtils.init(dArr, -39.52614);
        vMeth1(b1);
        byArr[(-40953 >>> 1) % N] -= (byte) 4L;
        fArr1[(Test.iFld >>> 1) % N] *= f3;
        d *= Test.iFld;
        {
            java.io.PrintStream ax$10 = System.out;
            java.io.PrintStream ax$11 = System.err;
            java.io.PrintStream ax$12 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$12);
            System.setErr(ax$12);
            {
                boolean ax$17 = false;
                for (int ax$16 = -4189; ax$16 < 2181; ax$16 += 2) {
                    if (!ax$17) {
                        ax$17 = true;
                        {
                            System.setOut(ax$10);
                            System.setErr(ax$11);
                            for (i11 = 2; i11 < 150; ++i11) {
                                iArr[i11] = -13;
                                Test.iFld = 11483;
                                Test.instanceCount = -2023511771L;
                            }
                            System.setOut(ax$12);
                            System.setErr(ax$12);
                        }
                    }
                    try {
                        long[] ax$14 = { // Long-range values
                        // Long-range values
                        // Long-range values
                        // Long-range values
                        // Long-range values
                        0L, // Long-range values
                        1L, // Long-range values
                        2L, // Long-range values
                        3L, // Long-range values
                        99999L, // Long-range values
                        100000L, // Long-range values
                        999999L, // Long-range values
                        100000L, // Long-range values
                        999999999L, // Long-range values
                        1000000000L, // Long-range values
                        0x1234_5678L, // Long-range values
                        0x8000_0000L, // Long-range values
                        0x8000_0001L, // Long-range values
                        0x8000_0002L, 0x8000_0003L, 0x8765_4321L, 0xFFFF_FFFEL, 0xFFFF_FFFFL, 999_999_999_999L, 1_000_000_000_000L, 999_999_999_999_999_999L, 1_000_000_000_000_000_000L, 0xFFFF_FFFF_FFFF_FFFEL, 0xFFFF_FFFF_FFFF_FFFFL };
                        for (int ax$13 = 0; ax$13 < ax$14.length; ax$13++) {
                            ax$14[ax$13] = ax$14[20] + 2;
                        }
                    } catch (Throwable ax$15) {
                    } finally {
                    }
                }
            }
            System.setOut(ax$10);
            System.setErr(ax$11);
        }
        Test.instanceCount *= (long) d;
        Test.iFld = -8;
        for (i13 = 1; i13 < 80; i13++) {
            if (i11 != 0) {
                vMeth_check_sum += (b1 ? 1 : 0) + Float.floatToIntBits(f3) + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            }
        }
        for (i15 = 4; i15 < 95; ++i15) {
            for (i17 = 1; i17 < 6; i17++) {
                byArr = byArr;
                Test.instanceCount = i17;
            }
            i19 = 1;
            do {
                i20 = 1;
                do {
                    Test.iArrFld = Test.iArrFld;
                    i18 += (i20 | i13);
                } while (++i20 < 1);
                for (i21 = 1; i21 > i15; --i21) {
                    dArr[i19 + 1] = i18;
                    Test.instanceCount = Test.instanceCount;
                    Test.iFld = Test.iFld;
                    Test.iFld += i21;
                    i12 ^= i15;
                    i12 = i15;
                    d = i17;
                    fArr1[i19 + 1] *= i19;
                    f3 += -22395L;
                    i16 += (4 + (i21 * i21));
                    Test.iFld >>= i18;
                    Test.iFld = Test.iFld;
                    Test.lArrFld1[i15] += 1203567676L;
                    f3 += 8602;
                }
                Test.instanceCount >>= i22;
                f3 -= Test.instanceCount;
            } while (++i19 < 6);
        }
        vMeth_check_sum += (b1 ? 1 : 0) + Float.floatToIntBits(f3) + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth(byte by, short s) {
        int i23 = 46525, i24 = 8600, i25 = 3, i26 = -232, i27 = 12, i28 = 141;
        boolean b2 = false;
        vMeth();
        switch((((Test.iFld >>> 1) % 7) * 5) + 30) {
            case 49:
                try {
                    Test.instanceCount /= (Test.iFld | 1);
                    Test.iFld <<= Test.iFld;
                    Test.iFld >>>= (int) Test.instanceCount;
                    i23 = 1;
                    while (++i23 < 212) {
                        {
                            java.io.PrintStream ax$18 = System.out;
                            java.io.PrintStream ax$19 = System.err;
                            java.io.PrintStream ax$20 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$20);
                            System.setErr(ax$20);
                            {
                                boolean ax$25 = false;
                                for (int ax$24 = -2994; ax$24 < 6927; ax$24 += 2) {
                                    if (!ax$25) {
                                        ax$25 = true;
                                        {
                                            System.setOut(ax$18);
                                            System.setErr(ax$19);
                                            if (b2) {
                                                Test.iFld = i23;
                                                Test.iArrFld[(Test.iFld >>> 1) % N][i23] = (int) Test.dFld;
                                                Test.iFld += (((i23 * Test.iFld) + Test.fFld) - Test.iFld);
                                                Test.iFld += (i23 - Test.instanceCount);
                                                Test.iFld = Test.iFld;
                                                for (i24 = i23; i24 < 3; i24++) {
                                                    i25 += i24;
                                                    for (i26 = 1; i26 < 1; ++i26) {
                                                        Test.iArrFld[i23 - 1][i26 + 1] *= (int) -123.13F;
                                                        Test.instanceCount *= (long) Test.fFld;
                                                        i25 += i26;
                                                        i25 *= 64449;
                                                        i27 += i25;
                                                        Test.iArrFld[i23 + 1][i24 + 1] -= by;
                                                        i27 = (int) Test.instanceCount;
                                                        Test.iFld = i23;
                                                        Test.dArrFld = Test.dArrFld;
                                                        if (b2)
                                                            break;
                                                        Test.iArrFld[i26][i24] -= (int) 15.846F;
                                                    }
                                                    Test.iFld ^= i23;
                                                    Test.instanceCount = Test.instanceCount;
                                                    i27 /= (int) (Test.instanceCount | 1);
                                                    Test.lArrFld1[i24] *= i27;
                                                    Test.fFld *= i24;
                                                    Test.iArrFld[i23 + 1][i24 + 1] >>= s;
                                                    Test.iFld = i24;
                                                    i27 |= i25;
                                                    try {
                                                        Test.iFld = (19536537 % i26);
                                                        i27 = (8 / i24);
                                                        i25 = (1719 % i27);
                                                    } catch (ArithmeticException a_e) {
                                                    }
                                                    i25 = (int) Test.instanceCount;
                                                }
                                            } else {
                                                Test.iArrFld[i23][i23 - 1] = i25;
                                            }
                                            System.setOut(ax$20);
                                            System.setErr(ax$20);
                                        }
                                    }
                                    boolean ax$22 = b2;
                                    try {
                                        boolean ax$21 = /*timing=*/
                                        false;
                                        if (!b2) {
                                            ax$21 = true;
                                        }
                                    } catch (Throwable ax$23) {
                                    } finally {
                                        b2 = ax$22;
                                    }
                                }
                            }
                            System.setOut(ax$18);
                            System.setErr(ax$19);
                        }
                    }
                } catch (NullPointerException exc2) {
                    Test.iFld -= Test.iFld;
                }
            case 55:
                i25 -= i26;
                break;
            case 38:
                i25 >>= -92;
                break;
            case 39:
                i28 += (int) 3371650488253552056L;
            case 60:
                Test.iArrFld[(i23 >>> 1) % N][(i24 >>> 1) % N] -= (int) Test.instanceCount;
                break;
            case 32:
                Test.instanceCount = i23;
                break;
            case 36:
                Test.iArrFld[(i26 >>> 1) % N][(i24 >>> 1) % N] >>= (int) Test.instanceCount;
                break;
        }
        long meth_res = by + s + i23 + i24 + i25 + i26 + i27 + (b2 ? 1 : 0) + i28;
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -14, i1 = 3, i2 = -1269, i3 = -198, i29 = -38, i30 = 143, i31 = -6, i32 = 18846, i33 = -199, i34 = 14, i35 = -71, i36 = 59747, i37 = -253, i38 = -57;
        float f = -2.625F, f4 = -8.73F, fArr[] = new float[N];
        short s1 = -26845, sArr1[] = new short[N];
        byte by2 = -104;
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(fArr, -72.608F);
        FuzzerUtils.init(sArr1, (short) 10022);
        FuzzerUtils.init(bArr, false);
        i = i;
        for (i1 = 3; 111 > i1; i1 += 3) {
            fArr[i1] = (lArrFld[i1 - 1]++);
            i3 = 139;
            do {
                switch((i1 % 4) + 36) {
                    case 36:
                        f -= (float) ((i2 = (int) (217 + (Test.dFld - i3))) - ((-19.163F + (i1 + 89.1013F)) * (i2--)));
                        for (int smallinvoc = 0; smallinvoc < 1; smallinvoc++) vSmallMeth(lMeth((byte) (75), s1), i);
                        f -= 253;
                        i2 /= (int) ((long) (f) | 1);
                        Test.dFld = -1986609598L;
                        i -= (int) f;
                        for (i29 = 1; i29 < 3; i29++) {
                            i2 <<= -44428;
                            s1 = (short) i;
                            Test.iArrFld[i29][i1 - 1] *= (int) Test.instanceCount;
                            i2 += (((i29 * i3) + i3) - i);
                            fArr = fArr;
                            Test.instanceCount += 134;
                            Test.lArrFld1[(i >>> 1) % N] &= i;
                            i = (int) Test.instanceCount;
                            sArr1[i3 - 1] *= (short) -2.384F;
                            i2 *= (int) Test.instanceCount;
                            Test.iArrFld[i29 + 1][i3] >>= i3;
                            f += (i29 + i);
                            try {
                                Test.iFld = (i1 % i29);
                                Test.iArrFld[i1 + 1][i29 + 1] = (i30 % 1300100390);
                                Test.iFld = (-42353 / Test.iFld);
                            } catch (ArithmeticException a_e) {
                            }
                            bArr[i29 - 1] = false;
                            fArr[i3 + 1] += i;
                        }
                        for (f4 = 1; f4 < 3; f4++) {
                            f *= (float) Test.dFld;
                            i30 += 209;
                            i31 *= i29;
                            Test.instanceCount += 49;
                        }
                        Test.instanceCount += (((i3 * Test.instanceCount) + i1) - f4);
                        Test.iFld1 += i3;
                        iFld2 += (i3 * Test.instanceCount);
                        for (i32 = 1; 3 > i32; ++i32) {
                            iFld2 &= i31;
                            Test.iArrFld[i32 + 1][i3 + 1] %= -125;
                            by2 += (byte) f;
                            Test.instanceCount = i1;
                            i += (i32 * i32);
                            Test.instanceCount += Test.instanceCount;
                        }
                        Test.iFld += (-4 + (i3 * i3));
                        i31 %= (int) ((long) (f4) | 1);
                        break;
                    case 37:
                        Test.fFld -= i2;
                        Test.instanceCount -= i;
                        i -= i32;
                        Test.instanceCount += (-6L + (i3 * i3));
                        for (i34 = 1; i34 < 3; ++i34) {
                            i35 -= i33;
                            Test.instanceCount = (long) 1.595F;
                            Test.iFld = -6;
                            f += Test.instanceCount;
                            i31 -= Test.iFld;
                            i30 += i35;
                            iFld2 = (int) -2.725F;
                        }
                        iFld2 -= (int) Test.instanceCount;
                        by2 += (byte) (i3 * i3);
                        Test.iFld ^= -19811;
                        break;
                    case 38:
                        Test.fFld += (i3 + Test.iFld);
                        i33 += (i3 + i35);
                        iFld2 *= (int) Test.instanceCount;
                        lArrFld[i1 - 1] = i31;
                        i36 = 1;
                        do {
                            i %= (int) (Test.instanceCount | 1);
                            i33 *= 0;
                            i31 -= (int) Test.instanceCount;
                            Test.dFld /= ((long) (Test.dFld) | 1);
                            Test.instanceCount *= -26397;
                            Test.iFld -= i;
                        } while (++i36 < 3);
                        for (i37 = 1; i37 < 3; i37++) {
                            try {
                                Test.iArrFld[i37][i1] = (Test.iArrFld[i1 + 1][i37 + 1] / i);
                                i38 = (3046 / i2);
                                iFld2 = (i36 / i2);
                            } catch (ArithmeticException a_e) {
                            }
                            i31 = (int) Test.fFld;
                            f *= i;
                            f = Test.iFld;
                        }
                        break;
                    case 39:
                        fArr[i1] -= i37;
                        break;
                    default:
                        Test.iFld1 = i37;
                }
            } while ((i3 -= 3) > 0);
        }
        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 f s1 = " + i3 + "," + Float.floatToIntBits(f) + "," + s1);
        FuzzerUtils.out.println("i29 i30 f4 = " + i29 + "," + i30 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("by2 i34 i35 = " + by2 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 i37 i38 = " + i36 + "," + i37 + "," + i38);
        FuzzerUtils.out.println("fArr sArr1 bArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," + FuzzerUtils.checkSum(sArr1) + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld Test.iFld1 iFld2 = " + Float.floatToIntBits(Test.fFld) + "," + Test.iFld1 + "," + iFld2);
        FuzzerUtils.out.println("lArrFld Test.iArrFld Test.lArrFld1 = " + FuzzerUtils.checkSum(lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld1));
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$38) {
            try {
                boolean ax$40 = false;
                java.lang.Exception ax$39 = new Exception();
                if (!ax$40 && ax$39 != null)
                    ;
            } catch (Throwable ax$41) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$26 = false;

    private static Boolean ax$38 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
// DEBUG  lMeth ->  lMeth mainTest
// DEBUG  vMeth ->  vMeth lMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
