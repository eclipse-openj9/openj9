// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 8357798311428845852L;

    public static float fFld = 1.376F;

    public static volatile int iFld = -10;

    public int iFld1 = -30608;

    public boolean bFld = true;

    public short sFld = -20568;

    public static long[] lArrFld = new long[N];

    public static byte[] byArrFld = new byte[N];

    public static int[] iArrFld = new int[N];

    public boolean[] bArrFld = new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3730L);
        FuzzerUtils.init(Test.byArrFld, (byte) -44);
        FuzzerUtils.init(Test.iArrFld, 7);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i2, long l, int i3) {
        int i4 = -12, i5 = -9, i6 = 0, i7 = -21116, i8 = 49482, iArr[] = new int[N];
        long l1 = -6058553726543319621L;
        short s = 11314;
        boolean b = true;
        float[] fArr = new float[N];
        FuzzerUtils.init(iArr, -20116);
        FuzzerUtils.init(fArr, 0.264F);
        try {
            i3 = i3;
            iArr[(i3 >>> 1) % N] = 1;
            for (i4 = 3; i4 < (179 + 256); i4++) {
                for (l1 = 1; l1 < (2 + 256); l1++) {
                    i5 -= i3;
                    Test.iFld -= Test.iFld;
                    for (i7 = i4; i7 < (1 + 256); i7++) {
                        byte by = -85;
                        double d1 = -78.16169;
                        switch(((-2 >>> 1) % 2) + 96) {
                            case 96:
                                iArr[(int) (l1 + 1)] -= i8;
                                s += (short) (14586 + (i7 * i7));
                                i3 += (int) l;
                                l -= l;
                                i3 *= i7;
                                i8 = Test.iFld;
                                if (b) {
                                    Test.lArrFld[(int) (l1 - 1)] = s;
                                    i2 = -16581;
                                    by >>= (byte) Test.iFld;
                                    i2 -= s;
                                    i8 = 28869;
                                    i3 += (i7 | i6);
                                    d1 *= Test.iFld;
                                    Test.iFld &= i4;
                                    Test.byArrFld[(int) (l1 + 1)] = (byte) Test.instanceCount;
                                    vMeth2_check_sum += i2 + l + i3 + i4 + i5 + l1 + i6 + i7 + i8 + s + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                    return;
                                } else {
                                    d1 *= -73;
                                    switch(((i7 % 4) * 5) + 16) {
                                        case 19:
                                            iArr[i4 + 1] = Test.iFld;
                                            i6 += 54;
                                            fArr[i7] = Test.iFld;
                                            if (b)
                                                continue;
                                            Test.iFld = -108;
                                            Test.fFld -= (float) -1.92315;
                                            i6 += i3;
                                            l <<= i3;
                                            i5 = i8;
                                            i6 = i4;
                                            break;
                                        case 17:
                                            i3 += i7;
                                            break;
                                        case 18:
                                            if (i2 != 0) {
                                                vMeth2_check_sum += i2 + l + i3 + i4 + i5 + l1 + i6 + i7 + i8 + s + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                                return;
                                            }
                                        case 36:
                                    }
                                }
                                break;
                            case 97:
                                i2 *= i8;
                            default:
                                if (b)
                                    break;
                        }
                    }
                }
            }
        } catch (ArrayIndexOutOfBoundsException exc2) {
            Test.lArrFld = Test.lArrFld;
        }
        vMeth2_check_sum += i2 + l + i3 + i4 + i5 + l1 + i6 + i7 + i8 + s + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1() {
        double d = 38.118578, dArr[] = new double[N];
        long l2 = -2860397568730496690L;
        int i9 = -340, i10 = 63379, i11 = 64410, i12 = 19, i13 = -11, i14 = 43, i15 = 6, i16 = -17822, i17 = -8;
        short s1 = 9935;
        byte by1 = 95;
        FuzzerUtils.init(dArr, 1.23224);
        Test.fFld *= (float) (((Test.instanceCount * Test.iFld) + (-22478 - d)) + (-119 * Test.fFld));
        vMeth2(Test.iFld, l2, Test.iFld);
        for (i9 = 3; i9 < 180; i9++) {
            for (i11 = 1; i11 < 3; ++i11) {
                i10 += (i11 * i9);
                for (i13 = 1; i13 < 2; i13 += 2) {
                    Test.iArrFld[i13] = i12;
                    Test.lArrFld[i11] = -1;
                    Test.lArrFld[i9 + 1] -= i12;
                    dArr[i9] = i10;
                    Test.iFld += -8357;
                    switch(((i13 % 4) * 5) + 50) {
                        case 66:
                            dArr[i13] = l2;
                            d /= 201;
                            Test.iFld += i13;
                            dArr[i9 + 1] %= (i14 | 1);
                            Test.fFld += i12;
                            l2 |= i11;
                            i10 = i9;
                            i14 = i15;
                            Test.instanceCount >>= s1;
                            l2 *= s1;
                            Test.iFld += (((i13 * i11) + Test.iFld) - l2);
                            by1 = (byte) i9;
                            switch((((i12 >>> 1) % 10) * 5) + 81) {
                                case 119:
                                    Test.fFld += i13;
                                    i14 *= (int) -3459695661L;
                                    Test.iArrFld[i13 - 1] &= (int) Test.instanceCount;
                                    Test.iArrFld[i13 + 1] += (int) 2.18071;
                                    break;
                                case 110:
                                    i14 <<= (int) l2;
                                    i14 = (int) d;
                                    break;
                                case 94:
                                case 123:
                                case 114:
                                    Test.iFld -= i10;
                                    i10 &= 3762;
                                    l2 = l2;
                                    l2 += i13;
                                    Test.fFld += (float) d;
                                    i15 -= (int) Test.instanceCount;
                                    break;
                                case 102:
                                    Test.instanceCount >>>= i13;
                                    break;
                                case 127:
                                    i15 = i14;
                                case 126:
                                    i10 >>>= i15;
                                    break;
                                case 122:
                                    Test.lArrFld[i11 + 1] %= (i14 | 1);
                                    break;
                                case 96:
                                    i16 <<= s1;
                                    break;
                                default:
                                    i10 >>>= i10;
                            }
                            break;
                        case 68:
                            try {
                                Test.iArrFld[i13] = (17083 % i14);
                                i10 = (i17 % 243);
                                Test.iArrFld[i13] = (i13 / 73);
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        case 59:
                            i14 = i17;
                        case 61:
                            Test.fFld += (((i13 * i14) + Test.instanceCount) - l2);
                            break;
                        default:
                            i14 = i11;
                    }
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + l2 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + s1 + by1 + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i) {
        int i1 = -127, i18 = 5, i19 = -23806, i20 = 21963, i21 = 40467, i22 = -26405;
        float f = 22.192F, fArr1[] = new float[N];
        byte by2 = 13;
        double d2 = 45.1851, dArr1[] = new double[N];
        short s2 = 28174;
        FuzzerUtils.init(dArr1, -79.5124);
        FuzzerUtils.init(fArr1, 1.655F);
        i1 = 1;
        do {
            Test.lArrFld[i1] += ((i--) + ((--i) + (i * i1)));
            vMeth1();
            Test.fFld = 182;
        } while (++i1 < 225);
        for (i18 = 4; 205 > i18; ++i18) {
            for (i20 = 3; 1 < i20; --i20) {
                switch((i18 % 10) + 46) {
                    case 46:
                        for (f = 1; f < 2; ++f) {
                            boolean b1 = false;
                            by2 = (byte) Test.iFld;
                            i19 *= i21;
                            Test.instanceCount += (long) (f + Test.iFld);
                            if (b1) {
                                Test.iFld = i22;
                                Test.fFld += f;
                                d2 = d2;
                                Test.iArrFld[(int) (f)] += i22;
                                dArr1[(int) (f)] = -21850;
                                Test.instanceCount = i18;
                                i19 += (int) (((f * by2) + s2) - i1);
                                Test.fFld += i;
                                Test.instanceCount += (long) (f * f);
                                i21 >>>= -13;
                                if (b1)
                                    break;
                                i21 += (int) f;
                            } else if (b1) {
                                d2 -= i20;
                                Test.iFld = -4694;
                                i -= (int) -8L;
                                i21 *= s2;
                                d2 += 59503;
                                dArr1[i20] += Test.instanceCount;
                                i += by2;
                                Test.instanceCount += (long) (((f * i21) + Test.fFld) - i22);
                                Test.iFld += (int) f;
                                i19 = i20;
                                fArr1[i18 + 1] += Test.instanceCount;
                                Test.lArrFld[i18] += 24;
                                vMeth_check_sum += i + i1 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f) + i22 + by2 + Double.doubleToLongBits(d2) + s2 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                                return;
                            } else if (b1) {
                                i19 *= i22;
                            } else {
                                Test.iArrFld[i18] <<= i;
                            }
                        }
                    case 47:
                        i19 *= (int) 8916973532288132799L;
                        break;
                    case 48:
                        Test.byArrFld[i20 + 1] -= (byte) Test.iFld;
                        break;
                    case 49:
                        s2 += (short) (i20 ^ i1);
                        break;
                    case 50:
                        Test.instanceCount += (((i20 * i18) + i20) - i);
                        break;
                    case 51:
                        i += (int) (499493508767582025L + (i20 * i20));
                        break;
                    case 52:
                        by2 = (byte) Test.instanceCount;
                        break;
                    case 53:
                        i = i20;
                    case 54:
                        Test.iArrFld = Test.iArrFld;
                        break;
                    case 55:
                        Test.iFld = (int) Test.instanceCount;
                        break;
                }
            }
        }
        vMeth_check_sum += i + i1 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f) + i22 + by2 + Double.doubleToLongBits(d2) + s2 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {
        if (ax$0) {
            try {
                boolean ax$3 = true;
                if (ax$3) {
                }
            } catch (Throwable ax$4) {
            } finally {
            }
            return;
        }
        int i23 = 24958, i24 = -10, i25 = 45737, i26 = 11, i27 = -214, i28 = 6, i29 = -173, i30 = -41517, i31 = 152;
        double d3 = 74.99487;
        long l3 = -167L, l4 = -32238L;
        byte by3 = -71;
        float[] fArr2 = new float[N];
        FuzzerUtils.init(fArr2, -85.564F);
        vMeth(Test.iFld);
        try {
            Test.fFld -= -76;
            Test.iFld -= Test.iFld;
            for (i23 = 1; i23 < (147 + 256); i23++) {
                for (i25 = 1; i25 < (20 + 256); i25 += 2) {
                    for (i27 = 1; i27 < (1 + 256); i27++) {
                        switch(((i24 >>> 1) % 10) + 96) {
                            case 96:
                                d3 *= l3;
                                d3 = Test.instanceCount;
                                Test.instanceCount -= i26;
                                Test.iArrFld[i25 + 1] >>>= iFld1;
                                Test.fFld += iFld1;
                                if (true)
                                    break;
                                Test.iArrFld[i23] &= i24;
                                break;
                            case 97:
                                try {
                                    i29 = (i25 % iFld1);
                                    i29 = (Test.iFld / -42);
                                    Test.iArrFld[i25 - 1] = (i29 / i24);
                                } catch (ArithmeticException a_e) {
                                }
                                if (bFld)
                                    continue;
                                i29 = (int) -39.749F;
                                i28 = (int) l3;
                                i29 += (i27 - l3);
                                l3 |= Test.instanceCount;
                                d3 *= i24;
                                iFld1 *= -8;
                                Test.iArrFld[i25 - 1] = by3;
                                Test.instanceCount = 1149583297L;
                                i24 = (int) l3;
                                Test.instanceCount += l3;
                            case 98:
                            case 99:
                                l3 += (((i27 * by3) + Test.iFld) - i25);
                                i29 = -35412;
                                switch((i27 % 6) + 71) {
                                    case 71:
                                        i28 += Test.iFld;
                                        bArrFld[(i29 >>> 1) % N] = true;
                                        if (true)
                                            continue;
                                        i26 += (i27 * l3);
                                        Test.iArrFld[i27 - 1] = by3;
                                        i28 += i25;
                                        i28 = -2;
                                    case 72:
                                        Test.fFld = sFld;
                                        switch(((i27 % 6) * 5) + 53) {
                                            case 75:
                                                Test.instanceCount <<= Test.iFld;
                                                i29 = (int) d3;
                                                Test.iArrFld = Test.iArrFld;
                                                i26 -= i24;
                                                i29 += (i27 * i27);
                                                Test.fFld -= i27;
                                                fArr2[i23] -= Test.fFld;
                                                Test.fFld %= (i24 | 1);
                                                i26 = -13813;
                                                Test.fFld += i27;
                                                break;
                                            case 60:
                                                i26 <<= i28;
                                                Test.iArrFld[i23 + 1] = 10;
                                                l3 += (((i27 * Test.instanceCount) + i27) - sFld);
                                                break;
                                            case 79:
                                                iFld1 += (((i27 * i28) + i28) - sFld);
                                                Test.iArrFld = FuzzerUtils.int1array(N, (int) 39735);
                                                i28 *= (int) l3;
                                                Test.fFld += -9339;
                                                Test.fFld = -61676;
                                                i29 = (int) Test.fFld;
                                                l3 %= 198;
                                                l3 += (i27 - i26);
                                                if (true)
                                                    break;
                                                by3 = (byte) i30;
                                                i28 -= i30;
                                                if (bFld) {
                                                    d3 = Test.instanceCount;
                                                    Test.fFld += Test.fFld;
                                                    Test.iArrFld[(i23 >>> 1) % N] *= (int) l3;
                                                    Test.iArrFld[i27 + 1] -= 47817;
                                                    iFld1 *= -1783;
                                                    switch((i25 % 7) + 30) {
                                                        case 30:
                                                            Test.iArrFld = Test.iArrFld;
                                                            i26 = sFld;
                                                            if (bFld)
                                                                break;
                                                            try {
                                                                Test.iFld = (-39541 % iFld1);
                                                                i28 = (iFld1 % 137);
                                                                i24 = (44909 % i28);
                                                            } catch (ArithmeticException a_e) {
                                                            }
                                                            break;
                                                        case 31:
                                                            i30 = i25;
                                                            break;
                                                        case 32:
                                                            by3 += (byte) -152;
                                                            break;
                                                        case 33:
                                                            l3 ^= -1;
                                                            break;
                                                        case 34:
                                                            Test.fFld = i23;
                                                            break;
                                                        case 35:
                                                            i30 += (12 + (i27 * i27));
                                                            break;
                                                        case 36:
                                                            l3 += (i27 | i25);
                                                            break;
                                                        default:
                                                            bArrFld[i25 + 1] = bFld;
                                                    }
                                                }
                                                break;
                                            case 58:
                                                if (bFld)
                                                    break;
                                            case 57:
                                                i26 -= i24;
                                                break;
                                            case 81:
                                                Test.lArrFld[i27] >>= i28;
                                                break;
                                            default:
                                                Test.instanceCount += Test.instanceCount;
                                        }
                                        break;
                                    case 73:
                                        i30 += (i27 ^ i25);
                                        break;
                                    case 74:
                                        Test.iFld = i26;
                                        break;
                                    case 75:
                                        bFld = true;
                                        break;
                                    case 76:
                                        Test.iFld += (1 + (i27 * i27));
                                        break;
                                    default:
                                        Test.iFld *= i27;
                                }
                                break;
                            case 100:
                                i28 += i24;
                            case 101:
                                i29 = i31;
                            case 102:
                                i29 >>= -20102;
                            case 103:
                            case 104:
                                Test.instanceCount += (long) d3;
                            case 105:
                                i30 += i27;
                                break;
                            default:
                                l4 = (long) 76.97731;
                        }
                    }
                }
            }
        } catch (ArrayIndexOutOfBoundsException exc3) {
            l4 += (long) d3;
        }
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("d3 l3 i29 = " + Double.doubleToLongBits(d3) + "," + l3 + "," + i29);
        FuzzerUtils.out.println("by3 i30 i31 = " + by3 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("l4 fArr2 = " + l4 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("iFld1 bFld sFld = " + iFld1 + "," + (bFld ? 1 : 0) + "," + sFld);
        FuzzerUtils.out.println("Test.lArrFld Test.byArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.byArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("bArrFld = " + FuzzerUtils.checkSum(bArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
