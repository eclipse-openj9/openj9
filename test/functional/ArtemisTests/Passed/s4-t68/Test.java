// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.Random;

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = -3824681335L;

    public static int iFld = -11312;

    public static short sFld = -28288;

    public static int iFld1 = -10;

    public static volatile byte byFld = 53;

    public static volatile double dFld = 0.23728;

    public static int iFld2 = -36297;

    public long[][] lArrFld = new long[N][N];

    public static float[] fArrFld = new float[N];

    public static volatile long[] lArrFld1 = new long[N];

    public byte[][] byArrFld = new byte[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 110.866F);
        FuzzerUtils.init(Test.lArrFld1, 2L);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2) {
        float f = 1.139F, f1 = 26.280F;
        int i3 = -134, i4 = -4, i5 = 250, i6 = 1, i7 = -14241, i8 = 19816, i9 = -2, i10 = -7, i11 = 51777, iArr[] = new int[N];
        byte by = -84, by1 = 14;
        long[][] lArr = new long[N][N];
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr, 5);
        FuzzerUtils.init(lArr, 1719655451L);
        FuzzerUtils.init(dArr, 71.11529);
        for (f = 6; 174 > f; ++f) {
            double d = -25.122430;
            i3 += Test.iFld;
            i3 = (int) d;
            i4 -= Test.iFld;
            i3 += (int) (((f * i4) + Test.instanceCount) - i2);
            by = (byte) Test.iFld;
            switch((int) ((f % 9) + 95)) {
                case 95:
                    iArr[(int) (f - 1)] *= (int) d;
                    i3 += (int) (((f * i3) + Test.iFld) - Test.iFld);
                    f1 += (float) 73.46159;
                    iArr[(Test.iFld >>> 1) % N] = (int) Test.instanceCount;
                    i2 += (int) (f - Test.instanceCount);
                    for (i5 = (int) (f); i5 < 3; i5++) {
                        i7 += (int) f;
                    }
                    break;
                case 96:
                    Test.instanceCount = i5;
                    i2 = i2;
                    Test.instanceCount += (long) ((long) f ^ i2);
                    i4 <<= (int) 2709L;
                    Test.iFld *= i2;
                    for (i8 = (int) (f); i8 < 3; i8++) {
                        iArr[i8] = i4;
                        iArr[i8 - 1] = (int) Test.instanceCount;
                        f1 = i5;
                        for (i10 = 1; i10 > 1; i10 -= 3) {
                            boolean b = false;
                            d -= f1;
                            i9 += (int) Test.instanceCount;
                            i2 -= 174;
                            Test.instanceCount |= -8045004177160449366L;
                            try {
                                Test.iFld = (iArr[(int) (f - 1)] / i3);
                                i6 = (i11 / iArr[(int) (f - 1)]);
                                iArr[i8 - 1] = (iArr[i8] / 1936704110);
                            } catch (ArithmeticException a_e) {
                            }
                            by = (byte) Test.instanceCount;
                            i6 >>>= i9;
                            if (b)
                                continue;
                            if (b)
                                break;
                            lArr[i10][i8] += i8;
                        }
                        d = 494701400L;
                    }
                    Test.sFld >>= (short) Test.iFld1;
                    break;
                case 97:
                    i3 += (int) (f - i10);
                    break;
                case 98:
                    i6 += (int) (((f * i8) + i11) - i8);
                case 99:
                case 100:
                    Test.instanceCount <<= by;
                case 101:
                    by >>>= (byte) i7;
                    break;
                case 102:
                    dArr[(int) (f - 1)] += by1;
                    break;
                case 103:
                    Test.iFld1 = Test.iFld;
                    break;
            }
        }
        vMeth1_check_sum += i2 + Float.floatToIntBits(f) + i3 + i4 + by + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + by1 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth() {
        double d1 = 2.18464;
        int i12 = -38281, i13 = 23597, i14 = -11, i15 = 28027, i16 = 1, i17 = 59433, i18 = -110, i19 = -18285, i20 = 48310, i21 = -9, iArr1[] = new int[N], iArr2[] = new int[N];
        long l = 2479898618116832282L;
        float f2 = -1.677F;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr1, 7861);
        FuzzerUtils.init(byArr, (byte) -62);
        FuzzerUtils.init(iArr2, -44076);
        vMeth1(Test.iFld);
        for (d1 = 5; 102 > d1; d1++) {
            Test.iFld += (int) d1;
            Test.iFld1 += (int) Test.instanceCount;
            i13 = 1;
            {
                java.io.PrintStream ax$0 = System.out;
                java.io.PrintStream ax$1 = System.err;
                java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$2);
                System.setErr(ax$2);
                {
                    boolean ax$36 = false;
                    for (int ax$35 = -3540; ax$35 < 4181; ax$35 += 8) {
                        if (!ax$36) {
                            ax$36 = true;
                            {
                                System.setOut(ax$0);
                                System.setErr(ax$1);
                                while (++i13 < 6) {
                                    Test.instanceCount <<= -20L;
                                }
                                System.setOut(ax$2);
                                System.setErr(ax$2);
                            }
                        }
                        int ax$33 = i20;
                        try {
                            long[] ax$32 = new long[60];
                            java.util.Random ax$27 = new Random(69);
                            boolean[] ax$28 = { true, false, false, false, false, false, false };
                            long[] ax$26 = new long[60];
                            for (int ax$29 = 0; ax$29 < i20; ax$29++) {
                                long ax$31 = ax$27.nextLong();
                                for (int ax$30 = 0; ax$30 < 64; ax$30++) {
                                    ax$28[ax$29 * 64 + ax$30] = (ax$31 & (1L << ax$30)) != 0;
                                }
                                ax$32[ax$29] = 0;
                                ax$26[ax$29] = ax$31;
                            }
                        } catch (Throwable ax$34) {
                        } finally {
                            i20 = ax$33;
                        }
                    }
                }
                System.setOut(ax$0);
                System.setErr(ax$1);
            }
            for (l = 1; l < 6; l++) {
                for (i15 = 1; i15 < 2; i15++) {
                    Test.iFld1 -= i15;
                    iArr1[i15] <<= (int) -2927L;
                    i16 += i15;
                    Test.iFld1 *= Test.iFld;
                    if (Test.iFld1 != 0) {
                    }
                    i12 += (((i15 * Test.iFld) + Test.iFld1) - i16);
                    Test.iFld = i17;
                    i12 -= (int) f2;
                    i17 += (-2 + (i15 * i15));
                    Test.instanceCount += (((i15 * Test.iFld1) + i15) - i12);
                    Test.iFld += i15;
                }
                Test.fArrFld[(int) (d1 - 1)] -= 68.283F;
                iArr1[(int) (l)] = i15;
                iArr1[(int) (d1 - 1)] += (int) d1;
                Test.instanceCount -= l;
                Test.instanceCount = 8;
                switch(((i12 >>> 1) % 9) + 86) {
                    case 86:
                        Test.instanceCount = l;
                        for (i18 = 1; i18 < 2; i18++) {
                            if (i17 != 0) {
                            }
                        }
                        for (i20 = 1; i20 < 2; i20++) {
                            double d2 = -2.59902;
                            iArr1[(int) (l)] -= i14;
                            try {
                                Test.iFld = (Test.iFld / i16);
                                i16 = (-16781 % Test.iFld);
                                i21 = (29252 / i20);
                            } catch (ArithmeticException a_e) {
                            }
                            switch((int) ((l % 4) + 102)) {
                                case 102:
                                    d2 -= Test.instanceCount;
                                    i19 += (int) Test.instanceCount;
                                    i19 *= (int) d1;
                                    i16 *= i20;
                                    i12 += (i20 * i20);
                                    break;
                                case 103:
                                    Test.instanceCount += (i20 + f2);
                                case 104:
                                    d2 = 12;
                                    break;
                                case 105:
                                default:
                                    byArr[(int) (l)] = Test.byFld;
                            }
                        }
                        break;
                    case 87:
                        Test.instanceCount = i20;
                        break;
                    case 88:
                        Test.sFld += (short) l;
                        break;
                    case 89:
                        Test.instanceCount ^= l;
                    case 90:
                        Test.dFld = i15;
                        break;
                    case 91:
                        i16 += (int) (l - i21);
                    case 92:
                        iArr2[(int) (l - 1)] = -13;
                        break;
                    case 93:
                        Test.iFld = Test.byFld;
                        break;
                    case 94:
                        f2 -= i12;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i12 + i13 + l + i14 + i15 + i16 + i17 + Float.floatToIntBits(f2) + i18 + i19 + i20 + i21 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(int i1) {
        int i22 = 17023, i23 = 1, i24 = -47547, i25 = 17158, i26 = -15, i27 = -8, i28 = -30, i29 = -34070, i30 = -7, i31 = -33093, iArr3[] = new int[N];
        float f3 = -2.295F;
        boolean b1 = true;
        FuzzerUtils.init(iArr3, 232);
        Test.fArrFld[(i1 >>> 1) % N] = iMeth();
        i22 = 1;
        do {
            for (i23 = 1; i23 < 3; ++i23) {
                float f4 = -1.791F;
                i24 += (i23 ^ i1);
                i24 += (int) Test.dFld;
                i25 = 2;
                while (--i25 > 0) {
                    Test.iFld &= (int) Test.instanceCount;
                }
                for (i26 = 1; i26 < 2; i26++) {
                    f3 += (((i26 * Test.iFld1) + f3) - Test.iFld1);
                    if (b1)
                        break;
                }
                if (b1) {
                    i24 *= Test.byFld;
                    Test.dFld += i24;
                    Test.iFld1 &= i25;
                    i1 += (int) f3;
                    Test.iFld |= i28;
                    Test.instanceCount -= (long) f4;
                    i29 = 1;
                    do {
                        Test.iFld += (i29 + i24);
                        i27 += i29;
                        Test.byFld = (byte) Test.instanceCount;
                        Test.iFld = (int) Test.instanceCount;
                        Test.dFld += -2603862747L;
                    } while (++i29 < 2);
                    Test.instanceCount += (((i23 * i28) + Test.instanceCount) - Test.instanceCount);
                    Test.fArrFld[i22] = 56065;
                    iArr3[i22] = (int) Test.instanceCount;
                    for (i30 = 2; i30 > 1; i30 -= 3) {
                        if (true)
                            continue;
                        Test.byFld -= (byte) f3;
                        Test.iFld1 += (((i30 * f4) + i31) - i30);
                        Test.instanceCount = i24;
                    }
                    i28 += (((i23 * Test.iFld1) + i23) - i1);
                    Test.iFld1 += (-29311 + (i23 * i23));
                    i27 += (-12 + (i23 * i23));
                } else {
                    i27 += i24;
                    Test.lArrFld1[i22 + 1] = -14;
                }
                b1 = b1;
            }
        } while (++i22 < 209);
        vMeth_check_sum += i1 + i22 + i23 + i24 + i25 + i26 + i27 + Float.floatToIntBits(f3) + (b1 ? 1 : 0) + i28 + i29 + i30 + i31 + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {
        if (ax$44) {
            int ax$47 = iFld1;
            int ax$48 = iFld2;
            try {
                char[] ax$45 = new char[] { 40000, 40001, 40002, 40003, 40004 };
                char[] ax$46 = new char[] { 40000, 40001, 40002, 40003, 40004 };
                ax$46[iFld2] = (char) (ax$45[iFld2] >> iFld1);
            } catch (Throwable ax$49) {
            } finally {
                iFld1 = ax$47;
                iFld2 = ax$48;
            }
            return;
        }
        int i = 58298, i32 = 6, i33 = -14, i34 = 1, i35 = -157, i36 = -50524, iArr4[] = new int[N];
        short s = 22316;
        boolean b2 = true, bArr[] = new boolean[N];
        float f5 = 99.177F;
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr4, -8);
        i = (int) Long.reverseBytes(lArrFld[(i >>> 1) % N][(-14 >>> 1) % N] * (i++));
        s += (short) (i++);
        vMeth(Test.iFld);
        switch((((Test.iFld >>> 1) % 9) * 5) + 103) {
            case 148:
                bArr[(Test.iFld >>> 1) % N] = b2;
                i *= Test.iFld;
                f5 -= Test.iFld;
                i += i;
                Test.byFld /= (byte) ((long) (f5) | 1);
                for (i32 = 4; 211 > i32; ++i32) {
                    i34 = 1;
                    while ((i34 += 3) < 25) {
                        f5 = Test.iFld;
                        Test.iFld1 |= Test.byFld;
                        Test.byFld = (byte) Test.instanceCount;
                        b2 = b2;
                        Test.instanceCount -= (long) f5;
                        Test.instanceCount *= Test.iFld;
                        switch((i32 % 5) + 6) {
                            case 6:
                                if (b2)
                                    continue;
                                byArrFld[i32][i32 - 1] *= (byte) 61139;
                            case 7:
                                for (i35 = 1; i35 < 4; i35++) {
                                    i36 = Test.iFld1;
                                    i /= (int) (i35 | 1);
                                    Test.fArrFld[i32 + 1] = i34;
                                    Test.iFld1 = i32;
                                    switch((((i34 >>> 1) % 2) * 5) + 46) {
                                        case 55:
                                            f5 += i35;
                                            Test.iFld = (int) Test.instanceCount;
                                            i33 <<= i;
                                            iArr4[i35 + 1] -= (int) -7.306F;
                                            break;
                                        case 49:
                                            f5 += Test.instanceCount;
                                            Test.byFld = (byte) i35;
                                            Test.instanceCount -= (long) Test.dFld;
                                            Test.sFld = (short) i32;
                                            b2 = b2;
                                            Test.iFld = i33;
                                            f5 += (((i35 * i35) + i36) - Test.iFld);
                                            switch(((i35 % 3) * 5) + 7) {
                                                case 13:
                                                    Test.instanceCount = 6;
                                                    Test.dFld = Test.iFld1;
                                                    if (true) {
                                                        s += (short) (32947 + (i35 * i35));
                                                        Test.iFld1 -= i;
                                                        b2 = b2;
                                                        f5 *= Test.iFld;
                                                        s += (short) i;
                                                        Test.iFld >>>= 7;
                                                        switch(((i32 % 2) * 5) + 113) {
                                                            case 123:
                                                                Test.instanceCount = i;
                                                                if (b2)
                                                                    continue;
                                                                s += (short) (32680L + (i35 * i35));
                                                                i = 102;
                                                                Test.fArrFld[i34] /= ((long) (f5) | 1);
                                                                i36 += i34;
                                                                i33 = i32;
                                                                Test.sFld -= (short) Test.instanceCount;
                                                                Test.instanceCount += Test.instanceCount;
                                                                b2 = false;
                                                                Test.iFld1 &= i;
                                                                break;
                                                            case 119:
                                                                iArr4[i34 + 1] >>= Test.sFld;
                                                                Test.iFld1 = i;
                                                                i = i36;
                                                                Test.iFld -= i34;
                                                                Test.instanceCount = -2;
                                                                Test.dFld -= i;
                                                                i36 += (-10 + (i35 * i35));
                                                                Test.instanceCount = i36;
                                                                if (b2)
                                                                    continue;
                                                                f5 -= Test.iFld1;
                                                                i36 >>= i33;
                                                                Test.dFld *= i34;
                                                                break;
                                                            default:
                                                                iArr4[i35 - 1] += i36;
                                                                iArr4[i34] = i33;
                                                                Test.instanceCount = Test.iFld1;
                                                                Test.instanceCount = 145;
                                                        }
                                                    }
                                                    break;
                                                case 14:
                                                case 21:
                                                    f5 = Test.instanceCount;
                                                    break;
                                            }
                                            break;
                                    }
                                }
                                break;
                            case 8:
                                b2 = b2;
                                break;
                            case 9:
                                Test.iFld += (i34 - i);
                                break;
                            case 10:
                                Test.iFld1 += Test.iFld2;
                                break;
                            default:
                                i33 *= (int) f5;
                        }
                    }
                }
            case 135:
                f5 = 6145732976180099662L;
            case 144:
                i = Test.iFld;
                break;
            case 118:
            case 147:
                Test.instanceCount -= s;
                break;
            case 123:
                i36 = i35;
                break;
            case 137:
                lArrFld[(-2 >>> 1) % N][(-133 >>> 1) % N] = i35;
                break;
            case 120:
                i33 *= (int) f5;
                break;
            case 109:
                Test.instanceCount = (long) 1.83F;
                break;
            default:
                b2 = b2;
        }
        FuzzerUtils.out.println("i s b2 = " + i + "," + s + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("f5 i32 i33 = " + Float.floatToIntBits(f5) + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("bArr iArr4 = " + FuzzerUtils.checkSum(bArr) + "," + FuzzerUtils.checkSum(iArr4));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld1 Test.byFld Test.dFld = " + Test.iFld1 + "," + Test.byFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iFld2 lArrFld Test.fArrFld = " + Test.iFld2 + "," + FuzzerUtils.checkSum(lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.lArrFld1 byArrFld = " + FuzzerUtils.checkSum(Test.lArrFld1) + "," + FuzzerUtils.checkSum(byArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            {
                java.io.PrintStream ax$37 = System.out;
                java.io.PrintStream ax$38 = System.err;
                java.io.PrintStream ax$39 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$39);
                System.setErr(ax$39);
                {
                    boolean ax$43 = false;
                    for (int ax$42 = -1784; ax$42 < 3623; ax$42 += 2) {
                        if (!ax$43) {
                            ax$43 = true;
                            {
                                System.setOut(ax$37);
                                System.setErr(ax$38);
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                                System.setOut(ax$39);
                                System.setErr(ax$39);
                            }
                        }
                        try {
                            java.lang.String ax$40 = "A\u0307";
                            if (!ax$40.equals("Lord Howe Standard Time") && !ax$40.equals("Lord Howe Daylight Time")) {
                            }
                        } catch (Throwable ax$41) {
                        } finally {
                        }
                    }
                }
                System.setOut(ax$37);
                System.setErr(ax$38);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$44 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
