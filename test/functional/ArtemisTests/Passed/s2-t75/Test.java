// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.File;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 91951718609594903L;

    public static int iFld = -21243;

    public static float fFld = 1.342F;

    public static byte byFld = -6;

    public static short sFld = -26789;

    public static double dFld = 2.92666;

    public boolean bFld = true;

    public static long[] lArrFld = new long[N];

    public static volatile short[] sArrFld = new short[N];

    public double[] dArrFld = new double[N];

    public static float[] fArrFld = new float[N];

    public int[] iArrFld = new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -7381L);
        FuzzerUtils.init(Test.sArrFld, (short) 396);
        FuzzerUtils.init(Test.fArrFld, -1.668F);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long fMeth_check_sum = 0;

    public static float fMeth(int i2, int i3, long l) {
        int i4 = 9302, i5 = -10, i6 = 1918, i7 = -51, i8 = 7, i9 = -225, i10 = -13, iArr[] = new int[N];
        long l1 = -20762L, l2 = -7931125872602789003L;
        short s = -7471;
        double d1 = 85.1468;
        float f = -32.924F;
        FuzzerUtils.init(iArr, -59381);
        for (i4 = 13; i4 < 242; i4++) {
            Test.iFld += (((i4 * i2) + i4) - l);
            for (l1 = 3; l1 > 1; l1 -= 3) {
                for (i7 = 1; i7 < 3; i7++) {
                    Test.instanceCount -= i8;
                    i2 += (((i7 * i7) + l1) - i7);
                    i2 += (((i7 * i8) + i5) - l1);
                    i6 = i4;
                    s += (short) (((i7 * i5) + Test.instanceCount) - i7);
                    l2 += (((i7 * Test.instanceCount) + i4) - i6);
                    l2 += l1;
                    iArr[i4 - 1] &= i3;
                    Test.fFld = Test.instanceCount;
                    i2 += (((i7 * l2) + Test.byFld) - i6);
                    if (i6 != 0) {
                    }
                    d1 = i4;
                    Test.fFld += l;
                    s = (short) i4;
                }
                s |= (short) i5;
                Test.fFld += (-159L + (l1 * l1));
            }
            Test.lArrFld[i4] += l;
            for (i9 = i4; i9 < 3; i9++) {
                i8 -= (int) -64071L;
                switch((i9 % 7) + 77) {
                    case 77:
                        l2 -= 33552;
                        Test.iFld >>= i9;
                        Test.iFld -= i6;
                        i2 *= s;
                        Test.iFld *= i2;
                        i6 = (int) l;
                        Test.lArrFld[i4 - 1] = i7;
                        if (i9 != 0) {
                        }
                        {
                            java.io.PrintStream ax$4 = System.out;
                            java.io.PrintStream ax$5 = System.err;
                            java.io.PrintStream ax$6 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$6);
                            System.setErr(ax$6);
                            try {
                                for (int ax$2 = -397; ax$2 < 7097; ax$2 += 1) {
                                    try {
                                        boolean ax$0 = false;
                                        if (!ax$0) {
                                        }
                                    } catch (Throwable ax$1) {
                                    } finally {
                                    }
                                }
                            } catch (Throwable ax$3) {
                            }
                            System.setOut(ax$4);
                            System.setErr(ax$5);
                        }
                        i3 = i10;
                        i3 <<= i3;
                        break;
                    case 78:
                        f = 1;
                        while (++f < 1) {
                            iArr = iArr;
                            i2 /= (int) (l2 | 1);
                        }
                    case 79:
                        Test.iFld = 4;
                        break;
                    case 80:
                        l2 += (i9 | i9);
                        break;
                    case 81:
                        Test.sArrFld[i9] = (short) 11;
                        break;
                    case 82:
                        Test.instanceCount = i3;
                        break;
                    case 83:
                        l += (((i9 * Test.instanceCount) + l1) - s);
                        break;
                    default:
                        iArr = FuzzerUtils.int1array(N, (int) -38391);
                }
            }
        }
        long meth_res = i2 + i3 + l + i4 + i5 + l1 + i6 + i7 + i8 + s + l2 + Double.doubleToLongBits(d1) + i9 + i10 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public static int iMeth(double d) {
        if (ax$7) {
            try {
                java.io.File ax$8 = null;
                ax$8 = null;
            } catch (Throwable ax$9) {
            } finally {
            }
            return -491143439;
        }
        int i11 = 17158, i13 = -127, i14 = 123, i15 = -21340, i16 = 96, i17 = -49543, i18 = 204, i19 = 36306, i20 = 77, iArr1[] = new int[N];
        boolean b = false;
        float[] fArr = new float[N];
        FuzzerUtils.init(fArr, 107.997F);
        FuzzerUtils.init(iArr1, 51101);
        fArr[(Test.iFld >>> 1) % N] = Test.iFld;
        fMeth(Test.iFld, Test.iFld, -12L);
        Test.instanceCount -= Test.instanceCount;
        Test.sArrFld[(Test.iFld >>> 1) % N] &= (short) Test.instanceCount;
        i11 = 1;
        while (++i11 < 92) {
            int i12 = 109;
            Test.instanceCount = Test.iFld;
            Test.sFld = (short) i12;
            for (i13 = 1; i13 < 6; i13++) {
                iArr1[i13] += 1912;
                i12 = (int) Test.fFld;
            }
            Test.instanceCount *= Test.iFld;
            for (i15 = 1; i15 < 6; ++i15) {
                if (b)
                    break;
            }
            i16 *= i15;
            Test.instanceCount += i11;
            i14 -= i12;
            i16 = i17;
            iArr1[i11] -= (int) Test.instanceCount;
            for (i18 = 1; 6 > i18; ++i18) {
                switch((((-192 >>> 1) % 10) * 5) + 14) {
                    case 31:
                        i17 = 18;
                        iArr1[i18] /= (int) (i13 | 1);
                        i17 = i13;
                        i19 = (int) Test.fFld;
                        iArr1[i18] -= i15;
                        i19 = Test.sFld;
                        switch((((-7 >>> 1) % 1) * 5) + 43) {
                            case 47:
                                i20 = 2;
                                do {
                                    Test.fFld *= Test.instanceCount;
                                    i19 = i15;
                                    Test.instanceCount %= 8L;
                                    Test.instanceCount *= i19;
                                    Test.sFld += (short) (i20 * i20);
                                    Test.fFld -= Test.iFld;
                                    Test.iFld += i20;
                                    i12 = -6;
                                    i19 &= i13;
                                } while (--i20 > 0);
                                break;
                            default:
                                b = b;
                        }
                    case 43:
                        d = -215;
                        break;
                    case 47:
                        i12 += i18;
                        break;
                    case 36:
                        i17 %= (int) (Test.iFld | 1);
                        break;
                    case 62:
                        if (b)
                            break;
                        break;
                    case 51:
                        Test.instanceCount ^= 157;
                        break;
                    case 45:
                        Test.fFld += i18;
                        break;
                    case 28:
                        d += 9;
                    case 15:
                        iArr1 = FuzzerUtils.int1array(N, (int) 38527);
                        break;
                    case 48:
                        Test.instanceCount = -7;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i11 + i13 + i14 + i15 + i16 + (b ? 1 : 0) + i17 + i18 + i19 + i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void vMeth() {
        if (ax$15) {
            int ax$22 = iFld;
            try {
                char[] ax$21 = new char[] { 40000, 40001, 40002, 40003, 40004 };
                char[] ax$20 = new char[1];
                char ax$18 = '\"';
                for (int ax$19 = 0; ax$19 < iFld; ax$19++) {
                    char ax$17 = ax$20[ax$19];
                    char ax$16 = ax$21[ax$19];
                    ax$18 += ax$17 >= ax$16 ? ax$17 - ax$16 : ax$16 - ax$17;
                }
            } catch (Throwable ax$23) {
            } finally {
                iFld = ax$22;
            }
            return;
        }
        int i21 = 12, i22 = -86, i23 = 8, i24 = 57741, i25 = -18220, iArr2[] = new int[N], iArr3[][] = new int[N][N];
        boolean b1 = false, b2 = true;
        double d2 = -1.111162;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr2, 149);
        FuzzerUtils.init(byArr, (byte) 58);
        FuzzerUtils.init(iArr3, -10);
        switch((((((int) (Test.iFld + 114L)) >>> 1) % 5) * 5) + 27) {
            case 40:
                Test.fFld = Math.max(iMeth(Test.dFld), Test.iFld);
                Test.fFld *= Test.fFld;
                for (i21 = 1; i21 < 121; i21++) {
                    Test.instanceCount = Test.instanceCount;
                    i22 = (int) Test.dFld;
                    i22 <<= (int) Test.instanceCount;
                    i22 -= (int) -2.499F;
                    dArrFld[i21] *= i22;
                    i22 += Test.iFld;
                    if (b2) {
                        if (b1)
                            continue;
                        Test.iFld = -53789;
                        Test.instanceCount += Test.instanceCount;
                        for (i23 = 1; i23 < 5; ++i23) {
                            for (d2 = 1; d2 < 2; d2++) {
                                if (b1)
                                    continue;
                                if (b1)
                                    continue;
                                iArr2[(int) (d2)] = (int) -1946596476L;
                                iArr2[i23 + 1] = (int) Test.instanceCount;
                                iArr2[i23 + 1] *= Test.byFld;
                                byArr = byArr;
                                i22 = (int) Test.fFld;
                                switch((int) ((d2 % 6) + 40)) {
                                    case 40:
                                        if (b2) {
                                            Test.iFld = i21;
                                            Test.iFld *= (int) Test.fFld;
                                            iArr2 = iArr2;
                                            Test.instanceCount = 1895440381L;
                                            Test.instanceCount >>= i25;
                                            iArr3 = iArr3;
                                            i22 += (int) Test.fFld;
                                            Test.fFld *= i21;
                                            Test.instanceCount += (long) (d2 - Test.instanceCount);
                                        } else if (true) {
                                            Test.dFld = -13;
                                            Test.byFld -= (byte) Test.instanceCount;
                                            i22 = Test.byFld;
                                        } else {
                                            i25 += (int) (d2 * i24);
                                        }
                                        break;
                                    case 41:
                                        i25 = i21;
                                        break;
                                    case 42:
                                        Test.iFld += (int) (d2 + i21);
                                    case 43:
                                        Test.iFld -= i24;
                                        break;
                                    case 44:
                                        i25 += (int) d2;
                                        break;
                                    case 45:
                                        if (b1)
                                            continue;
                                        break;
                                }
                            }
                        }
                    } else {
                        i22 += i22;
                    }
                }
                break;
            case 29:
                i22 = i22;
            case 46:
                Test.fFld = i25;
                break;
            case 49:
                i25 += (int) Test.instanceCount;
                break;
            case 48:
                Test.sArrFld[(Test.iFld >>> 1) % N] = (short) i22;
                break;
            default:
                Test.lArrFld[(i25 >>> 1) % N] = i23;
        }
        vMeth_check_sum += i21 + i22 + (b1 ? 1 : 0) + i23 + i24 + Double.doubleToLongBits(d2) + i25 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {
        int i = -238, i1 = 2, i26 = 7, i27 = 33077, i28 = -5, i29 = -59, i30 = -132, i31 = 246, i32 = 5;
        long l4 = -7L;
        byte by = -40;
        float[][] fArr1 = new float[N][N];
        FuzzerUtils.init(fArr1, 31.723F);
        for (i = 2; 118 > i; i++) {
            i1 += i;
            Test.instanceCount >>= (4457 >>> (Test.instanceCount--));
            {
                java.io.PrintStream ax$26 = System.out;
                java.io.PrintStream ax$27 = System.err;
                java.io.PrintStream ax$28 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$28);
                System.setErr(ax$28);
                try {
                    ax$15 = true;
                    for (int ax$24 = 0; ax$24 < 6389; ax$24 += 1) vMeth();
                } catch (java.lang.Throwable ax$25) {
                } finally {
                    ax$15 = false;
                }
                System.setOut(ax$26);
                System.setErr(ax$27);
            }
            vMeth();
            Test.iFld = i1;
            i1 = (int) Test.dFld;
            i1 = (int) Test.instanceCount;
            if (bFld)
                continue;
        }
        for (i26 = 8; i26 < 185; i26++) {
            i28 = 1;
            do {
                Test.dFld = Test.iFld;
                Test.dFld += i28;
                Test.fArrFld[i28] += i26;
                Test.instanceCount -= Test.iFld;
                i1 <<= i;
                Test.instanceCount -= (long) Test.fFld;
            } while (++i28 < 29);
            for (l4 = 1; 29 > l4; ++l4) {
                i30 = 1;
                do {
                    if (false)
                        continue;
                    Test.iFld = Test.byFld;
                    bFld = bFld;
                    i27 += i30;
                    Test.fArrFld[i30 - 1] = i26;
                    i31 *= (int) Test.dFld;
                    if (bFld)
                        break;
                    Test.instanceCount -= i28;
                    Test.dFld = Test.fFld;
                    Test.instanceCount = i30;
                    dArrFld[i26 + 1] -= i28;
                    switch((((-6 >>> 1) % 10) * 5) + 40) {
                        case 41:
                            i27 = i;
                            iArrFld[(int) (l4 + 1)] *= by;
                            iArrFld[(int) (l4 - 1)] += 2;
                            Test.lArrFld[i26 + 1] <<= i30;
                            i27 = i29;
                            i31 %= (int) (Test.instanceCount | 1);
                            break;
                        case 48:
                            Test.lArrFld[i26] = Test.instanceCount;
                            i29 *= (int) 76L;
                            Test.instanceCount = 251L;
                            if (bFld) {
                                switch((int) (((l4 % 1) * 5) + 56)) {
                                    case 57:
                                        Test.byFld <<= (byte) -11;
                                        Test.sArrFld[(int) (l4 + 1)] = (short) l4;
                                        break;
                                }
                                if (bFld)
                                    continue;
                                iArrFld[i30 + 1] >>= i28;
                            } else {
                                i31 += (i30 * i30);
                                iArrFld[i30 - 1] -= Test.byFld;
                                Test.instanceCount = Test.iFld;
                                Test.instanceCount /= (i32 | 1);
                                i1 |= (int) l4;
                                Test.fFld *= Test.iFld;
                                fArr1 = fArr1;
                                bFld = bFld;
                                i32 = (int) l4;
                                Test.iFld -= (int) l4;
                                i27 = 65051;
                                Test.instanceCount = Test.iFld;
                            }
                            iArrFld[i30] |= Test.iFld;
                            i29 *= (int) -3718073226L;
                            Test.fFld += (((i30 * Test.iFld) + Test.instanceCount) - i31);
                            i32 >>>= (int) -3383927357L;
                            fArr1[i30 - 1][i30] = i32;
                            i32 = i28;
                            Test.lArrFld[(int) (l4)] = i30;
                            Test.instanceCount -= (long) Test.fFld;
                            try {
                                iArrFld[(int) (l4)] = (i29 % i29);
                                Test.iFld = (iArrFld[i30 - 1] / -34386);
                                i31 = (iArrFld[i26] % i26);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.lArrFld[(int) (l4 - 1)] += i;
                            break;
                        case 62:
                            Test.fFld *= i31;
                            iArrFld[(int) (l4)] -= -10;
                            Test.fFld += Test.instanceCount;
                            try {
                                iArrFld[(int) (l4)] = (-500046544 / i1);
                                i1 = (-9963 / i26);
                                i29 = (i27 % i28);
                            } catch (ArithmeticException a_e) {
                            }
                            i29 -= i;
                            iArrFld[i26] += (int) -1.82784;
                            try {
                                i31 = (42172 % i29);
                                i27 = (i % 506752956);
                                iArrFld[(int) (l4 + 1)] = (i31 % Test.iFld);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.byFld += (byte) (-13 + (i30 * i30));
                            break;
                        case 75:
                            i1 = i;
                            break;
                        case 65:
                            i32 = i29;
                            break;
                        case 43:
                            i27 *= (int) l4;
                        case 70:
                            Test.dFld += Test.instanceCount;
                            break;
                        case 42:
                            if (bFld)
                                continue;
                            break;
                        case 87:
                            iArrFld[i30] = (int) Test.fFld;
                            break;
                        case 82:
                            Test.iFld += (-37315 + (i30 * i30));
                            break;
                        default:
                            i32 >>= i32;
                    }
                } while (++i30 < 2);
            }
        }
        FuzzerUtils.out.println("i i1 i26 = " + i + "," + i1 + "," + i26);
        FuzzerUtils.out.println("i27 i28 l4 = " + i27 + "," + i28 + "," + l4);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("by i32 fArr1 = " + by + "," + i32 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld Test.sFld Test.dFld = " + Test.byFld + "," + Test.sFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("bFld Test.lArrFld Test.sArrFld = " + (bFld ? 1 : 0) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("dArrFld Test.fArrFld iArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$29) {
            int ax$33 = iFld;
            try {
                int ax$32 = 2146724623;
                int[] ax$30 = new int[] { 71994000, 71994000, 12000, 71994000, 71994000, 144000000, 144000000, 72018000, 144000000, 144000000, 71994000, 71994000, 12000, 71994000, 71994000, 72000000, 72000000, 36006000, 72000000, 72000000, 144012000, 144012000, 72030000, 144012000, 144012000, 72000000, 72000000, 36006000, 72000000, 72000000, 499501, 499501, 499501, 499501, 499501, 1000002, 1000002, 1000002, 1000002, 1000002, 499501, 499501, 499501, 499501, 499501, 1001, 1001, 1001, 1001, 1001, 3002, 3002, 3002, 3002, 3002, 1001, 1001, 1001, 1001, 1001, 501, 501, 501, 501, 501, 1502, 1502, 1502, 1502, 1502 };
                for (int ax$31 = Integer.MIN_VALUE + 4; ax$31 < iFld - 5; ax$31++) {
                    ax$32 += ax$30[ax$31 - (Integer.MIN_VALUE + 4)];
                }
            } catch (Throwable ax$34) {
            } finally {
                iFld = ax$33;
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$7 = false;

    private static Boolean ax$15 = false;

    private static Boolean ax$29 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
