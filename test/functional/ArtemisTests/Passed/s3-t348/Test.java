// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.Random;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 12L;

    public float fFld = 0.898F;

    public int iFld = 12;

    public int iFld1 = 35;

    public static float fFld1 = -1.764F;

    public static double dFld = 23.41617;

    public static short sFld = 6738;

    public static boolean bFld = false;

    public static volatile int iFld2 = 12;

    public byte byFld = 45;

    public long lFld = 3067385536L;

    public static long lFld1 = 8L;

    public static long[] lArrFld = new long[N];

    public static int[] iArrFld = new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -5136361684783658430L);
        FuzzerUtils.init(Test.iArrFld, 220);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5, boolean b, int i6) {
        int i7 = 41491, i8 = 191, i9 = -32122, i10 = 171, i11 = -154, i12 = 180, i13 = 30656, i14 = 45, i15 = -62162, i16 = 6, i17 = -213;
        byte by1 = 74;
        short s = -14639;
        for (i7 = 220; i7 > 12; --i7) {
            i5 += (i7 ^ i8);
            for (i9 = 1; i9 < 3; i9++) {
                Test.instanceCount *= by1;
            }
            i11 = 1;
            while (++i11 < 3) {
                Test.fFld1 += (float) Test.dFld;
            }
            i8 <<= i10;
            for (i12 = 1; 3 > i12; ++i12) {
                i13 += (i12 ^ i9);
            }
            for (i14 = 1; i14 < 3; i14++) {
                i8 = (int) Test.instanceCount;
                for (i16 = 1; i16 < 2; ++i16) {
                    Test.lArrFld[i14] = i8;
                    i13 = i15;
                    if (b)
                        continue;
                    switch(((i7 % 4) * 5) + 15) {
                        case 35:
                            i17 = i7;
                            Test.instanceCount += (i16 - i6);
                            Test.iArrFld[i7] += (int) Test.instanceCount;
                            break;
                        case 32:
                            Test.iArrFld[i16 - 1] /= (int) (i10 | 1);
                            Test.dFld += -246L;
                            Test.instanceCount = i13;
                        case 28:
                            Test.fFld1 *= i13;
                            i15 <<= (int) Test.instanceCount;
                            i6 -= -161;
                            break;
                        case 23:
                            i6 += (i16 - i14);
                            i13 -= (int) Test.fFld1;
                            switch((i16 % 7) + 107) {
                                case 107:
                                    i10 -= (int) -32702L;
                                    break;
                                case 108:
                                    i17 -= (int) Test.instanceCount;
                                    Test.instanceCount *= i10;
                                    switch((i7 % 1) + 102) {
                                        case 102:
                                            i6 += (i16 * i16);
                                            switch(((i7 % 2) * 5) + 75) {
                                                case 83:
                                                    i17 += (i16 * i16);
                                                    Test.iArrFld = Test.iArrFld;
                                                    s >>= (short) i14;
                                                case 85:
                                                    s = (short) Test.instanceCount;
                                                    break;
                                                default:
                                                    if (b)
                                                        continue;
                                            }
                                            break;
                                        default:
                                            i5 += (i16 - i10);
                                    }
                                case 109:
                                    Test.lArrFld[i16 - 1] -= 2488;
                                    break;
                                case 110:
                                    Test.instanceCount <<= i11;
                                    break;
                                case 111:
                                    Test.dFld -= i16;
                                    break;
                                case 112:
                                    i17 += (int) Test.dFld;
                                    break;
                                case 113:
                                    if (b)
                                        break;
                                default:
                                    Test.fFld1 += i16;
                            }
                    }
                }
            }
        }
        long meth_res = i5 + (b ? 1 : 0) + i6 + i7 + i8 + i9 + i10 + by1 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + s;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(int i4) {
        if (ax$996) {
            try {
                long[] ax$997 = { 7L, 7L, 5L, 5L, 7L, 7L, 7L, 5L, 5L };
                int ax$1000 = 0x88776655;
                java.util.Random ax$998 = new Random(69);
                long[] ax$1003 = { 7L, 7L, 5L, 5L, 7L, 7L, 7L, 5L, 5L };
                boolean[] ax$999 = new boolean[] { true, true, false, true, false };
                long ax$1002 = ax$998.nextLong();
                for (int ax$1001 = 0; ax$1001 < 64; ax$1001++) {
                    ax$999[ax$1000 * 64 + ax$1001] = (ax$1002 & (1L << ax$1001)) != 0;
                }
                ax$1003[ax$1000] = 0;
                ax$997[ax$1000] = ax$1002;
            } catch (Throwable ax$1004) {
            } finally {
            }
            return;
        }
        int i18 = -8574, i19 = -5, i20 = -228, i21 = -211, i22 = -12, i23 = -6, i24 = 117, i25 = -14934, i26 = 59;
        byte by2 = -28;
        float[] fArr = new float[N];
        FuzzerUtils.init(fArr, -1.413F);
        iMeth(i4, false, i4);
        for (i18 = 5; 195 > i18; i18++) {
            Test.sFld = (short) i4;
            i20 = 1;
            do {
                by2 *= (byte) i19;
                i19 -= i4;
                i19 += (int) Test.instanceCount;
                for (i21 = 1; i21 > 1; i21 -= 2) {
                    by2 += (byte) i21;
                    i22 *= (int) Test.instanceCount;
                    i22 = (int) Test.instanceCount;
                    Test.lArrFld[i20] -= 36375L;
                }
                by2 >>= (byte) Test.instanceCount;
                Test.instanceCount += i22;
                try {
                    Test.iArrFld[i20 + 1] = (115 % i22);
                    i22 = (i21 / i21);
                    i22 = (68 / i21);
                } catch (ArithmeticException a_e) {
                }
                if (Test.bFld)
                    continue;
                if (i22 != 0) {
                    vMeth1_check_sum += i4 + i18 + i19 + i20 + by2 + i21 + i22 + i23 + i24 + i25 + i26 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
            } while (++i20 < 3);
            i4 += (((i18 * i18) + i18) - i21);
            Test.dFld = -40;
            for (i23 = i18; i23 < 3; i23++) {
                fArr[i23 - 1] *= i21;
                for (i25 = 1; i25 < 1; i25++) {
                    i26 >>= (int) Test.instanceCount;
                    Test.iArrFld[i18 + 1] += i23;
                    Test.instanceCount = -32370;
                    i24 = 7;
                    i19 ^= (int) Test.instanceCount;
                    switch((i25 % 3) + 105) {
                        case 105:
                            Test.instanceCount >>= by2;
                            Test.fFld1 = Test.instanceCount;
                            Test.bFld = Test.bFld;
                            Test.fFld1 = Test.instanceCount;
                            Test.lArrFld[i23] %= (by2 | 1);
                            Test.instanceCount *= i24;
                            Test.bFld = Test.bFld;
                            i22 += (int) 3730564235L;
                            Test.instanceCount = Test.instanceCount;
                            break;
                        case 106:
                            Test.iArrFld[i23] = i22;
                            break;
                        case 107:
                            Test.fFld1 += i4;
                            break;
                    }
                }
            }
        }
        vMeth1_check_sum += i4 + i18 + i19 + i20 + by2 + i21 + i22 + i23 + i24 + i25 + i26 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {
        int i1 = -14, i2 = -652, i3 = -8, i27 = -119, i28 = -36154, i29 = 140, i30 = -14, i31 = 9, i32 = 9, iArr[] = new int[N];
        byte by = 120;
        long l = -30764L;
        float[][] fArr1 = new float[N][N];
        boolean[][] bArr = new boolean[N][N];
        FuzzerUtils.init(iArr, 27);
        FuzzerUtils.init(fArr1, 23.543F);
        FuzzerUtils.init(bArr, true);
        i1 = 183;
        do {
            for (i2 = 1; i2 < 3; ++i2) {
                i3 <<= ((by + iArr[i2]) - -13);
                i3 *= (int) Test.instanceCount;
            }
        } while (--i1 > 0);
        {
            java.io.PrintStream ax$1007 = System.out;
            java.io.PrintStream ax$1008 = System.err;
            java.io.PrintStream ax$1009 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$1009);
            System.setErr(ax$1009);
            try {
                ax$996 = true;
                for (int ax$1005 = 0; ax$1005 < 8623; ax$1005 += 1) vMeth1(1632359699);
            } catch (java.lang.Throwable ax$1006) {
            } finally {
                ax$996 = false;
            }
            System.setOut(ax$1007);
            System.setErr(ax$1008);
        }
        vMeth1(i2);
        for (i27 = 6; i27 < 117; i27++) {
            i3 = i3;
            fArr1[i27][i27] += 23985;
            try {
                i3 = (-65 / Test.iArrFld[i27 - 1]);
                iArr[i27 + 1] = (i27 / i2);
                i28 = (i3 % iArr[i27]);
            } catch (ArithmeticException a_e) {
            }
            {
                java.io.PrintStream ax$5 = System.out;
                java.io.PrintStream ax$6 = System.err;
                java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$7);
                System.setErr(ax$7);
                try {
                    for (int ax$3 = -3002; ax$3 < 3460; ax$3 += 1) {
                        float ax$1 = fFld1;
                        try {
                            float ax$0 = 40.0f;
                            if (ax$0 != fFld1) {
                            }
                        } catch (Throwable ax$2) {
                        } finally {
                            fFld1 = ax$1;
                        }
                    }
                } catch (Throwable ax$4) {
                }
                System.setOut(ax$5);
                System.setErr(ax$6);
            }
        }
        for (i29 = 1; i29 < 112; ++i29) {
            Test.instanceCount += (143 + (i29 * i29));
            i30 = i30;
            i3 -= i1;
            l = 1;
            while (++l < 5) {
                i28 -= i2;
                Test.instanceCount *= i2;
                for (i31 = 1; i31 < 1; i31++) {
                    Test.instanceCount |= i2;
                    Test.iArrFld[i31] -= i32;
                    Test.instanceCount = i32;
                    i30 = i1;
                    Test.sFld += (short) l;
                    Test.fFld1 -= i31;
                    switch(((i31 % 1) * 5) + 84) {
                        case 89:
                            Test.fFld1 = i30;
                            Test.fFld1 -= 1429;
                            Test.fFld1 = i27;
                            i30 = (int) Test.dFld;
                            Test.instanceCount += i29;
                            i28 += (i31 ^ i30);
                            Test.instanceCount >>= i31;
                            bArr[i29 - 1][(int) (l)] = Test.bFld;
                            Test.iFld2 -= i29;
                            break;
                        default:
                            i30 += i31;
                            Test.instanceCount >>>= -155;
                            Test.lArrFld[i29 - 1] += (long) 2.185F;
                            Test.iArrFld[i29 - 1] = i3;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + by + i27 + i28 + i29 + i30 + l + i31 + i32 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {
        float f = -119.808F;
        int i = -2, i33 = -7, i34 = -10, i35 = 0, i36 = -99, i37 = 37668, i38 = 83, i39 = -141, i40 = 7, i41 = 11, i42 = -225, i43 = 0;
        long l1 = -3636325975L, l2 = 3408369053042257557L;
        fFld += Math.min((Test.instanceCount + 10L) * (iFld * Test.instanceCount), (long) (fFld + (fFld - 147L)));
        iFld += (iFld1++);
        for (f = 8; f < 147; f++) {
            vMeth();
            i -= Test.iFld2;
            Test.instanceCount <<= i33;
            Test.lArrFld[(int) (f + 1)] <<= Test.sFld;
            if (true)
                continue;
        }
        byFld >>>= (byte) iFld1;
        if (Test.bFld) {
            lFld -= (long) Test.fFld1;
            Test.bFld = Test.bFld;
            for (i34 = 4; i34 < 184; i34++) {
                Test.iArrFld[i34 - 1] += Test.sFld;
                i >>= (int) Test.instanceCount;
                for (i36 = 1; i36 < 28; i36++) {
                    switch((((i >>> 1) % 7) * 5) + 99) {
                        case 124:
                            Test.dFld = i36;
                            for (l1 = 2; l1 > 1; l1--) {
                                Test.iArrFld = Test.iArrFld;
                                iFld1 = i;
                                Test.lArrFld[(int) (l1 - 1)] += l1;
                                iFld1 += -7442;
                                Test.instanceCount += (l1 * Test.instanceCount);
                                iFld1 += (int) (l1 | i36);
                                Test.iArrFld[i34] -= (int) lFld;
                                i += (int) (l1 | i);
                                Test.iFld2 += -63703;
                                lFld += -5832;
                            }
                            Test.bFld = false;
                            i35 += -101;
                            break;
                        case 116:
                            i38 += (((i36 * iFld) + f) - i);
                            lFld += i;
                            fFld = Test.sFld;
                            Test.iFld2 -= Test.iFld2;
                            switch(((i34 % 2) * 5) + 20) {
                                case 29:
                                    i33 *= (int) 9L;
                                    Test.dFld = i38;
                                    break;
                                case 25:
                                    for (i39 = 2; 1 < i39; i39--) {
                                        Test.instanceCount = iFld;
                                        i *= i33;
                                        lFld += (((i39 * lFld) + i35) - l1);
                                        i37 -= (int) 890925766L;
                                        lFld += lFld;
                                    }
                                    i37 -= -286;
                                    l2 -= l1;
                                    break;
                            }
                            i = i36;
                            for (i41 = 1; i41 < 2; ++i41) {
                                i37 = i43;
                                switch((i34 % 1) + 40) {
                                    case 40:
                                        Test.dFld += Test.dFld;
                                        i35 <<= i36;
                                        switch((i39 >>> 1) % 5) {
                                            case 0:
                                                Test.iArrFld[i36 - 1] *= i36;
                                                Test.sFld -= Test.sFld;
                                                fFld = i43;
                                                l2 |= 51061;
                                                iFld += (i41 ^ lFld);
                                                break;
                                            case 1:
                                                Test.iFld2 = (int) Test.dFld;
                                                i += (int) Test.fFld1;
                                                fFld += -17203;
                                                fFld += (i41 * i41);
                                                Test.iArrFld[i41] *= (int) -2.118414;
                                                i33 = 8;
                                                i40 <<= iFld1;
                                                break;
                                            case 2:
                                                i42 *= i41;
                                                Test.instanceCount -= -43;
                                                Test.dFld = i42;
                                                Test.lArrFld[i34] >>>= Test.iFld2;
                                            case 3:
                                                lFld += (i41 + Test.lFld1);
                                                Test.iArrFld[i41 + 1] = i36;
                                                i37 = i33;
                                            case 4:
                                                Test.iFld2 += (i41 | byFld);
                                                i35 += i41;
                                                Test.instanceCount = i38;
                                                break;
                                            default:
                                                i42 += (((i41 * i38) + i42) - byFld);
                                        }
                                    default:
                                        Test.iArrFld[i34] *= 28;
                                }
                            }
                            break;
                        case 120:
                            i43 += (((i36 * i33) + i34) - iFld);
                            break;
                        case 125:
                            Test.fFld1 *= i34;
                        case 132:
                            i40 += (((i36 * iFld1) + Test.instanceCount) - Test.fFld1);
                        case 118:
                            Test.dFld = lFld;
                            break;
                        case 112:
                            iFld1 = i39;
                            break;
                    }
                }
            }
        } else {
            Test.iArrFld[(i39 >>> 1) % N] += i40;
        }
        {
            java.io.PrintStream ax$983 = System.out;
            java.io.PrintStream ax$984 = System.err;
            java.io.PrintStream ax$985 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$985);
            System.setErr(ax$985);
            try {
                for (int ax$981 = -54; ax$981 < 6609; ax$981 += 1) {
                    long ax$978 = l2;
                    long ax$979 = l1;
                    try {
                        if (l2 != l1)
                            ;
                    } catch (Throwable ax$980) {
                    } finally {
                        l2 = ax$978;
                        l1 = ax$979;
                    }
                }
            } catch (Throwable ax$982) {
            }
            System.setOut(ax$983);
            System.setErr(ax$984);
        }
        FuzzerUtils.out.println("f i i33 = " + Float.floatToIntBits(f) + "," + i + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 l1 i38 = " + i37 + "," + l1 + "," + i38);
        FuzzerUtils.out.println("i39 i40 l2 = " + i39 + "," + i40 + "," + l2);
        FuzzerUtils.out.println("i41 i42 i43 = " + i41 + "," + i42 + "," + i43);
        FuzzerUtils.out.println("Test.instanceCount fFld iFld = " + Test.instanceCount + "," + Float.floatToIntBits(fFld) + "," + iFld);
        FuzzerUtils.out.println("iFld1 Test.fFld1 Test.dFld = " + iFld1 + "," + Float.floatToIntBits(Test.fFld1) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld Test.bFld Test.iFld2 = " + Test.sFld + "," + (Test.bFld ? 1 : 0) + "," + Test.iFld2);
        FuzzerUtils.out.println("byFld lFld Test.lFld1 = " + byFld + "," + lFld + "," + Test.lFld1);
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        {
            java.io.PrintStream ax$986 = System.out;
            java.io.PrintStream ax$987 = System.err;
            java.io.PrintStream ax$988 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$988);
            System.setErr(ax$988);
            {
                boolean ax$995 = false;
                for (int ax$994 = -2054; ax$994 < 3710; ax$994 += 3) {
                    if (!ax$995) {
                        ax$995 = true;
                        {
                            System.setOut(ax$986);
                            System.setErr(ax$987);
                            try {
                                Test _instance = new Test();
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                            } catch (Exception ex) {
                                FuzzerUtils.out.println(ex.getClass().getCanonicalName());
                            }
                            System.setOut(ax$988);
                            System.setErr(ax$988);
                        }
                    }
                    try {
                        int ax$990 = -11;
                        int ax$991 = 10 * 65120;
                        char[] ax$992 = new char[1];
                        char[] ax$989 = new char[] { 40000, 40001, 40002, 40003, 40004 };
                        ax$992[ax$990] = (char) (ax$989[ax$990] >> (-ax$991));
                    } catch (Throwable ax$993) {
                    } finally {
                    }
                }
            }
            System.setOut(ax$986);
            System.setErr(ax$987);
        }
    }

    private static Boolean ax$996 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
