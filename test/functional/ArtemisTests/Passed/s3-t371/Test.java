// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.security.BasicPermission;
import java.security.AccessControlException;
import java.security.AccessController;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -41994L;

    public static float fFld = -54.559F;

    public static boolean bFld = false;

    public static long lFld = -36192L;

    public static volatile double dFld = 0.109573;

    public byte byFld = -81;

    public int iFld = 7;

    public static long[][] lArrFld = new long[N][N];

    public static int[] iArrFld = new int[N];

    public static float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -5L);
        FuzzerUtils.init(Test.iArrFld, 138);
        FuzzerUtils.init(Test.fArrFld, -1.852F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i10, int i11) {
        if (ax$0) {
            try {
                char[] ax$1 = new char[] { 40000, 40001, 40002, 40003, 40004 };
                char ax$3 = '0';
                for (int ax$2 = 0; ax$2 < ax$1.length; ax$2++) {
                    ax$3 += ax$1[ax$2];
                }
            } catch (Throwable ax$4) {
            } finally {
            }
            return -193096600;
        }
        int i12 = 2651, i13 = 6, i14 = 1, i15 = -231, i16 = -188, i17 = -64, i18 = 59, iArr1[] = new int[N];
        boolean b = true;
        long l = -7L;
        double d = -31.18808;
        FuzzerUtils.init(iArr1, -13);
        for (i12 = 10; 214 > i12; i12++) {
            for (i14 = i12; 3 > i14; i14++) {
                Test.instanceCount += i14;
                b = b;
                iArr1[i12 - 1] = -7;
            }
            i13 += i14;
            b = false;
            i13 += 184;
            Test.instanceCount += (i12 | i11);
            iArr1[i12 + 1] <<= i13;
            for (l = 1; l < 3; ++l) {
                i16 = i16;
                i11 += 101;
                i13 += (int) l;
                if (b)
                    break;
                for (i17 = 2; i17 > 1; --i17) {
                    float f1 = 116.293F;
                    i18 = (int) d;
                    Test.instanceCount -= i15;
                    iArr1 = FuzzerUtils.int1array(N, (int) 70);
                    i15 -= i17;
                    if (b)
                        continue;
                    iArr1[(int) (l - 1)] *= i10;
                    i18 += i17;
                    i13 += i17;
                    Test.instanceCount = (long) f1;
                    i18 += (i17 * i17);
                    i11 += (((i17 * i13) + f1) - i11);
                    iArr1[(int) (l)] = i16;
                    iArr1[(int) (l)] <<= i18;
                    i10 = -11;
                }
                i11 <<= i15;
                Test.instanceCount += l;
                iArr1[(int) (l + 1)] -= -57683;
                i13 = i18;
                if (b) {
                    i18 *= i17;
                } else {
                    Test.instanceCount += (-19009 + (l * l));
                }
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + l + i16 + i17 + i18 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(int i3, int i4, int i5) {
        if (ax$10) {
            try {
                try {
                    AccessController.checkPermission(new BasicPermission("no such permission") {
                    });
                } catch (NullPointerException npe) {
                } catch (AccessControlException ace) {
                }
            } catch (Throwable ax$11) {
            } finally {
            }
            return;
        }
        int i6 = -45233, i7 = -201, i8 = 253, i9 = 12, i19 = -8820, i20 = -161, i21 = -12, i22 = 3, i23 = -4;
        float f = -83.525F;
        short s = -11748, sArr[] = new short[N];
        FuzzerUtils.init(sArr, (short) 19581);
        for (i6 = 4; i6 < 85; ++i6) {
            i3 += (((i6 * Test.instanceCount) + i6) - Test.instanceCount);
            for (i8 = i6; i8 < 7; ++i8) {
                switch((((i9++) >>> 1) % 2) + 86) {
                    case 86:
                        Test.instanceCount <<= Test.instanceCount;
                        i9 += i8;
                        Test.instanceCount += (i3++);
                        i7 &= (int) (((-(-12 + Math.abs(f))) + (1627669832L >> i7)) - (Math.max(i4, i7) * (i9--)));
                        i3 >>>= (int) (((Test.instanceCount / (i8 | 1)) + 7327095779792581307L) - Math.abs(f));
                        i9 -= iMeth(i6, i6);
                        Test.lArrFld[i8][i6] -= s;
                        i7 >>>= i4;
                        break;
                    case 87:
                        for (i19 = 1; 1 > i19; i19++) {
                            i9 -= -75;
                            Test.instanceCount += (i19 * i19);
                            i9 /= (int) (i9 | 1);
                            Test.instanceCount = i3;
                            sArr[i19 + 1] *= (short) i6;
                            f = -20;
                            i20 = (int) -81L;
                            i4 = (int) Test.instanceCount;
                            f *= i19;
                            i3 += (((i19 * s) + i8) - s);
                        }
                        i9 <<= i19;
                        i21 = 1;
                        while (++i21 < 1) {
                            i7 += i21;
                            i5 += (i21 | (long) Test.fFld);
                        }
                        Test.instanceCount |= Test.instanceCount;
                        for (i22 = 1; i22 < 1; i22++) {
                            Test.iArrFld[i8 + 1] = i9;
                            i4 -= s;
                            switch((i6 % 2) + 107) {
                                case 107:
                                    f += (((i22 * i7) + i3) - Test.fFld);
                                    Test.instanceCount *= (long) f;
                                    i3 ^= i7;
                                    i3 -= i23;
                                    Test.instanceCount = i23;
                                    break;
                                case 108:
                                    i7 = i6;
                                default:
                                    Test.instanceCount &= Test.instanceCount;
                            }
                        }
                        break;
                    default:
                        i7 %= (int) 67.71180;
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + s + i19 + i20 + i21 + i22 + i23 + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i2) {
        if (ax$17) {
            int ax$19 = i2;
            try {
                byte[] ax$18 = new byte[1 << 14];
                ax$18[i2] = (byte) Math.abs(ax$18[i2]);
            } catch (Throwable ax$20) {
            } finally {
                i2 = ax$19;
            }
            return;
        }
        int i24 = 3, i25 = 82, i26 = -12286, i27 = 68, i28 = 80, i29 = 4;
        byte by = 127;
        short s1 = 22933;
        {
            java.io.PrintStream ax$14 = System.out;
            java.io.PrintStream ax$15 = System.err;
            java.io.PrintStream ax$16 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$16);
            System.setErr(ax$16);
            try {
                ax$10 = true;
                for (int ax$12 = 0; ax$12 < 9640; ax$12 += 1) vMeth1(608582022, 1274330018, 384767454);
            } catch (java.lang.Throwable ax$13) {
            } finally {
                ax$10 = false;
            }
            System.setOut(ax$14);
            System.setErr(ax$15);
        }
        vMeth1(i2, i2, i2);
        for (i24 = 6; i24 < 170; i24 += 3) {
            Test.bFld = Test.bFld;
            switch((i24 % 5) + 26) {
                case 26:
                    i25 = i25;
                    Test.iArrFld = Test.iArrFld;
                    Test.instanceCount += (i24 - Test.lFld);
                    Test.instanceCount += (i24 * i25);
                    i26 = 10;
                    while (--i26 > 0) {
                        i25 >>= i24;
                        i25 = i24;
                        i25 = -4;
                        i25 += i24;
                        i2 <<= i26;
                        Test.iArrFld = Test.iArrFld;
                        Test.iArrFld[i26] -= i2;
                        by += (byte) (i26 * i27);
                        for (i28 = 1; i28 < 1; i28++) {
                            by = (byte) i24;
                            Test.lFld = 104;
                            if (Test.bFld) {
                                i2 -= -94;
                                i27 += (i28 - i24);
                                by = by;
                                switch(((i28 % 1) * 5) + 107) {
                                    case 108:
                                        Test.lArrFld[i26 + 1][i26 + 1] *= Test.lFld;
                                        i25 -= i28;
                                        Test.lFld = Test.lFld;
                                        i29 >>= i2;
                                        Test.fFld += i28;
                                        Test.iArrFld[i28] += i29;
                                        i2 += i28;
                                        Test.dFld -= s1;
                                        Test.lFld += i28;
                                        i27 *= i28;
                                        s1 = (short) i28;
                                        Test.instanceCount += (i28 * i2);
                                        break;
                                }
                            }
                        }
                    }
                    break;
                case 27:
                    i27 = i27;
                    break;
                case 28:
                    Test.fArrFld[i24 + 1] += i25;
                    break;
                case 29:
                    Test.lArrFld[i24 + 1][i24] <<= -12L;
                    break;
                case 30:
                    i29 <<= i27;
                    break;
                default:
                    i27 = (int) Test.instanceCount;
            }
        }
        vMeth_check_sum += i2 + i24 + i25 + i26 + by + i27 + i28 + i29 + s1;
    }

    public void mainTest(String[] strArr1) {
        int i = -3, i1 = -8785, i30 = -252, i31 = 46989, i32 = 158, i33 = 21883, i34 = 216, i35 = 11, i36 = 12158, i37 = 68, i38 = 51524, iArr[] = new int[N];
        short s2 = 16004;
        double[] dArr = new double[N];
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr, 20061);
        FuzzerUtils.init(dArr, -1.63498);
        FuzzerUtils.init(byArr, (byte) 43);
        i = 155;
        do {
            iArr[i] ^= (int) ((i1 >>= (int) (Test.instanceCount += (long) 5.124466)) - (i1 - i));
            {
                java.io.PrintStream ax$23 = System.out;
                java.io.PrintStream ax$24 = System.err;
                java.io.PrintStream ax$25 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$25);
                System.setErr(ax$25);
                try {
                    ax$17 = true;
                    for (int ax$21 = 0; ax$21 < 9945; ax$21 += 1) vMeth(579531347);
                } catch (java.lang.Throwable ax$22) {
                } finally {
                    ax$17 = false;
                }
                System.setOut(ax$23);
                System.setErr(ax$24);
            }
            vMeth(-13);
        } while ((i -= 3) > 0);
        switch(((-3 >>> 1) % 8) + 121) {
            case 121:
                i30 >>= i31;
                i32 = 1;
                while ((i32 += 3) < 153) {
                    i31 = i31;
                    Test.lFld >>= Test.instanceCount;
                }
                for (i33 = 5; i33 < 90; i33++) {
                    i34 += (i33 * i33);
                    i1 = 7;
                    for (i35 = 1; i35 < 59; i35++) {
                        Test.dFld = i32;
                        if (Test.bFld) {
                            iArr[i35] >>= -1;
                            Test.lFld *= Test.lFld;
                            Test.fFld *= -10619;
                            dArr[i33] -= Test.fFld;
                            Test.bFld = Test.bFld;
                            for (i37 = 1; i37 < 2; i37++) {
                                i31 = i31;
                                Test.instanceCount += (i37 * i36);
                                i38 *= i35;
                                switch((((-251 >>> 1) % 1) * 5) + 18) {
                                    case 21:
                                        i34 += (((i37 * i36) + i30) - s2);
                                        Test.iArrFld[i35] = (int) Test.lFld;
                                        Test.iArrFld[i35 - 1] += (int) Test.lFld;
                                        i1 = -14;
                                        try {
                                            i31 = (Test.iArrFld[i33 - 1] % i33);
                                            iArr[i35 - 1] = (i34 / Test.iArrFld[i35]);
                                            i1 = (-60 / Test.iArrFld[i33 + 1]);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        Test.dFld -= i32;
                                        i36 *= (int) Test.fFld;
                                        switch((i33 % 2) + 110) {
                                            case 110:
                                                Test.iArrFld[i33 - 1] = 1315;
                                                break;
                                            case 111:
                                                iArr[i33 + 1] -= (int) Test.instanceCount;
                                                i36 = i31;
                                                Test.instanceCount += Test.instanceCount;
                                                switch(((i37 >>> 1) % 10) + 67) {
                                                    case 67:
                                                        i34 += i37;
                                                        i30 += i32;
                                                        i34 = i37;
                                                        break;
                                                    case 68:
                                                        i30 -= i38;
                                                        Test.fFld *= Test.instanceCount;
                                                        byFld >>= (byte) i38;
                                                    case 69:
                                                        i31 = -8936;
                                                        switch(((i35 % 2) * 5) + 94) {
                                                            case 96:
                                                                iArr[i35 + 1] = i31;
                                                                i36 += (((i37 * i36) + s2) - i36);
                                                                iArr = iArr;
                                                                switch(((i35 % 4) * 5) + 32) {
                                                                    case 40:
                                                                    case 36:
                                                                        i34 += (int) Test.fFld;
                                                                        i34 += (i37 | i33);
                                                                        byFld = (byte) i;
                                                                        iArr = Test.iArrFld;
                                                                        i31 = i37;
                                                                        break;
                                                                    case 42:
                                                                        byArr[i33 + 1] >>= (byte) i1;
                                                                        i34 -= (int) -1.47890;
                                                                        i34 *= i36;
                                                                        i31 += -48064;
                                                                        i34 = i31;
                                                                        i38 += i37;
                                                                        Test.dFld = i31;
                                                                        switch(((i33 >>> 1) % 7) + 86) {
                                                                            case 86:
                                                                                switch((i37 % 6) + 86) {
                                                                                    case 86:
                                                                                        i34 -= i38;
                                                                                        i30 -= (int) Test.dFld;
                                                                                        i1 += (i37 ^ i32);
                                                                                        i34 |= s2;
                                                                                        i38 = i33;
                                                                                        Test.instanceCount *= -12;
                                                                                        Test.lArrFld[i35][i37 + 1] -= i31;
                                                                                        Test.fFld = (float) Test.dFld;
                                                                                        Test.instanceCount ^= i33;
                                                                                        Test.lFld += (((i37 * i37) + Test.instanceCount) - s2);
                                                                                    case 87:
                                                                                        Test.fArrFld[i35] = Test.instanceCount;
                                                                                        i30 >>= i37;
                                                                                    case 88:
                                                                                        i1 += (((i37 * i34) + byFld) - Test.lFld);
                                                                                        break;
                                                                                    case 89:
                                                                                    case 90:
                                                                                        i34 >>= i37;
                                                                                        break;
                                                                                    case 91:
                                                                                        try {
                                                                                            i31 = (i33 % -75);
                                                                                            i34 = (219 / i34);
                                                                                            i30 = (i33 / i1);
                                                                                        } catch (ArithmeticException a_e) {
                                                                                        }
                                                                                    default:
                                                                                        try {
                                                                                            Test.iArrFld[i35] = (Test.iArrFld[i37 + 1] / 65074);
                                                                                            i31 = (iArr[i35] / iFld);
                                                                                            iArr[i35 + 1] = (i31 / Test.iArrFld[i37]);
                                                                                        } catch (ArithmeticException a_e) {
                                                                                        }
                                                                                }
                                                                                break;
                                                                            case 87:
                                                                                i34 = i32;
                                                                                break;
                                                                            case 88:
                                                                                Test.fFld += i34;
                                                                                break;
                                                                            case 89:
                                                                                i38 += i32;
                                                                            case 90:
                                                                                dArr[i33 + 1] *= Test.instanceCount;
                                                                                break;
                                                                            case 91:
                                                                                Test.lFld = i36;
                                                                                break;
                                                                            case 92:
                                                                                i38 *= -9;
                                                                                break;
                                                                            default:
                                                                                s2 += (short) (i37 ^ Test.lFld);
                                                                        }
                                                                        break;
                                                                    case 51:
                                                                        i34 += (int) Test.fFld;
                                                                    default:
                                                                        iArr[i33 - 1] >>= i;
                                                                }
                                                            case 103:
                                                                i1 = i35;
                                                                break;
                                                            default:
                                                                Test.lFld = i32;
                                                        }
                                                        break;
                                                    case 70:
                                                        dArr[i35 - 1] *= i33;
                                                        break;
                                                    case 71:
                                                        i31 += i36;
                                                    case 72:
                                                        Test.dFld = iFld;
                                                        break;
                                                    case 73:
                                                        s2 -= (short) Test.dFld;
                                                        break;
                                                    case 74:
                                                        i1 += (i37 * i37);
                                                        break;
                                                    case 75:
                                                        Test.dFld = iFld;
                                                        break;
                                                    case 76:
                                                        i31 += s2;
                                                        break;
                                                    default:
                                                        if (Test.bFld)
                                                            continue;
                                                }
                                                break;
                                            default:
                                                Test.iArrFld[i37] += (int) Test.instanceCount;
                                        }
                                        break;
                                    default:
                                        i36 += i37;
                                }
                            }
                        }
                    }
                }
                break;
            case 122:
            case 123:
            case 124:
                Test.instanceCount <<= i34;
                break;
            case 125:
            case 126:
                byFld -= (byte) Test.fFld;
            case 127:
                Test.lArrFld[(i37 >>> 1) % N][(i31 >>> 1) % N] = (long) Test.dFld;
                break;
            case 128:
                iArr = FuzzerUtils.int1array(N, (int) 82);
                break;
        }
        FuzzerUtils.out.println("i i1 i30 = " + i + "," + i1 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 i38 s2 = " + i37 + "," + i38 + "," + s2);
        FuzzerUtils.out.println("iArr dArr byArr = " + FuzzerUtils.checkSum(iArr) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.lFld Test.dFld byFld = " + Test.lFld + "," + Double.doubleToLongBits(Test.dFld) + "," + byFld);
        FuzzerUtils.out.println("iFld Test.lArrFld Test.iArrFld = " + iFld + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$26) {
            long ax$115 = vMeth1_check_sum;
            long ax$116 = iMeth_check_sum;
            try {
                if (vMeth1_check_sum != iMeth_check_sum)
                    ;
            } catch (Throwable ax$117) {
            } finally {
                vMeth1_check_sum = ax$115;
                iMeth_check_sum = ax$116;
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$10 = false;

    private static Boolean ax$17 = false;

    private static Boolean ax$26 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
