// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.Map;
import java.security.Security;
import java.util.HashMap;
import java.security.Provider;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 26658L;

    public static int iFld = 30;

    public static short sFld = -15514;

    public static float fFld = 120.88F;

    public static double dFld = 0.3724;

    public byte byFld = 20;

    public static boolean bFld = false;

    public volatile int iFld1 = 41881;

    public static volatile long[] lArrFld = new long[N];

    public static int[] iArrFld = new int[N];

    public static float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 44729L);
        FuzzerUtils.init(Test.iArrFld, 63197);
        FuzzerUtils.init(Test.fArrFld, 108.941F);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static long fMeth_check_sum = 0;

    public void vMeth(int i1, int i2) {
        Test.instanceCount &= i2;
        vMeth_check_sum += i1 + i2;
    }

    public static float fMeth() {
        int i10 = 0, i11 = 23802, i12 = -4, i13 = 10304, i14 = 0, i15 = 98, i16 = -213, i17 = -7229;
        float f = 46.730F, f1 = 85.724F;
        boolean b1 = true, bArr[] = new boolean[N];
        byte by1 = -42;
        FuzzerUtils.init(bArr, false);
        Test.iFld += i10;
        Test.lArrFld[(Test.iFld >>> 1) % N] -= Test.instanceCount;
        i11 = 1;
        while (++i11 < 248) {
            for (i12 = 1; i12 < 3; ++i12) {
                for (i14 = 1; i14 < 2; i14++) {
                    Test.instanceCount -= Test.iFld;
                    Test.iArrFld = Test.iArrFld;
                }
                Test.iFld *= i12;
                i15 = (int) -2L;
                if (false) {
                    Test.iFld = (int) Test.instanceCount;
                    i13 += (i12 * i12);
                    Test.iFld = -31;
                    i10 >>= i12;
                    for (f = 1; f < 2; ++f) {
                        if (b1)
                            continue;
                        by1 -= (byte) i11;
                        Test.iArrFld[(int) (f - 1)] = i13;
                        f1 += i16;
                        Test.instanceCount += i17;
                        if (false)
                            continue;
                        i13 = (int) 16.53F;
                        Test.instanceCount += (long) (((f * f) + by1) - Test.instanceCount);
                        Test.iFld = by1;
                        i10 -= (int) 1L;
                        b1 = b1;
                    }
                    f1 += (i12 * Test.iFld);
                    Test.iArrFld[i11] += i15;
                    bArr[i12] = b1;
                    f1 = i12;
                    i15 = (int) Test.instanceCount;
                    i10 += (int) (-5912541911024759856L + (i12 * i12));
                    Test.sFld *= (short) i17;
                    i17 <<= i11;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int) 8);
                    b1 = b1;
                } else {
                    if (false)
                        break;
                }
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f) + i16 + (b1 ? 1 : 0) + by1 + Float.floatToIntBits(f1) + i17 + FuzzerUtils.checkSum(bArr);
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public static int iMeth1(long l, byte by, int i7) {
        int i8 = -5, i9 = -4831, i18 = -140, i19 = 8, i20 = 81, i21 = -171, iArr1[] = new int[N];
        byte[] byArr = new byte[N];
        FuzzerUtils.init(byArr, (byte) -53);
        FuzzerUtils.init(iArr1, 7);
        for (i8 = 9; i8 < 162; ++i8) {
            switch(((i8 % 4) * 5) + 39) {
                case 47:
                    Test.iFld += byArr[i8 - 1];
                    Test.iFld %= (int) ((long) (fMeth()) | 1);
                    for (i18 = 4; i18 > 1; i18 -= 3) {
                        i7 -= (int) 5L;
                        Test.lArrFld[i8] = i18;
                        i20 = 1;
                        while (++i20 < 4) {
                            i19 += Test.iFld;
                            Test.iArrFld[i18] = i19;
                            i7 = i18;
                            i9 = (int) 1.402F;
                            Test.fFld %= ((long) (Test.fFld) | 1);
                            Test.dFld = 51.689F;
                            Test.iFld -= i18;
                            by += (byte) Test.sFld;
                            l += Test.instanceCount;
                            try {
                                i9 = (i19 / 1554436087);
                                i9 = (46870 % i20);
                                i7 = (56795 / Test.iArrFld[(i9 >>> 1) % N]);
                            } catch (ArithmeticException a_e) {
                            }
                        }
                        iArr1[i8 + 1] <<= i8;
                        if (i18 != 0) {
                        }
                        i21 = 4;
                        do {
                            Test.instanceCount <<= i21;
                            Test.iArrFld[i21 + 1] *= 6705;
                            i7 += i19;
                            Test.instanceCount = i7;
                            iArr1[i18 - 1] = 4;
                            i7 = i9;
                            i19 += (((i21 * by) + Test.sFld) - Test.iFld);
                            i19 = -12;
                            Test.instanceCount >>= i18;
                            i9 = (int) Test.instanceCount;
                            Test.sFld -= (short) 75;
                            i7 = (int) Test.instanceCount;
                        } while (--i21 > 0);
                        {
                            java.io.PrintStream ax$7 = System.out;
                            java.io.PrintStream ax$8 = System.err;
                            java.io.PrintStream ax$9 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$9);
                            System.setErr(ax$9);
                            try {
                                for (int ax$5 = -656; ax$5 < 9267; ax$5 += 1) {
                                    int ax$3 = i9;
                                    try {
                                        short[] ax$2 = new short[] { 20, 10, 0, -10, -20 };
                                        int[] ax$0 = { 1, 2, 3, 4 };
                                        int ax$1 = ax$0[i9];
                                        ax$2[i9 * 2 + 0] = (short) (ax$1 >> 16);
                                        ax$2[i9 * 2 + 1] = (short) (ax$1 & 0xFFFF);
                                    } catch (Throwable ax$4) {
                                    } finally {
                                        i9 = ax$3;
                                    }
                                }
                            } catch (Throwable ax$6) {
                            }
                            System.setOut(ax$7);
                            System.setErr(ax$8);
                        }
                        i19 += (i18 * Test.instanceCount);
                        i19 *= i9;
                        iArr1[i18] -= i7;
                        Test.iArrFld[i18 - 1] = i9;
                    }
                    break;
                case 51:
                    Test.instanceCount -= Test.iFld;
                    break;
                case 58:
                    l = i19;
                    break;
                case 56:
                    i19 -= Test.iFld;
                    break;
            }
        }
        long meth_res = l + by + i7 + i8 + i9 + i18 + i19 + i20 + i21 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public int iMeth(int i3, boolean b, int i4) {
        int i5 = 11, i6 = 26152, i22 = -4, i23 = 62, i24 = 9, i25 = 189, i26 = -246, i27 = -13, i28 = 3, i29 = 0, i31 = -6090;
        double d = 0.122878;
        float f2 = -65.212F;
        for (i5 = 2; 84 > i5; i5++) {
            Test.lArrFld[i5 - 1] -= ((i4 *= (int) (8570737401116348425L - (Test.iFld++))) - (iMeth1(Test.instanceCount, byFld, i5) + i6));
            Test.instanceCount -= Test.instanceCount;
            Test.lArrFld[i5 - 1] -= (long) Test.dFld;
            i3 = i3;
            Test.iFld += (i5 * i5);
            Test.iArrFld[i5] <<= i4;
            for (i22 = 1; i22 < 7; ++i22) {
                Test.iFld = 3752;
                for (i24 = 1; i24 < 2; ++i24) {
                    i6 -= (int) Test.instanceCount;
                    Test.iArrFld[i24 + 1] = (int) Test.instanceCount;
                    i23 = -45834;
                }
                i23 += i4;
                Test.iFld >>= i4;
                if (Test.iFld != 0) {
                }
            }
            Test.iFld += i5;
            Test.fFld += i25;
            Test.instanceCount *= Test.instanceCount;
            i6 *= 49010;
            byFld -= (byte) i6;
        }
        i3 = i25;
        for (d = 5; d < 124; d++) {
            b = b;
            i4 -= (int) Test.fFld;
            Test.instanceCount <<= i25;
            Test.dFld *= Test.instanceCount;
            Test.instanceCount += i24;
            for (f2 = 1; f2 < 5; f2++) {
                Test.lArrFld[(int) (f2)] *= i24;
            }
            i26 -= (int) f2;
            if (i24 != 0) {
            }
            Test.instanceCount ^= i6;
            {
                java.io.PrintStream ax$10 = System.out;
                java.io.PrintStream ax$11 = System.err;
                java.io.PrintStream ax$12 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$12);
                System.setErr(ax$12);
                {
                    boolean ax$18 = false;
                    for (int ax$17 = -371; ax$17 < 6441; ax$17 += 3) {
                        if (!ax$18) {
                            ax$18 = true;
                            {
                                System.setOut(ax$10);
                                System.setErr(ax$11);
                                for (i28 = 1; 5 > i28; i28++) {
                                    int i30 = -17697;
                                    Test.dFld /= (Test.instanceCount | 1);
                                    i30 += (int) Test.instanceCount;
                                }
                                System.setOut(ax$12);
                                System.setErr(ax$12);
                            }
                        }
                        try {
                            int[] ax$14 = { 0x11, 0x22, 0x33, 0x44, 0x88, 0x99, 0xaa, 0xbb };
                            float[] ax$15 = new float[16];
                            for (int ax$13 = 0; ax$13 < ax$15.length; ax$13++) {
                                ax$15[ax$13] = ax$14[20] - 2;
                            }
                        } catch (Throwable ax$16) {
                        } finally {
                        }
                    }
                }
                System.setOut(ax$10);
                System.setErr(ax$11);
            }
            Test.sFld <<= (short) i31;
        }
        long meth_res = i3 + (b ? 1 : 0) + i4 + i5 + i6 + i22 + i23 + i24 + i25 + Double.doubleToLongBits(d) + i26 + Float.floatToIntBits(f2) + i27 + i28 + i29 + i31;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr3) {
        if (ax$34) {
            int ax$37 = iFld;
            try {
                long[] ax$35 = { 6 };
                long[] ax$36 = new long[64];
                ax$36[iFld + 0] = (long) (ax$35[iFld + 0] + 0);
                ax$36[iFld + 1] = (long) (ax$35[iFld + 1] + 1);
                ax$36[iFld + 2] = (long) (ax$35[iFld + 2] + 2);
                ax$36[iFld + 3] = (long) (ax$35[iFld + 3] + 3);
            } catch (Throwable ax$38) {
            } finally {
                iFld = ax$37;
            }
            return;
        }
        int i32 = 4, i33 = 26909, i34 = 27278, i35 = 4, i36 = 16748, i37 = 3, i38 = -57076, i39 = 4, i40 = -1103, i41 = -6796, i42 = 0, i43 = -4, i44 = 49813, i45 = 34, iArr2[][] = new int[N][N];
        long l1 = 5L, l2 = 3316609329L;
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr2, 0);
        FuzzerUtils.init(dArr, 2.70186);
        vMeth(Test.iFld, Test.iFld);
        Test.iFld -= (int) (iMeth(Test.iFld, Test.bFld, Test.iFld) - -1178408837146561727L);
        for (i32 = 12; i32 < 217; ++i32) {
            Test.instanceCount -= Test.instanceCount;
            i33 += (i32 * i32);
        }
        i33 >>= iFld1;
        for (i34 = 5; i34 < 188; i34++) {
            l1 <<= i35;
            iFld1 += i35;
            Test.instanceCount = 12891;
            Test.fFld += i34;
            iFld1 -= iFld1;
            l1 -= l1;
            Test.iArrFld[i34 - 1] *= (int) Test.fFld;
            for (i36 = 28; i36 > 1; i36 -= 2) {
                iArr2 = FuzzerUtils.int2array(N, (int) 45);
                Test.instanceCount = Test.instanceCount;
                for (l2 = i36; l2 < 3; l2++) {
                    Test.iFld += (int) (((l2 * l2) + i36) - i37);
                    Test.dFld *= 5913;
                    Test.iFld += (int) Test.instanceCount;
                    Test.instanceCount = l1;
                    Test.instanceCount += l2;
                    dArr[i34] -= Test.fFld;
                    i38 = i34;
                    Test.instanceCount += (531538835260287747L + (l2 * l2));
                    iFld1 -= iFld1;
                    iArr2[i34 + 1][i34 + 1] >>= i36;
                    i37 += i35;
                    Test.fFld = l1;
                    switch(((Test.iFld >>> 1) % 2) + 22) {
                        case 22:
                        case 23:
                            byFld -= (byte) Test.dFld;
                            i38 += (int) l2;
                            i37 >>= (int) Test.instanceCount;
                            if (Test.bFld)
                                break;
                            Test.fFld *= -1233;
                            Test.fFld = iFld1;
                            l1 += l1;
                            Test.lArrFld[(int) (l2)] += i37;
                            Test.fArrFld = Test.fArrFld;
                            if (true)
                                break;
                            Test.fFld = l2;
                            i38 += (int) l2;
                            break;
                        default:
                    }
                    l1 = -14;
                }
                iArr2[i36][i36 + 1] = -59599;
                i37 = i36;
                for (i39 = 1; i39 < 3; i39++) {
                    Test.fFld -= i34;
                    i40 |= (int) Test.instanceCount;
                    i37 += (((i39 * l2) + i40) - Test.fFld);
                    i37 += (((i39 * i36) + Test.fFld) - Test.fFld);
                    l1 = (long) Test.dFld;
                    Test.dFld = i34;
                    Test.iArrFld[i39] += (int) Test.instanceCount;
                    iFld1 |= (int) l2;
                    Test.fFld = i35;
                }
                i35 = (int) l2;
                Test.instanceCount += 2;
                for (i41 = 1; i41 < 3; i41++) {
                    Test.fArrFld[i36] -= i40;
                }
                Test.dFld = i37;
                i37 = (int) Test.dFld;
                i35 *= i42;
            }
            iArr2[i34] = iArr2[i34 - 1];
            i43 = 1;
            do {
                Test.fFld += i32;
                for (i44 = 1; i44 < 4; ++i44) {
                    i35 = (int) l2;
                    l1 = i32;
                    Test.fFld = i36;
                    i33 += 34614;
                    Test.instanceCount += i44;
                    i40 = 183;
                    i33 += i35;
                    byFld = (byte) l2;
                }
            } while ((i43 += 3) < 28);
        }
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 l1 i36 = " + i35 + "," + l1 + "," + i36);
        FuzzerUtils.out.println("i37 l2 i38 = " + i37 + "," + l2 + "," + i38);
        FuzzerUtils.out.println("i39 i40 i41 = " + i39 + "," + i40 + "," + i41);
        FuzzerUtils.out.println("i42 i43 i44 = " + i42 + "," + i43 + "," + i44);
        FuzzerUtils.out.println("i45 iArr2 dArr = " + i45 + "," + FuzzerUtils.checkSum(iArr2) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld + "," + Test.sFld);
        FuzzerUtils.out.println("Test.fFld Test.dFld byFld = " + Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld) + "," + byFld);
        FuzzerUtils.out.println("Test.bFld iFld1 Test.lArrFld = " + (Test.bFld ? 1 : 0) + "," + iFld1 + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr2) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr2);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
        {
            java.io.PrintStream ax$31 = System.out;
            java.io.PrintStream ax$32 = System.err;
            java.io.PrintStream ax$33 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$33);
            System.setErr(ax$33);
            try {
                for (int ax$29 = -1406; ax$29 < 6307; ax$29 += 1) {
                    try {
                        java.lang.String ax$24 = "1481019.680613023";
                        java.lang.String ax$21 = "6696604.657880305";
                        Provider[] ax$22 = Security.getProviders();
                        Provider[] ax$25 = Security.getProviders(ax$24);
                        Map<String, String> ax$19 = new HashMap<String, String>();
                        ax$19.put(ax$24, "");
                        Provider[] ax$26 = Security.getProviders(ax$19);
                        Provider[] ax$20 = Security.getProviders(ax$21);
                        if (ax$20 != null) {
                        }
                        Map<String, String> ax$27 = new HashMap<String, String>();
                        ax$27.put(ax$21, "");
                        Provider[] ax$23 = Security.getProviders(ax$27);
                        if (ax$23 != null) {
                        }
                    } catch (Throwable ax$28) {
                    } finally {
                    }
                }
            } catch (Throwable ax$30) {
            }
            System.setOut(ax$31);
            System.setErr(ax$32);
        }
    }

    private static Boolean ax$34 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
// DEBUG  fMeth ->  fMeth iMeth1 iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
