// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.math.BigInteger;
import java.util.concurrent.CountDownLatch;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -12L;

    public static int iFld = 140;

    public static int iFld1 = -45217;

    public static byte byFld = -83;

    public boolean bFld = false;

    public static volatile float[] fArrFld = new float[N];

    public static boolean[] bArrFld = new boolean[N];

    public static volatile long[] lArrFld = new long[N];

    public static volatile double[][] dArrFld = new double[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 106.1013F);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.lArrFld, -3426826530L);
        FuzzerUtils.init(Test.dArrFld, 2.51925);
    }

    public static long lMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d1) {
        boolean b1 = true, bArr[] = new boolean[N];
        float f = -27.860F, f1 = -1.849F;
        int i3 = -186, i4 = 5, i5 = 56121, i6 = -37354, i7 = 171, i8 = 160, i9 = -113, i10 = 13, i11 = 28147, iArr[] = new int[N];
        long l1 = -13229L, lArr[] = new long[N];
        short s = 8214;
        byte by = -6;
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr, -22759);
        FuzzerUtils.init(lArr, -10942L);
        bArr[(Test.iFld >>> 1) % N] = b1;
        for (f = 4; f < 238; f++) {
            f1 += (((f * i3) + i3) - Test.iFld);
            try {
                iArr[(int) (f)] = (i3 / iArr[(int) (f - 1)]);
                i3 = (iArr[(int) (f)] / i3);
                Test.iFld = (Test.iFld % i3);
            } catch (ArithmeticException a_e) {
            }
            try {
                i3 = (i3 % -40180);
                i3 = (126 % Test.iFld);
                iArr[(int) (f)] = (1665630009 % Test.iFld);
            } catch (ArithmeticException a_e) {
            }
            for (i4 = 1; i4 < 3; ++i4) {
                i6 = 1;
                do {
                    Test.instanceCount = Test.iFld;
                    try {
                        i5 = (i4 / -863645454);
                        i3 = (iArr[i4 - 1] / -31539);
                        i3 = (i3 / 207);
                    } catch (ArithmeticException a_e) {
                    }
                } while (++i6 < 2);
            }
            Test.instanceCount = i5;
            for (l1 = 1; l1 < 3; l1 += 3) {
                for (i8 = 1; 3 > i8; ++i8) {
                    Test.instanceCount >>= Test.iFld;
                    i3 = (int) -2114L;
                    bArr[(int) (l1 + 1)] = b1;
                    f1 += i8;
                    if (b1)
                        continue;
                    f1 += i7;
                    i3 *= i8;
                    i5 ^= (int) Test.instanceCount;
                    i9 = s;
                    iArr[(int) (f + 1)] += by;
                    i9 *= i7;
                    iArr[(int) (f + 1)] += (int) f1;
                    d1 *= i3;
                }
                i9 >>= (int) Test.instanceCount;
                Test.iFld += (int) l1;
                for (i10 = 1; 3 > i10; i10++) {
                    Test.instanceCount += (long) d1;
                    lArr[(int) (f + 1)] >>= i8;
                    f1 -= i6;
                    Test.instanceCount = -39002;
                    d1 += i7;
                    i3 += (i10 * i10);
                }
                i11 %= (int) (i7 | 1);
                iArr[(int) (l1)] = (int) -2907375544L;
                Test.instanceCount = -239;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + Float.floatToIntBits(f) + i3 + Float.floatToIntBits(f1) + i4 + i5 + i6 + l1 + i7 + i8 + i9 + s + by + i10 + i11 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l, int i) {
        int i1 = -30465, i2 = 97, i12 = 13484, i13 = -15535, i14 = 14697, i15 = 6, i16 = 1, i17 = -23495, iArr1[] = new int[N];
        double d = -84.97441;
        short s1 = 2635;
        boolean b2 = false, b3 = false;
        float f2 = 0.170F, fArr[][] = new float[N][N];
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr1, -29123);
        FuzzerUtils.init(lArr1, 2500602240663027119L);
        FuzzerUtils.init(fArr, 76.372F);
        {
            java.io.PrintStream ax$0 = System.out;
            java.io.PrintStream ax$1 = System.err;
            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$2);
            System.setErr(ax$2);
            {
                boolean ax$8 = false;
                for (int ax$7 = -4527; ax$7 < 5171; ax$7 += 1) {
                    if (!ax$8) {
                        ax$8 = true;
                        {
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                            for (i1 = 8; i1 < 202; ++i1) {
                                i *= (--i);
                            }
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                        }
                    }
                    int ax$5 = i1;
                    try {
                        java.math.BigInteger ax$4 = new BigInteger("1000");
                        java.math.BigInteger ax$3 = new BigInteger("1000");
                        if (ax$4.bitLength() != 4_000_001) {
                        } else if (ax$4.mod(ax$3).compareTo(BigInteger.valueOf(i1)) != 0) {
                        } else {
                        }
                    } catch (Throwable ax$6) {
                    } finally {
                        i1 = ax$5;
                    }
                }
            }
            System.setOut(ax$0);
            System.setErr(ax$1);
        }
        d += (-((i1 - i1) - Test.fArrFld[(i1 >>> 1) % N]));
        vMeth1(d);
        s1 -= (short) i2;
        i12 = 252;
        do {
            i13 = 2;
            do {
                i2 |= (int) Test.instanceCount;
                if (b2)
                    break;
                for (i14 = 1; i14 < 2; i14++) {
                    boolean b4 = false;
                    if (i13 != 0) {
                        vMeth_check_sum += l + i + i1 + i2 + Double.doubleToLongBits(d) + s1 + i12 + i13 + (b2 ? 1 : 0) + i14 + i15 + (b3 ? 1 : 0) + Float.floatToIntBits(f2) + i16 + i17 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    switch(((i12 >>> 1) % 7) + 8) {
                        case 8:
                            i2 >>= i13;
                            if (i != 0) {
                                vMeth_check_sum += l + i + i1 + i2 + Double.doubleToLongBits(d) + s1 + i12 + i13 + (b2 ? 1 : 0) + i14 + i15 + (b3 ? 1 : 0) + Float.floatToIntBits(f2) + i16 + i17 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                return;
                            }
                            if (b3)
                                continue;
                            Test.iFld -= i15;
                            i15 += (i14 * Test.instanceCount);
                            Test.iFld1 *= -8;
                            iArr1[i12] -= i1;
                            lArr1 = FuzzerUtils.long1array(N, (long) -32L);
                            Test.iFld1 += s1;
                            l -= (long) f2;
                            if (b3)
                                break;
                            Test.iFld1 -= i1;
                            switch(((i12 % 5) * 5) + 69) {
                                case 93:
                                case 94:
                                    Test.bArrFld[i12 + 1] = b2;
                                    switch(((i14 >>> 1) % 10) + 65) {
                                        case 65:
                                            i2 = (int) f2;
                                            if (false)
                                                break;
                                            iArr1 = iArr1;
                                            iArr1[i12] >>>= (int) l;
                                            Test.iFld += (13538 + (i14 * i14));
                                            Test.instanceCount = Test.iFld1;
                                            l /= (i16 | 1);
                                            s1 = (short) i12;
                                            i >>= Test.iFld1;
                                            Test.iFld1 += (((i14 * i14) + i13) - Test.instanceCount);
                                        case 66:
                                            Test.iFld1 = (int) Test.instanceCount;
                                            break;
                                        case 67:
                                            if (b3)
                                                continue;
                                            break;
                                        case 68:
                                            i16 = i13;
                                            break;
                                        case 69:
                                            i16 *= Test.iFld;
                                            break;
                                        case 70:
                                            Test.instanceCount += (((i14 * i2) + i17) - i12);
                                        case 71:
                                            iArr1[i14 + 1] = -219;
                                        case 72:
                                            i16 |= -51962;
                                        case 73:
                                            f2 += i14;
                                            break;
                                        case 74:
                                            i |= i16;
                                            break;
                                        default:
                                            l += (i14 * i14);
                                    }
                                    break;
                                case 77:
                                    Test.instanceCount = i17;
                                    break;
                                case 72:
                                    fArr = fArr;
                                case 78:
                                    i17 &= i2;
                            }
                            break;
                        case 9:
                            if (i15 != 0) {
                                vMeth_check_sum += l + i + i1 + i2 + Double.doubleToLongBits(d) + s1 + i12 + i13 + (b2 ? 1 : 0) + i14 + i15 + (b3 ? 1 : 0) + Float.floatToIntBits(f2) + i16 + i17 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                return;
                            }
                        case 10:
                            i17 = (int) l;
                            break;
                        case 11:
                            i += (i14 - i2);
                            break;
                        case 12:
                            Test.bArrFld[i12] = b4;
                            break;
                        case 13:
                            f2 += f2;
                            break;
                        case 14:
                            if (b3)
                                continue;
                            break;
                    }
                }
            } while ((i13 -= 3) > 0);
        } while (--i12 > 0);
        vMeth_check_sum += l + i + i1 + i2 + Double.doubleToLongBits(d) + s1 + i12 + i13 + (b2 ? 1 : 0) + i14 + i15 + (b3 ? 1 : 0) + Float.floatToIntBits(f2) + i16 + i17 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(boolean b) {
        int i18 = -211, i19 = 243, i20 = -41123, i21 = 32899, i22 = -9, i23 = 14, iArr2[] = new int[N];
        double d2 = 49.117370;
        float f3 = 0.761F;
        short s2 = -3775;
        FuzzerUtils.init(iArr2, 205);
        vMeth(-14L, Test.iFld1);
        for (i18 = 5; i18 < 90; i18 += 2) {
            Test.instanceCount += Test.iFld1;
            Test.iFld >>>= i19;
            i19 = i19;
            for (d2 = 1; 12 > d2; d2++) {
                f3 += (float) (((d2 * f3) + i19) - Test.iFld);
                i21 = 1;
                do {
                    Test.iFld += i21;
                    iArr2[(int) (d2 - 1)] += (int) f3;
                    Test.iFld <<= i18;
                    b = b;
                    Test.instanceCount = i19;
                    Test.lArrFld[i18 + 1] <<= -3737329912L;
                    f3 += (i21 - Test.instanceCount);
                    Test.instanceCount = Test.instanceCount;
                    i19 <<= 11;
                    Test.iFld1 -= Test.byFld;
                    Test.iFld = i21;
                    Test.instanceCount = i18;
                } while ((i21 += 3) < 2);
                i22 = 1;
                do {
                    Test.dArrFld[i18 - 1] = FuzzerUtils.double1array(N, (double) 45.100382);
                    if (Test.iFld1 != 0) {
                    }
                    i23 <<= (int) Test.instanceCount;
                    Test.instanceCount = i20;
                    Test.instanceCount += (i22 * i22);
                    Test.iFld1 += (13259 + (i22 * i22));
                    Test.iFld = i19;
                    i19 = s2;
                    f3 = -133;
                    i23 >>>= (int) Test.instanceCount;
                    if (b) {
                        Test.instanceCount |= i20;
                        iArr2[i18 - 1] -= i22;
                        iArr2[i22] += i23;
                        i20 += (i22 ^ Test.iFld);
                        i19 = -28372;
                    } else if (b) {
                        Test.instanceCount -= (long) 2.147F;
                    } else {
                        s2 = (short) 5;
                    }
                } while (++i22 < 2);
            }
        }
        long meth_res = (b ? 1 : 0) + i18 + i19 + Double.doubleToLongBits(d2) + i20 + Float.floatToIntBits(f3) + i21 + i22 + i23 + s2 + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {
        float f4 = 87.89F;
        int i24 = 11, i25 = 116, i26 = -248, i27 = -253, i28 = 245, i29 = 158, i30 = 38, i31 = 43465, i32 = 204, i33 = 244, i34 = 1, i35 = 5, i36 = 7, i37 = 2, i38 = -4, i39 = -93, i40 = -4, i41 = -16, i42 = 75, i43 = 3, iArr3[] = new int[N];
        FuzzerUtils.init(iArr3, 2710);
        lMeth(bFld);
        Test.byFld -= (byte) Test.iFld1;
        iArr3[(Test.iFld >>> 1) % N] = Test.iFld1;
        Test.lArrFld[(Test.iFld >>> 1) % N] = Test.iFld1;
        Test.fArrFld[(Test.iFld >>> 1) % N] = Test.iFld1;
        Test.instanceCount %= 10;
        Test.instanceCount -= (long) f4;
        for (i24 = 1; i24 < 178; ++i24) {
            try {
                Test.iFld1 = (i24 / -1548115483);
                Test.iFld = (i25 % -219);
                Test.iFld1 = (i24 % 202);
            } catch (ArithmeticException a_e) {
            }
            f4 = Test.iFld1;
            for (i26 = 1; i26 < 29; ++i26) {
                i27 += Test.iFld1;
                if (bFld)
                    break;
                for (i28 = 1; 2 > i28; i28++) {
                    long l2 = 250L;
                    Test.dArrFld[i26] = FuzzerUtils.double1array(N, (double) 2.51401);
                    f4 -= Test.iFld1;
                    iArr3[i26 - 1] = i28;
                    Test.iFld += (((i28 * Test.instanceCount) + i29) - Test.instanceCount);
                    l2 += 31L;
                }
                i25 = Test.iFld;
            }
            for (i30 = 1; i30 < 29; ++i30) {
                Test.lArrFld[i30 + 1] = (long) -10.191F;
                Test.instanceCount += (((i30 * Test.instanceCount) + i31) - Test.iFld1);
                Test.instanceCount -= (long) f4;
                i32 = 1;
                while (++i32 < 2) {
                    i31 += i32;
                    f4 -= i24;
                    Test.instanceCount += (long) 8.130100;
                    if (true)
                        break;
                }
                {
                    java.io.PrintStream ax$14 = System.out;
                    java.io.PrintStream ax$15 = System.err;
                    java.io.PrintStream ax$16 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$16);
                    System.setErr(ax$16);
                    try {
                        for (int ax$12 = -3654; ax$12 < 1362; ax$12 += 1) {
                            try {
                                int ax$9 = 65535;
                                java.util.concurrent.CountDownLatch ax$10 = new CountDownLatch(1000);
                                if (ax$9 == 0) {
                                    ax$10.countDown();
                                }
                            } catch (Throwable ax$11) {
                            } finally {
                            }
                        }
                    } catch (Throwable ax$13) {
                    }
                    System.setOut(ax$14);
                    System.setErr(ax$15);
                }
                i29 += i30;
                iArr3[i30] += i32;
                Test.lArrFld[i30] = i24;
                Test.lArrFld = Test.lArrFld;
                Test.bArrFld[i30 + 1] = bFld;
                i33 = 1;
                while ((i33 += 2) < 2) {
                    try {
                        iArr3[i24] = (iArr3[i33] / i30);
                        iArr3[i33] = (iArr3[i24] / i31);
                        Test.iFld = (i26 % i27);
                    } catch (ArithmeticException a_e) {
                    }
                    Test.iFld = i24;
                    try {
                        Test.iFld = (i25 % i30);
                        i31 = (-220 / i31);
                        i25 = (Test.iFld % 1990846656);
                    } catch (ArithmeticException a_e) {
                    }
                    Test.dArrFld[i33 + 1][i30 + 1] *= i29;
                    i25 <<= (int) Test.instanceCount;
                    f4 += (11014 + (i33 * i33));
                    Test.instanceCount &= i30;
                    Test.lArrFld[i30 + 1] = Test.instanceCount;
                }
                for (i34 = i30; i34 < 2; ++i34) {
                    f4 *= i24;
                    Test.instanceCount -= -21982L;
                    iArr3[i30 - 1] = i25;
                    iArr3[i24 - 1] += -52;
                    i25 += (int) (216L + (i34 * i34));
                    i29 >>= -58467;
                    i31 = i27;
                    i31 = (int) Test.instanceCount;
                    i29 += i31;
                    i27 >>>= i32;
                }
                i35 *= (int) Test.instanceCount;
            }
        }
        iArr3[(i25 >>> 1) % N] += Test.byFld;
        iArr3[(i31 >>> 1) % N] *= (int) 41.269F;
        for (i36 = 4; 131 > i36; i36++) {
            Test.iFld1 <<= -33125;
            for (i38 = 1; i38 < 40; i38 += 3) {
                i39 += (((i38 * i36) + Test.instanceCount) - f4);
                for (i40 = 1; i40 < 4; i40++) {
                    i35 = i26;
                    i41 -= i24;
                    i35 = i35;
                    i35 += 8;
                    Test.instanceCount += i40;
                }
                Test.instanceCount = (long) f4;
                for (i42 = i36; i42 < 4; i42++) {
                    i43 >>= 176;
                    i35 -= (int) Test.instanceCount;
                    i35 |= i27;
                    iArr3[i42 - 1] = i25;
                    f4 -= f4;
                    Test.byFld = (byte) i33;
                }
            }
        }
        FuzzerUtils.out.println("f4 i24 i25 = " + Float.floatToIntBits(f4) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("i38 i39 i40 = " + i38 + "," + i39 + "," + i40);
        FuzzerUtils.out.println("i41 i42 i43 = " + i41 + "," + i42 + "," + i43);
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.iFld1 = " + Test.instanceCount + "," + Test.iFld + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.byFld bFld Test.fArrFld = " + Test.byFld + "," + (bFld ? 1 : 0) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.bArrFld Test.lArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$17) {
            long ax$994 = vMeth_check_sum;
            long ax$995 = vMeth1_check_sum;
            try {
                if (vMeth_check_sum != vMeth1_check_sum)
                    ;
            } catch (Throwable ax$996) {
            } finally {
                vMeth_check_sum = ax$994;
                vMeth1_check_sum = ax$995;
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$17 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  lMeth ->  lMeth mainTest
// DEBUG  vMeth ->  vMeth lMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
