// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.Map;
import java.util.Hashtable;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -14L;

    public static byte byFld = 36;

    public static double dFld = -69.4577;

    public static short sFld = 10683;

    public int iFld = 232;

    public long lFld = 24156214L;

    public volatile int iFld1 = -167;

    public static long[] lArrFld = new long[N];

    public static long[][] lArrFld1 = new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -27329L);
        FuzzerUtils.init(Test.lArrFld1, 18619L);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, float f1, int i5) {
        if (ax$0) {
            try {
                java.util.Map ax$1 = new Hashtable();
                if (ax$1.hashCode() != 0)
                    ;
            } catch (Throwable ax$2) {
            } finally {
            }
            return;
        }
        int i6 = -204, i7 = 18705, i8 = 58676, i9 = -176, i10 = 5, i11 = -27245, i12 = 19783, i13 = 0, i14 = 1296, i15 = -11, i16 = -51581, iArr1[][] = new int[N][N];
        boolean b = true;
        long l1 = 113L;
        float[] fArr = new float[N];
        FuzzerUtils.init(iArr1, 43);
        FuzzerUtils.init(fArr, 0.652F);
        for (i6 = 8; i6 < 175; i6 += 3) {
            for (i8 = 10; i8 > 1; i8--) {
                Test.lArrFld = Test.lArrFld;
                Test.instanceCount >>= i8;
                i10 = 1;
                do {
                    f1 -= -439;
                    i5 += i7;
                    iArr1[i8][i6 + 1] >>= i10;
                    i9 %= (int) (i6 | 1);
                    try {
                        iArr1[i8 - 1][i8 + 1] = (i10 / -39702);
                        i4 = (i7 / -53427);
                        i4 = (1282043945 / iArr1[i6 + 1][i10 - 1]);
                    } catch (ArithmeticException a_e) {
                    }
                } while (++i10 < 2);
                iArr1[i8 + 1][i8] += (int) f1;
                if (b)
                    break;
                for (l1 = 1; l1 < 2; l1++) {
                    i9 += -12366;
                    i11 = i4;
                    if (b)
                        break;
                    f1 += (l1 - i10);
                    Test.byFld = (byte) i8;
                }
                Test.dFld -= l1;
                Test.lArrFld[i8] += Test.instanceCount;
                Test.dFld -= i9;
            }
            if (b)
                continue;
            for (i12 = 1; i12 < 10; i12++) {
                for (i14 = 1; 2 > i14; ++i14) {
                    iArr1[i6][i14 - 1] += i13;
                    Test.sFld -= (short) 1.302F;
                }
                Test.instanceCount = i7;
                if (i16 != 0) {
                    vMeth1_check_sum += i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + l1 + i11 + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
                fArr[i12 - 1] = Test.byFld;
                Test.instanceCount += 281672836L;
            }
            if (b)
                break;
            i5 -= -250;
            f1 = -2023L;
            iArr1[i6 - 1][i6] = 37756;
            Test.instanceCount <<= 4;
            i15 = (int) l1;
        }
        i11 >>>= i5;
        vMeth1_check_sum += i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + l1 + i11 + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(double d, long l) {
        int i1 = 19644, i2 = -77, i3 = -162, i17 = -11, i18 = -59312, i19 = 8172, iArr2[][] = new int[N][N];
        double d1 = 1.56132, dArr[] = new double[N];
        long l2 = -749372402994423639L, l3 = -9L;
        boolean b1 = false, bArr[] = new boolean[N];
        float[][] fArr1 = new float[N][N];
        byte[][] byArr = new byte[N][N];
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr, 0.27240);
        FuzzerUtils.init(fArr1, 29.882F);
        FuzzerUtils.init(iArr2, -106);
        FuzzerUtils.init(byArr, (byte) 47);
        Test.instanceCount = (Test.byFld++);
        for (i1 = 2; i1 < 236; ++i1) {
            for (d1 = 1; d1 < 3; ++d1) {
                float f2 = 108.703F;
                {
                    java.io.PrintStream ax$5 = System.out;
                    java.io.PrintStream ax$6 = System.err;
                    java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$7);
                    System.setErr(ax$7);
                    try {
                        ax$0 = true;
                        for (int ax$3 = 0; ax$3 < 9962; ax$3 += 1) vMeth1(-243442409, (float) 0.4586250036718853, 1409283268);
                    } catch (java.lang.Throwable ax$4) {
                    } finally {
                        ax$0 = false;
                    }
                    System.setOut(ax$5);
                    System.setErr(ax$6);
                }
                vMeth1(i3, f2, i2);
                i3 &= -8;
                i3 = i3;
                i2 ^= i1;
                bArr = FuzzerUtils.boolean1array(N, (boolean) true);
                switch(i1 % 7) {
                    case 0:
                        Test.lArrFld[(int) (d1 - 1)] = i2;
                        break;
                    case 1:
                        for (l2 = 1; l2 < 2; ++l2) {
                            f2 += l2;
                            Test.dFld += i1;
                            f2 += l2;
                            i2 += i2;
                            Test.lArrFld[(int) (l2)] = l2;
                            i17 = i3;
                            l = -3535316924L;
                            l += Test.byFld;
                            i2 += (int) (((l2 * i1) + i1) - i3);
                            i2 *= (int) Test.instanceCount;
                            dArr[i1 - 1] = 2.495F;
                        }
                        l <<= 3842;
                        bArr[(int) (d1)] = b1;
                        i2 -= i2;
                        switch(((i1 % 2) * 5) + 105) {
                            case 108:
                                if (b1) {
                                    i3 = i2;
                                    if (b1)
                                        break;
                                    i3 -= i2;
                                    for (i18 = 1; i18 < 2; i18++) {
                                        fArr1[i1 - 1][i1] = i17;
                                        l ^= i17;
                                        i19 = (int) l;
                                        i19 = i1;
                                        i17 = i3;
                                    }
                                    i2 = i19;
                                } else if (b1) {
                                    i2 = (int) l3;
                                }
                                break;
                            case 115:
                            default:
                                try {
                                    i17 = (i2 % i2);
                                    i2 = (iArr2[i1 + 1][(int) (d1)] / i3);
                                    iArr2[(int) (d1 - 1)][(int) (d1)] = (i1 % iArr2[(int) (d1)][i1]);
                                } catch (ArithmeticException a_e) {
                                }
                        }
                        break;
                    case 2:
                        iArr2[i1 - 1][i1 + 1] ^= (int) l;
                        break;
                    case 3:
                        f2 -= i2;
                        break;
                    case 4:
                        byArr[(int) (d1 + 1)][i1 + 1] = (byte) l;
                        break;
                    case 5:
                        f2 += (float) Test.dFld;
                        break;
                    case 6:
                        i2 >>>= Test.sFld;
                        break;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + l + i1 + i2 + Double.doubleToLongBits(d1) + i3 + l2 + i17 + (b1 ? 1 : 0) + i18 + i19 + l3 + FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr);
    }

    public static int iMeth(int i) {
        if (ax$8) {
            try {
                java.lang.CharSequence ax$19 = "5.109194337658483E+53";
                for (int ax$20 = 0; ax$20 < ax$19.length(); ax$20++) ;
            } catch (Throwable ax$21) {
            } finally {
            }
            return -449485698;
        }
        float f = 88.584F, fArr2[] = new float[N];
        int i20 = -5519, i21 = 33122, i22 = 1, i23 = 209, i24 = 12, i25 = 48448, i26 = 49581, iArr[] = new int[N];
        long l4 = -237L;
        boolean b2 = true;
        double d2 = -1.129218;
        FuzzerUtils.init(iArr, -18610);
        FuzzerUtils.init(fArr2, 1.959F);
        iArr[(i >>> 1) % N] = (int) ((i * (Test.instanceCount * i)) >> (long) (iArr[(i >>> 1) % N] % (((long) (Test.instanceCount - f)) | 1)));
        vMeth(Test.dFld, Test.instanceCount);
        for (i20 = 8; i20 < 212; ++i20) {
            i22 = 1;
            do {
                i21 += (((i22 * i21) + l4) - i21);
                i21 += (int) 123.24256;
                f -= Test.instanceCount;
                iArr[i20] >>= i22;
                fArr2[i22 + 1] = i;
                i21 += (i22 - i21);
                for (i23 = 1; i23 < 1; i23 += 2) {
                    iArr[i23] >>= i21;
                    f += i22;
                    Test.instanceCount /= (i24 | 1);
                    Test.sFld = (short) i21;
                    i21 += (((i23 * Test.sFld) + i) - f);
                    i = i;
                    i21 -= i20;
                }
                if (b2) {
                    Test.lArrFld[i20] += -3;
                }
                Test.sFld = (short) i24;
                i24 += i22;
            } while (++i22 < 3);
            i += i20;
            i21 += (6 + (i20 * i20));
            for (i25 = 3; 1 < i25; --i25) {
                d2 = 2;
                do {
                    i24 += (int) d2;
                    Test.lArrFld[(int) (d2)] = i20;
                    i = (int) Test.instanceCount;
                    Test.instanceCount += -2;
                    i24 = i23;
                    Test.byFld *= (byte) Test.instanceCount;
                    switch(((i25 % 7) * 5) + 86) {
                        case 107:
                        case 91:
                            i = (int) -175L;
                            i26 -= (int) f;
                        case 120:
                            l4 += i25;
                            Test.sFld += (short) i26;
                            break;
                        case 87:
                            i26 %= (int) (Test.sFld | 1);
                        case 89:
                            i = i20;
                        case 115:
                            iArr[(int) (d2)] = (int) d2;
                            break;
                        case 113:
                            i26 *= (int) Test.instanceCount;
                            break;
                    }
                } while (--d2 > 0);
            }
        }
        long meth_res = i + Float.floatToIntBits(f) + i20 + i21 + i22 + l4 + i23 + i24 + (b2 ? 1 : 0) + i25 + i26 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i27 = 207, i28 = 123, i29 = 3, i30 = -32572, i31 = 6, i32 = -93, i33 = -41110, iArr3[] = new int[N];
        float f3 = 2.858F, fArr3[] = new float[N];
        boolean b3 = true;
        byte[] byArr1 = new byte[N];
        FuzzerUtils.init(iArr3, -31);
        FuzzerUtils.init(byArr1, (byte) -126);
        FuzzerUtils.init(fArr3, -11.496F);
        {
            java.io.PrintStream ax$24 = System.out;
            java.io.PrintStream ax$25 = System.err;
            java.io.PrintStream ax$26 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$26);
            System.setErr(ax$26);
            try {
                ax$8 = true;
                for (int ax$22 = 0; ax$22 < 9489; ax$22 += 1) iMeth(-5717653);
            } catch (java.lang.Throwable ax$23) {
            } finally {
                ax$8 = false;
            }
            System.setOut(ax$24);
            System.setErr(ax$25);
        }
        iMeth(iFld);
        iArr3 = iArr3;
        for (i27 = 13; i27 < 244; ++i27) {
            Test.lArrFld[i27] = iFld;
            byArr1[i27 + 1] += (byte) Test.instanceCount;
            for (i29 = 1; i29 < 22; i29++) {
                for (i31 = 1; i31 < 2; i31++) {
                    iFld += (i31 * i31);
                    Test.instanceCount *= Test.instanceCount;
                    switch((i29 % 9) + 25) {
                        case 25:
                            i28 >>= iFld;
                        case 26:
                            Test.instanceCount += i31;
                            iArr3 = iArr3;
                            iArr3[i31] += i27;
                            Test.instanceCount = i31;
                            i30 = i30;
                            i28 -= i33;
                            break;
                        case 27:
                            Test.byFld = (byte) -1479L;
                            iFld *= i29;
                            Test.lArrFld = FuzzerUtils.long1array(N, (long) -53800L);
                            Test.instanceCount = i28;
                            switch((i31 % 1) + 18) {
                                case 18:
                                    Test.dFld += i30;
                                    i28 /= (int) (i29 | 1);
                                    i30 += (i31 * i31);
                                    i33 = 13;
                                    i28 = iFld;
                                    Test.dFld = Test.instanceCount;
                                    try {
                                        i32 = (125 % iFld);
                                        iFld = (i28 % i33);
                                        iFld = (i32 % -62309);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    f3 += i30;
                                    iArr3[i29 - 1] += (int) f3;
                                    switch((i31 % 2) + 35) {
                                        case 35:
                                            if (b3)
                                                continue;
                                            Test.byFld = (byte) i31;
                                            break;
                                        case 36:
                                            Test.instanceCount -= i27;
                                            i30 = (int) Test.instanceCount;
                                            iArr3[i29] = Test.byFld;
                                            i32 += (i31 * i31);
                                            i33 *= Test.sFld;
                                            i33 = 22192;
                                            iFld = i31;
                                            try {
                                                i33 = (i27 % 215);
                                                i32 = (i28 % 22964);
                                                i33 = (-12 / iArr3[i29]);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            switch((i29 % 6) + 37) {
                                                case 37:
                                                    iFld *= (int) 1.430F;
                                                    Test.instanceCount *= i29;
                                                    i30 += iFld;
                                                    i33 += i28;
                                                    Test.byFld += (byte) Test.dFld;
                                                    i28 *= i31;
                                                    i33 += iFld;
                                                    switch(((i31 % 2) * 5) + 42) {
                                                        case 48:
                                                            Test.instanceCount -= (long) Test.dFld;
                                                            Test.instanceCount <<= i29;
                                                            f3 = i28;
                                                            Test.instanceCount = i28;
                                                            iArr3[i31 + 1] -= (int) f3;
                                                            i28 += i31;
                                                            break;
                                                        case 43:
                                                            lFld += i31;
                                                            Test.lArrFld[i29 + 1] -= iFld;
                                                            iFld <<= i30;
                                                            fArr3[i31 + 1] = i31;
                                                            if (b3)
                                                                continue;
                                                            b3 = b3;
                                                            iArr3[i27] -= i27;
                                                        default:
                                                            i33 = i32;
                                                            Test.byFld = (byte) i31;
                                                            Test.instanceCount += (long) f3;
                                                            i33 -= i32;
                                                            b3 = b3;
                                                            i32 += (((i31 * i29) + f3) - Test.byFld);
                                                            switch(((i29 % 9) * 5) + 127) {
                                                                case 137:
                                                                    Test.lArrFld1 = FuzzerUtils.long2array(N, (long) -5337836122397447034L);
                                                                    i32 = (int) Test.instanceCount;
                                                                    i32 += (i31 + i32);
                                                                    f3 -= -8467;
                                                                    break;
                                                                case 152:
                                                                case 143:
                                                                    i32 *= (int) Test.dFld;
                                                                    break;
                                                                case 170:
                                                                    Test.instanceCount = -8;
                                                                    break;
                                                                case 129:
                                                                    iArr3 = FuzzerUtils.int1array(N, (int) -138);
                                                                    break;
                                                                case 155:
                                                                    if (b3)
                                                                        break;
                                                                    break;
                                                                case 139:
                                                                    f3 += (((i31 * i29) + i30) - f3);
                                                                    break;
                                                                case 171:
                                                                    f3 += i31;
                                                                    break;
                                                                case 165:
                                                                    Test.lArrFld = Test.lArrFld1[i31 + 1];
                                                            }
                                                    }
                                                    break;
                                                case 38:
                                                    iFld = i27;
                                                case 39:
                                                    Test.instanceCount -= -13;
                                                    break;
                                                case 40:
                                                    Test.lArrFld[i27 - 1] += i28;
                                                    break;
                                                case 41:
                                                    Test.dFld = Test.sFld;
                                                    break;
                                                case 42:
                                                    i32 %= (int) (lFld | 1);
                                                    break;
                                            }
                                            break;
                                        default:
                                            iFld1 += (29 + (i31 * i31));
                                    }
                                    break;
                            }
                        case 28:
                            Test.instanceCount += (((i31 * Test.byFld) + f3) - iFld1);
                            break;
                        case 29:
                            i30 += (int) Test.instanceCount;
                            break;
                        case 30:
                            Test.instanceCount += (((i31 * i32) + f3) - iFld);
                            break;
                        case 31:
                        case 32:
                            i30 = Test.byFld;
                            break;
                        case 33:
                            if (b3)
                                continue;
                            break;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 f3 b3 = " + i33 + "," + Float.floatToIntBits(f3) + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("iArr3 byArr1 fArr3 = " + FuzzerUtils.checkSum(iArr3) + "," + FuzzerUtils.checkSum(byArr1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr3)));
        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.dFld = " + Test.instanceCount + "," + Test.byFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld iFld lFld = " + Test.sFld + "," + iFld + "," + lFld);
        FuzzerUtils.out.println("iFld1 Test.lArrFld Test.lArrFld1 = " + iFld1 + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld1));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$8 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
