// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.UUID;
import java.net.InetAddress;

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = -7L;

    public static long lFld = -9060675413800897866L;

    public static short sFld = 28557;

    public static float fFld = -117.1015F;

    public static double dFld = -124.28206;

    public static int iFld = 91;

    public static boolean bFld = true;

    public byte byFld = -14;

    public int[] iArrFld = new int[N];

    public static int[] iArrFld1 = new int[N];

    public static volatile boolean[] bArrFld = new boolean[N];

    public static volatile float[] fArrFld = new float[N];

    public static float[][] fArrFld1 = new float[N][N];

    public static double[][] dArrFld = new double[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -8424);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.fArrFld, -2.736F);
        FuzzerUtils.init(Test.fArrFld1, -1.118F);
        FuzzerUtils.init(Test.dArrFld, 0.105296);
    }

    public static long lMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long lMeth1_check_sum = 0;

    public static long lMeth1() {
        int i8 = -14, i9 = 32, i10 = -131, i11 = 6, i12 = -13, i13 = -47033, i14 = -160, i15 = -42101, i16 = -8, i17 = 14;
        boolean b = false;
        byte by1 = -79;
        double[] dArr = new double[N];
        float[] fArr = new float[N];
        FuzzerUtils.init(dArr, -16.49217);
        FuzzerUtils.init(fArr, -85.581F);
        i8 = i8;
        Test.fFld = Test.sFld;
        i8 >>= i8;
        Test.iArrFld1[(i8 >>> 1) % N] <<= (int) Test.instanceCount;
        if (b) {
            i8 += i8;
            for (i9 = 162; i9 > 4; i9--) {
                i8 += i9;
                dArr[i9] = Test.dFld;
            }
            {
                java.io.PrintStream ax$4 = System.out;
                java.io.PrintStream ax$5 = System.err;
                java.io.PrintStream ax$6 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$6);
                System.setErr(ax$6);
                try {
                    for (int ax$2 = -3363; ax$2 < 5442; ax$2 += 1) {
                        try {
                            UUID ax$0 = UUID.randomUUID();
                            try {
                                ax$0.node();
                            } catch (UnsupportedOperationException uoe) {
                                // Correct result
                            }
                            ax$0 = UUID.fromString("00000001-0000-1000-8001-000000000001");
                            if (ax$0.node() != 1)
                                ;
                            ax$0 = UUID.fromString("00000001-0000-1000-8002-FFFFFFFFFFFF");
                            if (// 2^48 - 1
                            ax$0.node() != ((2L << 47) - 1))
                                ;
                        } catch (Throwable ax$1) {
                        } finally {
                        }
                    }
                } catch (Throwable ax$3) {
                }
                System.setOut(ax$4);
                System.setErr(ax$5);
            }
            Test.iArrFld1[(10305 >>> 1) % N] &= i9;
            for (i11 = 1; i11 < 112; i11++) {
                Test.dFld = i11;
                i10 += (i11 - i12);
                switch((i11 % 3) + 124) {
                    case 124:
                        i8 *= i10;
                        for (i13 = 1; i13 < 5; ++i13) {
                            if (b)
                                break;
                            i15 = i9;
                            for (i16 = 1; i16 < 2; i16++) {
                                if (false) {
                                    Test.fFld *= (float) Test.dFld;
                                    Test.iArrFld1[i16 - 1] *= i15;
                                } else if (true) {
                                    Test.fFld -= i15;
                                    Test.instanceCount = (long) Test.fFld;
                                    fArr = fArr;
                                    Test.instanceCount = Test.lFld;
                                    Test.iArrFld1[i11 + 1] += (int) Test.lFld;
                                    Test.lFld ^= 129;
                                    Test.iArrFld1[i13 - 1] += i16;
                                    i17 = -50498;
                                    by1 >>= (byte) Test.lFld;
                                    Test.iArrFld1[i13 + 1] += (int) Test.dFld;
                                }
                                i10 = 9;
                                Test.fFld = i13;
                                b = b;
                                Test.fFld += Test.fFld;
                                Test.dFld *= i12;
                            }
                        }
                        break;
                    case 125:
                        i8 -= i11;
                        break;
                    case 126:
                        i8 += (1 + (i11 * i11));
                        break;
                    default:
                        Test.instanceCount -= (long) Test.dFld;
                }
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + i14 + (b ? 1 : 0) + i15 + i16 + i17 + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth1_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth(double d1) {
        int i18 = 31025, i19 = 7078, i20 = 27227, i21 = -57209, i22 = 0, i23 = -6, i24 = -31;
        byte by2 = 98, byArr[] = new byte[N];
        long l = -1780975190L, lArr[][] = new long[N][N];
        float[][] fArr1 = new float[N][N];
        short[][] sArr1 = new short[N][N];
        FuzzerUtils.init(fArr1, 65.711F);
        FuzzerUtils.init(sArr1, (short) -1110);
        FuzzerUtils.init(lArr, 12L);
        FuzzerUtils.init(byArr, (byte) 7);
        lMeth1();
        for (i18 = 132; 6 < i18; i18--) {
            i19 = by2;
            i19 += (-42938 + (i18 * i18));
            i19 = i19;
        }
        for (i20 = 1; i20 < 99; ++i20) {
            i19 = (int) Test.fFld;
            by2 += (byte) (i20 * i20);
            for (i22 = 1; 6 > i22; ++i22) {
                i24 = 2;
                do {
                    by2 >>= (byte) Test.instanceCount;
                    i21 = -10;
                    by2 = (byte) i22;
                    i21 ^= Test.sFld;
                    fArr1[i20 - 1] = fArr1[i24 + 1];
                    Test.fFld += (((i24 * i22) + by2) - Test.lFld);
                    i23 -= i23;
                    i23 += i24;
                    switch((((i18 >>> 1) % 2) * 5) + 14) {
                        case 16:
                            Test.lFld = Test.sFld;
                            i21 >>= -9;
                            i19 -= Test.sFld;
                            i23 += (((i24 * i23) + i21) - i24);
                            Test.iArrFld1[i22 - 1] -= i23;
                            i21 >>= (int) Test.instanceCount;
                            switch(((i24 % 8) * 5) + 4) {
                                case 7:
                                    i23 -= (int) l;
                                    i21 = i21;
                                    sArr1 = sArr1;
                                    lArr[i24 - 1] = lArr[i24];
                                    switch(((i20 % 2) * 5) + 38) {
                                        case 46:
                                            Test.iFld += (i24 * i24);
                                            Test.fFld = Test.lFld;
                                            i23 -= (int) Test.dFld;
                                            Test.fFld += -135;
                                            i23 <<= (int) Test.lFld;
                                            i19 += (int) Test.lFld;
                                        case 43:
                                            Test.iArrFld1[i22] ^= -27850;
                                            break;
                                        default:
                                            byArr = byArr;
                                    }
                                    break;
                                case 32:
                                    i23 = i21;
                                    break;
                                case 23:
                                    Test.lFld *= Test.iFld;
                                    break;
                                case 19:
                                    i21 = (int) Test.fFld;
                                    break;
                                case 36:
                                    if (i22 != 0) {
                                        vMeth_check_sum += Double.doubleToLongBits(d1) + i18 + i19 + by2 + i20 + i21 + i22 + i23 + i24 + l + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(sArr1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
                                        return;
                                    }
                                    break;
                                case 12:
                                case 42:
                                    Test.iFld <<= i21;
                                    break;
                                case 6:
                                    i23 ^= Test.iFld;
                                    break;
                                default:
                                    fArr1[i22 + 1] = fArr1[i24];
                            }
                            {
                                java.io.PrintStream ax$13 = System.out;
                                java.io.PrintStream ax$14 = System.err;
                                java.io.PrintStream ax$15 = new java.io.PrintStream(new java.io.OutputStream() {

                                    @Override
                                    public void write(int b) throws java.io.IOException {
                                        // DO NOTHING: DISCARD ALL OUTPUTS
                                    }
                                });
                                System.setOut(ax$15);
                                System.setErr(ax$15);
                                try {
                                    for (int ax$11 = -4597; ax$11 < 2641; ax$11 += 1) {
                                        try {
                                            int[] ax$7 = { 1, 2, 3, 4 };
                                            for (int ax$8 = 0; ax$8 < 200; ax$8++) {
                                                // Lower bound must be recognized as lower precision induction with arithmetic
                                                // wrap-around to -128 when i exceeds 127.
                                                for (int ax$9 = (byte) ax$8; ax$9 < 200; ax$9++) {
                                                    ax$7[ax$9] += 1;
                                                }
                                            }
                                        } catch (Throwable ax$10) {
                                        } finally {
                                        }
                                    }
                                } catch (Throwable ax$12) {
                                }
                                System.setOut(ax$13);
                                System.setErr(ax$14);
                            }
                            break;
                        case 18:
                            by2 += (byte) i24;
                            break;
                    }
                } while (--i24 > 0);
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i18 + i19 + by2 + i20 + i21 + i22 + i23 + i24 + l + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(sArr1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
    }

    public static long lMeth(int i1) {
        int i2 = 222, i3 = 5, i4 = 1, i5 = 13, i6 = -43759, i7 = -189, i25 = 114, i26 = 51, i27 = 10, i28 = -134, i29 = -10, i30 = 254;
        byte by = -42;
        double d = -120.105608;
        boolean b1 = true, bArr[][] = new boolean[N][N];
        short[] sArr = new short[N];
        FuzzerUtils.init(sArr, (short) 19981);
        FuzzerUtils.init(bArr, true);
        i1 += (int) (-105 + (--Test.lFld));
        for (i2 = 5; i2 < 252; ++i2) {
            Test.iArrFld1[i2] = (int) ((Math.max(Test.lFld, Test.lFld) * (Test.iArrFld1[i2 - 1]++)) % (((Test.instanceCount = i1) << Math.max(i3, i1)) | 1));
            Test.sFld = (short) i3;
            for (i4 = 1; i4 < 3; ++i4) {
                {
                    java.io.PrintStream ax$16 = System.out;
                    java.io.PrintStream ax$17 = System.err;
                    java.io.PrintStream ax$18 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$18);
                    System.setErr(ax$18);
                    {
                        boolean ax$20 = false;
                        for (int ax$19 = -278; ax$19 < 9368; ax$19 += 2) {
                            if (!ax$20) {
                                ax$20 = true;
                                {
                                    System.setOut(ax$16);
                                    System.setErr(ax$17);
                                    if (i3 != 0) {
                                    }
                                    System.setOut(ax$18);
                                    System.setErr(ax$18);
                                }
                            }
                        }
                    }
                    System.setOut(ax$16);
                    System.setErr(ax$17);
                }
                i1 = Math.max((i3 + i4) * Test.iArrFld1[i4 - 1], (int) (Math.min(Test.instanceCount, 32655L) + (86 & (long) (by * d))));
                Test.iArrFld1[i4] <<= Test.iArrFld1[i4 + 1];
                for (i6 = 1; i6 < 2; i6++) {
                    sArr[i4 - 1] = (short) (((i7 * Test.fFld) - (i3 = (int) Test.instanceCount)) - (i5--));
                    i1 *= (i1++);
                    vMeth(d);
                    Test.iFld = i7;
                    i1 += (((i6 * i1) + Test.sFld) - i6);
                    Test.instanceCount = i7;
                    Test.iArrFld1[i2] = (int) Test.instanceCount;
                    i3 >>= (int) 27769L;
                    bArr[i4 - 1][i2] = b1;
                    Test.lFld += (i6 * i6);
                    Test.sFld += (short) (((i6 * Test.lFld) + i1) - i3);
                    i3 += i1;
                    try {
                        i7 = (i6 % 14168);
                        Test.iFld = (Test.iArrFld1[i4] / i3);
                        i3 = (i2 % Test.iArrFld1[i4 - 1]);
                    } catch (ArithmeticException a_e) {
                    }
                }
                for (i25 = 1; i25 < 2; ++i25) {
                    i1 /= -137;
                    Test.iFld += i25;
                    Test.lFld = i1;
                }
                for (i27 = 1; i27 < 2; i27++) {
                    Test.iFld <<= (int) Test.instanceCount;
                    Test.iArrFld1 = Test.iArrFld1;
                    Test.iArrFld1[i4 - 1] -= i26;
                    Test.fFld += (((i27 * Test.iFld) + i3) - Test.fFld);
                    i3 &= i7;
                    by *= (byte) i1;
                    try {
                        i26 = (i5 / i26);
                        Test.iArrFld1[i2 - 1] = (Test.iArrFld1[i2] % 109);
                        i7 = (i5 / i26);
                    } catch (ArithmeticException a_e) {
                    }
                }
                for (i29 = 1; i29 < 2; ++i29) {
                    i7 += (i29 * i29);
                }
                Test.iArrFld1[i4 + 1] -= by;
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + by + Double.doubleToLongBits(d) + i6 + i7 + (b1 ? 1 : 0) + i25 + i26 + i27 + i28 + i29 + i30 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = 187, i31 = -126, i32 = -16784, i33 = 91, i34 = -41021, i35 = -9, i36 = 49555, i37 = 24446;
        iArrFld = (iArrFld = (iArrFld = iArrFld));
        iArrFld[(i >>> 1) % N] = 37133;
        Test.lFld = lMeth(i);
        for (i31 = 143; i31 > 7; --i31) {
            Test.iArrFld1[i31] = (int) Test.fFld;
            for (i33 = 1; i33 < 37; i33 += 3) {
                for (i35 = 1; 4 > i35; i35++) {
                    i36 = i32;
                    Test.instanceCount <<= i36;
                    i36 += (i35 | Test.sFld);
                    if (Test.bFld)
                        break;
                    i36 >>>= i32;
                    i32 = 5;
                    switch((i31 % 3) + 82) {
                        case 82:
                            i34 += i34;
                            if (false)
                                break;
                            i36 = 57;
                            Test.iArrFld1[i31] *= i33;
                            Test.lFld += (i35 * i35);
                            i34 = i35;
                            i36 %= (int) (i34 | 1);
                            i34 = i35;
                            i36 += (i35 + i34);
                            Test.sFld = (short) Test.iFld;
                            i36 -= (int) Test.lFld;
                            if (Test.bFld) {
                                i34 |= i35;
                                Test.iArrFld1[i33 - 1] = i31;
                                Test.dFld -= Test.dFld;
                                i = i34;
                                i += i35;
                                if (Test.bFld)
                                    continue;
                                byFld -= (byte) Test.fFld;
                            }
                            Test.fFld *= Test.instanceCount;
                            Test.lFld = 20;
                            i *= (int) 2.444F;
                            break;
                        case 83:
                            Test.lFld += (long) 24.14364;
                            i = i;
                            if (Test.bFld)
                                break;
                            Test.sFld += (short) (((i35 * i35) + i32) - i35);
                            Test.fFld -= 0.177F;
                            Test.iArrFld1[i35] += i36;
                            break;
                        case 84:
                            i = (int) Test.lFld;
                            i34 += i35;
                            switch((i35 % 7) + 68) {
                                case 68:
                                    i34 ^= i32;
                                    i36 >>= i36;
                                    Test.bArrFld[i31 + 1] = false;
                                    Test.lFld = Test.instanceCount;
                                    Test.dFld *= Test.iFld;
                                    Test.fArrFld[i35] *= i34;
                                    Test.dFld = Test.lFld;
                                    break;
                                case 69:
                                    i *= Test.sFld;
                                    switch((i31 % 7) + 108) {
                                        case 108:
                                            iArrFld[i33 + 1] = i36;
                                            i <<= i;
                                            Test.instanceCount &= Test.lFld;
                                            Test.iFld += i32;
                                            i34 += i35;
                                            switch((i33 % 2) + 32) {
                                                case 32:
                                                    Test.fArrFld[i33 - 1] = 23907;
                                                    if (Test.bFld)
                                                        break;
                                                    Test.fArrFld[i31 + 1] = i32;
                                                    i32 += (((i35 * Test.iFld) + i) - Test.instanceCount);
                                                    i32 = i34;
                                                    byFld *= (byte) Test.instanceCount;
                                                case 33:
                                                    if (Test.bFld) {
                                                        switch(((i35 % 10) * 5) + 2) {
                                                            case 36:
                                                                i34 &= (int) Test.lFld;
                                                                Test.bFld = Test.bFld;
                                                                if (Test.bFld)
                                                                    break;
                                                                byFld = (byte) i33;
                                                                Test.instanceCount >>= Test.instanceCount;
                                                                i32 = byFld;
                                                                Test.lFld = Test.lFld;
                                                            case 19:
                                                                Test.iFld += (((i35 * i34) + i37) - i31);
                                                                break;
                                                            case 42:
                                                                Test.fArrFld1 = Test.fArrFld1;
                                                                break;
                                                            case 7:
                                                                i -= (int) Test.dFld;
                                                                break;
                                                            case 40:
                                                            case 26:
                                                                Test.iArrFld1[i33 - 1] = i31;
                                                            case 28:
                                                                i32 += (i35 - i34);
                                                            case 8:
                                                                i34 -= (int) Test.lFld;
                                                                break;
                                                            case 31:
                                                                Test.dArrFld[i31 - 1][i31] = 225L;
                                                                break;
                                                            case 10:
                                                                Test.instanceCount = i36;
                                                                break;
                                                        }
                                                    } else if (true) {
                                                        Test.lFld += (i35 - i36);
                                                    } else {
                                                        i37 = -1;
                                                    }
                                                    break;
                                                default:
                                                    Test.iFld += (((i35 * i37) + i34) - Test.lFld);
                                            }
                                            break;
                                        case 109:
                                            i32 -= (int) Test.instanceCount;
                                        case 110:
                                            Test.iArrFld1[i35 - 1] = i34;
                                            break;
                                        case 111:
                                            Test.iFld = Test.iFld;
                                            break;
                                        case 112:
                                            Test.iFld += (i35 * i35);
                                            break;
                                        case 113:
                                            Test.iArrFld1 = Test.iArrFld1;
                                            break;
                                        case 114:
                                            i37 += (-7 + (i35 * i35));
                                            break;
                                        default:
                                            i36 = i32;
                                    }
                                    break;
                                case 70:
                                    Test.fFld *= 174;
                                case 71:
                                    i37 += i37;
                                case 72:
                                    i32 += (i35 ^ i31);
                                    break;
                                case 73:
                                    i <<= -1;
                                    break;
                                case 74:
                                    Test.iArrFld1[i31 - 1] = byFld;
                                    break;
                                default:
                                    i += (int) Test.instanceCount;
                            }
                            break;
                        default:
                            iArrFld[i31 + 1] = i36;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i i31 i32 = " + i + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 i37 = " + i36 + "," + i37);
        FuzzerUtils.out.println("Test.instanceCount Test.lFld Test.sFld = " + Test.instanceCount + "," + Test.lFld + "," + Test.sFld);
        FuzzerUtils.out.println("Test.fFld Test.dFld Test.iFld = " + Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.bFld byFld iArrFld = " + (Test.bFld ? 1 : 0) + "," + byFld + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 Test.bArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld1) + "," + FuzzerUtils.checkSum(Test.bArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.fArrFld1 Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld1)) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$21) {
            try {
                java.net.InetAddress ax$22 = null;
                if (ax$22.isLoopbackAddress()) {
                    ax$22 = InetAddress.getLoopbackAddress();
                }
            } catch (Throwable ax$23) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$21 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  lMeth ->  lMeth mainTest
// DEBUG  vMeth ->  vMeth lMeth mainTest
// DEBUG  lMeth1 ->  lMeth1 vMeth lMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
