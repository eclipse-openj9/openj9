// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -62559L;

    public static int iFld = 31557;

    public static float fFld = 1.301F;

    public static double dFld = 23.35821;

    public static byte byFld = 51;

    public static boolean bFld = true;

    public static long[] lArrFld = new long[N];

    public static int[] iArrFld = new int[N];

    public boolean[] bArrFld = new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2L);
        FuzzerUtils.init(Test.iArrFld, -183);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long dMeth_check_sum = 0;

    public static double dMeth(long l1, long l2) {
        if (ax$0) {
            byte ax$3 = byFld;
            int ax$4 = iFld;
            try {
                byte[] ax$2 = new byte[1 << 14];
                byte[] ax$1 = new byte[10];
                byFld += Math.abs(ax$2[iFld] - ax$1[iFld]);
            } catch (Throwable ax$5) {
            } finally {
                byFld = ax$3;
                iFld = ax$4;
            }
            return 0.06726868328192248;
        }
        short s = 29594;
        int i1 = 251, i2 = 60051, i3 = 111, i4 = -46182, i5 = -24392, i6 = 10, i7 = 8, i8 = 58532, i9 = -6584, i10 = -53613, iArr[] = new int[N];
        byte by = 20;
        boolean b = true;
        FuzzerUtils.init(iArr, -34815);
        s ^= (short) Test.iFld;
        for (i1 = 3; i1 < 112; i1 += 3) {
            Test.iFld = Test.iFld;
            l1 += l2;
        }
        s *= (short) l1;
        Test.iFld += i2;
        iArr[(30652 >>> 1) % N] <<= i1;
        for (i3 = 6; 160 > i3; ++i3) {
            for (i5 = 1; i5 < 4; i5++) {
                if (b) {
                    Test.iFld -= i4;
                    i6 += (i5 * l2);
                    Test.iFld -= 89;
                    Test.iFld = (int) -52.113282;
                } else if (b) {
                    i6 -= i5;
                    l2 -= i6;
                    l2 *= i3;
                } else if (b) {
                    i2 += (((i5 * Test.iFld) + l2) - l2);
                    i6 -= by;
                    for (i7 = 2; i7 > i3; --i7) {
                        Test.lArrFld[i7 - 1] *= Test.iFld;
                        Test.dFld -= i7;
                        Test.iFld -= i4;
                        s -= (short) -40;
                        Test.fFld -= s;
                        iArr[i5] -= (int) 17.210F;
                    }
                    if (i4 != 0) {
                    }
                }
                i6 = i6;
                Test.dFld *= i6;
                Test.iFld += i8;
                i2 >>= i5;
                l2 >>= i7;
                Test.fFld = Test.iFld;
                Test.iFld = (int) -58L;
                for (i9 = 1; i9 < 2; i9++) {
                    i2 = i7;
                    i2 += (((i9 * i2) + Test.iFld) - l1);
                }
            }
        }
        long meth_res = l1 + l2 + s + i1 + i2 + i3 + i4 + i5 + i6 + by + i7 + i8 + (b ? 1 : 0) + i9 + i10 + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public static void vMeth(int i, long l) {
        if (ax$11) {
            try {
                int[] ax$12 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
                int[] ax$13 = { 3, 9, 13 };
                int ax$16 = 0xFFEFAAAA;
                int ax$15 = 0;
                for (int ax$14 = 0; ax$14 < ax$12.length; ax$14++) {
                    ax$12[ax$14] = ax$13[2 * ax$14] + 4;
                    // Increment value of dead cycle may throw exception. Dynamic
                    // BCE takes care of the bounds check though, which enables
                    // removing the ArrayGet after removing the dead cycle.
                    ax$15 += ax$12[ax$16];
                }
            } catch (Throwable ax$17) {
            } finally {
            }
            return;
        }
        int i11 = 3, i12 = -48166, i13 = 11861, i14 = 9, i15 = -175, i16 = 8, i17 = -29233, i18 = 20862, i19 = -2, i20 = -10, iArr1[] = new int[N];
        boolean b1 = false;
        float f = -74.129F;
        FuzzerUtils.init(iArr1, 23811);
        {
            java.io.PrintStream ax$8 = System.out;
            java.io.PrintStream ax$9 = System.err;
            java.io.PrintStream ax$10 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$10);
            System.setErr(ax$10);
            try {
                ax$0 = true;
                for (int ax$6 = 0; ax$6 < 9751; ax$6 += 1) dMeth(2331026572404339909L, -8153604741696772195L);
            } catch (java.lang.Throwable ax$7) {
            } finally {
                ax$0 = false;
            }
            System.setOut(ax$8);
            System.setErr(ax$9);
        }
        dMeth(l, Test.instanceCount);
        i = i;
        i &= 0;
        i = Test.byFld;
        for (i11 = 6; i11 < 215; i11++) {
            Test.dFld -= i11;
            i12 = Test.iFld;
            i13 = 1;
            while (++i13 < 3) {
                Test.iFld = (int) Test.instanceCount;
                i += (i13 + Test.byFld);
                switch((i11 % 1) + 53) {
                    case 53:
                }
                l -= i13;
                i12 += (int) Test.instanceCount;
                for (i14 = 1; i14 < 1; ++i14) {
                    i12 = (int) Test.instanceCount;
                    if (b1)
                        continue;
                    Test.fFld *= 0.319F;
                    i16 ^= (int) Test.instanceCount;
                    try {
                        Test.iFld = (i12 % 29586);
                        iArr1[i14] = (-129 % i14);
                        i15 = (-133 % i);
                    } catch (ArithmeticException a_e) {
                    }
                    Test.fFld -= i15;
                    i = i11;
                    i12 *= Test.iFld;
                }
                try {
                    i12 = (-61702 / i11);
                    iArr1[i13 - 1] = (-11150 / i16);
                    i = (i15 / i14);
                } catch (ArithmeticException a_e) {
                }
                i15 += (-205 + (i13 * i13));
                Test.dFld *= 2.44685;
                i12 = 3;
                l += (((i13 * i17) + i13) - i11);
                try {
                    i17 = (-982065998 / iArr1[i11]);
                    i16 = (i13 % i);
                    iArr1[i13 + 1] = (Test.iFld / iArr1[i13 - 1]);
                } catch (ArithmeticException a_e) {
                }
            }
        }
        for (i18 = 142; 7 < i18; i18--) {
            for (f = 1; f < 4; f++) {
                switch(((i19 >>> 1) % 1) + 127) {
                    case 127:
                        if (b1)
                            break;
                        i >>= i18;
                        Test.instanceCount &= -2;
                        Test.instanceCount = i13;
                        i12 = (int) Test.instanceCount;
                        Test.fFld += f;
                        break;
                }
            }
        }
        vMeth_check_sum += i + l + i11 + i12 + i13 + i14 + i15 + (b1 ? 1 : 0) + i16 + i17 + i18 + i19 + Float.floatToIntBits(f) + i20 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth() {
        int i21 = 191, i22 = -61, i23 = 185, i24 = 164, i25 = 1, i26 = 4, i27 = 14, i28 = -11818, i29 = 0;
        float f1 = 2.14F;
        boolean b2 = false;
        {
            java.io.PrintStream ax$20 = System.out;
            java.io.PrintStream ax$21 = System.err;
            java.io.PrintStream ax$22 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$22);
            System.setErr(ax$22);
            try {
                ax$11 = true;
                for (int ax$18 = 0; ax$18 < 7993; ax$18 += 1) vMeth(-774783109, 3749831462273070537L);
            } catch (java.lang.Throwable ax$19) {
            } finally {
                ax$11 = false;
            }
            System.setOut(ax$20);
            System.setErr(ax$21);
        }
        vMeth(Test.iFld, Test.instanceCount);
        for (i21 = 245; i21 > 2; i21 -= 2) {
            Test.iFld -= -229;
            i22 += (i21 - Test.fFld);
            Test.instanceCount *= Test.instanceCount;
        }
        i23 = 1;
        do {
            Test.fFld += f1;
            for (i24 = 1; i24 < 2; ++i24) {
                if (i25 != 0) {
                }
                i26 = 1;
                do {
                    i22 = i22;
                    i22 += (((i26 * Test.fFld) + i24) - i24);
                    Test.byFld = (byte) Test.iFld;
                    Test.iArrFld[i24 - 1] *= Test.iFld;
                    Test.iFld += (int) Test.dFld;
                    Test.fFld = (float) Test.dFld;
                    Test.iArrFld[i26] -= i23;
                    i25 += (i26 * i26);
                } while (++i26 < 2);
                i25 = i22;
                Test.iArrFld[i24 + 1] /= (int) (Test.instanceCount | 1);
                i27 = 2;
                do {
                    Test.instanceCount *= (long) 1.48648;
                    Test.iFld = -12;
                    i22 += (((i27 * Test.instanceCount) + i24) - i27);
                    Test.byFld = Test.byFld;
                    if (i24 != 0) {
                    }
                    Test.iArrFld[i23 - 1] += 7;
                } while (--i27 > 0);
                Test.instanceCount /= 122;
                if (b2)
                    break;
                Test.fFld = -239;
                Test.fFld *= (float) Test.dFld;
                i25 -= i25;
                Test.iFld -= Test.iFld;
                for (i28 = i24; i28 < 2; i28++) {
                    Test.iArrFld[i23 - 1] |= (int) Test.instanceCount;
                    Test.dFld = 9;
                    i22 = Test.byFld;
                }
            }
        } while (++i23 < 254);
        long meth_res = i21 + i22 + i23 + Float.floatToIntBits(f1) + i24 + i25 + i26 + i27 + (b2 ? 1 : 0) + i28 + i29;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        short s1 = -24760, sArr[] = new short[N];
        int i30 = 97, i31 = -14, i32 = 10, i33 = 33183, i34 = -196, i35 = 29174;
        boolean b3 = true;
        long[][] lArr = new long[N][N];
        FuzzerUtils.init(lArr, 743670970187111669L);
        FuzzerUtils.init(sArr, (short) -8001);
        Test.iFld += (int) lArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N];
        Test.fFld += (iMeth() * Test.iFld);
        Test.instanceCount += (long) Test.dFld;
        Test.iFld = (int) Test.instanceCount;
        switch((((Test.iFld >>> 1) % 2) * 5) + 90) {
            case 98:
                Test.fFld = Test.iFld;
                s1 *= (short) Test.iFld;
                for (i30 = 1; 80 > i30; ++i30) {
                    i31 = i31;
                    Test.iFld = i31;
                    for (i32 = 2; i32 < 64; ++i32) {
                        switch(((i32 % 1) * 5) + 34) {
                            case 38:
                                i33 >>= 55670;
                                switch(((i30 >>> 1) % 2) + 44) {
                                    case 44:
                                        Test.iFld += (int) Test.dFld;
                                        for (i34 = 1; i34 < 2; ++i34) {
                                            bArrFld[i32 + 1] = Test.bFld;
                                            i33 *= -1229;
                                            switch((i30 % 10) + 55) {
                                                case 55:
                                                    i33 += i34;
                                                    switch(((i32 % 1) * 5) + 76) {
                                                        case 81:
                                                            Test.dFld = i33;
                                                            Test.dFld = Test.fFld;
                                                            switch((((i34 >>> 1) % 1) * 5) + 15) {
                                                                case 17:
                                                                    i35 = Test.iFld;
                                                                    i33 = 6;
                                                                    Test.iFld = i31;
                                                                    Test.instanceCount = i31;
                                                                    Test.iArrFld[i30 - 1] += (int) Test.dFld;
                                                                    break;
                                                                default:
                                                                    i31 *= i33;
                                                                    Test.iFld += i34;
                                                                    if (b3)
                                                                        break;
                                                                    Test.instanceCount = 7;
                                                                    i35 -= (int) Test.fFld;
                                                                    i33 *= Test.byFld;
                                                                    Test.byFld *= (byte) Test.fFld;
                                                                    i31 = i31;
                                                                    i31 += (((i34 * i31) + Test.fFld) - i34);
                                                                    sArr[i34] = (short) i30;
                                                                    i35 = 92;
                                                                    try {
                                                                        Test.iArrFld[i30 + 1] = (Test.iArrFld[i32 - 1] / i32);
                                                                        Test.iFld = (29249 / Test.iArrFld[i34]);
                                                                        i31 = (18668 % i35);
                                                                    } catch (ArithmeticException a_e) {
                                                                    }
                                                                    s1 >>= (short) Test.instanceCount;
                                                                    Test.fFld -= -42666L;
                                                                    i31 += (i34 | Test.instanceCount);
                                                            }
                                                            i35 <<= i33;
                                                            i33 -= (int) Test.fFld;
                                                            i33 *= i31;
                                                            i35 = i30;
                                                            try {
                                                                i35 = (i34 / 210);
                                                                i33 = (Test.iArrFld[i30] / 59);
                                                                Test.iFld = (-912423959 / i34);
                                                            } catch (ArithmeticException a_e) {
                                                            }
                                                            if (Test.bFld)
                                                                break;
                                                            i31 += (int) Test.instanceCount;
                                                            i31 += -11;
                                                            i35 -= i30;
                                                            i33 += (i34 - Test.instanceCount);
                                                            s1 += (short) Test.iFld;
                                                    }
                                                    if (false) {
                                                        if (Test.bFld)
                                                            continue;
                                                        Test.iArrFld[i32 - 1] >>>= (int) Test.instanceCount;
                                                    } else if (b3) {
                                                        Test.bFld = b3;
                                                        Test.iFld = 0;
                                                        i31 = i34;
                                                        try {
                                                            i31 = (202 / i32);
                                                            Test.iArrFld[i34] = (-39913 / i33);
                                                            i33 = (Test.iArrFld[i30 + 1] % Test.iArrFld[i32 + 1]);
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                        Test.iFld = (int) Test.instanceCount;
                                                        Test.iArrFld[i30 - 1] = i32;
                                                        Test.instanceCount = i34;
                                                        i33 = i30;
                                                        i33 += (i34 - Test.instanceCount);
                                                        switch(((i30 % 8) * 5) + 74) {
                                                            case 83:
                                                                Test.instanceCount = i31;
                                                                Test.fFld *= i31;
                                                                i35 = (int) Test.fFld;
                                                                Test.iFld = (int) -8317236662667762270L;
                                                                Test.instanceCount += i35;
                                                                Test.instanceCount += (long) 79.29534;
                                                                break;
                                                            case 90:
                                                                if (Test.bFld)
                                                                    break;
                                                            case 108:
                                                                Test.iArrFld = Test.iArrFld;
                                                                break;
                                                            case 91:
                                                                Test.byFld <<= (byte) i32;
                                                            case 94:
                                                            case 92:
                                                            case 109:
                                                                Test.dFld -= i32;
                                                                break;
                                                            case 112:
                                                                Test.instanceCount <<= i33;
                                                                break;
                                                            default:
                                                                Test.instanceCount += i31;
                                                        }
                                                    } else if (b3) {
                                                        i33 &= -10;
                                                    } else {
                                                        Test.instanceCount *= Test.iFld;
                                                    }
                                                    break;
                                                case 56:
                                                    if (b3)
                                                        break;
                                                    break;
                                                case 57:
                                                    Test.fFld = Test.iFld;
                                                case 58:
                                                    i31 += i30;
                                                    break;
                                                case 59:
                                                    Test.iArrFld = Test.iArrFld;
                                                    break;
                                                case 60:
                                                    Test.iFld += (int) Test.dFld;
                                                case 61:
                                                    Test.iFld = i34;
                                                    break;
                                                case 62:
                                                    i35 -= (int) Test.instanceCount;
                                                    break;
                                                case 63:
                                                    Test.fFld -= i33;
                                                    break;
                                                case 64:
                                                default:
                                                    i33 += (int) (2.859F + (i34 * i34));
                                            }
                                        }
                                        break;
                                    case 45:
                                        Test.iFld = i33;
                                        break;
                                    default:
                                        i35 <<= s1;
                                }
                                break;
                            default:
                                Test.iFld += i35;
                        }
                    }
                }
            case 93:
                i35 = (int) 227L;
                break;
            default:
        }
        FuzzerUtils.out.println("s1 i30 i31 = " + s1 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 b3 lArr = " + i35 + "," + (b3 ? 1 : 0) + "," + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld Test.byFld Test.bFld = " + Double.doubleToLongBits(Test.dFld) + "," + Test.byFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld bArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(bArrFld));
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$11 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  dMeth ->  dMeth vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
