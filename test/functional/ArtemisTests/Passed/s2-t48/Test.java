// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.concurrent.atomic.AtomicInteger;
import java.security.KeyException;
import java.security.spec.InvalidKeySpecException;
import java.security.SignatureException;
import java.security.cert.CertificateParsingException;
import java.security.ProviderException;
import java.security.KeyStoreException;
import java.security.KeyManagementException;
import java.security.cert.CertificateException;
import java.security.InvalidAlgorithmParameterException;
import java.security.GeneralSecurityException;
import java.security.NoSuchAlgorithmException;
import java.security.DigestException;
import java.security.InvalidKeyException;
import java.security.cert.CRLException;
import java.security.cert.CertificateEncodingException;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 56732L;

    public volatile boolean bFld = true;

    public int iFld = -7;

    public static volatile byte byFld = -82;

    public static int[] iArrFld = new int[N];

    public volatile double[][] dArrFld = new double[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -3);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(long l) {
        int i5 = 156, i6 = 134, i7 = -10, i8 = -254, i9 = 10, i10 = 57, i11 = 8, i12 = 16718, iArr1[] = new int[N];
        float f = -123.310F, f1 = -2.374F;
        double d = 122.91725;
        short s = 6813;
        byte by = -42;
        boolean b = true;
        FuzzerUtils.init(iArr1, 14);
        l = -59678;
        iArr1[(i5 >>> 1) % N] = i5;
        for (i6 = 4; i6 < 144; ++i6) {
            i7 += (i6 * f);
            for (f1 = i6; 4 > f1; f1++) {
                f = 33773;
                i9 = 1;
                do {
                    i7 += (((i9 * f) + i8) - i7);
                    i7 |= i5;
                } while (++i9 < 1);
                switch((int) (((f1 % 8) * 5) + 31)) {
                    case 65:
                        for (d = 1; d < 1; ++d) {
                            i8 += (int) (-941344961710918618L + (d * d));
                            iArr1[(i7 >>> 1) % N] -= -62694;
                        }
                        l += (long) (f1 * f1);
                        i10 ^= i5;
                        s += (short) f1;
                        l += (long) (f1 * f1);
                        f += (((f1 * l) + i7) - by);
                        for (i11 = 1; i11 < 1; i11++) {
                            i7 = i12;
                            i7 += i7;
                            by >>= (byte) i11;
                            l &= 2080616548L;
                            i8 = i12;
                            i7 += (i11 ^ l);
                            if (b)
                                continue;
                            i12 = (int) Test.instanceCount;
                            iArr1[i6 - 1] >>= i10;
                            i7 *= i9;
                            by += (byte) (-107 + (i11 * i11));
                            i12 = i7;
                            i12 = i8;
                            i10 *= i7;
                            switch(((i7 >>> 1) % 5) + 77) {
                                case 77:
                                    Test.instanceCount = (long) f1;
                                    i12 = i11;
                                    if (i12 != 0) {
                                    }
                                    break;
                                case 78:
                                    iArr1[(int) (f1 - 1)] += (int) Test.instanceCount;
                                    break;
                                case 79:
                                    i10 = i8;
                                case 80:
                                    i12 = s;
                                    break;
                                case 81:
                                    i12 += (i11 | by);
                            }
                        }
                        break;
                    case 68:
                        i8 <<= i10;
                        break;
                    case 33:
                        i10 = i6;
                        break;
                    case 44:
                        f = i8;
                        break;
                    case 39:
                        l += (long) f1;
                        break;
                    case 62:
                        i7 += (-171 + (f1 * f1));
                        break;
                    case 52:
                        i10 = i10;
                        break;
                    case 66:
                        i5 = s;
                    default:
                        i12 = 41;
                }
            }
        }
        long meth_res = l + i5 + i6 + i7 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i8 + i9 + Double.doubleToLongBits(d) + i10 + s + by + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void vMeth1() {
        int i3 = 17287, i4 = 16, i13 = 9, i14 = -13251, i15 = 20920, i16 = 13242, i17 = -4, i18 = 7, i19 = 152, iArr2[] = new int[N];
        double d1 = -2.65106, d2 = 68.3475;
        byte by1 = -17;
        float f2 = 0.767F;
        boolean b1 = false;
        short s1 = 24143;
        long[][] lArr = new long[N][N];
        FuzzerUtils.init(iArr2, -40911);
        FuzzerUtils.init(lArr, 216L);
        for (i3 = 10; i3 < 239; i3++) {
            i4 &= (int) (--Test.instanceCount);
            switch((i3 % 3) + 118) {
                case 118:
                    i4 >>= (int) (Integer.reverseBytes(iMeth(Test.instanceCount)) ^ -5L);
                    for (d1 = i3; d1 < 3; d1++) {
                        by1 = (byte) Test.instanceCount;
                        i13 -= i13;
                        for (i14 = 1; i14 < 1; i14++) {
                            f2 += i3;
                        }
                        switch((((2 >>> 1) % 5) * 5) + 83) {
                            case 98:
                                if (b1)
                                    break;
                                for (i16 = 1; i16 < 1; i16++) {
                                    b1 = b1;
                                    by1 -= (byte) i16;
                                    Test.instanceCount -= i14;
                                    try {
                                        i17 = (Test.iArrFld[i16] / -46623);
                                        i15 = (Test.iArrFld[i3 - 1] % i14);
                                        i13 = (Test.iArrFld[i16] / i13);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i17 = by1;
                                    d2 -= Test.instanceCount;
                                    i15 += (i16 ^ Test.instanceCount);
                                }
                                i15 += i3;
                                i13 *= i16;
                                for (i18 = 1; i18 < 1; ++i18) {
                                    i15 += s1;
                                    iArr2[(int) (d1)] -= (int) Test.instanceCount;
                                    by1 = (byte) d2;
                                    i4 = by1;
                                    switch((int) ((d1 % 8) + 54)) {
                                        case 54:
                                            lArr[(int) (d1)][(int) (d1 - 1)] -= (long) d1;
                                            Test.iArrFld[(int) (d1)] >>= -11;
                                            i4 >>= -3241;
                                            lArr[(i3 >>> 1) % N][(int) (d1 + 1)] *= 28693;
                                            switch((i3 % 1) + 71) {
                                                case 71:
                                                    i13 *= by1;
                                                    i4 += (36104 + (i18 * i18));
                                                    f2 = i19;
                                                    if (true)
                                                        continue;
                                                    {
                                                        java.io.PrintStream ax$7 = System.out;
                                                        java.io.PrintStream ax$8 = System.err;
                                                        java.io.PrintStream ax$9 = new java.io.PrintStream(new java.io.OutputStream() {

                                                            @Override
                                                            public void write(int b) throws java.io.IOException {
                                                                // DO NOTHING: DISCARD ALL OUTPUTS
                                                            }
                                                        });
                                                        System.setOut(ax$9);
                                                        System.setErr(ax$9);
                                                        try {
                                                            for (int ax$5 = -2013; ax$5 < 6454; ax$5 += 1) {
                                                                try {
                                                                    int ax$2 = 0xFFFF0001;
                                                                    java.util.concurrent.atomic.AtomicInteger[] ax$1 = new java.util.concurrent.atomic.AtomicInteger[1432];
                                                                    java.util.concurrent.atomic.AtomicInteger[] ax$0 = new java.util.concurrent.atomic.AtomicInteger[1771];
                                                                    // Initialize counters for which call site gets invoked
                                                                    for (int ax$3 = 0; ax$3 < ax$2; ++ax$3) {
                                                                        ax$1[ax$3] = new AtomicInteger(0);
                                                                        ax$0[ax$3] = new AtomicInteger(0);
                                                                    }
                                                                } catch (Throwable ax$4) {
                                                                } finally {
                                                                }
                                                            }
                                                        } catch (Throwable ax$6) {
                                                        }
                                                        System.setOut(ax$7);
                                                        System.setErr(ax$8);
                                                    }
                                                    d2 *= Test.instanceCount;
                                            }
                                            break;
                                        case 55:
                                            f2 *= -45406;
                                            break;
                                        case 56:
                                            Test.instanceCount <<= i13;
                                            break;
                                        case 57:
                                            i4 = (int) Test.instanceCount;
                                            break;
                                        case 58:
                                            s1 += (short) i16;
                                            break;
                                        case 59:
                                            i4 = by1;
                                        case 60:
                                            Test.iArrFld[i3 - 1] -= i19;
                                            break;
                                        case 61:
                                            iArr2[i3] += i3;
                                            break;
                                    }
                                }
                                break;
                            case 88:
                                i17 *= (int) Test.instanceCount;
                                break;
                            case 91:
                                by1 *= (byte) Test.instanceCount;
                                break;
                            case 85:
                                by1 += (byte) i3;
                                break;
                            case 106:
                                i19 += (int) d1;
                                break;
                        }
                    }
                    break;
                case 119:
                    f2 = i3;
                    break;
                case 120:
                    iArr2[i3 + 1] = i18;
                    break;
            }
        }
        vMeth1_check_sum += i3 + i4 + Double.doubleToLongBits(d1) + i13 + by1 + i14 + i15 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + i16 + i17 + Double.doubleToLongBits(d2) + i18 + i19 + s1 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(int i) {
        if (ax$19) {
            try {
                java.lang.Exception ax$34 = new Exception();
                java.lang.String ax$25 = "4.905438185545787E+17";
                SecurityException ax$35 = new SecurityException(ax$34);
                if (!ax$35.getCause().equals(ax$34)) {
                }
                ax$35 = new SecurityException(ax$25, ax$34);
                if (!ax$35.getMessage().equals(ax$25) || !ax$35.getCause().equals(ax$34)) {
                }
                DigestException ax$26 = new DigestException(ax$34);
                if (!ax$26.getCause().equals(ax$34)) {
                }
                ax$26 = new DigestException(ax$25, ax$34);
                if (!ax$26.getMessage().equals(ax$25) || !ax$26.getCause().equals(ax$34)) {
                }
                GeneralSecurityException ax$37 = new GeneralSecurityException(ax$34);
                if (!ax$37.getCause().equals(ax$34)) {
                }
                ax$37 = new GeneralSecurityException(ax$25, ax$34);
                if (!ax$37.getMessage().equals(ax$25) || !ax$37.getCause().equals(ax$34)) {
                }
                InvalidAlgorithmParameterException ax$41 = new InvalidAlgorithmParameterException(ax$34);
                if (!ax$41.getCause().equals(ax$34)) {
                }
                ax$41 = new InvalidAlgorithmParameterException(ax$25, ax$34);
                if (!ax$41.getMessage().equals(ax$25) || !ax$41.getCause().equals(ax$34)) {
                }
                InvalidKeyException ax$28 = new InvalidKeyException(ax$34);
                if (!ax$28.getCause().equals(ax$34)) {
                }
                ax$28 = new InvalidKeyException(ax$25, ax$34);
                if (!ax$28.getMessage().equals(ax$25) || !ax$28.getCause().equals(ax$34)) {
                }
                InvalidKeySpecException ax$32 = new InvalidKeySpecException(ax$34);
                if (!ax$32.getCause().equals(ax$34)) {
                }
                ax$32 = new InvalidKeySpecException(ax$25, ax$34);
                if (!ax$32.getMessage().equals(ax$25) || !ax$32.getCause().equals(ax$34)) {
                }
                KeyException ax$39 = new KeyException(ax$34);
                if (!ax$39.getCause().equals(ax$34)) {
                }
                ax$39 = new KeyException(ax$25, ax$34);
                if (!ax$39.getMessage().equals(ax$25) || !ax$39.getCause().equals(ax$34)) {
                }
                KeyManagementException ax$29 = new KeyManagementException(ax$34);
                if (!ax$29.getCause().equals(ax$34)) {
                }
                ax$29 = new KeyManagementException(ax$25, ax$34);
                if (!ax$29.getMessage().equals(ax$25) || !ax$29.getCause().equals(ax$34)) {
                }
                KeyStoreException ax$42 = new KeyStoreException(ax$34);
                if (!ax$42.getCause().equals(ax$34)) {
                }
                ax$42 = new KeyStoreException(ax$25, ax$34);
                if (!ax$42.getMessage().equals(ax$25) || !ax$42.getCause().equals(ax$34)) {
                }
                NoSuchAlgorithmException ax$40 = new NoSuchAlgorithmException(ax$34);
                if (!ax$40.getCause().equals(ax$34)) {
                }
                ax$40 = new NoSuchAlgorithmException(ax$25, ax$34);
                if (!ax$40.getMessage().equals(ax$25) || !ax$40.getCause().equals(ax$34)) {
                }
                ProviderException ax$36 = new ProviderException(ax$34);
                if (!ax$36.getCause().equals(ax$34)) {
                }
                ax$36 = new ProviderException(ax$25, ax$34);
                if (!ax$36.getMessage().equals(ax$25) || !ax$36.getCause().equals(ax$34)) {
                }
                SignatureException ax$27 = new SignatureException(ax$34);
                if (!ax$27.getCause().equals(ax$34)) {
                }
                ax$27 = new SignatureException(ax$25, ax$34);
                if (!ax$27.getMessage().equals(ax$25) || !ax$27.getCause().equals(ax$34)) {
                }
                CRLException ax$33 = new CRLException(ax$34);
                if (!ax$33.getCause().equals(ax$34)) {
                }
                ax$33 = new CRLException(ax$25, ax$34);
                if (!ax$33.getMessage().equals(ax$25) || !ax$33.getCause().equals(ax$34)) {
                }
                CertificateException ax$30 = new CertificateException(ax$34);
                if (!ax$30.getCause().equals(ax$34)) {
                }
                ax$30 = new CertificateException(ax$25, ax$34);
                if (!ax$30.getMessage().equals(ax$25) || !ax$30.getCause().equals(ax$34)) {
                }
                CertificateParsingException ax$38 = new CertificateParsingException(ax$34);
                if (!ax$38.getCause().equals(ax$34)) {
                }
                ax$38 = new CertificateParsingException(ax$25, ax$34);
                if (!ax$38.getMessage().equals(ax$25) || !ax$38.getCause().equals(ax$34)) {
                }
                CertificateEncodingException ax$31 = new CertificateEncodingException(ax$34);
                if (!ax$31.getCause().equals(ax$34)) {
                }
                ax$31 = new CertificateEncodingException(ax$25, ax$34);
                if (!ax$31.getMessage().equals(ax$25) || !ax$31.getCause().equals(ax$34)) {
                }
            } catch (Throwable ax$43) {
            } finally {
            }
            return;
        }
        int i1 = -60738, i2 = -5, i20 = -5, i21 = 10, i22 = -10, i23 = 6, i24 = -11, i25 = -1, iArr[] = new int[N];
        float f3 = -1.890F, f4 = 74.720F, fArr[] = new float[N];
        double d3 = 1.29815;
        short s2 = -9395;
        byte by2 = -116;
        boolean[] bArr = new boolean[N];
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr, 218);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr1, -120L);
        FuzzerUtils.init(fArr, 2.489F);
        for (i1 = 12; i1 < 198; i1++) {
            iArr[i1 - 1] >>= (int) (-Math.abs(Test.instanceCount));
            vMeth1();
            switch((i1 % 8) + 113) {
                case 113:
                    dArrFld[i1][i1] -= i1;
                    for (i20 = 1; i20 < 3; i20++) {
                        f3 = i2;
                        if (bFld)
                            break;
                        iArr[i1 - 1] <<= (int) Test.instanceCount;
                        i22 = 1;
                        do {
                            i2 -= (int) f3;
                            i21 = i22;
                            i += (int) Test.instanceCount;
                            try {
                                i2 = (i20 % -34771);
                                Test.iArrFld[i20 + 1] = (i21 % i21);
                                i21 = (i22 / i);
                            } catch (ArithmeticException a_e) {
                            }
                            if (i20 != 0) {
                                vMeth_check_sum += i + i1 + i2 + i20 + i21 + Float.floatToIntBits(f3) + i22 + Double.doubleToLongBits(d3) + s2 + i23 + i24 + by2 + Float.floatToIntBits(f4) + i25 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                return;
                            }
                            d3 = i1;
                            d3 /= (i20 | 1);
                            i2 = s2;
                            if (i2 != 0) {
                                vMeth_check_sum += i + i1 + i2 + i20 + i21 + Float.floatToIntBits(f3) + i22 + Double.doubleToLongBits(d3) + s2 + i23 + i24 + by2 + Float.floatToIntBits(f4) + i25 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                return;
                            }
                            i2 += i20;
                        } while (++i22 < 2);
                        dArrFld[i20][i20] = -8L;
                        d3 = f3;
                        i &= (int) Test.instanceCount;
                        for (i23 = 1; 2 > i23; i23 += 3) {
                            Test.instanceCount += i23;
                            bArr[(i2 >>> 1) % N] = bFld;
                            i24 -= by2;
                            if (false)
                                break;
                        }
                        switch(((i20 % 4) * 5) + 63) {
                            case 66:
                                for (f4 = 1; f4 < 2; ++f4) {
                                    iArr[i20 + 1] += i1;
                                }
                                Test.instanceCount -= (long) -2.938F;
                                f3 += i22;
                                d3 -= i20;
                                try {
                                    i = (i23 % i);
                                    i21 = (i20 / i);
                                    i = (i1 % 144);
                                } catch (ArithmeticException a_e) {
                                }
                                i += i22;
                                i24 -= i22;
                                break;
                            case 76:
                            case 71:
                            case 74:
                                d3 = 7;
                                break;
                            default:
                                lArr1 = FuzzerUtils.long1array(N, (long) -924864836622916785L);
                        }
                    }
                case 114:
                    i24 = i20;
                    break;
                case 115:
                    lArr1[i1 + 1] = i22;
                    break;
                case 116:
                    Test.instanceCount += (i1 * i1);
                case 117:
                    if (i1 != 0) {
                        vMeth_check_sum += i + i1 + i2 + i20 + i21 + Float.floatToIntBits(f3) + i22 + Double.doubleToLongBits(d3) + s2 + i23 + i24 + by2 + Float.floatToIntBits(f4) + i25 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    break;
                case 118:
                    i25 &= s2;
                    break;
                case 119:
                    if (i20 != 0) {
                        vMeth_check_sum += i + i1 + i2 + i20 + i21 + Float.floatToIntBits(f3) + i22 + Double.doubleToLongBits(d3) + s2 + i23 + i24 + by2 + Float.floatToIntBits(f4) + i25 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                case 120:
                    i24 += (i1 ^ i24);
            }
        }
        vMeth_check_sum += i + i1 + i2 + i20 + i21 + Float.floatToIntBits(f3) + i22 + Double.doubleToLongBits(d3) + s2 + i23 + i24 + by2 + Float.floatToIntBits(f4) + i25 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {
        short s3 = 3963;
        int i26 = 5, i27 = -41792, i28 = -62027, i29 = 115, i30 = 26, i31 = 0, i32 = -7333, i33 = 12, i34 = 61666;
        float f6 = -21.56F, fArr1[] = new float[N];
        double d4 = -125.127850;
        boolean[] bArr1 = new boolean[N];
        byte[] byArr = new byte[N];
        long[] lArr2 = new long[N];
        FuzzerUtils.init(fArr1, 2.1008F);
        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(byArr, (byte) -102);
        FuzzerUtils.init(lArr2, 810144263L);
        {
            java.io.PrintStream ax$46 = System.out;
            java.io.PrintStream ax$47 = System.err;
            java.io.PrintStream ax$48 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$48);
            System.setErr(ax$48);
            try {
                ax$19 = true;
                for (int ax$44 = 0; ax$44 < 5774; ax$44 += 1) vMeth(-1567438869);
            } catch (java.lang.Throwable ax$45) {
            } finally {
                ax$19 = false;
            }
            System.setOut(ax$46);
            System.setErr(ax$47);
        }
        vMeth(iFld);
        s3 = (short) iFld;
        iFld = iFld;
        iFld = 44578;
        Test.instanceCount = iFld;
        for (i26 = 12; i26 < 222; ++i26) {
            for (i28 = 24; i28 > 1; i28 -= 3) {
                i27 += (i28 * f6);
                i27 *= (int) Test.instanceCount;
                iFld = (int) Test.instanceCount;
                i27 = iFld;
                if (bFld) {
                    Test.instanceCount /= (i28 | 1);
                    for (i30 = 4; i30 > 1; i30 -= 3) {
                        i31 = i29;
                        d4 += i26;
                        Test.instanceCount >>= i29;
                        Test.instanceCount += 57555;
                        i31 += i27;
                        i27 = iFld;
                        i27 -= i31;
                        s3 = (short) Test.instanceCount;
                        i31 += i30;
                        try {
                            Test.iArrFld[i26 + 1] = (i27 % i26);
                            i27 = (Test.iArrFld[i28] / i30);
                            i31 = (i28 / i29);
                        } catch (ArithmeticException a_e) {
                        }
                        i29 = (int) f6;
                        d4 += -130;
                    }
                    bFld = bFld;
                    i29 /= (int) ((long) (d4) | 1);
                    i29 = Test.byFld;
                    f6 += i28;
                    i27 -= i30;
                    for (i32 = 1; i32 < 4; i32 += 2) {
                        fArr1[i28] -= s3;
                        Test.instanceCount += (((i32 * i29) + f6) - i33);
                        iFld += i32;
                        fArr1[i32] += f6;
                        bArr1[i32] = bFld;
                        i33 *= 4430;
                        if (bFld) {
                            switch((i28 % 2) + 63) {
                                case 63:
                                    byArr[i28 - 1] -= (byte) i32;
                                    fArr1[i28 + 1] += (float) d4;
                                    i29 += (-31812 + (i32 * i32));
                                    if (true) {
                                        i29 = (int) 5316016478888279232L;
                                        iFld |= (int) 7997183295962847468L;
                                        switch((i32 % 3) + 8) {
                                            case 8:
                                                switch((i28 % 7) + 76) {
                                                    case 76:
                                                    case 77:
                                                        try {
                                                            i33 = (i33 / -151);
                                                            i29 = (Test.iArrFld[i32 + 1] / 139930523);
                                                            i29 = (i34 % 20072);
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                        f6 += (((i32 * i31) + f6) - Test.instanceCount);
                                                        if (bFld)
                                                            break;
                                                        i31 = 83;
                                                        Test.instanceCount += (i32 ^ i26);
                                                        Test.iArrFld[i26] = i33;
                                                        i27 = (int) d4;
                                                        Test.instanceCount = i28;
                                                    case 78:
                                                        i34 = i30;
                                                        break;
                                                    case 79:
                                                        iFld += i34;
                                                        iFld += (i32 * i32);
                                                        Test.instanceCount &= 9;
                                                        i29 += i26;
                                                        Test.iArrFld[i26] |= -3;
                                                        switch(((i32 % 3) * 5) + 64) {
                                                            case 75:
                                                                if (bFld) {
                                                                    i31 /= (int) 140L;
                                                                    Test.instanceCount = i26;
                                                                    iFld = s3;
                                                                    i33 = i33;
                                                                    i34 += (i32 | Test.instanceCount);
                                                                    i29 += i33;
                                                                } else {
                                                                    s3 += (short) i28;
                                                                    switch(((i26 % 1) * 5) + 115) {
                                                                        case 116:
                                                                            i33 -= i27;
                                                                            Test.iArrFld[i32 + 1] += iFld;
                                                                            s3 = (short) i31;
                                                                            break;
                                                                        default:
                                                                            i31 += (i32 ^ Test.instanceCount);
                                                                    }
                                                                }
                                                            case 79:
                                                            case 77:
                                                                d4 = f6;
                                                                break;
                                                            default:
                                                                if (bFld)
                                                                    break;
                                                        }
                                                        break;
                                                    case 80:
                                                        f6 += (((i32 * f6) + Test.instanceCount) - iFld);
                                                        break;
                                                    case 81:
                                                        Test.instanceCount <<= Test.instanceCount;
                                                        break;
                                                    case 82:
                                                        iFld = (int) f6;
                                                        break;
                                                    default:
                                                        fArr1[(i29 >>> 1) % N] -= i33;
                                                }
                                                break;
                                            case 9:
                                                lArr2[i32 + 1] = Test.instanceCount;
                                                break;
                                            case 10:
                                                f6 = Test.instanceCount;
                                        }
                                    } else {
                                        f6 += -58953;
                                    }
                                    break;
                                case 64:
                                    i34 >>= i29;
                                    break;
                                default:
                                    try {
                                        i29 = (i32 / i33);
                                        i33 = (iFld % iFld);
                                        i27 = (i27 % -31);
                                    } catch (ArithmeticException a_e) {
                                    }
                            }
                        } else if (bFld) {
                            iFld = i31;
                        }
                    }
                }
            }
            {
                java.io.PrintStream ax$16 = System.out;
                java.io.PrintStream ax$17 = System.err;
                java.io.PrintStream ax$18 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$18);
                System.setErr(ax$18);
                try {
                    for (int ax$14 = -3005; ax$14 < 6948; ax$14 += 1) {
                        try {
                            boolean ax$12 = true;
                            boolean[] ax$11 = new boolean[576];
                            for (int ax$10 = 0; ax$10 < ax$11.length; ax$10++) {
                                ax$11[ax$10] = ax$12;
                                if (ax$10 == 10)
                                    ax$12 = !ax$12;
                            }
                        } catch (Throwable ax$13) {
                        } finally {
                        }
                    }
                } catch (Throwable ax$15) {
                }
                System.setOut(ax$16);
                System.setErr(ax$17);
            }
        }
        FuzzerUtils.out.println("s3 i26 i27 = " + s3 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 f6 = " + i28 + "," + i29 + "," + Float.floatToIntBits(f6));
        FuzzerUtils.out.println("i30 i31 d4 = " + i30 + "," + i31 + "," + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("fArr1 bArr1 byArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," + FuzzerUtils.checkSum(bArr1) + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("lArr2 = " + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("Test.instanceCount bFld iFld = " + Test.instanceCount + "," + (bFld ? 1 : 0) + "," + iFld);
        FuzzerUtils.out.println("Test.byFld Test.iArrFld dArrFld = " + Test.byFld + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$49) {
            try {
                boolean ax$50 = false;
                if (ax$50) {
                } else {
                }
            } catch (Throwable ax$51) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$19 = false;

    private static Boolean ax$49 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
