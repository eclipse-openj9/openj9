// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -3065821843L;

    public static volatile float fFld = 94.887F;

    public static short sFld = 30695;

    public static byte byFld = -65;

    public long lFld = -1361928626L;

    public static double[] dArrFld = new double[N];

    public static int[][] iArrFld = new int[N][N];

    public static long[][] lArrFld = new long[N][N];

    public short[] sArrFld = new short[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.130965);
        FuzzerUtils.init(Test.iArrFld, -5);
        FuzzerUtils.init(Test.lArrFld, -180L);
    }

    public static long vMeth_check_sum = 0;

    public static long bMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, int i8) {
        int i9 = -89, i10 = 65420, i11 = -51020, i12 = 10, i13 = 4, i14 = 18228;
        boolean b1 = false, bArr[] = new boolean[N];
        double d2 = 1.20874;
        byte by = 93;
        FuzzerUtils.init(bArr, true);
        Test.fFld += 192;
        if (b1) {
            for (i9 = 4; i9 < 101; ++i9) {
                if (b1)
                    break;
                for (i11 = 1; 6 > i11; i11++) {
                    Test.instanceCount += i11;
                    Test.instanceCount = (long) d2;
                    b1 = false;
                    i12 -= i7;
                    for (i13 = 1; i13 < 2; i13++) {
                        switch(((-35292 >>> 1) % 4) + 38) {
                            case 38:
                                i12 &= -12;
                                if (b1)
                                    break;
                                i14 = -20;
                                bArr = bArr;
                                break;
                            case 39:
                                Test.instanceCount += Test.instanceCount;
                                i10 -= i10;
                                i7 *= i8;
                                i10 += (int) (-3447106861L + (i13 * i13));
                                switch((i11 % 2) + 108) {
                                    case 108:
                                    case 109:
                                        Test.fFld = Test.sFld;
                                        by += (byte) i7;
                                        Test.fFld /= (i13 | 1);
                                        Test.sFld <<= (short) -82;
                                        i7 += (i13 | Test.instanceCount);
                                        switch(((i7 >>> 1) % 1) + 65) {
                                            case 65:
                                                i7 = i9;
                                                by += (byte) i7;
                                                Test.instanceCount -= Test.sFld;
                                                if (b1) {
                                                    Test.instanceCount += (((i13 * by) + i7) - i9);
                                                    i12 += (i13 ^ Test.instanceCount);
                                                    i7 >>= (int) 6255L;
                                                    i14 &= (int) Test.instanceCount;
                                                    i14 |= i10;
                                                    if (b1)
                                                        break;
                                                    i7 *= i9;
                                                } else {
                                                    i7 = (int) Test.fFld;
                                                }
                                                break;
                                            default:
                                                d2 -= i13;
                                        }
                                        break;
                                }
                            case 40:
                                i7 += i13;
                                break;
                            case 41:
                                Test.instanceCount += (i13 * by);
                                break;
                            default:
                                i10 -= -12;
                        }
                    }
                }
                {
                    java.io.PrintStream ax$4 = System.out;
                    java.io.PrintStream ax$5 = System.err;
                    java.io.PrintStream ax$6 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$6);
                    System.setErr(ax$6);
                    try {
                        for (int ax$2 = -2741; ax$2 < 2481; ax$2 += 1) {
                            long ax$0 = vMeth1_check_sum;
                            try {
                                vMeth1_check_sum /= (long) (1E100 + ("".startsWith("a", 0) ? 1 : 2));
                            } catch (Throwable ax$1) {
                            } finally {
                                vMeth1_check_sum = ax$0;
                            }
                        }
                    } catch (Throwable ax$3) {
                    }
                    System.setOut(ax$4);
                    System.setErr(ax$5);
                }
            }
        } else if (true) {
            d2 = d2;
        } else {
            i7 <<= Test.sFld;
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + (b1 ? 1 : 0) + i11 + i12 + Double.doubleToLongBits(d2) + i13 + i14 + by + FuzzerUtils.checkSum(bArr);
    }

    public static boolean bMeth() {
        if (ax$18) {
            try {
                int ax$23 = 70004;
                int ax$24 = 0x0e0f;
                int ax$21 = 0x88776655;
                long[] ax$22 = { 7L, 7L, 5L, 5L, 7L, 7L, 7L, 5L, 5L };
                long[] ax$20 = { 7L, 7L, 5L, 5L, 7L, 7L, 7L, 5L, 5L };
                long[] ax$19 = { // Long-range values
                // Long-range values
                // Long-range values
                // Long-range values
                // Long-range values
                0L, // Long-range values
                1L, // Long-range values
                2L, // Long-range values
                3L, // Long-range values
                99999L, // Long-range values
                100000L, // Long-range values
                999999L, // Long-range values
                100000L, // Long-range values
                999999999L, // Long-range values
                1000000000L, // Long-range values
                0x1234_5678L, // Long-range values
                0x8000_0000L, // Long-range values
                0x8000_0001L, // Long-range values
                0x8000_0002L, 0x8000_0003L, 0x8765_4321L, 0xFFFF_FFFEL, 0xFFFF_FFFFL, 999_999_999_999L, 1_000_000_000_000L, 999_999_999_999_999_999L, 1_000_000_000_000_000_000L, 0xFFFF_FFFF_FFFF_FFFEL, 0xFFFF_FFFF_FFFF_FFFFL };
                ax$20[ax$24] = ax$19[ax$21];
                ax$22[ax$24] = ax$19[ax$23];
                ax$24++;
            } catch (Throwable ax$25) {
            } finally {
            }
            return false;
        }
        int i4 = 11, i5 = -126, i6 = -6, i15 = 113, i16 = -173, i17 = -14487, i18 = 10, iArr[][] = new int[N][N];
        double d1 = 92.116746;
        boolean b2 = false;
        byte[] byArr = new byte[N];
        float[] fArr = new float[N];
        long[] lArr = new long[N];
        FuzzerUtils.init(iArr, 56379);
        FuzzerUtils.init(byArr, (byte) -42);
        FuzzerUtils.init(fArr, 2.1020F);
        FuzzerUtils.init(lArr, 2387196824L);
        iArr[(i4 >>> 1) % N][(i4 >>> 1) % N] *= (int) (((iArr[(i4 >>> 1) % N][(i4 >>> 1) % N]--) * (Test.instanceCount + i4)) + (Test.instanceCount <<= (++i4)));
        for (i5 = 5; i5 < 119; i5++) {
            i6 = (((--i6) + Math.min(i5, i6)) - ((++i6) + (++i6)));
            d1 = 1;
            while (++d1 < 5) {
                vMeth1(i4, i6);
                byArr = byArr;
            }
            iArr[i5][(i6 >>> 1) % N] = -6392;
            for (i15 = 1; 5 > i15; ++i15) {
                i16 <<= i16;
                i4 = -215;
                i16 = i15;
                for (i17 = 2; i17 > 1; --i17) {
                    byte by1 = 58;
                    i16 = (int) -97L;
                    i18 |= -33;
                    fArr = fArr;
                    i6 += Test.sFld;
                    if (b2)
                        break;
                    i6 += i15;
                    lArr[i17 - 1] = i6;
                    by1 -= (byte) i15;
                    iArr[i5 + 1] = iArr[(i16 >>> 1) % N];
                    i18 += i6;
                    if (b2)
                        continue;
                    Test.instanceCount = -57474;
                    if (b2) {
                        i18 = (int) d1;
                        i6 += i17;
                    } else {
                        Test.instanceCount += i17;
                        lArr[i17 - 1] = i17;
                        Test.instanceCount -= i6;
                    }
                }
                try {
                    i16 = (i5 % iArr[i5 + 1][i15 + 1]);
                    i18 = (iArr[i15 + 1][i5 - 1] % 24520);
                    iArr[i15 + 1][i5] = (i18 / 1540768828);
                } catch (ArithmeticException a_e) {
                }
                i4 = (int) 4186745477L;
                switch(((i15 % 10) * 5) + 33) {
                    case 75:
                        try {
                            iArr[i15][i5 + 1] = (i4 / i16);
                            i4 = (iArr[i5 - 1][i15] / 13);
                            i4 = (i5 / 52092);
                        } catch (ArithmeticException a_e) {
                        }
                        i4 = i18;
                        i6 = (int) Test.instanceCount;
                        i18 += (int) Test.fFld;
                        break;
                    case 50:
                        Test.instanceCount |= 5;
                        break;
                    case 46:
                        i18 = (int) -45225L;
                        break;
                    case 76:
                        i16 = (int) Test.instanceCount;
                        break;
                    case 58:
                        i16 >>>= Test.byFld;
                        break;
                    case 60:
                        if (b2)
                            break;
                        break;
                    case 82:
                        lArr[i15 - 1] = Test.instanceCount;
                        break;
                    case 38:
                        i16 = i5;
                        break;
                    case 66:
                        Test.instanceCount += i15;
                        break;
                    case 59:
                        Test.sFld = (short) i15;
                        break;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + Double.doubleToLongBits(d1) + i15 + i16 + i17 + i18 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(long l, int i) {
        int i1 = 0, i2 = -37543, i3 = 32947, i19 = -31383, i20 = -36, i21 = 44, i22 = -13, i23 = 27146, i24 = -14, i25 = -112, i26 = -55762, i27 = 1, i28 = 238, i29 = -13326, i30 = -15704, i31 = 132, i32 = -205;
        float f = -1.841F, fArr1[] = new float[N];
        boolean b = false;
        double d3 = 53.60277;
        long l1 = -19637L, lArr1[] = new long[N];
        FuzzerUtils.init(lArr1, -2868L);
        FuzzerUtils.init(fArr1, 0.937F);
        for (i1 = 11; i1 < 199; i1++) {
            double d = -2.126228;
            d += Short.reverseBytes((short) ((l - 1) * (i = i)));
            for (f = 3; f > i1; f -= 3) {
                b = (b = bMeth());
                Test.dArrFld[i1] = f;
            }
            i -= 11;
            i19 = 3;
            while (--i19 > 0) {
                for (i20 = 1; 1 > i20; ++i20) {
                    i2 += (((i20 * i) + i1) - i);
                    lArr1[i20 - 1] *= l;
                    i = i19;
                    i3 >>>= i;
                    i21 <<= -189;
                }
                i21 += (int) Test.instanceCount;
            }
            {
                java.io.PrintStream ax$15 = System.out;
                java.io.PrintStream ax$16 = System.err;
                java.io.PrintStream ax$17 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$17);
                System.setErr(ax$17);
                try {
                    for (int ax$13 = -4917; ax$13 < 1658; ax$13 += 1) {
                        int ax$10 = i20;
                        int ax$11 = i31;
                        try {
                            int[] ax$7 = new int[20];
                            for (int ax$8 = 0; ax$8 < i31; ) {
                                int ax$9 = ax$7[ax$8] + 1;
                                i20 += ax$9;
                                ++ax$8;
                                ax$7[ax$8] = 0;
                            }
                        } catch (Throwable ax$12) {
                        } finally {
                            i20 = ax$10;
                            i31 = ax$11;
                        }
                    }
                } catch (Throwable ax$14) {
                }
                System.setOut(ax$15);
                System.setErr(ax$16);
            }
            try {
                i = (i21 % i20);
                i = (i2 / i21);
                i21 = (i1 / i2);
            } catch (ArithmeticException a_e) {
            }
            i = i3;
            for (i22 = 1; i22 < 3; i22++) {
                fArr1[i22] += Test.instanceCount;
                d = i22;
                Test.instanceCount *= i21;
            }
            if (b)
                break;
        }
        for (i24 = 2; i24 < 170; i24++) {
            for (i26 = 3; i26 > 1; i26 -= 2) {
                i21 = (int) 1.151F;
                i25 += (((i26 * i25) + Test.instanceCount) - i3);
                Test.iArrFld[(i >>> 1) % N][i26 - 1] += 46390;
                for (i28 = i24; 3 > i28; i28 += 2) {
                    l += (i28 + i);
                }
            }
            d3 = i21;
        }
        Test.dArrFld[(i27 >>> 1) % N] = f;
        i29 >>= i27;
        for (i30 = 5; 199 > i30; ++i30) {
            Test.fFld = 119;
            lArr1[i30] /= ((long) (f) | 1);
            for (l1 = 1; l1 < 3; ++l1) {
                i2 -= i21;
                i25 *= 10471;
            }
        }
        vMeth_check_sum += l + i + i1 + i2 + Float.floatToIntBits(f) + i3 + (b ? 1 : 0) + i19 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + i27 + i28 + i29 + Double.doubleToLongBits(d3) + i30 + i31 + l1 + i32 + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {
        int i33 = 45845, i34 = -12, i35 = 1, i36 = -2, i37 = -4, i38 = 23598, i39 = -8956, i40 = 8, i41 = -43632;
        boolean b3 = true;
        double d4 = -2.12572;
        float f1 = -48.801F, fArr2[] = new float[N];
        long l2 = 6903019903678721907L;
        short[] sArr = new short[N];
        FuzzerUtils.init(fArr2, 0.175F);
        FuzzerUtils.init(sArr, (short) -6506);
        vMeth(Test.instanceCount, 10);
        Test.iArrFld[(i33 >>> 1) % N][(i33 >>> 1) % N] += i33;
        for (i34 = 8; i34 < 181; i34++) {
            Test.iArrFld[i34][i34] = Test.byFld;
            b3 = b3;
            Test.sFld += (short) (((i34 * i33) + Test.instanceCount) - i33);
            i36 = 1;
            do {
                d4 = d4;
                if (b3) {
                    Test.sFld <<= (short) i35;
                    Test.lArrFld[i34][i34] = i34;
                    for (f1 = 1; 1 < f1; f1 -= 3) {
                        Test.fFld -= lFld;
                    }
                    for (i38 = 1; i38 < 1; i38++) {
                        Test.instanceCount += (long) -16.537F;
                        Test.dArrFld[i38 - 1] += i40;
                        fArr2[i34] = Test.instanceCount;
                        switch(((i38 % 2) * 5) + 92) {
                            case 102:
                                i40 += (i38 * i38);
                                Test.iArrFld[i38][i36] = (int) f1;
                                i37 = i34;
                                i35 = i40;
                                Test.instanceCount <<= i37;
                                i35 >>= (int) Test.instanceCount;
                                i39 = i38;
                                i37 += -7;
                                i40 += i35;
                                i37 -= i35;
                                break;
                            case 97:
                                Test.iArrFld[i36 + 1][i36 - 1] += i39;
                                i40 = Test.byFld;
                                i39 = -90;
                                i33 += (int) Test.instanceCount;
                                break;
                        }
                        Test.iArrFld[i34 + 1][i34 - 1] = i33;
                        i33 += (int) lFld;
                        Test.iArrFld[i36][i34 + 1] += (int) Test.instanceCount;
                        i40 >>= (int) lFld;
                        sArrFld[i36 - 1] >>= (short) i38;
                        i40 = i33;
                        switch(i38 + 99) {
                            case 99:
                                switch((i36 % 4) + 27) {
                                    case 27:
                                        fArr2[i34 - 1] -= i35;
                                        try {
                                            Test.iArrFld[i34 - 1][i36 + 1] = (0 % i39);
                                            Test.iArrFld[(i38 >>> 1) % N][i34] = (i35 % 170);
                                            i40 = (32195 / i34);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        Test.sFld += (short) i33;
                                        i40 -= (int) lFld;
                                        i39 = i38;
                                        break;
                                    case 28:
                                        i37 = i35;
                                        fArr2[i36 - 1] /= ((long) (Test.fFld) | 1);
                                        Test.byFld -= (byte) Test.instanceCount;
                                        i33 *= i38;
                                        Test.iArrFld[i34][i34] += 196;
                                        lFld &= i35;
                                        if (b3)
                                            continue;
                                        Test.byFld = (byte) -7L;
                                        Test.sFld += (short) (((i38 * Test.fFld) + Test.fFld) - i34);
                                        break;
                                    case 29:
                                        Test.iArrFld[i34 + 1][i34] -= i34;
                                        i35 -= Test.byFld;
                                        lFld &= i34;
                                        Test.fFld += (i38 * i34);
                                        d4 -= i33;
                                        Test.iArrFld[i36][i36] <<= i33;
                                        Test.iArrFld[i34][i38 + 1] -= (int) lFld;
                                        break;
                                    case 30:
                                        i33 += i35;
                                        Test.instanceCount += i38;
                                        Test.fFld = i34;
                                        Test.lArrFld[i34 - 1][i38 - 1] -= -31684;
                                        Test.iArrFld[i38][i38 + 1] -= i39;
                                        Test.instanceCount <<= i38;
                                        i35 += (int) Test.fFld;
                                        i40 = i33;
                                        i33 += i38;
                                        i33 = (int) Test.instanceCount;
                                        switch(((i38 % 1) * 5) + 47) {
                                            case 50:
                                                Test.dArrFld[i38 + 1] += lFld;
                                                if (b3)
                                                    continue;
                                                i33 += (14 + (i38 * i38));
                                                break;
                                        }
                                    default:
                                        i39 = (int) f1;
                                }
                                break;
                            case 100:
                                Test.byFld += (byte) i38;
                            case 101:
                                if (b3)
                                    break;
                                break;
                            case 102:
                                i37 = i40;
                                break;
                            case 103:
                            case 104:
                                Test.iArrFld[i36 - 1][i38 + 1] = i39;
                                break;
                            case 105:
                                b3 = b3;
                            case 106:
                                i33 = (int) Test.instanceCount;
                                break;
                            case 107:
                                d4 += -1.126788;
                            case 108:
                                Test.instanceCount ^= i40;
                                break;
                            case 109:
                                i39 = i34;
                                break;
                            case 110:
                                i35 = Test.byFld;
                                break;
                            case 111:
                                Test.iArrFld[i38 + 1][i34] /= (int) ((long) (f1) | 1);
                            case 112:
                                b3 = true;
                                break;
                            case 113:
                                i35 = i37;
                            case 114:
                                Test.byFld = (byte) Test.sFld;
                                break;
                            case 115:
                                i35 = i39;
                            case 116:
                                Test.fFld = i38;
                                break;
                            case 117:
                                i40 += (int) Test.fFld;
                                break;
                            case 118:
                                i37 = i35;
                            case 119:
                                Test.iArrFld[i38][i36] *= Test.sFld;
                                break;
                            case 120:
                                Test.lArrFld[i38][i36] -= i36;
                                break;
                            case 121:
                                i39 += i36;
                            case 122:
                                d4 *= 8;
                                break;
                            case 123:
                                i35 += (((i38 * i39) + i37) - Test.fFld);
                            case 124:
                                i33 += (i38 ^ i33);
                                break;
                            case 125:
                                i33 *= (int) lFld;
                                break;
                            case 126:
                                Test.instanceCount >>= Test.instanceCount;
                            case 127:
                                i40 += (-164 + (i38 * i38));
                                break;
                            case 128:
                                i33 += i35;
                                break;
                            case 129:
                                i35 <<= i36;
                                break;
                            case 130:
                                Test.byFld &= (byte) i35;
                                break;
                            case 131:
                                i37 = i40;
                            case 132:
                                i37 += (i38 * i38);
                            case 133:
                                i35 += (i38 * i38);
                                break;
                            case 134:
                                lFld = i35;
                                break;
                            case 135:
                                i33 += i37;
                                break;
                            case 136:
                                Test.fFld -= -112;
                                break;
                            case 137:
                                sArr[i36] = (short) i36;
                                break;
                            case 138:
                                i37 += (int) lFld;
                            case 139:
                                lFld = (long) 1.31F;
                            case 140:
                                try {
                                    i40 = (1635951151 / i38);
                                    i37 = (142 / i38);
                                    i37 = (i40 / Test.iArrFld[i34 + 1][i38 - 1]);
                                } catch (ArithmeticException a_e) {
                                }
                                break;
                            case 141:
                                i40 = i35;
                                break;
                            case 142:
                                i35 += (i38 | i35);
                                break;
                            case 143:
                                sArrFld[i38] <<= (short) Test.instanceCount;
                                break;
                            case 144:
                                i37 -= i35;
                                break;
                            case 145:
                                i40 = (int) l2;
                                break;
                            case 146:
                                d4 = Test.instanceCount;
                            case 147:
                                i37 -= i38;
                                break;
                            case 148:
                                i39 += (i38 - i33);
                                break;
                            case 149:
                                i41 <<= (int) l2;
                            case 150:
                                i40 = i34;
                                break;
                            case 151:
                                i41 -= i37;
                                break;
                            case 152:
                                Test.iArrFld[i36 - 1][i38 + 1] = (int) lFld;
                                break;
                            case 153:
                                i37 = i34;
                            case 154:
                                i39 >>>= Test.byFld;
                                break;
                            case 155:
                                fArr2[i36 - 1] *= 122;
                            case 156:
                                try {
                                    Test.iArrFld[i38][i34] = (i33 % 105);
                                    i33 = (i37 / i38);
                                    i41 = (i36 % i37);
                                } catch (ArithmeticException a_e) {
                                }
                            case 157:
                                i37 = i34;
                            case 158:
                                i37 = i36;
                                break;
                            case 159:
                                Test.sFld += (short) (206 + (i38 * i38));
                            case 160:
                                i40 += (i38 ^ i40);
                                break;
                            case 161:
                                fArr2[i38] += i35;
                                break;
                            case 162:
                                Test.instanceCount += (i38 ^ Test.instanceCount);
                                break;
                            case 163:
                                if (true)
                                    break;
                                break;
                            case 164:
                                i40 += (i38 * i38);
                                break;
                            case 165:
                                i40 -= (int) l2;
                            case 166:
                                lFld = Test.sFld;
                                break;
                            case 167:
                                i37 = (int) lFld;
                                break;
                            case 168:
                                lFld /= (i35 | 1);
                                break;
                            default:
                                i39 += (i38 | Test.instanceCount);
                        }
                    }
                } else if (true) {
                    i37 *= i40;
                }
            } while (++i36 < 29);
        }
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("b3 i36 d4 = " + (b3 ? 1 : 0) + "," + i36 + "," + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("f1 i37 i38 = " + Float.floatToIntBits(f1) + "," + i37 + "," + i38);
        FuzzerUtils.out.println("i39 i40 l2 = " + i39 + "," + i40 + "," + l2);
        FuzzerUtils.out.println("i41 fArr2 sArr = " + i41 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + "," + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.byFld lFld Test.dArrFld = " + Test.byFld + "," + lFld + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld sArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(sArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$18 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  bMeth ->  bMeth vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 bMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
