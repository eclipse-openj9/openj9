// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.lang.reflect.Array;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 7L;

    public int iFld = 6;

    public static int iFld1 = 28;

    public boolean bFld = false;

    public static byte byFld = 81;

    public static int iFld2 = 11;

    public static int iFld3 = 6;

    public static float[] fArrFld = new float[N];

    public long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.789F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i13) {
        int i14 = 61493, i15 = 39, i16 = 3, i17 = 11, i18 = -9, i19 = -238, i20 = -57455;
        short s1 = -5181, sArr1[] = new short[N];
        boolean b = true, bArr[] = new boolean[N];
        double d2 = 108.98488;
        float f1 = 37.428F;
        byte by = 39;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, 926002212L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(sArr1, (short) 17459);
        i13 += i13;
        for (i14 = 3; i14 < 206; i14++) {
            i13 = (int) Test.instanceCount;
            for (i16 = 1; i16 < 3; i16++) {
                i15 = s1;
                Test.iFld1 += (i16 * i16);
                for (i18 = 1; 2 > i18; i18++) {
                    Test.instanceCount -= i17;
                    i19 += i18;
                    i15 += i13;
                    if (b)
                        break;
                    lArr[i16] -= Test.instanceCount;
                    switch(((i13 >>> 1) % 1) + 16) {
                        case 16:
                            i19 = i18;
                            i15 = -77;
                            bArr[i14] = b;
                            lArr[i16] >>= 31571;
                            d2 += Test.instanceCount;
                            break;
                        default:
                            i19 ^= i19;
                            i19 = (int) f1;
                            if (i16 != 0) {
                            }
                            i15 = i15;
                            by -= (byte) -52004;
                            sArr1[i16] = (short) f1;
                            if (b)
                                break;
                            f1 *= (float) d2;
                            if (b)
                                break;
                            Test.iFld1 = (int) 2829990565360190686L;
                            Test.instanceCount = by;
                            Test.iFld1 += (i18 - f1);
                            i15 = -14800;
                            if (false) {
                                if (b)
                                    continue;
                                d2 -= -5909;
                                i13 = (int) f1;
                                Test.instanceCount -= Test.iFld1;
                                i15 %= (int) (i19 | 1);
                            } else if (b) {
                                s1 >>= (short) i20;
                            } else {
                            }
                    }
                }
            }
        }
        long meth_res = i13 + i14 + i15 + i16 + i17 + s1 + i18 + i19 + (b ? 1 : 0) + Double.doubleToLongBits(d2) + Float.floatToIntBits(f1) + by + i20 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(sArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(int i11, long l1, int i12) {
        int i21 = 48931, i22 = -138, i23 = -141, i24 = -116, i25 = 10, i26 = 113, i27 = 134, i28 = 14, iArr1[][] = new int[N][N];
        double d3 = 0.71355;
        float f2 = -62.943F;
        boolean b1 = true;
        short s2 = 27465, sArr[] = new short[N];
        long[] lArr1 = new long[N];
        byte[] byArr = new byte[N];
        FuzzerUtils.init(sArr, (short) 22274);
        FuzzerUtils.init(iArr1, 9);
        FuzzerUtils.init(lArr1, -230L);
        FuzzerUtils.init(byArr, (byte) 112);
        i12 = (int) (Test.iFld1 = (int) ((Test.instanceCount + Test.instanceCount) - (Test.instanceCount * i12)));
        sArr[(i11 >>> 1) % N] = (short) Math.max((int) (Test.instanceCount % ((i11--) | 1)), i12 - 42);
        i11 <<= (++Test.iFld1);
        Test.instanceCount = Math.min(iMeth(i11), i11);
        i21 = 1;
        do {
            for (i22 = 6; i22 > 1; i22--) {
                Test.iFld1 += (int) d3;
                i24 &= i21;
                i23 = i22;
                i11 -= i22;
                iArr1 = iArr1;
                switch(((i22 % 5) * 5) + 92) {
                    case 106:
                        iArr1[i21 - 1][i21 - 1] = i21;
                        i24 = i22;
                        lArr1[i21] *= i11;
                        d3 -= 12;
                        f2 += -5;
                        if (b1)
                            continue;
                        switch(((11 >>> 1) % 4) + 68) {
                            case 68:
                                for (i25 = 1; 2 > i25; ++i25) {
                                    s2 &= (short) -1180413380408377555L;
                                    iArr1[i22][i22 - 1] -= (int) l1;
                                    i24 = i26;
                                    i24 = (int) Test.instanceCount;
                                }
                                iArr1[i21][i21 - 1] = i21;
                                Test.byFld -= (byte) i12;
                                Test.iFld1 += -82;
                                l1 >>>= i26;
                                for (i27 = 2; i27 > i21; i27--) {
                                    if (true)
                                        continue;
                                    l1 -= Test.byFld;
                                    if (b1)
                                        break;
                                    i12 += -24842;
                                    Test.fArrFld[i22 - 1] = i24;
                                    i12 *= 247;
                                    i12 = i27;
                                    i26 -= i27;
                                }
                            case 69:
                                i11 += (int) 2.6F;
                                break;
                            case 70:
                                f2 = Test.instanceCount;
                                break;
                            case 71:
                                if (b1)
                                    continue;
                                break;
                            default:
                                Test.byFld += (byte) l1;
                        }
                        break;
                    case 96:
                        i12 -= i12;
                    case 93:
                        l1 += i28;
                        break;
                    case 104:
                        byArr[i21 - 1] -= (byte) Test.iFld2;
                        break;
                    case 115:
                        Test.instanceCount -= (long) 103.767F;
                        break;
                    default:
                        i24 -= (int) Test.instanceCount;
                }
            }
        } while (++i21 < 94);
        vMeth1_check_sum += i11 + l1 + i12 + i21 + i22 + i23 + Double.doubleToLongBits(d3) + i24 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + i25 + i26 + s2 + i27 + i28 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(int i9, int i10, long l) {
        int i29 = 48, i30 = -8, i31 = -55106, i32 = -61101, i33 = -452, iArr2[] = new int[N];
        float f3 = 0.778F;
        double d4 = -60.36938;
        FuzzerUtils.init(iArr2, -101);
        vMeth1(248, Test.instanceCount, -39);
        iArr2[(i10 >>> 1) % N] = -63381;
        i9 *= (int) l;
        for (i29 = 7; i29 < 117; i29++) {
            for (i31 = 1; 5 > i31; ++i31) {
                iArr2[i31 + 1] -= i9;
                iArr2[i29 - 1] -= -3;
                i33 = 1;
                do {
                    boolean b2 = false;
                    i10 += i29;
                    l /= (Test.iFld1 | 1);
                    i32 += i10;
                    if (b2)
                        continue;
                    iArr2[i29] >>>= (int) l;
                    iArr2[i33] <<= Test.iFld2;
                    iArr2[i29 - 1] *= (int) f3;
                    Test.instanceCount *= i32;
                    Test.fArrFld[i29] *= f3;
                    Test.iFld1 = i33;
                    switch((i31 % 7) + 100) {
                        case 100:
                            i10 += (i33 * l);
                            iArr2[i33 + 1] -= (int) d4;
                            Test.instanceCount += (i33 + i31);
                            Test.byFld *= (byte) f3;
                            try {
                                Test.iFld1 = (i31 / -46446);
                                iArr2[i31 + 1] = (i29 % -69);
                                iArr2[i29 + 1] = (i29 / i9);
                            } catch (ArithmeticException a_e) {
                            }
                            iArr2[i29 - 1] = (int) f3;
                            Test.iFld1 += i9;
                            break;
                        case 101:
                            i10 += (((i33 * l) + i29) - Test.byFld);
                            switch((i31 % 2) + 99) {
                                case 99:
                                    l = l;
                                    switch((i33 % 2) + 42) {
                                        case 42:
                                            i10 = 193;
                                            i30 += (i33 - f3);
                                            switch((i31 % 1) + 14) {
                                                case 14:
                                                    iArr2[i33 - 1] <<= 36385;
                                                    f3 -= l;
                                                    Test.iFld1 = (int) l;
                                                    i9 += Test.iFld1;
                                                    break;
                                            }
                                        case 43:
                                            Test.iFld1 >>>= 234;
                                            break;
                                    }
                                    break;
                                case 100:
                                    i30 <<= (int) Test.instanceCount;
                                    break;
                            }
                        case 102:
                            f3 -= i32;
                        case 103:
                            Test.iFld2 = i32;
                            break;
                        case 104:
                            i10 = Test.byFld;
                            break;
                        case 105:
                            Test.iFld1 *= (int) Test.instanceCount;
                            break;
                        case 106:
                            Test.iFld1 >>= 0;
                    }
                } while (++i33 < 2);
            }
        }
        vMeth_check_sum += i9 + i10 + l + i29 + i30 + i31 + i32 + i33 + Float.floatToIntBits(f3) + Double.doubleToLongBits(d4) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {
        int i = -7, i1 = -25224, i2 = 185, i3 = -14, i4 = -4, i5 = 6, i6 = -59, i7 = -8074, i8 = 62, i34 = -100, i35 = 0, iArr[][] = new int[N][N];
        float f = 54.103F;
        double d = 34.19306, d1 = 0.117203, d5 = 0.46408;
        short s = -31966;
        boolean[] bArr1 = new boolean[N];
        FuzzerUtils.init(iArr, -12754);
        FuzzerUtils.init(bArr1, false);
        iFld += (int) (iFld + ((iFld * Test.instanceCount) - iFld));
        for (i = 10; 252 > i; i++) {
            f += (i - Test.instanceCount);
            Test.iFld1 += (i * Test.instanceCount);
            d = 1;
            do {
                i1 >>= (iFld++);
            } while (++d < 21);
            for (i2 = i; i2 < 21; i2++) {
                bFld = (((bFld && true) != (bFld = bFld)) & ((bFld | true) && (bFld = true)));
                try {
                    i3 = (i3 % 151);
                    iFld = (i2 % 176);
                    iFld = (iFld % i);
                } catch (ArithmeticException a_e) {
                }
                i3 -= (iFld--);
                Test.iFld1 >>= (int) (((iFld * i2) - (iFld * Test.instanceCount)) - ((iFld += 225) - (0.25954 + (--Test.iFld1))));
                iArr[i2][i2] >>>= (((++s) + i3) * Math.abs(Test.iFld1++));
                d1 = ((-(i2 * i1)) / 33.370F);
                Test.instanceCount *= iArr[i - 1][i2];
                i3 *= (int) Math.abs((long) ((Test.instanceCount + iFld) + (i3 + f)));
            }
            i4 = 1;
            while (++i4 < 21) {
                iArr[i - 1][i + 1] *= i1;
            }
        }
        d1 -= f;
        for (i5 = 4; i5 < 187; i5++) {
            for (i7 = 1; 28 > i7; ++i7) {
                vMeth(i1, i3, Test.instanceCount);
                Test.iFld1 = i4;
                if (bFld) {
                    Test.instanceCount += i7;
                    iArr[i5][i7 - 1] >>= i8;
                    lArrFld[i7] = Test.instanceCount;
                    i8 += i7;
                    for (d5 = i7; d5 < 2; d5 += 3) {
                        Test.iFld2 = (int) d;
                        Test.iFld2 *= -63834;
                        f += i;
                        Test.iFld1 -= Test.iFld1;
                        iFld *= (int) Test.instanceCount;
                        i34 = (int) Test.instanceCount;
                        f -= i;
                        iFld -= Test.iFld2;
                        i6 += (int) (d5 - i2);
                        i1 ^= (int) -8L;
                        i1 = i2;
                        switch(((i5 % 3) * 5) + 95) {
                            case 96:
                                bFld = bFld;
                                s += (short) i3;
                                break;
                            case 102:
                                i34 += (-391 + (d5 * d5));
                                i1 += (int) d5;
                                iFld *= (int) f;
                                iArr[i7 - 1][(int) (d5 - 1)] = (int) d1;
                                switch((i5 % 2) + 61) {
                                    case 61:
                                        s &= (short) 4;
                                        d1 -= Test.instanceCount;
                                        break;
                                    case 62:
                                        iArr[i7 + 1][i5] &= i3;
                                        s = (short) i;
                                        Test.instanceCount += -53815;
                                        Test.iFld2 += (int) Test.instanceCount;
                                        i34 -= i6;
                                        if (bFld)
                                            continue;
                                        Test.fArrFld[i5 + 1] -= -43;
                                        switch(((Test.iFld2 >>> 1) % 7) + 1) {
                                            case 1:
                                                i1 -= (int) f;
                                                i1 = i8;
                                                break;
                                            case 2:
                                                i3 = i6;
                                                Test.instanceCount += (long) d5;
                                                iArr[i7 + 1][i7 - 1] = s;
                                                bArr1[i7] = bFld;
                                                switch((int) ((d5 % 4) + 38)) {
                                                    case 38:
                                                        i3 <<= (int) Test.instanceCount;
                                                        d1 += Test.byFld;
                                                        iFld -= s;
                                                        s = (short) i2;
                                                        switch((i7 % 9) + 25) {
                                                            case 25:
                                                                f += Test.instanceCount;
                                                                i3 >>>= iFld;
                                                                i35 >>>= 36428;
                                                                Test.instanceCount += (-8 + (d5 * d5));
                                                                Test.instanceCount *= Test.iFld2;
                                                                Test.byFld = (byte) f;
                                                                break;
                                                            case 26:
                                                                f += (float) (((d5 * f) + iFld) - iFld);
                                                                break;
                                                            case 27:
                                                                i8 = (int) Test.instanceCount;
                                                                break;
                                                            case 28:
                                                                Test.iFld3 -= 175;
                                                            case 29:
                                                                try {
                                                                    i6 = (44797 / i6);
                                                                    i3 = (iArr[(int) (d5 - 1)][i5 - 1] % Test.iFld2);
                                                                    i35 = (i7 / i34);
                                                                } catch (ArithmeticException a_e) {
                                                                }
                                                            case 30:
                                                            case 31:
                                                                i8 = (int) -11L;
                                                                break;
                                                            case 32:
                                                                iArr[i5 + 1][(int) (d5 - 1)] = i;
                                                            case 33:
                                                                Test.instanceCount *= Test.iFld2;
                                                                break;
                                                        }
                                                        break;
                                                    case 39:
                                                        i6 <<= 154;
                                                        break;
                                                    case 40:
                                                        iArr[i5][(int) (d5)] = 11;
                                                    case 41:
                                                        i6 += i;
                                                        break;
                                                }
                                                break;
                                            case 3:
                                                if (bFld)
                                                    break;
                                                break;
                                            case 4:
                                                iArr[i5 + 1] = iArr[i7];
                                                break;
                                            case 5:
                                                Test.instanceCount = i7;
                                            case 6:
                                                i35 = i35;
                                            case 7:
                                                i8 += (int) (d5 - Test.iFld1);
                                                break;
                                        }
                                        break;
                                }
                                break;
                            case 104:
                                i35 += (int) d5;
                            default:
                                iArr[i7][(int) (d5 - 1)] = (int) Test.instanceCount;
                        }
                    }
                }
            }
        }
        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("d i2 i3 = " + Double.doubleToLongBits(d) + "," + i2 + "," + i3);
        FuzzerUtils.out.println("s d1 i4 = " + s + "," + Double.doubleToLongBits(d1) + "," + i4);
        FuzzerUtils.out.println("i5 i6 i7 = " + i5 + "," + i6 + "," + i7);
        FuzzerUtils.out.println("i8 d5 i34 = " + i8 + "," + Double.doubleToLongBits(d5) + "," + i34);
        FuzzerUtils.out.println("i35 iArr bArr1 = " + i35 + "," + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(bArr1));
        FuzzerUtils.out.println("Test.instanceCount iFld Test.iFld1 = " + Test.instanceCount + "," + iFld + "," + Test.iFld1);
        FuzzerUtils.out.println("bFld Test.byFld Test.iFld2 = " + (bFld ? 1 : 0) + "," + Test.byFld + "," + Test.iFld2);
        FuzzerUtils.out.println("Test.iFld3 Test.fArrFld lArrFld = " + Test.iFld3 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$0) {
            try {
                java.lang.Object ax$1 = "-9007199254740993";
                Array.set(ax$1, 0, new Integer(5));
            } catch (Throwable ax$2) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
