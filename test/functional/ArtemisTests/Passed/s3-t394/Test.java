// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.nio.file.DirectoryIteratorException;
import java.net.InetAddress;
import java.net.DatagramPacket;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -866686800721339415L;

    public static boolean bFld = true;

    public static byte byFld = 111;

    public int iFld = 15;

    public int iFld1 = -60;

    public static long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -4L);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i9, long l) {
        int i10 = -30517, i11 = -44110, i12 = -88, i13 = 10, i14 = -84, i15 = 226, i16 = 245, iArr[][] = new int[N][N];
        short s = -13937, s1 = 30879, sArr[] = new short[N];
        double d1 = -5.66697, dArr[] = new double[N];
        float f2 = -80.109F;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr, -8);
        FuzzerUtils.init(byArr, (byte) -9);
        FuzzerUtils.init(sArr, (short) -13179);
        FuzzerUtils.init(dArr, 95.65644);
        i10 = 1;
        do {
            s += s;
            Test.instanceCount += i9;
            i9 += (int) d1;
            i9 += i10;
            i9 %= (int) (i10 | 1);
            d1 = Test.instanceCount;
            i9 += i9;
            for (i11 = 1; i11 < 3; i11++) {
                f2 -= f2;
                i13 = 1;
                do {
                    i12 += (int) Test.instanceCount;
                    iArr[i10 - 1] = iArr[i11 - 1];
                    i9 *= i9;
                    Test.byFld = (byte) -8;
                    i9 += i13;
                    s += (short) i13;
                    i12 <<= i14;
                    {
                        java.io.PrintStream ax$0 = System.out;
                        java.io.PrintStream ax$1 = System.err;
                        java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$2);
                        System.setErr(ax$2);
                        {
                            boolean ax$6 = false;
                            for (int ax$5 = -1230; ax$5 < 5939; ax$5 += 4) {
                                if (!ax$6) {
                                    ax$6 = true;
                                    {
                                        System.setOut(ax$0);
                                        System.setErr(ax$1);
                                        try {
                                            iArr[i11 - 1][i11 - 1] = (-82987326 / i10);
                                            iArr[i13][i10] = (i14 / i10);
                                            i12 = (249 % i14);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        System.setOut(ax$2);
                                        System.setErr(ax$2);
                                    }
                                }
                                int ax$3 = i11;
                                try {
                                    if (i11 != 0) {
                                    }
                                } catch (Throwable ax$4) {
                                } finally {
                                    i11 = ax$3;
                                }
                            }
                        }
                        System.setOut(ax$0);
                        System.setErr(ax$1);
                    }
                    l *= 12922;
                    byArr[i11] = (byte) i11;
                    i9 += -2;
                    iArr[i10 - 1] = FuzzerUtils.int1array(N, (int) -7);
                    byArr[i11] <<= (byte) 8;
                    iArr[i13][i11] = -38;
                    i12 += (i13 | (long) f2);
                } while (++i13 < 2);
                Test.lArrFld[i10] = (long) f2;
                f2 += (i11 + i14);
                sArr[i10] -= (short) l;
                i14 *= i13;
                for (i15 = 1; 2 > i15; i15++) {
                    dArr[i15] -= i16;
                    Test.bFld = Test.bFld;
                    Test.lArrFld[i10] <<= l;
                    Test.bFld = true;
                    Test.bFld = false;
                    s1 = (short) i11;
                }
            }
        } while (++i10 < 197);
        vMeth2_check_sum += i9 + l + i10 + s + Double.doubleToLongBits(d1) + i11 + i12 + Float.floatToIntBits(f2) + i13 + i14 + i15 + i16 + s1 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(float f1, int i2) {
        if (ax$7) {
            try {
                java.lang.Short ax$9 = new Short((short) 0xFFFFFFFF);
                java.lang.Short ax$8 = new Short((short) 1);
                for (int ax$10 = 0; ax$10 < 1000; ax$10++) {
                    ax$8 = (short) (ax$8 + 1);
                    ax$9 = (short) (ax$9 + 2);
                }
            } catch (Throwable ax$11) {
            } finally {
            }
            return;
        }
        int i3 = -8, i4 = -57929, i5 = 61066, i6 = 5, i7 = 199, i8 = -11419, i17 = 40, i18 = 31633, i19 = -2, i20 = 5, iArr1[] = new int[N];
        double d = 1.88621;
        short s2 = 32528, sArr1[] = new short[N];
        FuzzerUtils.init(iArr1, -8);
        FuzzerUtils.init(sArr1, (short) 247);
        Test.bFld = (Test.instanceCount != ((-6 + (1 - i3)) - Math.sqrt(d)));
        for (i4 = 4; i4 < 176; i4++) {
            i6 = 1;
            while (++i6 < 3) {
                Test.instanceCount = (-(-(i3 + Test.instanceCount)));
                Test.instanceCount += (i6 | i3);
                for (i7 = 1; i7 < 1; ++i7) {
                    f1 += (i8 + ((f1 + -58) - (i8 - i5)));
                    vMeth2(i7, Test.instanceCount);
                    Test.instanceCount >>= s2;
                    Test.byFld *= (byte) i6;
                    i5 = i3;
                    d *= 7;
                    i8 = s2;
                    i8 += (i7 - i6);
                    iArr1[i4] = -17062;
                    i8 = (int) Test.instanceCount;
                    i2 = (int) Test.instanceCount;
                    i8 = Test.byFld;
                }
                Test.instanceCount += (((i6 * Test.instanceCount) + Test.instanceCount) - i7);
                switch(((i7 >>> 1) % 8) + 30) {
                    case 30:
                        f1 %= 3;
                        for (i17 = 1; i17 < 1; i17++) {
                            i18 += i3;
                        }
                        i18 += i8;
                        for (i19 = 1; i19 > 1; i19 -= 3) {
                            i2 %= (int) (i2 | 1);
                            switch((i19 % 6) + 122) {
                                case 122:
                                    Test.instanceCount += Test.instanceCount;
                                    i2 += i2;
                                    i3 = (int) f1;
                                    i2 <<= (int) Test.instanceCount;
                                    i3 = i5;
                                    i5 += (int) 82L;
                                    iArr1[i6 + 1] = 13;
                                    Test.instanceCount += (((i19 * i3) + i8) - Test.instanceCount);
                                    d -= i7;
                                    i2 = (int) Test.instanceCount;
                                    break;
                                case 123:
                                    i20 += (i19 | Test.instanceCount);
                                    break;
                                case 124:
                                    i20 -= i2;
                                    break;
                                case 125:
                                    Test.instanceCount |= i4;
                                case 126:
                                    Test.instanceCount -= i20;
                                    break;
                                case 127:
                                    i18 *= i5;
                                    break;
                                default:
                                    sArr1[i6 - 1] -= (short) -65493;
                            }
                        }
                        break;
                    case 31:
                        i2 *= i8;
                    case 32:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 33:
                        f1 = Test.instanceCount;
                        break;
                    case 34:
                        i2 <<= i17;
                        break;
                    case 35:
                        f1 += (i6 + i7);
                        break;
                    case 36:
                        i5 >>= -41;
                        break;
                    case 37:
                        Test.bFld = Test.bFld;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + s2 + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr1);
    }

    public static void vMeth(int i, float f, int i1) {
        if (ax$17) {
            try {
                // NullPointerException
                try {
                    new DirectoryIteratorException(null);
                } catch (NullPointerException expected) {
                }
            } catch (Throwable ax$19) {
            } finally {
            }
            return;
        }
        double d2 = 0.96885, d3 = -51.44556;
        int i21 = 8, i22 = -158, i23 = 14, i24 = -185, i25 = -58199, i26 = 7, i28 = 61607, iArr2[] = new int[N];
        long[] lArr = new long[N];
        short[] sArr2 = new short[N];
        float[] fArr = new float[N];
        FuzzerUtils.init(lArr, -147L);
        FuzzerUtils.init(iArr2, 13);
        FuzzerUtils.init(sArr2, (short) -7551);
        FuzzerUtils.init(fArr, -91.86F);
        i = (int) (--Test.instanceCount);
        Test.instanceCount -= lArr[(i1 >>> 1) % N];
        {
            java.io.PrintStream ax$14 = System.out;
            java.io.PrintStream ax$15 = System.err;
            java.io.PrintStream ax$16 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$16);
            System.setErr(ax$16);
            try {
                ax$7 = true;
                for (int ax$12 = 0; ax$12 < 9255; ax$12 += 1) vMeth1((float) 0.2407375622365906, -1789758805);
            } catch (java.lang.Throwable ax$13) {
            } finally {
                ax$7 = false;
            }
            System.setOut(ax$14);
            System.setErr(ax$15);
        }
        vMeth1(-70.446F, i);
        switch(((i >>> 1) % 2) + 110) {
            case 110:
                switch(((26062 >>> 1) % 9) + 56) {
                    case 56:
                        d2 = 1;
                        do {
                            i1 -= (int) Test.instanceCount;
                            i21 = 1;
                            while (++i21 < 3) {
                                i += (((i21 * i) + Test.instanceCount) - Test.instanceCount);
                                iArr2 = iArr2;
                                i1 = 44416;
                                i <<= (int) 5028265409588406443L;
                            }
                            i1 = (int) d2;
                            i = i;
                            Test.instanceCount += (long) d2;
                            for (i22 = (int) (d2); i22 < 3; i22++) {
                                i = (int) Test.instanceCount;
                                i >>>= (int) Test.instanceCount;
                                iArr2[(int) (d2 + 1)] += i;
                                Test.instanceCount -= -241;
                                switch((i22 % 6) + 51) {
                                    case 51:
                                        i24 = 1;
                                        do {
                                            i23 >>= 106;
                                            Test.byFld = (byte) -110L;
                                            i1 += (13 + (i24 * i24));
                                            i23 = 52174;
                                            Test.bFld = true;
                                            d3 = i23;
                                            i23 = i23;
                                            d3 = f;
                                            i23 += (i24 - i22);
                                            Test.instanceCount += (i24 | i1);
                                        } while (++i24 < 1);
                                        try {
                                            i1 = (i22 % iArr2[(int) (d2)]);
                                            i23 = (180 / iArr2[i22]);
                                            i1 = (46 / i21);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        switch((int) ((d2 % 1) + 113)) {
                                            case 113:
                                                for (i25 = 1; 1 > i25; ++i25) {
                                                    Test.instanceCount += (2184284211243520642L + (i25 * i25));
                                                    i = i24;
                                                }
                                                break;
                                        }
                                    case 52:
                                        sArr2[i22] *= (short) i25;
                                        break;
                                    case 53:
                                        Test.instanceCount = i26;
                                        break;
                                    case 54:
                                        Test.instanceCount = 202;
                                    case 55:
                                        fArr[(int) (d2)] *= Test.instanceCount;
                                    case 56:
                                }
                            }
                        } while (++d2 < 178);
                        break;
                    case 57:
                        f = 3076;
                    case 58:
                        i26 = i26;
                    case 59:
                        Test.byFld <<= (byte) i1;
                        break;
                    case 60:
                        i26 -= (int) d3;
                        break;
                    case 61:
                        Test.instanceCount = Test.byFld;
                        break;
                    case 62:
                        iArr2[(i1 >>> 1) % N] = i26;
                        break;
                    case 63:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 64:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    default:
                        i = i28;
                }
                break;
            case 111:
                i28 = i26;
                break;
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + Double.doubleToLongBits(d2) + i21 + i22 + i23 + i24 + Double.doubleToLongBits(d3) + i25 + i26 + i28 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {
        if (ax$25) {
            try {
                byte[] ax$26 = new byte[128];
                int ax$28 = 10;
                int ax$30 = 50;
                InetAddress ax$27 = InetAddress.getLocalHost();
                int ax$29 = 8080;
                DatagramPacket ax$31 = new DatagramPacket(ax$26, ax$28, ax$30, ax$27, ax$29);
                if (ax$31.getData() != ax$26 || ax$31.getOffset() != ax$28 || ax$31.getLength() != ax$30 || ax$31.getAddress() != ax$27 || ax$31.getPort() != ax$29) {
                }
            } catch (Throwable ax$32) {
            } finally {
            }
            return;
        }
        float f3 = 0.506F, fArr1[] = new float[N];
        int i29 = -28962, i30 = -118, i31 = -10, i32 = 253, i33 = -6, i34 = -57662, iArr3[][] = new int[N][N];
        short s3 = 2769;
        double d4 = -84.96825, dArr1[] = new double[N];
        FuzzerUtils.init(dArr1, 110.63810);
        FuzzerUtils.init(iArr3, 12982);
        FuzzerUtils.init(fArr1, 2.150F);
        {
            java.io.PrintStream ax$22 = System.out;
            java.io.PrintStream ax$23 = System.err;
            java.io.PrintStream ax$24 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$24);
            System.setErr(ax$24);
            try {
                ax$17 = true;
                for (int ax$20 = 0; ax$20 < 6857; ax$20 += 1) vMeth(-713831052, (float) 0.1902091613976562, 104287089);
            } catch (java.lang.Throwable ax$21) {
            } finally {
                ax$17 = false;
            }
            System.setOut(ax$22);
            System.setErr(ax$23);
        }
        vMeth(iFld, f3, iFld);
        iFld = iFld;
        for (i29 = 3; i29 < 77; ++i29) {
            if (Test.bFld)
                break;
            i30 = i30;
            iFld *= i30;
        }
        i31 = 1;
        do {
            i32 = 1;
            do {
                iFld *= i29;
                f3 = i29;
                i30 = i31;
                i30 >>= i32;
                Test.instanceCount = iFld;
                for (i33 = 1; i33 > 1; --i33) {
                    i34 += (i33 * i33);
                    i30 -= -77;
                    i34 = (int) 58873L;
                    iFld <<= 12;
                    i30 += (i33 - s3);
                    Test.instanceCount -= 7L;
                    switch(((i32 % 2) * 5) + 125) {
                        case 129:
                            dArr1[i33] = Test.instanceCount;
                            f3 += 239;
                            Test.instanceCount = Test.instanceCount;
                            iArr3[i33][i33 + 1] = iFld1;
                            Test.instanceCount = iFld1;
                            iFld1 += (i33 ^ i34);
                            i30 = i33;
                            try {
                                iArr3[i31 - 1][i31] = (i31 % -59);
                                i34 = (i32 / iArr3[i31 - 1][i33 - 1]);
                                iFld1 = (-20817 / i33);
                            } catch (ArithmeticException a_e) {
                            }
                            iArr3[i33][i33 + 1] = (int) Test.instanceCount;
                            if (Test.bFld)
                                break;
                            break;
                        case 134:
                            i30 = (int) Test.instanceCount;
                            f3 += (i33 * i33);
                            Test.lArrFld[i32] -= i32;
                            i34 += (int) (1312311553942171967L + (i33 * i33));
                            fArr1[i32 - 1] = iFld;
                            iFld = i32;
                            switch(((i29 >>> 1) % 6) + 101) {
                                case 101:
                                    Test.instanceCount = i29;
                                    d4 -= i33;
                                    s3 += (short) i33;
                                    Test.byFld += (byte) i30;
                                    Test.instanceCount = Test.instanceCount;
                                    i30 -= iFld1;
                                    Test.instanceCount += (i33 * i33);
                                    i34 -= (int) Test.instanceCount;
                                    Test.instanceCount += (i33 - Test.instanceCount);
                                    i34 ^= i29;
                                case 102:
                                    Test.instanceCount = i29;
                                    f3 = i32;
                                    break;
                                case 103:
                                case 104:
                                    iFld = i30;
                                    try {
                                        iFld1 = (iArr3[i32 + 1][i32 - 1] / 60948);
                                        iFld1 = (i33 / i32);
                                        i30 = (-37 / i29);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    iFld = i29;
                                    iArr3[i31 - 1][i33 + 1] -= i29;
                                    i34 += (((i33 * iFld) + f3) - iFld);
                                    Test.instanceCount += i33;
                                    iFld1 = (int) 133L;
                                    fArr1[i32 - 1] += Test.instanceCount;
                                    break;
                                case 105:
                                    iFld = Test.byFld;
                                    break;
                                case 106:
                                default:
                                    Test.instanceCount >>= i31;
                                    iArr3[i33 - 1][i31 + 1] = iFld;
                                    i34 = (int) d4;
                                    s3 += (short) (i33 | i34);
                                    Test.lArrFld[i31 - 1] = (long) f3;
                                    i34 += (i33 * i33);
                                    Test.instanceCount *= i33;
                                    fArr1[i31 - 1] = -112;
                                    Test.instanceCount = i34;
                                    Test.instanceCount += iFld;
                                    f3 += (-53215 + (i33 * i33));
                                    iArr3[i31][i32 + 1] = 38;
                                    iFld += i33;
                                    Test.instanceCount += (i33 | Test.instanceCount);
                            }
                            i34 = i33;
                            Test.instanceCount >>= i30;
                            break;
                        default:
                            iFld1 += (i33 * i33);
                    }
                }
            } while (++i32 < 23);
        } while (++i31 < 223);
        FuzzerUtils.out.println("f3 i29 i30 = " + Float.floatToIntBits(f3) + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 s3 d4 = " + i34 + "," + s3 + "," + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("dArr1 iArr3 fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + "," + FuzzerUtils.checkSum(iArr3) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.byFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0) + "," + Test.byFld);
        FuzzerUtils.out.println("iFld iFld1 Test.lArrFld = " + iFld + "," + iFld1 + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$7 = false;

    private static Boolean ax$17 = false;

    private static Boolean ax$25 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
