// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.math.BigDecimal;

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = 126L;

    public static volatile byte byFld = 16;

    public static long lFld = 7905351229319655598L;

    public static float fFld = -38.442F;

    public static volatile boolean bFld = true;

    public static short sFld = 5233;

    public int iFld = -11;

    public double dFld = -2.59212;

    public static double[] dArrFld = new double[N];

    public static long[] lArrFld = new long[N];

    public static int[] iArrFld = new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 106.123361);
        FuzzerUtils.init(Test.lArrFld, 1476933157905785742L);
        FuzzerUtils.init(Test.iArrFld, 59132);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth(int i6, long l) {
        if (ax$21) {
            int ax$23 = i6;
            try {
                java.math.BigDecimal ax$22 = new BigDecimal("2");
                try {
                    //
                    // The string representation "1e2147483647", which is equivalent
                    // to 10^Integer.MAX_VALUE, is used to create an augend with an
                    // unscaled value of 1 and a scale of -Integer.MAX_VALUE. The
                    // addend "1" has an unscaled value of 1 with a scale of 0. The
                    // addition is performed exactly and is specified to have a
                    // preferred scale of max(-Integer.MAX_VALUE, 0). As the scale
                    // of the result is 0, a value with Integer.MAX_VALUE + 1 digits
                    // would need to be created. Therefore the next statement is
                    // expected to overflow with an ArithmeticException.
                    //
                    ax$22 = new BigDecimal("1e2147483647").add(new BigDecimal(1));
                    i6++;
                } catch (ArithmeticException ae) {
                }
            } catch (Throwable ax$24) {
            } finally {
                i6 = ax$23;
            }
            return -5399414010083525515L;
        }
        int i7 = 204, i8 = 12, i9 = -216, i10 = -3, i11 = 18412, i12 = 142, i13 = -11, i14 = -2947, i15 = 63, i16 = 129, i17 = -10, iArr[] = new int[N];
        boolean b = false;
        double d = 79.8811;
        short s = -14913;
        byte[] byArr = new byte[N];
        float[] fArr = new float[N];
        FuzzerUtils.init(byArr, (byte) -71);
        FuzzerUtils.init(fArr, 0.1017F);
        FuzzerUtils.init(iArr, 56833);
        i6 = i6;
        for (i7 = 122; i7 > 1; i7--) {
            for (i9 = 1; i9 < 5; i9++) {
                l += (((i9 * Test.instanceCount) + i10) - i10);
                switch((i9 % 4) + 58) {
                    case 58:
                        if (i6 != 0) {
                        }
                        i11 = 1;
                        while (++i11 < 2) {
                            b = b;
                            Test.instanceCount <<= -139;
                            byArr[i9] *= (byte) i6;
                            fArr[i7 - 1] -= i9;
                        }
                        i8 >>= -189;
                        Test.lFld -= (long) -3.247F;
                        Test.fFld += (i9 - i11);
                        i6 += (-1 + (i9 * i9));
                        i10 = i8;
                        break;
                    case 59:
                        for (i12 = 1; i12 < 2; i12++) {
                            Test.fFld += i12;
                            d -= Test.fFld;
                        }
                        i8 -= i12;
                        i13 >>= i9;
                        for (i14 = 2; i14 > 1; i14--) {
                            i8 = i9;
                            Test.lFld %= (i11 | 1);
                            iArr[i7] = (int) Test.lFld;
                            i6 = (int) Test.lFld;
                            iArr[i9] <<= -6;
                            i8 >>= s;
                        }
                        Test.fFld += (((i9 * i7) + Test.instanceCount) - Test.fFld);
                        i10 += (int) -78.126763;
                        break;
                    case 60:
                        for (i16 = 1; i16 < 2; i16++) {
                            Test.lArrFld[i7 + 1] = i11;
                            i6 >>= -4;
                            i13 <<= (int) Test.instanceCount;
                            i15 = i14;
                            Test.lFld = (long) d;
                            if (b)
                                continue;
                        }
                        break;
                    case 61:
                        Test.instanceCount += Test.lFld;
                        break;
                }
            }
        }
        long meth_res = i6 + l + i7 + i8 + i9 + i10 + i11 + (b ? 1 : 0) + i12 + i13 + Double.doubleToLongBits(d) + i14 + i15 + s + i16 + i17 + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth(int i2, int i3) {
        int i4 = 6, i5 = -11665, i18 = -61862, i19 = -31685, i20 = -22029, i21 = 226, i22 = -13;
        double d1 = 1.82373;
        short s1 = 23085;
        long l1 = -15153L;
        try {
            for (i4 = 1; 233 > i4; ++i4) {
                i3 = (int) (((i5 + i3) + (Test.dArrFld[i4] += Test.byFld)) + ((i3 * i5) - (-lMeth(-12210, -2261000871L))));
                Test.instanceCount = (long) Test.fFld;
                d1 = i2;
                Test.lFld = i5;
                if (Test.bFld)
                    continue;
            }
            for (i18 = 4; i18 < 176; i18++) {
                Test.byFld += (byte) 98;
                Test.iArrFld[i18 - 1] = (int) Test.fFld;
                Test.lFld <<= Test.lFld;
                switch(((i18 % 1) * 5) + 113) {
                    case 117:
                        if (i19 != 0) {
                            vMeth_check_sum += i2 + i3 + i4 + i5 + Double.doubleToLongBits(d1) + i18 + i19 + i20 + i21 + i22 + s1 + l1;
                            return;
                        }
                        Test.lFld += i18;
                        Test.instanceCount += (156 + (i18 * i18));
                        i5 = 204;
                        for (i20 = 1; i20 < 3; i20++) {
                            Test.fFld -= Test.fFld;
                            i3 >>>= i4;
                            if (Test.bFld)
                                break;
                            Test.iArrFld = Test.iArrFld;
                            i21 += i4;
                        }
                        i19 += -23421;
                        Test.instanceCount <<= i2;
                        break;
                    default:
                        Test.lFld = 1400353909L;
                        i22 = 1;
                        {
                            java.io.PrintStream ax$0 = System.out;
                            java.io.PrintStream ax$1 = System.err;
                            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                            {
                                boolean ax$4 = false;
                                for (int ax$3 = -2530; ax$3 < 5872; ax$3 += 2) {
                                    if (!ax$4) {
                                        ax$4 = true;
                                        {
                                            System.setOut(ax$0);
                                            System.setErr(ax$1);
                                            while (++i22 < 3) {
                                                i3 += (i22 ^ i22);
                                                i3 += (int) d1;
                                            }
                                            System.setOut(ax$2);
                                            System.setErr(ax$2);
                                        }
                                    }
                                }
                            }
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                        }
                }
                try {
                    Test.iArrFld[i18 - 1] = (-20 % i3);
                    i19 = (-20599 / i22);
                    i5 = (9 % i5);
                } catch (ArithmeticException a_e) {
                }
                s1 = (short) i21;
                l1 = 1;
                do {
                    i19 %= -174;
                    switch(((i3 >>> 1) % 2) + 40) {
                        case 40:
                            Test.lFld -= 32006L;
                            break;
                        case 41:
                            Test.byFld += (byte) (l1 * l1);
                            i5 += (int) (l1 * Test.lFld);
                            i5 >>= i22;
                            break;
                        default:
                            if (i21 != 0) {
                                vMeth_check_sum += i2 + i3 + i4 + i5 + Double.doubleToLongBits(d1) + i18 + i19 + i20 + i21 + i22 + s1 + l1;
                                return;
                            }
                    }
                } while (++l1 < 3);
            }
        } catch (NegativeArraySizeException exc1) {
            Test.bFld = Test.bFld;
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + Double.doubleToLongBits(d1) + i18 + i19 + i20 + i21 + i22 + s1 + l1;
    }

    public static int iMeth() {
        int i = 3, i1 = -17233, i23 = -16095, i24 = -25899, i25 = 63838;
        double d2 = 29.64572;
        byte[][] byArr1 = new byte[N][N];
        FuzzerUtils.init(byArr1, (byte) -40);
        for (i = 13; i < 221; ++i) {
            vMeth(i1, i1);
            Test.lFld += i1;
            i1 = -42459;
            Test.sFld = (short) i;
            i1 += i;
            i23 = 1;
            {
                java.io.PrintStream ax$5 = System.out;
                java.io.PrintStream ax$6 = System.err;
                java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$7);
                System.setErr(ax$7);
                {
                    boolean ax$15 = false;
                    for (int ax$14 = -4048; ax$14 < 4487; ax$14 += 4) {
                        if (!ax$15) {
                            ax$15 = true;
                            {
                                System.setOut(ax$5);
                                System.setErr(ax$6);
                                while (++i23 < 3) {
                                    for (i24 = 1; 1 > i24; i24++) {
                                        i1 += (18077 + (i24 * i24));
                                        Test.instanceCount |= i;
                                        if (Test.bFld) {
                                            i25 += i24;
                                            i25 = i24;
                                        }
                                        byArr1[i23][i23 + 1] = (byte) i25;
                                        switch((((i >>> 1) % 10) * 5) + 2) {
                                            case 6:
                                                Test.lFld += (long) Test.fFld;
                                                d2 = Test.fFld;
                                                i1 += (i24 + i);
                                                Test.fFld += i23;
                                                i25 += (((i24 * Test.lFld) + Test.lFld) - i1);
                                                Test.lFld *= 245;
                                                Test.bFld = Test.bFld;
                                                Test.iArrFld[i23 + 1] += (int) Test.fFld;
                                                Test.iArrFld[(i >>> 1) % N] = i24;
                                                Test.sFld >>= (short) i25;
                                                i25 += (i24 | i24);
                                                i25 >>>= i25;
                                                break;
                                            case 33:
                                                i1 <<= i25;
                                                Test.iArrFld[i23 - 1] >>>= i24;
                                                i25 = i24;
                                                d2 = Test.instanceCount;
                                                Test.lArrFld[i24 - 1] -= (long) Test.fFld;
                                                Test.iArrFld[i24 + 1] = i;
                                                Test.fFld -= 11;
                                                i1 += (i24 * i24);
                                                Test.iArrFld = FuzzerUtils.int1array(N, (int) 18216);
                                                i1 /= -227;
                                            case 19:
                                                d2 -= Test.lFld;
                                                break;
                                            case 34:
                                                i25 = i;
                                                break;
                                            case 23:
                                            case 44:
                                                i25 += (((i24 * i24) + i24) - Test.fFld);
                                                break;
                                            case 15:
                                                i1 >>= -10;
                                                break;
                                            case 45:
                                                Test.lFld <<= i24;
                                                break;
                                            case 10:
                                                i1 = -9;
                                            case 3:
                                                Test.lFld = i23;
                                                break;
                                        }
                                    }
                                }
                                System.setOut(ax$7);
                                System.setErr(ax$7);
                            }
                        }
                        int ax$12 = i1;
                        try {
                            byte[] ax$8 = new byte[i1];
                            int ax$11 = ax$8.length;
                            int ax$10 = ax$11 - 1;
                            for (int ax$9 = 0; ax$9 < ax$11; ax$9++) {
                                ax$8[ax$10--] = (byte) 0xff;
                            }
                        } catch (Throwable ax$13) {
                        } finally {
                            i1 = ax$12;
                        }
                    }
                }
                System.setOut(ax$5);
                System.setErr(ax$6);
            }
        }
        long meth_res = i + i1 + i23 + i24 + i25 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(byArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        if (ax$30) {
            try {
                int[] ax$32 = new int[20];
                int[] ax$33 = new int[51];
                for (int ax$34 = 0; ax$34 < 100; ax$34++) {
                    int ax$31 = 12345 * ax$33[ax$34];
                    ax$32[ax$34] -= ax$31;
                    ax$33[ax$34] = ax$31;
                }
            } catch (Throwable ax$35) {
            } finally {
            }
            return;
        }
        int i26 = 6, i28 = -95, i29 = 20498, i30 = 15171, i31 = 38118, i32 = 8, i33 = 14145, i34 = -1, iArr1[][] = new int[N][N];
        float[][] fArr1 = new float[N][N];
        FuzzerUtils.init(fArr1, 1.599F);
        FuzzerUtils.init(iArr1, 3);
        iMeth();
        iFld = iFld;
        i26 = 1;
        do {
            dFld -= iFld;
            Test.iArrFld[i26 + 1] -= iFld;
        } while (++i26 < 150);
        fArr1[(iFld >>> 1) % N][(19058 >>> 1) % N] = i26;
        for (int i27 : Test.iArrFld) {
            fArr1[(iFld >>> 1) % N][(i26 >>> 1) % N] -= -2.477F;
            i28 = 1;
            do {
                Test.fFld += (1297682939L + (i28 * i28));
                for (i29 = 1; i29 < 1; ++i29) {
                    Test.lFld += (i29 * i30);
                    i30 += (i29 - i27);
                    Test.instanceCount = Test.instanceCount;
                    i27 += i29;
                    Test.fFld += i27;
                    Test.iArrFld[i29] -= Test.byFld;
                    i30 += i29;
                    iFld ^= -20730;
                    i30 += -26593;
                    i30 = (int) Test.lFld;
                }
                i30 = Test.sFld;
                for (i31 = 1; i31 < 1; ++i31) {
                    iArr1 = iArr1;
                    try {
                        iFld = (Test.iArrFld[i31 + 1] % -44551);
                        i32 = (901915046 / i31);
                        Test.iArrFld[i31] = (i31 % -58410);
                    } catch (ArithmeticException a_e) {
                    }
                    i30 += (i31 * i31);
                    Test.instanceCount &= iFld;
                    i32 += (i31 * i31);
                    Test.byFld += (byte) (i31 * i31);
                    i30 = -9;
                    i27 += (i31 ^ Test.instanceCount);
                    fArr1[i31][i31 - 1] = Test.instanceCount;
                    i32 <<= 3466;
                    dFld = i31;
                    if (Test.bFld)
                        continue;
                }
                i27 += i30;
                Test.lFld += (((i28 * Test.instanceCount) + i26) - i28);
                i30 += (i28 * i28);
                switch(((i28 % 8) * 5) + 18) {
                    case 29:
                        for (i33 = 1; i33 < 1; i33++) {
                            Test.fFld += (39638 + (i33 * i33));
                            Test.lFld -= Test.lFld;
                            if (Test.bFld)
                                break;
                            i30 += i33;
                            Test.instanceCount = i34;
                            Test.iArrFld[i28] += i30;
                            Test.lFld += i34;
                            if (false) {
                                Test.byFld = Test.byFld;
                                i34 += (i33 * i26);
                                i30 = (int) Test.instanceCount;
                                i27 = i28;
                                fArr1[i33][i28 + 1] += 578;
                                i32 *= i29;
                                switch((i33 % 2) + 32) {
                                    case 32:
                                        Test.instanceCount -= iFld;
                                        iFld >>>= 45153;
                                        iFld += (((i33 * i31) + Test.fFld) - i26);
                                        Test.fFld = Test.fFld;
                                        break;
                                    case 33:
                                        iFld <<= i27;
                                        Test.iArrFld = iArr1[i33 + 1];
                                        Test.bFld = Test.bFld;
                                        Test.fFld += (i33 * i31);
                                        i34 >>= i32;
                                        i32 += (int) (-48717097L + (i33 * i33));
                                        Test.lFld <<= i27;
                                        i30 -= (int) -67.106495;
                                        i32 = i31;
                                        Test.iArrFld[i33 + 1] = iFld;
                                        dFld = -8;
                                        Test.lFld += (long) Test.fFld;
                                        i32 = i27;
                                        i27 = (int) Test.lFld;
                                        Test.instanceCount += (i33 * i33);
                                        break;
                                }
                                i32 += (((i33 * Test.fFld) + Test.lFld) - i33);
                            } else if (Test.bFld) {
                                Test.bFld = Test.bFld;
                            }
                        }
                        break;
                    case 44:
                        i32 -= (int) dFld;
                        break;
                    case 47:
                        Test.lArrFld[i28 - 1] = iFld;
                        break;
                    case 40:
                        try {
                            i30 = (Test.iArrFld[i28] % -210);
                            Test.iArrFld[i28 + 1] = (i28 / i33);
                            i30 = (9869 % i33);
                        } catch (ArithmeticException a_e) {
                        }
                    case 53:
                        i30 += (((i28 * Test.byFld) + i32) - Test.sFld);
                        break;
                    case 48:
                        i34 -= i32;
                    case 28:
                        Test.instanceCount += (-8146141615008565229L + (i28 * i28));
                        break;
                    case 20:
                        iFld = i32;
                        break;
                }
            } while (++i28 < 20);
        }
        FuzzerUtils.out.println("i26 i28 i29 = " + i26 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 fArr1 = " + i33 + "," + i34 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("iArr1 = " + FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.lFld = " + Test.instanceCount + "," + Test.byFld + "," + Test.lFld);
        FuzzerUtils.out.println("Test.fFld Test.bFld Test.sFld = " + Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0) + "," + Test.sFld);
        FuzzerUtils.out.println("iFld dFld Test.dArrFld = " + iFld + "," + Double.doubleToLongBits(dFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        {
            java.io.PrintStream ax$16 = System.out;
            java.io.PrintStream ax$17 = System.err;
            java.io.PrintStream ax$18 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$18);
            System.setErr(ax$18);
            {
                boolean ax$20 = false;
                for (int ax$19 = -3869; ax$19 < 1919; ax$19 += 5) {
                    if (!ax$20) {
                        ax$20 = true;
                        {
                            System.setOut(ax$16);
                            System.setErr(ax$17);
                            try {
                                Test _instance = new Test();
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                            } catch (Exception ex) {
                                FuzzerUtils.out.println(ex.getClass().getCanonicalName());
                            }
                            System.setOut(ax$18);
                            System.setErr(ax$18);
                        }
                    }
                }
            }
            System.setOut(ax$16);
            System.setErr(ax$17);
        }
    }

    private static Boolean ax$21 = false;

    private static Boolean ax$30 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
