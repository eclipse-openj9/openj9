// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.List;
import java.util.Random;
import java.util.Collections;
import java.util.ArrayList;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 3423872038L;

    public static int iFld = 53;

    public static double dFld = -72.116663;

    public static byte byFld = -32;

    public static int iFld1 = 72;

    public static boolean bFld = false;

    public static volatile float fFld = 1.565F;

    public long lFld = -52792L;

    public static volatile byte[] byArrFld = new byte[N];

    public static volatile int[] iArrFld = new int[N];

    public long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte) -22);
        FuzzerUtils.init(Test.iArrFld, 14);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1) {
        long l = -113L, lArr[] = new long[N];
        int i = -2877, i1 = 18287, i2 = 50716, i3 = 187, i4 = -8, i5 = 138, i6 = -16282, i7 = 202, iArr[] = new int[N];
        short s = 9191;
        boolean b = false;
        double d3 = -30.47732;
        FuzzerUtils.init(lArr, 445252228063746301L);
        FuzzerUtils.init(iArr, 10267);
        for (l = 4; 138 > l; ++l) {
            f1 = i;
        }
        Test.iFld >>= i;
        i = Test.iFld;
        i >>= s;
        for (i1 = 9; i1 < 191; ++i1) {
            for (i3 = i1; i3 < 3; ++i3) {
                double d2 = 1.44487;
                b = b;
                if (b) {
                    i = (int) l;
                    i = (int) Test.instanceCount;
                    if (b)
                        continue;
                    {
                        java.io.PrintStream ax$93 = System.out;
                        java.io.PrintStream ax$94 = System.err;
                        java.io.PrintStream ax$95 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$95);
                        System.setErr(ax$95);
                        try {
                            for (int ax$91 = -3244; ax$91 < 4759; ax$91 += 1) {
                                long ax$88 = iMeth_check_sum;
                                long ax$89 = l;
                                try {
                                    if (iMeth_check_sum != l)
                                        ;
                                } catch (Throwable ax$90) {
                                } finally {
                                    iMeth_check_sum = ax$88;
                                    l = ax$89;
                                }
                            }
                        } catch (Throwable ax$92) {
                        }
                        System.setOut(ax$93);
                        System.setErr(ax$94);
                    }
                    lArr = lArr;
                    d2 = l;
                    iArr[i3] %= (int) (Test.instanceCount | 1);
                    i2 = i3;
                    Test.byArrFld[i1 + 1] -= (byte) i2;
                    Test.instanceCount += s;
                    Test.iFld += i3;
                } else {
                    Test.iFld >>= i4;
                    i2 += (i3 * i4);
                    i4 += (110 + (i3 * i3));
                    f1 += (float) d2;
                    if (b) {
                        iArr[i1 + 1] <<= s;
                    }
                    i2 = i1;
                }
            }
            for (i5 = i1; i5 < 3; i5++) {
                i6 -= (int) f1;
                Test.iFld = i4;
            }
            Test.dFld -= i;
            for (d3 = 1; d3 < 3; ++d3) {
                Test.instanceCount = l;
                i += Test.byFld;
                Test.instanceCount *= i4;
                i4 = 57591;
                i -= (int) -17.245F;
                Test.instanceCount = l;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + l + i + s + i1 + i2 + i3 + i4 + (b ? 1 : 0) + i5 + i6 + Double.doubleToLongBits(d3) + i7 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(double d, float f, double d1) {
        int i8 = 71, i9 = 56217, i10 = -56958, i12 = 53794, i13 = 69;
        long l1 = -1183725823L, lArr1[] = new long[N];
        float f2 = -1.280F;
        boolean b1 = false;
        short[] sArr = new short[N];
        FuzzerUtils.init(lArr1, 4124324960301233749L);
        FuzzerUtils.init(sArr, (short) 3505);
        iMeth(-7.199F);
        for (i8 = 8; i8 < 208; ++i8) {
            Test.byFld /= (byte) (Test.instanceCount | 1);
            Test.instanceCount = i8;
            f += (((i8 * i9) + Test.iFld) - i9);
            i10 = 1;
            while (++i10 < 3) {
                try {
                    Test.iFld = (Test.iFld % i8);
                    Test.iFld = (Test.iArrFld[i10 + 1] % 91);
                    Test.iArrFld[i10 - 1] = (i10 % i9);
                } catch (ArithmeticException a_e) {
                }
                Test.instanceCount += (((i10 * i10) + i9) - i10);
                i9 -= (int) 8595634183476409137L;
                l1 -= i8;
                i9 += i8;
                Test.instanceCount = Test.iFld;
                Test.iFld = Test.iFld1;
                if (i8 != 0) {
                    vMeth1_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i8 + i9 + i10 + l1 + i12 + i13 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(sArr);
                    return;
                }
                i9 = (int) -2.51F;
                Test.instanceCount += i10;
                lArr1[i10] = Test.iFld1;
                sArr[i10 + 1] += (short) f;
                Test.iFld = i10;
            }
        }
        for (int i11 : Test.iArrFld) {
            i9 = (int) Test.instanceCount;
            for (i12 = 2; 1 < i12; i12--) {
                Test.byFld = (byte) l1;
                Test.iFld1 >>= (int) 4321225748016106563L;
                i11 *= Test.iFld;
            }
            f2 = 1;
            while ((f2 += 3) < 2) {
                b1 = b1;
                Test.iArrFld[(int) (f2)] ^= 29;
                i13 = (int) l1;
                try {
                    i9 = (149 % i12);
                    i11 = (22406 % i13);
                    Test.iArrFld[(int) (f2 - 1)] = (i11 / i12);
                } catch (ArithmeticException a_e) {
                }
                i11 = (int) l1;
                Test.iFld1 = 143;
                Test.iArrFld = Test.iArrFld;
                i9 += (int) (((f2 * i10) + Test.iFld1) - i13);
            }
        }
        Test.iArrFld[(-12 >>> 1) % N] = i12;
        i9 += (int) -63407L;
        Test.instanceCount |= i9;
        vMeth1_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i8 + i9 + i10 + l1 + i12 + i13 + Float.floatToIntBits(f2) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth() {
        if (ax$104) {
            int ax$111 = iFld1;
            int ax$112 = iFld;
            try {
                java.util.List[] ax$106 = new java.util.List[1864];
                java.util.Random ax$108 = new Random(69);
                for (int ax$107 = 0; ax$107 < iFld; ax$107++) {
                    int ax$105 = ax$108.nextInt(10) + 2;
                    List<Integer> ax$110 = new ArrayList<Integer>(ax$105);
                    for (int ax$109 = 1; ax$109 < ax$105; ax$109++) ax$110.add(iFld1++);
                    ax$110.add(iFld1);
                    Collections.shuffle(ax$110);
                    ax$106[ax$107] = ax$110;
                }
            } catch (Throwable ax$113) {
            } finally {
                iFld1 = ax$111;
                iFld = ax$112;
            }
            return;
        }
        int i14 = 7, i15 = 6, i16 = 24688, i17 = -47, i18 = -14, i19 = -186, i20 = -56811, i21 = -8, i22 = 44782, i23 = 14337, i24 = 21428;
        float f3 = 1.502F, fArr[] = new float[N];
        short s1 = -12992;
        boolean[] bArr = new boolean[N];
        long[] lArr2 = new long[N];
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr2, 46312611L);
        FuzzerUtils.init(fArr, 0.757F);
        Test.iFld = (int) Long.reverseBytes(Test.instanceCount);
        vMeth1(Test.dFld, -2.850F, Test.dFld);
        i14 = 1;
        while (++i14 < 180) {
            Test.instanceCount += (i14 * i14);
            for (i15 = 1; 3 > i15; ++i15) {
                boolean b2 = true;
                Test.iFld = (int) 245L;
                Test.iFld += i15;
                Test.instanceCount += (((i15 * f3) + Test.instanceCount) - Test.iFld);
                bArr[i14] = b2;
                switch((i14 % 2) + 96) {
                    case 96:
                        lArr2 = lArr2;
                        break;
                    case 97:
                        if (b2)
                            continue;
                        f3 /= -39732;
                        if (i14 != 0) {
                            vMeth_check_sum += i14 + i15 + i16 + Float.floatToIntBits(f3) + i17 + i18 + i19 + i20 + i21 + i22 + i23 + i24 + s1 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        }
                    default:
                        i16 = Test.iFld;
                        Test.instanceCount = (long) f3;
                        Test.instanceCount = Test.instanceCount;
                        i17 = 1;
                        while (++i17 < 2) {
                            if (b2)
                                continue;
                            fArr[i14 + 1] = Test.iFld1;
                            try {
                                Test.iFld = (-45847 / i16);
                                Test.iFld = (i17 % -60585);
                                Test.iFld = (Test.iArrFld[i14 + 1] / i16);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.iArrFld[i15 + 1] = Test.iFld;
                            Test.iFld += (int) -13764L;
                            f3 *= i16;
                            Test.iArrFld[i17] += i14;
                        }
                        Test.iFld1 = Test.iFld;
                        Test.iFld *= Test.iFld1;
                }
                Test.iFld1 += (((i15 * i18) + Test.iFld1) - Test.iFld1);
            }
        }
        for (i19 = 3; i19 < 174; i19++) {
            Test.instanceCount = Test.byFld;
            for (i21 = 1; i21 < 3; i21++) {
                for (i23 = 1; i23 < 2; ++i23) {
                    Test.iArrFld[i21] |= 39235;
                    i22 += (int) f3;
                    Test.instanceCount ^= s1;
                    lArr2[i19 - 1] += i16;
                }
                if (Test.bFld)
                    break;
            }
        }
        vMeth_check_sum += i14 + i15 + i16 + Float.floatToIntBits(f3) + i17 + i18 + i19 + i20 + i21 + i22 + i23 + i24 + s1 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {
        byte by = 51;
        int i25 = 2, i26 = -242, i27 = 145, i28 = 6372, i29 = 0, i30 = -205, i31 = -82, i32 = -120, i33 = 5, i34 = -22, iArr1[] = new int[N];
        long l2 = -58785L;
        short s2 = 6429, sArr1[] = new short[N];
        boolean b3 = false;
        float[] fArr1 = new float[N];
        FuzzerUtils.init(sArr1, (short) 26988);
        FuzzerUtils.init(fArr1, 1.19F);
        FuzzerUtils.init(iArr1, -1);
        Test.iFld *= by;
        {
            java.io.PrintStream ax$116 = System.out;
            java.io.PrintStream ax$117 = System.err;
            java.io.PrintStream ax$118 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$118);
            System.setErr(ax$118);
            try {
                ax$104 = true;
                for (int ax$114 = 0; ax$114 < 7326; ax$114 += 1) vMeth();
            } catch (java.lang.Throwable ax$115) {
            } finally {
                ax$104 = false;
            }
            System.setOut(ax$116);
            System.setErr(ax$117);
        }
        vMeth();
        Test.fFld = Test.fFld;
        for (i25 = 9; i25 < 221; i25++) {
            for (l2 = 1; l2 < 24; ++l2) {
                sArr1 = sArr1;
                i26 >>>= by;
                Test.iArrFld[i25] += i25;
                Test.iFld >>= s2;
                i28 = 1;
                do {
                    Test.iFld1 += (int) Test.dFld;
                    Test.iFld1 = (int) l2;
                    try {
                        Test.iArrFld[(int) (l2)] = (Test.iFld / Test.iFld);
                        i26 = (i25 % Test.iArrFld[(int) (l2)]);
                        Test.iFld = (47197 / i28);
                    } catch (ArithmeticException a_e) {
                    }
                    Test.iArrFld[i28] = (int) l2;
                    Test.bFld = true;
                    Test.iFld >>>= -31;
                    Test.iFld = i26;
                    if (Test.bFld)
                        break;
                    i27 = (int) Test.instanceCount;
                    Test.iArrFld[i28] = (int) 0L;
                    Test.dFld *= 5.504F;
                    i26 = (int) Test.fFld;
                } while (++i28 < 2);
                {
                    java.io.PrintStream ax$101 = System.out;
                    java.io.PrintStream ax$102 = System.err;
                    java.io.PrintStream ax$103 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$103);
                    System.setErr(ax$103);
                    try {
                        for (int ax$99 = -4371; ax$99 < 1299; ax$99 += 1) {
                            try {
                                java.lang.String ax$97 = "8931797.271363033";
                                if ("aBc".equals(ax$97) == false) {
                                }
                            } catch (Throwable ax$98) {
                            } finally {
                            }
                        }
                    } catch (Throwable ax$100) {
                    }
                    System.setOut(ax$101);
                    System.setErr(ax$102);
                }
                i27 >>= i25;
                Test.bFld = Test.bFld;
            }
            Test.instanceCount += (i25 | i25);
            if (b3) {
                Test.iFld += (i25 * i25);
                for (i29 = 1; 24 > i29; i29 += 3) {
                    i30 += (int) 44.187F;
                    for (i31 = 1; 4 > i31; i31++) {
                        i30 = (int) l2;
                        Test.iFld1 -= i27;
                        i32 += (((i31 * i32) + i29) - i27);
                        Test.iFld += (int) (-71L + (i31 * i31));
                        i26 += (((i31 * i26) + i32) - by);
                        i27 = i25;
                        Test.instanceCount >>= i29;
                        i26 *= i25;
                        i32 *= i31;
                        switch((i29 % 3) + 82) {
                            case 82:
                            case 83:
                                Test.instanceCount += (-53943 + (i31 * i31));
                                fArr1 = fArr1;
                                lArrFld[i29] = i30;
                                i27 <<= i27;
                                break;
                            case 84:
                                i27 = i30;
                                try {
                                    Test.iFld = (i29 / -72);
                                    Test.iFld = (i25 / i26);
                                    iArr1[i31 + 1] = (Test.iArrFld[i31] % 641816270);
                                } catch (ArithmeticException a_e) {
                                }
                                Test.iFld1 *= (int) 187L;
                                if (Test.bFld)
                                    break;
                                i26 >>>= -13;
                                i32 <<= -183;
                                iArr1[i31 - 1] = (int) lFld;
                                Test.bFld = false;
                                iArr1 = FuzzerUtils.int1array(N, (int) 0);
                                Test.bFld = b3;
                                lFld = i29;
                                Test.instanceCount += i28;
                                lFld >>= 163;
                                Test.iFld -= (int) Test.instanceCount;
                            default:
                                Test.fFld = by;
                                if (Test.bFld)
                                    continue;
                                Test.iFld += (((i31 * i25) + Test.iFld) - i26);
                                Test.instanceCount += i25;
                                Test.iFld >>= Test.byFld;
                                i32 += -62753;
                                Test.dFld *= lFld;
                        }
                        i27 *= i25;
                        b3 = false;
                        Test.instanceCount = i32;
                    }
                    lFld >>= i31;
                    for (i33 = 4; 1 < i33; i33 -= 3) {
                        i32 += (((i33 * i25) + i27) - i26);
                        by += (byte) (i33 - lFld);
                        Test.fFld += -1;
                    }
                    iArr1[i29 + 1] = (int) l2;
                    Test.instanceCount = Test.instanceCount;
                }
            } else {
                lArrFld[i25] >>>= i28;
            }
        }
        FuzzerUtils.out.println("by i25 i26 = " + by + "," + i25 + "," + i26);
        FuzzerUtils.out.println("l2 i27 s2 = " + l2 + "," + i27 + "," + s2);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 b3 = " + i31 + "," + i32 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("i33 i34 sArr1 = " + i33 + "," + i34 + "," + FuzzerUtils.checkSum(sArr1));
        FuzzerUtils.out.println("fArr1 iArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," + FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld Test.iFld1 Test.bFld = " + Test.byFld + "," + Test.iFld1 + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld lFld Test.byArrFld = " + Float.floatToIntBits(Test.fFld) + "," + lFld + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("Test.iArrFld lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$104 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
