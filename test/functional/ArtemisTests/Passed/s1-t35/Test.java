// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 3755495056728864508L;

    public static float fFld = 1.850F;

    public static double dFld = -10.28522;

    public static int iFld = 6042;

    public static byte byFld = 65;

    public short sFld = 6227;

    public static volatile int[] iArrFld = new int[N];

    public static volatile short[] sArrFld = new short[N];

    public static int[][] iArrFld1 = new int[N][N];

    public float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -13);
        FuzzerUtils.init(Test.sArrFld, (short) -19945);
        FuzzerUtils.init(Test.iArrFld1, 65);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, int i3, int i4) {
        if (ax$25) {
            int ax$27 = i3;
            byte ax$28 = byFld;
            try {
                char ax$26 = 'c';
                if (ax$26 < byFld)
                    i3 = -1;
                else if (ax$26 > byFld)
                    i3 = 1;
            } catch (Throwable ax$29) {
            } finally {
                i3 = ax$27;
                byFld = ax$28;
            }
            return;
        }
        int i5 = 41, i6 = 3, i7 = -1265, i8 = 154, i9 = -6, i10 = -29667, i11 = 60428, i12 = -77, i13 = 2974, i14 = 7974, iArr[] = new int[N];
        short s = 450;
        byte by = 64;
        float f = 44.866F;
        double[] dArr = new double[N];
        long[] lArr = new long[N];
        FuzzerUtils.init(dArr, 0.74715);
        FuzzerUtils.init(iArr, 184);
        FuzzerUtils.init(lArr, 148L);
        for (i5 = 1; i5 < 121; ++i5) {
            dArr[i5 - 1] -= -89;
            iArr[(i3 >>> 1) % N] = s;
            iArr[i5] = by;
            lArr = lArr;
            dArr[i5] = s;
        }
        for (i7 = 11; i7 < 204; ++i7) {
            iArr[i7 + 1] = (int) Test.instanceCount;
            i6 -= i3;
            i6 += i3;
            for (f = 1; f < 3; f++) {
                i9 <<= -223;
                i9 += (int) (f - i10);
                i10 &= i9;
                Test.fFld *= i9;
                l -= 5;
                i10 += (int) f;
                i6 <<= (int) l;
                Test.instanceCount *= i10;
                l += (long) f;
                Test.fFld += 18052;
                i10 = i10;
                l += (long) (f * f);
            }
            Test.instanceCount += (33526L + (i7 * i7));
            i3 += (((i7 * i4) + l) - Test.fFld);
        }
        for (i11 = 142; i11 > 4; i11 -= 2) {
            i3 = 247;
            for (i13 = i11; i13 < 8; i13++) {
                lArr[i11] -= i13;
                Test.dFld -= f;
                Test.fFld -= by;
                Test.instanceCount += (((i13 * i7) + i7) - Test.fFld);
                if (false)
                    break;
                Test.fFld -= i7;
                i3 *= i5;
                i4 += (((i13 * Test.instanceCount) + i7) - i6);
                i9 *= 11;
            }
        }
        vMeth2_check_sum += l + i3 + i4 + i5 + i6 + s + by + i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i, int i1, int i2) {
        int i15 = 2, i16 = 214, i17 = -57583, i18 = 37336, i19 = -8, i20 = -49158, i21 = -3, i22 = -56176, i23 = 3447;
        byte by1 = 63;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(lArr1, -5L);
        {
            java.io.PrintStream ax$32 = System.out;
            java.io.PrintStream ax$33 = System.err;
            java.io.PrintStream ax$34 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$34);
            System.setErr(ax$34);
            try {
                ax$25 = true;
                for (int ax$30 = 0; ax$30 < 6424; ax$30 += 1) vMeth2(7966195417575530836L, -2091749684, 1540752723);
            } catch (java.lang.Throwable ax$31) {
            } finally {
                ax$25 = false;
            }
            System.setOut(ax$32);
            System.setErr(ax$33);
        }
        vMeth2(Test.instanceCount, i1, i2);
        Test.instanceCount += i1;
        i1 -= i1;
        Test.iArrFld[(i1 >>> 1) % N] += (int) -3L;
        i1 = i;
        i2 ^= i;
        i2 -= -1;
        i2 *= i2;
        i *= (int) Test.dFld;
        Test.iArrFld[(i1 >>> 1) % N] = (int) Test.dFld;
        Test.sArrFld[(i2 >>> 1) % N] += (short) -3162;
        for (i15 = 2; 114 > i15; i15++) {
            Test.iArrFld[i15 - 1] <<= i17;
            for (i18 = 1; i18 < 5; i18++) {
                Test.iArrFld[i15] = i17;
                lArr1[i15 + 1] >>= Test.instanceCount;
                i = -8;
                i -= (int) Test.dFld;
            }
            Test.iArrFld[i15] *= i16;
            i2 = (int) Test.instanceCount;
            Test.fFld = i15;
            switch(((i15 % 2) * 5) + 3) {
                case 13:
                    for (i20 = 1; i20 < 5; i20++) {
                        i += i20;
                        for (i22 = i20; i22 < 2; i22++) {
                            Test.fFld += (((i22 * Test.iFld) + Test.instanceCount) - Test.instanceCount);
                            i2 -= (int) Test.fFld;
                            Test.iArrFld[i22 - 1] -= (int) Test.fFld;
                            Test.instanceCount += (long) Test.fFld;
                            i17 = (int) Test.fFld;
                            Test.instanceCount += (((i22 * i16) + Test.instanceCount) - i20);
                            i19 = i16;
                            Test.instanceCount -= by1;
                            Test.instanceCount = i16;
                            i19 = (int) Test.instanceCount;
                            Test.instanceCount = i20;
                            Test.instanceCount += (i22 ^ i2);
                        }
                    }
                    break;
                case 8:
                    try {
                        i2 = (-207 / i15);
                        i17 = (i19 / 28056);
                        i16 = (39137 / Test.iArrFld[i15 + 1]);
                    } catch (ArithmeticException a_e) {
                    }
                    break;
                default:
                    Test.instanceCount *= -118;
            }
            {
                java.io.PrintStream ax$5 = System.out;
                java.io.PrintStream ax$6 = System.err;
                java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$7);
                System.setErr(ax$7);
                try {
                    for (int ax$3 = -822; ax$3 < 6298; ax$3 += 1) {
                        int ax$1 = i19;
                        try {
                            int[] ax$0 = new int[51];
                            ax$0[i19] = Math.abs(ax$0[i19]);
                        } catch (Throwable ax$2) {
                        } finally {
                            i19 = ax$1;
                        }
                    }
                } catch (Throwable ax$4) {
                }
                System.setOut(ax$5);
                System.setErr(ax$6);
            }
        }
        vMeth1_check_sum += i + i1 + i2 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22 + i23 + by1 + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth() {
        if (ax$35) {
            int ax$39 = iFld;
            try {
                byte[] ax$38 = new byte[16];
                byte[] ax$36 = new byte[1 << 14];
                byte[] ax$37 = new byte[5];
                ax$38[iFld] = (byte) (ax$36[iFld] / ax$37[iFld]);
            } catch (Throwable ax$40) {
            } finally {
                iFld = ax$39;
            }
            return;
        }
        int i24 = 0, i25 = 24905, i26 = 43, i27 = -31743, i28 = 32055, i29 = -14, i30 = 141;
        byte by2 = 106, byArr[] = new byte[N];
        boolean b = true;
        double[][] dArr1 = new double[N][N];
        long[] lArr2 = new long[N];
        float[] fArr = new float[N];
        FuzzerUtils.init(dArr1, -64.23784);
        FuzzerUtils.init(byArr, (byte) 64);
        FuzzerUtils.init(lArr2, 10L);
        FuzzerUtils.init(fArr, -1.602F);
        vMeth1(Test.iFld, Test.iFld, Test.iFld);
        Test.iFld = Test.byFld;
        for (i24 = 7; i24 < 138; ++i24) {
            switch(((Test.iFld >>> 1) % 2) + 47) {
                case 47:
                    dArr1[i24][i24 - 1] = Test.dFld;
                    i26 = 4;
                    while (--i26 > 0) {
                        for (i27 = 1; i27 < 1; ++i27) {
                            Test.instanceCount -= -52802;
                            i28 += (221 + (i27 * i27));
                            Test.instanceCount = i25;
                            Test.fFld -= i24;
                            i25 = -73;
                            Test.dFld -= by2;
                            i25 *= (int) Test.instanceCount;
                            byArr[i24 + 1] -= (byte) i27;
                        }
                        Test.instanceCount += i27;
                        Test.iArrFld[i26] >>>= (int) Test.instanceCount;
                        i28 += 40;
                        Test.iFld <<= Test.byFld;
                        i28 += (i26 ^ Test.iFld);
                        if (i26 != 0) {
                            vMeth_check_sum += i24 + i25 + i26 + i27 + i28 + by2 + i29 + i30 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        }
                        for (i29 = 1; 1 > i29; ++i29) {
                            i25 <<= i30;
                            b = b;
                            i25 = 227;
                            Test.instanceCount += -162;
                            switch((i24 % 4) + 6) {
                                case 6:
                                    switch((i29 % 7) + 7) {
                                        case 7:
                                            i25 -= (int) Test.dFld;
                                            dArr1[i26][i24] = Test.fFld;
                                            Test.iArrFld1 = Test.iArrFld1;
                                            i28 -= 27760;
                                            break;
                                        case 8:
                                            b = true;
                                            i30 += (i29 + Test.iFld);
                                            Test.iFld += i25;
                                            i30 = (int) Test.instanceCount;
                                            lArr2[i29] -= -169835375L;
                                            break;
                                        case 9:
                                            Test.iFld |= -70;
                                        case 10:
                                            Test.iArrFld[i26 + 1] += (int) -72.76861;
                                            break;
                                        case 11:
                                            Test.iArrFld[i29 + 1] -= i28;
                                        case 12:
                                            Test.iFld = (int) 14L;
                                            break;
                                        case 13:
                                            i25 += i24;
                                            break;
                                        default:
                                            Test.instanceCount *= i26;
                                    }
                                    break;
                                case 7:
                                    i25 -= i29;
                                    break;
                                case 8:
                                    i25 += i29;
                                    break;
                                case 9:
                                    i28 = i26;
                                    break;
                            }
                        }
                    }
                    break;
                case 48:
                default:
                    fArr[i24 - 1] = -1;
            }
        }
        vMeth_check_sum += i24 + i25 + i26 + i27 + i28 + by2 + i29 + i30 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {
        int i31 = 0, i32 = 6, i33 = -13, i34 = 161, i35 = -214, i36 = -35632, i37 = 204, i38 = -6173;
        boolean b1 = false;
        long[] lArr3 = new long[N];
        FuzzerUtils.init(lArr3, -49012L);
        {
            java.io.PrintStream ax$43 = System.out;
            java.io.PrintStream ax$44 = System.err;
            java.io.PrintStream ax$45 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$45);
            System.setErr(ax$45);
            try {
                ax$35 = true;
                for (int ax$41 = 0; ax$41 < 7661; ax$41 += 1) vMeth();
            } catch (java.lang.Throwable ax$42) {
            } finally {
                ax$35 = false;
            }
            System.setOut(ax$43);
            System.setErr(ax$44);
        }
        vMeth();
        for (i31 = 9; i31 < 170; i31 += 3) {
            Test.fFld = Test.iFld;
            for (i33 = 95; i33 > 4; --i33) {
                i32 += (int) Test.dFld;
                Test.iFld = 4;
                i35 = 1;
                while (++i35 < 2) {
                    Test.iFld ^= i32;
                    i34 -= (int) Test.instanceCount;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int) -55221);
                    Test.fFld = Test.iFld;
                    Test.fFld += i35;
                    Test.instanceCount -= 9L;
                    i34 -= (int) Test.instanceCount;
                    Test.iArrFld[i33] *= (int) Test.fFld;
                    i32 >>= i31;
                    lArr3 = FuzzerUtils.long1array(N, (long) -9208714435024551453L);
                    Test.iFld *= (int) 7L;
                    i32 += i35;
                }
                Test.iFld -= (int) Test.instanceCount;
                i32 >>>= i34;
                Test.fFld = Test.iFld;
                if (b1)
                    break;
                Test.iFld = Test.iFld;
                try {
                    i34 = (i32 % -121);
                    i34 = (i34 / i35);
                    Test.iArrFld1[i33][i31 + 1] = (-465354095 / Test.iArrFld1[i33 - 1][i31 - 1]);
                } catch (ArithmeticException a_e) {
                }
                Test.byFld = (byte) 31.757F;
            }
            Test.instanceCount = (long) Test.dFld;
            i36 = 1;
            do {
                i34 = i35;
                i34 = 4;
                i32 = i36;
                switch(((i36 % 3) * 5) + 41) {
                    case 50:
                        Test.instanceCount = 53645;
                        Test.fFld = -50;
                        Test.iArrFld[i31 + 1] = i31;
                        Test.byFld += (byte) i34;
                        Test.iArrFld1 = Test.iArrFld1;
                        for (i37 = i36; i37 < 1; ++i37) {
                            i38 >>>= i36;
                            Test.byFld -= (byte) Test.dFld;
                            i32 += (3 + (i37 * i37));
                            switch(((i31 % 6) * 5) + 87) {
                                case 103:
                                    i32 = -11;
                                    Test.iFld = i31;
                                    Test.instanceCount = (long) Test.fFld;
                                    lArr3[i37 - 1] *= i32;
                                    Test.iFld = 16672;
                                    Test.byFld += (byte) (i37 - i32);
                                    i38 -= i32;
                                    i32 ^= Test.iFld;
                                    fArrFld[i36 - 1] = i37;
                                    break;
                                case 102:
                                    i38 = i32;
                                    Test.instanceCount -= Test.instanceCount;
                                    Test.instanceCount -= sFld;
                                    Test.instanceCount += Test.instanceCount;
                                    Test.byFld += (byte) i37;
                                    i38 = 244;
                                    i34 += i37;
                                    if (false)
                                        continue;
                                    Test.dFld -= i35;
                                    i34 >>= i37;
                                    Test.sArrFld[i36] -= (short) 0;
                                    i32 += i37;
                                    Test.iFld = i36;
                                    break;
                                case 96:
                                    lArr3 = lArr3;
                                    Test.instanceCount += (-14 + (i37 * i37));
                                    Test.instanceCount += (i37 | i34);
                                    switch(((i37 % 10) * 5) + 49) {
                                        case 83:
                                            Test.iFld = (int) Test.instanceCount;
                                            break;
                                        case 73:
                                            i38 += (((i37 * Test.instanceCount) + Test.byFld) - Test.instanceCount);
                                            i38 += (i37 * i37);
                                            Test.instanceCount += i36;
                                            Test.instanceCount -= 1359335951L;
                                            i38 %= (int) (Test.byFld | 1);
                                            Test.byFld -= (byte) Test.fFld;
                                            break;
                                        case 59:
                                            Test.instanceCount -= -48;
                                            break;
                                        case 71:
                                            i34 = (int) Test.fFld;
                                            break;
                                        case 75:
                                            if (b1)
                                                continue;
                                            break;
                                        case 87:
                                            Test.iFld *= (int) 226L;
                                            break;
                                        case 68:
                                            Test.fFld -= 13;
                                            break;
                                        case 79:
                                            Test.iFld += i37;
                                            break;
                                        case 61:
                                            i34 = sFld;
                                            break;
                                        case 80:
                                            Test.iFld -= Test.byFld;
                                            break;
                                    }
                                    break;
                                case 89:
                                    i34 *= (int) Test.instanceCount;
                                    break;
                                case 98:
                                    i32 = (int) 3905066761416326780L;
                                    break;
                                case 108:
                                    i32 *= (int) Test.instanceCount;
                                    break;
                            }
                            {
                                java.io.PrintStream ax$12 = System.out;
                                java.io.PrintStream ax$13 = System.err;
                                java.io.PrintStream ax$14 = new java.io.PrintStream(new java.io.OutputStream() {

                                    @Override
                                    public void write(int b) throws java.io.IOException {
                                        // DO NOTHING: DISCARD ALL OUTPUTS
                                    }
                                });
                                System.setOut(ax$14);
                                System.setErr(ax$14);
                                try {
                                    for (int ax$10 = -3570; ax$10 < 4084; ax$10 += 1) {
                                        try {
                                            int ax$8 = 0x88776655;
                                            ax$8--;
                                        } catch (Throwable ax$9) {
                                        } finally {
                                        }
                                    }
                                } catch (Throwable ax$11) {
                                }
                                System.setOut(ax$12);
                                System.setErr(ax$13);
                            }
                        }
                        break;
                    case 56:
                        i32 += (int) (-5031311352501089634L + (i36 * i36));
                    case 45:
                        if (b1)
                            continue;
                        break;
                }
            } while (++i36 < 95);
        }
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 b1 = " + i34 + "," + i35 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i36 i37 i38 = " + i36 + "," + i37 + "," + i38);
        FuzzerUtils.out.println("lArr3 = " + FuzzerUtils.checkSum(lArr3));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iFld Test.byFld sFld = " + Test.iFld + "," + Test.byFld + "," + sFld);
        FuzzerUtils.out.println("Test.iArrFld Test.sArrFld Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld1));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            {
                java.io.PrintStream ax$15 = System.out;
                java.io.PrintStream ax$16 = System.err;
                java.io.PrintStream ax$17 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$17);
                System.setErr(ax$17);
                {
                    boolean ax$24 = false;
                    for (int ax$23 = -1117; ax$23 < 7054; ax$23 += 6) {
                        if (!ax$24) {
                            ax$24 = true;
                            {
                                System.setOut(ax$15);
                                System.setErr(ax$16);
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                                System.setOut(ax$17);
                                System.setErr(ax$17);
                            }
                        }
                        int ax$20 = iFld;
                        float ax$21 = fFld;
                        try {
                            float[] ax$18 = { -0.0f, -0.0f, 0.0f, -0.0f };
                            float[] ax$19 = new float[10];
                            ax$19[iFld] = (ax$18[iFld] * fFld);
                        } catch (Throwable ax$22) {
                        } finally {
                            iFld = ax$20;
                            fFld = ax$21;
                        }
                    }
                }
                System.setOut(ax$15);
                System.setErr(ax$16);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$25 = false;

    private static Boolean ax$35 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
