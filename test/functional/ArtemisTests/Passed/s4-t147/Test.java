// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.security.cert.CertStore;
import java.security.cert.LDAPCertStoreParameters;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 28061L;

    public static float fFld = 1.670F;

    public static int iFld = 6295;

    public static boolean bFld = true;

    public static int iFld1 = 76;

    public long lFld = -3597593350143903564L;

    public short sFld = 1868;

    public static int[] iArrFld = new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 38350);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i8) {
        int i9 = 8, i10 = -33808, i11 = -2560, i12 = -14464, i13 = 248, i14 = -37838, i15 = -2, i16 = -193, i17 = 5084, i18 = 5, i19 = -6445, i20 = -55;
        float f = -100.149F;
        double d = -83.102185, d1 = 1.7852, dArr[] = new double[N];
        short s = -30797;
        byte by = -114;
        FuzzerUtils.init(dArr, 23.99589);
        Test.instanceCount += (long) -10.368F;
        for (i9 = 4; i9 < 100; ++i9) {
            f = Test.instanceCount;
            d = 6;
            do {
                d1 = -444336822028149209L;
                Test.instanceCount += (long) (d * i8);
                i8 = -12;
                i10 = (int) -57607L;
                s = (short) i8;
                Test.iArrFld = Test.iArrFld;
                i8 = i9;
                i10 += (int) d;
                Test.iArrFld[(int) (d)] = (int) Test.instanceCount;
            } while ((d -= 2) > 0);
        }
        for (i11 = 5; i11 < 100; ++i11) {
            try {
                Test.iArrFld[i11 - 1] = (-1900887879 % i8);
                Test.iArrFld[i11 + 1] = (-37877 / i12);
                i12 = (i8 % i9);
            } catch (ArithmeticException a_e) {
            }
            for (i13 = 1; 6 > i13; i13++) {
                Test.instanceCount = -19;
                i14 += (((i13 * f) + Test.instanceCount) - Test.instanceCount);
                i12 -= (int) Test.instanceCount;
                Test.iArrFld[i11 + 1] = (int) Test.instanceCount;
                i12 |= 52;
                for (i15 = 1; i15 < 2; i15++) {
                    i14 <<= (int) Test.instanceCount;
                    i16 += i15;
                    d1 += i15;
                    i14 %= (int) (i13 | 1);
                    i10 -= i10;
                    Test.instanceCount += (i15 * i11);
                    f += i15;
                    Test.instanceCount /= (i10 | 1);
                    by += (byte) i15;
                }
                dArr[i13] += i15;
            }
            for (i17 = 1; 6 > i17; i17 += 3) {
                for (i19 = 1; 6 > i19; ++i19) {
                    Test.iArrFld[i17] <<= i10;
                }
                Test.instanceCount = (long) 1.83148;
                i10 += (((i17 * i10) + f) - by);
            }
        }
        long meth_res = i8 + i9 + i10 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + s + i11 + i12 + i13 + i14 + i15 + i16 + by + i17 + i18 + i19 + i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(int i6) {
        boolean b = false;
        int i21 = -8, i22 = 143, i23 = 11, i24 = -73, i25 = -218, i26 = 77, i27 = -13207;
        long l = -6008092224044707599L, lArr[] = new long[N];
        FuzzerUtils.init(lArr, -3958748573L);
        i6 = (-i6);
        for (int i7 : Test.iArrFld) {
            b = bMeth(i6);
            for (i21 = 1; i21 < 2; ++i21) {
                b = b;
            }
            switch(((-53316 >>> 1) % 1) + 90) {
                case 90:
                    for (i23 = 1; i23 < 2; ++i23) {
                        Test.iArrFld[i23] /= (int) (i6 | 1);
                    }
                    Test.iArrFld = Test.iArrFld;
                    for (l = 1; l < 2; ++l) {
                        short s1 = -22122;
                        i25 += (int) (l + l);
                        i25 -= i24;
                        i22 = -54;
                        Test.iArrFld[(int) (l + 1)] -= s1;
                        if (b)
                            break;
                        if (i25 != 0) {
                        }
                        i25 = -4;
                        switch((int) (((l % 2) * 5) + 116)) {
                            case 124:
                                lArr[(int) (l + 1)] = -223;
                                Test.instanceCount *= s1;
                                i26 = 1;
                                while (++i26 < 2) {
                                    i7 <<= i26;
                                    Test.instanceCount <<= i26;
                                    i22 *= s1;
                                    Test.fFld += (((i26 * i24) + l) - l);
                                    i7 += s1;
                                    i24 = (int) Test.fFld;
                                    Test.instanceCount += (i26 * i26);
                                    i6 ^= i7;
                                    i22 >>>= i25;
                                    i22 += i26;
                                    i27 += (int) 93L;
                                    Test.instanceCount = (long) 1.103883;
                                    Test.instanceCount += (i26 * i23);
                                    Test.instanceCount = i7;
                                }
                                i25 = i25;
                                i24 += (int) l;
                                break;
                            case 122:
                                i24 = i25;
                                break;
                        }
                    }
                    break;
            }
        }
        long meth_res = i6 + (b ? 1 : 0) + i21 + i22 + i23 + i24 + l + i25 + i26 + i27 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void vMeth() {
        int i2 = 2, i3 = -9, i4 = 56, i5 = 16, i28 = 39, i29 = 250;
        byte by1 = -26;
        float f1 = 122.707F;
        double d2 = 0.98750, dArr1[] = new double[N];
        short s2 = 10956;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(lArr1, -3159851704L);
        FuzzerUtils.init(dArr1, -84.46300);
        for (i2 = 3; 90 > i2; ++i2) {
            for (i4 = 1; i4 < 6; ++i4) {
                i3 *= (int) (Test.instanceCount - Test.instanceCount);
                Test.iArrFld[i2 + 1] = (int) (iMeth(i3) * Test.instanceCount);
                if (i4 != 0) {
                    vMeth_check_sum += i2 + i3 + i4 + i5 + by1 + Float.floatToIntBits(f1) + i28 + i29 + Double.doubleToLongBits(d2) + s2 + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
                    return;
                }
                i3 += (27143 + (i4 * i4));
                lArr1[i4] += i4;
                i5 -= i4;
                by1 <<= (byte) Test.instanceCount;
                by1 >>= (byte) Test.iFld;
                f1 *= f1;
                Test.instanceCount += -9;
                Test.iFld -= by1;
                for (i28 = 1; 2 > i28; ++i28) {
                    lArr1[i28 + 1] *= i4;
                    i5 <<= Test.iFld;
                    i29 = Test.iFld;
                    dArr1[i28] = Test.iFld;
                    d2 += f1;
                    i29 *= s2;
                    Test.instanceCount -= i4;
                    f1 -= s2;
                    i3 -= (int) Test.fFld;
                    i5 -= (int) Test.instanceCount;
                    Test.fFld += Test.instanceCount;
                    switch((i4 % 2) + 91) {
                        case 91:
                            i5 *= i29;
                            s2 -= (short) Test.instanceCount;
                            i29 = i28;
                            i5 *= s2;
                            if (Test.bFld)
                                continue;
                            i3 -= -79;
                            Test.iArrFld[i4 - 1] -= i28;
                            Test.iArrFld[i28] -= i4;
                            i29 = (int) 14L;
                            i3 = -26078;
                            i5 -= i2;
                            break;
                        case 92:
                            i5 *= i5;
                            break;
                        default:
                            i5 = Test.iFld1;
                    }
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + by1 + Float.floatToIntBits(f1) + i28 + i29 + Double.doubleToLongBits(d2) + s2 + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {
        if (ax$0) {
            try {
                CertStore.getInstance("LDAP", new LDAPCertStoreParameters());
            } catch (Throwable ax$1) {
            } finally {
            }
            return;
        }
        int i = 240, i1 = -13918, i30 = 250, i31 = -11, i32 = 9626, i33 = -228, i34 = -16543, i35 = -254, i36 = -224, i37 = 12850, i38 = 62;
        boolean b1 = false, bArr[] = new boolean[N];
        byte by2 = 0;
        long[] lArr2 = new long[N];
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr2, -1034571370L);
        for (i = 2; i < 220; i++) {
            vMeth();
            bArr[i - 1] = Test.bFld;
            Test.iFld1 = 13;
            Test.iFld1 += (i * i);
            Test.iFld1 <<= Test.iFld1;
        }
        for (i30 = 1; i30 < 113; i30++) {
            Test.instanceCount += i30;
            for (i32 = 2; i32 < 45; ++i32) {
                i1 = (int) Test.instanceCount;
                for (i34 = 1; 2 > i34; i34 += 3) {
                    Test.iFld1 |= i30;
                    Test.instanceCount += i;
                    lFld += i30;
                    Test.iArrFld[i34] %= (int) (i32 | 1);
                    Test.instanceCount = (long) Test.fFld;
                }
                for (i36 = 1; i36 < 2; ++i36) {
                    double d3 = 10.126883;
                    i37 = (int) lFld;
                    i35 = Test.iFld1;
                    Test.iFld -= (int) Test.instanceCount;
                    Test.iArrFld[i30] = i;
                    Test.iArrFld[i36 - 1] >>= i31;
                    switch(((93 >>> 1) % 9) + 47) {
                        case 47:
                            i1 *= (int) lFld;
                            i35 += (i36 * i36);
                            i33 = -109;
                            Test.iArrFld[i30 - 1] -= i32;
                            lFld += -2879018424514142162L;
                            Test.instanceCount = i32;
                            Test.iArrFld[i30] -= sFld;
                            Test.iFld1 += (i36 + lFld);
                        case 48:
                            b1 = b1;
                            break;
                        case 49:
                            Test.iArrFld = FuzzerUtils.int1array(N, (int) -40267);
                            i33 += i35;
                        case 50:
                            Test.iFld = i36;
                            i1 = (int) d3;
                            by2 *= (byte) Test.iFld1;
                            Test.iArrFld[i32 + 1] += i37;
                            Test.iFld1 = i1;
                            i1 += i34;
                            Test.iFld1 = (int) Test.fFld;
                            d3 = lFld;
                            i33 += (i36 * i36);
                        case 51:
                            Test.fFld = -64;
                            if (true) {
                                i1 -= -87;
                                Test.iArrFld = Test.iArrFld;
                                i31 += i30;
                                Test.fFld *= (float) -1.83080;
                                b1 = Test.bFld;
                                Test.instanceCount >>= i32;
                                Test.iArrFld[i36] <<= i34;
                                Test.iFld += Test.iFld;
                                Test.fFld *= i33;
                            }
                            Test.iFld1 = (int) lFld;
                            i37 |= -47017;
                            Test.iFld = (int) d3;
                            lFld += i1;
                        case 52:
                            Test.iFld >>= i1;
                            Test.instanceCount += (-54 + (i36 * i36));
                            Test.iFld += i38;
                            Test.fFld -= i33;
                        case 53:
                            i1 = (int) Test.fFld;
                            Test.iArrFld[i30 - 1] += -14753;
                            switch(((i36 % 1) * 5) + 40) {
                                case 42:
                                    lArr2[i36 - 1] -= (long) 2.106283;
                                    lFld = by2;
                                    Test.iFld1 = (int) -9L;
                                    Test.iArrFld[i32] >>>= i31;
                                    i35 >>= 12866;
                                    switch((i36 % 1) + 124) {
                                        case 124:
                                        default:
                                            Test.iArrFld = Test.iArrFld;
                                    }
                                    Test.iArrFld[i30 - 1] = -18936;
                                    i35 -= i38;
                                    by2 &= (byte) i35;
                                default:
                                    bArr[i32] = b1;
                            }
                            break;
                        case 54:
                            i38 -= i32;
                        case 55:
                            if (Test.bFld)
                                continue;
                        default:
                            Test.iFld = i34;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i i1 i30 = " + i + "," + i1 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 b1 by2 = " + i37 + "," + (b1 ? 1 : 0) + "," + by2);
        FuzzerUtils.out.println("i38 bArr lArr2 = " + i38 + "," + FuzzerUtils.checkSum(bArr) + "," + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.bFld Test.iFld1 lFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld1 + "," + lFld);
        FuzzerUtils.out.println("sFld Test.iArrFld = " + sFld + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  bMeth ->  bMeth iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
