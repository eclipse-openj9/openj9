// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 2L;

    public static double dFld = 20.124306;

    public static byte byFld = -43;

    public static boolean bFld = true;

    public static float fFld = -28.646F;

    public static int iArrFld[] = new int[N];

    public static float fArrFld[] = new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 54);
        FuzzerUtils.init(Test.fArrFld, 105.486F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth() {
        int i9 = -5;
        int i10 = 123;
        int i11 = 11;
        int i12 = -251;
        int i13 = -98;
        float f = 0.251F;
        float f1 = -1.385F;
        float f2 = -1.815F;
        boolean b = true;
        long l = 31774L;
        short sArr[] = new short[N];
        FuzzerUtils.init(sArr, ((short) (-9309)));
        Test.dFld = i9;
        i9 = i9;
        Test.iArrFld[(i9 >>> 1) % N] += ((int) (Test.instanceCount));
        i10 = 1;
        do {
            for (f = i10; f < 5; f++) {
                Test.instanceCount >>= i11;
                for (f1 = 1; f1 > 1; --f1) {
                    Test.dFld -= i11;
                    if (b) {
                        i12 = i9;
                        Test.instanceCount = -13;
                        if (i12 != 0) {
                        }
                        try {
                            i11 = Test.iArrFld[((int) (f1 - 1))] / 987396171;
                            i11 = (-228) % i9;
                            i11 = i12 / 14;
                        } catch (ArithmeticException a_e) {
                        }
                    } else if (b) {
                        i12 += ((int) (((f1 * i12) + Test.instanceCount) - i11));
                    }
                    i9 += ((int) (f1 * f1));
                    i11 += ((int) (f1 * Test.instanceCount));
                    switch (((int) ((f % 1) + 53))) {
                        case 53 :
                            Test.instanceCount ^= i11;
                            if (b)
                                break;

                            i11 = ((int) (l));
                            try {
                                Test.iArrFld[i10] = i11 / 7839;
                                i11 = Test.iArrFld[i10 - 1] % i11;
                                i12 = i10 % i9;
                            } catch (ArithmeticException a_e) {
                            }
                            if (b)
                                break;

                            Test.iArrFld[i10] = ((int) (Test.dFld));
                            i11 += ((int) (((long) (f1)) ^ i12));
                            i11 = ((int) (Test.instanceCount));
                            switch ((i10 % 2) + 105) {
                                case 105 :
                                    Test.byFld = ((byte) (i11));
                                    i12 -= i12;
                                    i11 = 0;
                                    Test.instanceCount >>= 7196L;
                                    switch ((((24271 >>> 1) % 4) * 5) + 101) {
                                        case 107 :
                                            Test.instanceCount = -3;
                                            i9 += ((int) (l));
                                            i9 *= i10;
                                            Test.iArrFld = Test.iArrFld;
                                            b = b;
                                            Test.dFld -= Test.dFld;
                                            break;
                                        case 103 :
                                            sArr[i10] <<= ((short) (i12));
                                            break;
                                        case 116 :
                                            i9 -= i11;
                                            break;
                                        case 112 :
                                            i9 -= ((int) (Test.instanceCount));
                                            break;
                                        default :
                                            f2 -= i12;
                                    }
                                    break;
                                case 106 :
                                    i13 += ((int) (f1 + l));
                                    break;
                            }
                            break;
                    }
                }
            }
        } while ((++i10) < 110 );
        long meth_res = (((((((((i9 + i10) + Float.floatToIntBits(f)) + i11) + Float.floatToIntBits(f1)) + i12) + (b ? 1 : 0)) + l) + Float.floatToIntBits(f2)) + i13) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static void vMeth1() {
        int i8 = -4;
        int i14 = 246;
        int i15 = -48598;
        int i16 = -23083;
        int i17 = 1;
        int i18 = -59;
        int i19 = 5;
        int i20 = 46;
        int i21 = 4;
        int i22 = 14;
        int i23 = 213;
        int i24 = 13;
        int i25 = -1;
        int i26 = 14;
        float f3 = -37.737F;
        float fArr[] = new float[N];
        short sArr1[] = new short[N];
        FuzzerUtils.init(fArr, 5.642F);
        FuzzerUtils.init(sArr1, ((short) (14657)));
        Test.iArrFld[(i8 >>> 1) % N] <<= ++i8;
        i8 <<= ((int) ((i8 = i8--) - ((Test.iArrFld[(i8 >>> 1) % N]++) - (5.321F - (i8 * i8)))));
        iMeth();
        for (i14 = 8; i14 < 189; i14 += 2) {
            fArr[i14 + 1] -= i8;
            i15 = Test.byFld;
            f3 = i14;
            Test.instanceCount += i14;
            Test.instanceCount -= i8;
            for (i16 = 1; i16 < 6; ++i16) {
                sArr1[i14 - 1] = ((short) (i16));
                i15 -= ((int) (f3));
            }
            for (i18 = 1; 6 > i18; i18++) {
                f3 %= i17 | 1;
            }
        }
        for (i20 = 9; i20 < 207; ++i20) {
            i8 = 16879;
            for (i22 = 1; i22 < 3; i22++) {
                fArr = fArr;
                if (Test.bFld)
                    continue;

                for (i24 = 2; i24 > 1; --i24) {
                    i19 = i21;
                    i17 += i24 ^ ((long) (f3));
                    Test.instanceCount = i20;
                    i26 -= ((int) (Test.dFld));
                    i19 = 72;
                    i26 += i24 ^ Test.instanceCount;
                    i8 = i14;
                    i21 += i24;
                    i19 += i24 - i22;
                    i26 += i24 ^ i22;
                    Test.dFld *= Test.byFld;
                    {
                        final boolean ax$15 = Test.bFld;
                        final int ax$16 = i21;
                        final int ax$17 = i15;
                        try {
                            int[] ax$6 = new int[]{ -11 };
                            boolean ax$4 = false;
                            for (int ax$3 = -188; ax$3 < (-188 + 8360); ax$3 += 1) {
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    for (int ax$9 = 0, ax$10 = i15; ax$10 <= i21; ax$10++) {
                                        i21 += ax$6[ax$9++];
                                    }
                                } catch (Throwable ax$11) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                                if (!ax$4) {
                                    i23 /= ((int) (((long) (f3)) | 1));
                                    ax$4 = true;
                                }
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    if (bFld != bFld) {
                                    }
                                } catch (Throwable ax$14) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                            }
                        } finally {
                            Test.bFld = ax$15;
                            i21 = ax$16;
                            i15 = ax$17;
                        }
                    }
                }
                Test.iArrFld[i20 + 1] -= i24;
                i23 += i22;
                i26 = -51051;
                Test.byFld += ((byte) (i22 * i22));
                i25 *= i25;
            }
        }
        vMeth1_check_sum += (((((((((((((((i8 + i14) + i15) + Float.floatToIntBits(f3)) + i16) + i17) + i18) + i19) + i20) + i21) + i22) + i23) + i24) + i25) + i26) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(sArr1);
    }

    public static void vMeth(int i4, int i5, double d) {
        int i6 = 43564;
        int i7 = -92;
        int i27 = 8217;
        int i28 = 39288;
        int i29 = -4;
        int i30 = -68;
        int iArr[] = new int[N];
        float f4 = -2.921F;
        boolean b1 = false;
        long l1 = 2793897101L;
        long lArr[] = new long[N];
        double dArr[] = new double[N];
        FuzzerUtils.init(iArr, 12);
        FuzzerUtils.init(lArr, 5738846082962695664L);
        FuzzerUtils.init(dArr, 0.2208);
        for (i6 = 103; i6 > 3; i6--) {
            i4 = Integer.reverseBytes(--i4);
            vMeth1();
            if (false) {
                i7 += i6;
                try {
                    iArr[i6] = iArr[i6] % i4;
                    i7 = i5 % (-2056534805);
                    i7 = i6 / 1527645737;
                } catch (ArithmeticException a_e) {
                }
            } else {
                i5 += i6;
                i5 = Test.byFld;
            }
            Test.instanceCount += 1144;
            i4 -= ((int) (f4));
            i27 = 1;
            while ((++i27) < 6) {
                lArr[i27] = Test.instanceCount;
                for (i28 = 1; i28 < 1; i28++) {
                    Test.instanceCount = i29;
                    dArr[i28] = i27;
                    Test.instanceCount -= 6;
                    i7 += i27;
                    Test.iArrFld[i6 - 1] >>= ((int) (130L));
                    Test.fArrFld[i28] -= 1616877953L;
                    if (b1)
                        break;

                    i29 >>= i6;
                    i7 -= ((int) (Test.instanceCount));
                    l1 >>= -29771;
                    l1 *= i6;
                    try {
                        i5 = 66 / iArr[i6];
                        Test.iArrFld[i6 + 1] = 202 % i5;
                        i4 = i4 / (-41);
                    } catch (ArithmeticException a_e) {
                    }
                }
                i30 = 1;
                do {
                    i7 *= 3;
                    i5 += i27;
                    i29 = i30;
                    i5 += 8;
                    i29 |= i7;
                    Test.fArrFld[i27 + 1] -= Test.instanceCount;
                    Test.instanceCount += i30 * i30;
                    i4 += i7;
                    Test.byFld >>>= ((byte) (i28));
                    if (Test.bFld)
                        continue;

                    i29 = i30;
                } while ((++i30) < 1 );
            }
        }
        vMeth_check_sum += (((((((((((((i4 + i5) + Double.doubleToLongBits(d)) + i6) + i7) + Float.floatToIntBits(f4)) + i27) + i28) + i29) + (b1 ? 1 : 0)) + l1) + i30) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {
        int i = -11;
        int i1 = 9443;
        int i2 = 29620;
        int i3 = 4;
        int i31 = -29389;
        int i32 = -103;
        int i33 = -1;
        int i34 = 8;
        int i35 = -1347;
        int i36 = 60;
        int i37 = 18383;
        int i38 = 17193;
        int i39 = -35872;
        float f5 = 101.42F;
        long l2 = 47L;
        long l3 = 19243L;
        long l4 = -22170L;
        long lArr1[] = new long[N];
        short s = 22122;
        double d1 = -116.23757;
        FuzzerUtils.init(lArr1, 43600L);
        for (i = 2; i < 118; i++) {
            i1 *= ((int) (i1 += ((int) (Long.reverseBytes(4 - Long.reverseBytes(Test.instanceCount))))));
            for (i2 = 2; i2 < 44; i2++) {
                switch ((i % 4) + 104) {
                    case 104 :
                        vMeth(10, i3, Test.dFld);
                        i1 = i1;
                        i3 = i3;
                        Test.instanceCount += i2;
                        Test.dFld *= i3;
                        Test.bFld = Test.bFld;
                        break;
                    case 105 :
                        i3 = ((int) (119.238F));
                        Test.instanceCount <<= 6086L;
                        i3 += i2;
                        Test.dFld -= i;
                        i1 -= ((int) (183L));
                        Test.fFld += i2 - Test.fFld;
                        Test.instanceCount += i2 | i2;
                        try {
                            i31 = 71 / i1;
                            i31 = Test.iArrFld[i2] / i31;
                            i1 = Test.iArrFld[i + 1] % (-31522);
                        } catch (ArithmeticException a_e) {
                        }
                        switch ((i % 6) + 36) {
                            case 36 :
                                f5 = 1;
                                while ((++f5) < 2) {
                                    Test.iArrFld[(i1 >>> 1) % N] -= ((int) (Test.dFld));
                                    Test.iArrFld = Test.iArrFld;
                                    l2 = i2;
                                    i3 &= ((int) (l2));
                                    s -= ((short) (Test.fFld));
                                    i1 += ((int) (f5 * f5));
                                    i1 = s;
                                }
                                for (d1 = 1; d1 < 2; d1++) {
                                    s += ((short) (27869));
                                }
                                for (l3 = i2; l3 < 2; ++l3) {
                                    Test.instanceCount += i1;
                                    i33 = -34830;
                                    l2 += ((l3 * l3) + i3) - i3;
                                    Test.fFld -= i32;
                                    Test.dFld = 1.70263;
                                    i3 += i33;
                                    i32 = i1;
                                }
                                for (i34 = 1; i34 < 2; i34++) {
                                    Test.instanceCount += i35;
                                    i32 += ((int) (9189000118110563210L + (i34 * i34)));
                                    i32 = Test.byFld;
                                    Test.fFld = i35;
                                    i35 *= i33;
                                    i1 = i2;
                                    Test.iArrFld[i34 - 1] >>>= i32;
                                }
                                Test.dFld = i34;
                                Test.fFld += i34;
                            case 37 :
                                for (i36 = 2; i36 > 1; i36 -= 3) {
                                    l2 = 2084;
                                    Test.instanceCount = 3362680542L;
                                    i3 = i34;
                                    Test.dFld -= i1;
                                    i3 *= i33;
                                    i1 = ((int) (Test.instanceCount));
                                    Test.iArrFld[i + 1] += i33;
                                    s += ((short) (23389 + (i36 * i36)));
                                    lArr1 = lArr1;
                                    Test.instanceCount = i34;
                                    i31 += 0 + (i36 * i36);
                                    Test.iArrFld[i36] = i;
                                    Test.dFld += i37;
                                    i32 += ((i36 * f5) + l3) - i35;
                                }
                                switch ((((-181) >>> 1) % 1) + 8) {
                                    case 8 :
                                        if (false)
                                            break;

                                }
                                i3 += i2;
                                switch (((((-31267) >>> 1) % 2) * 5) + 79) {
                                    case 89 :
                                        i32 += i35;
                                        i37 += -21315;
                                        Test.fFld = i34;
                                        for (i38 = 1; i38 < 2; ++i38) {
                                            l2 += i1;
                                            l4 -= l4;
                                            Test.fFld += ((i38 * i34) + i35) - f5;
                                            i31 -= -4;
                                        }
                                        Test.iArrFld[(i33 >>> 1) % N] = -147;
                                        break;
                                    case 84 :
                                        Test.instanceCount <<= l3;
                                        break;
                                    default :
                                        i33 += i2 | i35;
                                }
                                break;
                            case 38 :
                                i31 -= i39;
                                break;
                            case 39 :
                                l2 += i1;
                            case 40 :
                                i31 = s;
                                break;
                            case 41 :
                                i32 += i2 * Test.fFld;
                                break;
                            default :
                                i32 = i33;
                        }
                        break;
                    case 106 :
                        Test.iArrFld[i2 + 1] = i35;
                        break;
                    case 107 :
                        s -= ((short) (66.91679));
                }
            }
        }
        FuzzerUtils.out.println((((("i i1 i2 = " + i) + ",") + i1) + ",") + i2);
        FuzzerUtils.out.println((((("i3 i31 f5 = " + i3) + ",") + i31) + ",") + Float.floatToIntBits(f5));
        FuzzerUtils.out.println((((("l2 s d1 = " + l2) + ",") + s) + ",") + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println((((("i32 l3 i33 = " + i32) + ",") + l3) + ",") + i33);
        FuzzerUtils.out.println((((("i34 i35 i36 = " + i34) + ",") + i35) + ",") + i36);
        FuzzerUtils.out.println((((("i37 i38 i39 = " + i37) + ",") + i38) + ",") + i39);
        FuzzerUtils.out.println((("l4 lArr1 = " + l4) + ",") + FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println((((("Test.instanceCount Test.dFld Test.byFld = " + Test.instanceCount) + ",") + Double.doubleToLongBits(Test.dFld)) + ",") + Test.byFld);
        FuzzerUtils.out.println((((("Test.bFld Test.fFld Test.iArrFld = " + (Test.bFld ? 1 : 0)) + ",") + Float.floatToIntBits(Test.fFld)) + ",") + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        {
            try {
                for (int ax$0 = -306; ax$0 < (-306 + 7104); ax$0 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$1 = 0; ax$1 < 10000000; ax$1++) {
                        }
                    } catch (Throwable ax$2) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}
