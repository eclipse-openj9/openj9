// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;

public class Test {
    public static final int N = 256;

    public static volatile long instanceCount = 15501L;

    public static float fFld = 72.166F;

    public static float fFld1 = -2.98F;

    public int iArrFld[] = new int[N];

    public boolean bArrFld[] = new boolean[N];

    public static long byMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7) {
        int i8 = -4;
        int i9 = -2471;
        int i10 = -64934;
        int i11 = -3369;
        int i12 = 7;
        int iArr1[] = new int[N];
        byte by1 = 20;
        double d1 = -121.111764;
        short s = 26255;
        boolean b3 = false;
        float fArr[] = new float[N];
        FuzzerUtils.init(fArr, 0.755F);
        FuzzerUtils.init(iArr1, -53);
        i7 ^= i7;
        for (i8 = 13; 218 > i8; i8++) {
            fArr[i8 + 1] = Test.instanceCount;
            i7 += i8 * i8;
            i10 = 3;
            while ((--i10) > 0) {
                boolean b2 = true;
                i9 += i10 | by1;
                i7 += i10 - Test.instanceCount;
                b2 = b2;
                Test.fFld += i7;
                i9 = ((int) (Test.fFld));
                Test.instanceCount = i8;
                iArr1[i8 - 1] = i9;
                for (i11 = 1; 1 > i11; i11 += 2) {
                    switch (((i7 >>> 1) % 1) + 52) {
                        case 52 :
                            d1 -= d1;
                            break;
                        default :
                            iArr1[i8 - 1] -= s;
                            s += ((short) (((i11 * i12) + i9) - i12));
                            i7 = i8;
                            i12 >>= i12;
                            i12 = ((int) (Test.instanceCount));
                            by1 += ((byte) (Test.instanceCount));
                            by1 = ((byte) (Test.instanceCount));
                    }
                    i12 += ((i11 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount;
                    iArr1[i11] -= ((int) (Test.instanceCount));
                    if (b2)
                        break;

                    Test.fFld = Test.instanceCount;
                    s += ((short) (((i11 * i11) + i9) - Test.instanceCount));
                    iArr1[i11 + 1] *= ((int) (Test.instanceCount));
                    Test.instanceCount += i10;
                    fArr[i10 + 1] += i9;
                    d1 *= i8;
                }
                Test.instanceCount = i9;
                iArr1[i8] *= ((int) (Test.instanceCount));
                if (b2)
                    continue;

                b2 = b2;
            }
            Test.instanceCount += i8 * i8;
            b3 = false;
        }
        vMeth1_check_sum += ((((((((((i7 + i8) + i9) + i10) + by1) + i11) + i12) + Double.doubleToLongBits(d1)) + s) + (b3 ? 1 : 0)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {
        int i4 = -138;
        int i5 = 42;
        int i6 = 14;
        int i13 = 38272;
        int i14 = 21;
        int i15 = 36178;
        int i16 = -1;
        int iArr[] = new int[N];
        boolean b1 = false;
        double d2 = 43.106254;
        short s1 = 22635;
        byte byArr[] = new byte[N];
        long lArr1[] = new long[N];
        FuzzerUtils.init(iArr, 22330);
        FuzzerUtils.init(byArr, ((byte) (-85)));
        FuzzerUtils.init(lArr1, -2467074320483507217L);
        iArr[(i4 >>> 1) % N] -= i4;
        for (i5 = 1; i5 < 165; i5++) {
            b1 = b1 = i5 != (i4--);
            vMeth1(34632);
            i6 += i5;
        }
        i13 = 1;
        do {
            i6 *= -40;
            for (i14 = i13; i14 < 6; i14++) {
                byArr[i13] = ((byte) (Test.instanceCount));
                i4 <<= -14338;
                i16 = 1;
                do {
                    byte by2 = 53;
                    i15 += i5;
                    b1 = b1;
                    i4 += by2;
                    i15 = 15651;
                    i4 = ((int) (d2));
                    if (i5 != 0) {
                        vMeth_check_sum += (((((((((((i4 + i5) + i6) + (b1 ? 1 : 0)) + i13) + i14) + i15) + i16) + Double.doubleToLongBits(d2)) + s1) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(byArr)) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    byArr[i13 + 1] += ((byte) (Test.instanceCount));
                    switch (((i4 >>> 1) % 6) + 110) {
                        case 110 :
                            lArr1[i14] = ((long) (d2));
                            i4 = i5;
                            i6 = i16;
                            s1 = ((short) (i5));
                            Test.instanceCount *= ((long) (Test.fFld));
                            Test.instanceCount = Test.instanceCount;
                            if (b1) {
                                lArr1[i16] += i16;
                                Test.fFld1 = 42;
                                i6 |= 10988;
                                try {
                                    i6 = i13 % i5;
                                    i6 = 211844919 / i14;
                                    i6 = i5 % i4;
                                } catch (ArithmeticException a_e) {
                                }
                                iArr[i13 + 1] -= ((int) (Test.instanceCount));
                                Test.instanceCount += i16 - Test.fFld1;
                                by2 += ((byte) (i16 * i16));
                            } else if (b1) {
                                i15 += 6101 + (i16 * i16);
                                i4 &= i5;
                                try {
                                    i6 = iArr[i16] % i15;
                                    iArr[i16 + 1] = i15 / 202;
                                    i15 = (-19578) % i5;
                                } catch (ArithmeticException a_e) {
                                }
                                try {
                                    i15 = (-22) / i4;
                                    i4 = i14 / iArr[i16];
                                    i6 = i16 % 31491;
                                } catch (ArithmeticException a_e) {
                                }
                            } else if (b1) {
                                i15 = s1;
                            } else {
                                Test.instanceCount += s1;
                            }
                        case 111 :
                            i15 += ((int) (Test.fFld1));
                            break;
                        case 112 :
                            i15 -= -65014;
                            break;
                        case 113 :
                            i4 = ((int) (Test.instanceCount));
                        case 114 :
                            by2 += ((byte) (((i16 * Test.instanceCount) + i14) - Test.fFld));
                            break;
                        case 115 :
                            i6 += i16;
                            break;
                    }
                } while ((--i16) > 0 );
            }
        } while ((++i13) < 98 );
        vMeth_check_sum += (((((((((((i4 + i5) + i6) + (b1 ? 1 : 0)) + i13) + i14) + i15) + i16) + Double.doubleToLongBits(d2)) + s1) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(byArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public static byte byMeth(long l, int i2) {
        double d = -117.5505;
        int i3 = 18159;
        int i17 = 75;
        int i18 = 6;
        int i19 = -10731;
        int i20 = -196;
        int i21 = -16;
        int i22 = -26294;
        int i23 = 4380;
        int i24 = -10;
        int iArr2[] = new int[N];
        byte by = -14;
        boolean b4 = false;
        long lArr[] = new long[N];
        FuzzerUtils.init(lArr, -1104859142L);
        FuzzerUtils.init(iArr2, -48);
        lArr[(i2 >>> 1) % N] -= ((long) (((i2 - d) * (l * i3)) % (((Test.instanceCount + by) + (by - l)) | 1)));
        vMeth();
        for (i17 = 5; i17 < 97; ++i17) {
            i18 += ((int) (l));
            i19 = 1;
            do {
                iArr2[i19 + 1] -= ((int) (2513668249L));
                i20 = 1;
                do {
                    Test.fFld1 -= i19;
                    iArr2[i20] += i2;
                    i2 -= by;
                    i18 += by;
                } while ((++i20) < 1 );
                iArr2[i17 + 1] <<= ((int) (l));
            } while ((++i19) < 6 );
            i3 = ((int) (l));
            i3 >>= i20;
            for (i21 = 1; 6 > i21; ++i21) {
                for (i23 = 1; 2 > i23; i23++) {
                    i22 += i23 * i23;
                    i3 *= i2;
                    i3 &= ((int) (-1727461212420763328L));
                    l += i3;
                    i18 += i23 - i21;
                    i18 -= ((int) (-1.5974));
                    i3 = -194;
                    if (b4) {
                        b4 = b4;
                        iArr2[i23] -= ((int) (117L));
                    } else if (b4) {
                        l >>>= Test.instanceCount;
                        b4 = b4;
                        i22 -= 1;
                        switch ((((i3 >>> 1) % 1) * 5) + 95) {
                            case 98 :
                                i24 <<= 1;
                                Test.fFld += i23 * i23;
                                d = i23;
                                i3 = ((int) (Test.fFld1));
                                iArr2[i21] = i23;
                                iArr2[i21 + 1] = ((int) (Test.instanceCount));
                                i3 += i23 + Test.fFld1;
                                break;
                            default :
                        }
                    }
                }
            }
        }
        long meth_res = ((((((((((((((l + i2) + Double.doubleToLongBits(d)) + i3) + by) + i17) + i18) + i19) + i20) + i21) + i22) + i23) + i24) + (b4 ? 1 : 0)) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(iArr2);
        byMeth_check_sum += meth_res;
        return ((byte) (meth_res));
    }

    public void mainTest(String[] strArr1) {
        int i = -109;
        int i1 = 14;
        int i25 = 8;
        int i26 = -35971;
        int i27 = 123;
        int i28 = 2;
        int i29 = -58730;
        int i30 = -7;
        int i31 = -4;
        boolean b = true;
        short s2 = 7535;
        short sArr[] = new short[N];
        double d3 = 47.113865;
        double d4 = 0.30835;
        double dArr[] = new double[N];
        long l1 = 8813688908006492244L;
        long lArr2[] = new long[N];
        byte by3 = 94;
        float f = 66.518F;
        FuzzerUtils.init(sArr, ((short) (-31394)));
        FuzzerUtils.init(lArr2, -22244L);
        FuzzerUtils.init(dArr, -58.126378);
        for (i = 14; i < 236; i++) {
            b = b = (i >= i1) || (Test.fFld < Test.instanceCount);
            {
                final boolean ax$3 = b;
                try {
                    for (int ax$0 = -658; ax$0 < (-658 + 1274); ax$0 += 1) {
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            if (!b);
                        } catch (Throwable ax$2) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                    }
                } finally {
                    b = ax$3;
                }
            }
            i1 = i / (byMeth(Test.instanceCount, i1) | 1);
            sArr[i] += ((short) (11L));
            Test.instanceCount >>= i1;
            i25 = 1;
            do {
                iArrFld[i + 1] = ((int) (-14.778F));
                i1 += i25;
            } while ((++i25) < 23 );
        }
        lArr2[(i25 >>> 1) % N] >>= i25;
        iArrFld = iArrFld;
        s2 = ((short) (Test.instanceCount));
        d3 += i25;
        for (i26 = 4; i26 < 229; i26++) {
            i1 += i1;
            l1 = 1;
            while ((++l1) < 23) {
                Test.fFld1 = i;
                switch (((i27 >>> 1) % 9) + 55) {
                    case 55 :
                        i1 = -7;
                        break;
                    case 56 :
                        lArr2[i26 + 1] *= s2;
                        s2 >>= ((short) (Test.instanceCount));
                        i1 &= ((int) (Test.instanceCount));
                        break;
                    case 57 :
                        i27 >>= i26;
                        break;
                    case 58 :
                    case 59 :
                        switch (((int) (((l1 % 6) * 5) + 85))) {
                            case 114 :
                                i27 += ((int) (((l1 * i25) + l1) - i25));
                                break;
                            case 99 :
                                s2 += ((short) (i1));
                                i1 += ((int) (Test.instanceCount));
                                d3 += Test.instanceCount;
                                Test.instanceCount = i;
                                lArr2[((int) (l1))] = l1;
                                Test.instanceCount = Test.instanceCount;
                                iArrFld[(22896 >>> 1) % N] -= ((int) (Test.fFld));
                                break;
                            case 86 :
                                for (d4 = 1; d4 < 1; ++d4) {
                                    i28 = ((int) (l1));
                                    dArr = dArr;
                                    s2 += ((short) (d4 + i25));
                                    i28 = ((int) (-31L));
                                    b = b;
                                    Test.fFld += ((float) (d3));
                                    i28 <<= i27;
                                    lArr2[((int) (d4))] = l1;
                                    i28 = 65;
                                    if (b)
                                        break;

                                    s2 += ((short) (d4));
                                    i1 += ((int) (d4 - Test.fFld));
                                }
                                iArrFld[i26] %= ((int) (i26 | 1));
                                s2 = ((short) (i25));
                                iArrFld[i26 - 1] = i27;
                                break;
                            case 108 :
                                Test.instanceCount -= i28;
                                for (i29 = 1; 1 > i29; ++i29) {
                                    if (b) {
                                        d3 = i28;
                                        i30 = ((int) (Test.fFld1));
                                        d3 += i28;
                                        Test.instanceCount = 84;
                                        s2 = ((short) (i));
                                        i27 %= ((int) (i26 | 1));
                                        i28 -= by3;
                                        i27 += ((int) (Test.instanceCount));
                                        i27 = ((int) (l1));
                                    } else if (true) {
                                        i30 = -22478;
                                        i27 &= i27;
                                        i30 -= i31;
                                        i27 += i29 ^ ((long) (Test.fFld1));
                                        if (false) {
                                            lArr2[i29 + 1] = Test.instanceCount;
                                            i1 = i25;
                                        } else {
                                            i28 += i29;
                                            i1 = i27;
                                            i27 += ((int) (l1));
                                            i27 += i29;
                                            i28 = i28;
                                            bArrFld[i29] = false;
                                            sArr[i29 - 1] >>= ((short) (i26));
                                            i31 -= i28;
                                            i27 += i26;
                                        }
                                    } else {
                                        iArrFld[i26 + 1] -= i27;
                                    }
                                }
                                break;
                            case 106 :
                                Test.instanceCount += ((l1 * Test.fFld1) + s2) - i25;
                                break;
                            case 88 :
                                dArr[i26 - 1] *= i27;
                            default :
                                i27 = ((int) (-1083L));
                        }
                    case 60 :
                        i1 += i26;
                        break;
                    case 61 :
                        Test.instanceCount = i26;
                        break;
                    case 62 :
                        f += ((l1 * i29) + i29) - l1;
                        break;
                    case 63 :
                        i30 = i31;
                        break;
                    default :
                        iArrFld[i26 + 1] = ((int) (Test.instanceCount));
                }
            }
        }
        FuzzerUtils.out.println((((("i i1 b = " + i) + ",") + i1) + ",") + (b ? 1 : 0));
        FuzzerUtils.out.println((((("i25 s2 d3 = " + i25) + ",") + s2) + ",") + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println((((("i26 i27 l1 = " + i26) + ",") + i27) + ",") + l1);
        FuzzerUtils.out.println((((("d4 i28 i29 = " + Double.doubleToLongBits(d4)) + ",") + i28) + ",") + i29);
        FuzzerUtils.out.println((((("i30 by3 i31 = " + i30) + ",") + by3) + ",") + i31);
        FuzzerUtils.out.println((((("f sArr lArr2 = " + Float.floatToIntBits(f)) + ",") + FuzzerUtils.checkSum(sArr)) + ",") + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.fFld Test.fFld1 = " + Test.instanceCount) + ",") + Float.floatToIntBits(Test.fFld)) + ",") + Float.floatToIntBits(Test.fFld1));
        FuzzerUtils.out.println((("iArrFld bArrFld = " + FuzzerUtils.checkSum(iArrFld)) + ",") + FuzzerUtils.checkSum(bArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}
