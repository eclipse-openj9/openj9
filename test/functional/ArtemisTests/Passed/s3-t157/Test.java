// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = -194L;

    public static float fFld = -83.918F;

    public static double dFld = 0.26088;

    public static volatile double dFld1 = 2.7806;

    public static volatile short sFld = -27562;

    public boolean bFld = true;

    public static int iFld = -49633;

    public int iFld1 = 19;

    public static volatile int[] iArrFld = new int[N];

    public static int[][] iArrFld1 = new int[N][N];

    public long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 231);
        FuzzerUtils.init(Test.iArrFld1, 38818);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long byMeth_check_sum = 0;

    public static byte byMeth() {
        int i8 = -6, i9 = -62197, i10 = 3, i11 = -13, i12 = 4200, i13 = -2, i14 = 13, i15 = 24, i16 = -4, i17 = -58, i18 = 76;
        boolean b1 = true;
        byte by1 = -109;
        long[][] lArr = new long[N][N];
        double[] dArr = new double[N];
        FuzzerUtils.init(lArr, 8969582950331938586L);
        FuzzerUtils.init(dArr, 109.66645);
        for (i8 = 6; i8 < 232; i8 += 3) {
            boolean b = false;
            i9 -= i9;
            lArr[i8 - 1][i8] >>= i9;
            if (b)
                break;
        }
        for (i10 = 3; 90 > i10; i10++) {
            dArr[i10] = -85;
            b1 = b1;
            Test.instanceCount = -49;
            Test.instanceCount = i8;
        }
        i12 = 1;
        do {
            for (i13 = i12; i13 < 4; ++i13) {
                if (i9 != 0) {
                }
            }
            Test.fFld += -207;
            Test.iArrFld[i12] = 5;
            Test.iArrFld[i12 - 1] |= -131;
            i14 -= (int) Test.instanceCount;
            i9 ^= i14;
            if (false)
                break;
            switch(((i12 % 2) * 5) + 61) {
                case 66:
                    i9 += i12;
                    i9 &= (int) Test.instanceCount;
                    i11 -= (int) Test.instanceCount;
                    i14 = (int) Test.instanceCount;
                    i11 -= i9;
                    i11 -= (int) Test.instanceCount;
                    for (i15 = 1; i15 < 4; i15++) {
                        Test.iArrFld[i12 - 1] = (int) Test.dFld;
                        Test.iArrFld[i15] &= -58947;
                        i14 = -4;
                        i14 += i8;
                        i17 = 1;
                        do {
                            Test.dFld = i14;
                            i18 -= -51719;
                            i11 *= i10;
                            i16 *= i11;
                            by1 += (byte) 66938259L;
                            Test.iArrFld[i12 - 1] |= i18;
                        } while (++i17 < 2);
                    }
                    break;
                case 64:
                    i18 >>= i14;
                    break;
                default:
                    if (b1)
                        break;
            }
        } while (++i12 < 141);
        long meth_res = i8 + i9 + i10 + i11 + (b1 ? 1 : 0) + i12 + i13 + i14 + i15 + i16 + i17 + i18 + by1 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        byMeth_check_sum += meth_res;
        return (byte) meth_res;
    }

    public static void vMeth1(int i7, long l) {
        {
            java.io.PrintStream ax$0 = System.out;
            java.io.PrintStream ax$1 = System.err;
            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$2);
            System.setErr(ax$2);
            {
                boolean ax$4 = false;
                for (int ax$3 = -4190; ax$3 < 1766; ax$3 += 8) {
                    if (!ax$4) {
                        ax$4 = true;
                        {
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                            i7 -= (byMeth() - 11);
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                        }
                    }
                }
            }
            System.setOut(ax$0);
            System.setErr(ax$1);
        }
        vMeth1_check_sum += i7 + l;
    }

    public static void vMeth(int i3, short s) {
        int i4 = 56021, i5 = 5, i6 = -13689, i19 = 11, i20 = -10, i21 = 35153, i22 = -50858, i23 = 172;
        float f = 113.803F;
        boolean b2 = false;
        double[] dArr1 = new double[N];
        FuzzerUtils.init(dArr1, 68.111955);
        Test.instanceCount = ((++i3) + (Test.instanceCount--));
        i4 = 1;
        while (++i4 < 236) {
            switch((i4 % 1) + 23) {
                case 23:
                    for (i5 = 1; i5 < 3; i5++) {
                        vMeth1(i4, 75L);
                        for (i19 = 1; 2 > i19; ++i19) {
                            Test.instanceCount *= i6;
                        }
                        s -= (short) i5;
                    }
                    s += (short) i4;
                    i6 <<= (int) Test.instanceCount;
                    for (i21 = 1; i21 < 3; i21++) {
                        f = 1;
                        do {
                            Test.fFld += i22;
                            i6 -= (int) Test.instanceCount;
                        } while (++f < 2);
                        switch(((i4 % 7) * 5) + 42) {
                            case 74:
                                try {
                                    Test.iArrFld[i21 - 1] = (Test.iArrFld[i21] % 221);
                                    i6 = (i3 / 48288);
                                    Test.iArrFld[i21] = (i3 % i6);
                                } catch (ArithmeticException a_e) {
                                }
                                i3 <<= i21;
                                if (b2) {
                                    i20 = (int) Test.dFld1;
                                    i23 = 1;
                                    do {
                                        i20 += i23;
                                        switch((i23 % 5) + 19) {
                                            case 19:
                                                Test.iArrFld1 = Test.iArrFld1;
                                                i20 = i23;
                                                try {
                                                    i3 = (i23 / 209);
                                                    i6 = (i6 / 172);
                                                    Test.iArrFld1[i21][i21 - 1] = (-74 / i6);
                                                } catch (ArithmeticException a_e) {
                                                }
                                            case 20:
                                                Test.iArrFld[i23 + 1] <<= (int) Test.instanceCount;
                                                Test.instanceCount += 15184;
                                                break;
                                            case 21:
                                            case 22:
                                                Test.iArrFld1[i21 - 1] = Test.iArrFld1[i23 - 1];
                                                i6 += (i23 + Test.instanceCount);
                                                dArr1[i4 + 1] *= s;
                                                Test.instanceCount += (((i23 * Test.instanceCount) + f) - i20);
                                                s += (short) (i23 | i22);
                                                Test.iArrFld = Test.iArrFld;
                                                Test.fFld = i3;
                                                i22 -= (int) Test.instanceCount;
                                                i22 += (15202 + (i23 * i23));
                                                Test.instanceCount += i21;
                                                break;
                                            case 23:
                                                i20 += (((i23 * i3) + i22) - f);
                                                break;
                                            default:
                                                i20 = (int) Test.instanceCount;
                                        }
                                    } while (++i23 < 2);
                                } else {
                                    i3 <<= i19;
                                }
                            case 67:
                                i22 += (((i21 * i23) + i3) - i21);
                                break;
                            case 52:
                                if (i23 != 0) {
                                    vMeth_check_sum += i3 + s + i4 + i5 + i6 + i19 + i20 + i21 + i22 + Float.floatToIntBits(f) + i23 + (b2 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
                                    return;
                                }
                            case 44:
                                Test.instanceCount = Test.instanceCount;
                            case 50:
                                Test.dFld -= Test.instanceCount;
                                break;
                            case 71:
                            case 48:
                        }
                    }
                    break;
            }
        }
        vMeth_check_sum += i3 + s + i4 + i5 + i6 + i19 + i20 + i21 + i22 + Float.floatToIntBits(f) + i23 + (b2 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {
        if (ax$5) {
            try {
                int[] ax$6 = new int[] { 71994000, 71994000, 12000, 71994000, 71994000, 144000000, 144000000, 72018000, 144000000, 144000000, 71994000, 71994000, 12000, 71994000, 71994000, 72000000, 72000000, 36006000, 72000000, 72000000, 144012000, 144012000, 72030000, 144012000, 144012000, 72000000, 72000000, 36006000, 72000000, 72000000, 499501, 499501, 499501, 499501, 499501, 1000002, 1000002, 1000002, 1000002, 1000002, 499501, 499501, 499501, 499501, 499501, 1001, 1001, 1001, 1001, 1001, 3002, 3002, 3002, 3002, 3002, 1001, 1001, 1001, 1001, 1001, 501, 501, 501, 501, 501, 1502, 1502, 1502, 1502, 1502 };
                ax$6[0] = 42;
            } catch (Throwable ax$7) {
            } finally {
            }
            return;
        }
        byte by = -84;
        int i = -81, i1 = 55, i2 = 65, i24 = 57226, i25 = 22764, i26 = 37838, i27 = 55899, i28 = -106, i29 = -6;
        double[] dArr2 = new double[N];
        FuzzerUtils.init(dArr2, -113.100403);
        by += (byte) 153;
        i = Test.iArrFld[(99 >>> 1) % N];
        for (i1 = 5; i1 < 82; ++i1) {
            vMeth(i2, Test.sFld);
            Test.instanceCount *= i2;
            for (i24 = 2; i24 < 65; i24++) {
                double d = 0.34064;
                i += i24;
                Test.fFld += Test.fFld;
                bFld = true;
                by = (byte) i25;
                Test.iArrFld1[i24 + 1][i1] = 63147;
                i += i24;
                Test.iArrFld1[i24 + 1][i24 + 1] = (int) Test.instanceCount;
                try {
                    i2 = (Test.iArrFld[i1 - 1] / i);
                    i25 = (i24 / i25);
                    Test.iArrFld[i1] = (Test.iFld % 16925);
                } catch (ArithmeticException a_e) {
                }
                switch(((i24 % 8) * 5) + 84) {
                    case 92:
                        Test.fFld += i24;
                        for (i26 = 1; i26 < 2; i26++) {
                            Test.dFld1 -= 70;
                            try {
                                i2 = (Test.iArrFld1[i24 - 1][i1 - 1] % i1);
                                Test.iArrFld1[i1 - 1][i1] = (-1393708415 % i);
                                i27 = (102 / i25);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.iFld |= Test.sFld;
                            dArr2[i1 - 1] *= -5;
                            if (false)
                                continue;
                        }
                        Test.instanceCount = (long) d;
                        Test.instanceCount -= i26;
                        i2 = -95;
                        i25 = i1;
                        for (i28 = i1; i28 < 2; i28++) {
                            Test.instanceCount *= i28;
                            switch(((i28 % 8) * 5) + 110) {
                                case 126:
                                    i29 = i29;
                                    bFld = false;
                                    Test.fFld = 56659;
                                    i += i27;
                                    break;
                                case 139:
                                    if (bFld)
                                        continue;
                                    lArrFld[i24 - 1] = i1;
                                    Test.iArrFld1[i1 - 1][i24 + 1] = 68;
                                    d += Test.instanceCount;
                                    i -= i;
                                    i27 = i2;
                                    i2 += Test.iFld;
                                    Test.iFld += (int) Test.instanceCount;
                                    i2 = (int) Test.fFld;
                                    i27 -= i29;
                                    iFld1 = i28;
                                    Test.iArrFld[i1 + 1] -= (int) 1377805410L;
                                    iFld1 <<= i29;
                                    Test.iFld |= -109;
                                    Test.fFld += (-78.309F + (i28 * i28));
                                    break;
                                case 133:
                                    Test.iArrFld1[i1] = FuzzerUtils.int1array(N, (int) -14);
                                    Test.instanceCount = i25;
                                    Test.instanceCount = by;
                                    lArrFld = lArrFld;
                                    Test.instanceCount = (long) Test.fFld;
                                    break;
                                case 122:
                                    i29 = Test.iFld;
                                    i += (((i28 * Test.instanceCount) + i1) - i2);
                                    dArr2[i28 - 1] -= Test.instanceCount;
                                    Test.iFld -= by;
                                    Test.iArrFld1[i28][i24 + 1] = (int) d;
                                    Test.instanceCount -= i25;
                                    i += (int) Test.instanceCount;
                                    by += (byte) (i28 * i24);
                                    Test.fFld += i28;
                                    break;
                                case 137:
                                    Test.instanceCount >>= i2;
                                    i29 -= (int) Test.instanceCount;
                                    i29 = 100;
                                    break;
                                case 123:
                                    Test.fFld = -13495;
                                    i2 ^= i1;
                                    Test.fFld += ((long) i28 ^ (long) i29);
                                    Test.fFld -= Test.instanceCount;
                                    Test.instanceCount = i24;
                                    Test.instanceCount = i26;
                                    iFld1 += (i28 * i28);
                                    Test.iFld *= (int) Test.dFld1;
                                    Test.sFld += (short) (i28 ^ Test.instanceCount);
                                    iFld1 = i24;
                                    break;
                                case 142:
                                    Test.instanceCount = Test.instanceCount;
                                case 116:
                                    Test.instanceCount += (((i28 * Test.instanceCount) + iFld1) - Test.instanceCount);
                                    break;
                                default:
                            }
                        }
                        break;
                    case 88:
                        if (bFld)
                            break;
                    case 112:
                        dArr2[i1 - 1] *= Test.iFld;
                        break;
                    case 120:
                        if (bFld)
                            break;
                        break;
                    case 122:
                        Test.instanceCount -= -48705;
                        break;
                    case 109:
                        Test.iArrFld1[i1 + 1][i1 + 1] -= Test.iFld;
                        break;
                    case 118:
                        Test.iFld += i1;
                        break;
                    case 95:
                        i27 *= by;
                }
            }
        }
        FuzzerUtils.out.println("by i i1 = " + by + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i24 i25 = " + i2 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 dArr2 = " + i29 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.dFld1 Test.sFld bFld = " + Double.doubleToLongBits(Test.dFld1) + "," + Test.sFld + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld iFld1 Test.iArrFld = " + Test.iFld + "," + iFld1 + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld1) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$5 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
