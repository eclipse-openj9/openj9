// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 4188321979057864573L;

    public static short sFld = 4853;

    public static byte byFld = -84;

    public volatile short sFld1 = 1733;

    public static boolean bFld = false;

    public static float fFld = -1.853F;

    public int[] iArrFld = new int[N];

    public long[] lArrFld = new long[N];

    public float[][] fArrFld = new float[N][N];

    public volatile int[] iArrFld1 = new int[N];

    public static double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.122559);
    }

    public static long lMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public int iMeth(int i2, long l1, short s) {
        float f = 0.419F, fArr[] = new float[N];
        int i3 = 250, i4 = -24523, i5 = 12, i6 = -45165, i7 = 59184;
        long l2 = 8256014509586868062L;
        double d2 = -2.60740;
        boolean b = true;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(byArr, (byte) -5);
        FuzzerUtils.init(fArr, 36.197F);
        i2 *= (int) f;
        {
            java.io.PrintStream ax$0 = System.out;
            java.io.PrintStream ax$1 = System.err;
            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$2);
            System.setErr(ax$2);
            {
                boolean ax$7 = false;
                for (int ax$6 = -1017; ax$6 < 7753; ax$6 += 8) {
                    if (!ax$7) {
                        ax$7 = true;
                        {
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                            for (i3 = 2; i3 < 164; ++i3) {
                                Test.byFld += (byte) i4;
                                for (l2 = 1; l2 < 4; ++l2) {
                                    float f1 = -95.129F;
                                    i2 += (int) (l2 | (long) f);
                                    i5 = i3;
                                    for (i6 = 1; i6 < 2; ++i6) {
                                        i2 = 127;
                                        l1 = Test.byFld;
                                        byArr[i6] = (byte) 224;
                                        i4 = i4;
                                        i2 = i2;
                                        byArr[i6 - 1] = (byte) i5;
                                        i7 /= (int) (i2 | 1);
                                        i4 += (((i6 * i3) + f) - s);
                                        i5 += (i6 * l2);
                                        i4 += i6;
                                        iArrFld[(int) (l2 + 1)] -= (int) 8258466790549732132L;
                                        i4 = i2;
                                        i2 -= i4;
                                        i4 = i6;
                                    }
                                    Test.instanceCount = Test.byFld;
                                    i5 += (int) l2;
                                    byArr[(int) (l2)] = (byte) d2;
                                    f1 -= l2;
                                    i5 >>>= i6;
                                    i4 *= (int) l2;
                                    Test.sFld -= (short) i6;
                                    i2 = i2;
                                    i7 += (int) l2;
                                    fArr[i3] -= i2;
                                    if (b)
                                        break;
                                    switch(((i7 >>> 1) % 2) + 71) {
                                        case 71:
                                            i7 += (int) (((l2 * f1) + i5) - i3);
                                            lArrFld[i3] += i4;
                                            i5 *= i7;
                                            lArrFld[(int) (l2 + 1)] >>>= i6;
                                            break;
                                        case 72:
                                            iArrFld[(i3 >>> 1) % N] -= Test.byFld;
                                    }
                                }
                            }
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                        }
                    }
                    try {
                        boolean[] ax$4 = new boolean[1];
                        ax$4[20] = false;
                        for (int ax$3 = 0; ax$3 < ax$4.length; ax$3++) {
                            ax$4[ax$3] = !ax$4[20];
                        }
                    } catch (Throwable ax$5) {
                    } finally {
                    }
                }
            }
            System.setOut(ax$0);
            System.setErr(ax$1);
        }
        long meth_res = i2 + l1 + s + Float.floatToIntBits(f) + i3 + i4 + l2 + i5 + i6 + i7 + Double.doubleToLongBits(d2) + (b ? 1 : 0) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void vMeth(double d1) {
        if (ax$8) {
            try {
                int ax$10 = 100082;
                int ax$11 = 40002;
                for (int ax$9 = 0; ax$9 < ax$11; ax$9++) ax$10++;
            } catch (Throwable ax$12) {
            } finally {
            }
            return;
        }
        int i1 = -5, i8 = 138, i9 = 14, i10 = 174, i11 = -12, i12 = -175, i13 = 225, i14 = 7152, i15 = 31555, i16 = -31505, i17 = 6, i18 = 10, i19 = -72, i20 = -44980;
        float f2 = -104.49F;
        long l3 = -2240099252L;
        i1 += i1;
        try {
            i1 = (int) (Float.intBitsToFloat((int) (Test.instanceCount + i1)) * Test.instanceCount);
            Test.sFld &= (short) ((6407 - (-(i1++))) - (iMeth(i1, Test.instanceCount, Test.sFld) + Test.sFld));
            Test.instanceCount += i1;
            iArrFld[(i1 >>> 1) % N] += i1;
            Test.instanceCount <<= 9;
            iArrFld[(-4306 >>> 1) % N] += (int) Test.instanceCount;
            for (i8 = 9; i8 < (235 + 256); i8++) {
                i1 -= i1;
            }
            for (i10 = 5; i10 < 88; i10++) {
                for (i12 = 1; 7 > i12; ++i12) {
                    if (false)
                        break;
                    i13 += Test.byFld;
                }
                for (i14 = 1; i14 < (7 + 256); i14++) {
                    switch((((-7570 >>> 1) % 4) * 5) + 100) {
                        case 116:
                            sFld1 *= (short) f2;
                            iArrFld[i14] = (int) -2117126289373184937L;
                            for (l3 = 1; l3 < (1 + 256); ++l3) {
                                i15 = i8;
                                i15 = i16;
                                d1 += -68.322F;
                            }
                            Test.instanceCount -= Test.instanceCount;
                            Test.instanceCount <<= Test.instanceCount;
                            i11 += (i14 - i8);
                            Test.bFld = Test.bFld;
                            for (i17 = 1; i17 < (1 + 256); i17++) {
                                Test.instanceCount >>>= -40;
                            }
                            lArrFld[i10 - 1] -= i9;
                            i16 = (int) Test.instanceCount;
                            i19 = 1;
                            do {
                                fArrFld[i10 + 1][i19 + 1] -= i13;
                                iArrFld[i14 + 1] *= (int) Test.instanceCount;
                                Test.sFld += (short) i19;
                                Test.instanceCount = -39732L;
                                iArrFld[i14 + 1] = (int) d1;
                                Test.instanceCount = Test.instanceCount;
                            } while (++i19 < 1);
                            break;
                        case 119:
                            i15 >>= -7;
                            break;
                        case 105:
                            Test.instanceCount -= i20;
                        case 112:
                            i15 += (i14 * i14);
                            break;
                        default:
                            d1 *= Test.instanceCount;
                    }
                }
            }
        } catch (NegativeArraySizeException exc2) {
            Test.instanceCount += sFld1;
        } catch (ArrayIndexOutOfBoundsException exc3) {
            lArrFld[(i16 >>> 1) % N] = Test.sFld;
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i1 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f2) + l3 + i16 + i17 + i18 + i19 + i20;
    }

    public long lMeth(long l, double d) {
        int i21 = -36687, i22 = -9, i23 = -6, i24 = -225, i25 = -126, i26 = 36942, i27 = -31707, i28 = 254, i29 = 142, i30 = 56, i31 = -26;
        float f3 = 0.918F;
        {
            java.io.PrintStream ax$15 = System.out;
            java.io.PrintStream ax$16 = System.err;
            java.io.PrintStream ax$17 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$17);
            System.setErr(ax$17);
            try {
                ax$8 = true;
                for (int ax$13 = 0; ax$13 < 7313; ax$13 += 1) vMeth(0.4393884563888051);
            } catch (java.lang.Throwable ax$14) {
            } finally {
                ax$8 = false;
            }
            System.setOut(ax$15);
            System.setErr(ax$16);
        }
        vMeth(d);
        for (i21 = 2; i21 < 119; i21++) {
            for (i23 = 1; 5 > i23; i23++) {
                for (f3 = 1; f3 < 2; f3++) {
                    l += (long) (f3 - l);
                    iArrFld = iArrFld1;
                }
                i25 = i25;
                i24 += (i23 * i23);
                Test.bFld = Test.bFld;
                i22 += i23;
                i25 += i24;
                for (i26 = 1; i26 < 2; i26++) {
                    i22 += (int) (-3709037695L + (i26 * i26));
                    Test.fFld += (i26 * i26);
                    i22 += (i26 * i26);
                    i27 += i26;
                    l += i26;
                    i24 *= i27;
                }
                Test.instanceCount = i24;
            }
            if (i27 != 0) {
            }
            i25 -= (int) Test.instanceCount;
            i22 = i25;
            for (i28 = 1; 5 > i28; i28++) {
                i29 = i26;
                Test.instanceCount += (i28 * i28);
                i24 += (int) (35L + (i28 * i28));
                i27 -= i21;
                i24 += (((i28 * Test.fFld) + i21) - i29);
                Test.fFld -= 227;
                for (i30 = i21; i30 < 2; i30++) {
                    i25 = -624;
                }
                switch(((i27 >>> 1) % 2) + 55) {
                    case 55:
                        if (Test.bFld)
                            continue;
                        Test.instanceCount -= i22;
                        lArrFld[i28 + 1] = 14;
                        if (Test.bFld)
                            continue;
                        Test.fFld += i31;
                        break;
                    case 56:
                        i27 = (int) Test.instanceCount;
                        break;
                }
            }
        }
        long meth_res = l + Double.doubleToLongBits(d) + i21 + i22 + i23 + i24 + Float.floatToIntBits(f3) + i25 + i26 + i27 + i28 + i29 + i30 + i31;
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = 13, i32 = 209, i33 = -38261, i34 = 56, i35 = 9, i36 = 136, i37 = 1;
        double d3 = -122.77122, d4 = -45.33887;
        i <<= (int) lMeth(-1358210401L, d3);
        i32 = 233;
        do {
            Test.instanceCount >>= i32;
            d3 -= i32;
            if (Test.bFld)
                break;
            if (Test.bFld) {
                Test.fFld = i;
                for (i33 = i32; i33 < 22; ++i33) {
                    for (i35 = 1; i35 > 1; --i35) {
                        Test.bFld = Test.bFld;
                        i34 >>>= 13;
                        i36 |= i36;
                        i34 -= i32;
                        Test.fFld -= Test.instanceCount;
                        if (true) {
                            iArrFld[i33 - 1] = (int) d3;
                            i36 += (int) Test.instanceCount;
                            fArrFld[i35 + 1][i33] += i34;
                            i36 = (int) Test.fFld;
                            Test.instanceCount = i;
                            Test.bFld = Test.bFld;
                            i34 -= i36;
                            d3 += i36;
                            i36 = i32;
                            switch(((i32 % 1) * 5) + 111) {
                                case 115:
                                    Test.instanceCount += i35;
                                    Test.instanceCount += (((i35 * i35) + i) - Test.fFld);
                                    i34 -= (int) d3;
                                    Test.fFld += (i35 * Test.fFld);
                                    i34 = i32;
                                    lArrFld[i32] = i32;
                                    i34 *= i34;
                                    break;
                                default:
                                    i34 *= i32;
                                    i34 = i33;
                                    i = (int) Test.instanceCount;
                                    if (Test.bFld)
                                        break;
                                    Test.fFld += Test.byFld;
                                    i36 += (((i35 * Test.fFld) + sFld1) - i34);
                                    Test.instanceCount >>>= 38109;
                                    Test.fFld = i35;
                                    i34 *= (int) Test.fFld;
                            }
                        } else {
                            if (Test.bFld) {
                                Test.instanceCount = (long) -8.89341;
                                Test.fFld *= i34;
                                Test.instanceCount <<= i32;
                                lArrFld[i35] = i;
                                iArrFld[i33 - 1] += (int) Test.instanceCount;
                                Test.byFld = (byte) i33;
                                i <<= i34;
                                try {
                                    i = (i36 % -485182016);
                                    i34 = (i % 50);
                                    iArrFld1[i35 + 1] = (i35 / -156);
                                } catch (ArithmeticException a_e) {
                                }
                            } else {
                                i36 -= (int) Test.instanceCount;
                                i34 >>= i35;
                                Test.instanceCount += (i35 - Test.instanceCount);
                            }
                        }
                        Test.instanceCount <<= i34;
                        try {
                            i = (i32 / iArrFld[i33 - 1]);
                            iArrFld1[i32 - 1] = (i32 % iArrFld[i32 - 1]);
                            iArrFld1[i33 - 1] = (iArrFld1[i35] / i35);
                        } catch (ArithmeticException a_e) {
                        }
                        if (Test.bFld)
                            break;
                        iArrFld1[i33 + 1] = i33;
                    }
                    Test.dArrFld[i32 - 1] *= i32;
                    for (d4 = 1; 1 > d4; d4++) {
                        i36 = i32;
                        Test.instanceCount >>= Test.instanceCount;
                        if (Test.bFld)
                            continue;
                        i37 *= (int) Test.instanceCount;
                        switch((i33 % 8) + 106) {
                            case 106:
                                Test.fFld += i34;
                                i36 *= i37;
                                i37 += (int) (d4 * i37);
                                i36 = i34;
                                switch((int) ((d4 % 2) + 50)) {
                                    case 50:
                                        i37 -= i;
                                        if (true)
                                            break;
                                        i += i;
                                        Test.instanceCount += i34;
                                        break;
                                    case 51:
                                        fArrFld[i33 - 1][i33] -= i35;
                                        iArrFld1[(int) (d4)] *= 232;
                                        break;
                                    default:
                                        Test.instanceCount <<= Test.instanceCount;
                                }
                                break;
                            case 107:
                                i += (int) (((d4 * i34) + Test.instanceCount) - i33);
                            case 108:
                                lArrFld[i33] <<= i32;
                            case 109:
                                Test.byFld = (byte) i34;
                                break;
                            case 110:
                                Test.bFld = Test.bFld;
                                break;
                            case 111:
                                i37 += (int) (d4 - i37);
                                break;
                            case 112:
                                i = (int) d3;
                                break;
                            case 113:
                                i37 = (int) d4;
                        }
                    }
                }
            }
        } while (--i32 > 0);
        FuzzerUtils.out.println("i d3 i32 = " + i + "," + Double.doubleToLongBits(d3) + "," + i32);
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 d4 i37 = " + i36 + "," + Double.doubleToLongBits(d4) + "," + i37);
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.byFld = " + Test.instanceCount + "," + Test.sFld + "," + Test.byFld);
        FuzzerUtils.out.println("sFld1 Test.bFld Test.fFld = " + sFld1 + "," + (Test.bFld ? 1 : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("iArrFld lArrFld fArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," + FuzzerUtils.checkSum(lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("iArrFld1 Test.dArrFld = " + FuzzerUtils.checkSum(iArrFld1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$18) {
            long ax$20 = iMeth_check_sum;
            try {
                int ax$19 = 1 << 31;
                iMeth_check_sum += ax$19;
            } catch (Throwable ax$21) {
            } finally {
                iMeth_check_sum = ax$20;
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$8 = false;

    private static Boolean ax$18 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  lMeth ->  lMeth mainTest
// DEBUG  vMeth ->  vMeth lMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
