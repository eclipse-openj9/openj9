// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.nio.channels.AsynchronousChannelGroup;
import java.math.BigDecimal;

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = -1372485356L;

    public static float fFld = -9.202F;

    public static volatile short sFld = 32669;

    public static long lFld = 889026236L;

    public static int iFld = 133;

    public static long[][] lArrFld = new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, -6097554573283336676L);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i9) {
        if (ax$0) {
            int ax$1 = i9;
            try {
                i9++;
            } catch (Throwable ax$2) {
            } finally {
                i9 = ax$1;
            }
            return (byte) 1290238967;
        }
        int i10 = -90, i11 = -52051, i12 = 4, i13 = -204, i14 = 19810, i15 = 76, iArr1[] = new int[N];
        long l1 = 9L;
        double d2 = 106.56066;
        FuzzerUtils.init(iArr1, 56176);
        i10 = 97;
        while (--i10 > 0) {
            Test.fFld *= i9;
            i9 -= i9;
            iArr1[i10 - 1] %= (int) (i9 | 1);
            for (i11 = 1; i11 < 6; i11++) {
                i12 = (int) Test.instanceCount;
                i9 <<= i12;
                for (l1 = 1; 2 > l1; l1++) {
                    boolean b = true;
                    i13 = (int) Test.instanceCount;
                    i13 -= (int) l1;
                    d2 *= i9;
                    i12 = (int) -143L;
                    i13 = (int) -8501509113406285578L;
                    Test.sFld <<= (short) i12;
                    i9 += (int) (l1 * i9);
                    i13 = 0;
                    if (b)
                        break;
                    i14 = (int) Test.instanceCount;
                }
                Test.sFld -= (short) Test.fFld;
                if (i14 != 0) {
                }
                i14 <<= (int) Test.instanceCount;
                i12 = i14;
                i9 += i11;
                i9 += (((i11 * i9) + i11) - Test.sFld);
                Test.sFld >>= (short) i10;
                i12 <<= (int) Test.instanceCount;
                i14 *= i9;
                Test.fFld += i11;
            }
            i12 += i13;
            Test.fFld += 0.388F;
            i15 = 1;
            while (++i15 < 6) {
                Test.instanceCount -= i14;
                i13 >>= (int) Test.instanceCount;
                Test.instanceCount += i15;
                Test.instanceCount -= 2637512212L;
                Test.fFld = -54849;
                i12 += (((i15 * i12) + Test.fFld) - Test.fFld);
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + l1 + i13 + Double.doubleToLongBits(d2) + i14 + i15 + FuzzerUtils.checkSum(iArr1);
        byMeth_check_sum += meth_res;
        return (byte) meth_res;
    }

    public static void vMeth1(double d1, long l) {
        int i16 = -37015, i17 = 1, i18 = -8, iArr2[] = new int[N];
        boolean b1 = true;
        FuzzerUtils.init(iArr2, 9);
        {
            java.io.PrintStream ax$5 = System.out;
            java.io.PrintStream ax$6 = System.err;
            java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$7);
            System.setErr(ax$7);
            try {
                ax$0 = true;
                for (int ax$3 = 0; ax$3 < 5610; ax$3 += 1) byMeth(1339864640);
            } catch (java.lang.Throwable ax$4) {
            } finally {
                ax$0 = false;
            }
            System.setOut(ax$5);
            System.setErr(ax$6);
        }
        byMeth(i16);
        i16 -= (int) Test.instanceCount;
        for (i17 = 7; i17 < 186; i17++) {
            i18 = (int) l;
        }
        b1 = b1;
        Test.fFld *= Test.instanceCount;
        iArr2[(i17 >>> 1) % N] -= 5501;
        vMeth1_check_sum += Double.doubleToLongBits(d1) + l + i16 + i17 + i18 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(int i3, int i4) {
        if (ax$8) {
            try {
                try {
                    AsynchronousChannelGroup.withFixedThreadPool(1, null);
                } catch (NullPointerException x) {
                }
            } catch (Throwable ax$17) {
            } finally {
            }
            return;
        }
        int i5 = -54, i6 = 56065, i7 = 6, i8 = -126, i19 = 160, i20 = 108, i21 = -59441, i22 = -78, i23 = -3474, i24 = 2, iArr[] = new int[N];
        byte by = 90;
        double d = 1.14585, d3 = -44.22307;
        float f = 0.980F;
        long l2 = 4105379352L, l3 = 10L;
        boolean b2 = true;
        short[] sArr = new short[N];
        FuzzerUtils.init(iArr, -198);
        FuzzerUtils.init(sArr, (short) -19580);
        i4 <<= (i4++);
        for (i5 = 191; i5 > 9; i5--) {
            by = (byte) ((--d) % (((long) ((i3 * 0.837F) + (d - Test.instanceCount))) | 1));
            for (i7 = 3; i7 > i5; --i7) {
                iArr[i7 + 1] *= (int) (f * i3);
                vMeth1(0.8103, 26531L);
            }
            i3 = (int) l2;
            Test.sFld += (short) (146 + (i5 * i5));
            i6 = i7;
            i8 <<= i3;
            Test.instanceCount <<= l2;
            for (i19 = 1; i19 < 3; ++i19) {
                Test.fFld *= by;
                try {
                    iArr[i5] = (iArr[i5 - 1] / 24303);
                    iArr[i19] = (i4 % 39529);
                    i6 = (i19 / -23074);
                } catch (ArithmeticException a_e) {
                }
            }
            Test.fFld += i7;
            d += f;
            iArr[i5 - 1] &= i7;
            for (i21 = 1; i21 < 3; ++i21) {
                i6 = i23;
                i4 >>= i6;
                i20 >>= (int) -1776748410L;
                i6 += (int) l2;
                l2 += i4;
                i3 *= (int) Test.lFld;
                d3 = 1;
                while (++d3 < 2) {
                    i3 = (int) d3;
                    if (i7 != 0) {
                        vMeth_check_sum += i3 + i4 + i5 + i6 + by + Double.doubleToLongBits(d) + i7 + i8 + Float.floatToIntBits(f) + l2 + i19 + i20 + i21 + i22 + i23 + Double.doubleToLongBits(d3) + l3 + i24 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
                        return;
                    }
                    by = (byte) i22;
                    i23 <<= i3;
                    by += (byte) (d3 * f);
                    switch((int) (((d3 % 10) * 5) + 35)) {
                        case 75:
                            l3 *= i3;
                            Test.fFld = i5;
                            i24 *= i23;
                            iArr[(int) (d3 + 1)] = (int) -100L;
                            i6 = i4;
                            i24 += (int) (((d3 * i20) + Test.lFld) - by);
                        case 71:
                            i23 -= 33327;
                            break;
                        case 57:
                            d -= i24;
                            break;
                        case 79:
                            f = 215;
                            break;
                        case 51:
                            Test.instanceCount <<= -3172056412L;
                        case 66:
                            i20 *= (int) Test.fFld;
                            break;
                        case 84:
                            i24 += i22;
                            break;
                        case 76:
                            sArr[(int) (d3)] += Test.sFld;
                            break;
                        case 45:
                            Test.fFld += (float) (d3 * d3);
                            break;
                        case 64:
                            i24 += (int) (((d3 * Test.instanceCount) + i24) - i4);
                            break;
                        default:
                            b2 = b2;
                    }
                }
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + by + Double.doubleToLongBits(d) + i7 + i8 + Float.floatToIntBits(f) + l2 + i19 + i20 + i21 + i22 + i23 + Double.doubleToLongBits(d3) + l3 + i24 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {
        if (ax$23) {
            try {
                java.math.BigDecimal ax$24 = new BigDecimal("2");
                java.lang.String[] ax$27 = { "6", "3", "2", "1", "1", "-1", "-1", "-2", "-3", "-6", "6", "-6", "6", "-6", "1", "-1", "5", "-5", "5", "-5" };
                java.lang.String ax$25 = "12345-";
                int ax$26 = 100096;
                if (ax$24.signum() != 0 && !(ax$25 = (ax$24.toPlainString())).equals("-" + ax$27[1])) {
                    ax$26++;
                }
            } catch (Throwable ax$28) {
            } finally {
            }
            return;
        }
        int i = 48176, i1 = -68, i2 = 10, i25 = -10, i26 = 36792, i27 = -14, i28 = 48176, i29 = -222, i30 = -19, i31 = -8, i32 = -62624, i33 = 9, i34 = -3, i35 = 4, i36 = 63912, i37 = 8, i38 = -10, iArr3[] = new int[N];
        byte by1 = -99, byArr[] = new byte[N];
        boolean b3 = false;
        double d4 = -82.48436, d5 = -50.116336;
        short s = 8896;
        FuzzerUtils.init(iArr3, 2);
        FuzzerUtils.init(byArr, (byte) -27);
        i >>= -29893;
        for (i1 = 6; i1 < 185; ++i1) {
            {
                java.io.PrintStream ax$20 = System.out;
                java.io.PrintStream ax$21 = System.err;
                java.io.PrintStream ax$22 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$22);
                System.setErr(ax$22);
                try {
                    ax$8 = true;
                    for (int ax$18 = 0; ax$18 < 9557; ax$18 += 1) vMeth(-1391254048, 832853324);
                } catch (java.lang.Throwable ax$19) {
                } finally {
                    ax$8 = false;
                }
                System.setOut(ax$20);
                System.setErr(ax$21);
            }
            vMeth(i2, i25);
            i2 = by1;
            Test.lArrFld[i1 + 1][i1 + 1] *= i1;
            if (b3)
                continue;
            by1 += (byte) (((i1 * i2) + Test.instanceCount) - i1);
            Test.lFld = (long) d4;
            d4 *= i1;
            i2 -= i1;
            i25 += (i1 * i1);
            i25 &= 168;
            Test.lFld += i1;
        }
        for (i26 = 7; i26 < 213; ++i26) {
            try {
                iArr3[i26] = (iArr3[i26] % -44045);
                i2 = (iArr3[i26] % i1);
                i2 = (i2 / i27);
            } catch (ArithmeticException a_e) {
            }
            i25 = (int) Test.instanceCount;
            i25 >>= i2;
            iArr3[i26 + 1] %= 8;
            i27 = i;
            Test.instanceCount += i26;
            i += (int) (-9L + (i26 * i26));
        }
        i28 = 1;
        while (++i28 < 83) {
            Test.lFld = i27;
        }
        for (i29 = 7; i29 < 176; ++i29) {
            Test.sFld = (short) -221;
            Test.sFld += (short) i29;
            i27 += i29;
            i27 %= (int) (i27 | 1);
            i30 >>= (int) Test.instanceCount;
            d4 = i28;
            Test.sFld += (short) 115;
            i2 = (int) Test.instanceCount;
            i += (-34534 + (i29 * i29));
            Test.lFld = Test.lFld;
            d5 = 1;
            do {
                i31 = 1;
                while (++i31 < 1) {
                    if (b3)
                        break;
                    i30 += (i31 * i31);
                    Test.instanceCount += (i31 * i31);
                    Test.instanceCount *= Test.instanceCount;
                    b3 = b3;
                }
                b3 = b3;
                try {
                    iArr3[(int) (d5)] = (201 / i2);
                    i30 = (-64616 % i28);
                    i2 = (-107 % i26);
                } catch (ArithmeticException a_e) {
                }
                i32 = 1;
                do {
                    iArr3 = iArr3;
                    Test.lFld += (((i32 * i26) + i26) - i31);
                    i30 -= i2;
                    if (false)
                        break;
                } while (++i32 < 1);
                i2 *= (int) 363064748508472009L;
                try {
                    i25 = (i26 / i2);
                    i25 = (i27 / Test.iFld);
                    i = (48384 % i26);
                } catch (ArithmeticException a_e) {
                }
            } while (++d5 < 30);
            Test.sFld += Test.sFld;
            iArr3[i29] += (int) Test.lFld;
            Test.lFld += (((i29 * Test.fFld) + i28) - i31);
        }
        i30 *= s;
        for (i33 = 231; i33 > 9; i33 -= 2) {
            for (i35 = 46; i35 > 1; i35 -= 2) {
                iArr3[i35 - 1] = (int) 8L;
                i *= (int) Test.lFld;
                Test.lFld = Test.instanceCount;
                byArr[i35] = (byte) i33;
                i += (6 + (i35 * i35));
                i25 -= (int) Test.lFld;
                iArr3[i35] >>= i1;
                Test.fFld -= -88;
                for (i37 = 1; 3 > i37; i37++) {
                    Test.iFld += -9448;
                    Test.instanceCount += Test.lFld;
                    Test.sFld = (short) Test.fFld;
                    Test.instanceCount = 790339401L;
                    by1 >>>= (byte) i29;
                    b3 = b3;
                    i38 |= i34;
                }
                d4 += i38;
            }
            Test.instanceCount += i33;
            d4 = i34;
        }
        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i25 by1 b3 = " + i25 + "," + by1 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("d4 i26 i27 = " + Double.doubleToLongBits(d4) + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("d5 i31 i32 = " + Double.doubleToLongBits(d5) + "," + i31 + "," + i32);
        FuzzerUtils.out.println("s i33 i34 = " + s + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("i38 iArr3 byArr = " + i38 + "," + FuzzerUtils.checkSum(iArr3) + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.lFld Test.iFld Test.lArrFld = " + Test.lFld + "," + Test.iFld + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$8 = false;

    private static Boolean ax$23 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
