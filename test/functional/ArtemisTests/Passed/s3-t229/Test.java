// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 8330770903943865930L;

    public static int iFld = 183;

    public static byte byFld = 14;

    public static boolean bFld = true;

    public static double dFld = 1.96320;

    public static volatile float fFld = 123.338F;

    public long lFld = 74771107L;

    public static short sFld = 32409;

    public static int iFld1 = -54348;

    public static volatile int[] iArrFld = new int[N];

    public static double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 167);
        FuzzerUtils.init(Test.dArrFld, -1.83764);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i4) {
        int i5 = -45175, i6 = -62712, i7 = -53392, i8 = -174, i10 = -2, i11 = -74, i12 = -115, i13 = 10;
        long l1 = 12L, lArr[] = new long[N];
        short s = 6898;
        float f1 = -2.460F;
        double d = 0.43048;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(byArr, (byte) -120);
        FuzzerUtils.init(lArr, -15860L);
        i5 = 240;
        while (--i5 > 0) {
            for (l1 = 1; l1 < 3; ++l1) {
                byArr[i5] = (byte) -30070L;
                Test.instanceCount >>= i6;
                Test.iFld = i5;
                for (i7 = 1; 2 > i7; ++i7) {
                    int i9 = -8;
                    Test.iFld += i7;
                    s = (short) Test.iFld;
                    i8 |= (int) Test.instanceCount;
                    f1 += i8;
                    i6 = i6;
                    i4 += (int) Test.instanceCount;
                    i4 = Test.byFld;
                    try {
                        i4 = (i7 / i7);
                        i6 = (i9 % i6);
                        i6 = (38868 / Test.iFld);
                    } catch (ArithmeticException a_e) {
                    }
                    f1 *= (float) d;
                    d += f1;
                    i6 = i9;
                }
                Test.iFld += (int) (((l1 * l1) + i8) - i4);
                for (i10 = 2; i10 > 1; --i10) {
                    Test.instanceCount += (((i10 * Test.instanceCount) + i8) - i4);
                    i6 >>= i7;
                    f1 += l1;
                    d *= Test.byFld;
                    try {
                        Test.iArrFld[i10] = (i5 / Test.iFld);
                        Test.iArrFld[i5 + 1] = (i8 / 24724);
                        i8 = (Test.iFld % i11);
                    } catch (ArithmeticException a_e) {
                    }
                    i8 += (((i10 * l1) + i7) - l1);
                    Test.iArrFld[i10 + 1] += (int) l1;
                    i6 >>= s;
                    Test.instanceCount >>>= i5;
                    switch(((i11 >>> 1) % 1) + 56) {
                        case 56:
                            i4 = i7;
                            break;
                    }
                    i6 -= (int) d;
                }
                switch(((i5 % 8) * 5) + 42) {
                    case 63:
                        Test.iArrFld[(int) (l1)] = Test.iFld;
                        switch((i5 % 10) + 103) {
                            case 103:
                                for (i12 = 1; i12 < 2; i12++) {
                                    Test.instanceCount += i7;
                                }
                                if (Test.bFld)
                                    break;
                            case 104:
                                Test.instanceCount <<= Test.instanceCount;
                                break;
                            case 105:
                            case 106:
                            case 107:
                                Test.iFld += (int) (l1 * l1);
                            case 108:
                                i11 += i7;
                                break;
                            case 109:
                                Test.iArrFld[i5 - 1] = 14;
                            case 110:
                                Test.bFld = Test.bFld;
                                break;
                            case 111:
                                i6 -= (int) d;
                                break;
                            case 112:
                                i6 <<= i7;
                                break;
                            default:
                                Test.instanceCount += (l1 * i8);
                        }
                        break;
                    case 65:
                        Test.iArrFld[(int) (l1 - 1)] = -45437;
                        break;
                    case 66:
                        Test.instanceCount -= -2;
                        break;
                    case 45:
                        i6 = (int) -79.77802;
                    case 81:
                        lArr[i5] = i13;
                        break;
                    case 55:
                        Test.instanceCount += i5;
                        break;
                    case 80:
                        Test.instanceCount += (long) (82.960F + (l1 * l1));
                        break;
                    case 58:
                        Test.iArrFld[(int) (l1 - 1)] = s;
                        break;
                    default:
                        i13 = -31720;
                }
            }
        }
        long meth_res = i4 + i5 + l1 + i6 + i7 + i8 + s + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(long l) {
        Test.instanceCount -= (((25 * Test.iFld) - (Test.iArrFld[(Test.iFld >>> 1) % N]--)) + ((-7160 - Test.iFld) + Test.iFld));
        Test.iFld -= -59;
        Test.iArrFld[(Test.iFld >>> 1) % N] = (int) (iMeth1(24236) - l);
        Test.iFld -= Test.iFld;
        Test.iArrFld[(Test.iFld >>> 1) % N] += Test.iFld;
        long meth_res = l;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth() {
        int i1 = 229, i2 = -52428, i3 = -149, i14 = -44599, i15 = 30842, i16 = 156, i17 = -4, i18 = -88;
        double d1 = 2.91960;
        float f2 = -12.962F;
        long[][] lArr1 = new long[N][N];
        FuzzerUtils.init(lArr1, -30136L);
        i1 |= (i1++);
        Test.instanceCount = (--i1);
        for (i2 = 2; i2 < 212; ++i2) {
            Test.instanceCount = iMeth(Test.instanceCount);
            for (d1 = 3; d1 > 1; d1 -= 2) {
                try {
                    i14 = (17205 % Test.iFld);
                    i1 = (i14 % -30368);
                    i14 = (124 / i14);
                } catch (ArithmeticException a_e) {
                }
            }
            f2 += 0.671F;
            Test.iArrFld[i2 - 1] = i1;
            i3 -= i3;
            for (i15 = 1; i15 < 3; i15++) {
                Test.iArrFld = Test.iArrFld;
                Test.dFld += Test.instanceCount;
                for (i17 = 1; i17 < 2; ++i17) {
                    short s1 = 23425;
                    s1 += (short) (i17 ^ (long) f2);
                    Test.dFld -= Test.byFld;
                    i14 = (int) d1;
                    s1 += (short) i1;
                    i3 = Test.iFld;
                    i18 += (i17 * i17);
                    switch((i17 % 8) + 14) {
                        case 14:
                            Test.iFld = (int) Test.instanceCount;
                            i3 -= (int) f2;
                            switch(((i17 % 2) * 5) + 33) {
                                case 42:
                                    i14 &= (int) Test.instanceCount;
                                    i14 += i17;
                                    Test.dArrFld[i17 - 1] = i18;
                                    lArr1[i15][i15 + 1] = Test.instanceCount;
                                    switch((((-3246 >>> 1) % 6) * 5) + 47) {
                                        case 50:
                                            i1 = 49599;
                                            i1 >>= Test.iFld;
                                            f2 = f2;
                                            Test.instanceCount = i18;
                                            s1 = (short) i1;
                                            if (i16 != 0) {
                                                vMeth_check_sum += i1 + i2 + i3 + Double.doubleToLongBits(d1) + i14 + Float.floatToIntBits(f2) + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(lArr1);
                                                return;
                                            }
                                        case 57:
                                            f2 *= i15;
                                            Test.instanceCount ^= i1;
                                            Test.instanceCount = i16;
                                        case 72:
                                        case 51:
                                            i14 += 211;
                                            break;
                                        case 71:
                                            i14 += i17;
                                            break;
                                        case 69:
                                        default:
                                            f2 = s1;
                                    }
                                case 34:
                                    f2 += (float) Test.dFld;
                                    break;
                                default:
                                    i3 += (i17 * f2);
                            }
                            break;
                        case 15:
                            i3 ^= -57156;
                            break;
                        case 16:
                            Test.instanceCount = 4;
                            break;
                        case 17:
                            Test.iFld += (int) 2.439F;
                            break;
                        case 18:
                            f2 = Test.iFld;
                            break;
                        case 19:
                            Test.iArrFld[i15 - 1] = (int) Test.instanceCount;
                            break;
                        case 20:
                            Test.dFld -= s1;
                        case 21:
                            i1 = i2;
                        default:
                            Test.instanceCount = i15;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + Double.doubleToLongBits(d1) + i14 + Float.floatToIntBits(f2) + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {
        float f = 2.928F;
        int i = -90, i19 = 3, i20 = 5, i21 = -6, i22 = 51660, i23 = -27, i24 = -1, i25 = -4, i26 = -31144, i27 = -121;
        long[] lArr2 = new long[N];
        FuzzerUtils.init(lArr2, 2997L);
        for (f = 1; f < 131; f++) {
            i *= (int) (Math.abs(-534111356L + Math.min(i, i)) * i);
            vMeth();
            Test.iFld = (int) Test.instanceCount;
            Test.fFld = Test.iFld;
            for (i19 = 1; 39 > i19; i19++) {
                lFld = 12;
                Test.iFld = (int) Test.instanceCount;
                Test.dFld *= lFld;
                for (i21 = 1; i21 < 2; i21++) {
                    Test.iArrFld = FuzzerUtils.int1array(N, (int) 33606);
                }
                Test.iFld >>= 185;
                if (true) {
                    for (i23 = 1; i23 < 2; i23++) {
                        Test.byFld += (byte) (-90 + (i23 * i23));
                        switch((int) (((f % 2) * 5) + 36)) {
                            case 45:
                                Test.fFld -= Test.fFld;
                                Test.iFld >>= i19;
                                i -= i24;
                                if (Test.bFld)
                                    continue;
                                i += (int) f;
                                i20 += (i23 * i22);
                                Test.iFld -= i22;
                                Test.dFld += f;
                                Test.iFld = i22;
                                i24 += i23;
                                Test.dFld *= lFld;
                                try {
                                    i24 = (-38457 / i22);
                                    Test.iArrFld[i19 + 1] = (Test.iArrFld[i23 - 1] % -147);
                                    Test.iFld = (-194 / i25);
                                } catch (ArithmeticException a_e) {
                                }
                                Test.iArrFld[i23 + 1] -= i;
                                i25 = (int) f;
                                break;
                            case 44:
                                Test.instanceCount >>= i20;
                            default:
                                i22 += (((i23 * f) + lFld) - i19);
                                Test.instanceCount += i23;
                                Test.iFld |= (int) 3444163627072879232L;
                                Test.fFld -= i24;
                                lArr2[i23] += i23;
                                i += (int) (-2878475913L + (i23 * i23));
                                Test.fFld += lFld;
                                Test.bFld = Test.bFld;
                                Test.sFld += (short) i19;
                                lFld += -66L;
                        }
                        switch((i19 % 2) + 75) {
                            case 75:
                                i24 <<= i22;
                                i20 = Test.iFld;
                                i24 = (int) -118L;
                                i20 <<= i;
                                i |= i21;
                                i26 <<= i23;
                                Test.fFld += -29840L;
                                i26 -= (int) 8785970159020203919L;
                                i22 = (int) Test.dFld;
                                i24 += 194;
                                if (Test.bFld)
                                    continue;
                                Test.dArrFld[i23 + 1] = -21764;
                                break;
                            case 76:
                                Test.dFld = f;
                                i24 += i25;
                                switch((i23 % 2) + 89) {
                                    case 89:
                                        Test.dFld += i26;
                                        Test.instanceCount = i21;
                                        i24 -= -39559;
                                        Test.fFld += i26;
                                        Test.iArrFld[i23] *= i;
                                        i22 *= -13;
                                        Test.iFld1 >>>= i22;
                                        i20 += (((i23 * i) + Test.fFld) - Test.instanceCount);
                                        Test.fFld += i23;
                                        Test.iArrFld[i23] = i19;
                                        lFld = Test.iFld;
                                        break;
                                    case 90:
                                        Test.sFld += (short) i25;
                                        i25 *= (int) Test.fFld;
                                        switch(((i19 >>> 1) % 1) + 59) {
                                            case 59:
                                                Test.iArrFld[(int) (f)] = i25;
                                                lFld -= lFld;
                                                Test.iFld1 -= i27;
                                                lArr2[(int) (f + 1)] |= i25;
                                                break;
                                            default:
                                                Test.instanceCount += Test.iFld1;
                                        }
                                        break;
                                }
                                break;
                        }
                    }
                } else {
                    i26 -= -24909;
                }
            }
        }
        FuzzerUtils.out.println("f i i19 = " + Float.floatToIntBits(f) + "," + i + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 lArr2 = " + i26 + "," + i27 + "," + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld + "," + Test.byFld);
        FuzzerUtils.out.println("Test.bFld Test.dFld Test.fFld = " + (Test.bFld ? 1 : 0) + "," + Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("lFld Test.sFld Test.iFld1 = " + lFld + "," + Test.sFld + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.iArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
        {
            java.io.PrintStream ax$19 = System.out;
            java.io.PrintStream ax$20 = System.err;
            java.io.PrintStream ax$21 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$21);
            System.setErr(ax$21);
            try {
                for (int ax$17 = -1042; ax$17 < 7391; ax$17 += 1) {
                    try {
                        java.lang.Object ax$13 = "3.849149894363509E+36";
                        java.lang.Object ax$15 = "\u012F\u0300";
                        try {
                            // Create a stream in which to serialize the object.
                            ByteArrayOutputStream ax$11 = new ByteArrayOutputStream();
                            ObjectOutputStream ax$9 = new ObjectOutputStream(ax$11);
                            // Serialize the object into the stream
                            ax$9.writeObject(ax$13);
                            // Create an input stream from which to deserialize the object
                            byte[] ax$12 = ax$11.toByteArray();
                            ByteArrayInputStream ax$14 = new ByteArrayInputStream(ax$12);
                            ObjectInputStream ax$10 = new ObjectInputStream(ax$14);
                            // Deserialize the object
                            ax$15 = ax$10.readObject();
                        } catch (Exception ex) {
                        }
                    } catch (Throwable ax$16) {
                    } finally {
                    }
                }
            } catch (Throwable ax$18) {
            }
            System.setOut(ax$19);
            System.setErr(ax$20);
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
