// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = -974012148L;

    public int iFld = -43783;

    public static float fFld = -92.749F;

    public static short sFld = -2237;

    public static boolean bFld = false;

    public double dFld = -87.6620;

    public static volatile int[] iArrFld = new int[N];

    public float[] fArrFld = new float[N];

    public static volatile double[][] dArrFld = new double[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 33435);
        FuzzerUtils.init(Test.dArrFld, 0.57244);
    }

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vMeth(byte by, int i9) {
        if (ax$9) {
            try {
                java.lang.Object[] ax$10 = new Object[250];
                java.lang.String[] ax$11 = { "'{'", "'{", "{", "''", "}", "a", "'" };
                System.arraycopy(ax$10, 0, ax$11, 0, ax$11.length);
            } catch (Throwable ax$12) {
            } finally {
            }
            return;
        }
        int i10 = 27, i11 = 62, i12 = -5, iArr[] = new int[N];
        long l = -9L;
        boolean b = true;
        FuzzerUtils.init(iArr, -217);
        i10 = 1;
        do {
            for (l = 1; l < 4; l++) {
                Test.fFld = i9;
                i12 = 2;
                while (--i12 > 0) {
                    i9 = i10;
                    Test.fFld += (((i12 * i10) + Test.instanceCount) - i9);
                    b = b;
                    iArr = iArr;
                    i11 >>= 0;
                    i11 -= i12;
                    Test.instanceCount = 20154;
                    if (b)
                        break;
                    iArr[i12 + 1] >>= i11;
                    iArr[(int) (l - 1)] <<= i12;
                    Test.sFld += (short) (i12 | i12);
                }
            }
            by -= (byte) i9;
        } while (++i10 < 154);
        i11 &= i10;
        i11 += (int) 1548952865L;
        vMeth_check_sum += by + i9 + i10 + l + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(int i7, int i8) {
        byte by1 = 55;
        int i13 = 226;
        boolean b1 = false;
        {
            java.io.PrintStream ax$15 = System.out;
            java.io.PrintStream ax$16 = System.err;
            java.io.PrintStream ax$17 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$17);
            System.setErr(ax$17);
            try {
                ax$9 = true;
                for (int ax$13 = 0; ax$13 < 9617; ax$13 += 1) vMeth((byte) -842737158, 1773516103);
            } catch (java.lang.Throwable ax$14) {
            } finally {
                ax$9 = false;
            }
            System.setOut(ax$15);
            System.setErr(ax$16);
        }
        vMeth(by1, i8);
        i13 = 1;
        while (++i13 < 241) {
            i7 = (int) Test.instanceCount;
            b1 = b1;
            Test.sFld = (short) i7;
            Test.instanceCount += i13;
        }
        {
            java.io.PrintStream ax$6 = System.out;
            java.io.PrintStream ax$7 = System.err;
            java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$8);
            System.setErr(ax$8);
            try {
                for (int ax$4 = -4669; ax$4 < 1186; ax$4 += 1) {
                    int ax$2 = i13;
                    try {
                        byte[] ax$0 = new byte[0];
                        int ax$1 = ax$0.length - i13;
                        ax$0[ax$1] = (byte) 0xff;
                    } catch (Throwable ax$3) {
                    } finally {
                        i13 = ax$2;
                    }
                }
            } catch (Throwable ax$5) {
            }
            System.setOut(ax$6);
            System.setErr(ax$7);
        }
        Test.iArrFld[(-31246 >>> 1) % N] -= i8;
        long meth_res = i7 + i8 + by1 + i13 + (b1 ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(int i1, int i2, int i3) {
        int i4 = 0, i5 = 72, i6 = -10, i14 = 0, i15 = -22160, i16 = 223, i17 = -13, i18 = -42424, i19 = 168, i20 = -5615;
        float f = -103.362F, fArr[] = new float[N];
        double[] dArr = new double[N];
        FuzzerUtils.init(fArr, -115.617F);
        FuzzerUtils.init(dArr, 1.104006);
        i4 = 1;
        do {
            i3 <<= i2;
            i3 += (((i4 * i1) + Test.instanceCount) - i2);
            for (i5 = i4; i5 < 4; i5++) {
                Test.instanceCount &= (long) ((++fArr[i4]) - 3);
                f += (((i5 >> 6) - (i3 - Test.instanceCount)) * ((i3--) - (Test.instanceCount++)));
                i2 *= iMeth1(-186, -32973);
                Test.iArrFld[i5 + 1] >>>= (int) Test.instanceCount;
                for (i14 = 1; i14 < 1; ++i14) {
                    i3 += 134;
                    Test.fFld += (((i14 * i1) + i16) - i6);
                    Test.fFld -= -36999;
                    i1 = i2;
                    fArr[i5 + 1] *= i1;
                    if (Test.bFld)
                        break;
                }
                if (Test.bFld) {
                    i6 = i15;
                } else {
                    i1 += (int) (56454L + (i5 * i5));
                    i3 += (i5 * i5);
                }
                try {
                    i6 = (i2 / i5);
                    i16 = (i5 / -172);
                    i3 = (47 / i6);
                } catch (ArithmeticException a_e) {
                }
                i3 *= i3;
            }
            for (i17 = 1; 4 > i17; ++i17) {
                for (i19 = i4; 2 > i19; ++i19) {
                    i15 >>= (int) Test.instanceCount;
                    Test.instanceCount += i19;
                    Test.iArrFld[i4] += (int) Test.fFld;
                    if (Test.bFld)
                        break;
                    Test.instanceCount = i1;
                    Test.bFld = Test.bFld;
                    Test.instanceCount = i2;
                    Test.fFld += (i19 * i6);
                    i18 += (((i19 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                    dArr[i4] = f;
                }
                i1 ^= i14;
                i3 += (i17 ^ i3);
                i20 %= (int) (i18 | 1);
                if (Test.bFld)
                    continue;
            }
        } while (++i4 < 137);
        long meth_res = i1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i14 + i15 + i16 + i17 + i18 + i19 + i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        if (ax$18) {
            try {
                int ax$20 = 0x55;
                int ax$19 = 0xB7;
                if (ax$20 != ax$19)
                    ;
            } catch (Throwable ax$21) {
            } finally {
            }
            return;
        }
        int i = 6783, i21 = -60626, i22 = 32194, i23 = 51798, i24 = -12, i25 = 41428, i26 = 20, i27 = 6, i28 = -11, i29 = 35506, iArr1[] = new int[N];
        byte by2 = -30;
        long l1 = 34672L, l2 = 31440L, l3 = -1L, lArr[] = new long[N];
        float f1 = 0.54F;
        FuzzerUtils.init(lArr, -2155637962L);
        FuzzerUtils.init(iArr1, -1699);
        i = 135;
        while (--i > 0) {
            Test.instanceCount += Test.instanceCount;
            iFld += (i - Test.instanceCount);
            iFld += (((i * iFld) + i) - Test.instanceCount);
            lArr = (lArr = (lArr = (lArr = lArr)));
        }
        iMeth(i, iFld, iFld);
        i21 = 1;
        do {
            iFld %= (int) (by2 | 1);
            iFld = i22;
            i22 += (int) Test.instanceCount;
            for (l1 = 1; l1 < 31; ++l1) {
                Test.instanceCount -= i21;
                if (true)
                    continue;
                for (f1 = l1; f1 < 2; f1++) {
                    i23 += (int) (((f1 * i22) + i21) - i21);
                    Test.iArrFld[(int) (f1)] >>>= i24;
                    if (Test.bFld)
                        break;
                    iFld <<= (int) l1;
                    Test.iArrFld[(int) (l1 + 1)] += (int) l2;
                    i25 = i21;
                    l2 -= Test.instanceCount;
                    Test.sFld += (short) f1;
                    i25 &= i24;
                    i25 = (int) -56.896F;
                    i22 >>>= -244;
                    i24 += i21;
                    i23 *= iFld;
                    iFld += (-102 + (f1 * f1));
                    if (Test.bFld)
                        continue;
                }
                try {
                    iFld = (iFld / -21602);
                    Test.iArrFld[(int) (l1 - 1)] = (-9966 / i22);
                    Test.iArrFld[(int) (l1 - 1)] = (i23 % i24);
                } catch (ArithmeticException a_e) {
                }
                i23 += (int) l1;
                i23 = i21;
                for (i26 = 1; i26 < 2; i26++) {
                    try {
                        i27 = (Test.iArrFld[i21] % 75);
                        iFld = (-5047 / i24);
                        i25 = (-1206810616 % Test.iArrFld[i21]);
                    } catch (ArithmeticException a_e) {
                    }
                    lArr[i26] ^= i;
                }
                by2 -= by2;
                for (l3 = l1; l3 < 2; l3++) {
                    i28 += (-2 + (l3 * l3));
                    if (Test.bFld) {
                        iFld += (int) (l3 | i24);
                        fArrFld[(int) (l1 - 1)] = i28;
                        try {
                            Test.iArrFld[i21 - 1] = (i % 244);
                            i22 = (Test.iArrFld[(int) (l1 + 1)] % Test.iArrFld[(int) (l3 - 1)]);
                            iFld = (i22 / i26);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.iArrFld[(int) (l1 - 1)] -= i25;
                        Test.iArrFld[i21 + 1] = by2;
                        Test.sFld = (short) l2;
                        i29 += (int) (((l3 * i25) + f1) - Test.instanceCount);
                        i25 += (int) (l3 | by2);
                        i27 /= (int) (i26 | 1);
                        dFld /= (l3 | 1);
                        try {
                            i23 = (i28 / 14680);
                            iFld = (i22 % Test.iArrFld[(int) (l1 + 1)]);
                            Test.iArrFld[(int) (l3)] = (i27 % iFld);
                        } catch (ArithmeticException a_e) {
                        }
                        i29 -= (int) l3;
                        i24 = i22;
                    } else {
                        i22 += (int) l3;
                        Test.fFld /= (l2 | 1);
                        i23 += i24;
                        fArrFld[(int) (l3)] = (float) dFld;
                        by2 = (byte) i22;
                        i27 <<= i24;
                        i24 |= i28;
                        Test.sFld += (short) (l3 ^ l2);
                        dFld = i26;
                        Test.dArrFld[(int) (l1 - 1)][i21 - 1] = i25;
                        lArr[(int) (l1 - 1)] = (long) -19.71747;
                        l2 = i26;
                        i24 = i28;
                        i25 += (int) l3;
                    }
                    i25 = (int) Test.instanceCount;
                    i23 += (int) (l3 * l3);
                    i23 -= Test.sFld;
                    Test.iArrFld[i21 - 1] = (int) Test.instanceCount;
                    lArr[(int) (l1 - 1)] = i29;
                    i25 -= (int) -64688L;
                    i23 = i22;
                }
            }
            iFld = i28;
            iArr1[i21 - 1] = i21;
        } while (++i21 < 162);
        FuzzerUtils.out.println("i i21 by2 = " + i + "," + i21 + "," + by2);
        FuzzerUtils.out.println("i22 l1 i23 = " + i22 + "," + l1 + "," + i23);
        FuzzerUtils.out.println("f1 i24 l2 = " + Float.floatToIntBits(f1) + "," + i24 + "," + l2);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("l3 i28 i29 = " + l3 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("lArr iArr1 = " + FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld Test.bFld dFld = " + Test.sFld + "," + (Test.bFld ? 1 : 0) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iArrFld fArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$9 = false;

    private static Boolean ax$18 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
