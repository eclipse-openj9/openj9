// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 6921494975630402110L;

    public static volatile float fFld = 0.159F;

    public static long lFld = -47478L;

    public static short sFld = 17138;

    public static volatile byte byFld = -63;

    public static int[][] iArrFld = new int[N][N];

    public long[] lArrFld = new long[N];

    public static double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 63);
        FuzzerUtils.init(Test.dArrFld, -67.107560);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i11, int i12, int i13) {
        if (ax$9) {
            try {
                java.lang.StringBuffer ax$10 = new StringBuffer("FOOBAR");
                try {
                    ax$10.insert(0, new char[5], 1, Integer.MAX_VALUE);
                } catch (StringIndexOutOfBoundsException sobe) {
                    // Test passed
                } catch (OutOfMemoryError oome) {
                }
            } catch (Throwable ax$11) {
            } finally {
            }
            return -1786034476;
        }
        double d1 = -6.83384;
        int i14 = 14, i15 = 11, i16 = -32112, i17 = -4, i18 = 87;
        long l = -144L;
        short s2 = -173;
        boolean b = false, bArr[] = new boolean[N];
        FuzzerUtils.init(bArr, true);
        i11 += (int) d1;
        i13 = i13;
        Test.lFld += i12;
        for (i14 = 5; i14 < 167; i14++) {
            l = 1;
            while (++l < 4) {
                i13 -= i14;
                i11 = i11;
                i16 -= s2;
                for (i17 = 1; i17 < 1; ++i17) {
                    Test.lFld = i11;
                    Test.fFld = Test.lFld;
                    b = b;
                    if (b)
                        continue;
                    i16 += i17;
                    switch(((i17 >>> 1) % 1) + 47) {
                        case 47:
                            i13 >>= i18;
                            i16 = (int) -6286735437217094904L;
                            switch(((13076 >>> 1) % 8) + 53) {
                                case 53:
                                    Test.instanceCount += i16;
                                    Test.iArrFld[(int) (l + 1)][(int) (l + 1)] = (int) -13L;
                                    Test.instanceCount -= i14;
                                    i15 -= -14;
                                    i12 += i17;
                                    switch(((i11 >>> 1) % 2) + 51) {
                                        case 51:
                                            Test.instanceCount = (long) d1;
                                            Test.fFld *= i12;
                                            s2 = (short) 38806L;
                                            if (false) {
                                                i12 <<= i14;
                                                bArr[(i16 >>> 1) % N] = true;
                                                i18 = i15;
                                                Test.iArrFld[(int) (l)][(int) (l)] = (int) Test.fFld;
                                            }
                                            i16 <<= i15;
                                            Test.fFld -= Test.instanceCount;
                                            i12 += 5;
                                            i12 = (int) Test.instanceCount;
                                            i18 += (int) l;
                                        case 52:
                                            i11 += i17;
                                        default:
                                            i16 -= i16;
                                    }
                                    break;
                                case 54:
                                case 55:
                                    if (b)
                                        continue;
                                case 56:
                                    Test.instanceCount *= Test.instanceCount;
                                    break;
                                case 57:
                                    if (i14 != 0) {
                                    }
                                case 58:
                                    i12 >>>= i13;
                                    break;
                                case 59:
                                    try {
                                        i15 = (-24671 % i12);
                                        Test.iArrFld[(int) (l + 1)][i17 - 1] = (i16 % Test.iArrFld[i14 - 1][(int) (l - 1)]);
                                        i13 = (i14 % i16);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    break;
                                case 60:
                                    Test.fFld -= (float) d1;
                            }
                    }
                }
            }
        }
        long meth_res = i11 + i12 + i13 + Double.doubleToLongBits(d1) + i14 + i15 + l + i16 + s2 + i17 + i18 + (b ? 1 : 0) + FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth() {
        if (ax$17) {
            try {
                int ax$50 = 0x7f01;
                java.lang.String ax$49 = "\uFB04";
                int ax$48 = -11;
                if (ax$48 != (int) ax$49.charAt(ax$50)) {
                }
            } catch (Throwable ax$51) {
            } finally {
            }
            return;
        }
        int i6 = 7, i7 = -5352, i8 = -201, i9 = -213, i10 = -21697, i19 = 62785, iArr[][] = new int[N][N];
        short s = 27333, sArr[] = new short[N];
        double d = -1.88398, d2 = -2.121342;
        byte by = 92;
        float f = -2.713F, fArr[] = new float[N];
        FuzzerUtils.init(iArr, -35347);
        FuzzerUtils.init(fArr, 1.505F);
        FuzzerUtils.init(sArr, (short) 12634);
        i6 += (int) (-((i6 * s) - (Test.fFld--)));
        for (i7 = 4; i7 < 142; i7++) {
            Test.instanceCount *= (long) d;
            iArr[i7][i7] <<= i7;
            i8 += (i7 + Test.instanceCount);
            i9 = 1;
            do {
                Test.instanceCount = (i6--);
                Test.instanceCount >>>= (i8++);
                iArr[i9 - 1][i9] = (int) ((fArr[i9] += (i8++)) + ((-(i9 * Test.fFld)) - (i7 / 3066)));
                try {
                    i6 = (iArr[(i6 >>> 1) % N][i9] / i6);
                    i6 = (i8 % 63754);
                    i8 = (iArr[i9][i9 - 1] % 6895);
                } catch (ArithmeticException a_e) {
                }
                try {
                    i8 = (1290400840 / i9);
                    i8 = (-2131 / i7);
                    i8 = (-1252790363 / i9);
                } catch (ArithmeticException a_e) {
                }
                i8 -= sArr[i7];
                i6 += (int) (Integer.reverseBytes(i6 + by) + (Math.abs(Test.fFld) - (i8 * i6)));
                iArr[i7][i9 + 1] = (int) (-(i8 >>= (int) (by * Test.instanceCount)));
                for (f = 1; f < 1; ++f) {
                    short s1 = -15755;
                    i6 += (by++);
                    i10 ^= (int) ((Math.abs(121L) + (Test.lFld + -1802700613L)) - i10);
                    Test.instanceCount = iArr[i7 + 1][i9 - 1];
                    Test.fFld += ((by++) * (iArr[(int) (f + 1)][(int) (f)] &= (++i6)));
                    sArr[i7] = (short) i7;
                    i10 *= ((--iArr[(int) (f)][i7 - 1]) - (iArr[i9 - 1][(int) (f)] - (++s1)));
                    i6 = i10;
                }
                i10 = iMeth1(31006, i6, -35018);
                i8 *= i6;
                for (d2 = i7; d2 < 1; d2++) {
                    iArr[i9][(int) (d2 + 1)] -= i9;
                    i10 &= (int) -5L;
                    Test.instanceCount = 7L;
                    fArr[i9] += by;
                    Test.iArrFld[i7 - 1][i9] ^= i10;
                    i10 += (57515 + (d2 * d2));
                    Test.instanceCount += (long) (d2 * d2);
                    try {
                        i8 = (i10 % -8488);
                        iArr[(int) (d2 + 1)][i9 + 1] = (-7707 % i7);
                        i6 = (-1301553870 % i10);
                    } catch (ArithmeticException a_e) {
                    }
                }
                iArr[i7 - 1][i9] <<= i6;
                i6 += (i9 * i9);
            } while (++i9 < 4);
            sArr[i7 - 1] >>= (short) 25725;
            Test.fFld *= -25322L;
        }
        vMeth_check_sum += i6 + s + i7 + i8 + Double.doubleToLongBits(d) + i9 + by + Float.floatToIntBits(f) + i10 + Double.doubleToLongBits(d2) + i19 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth(int i1, int i2, int i3) {
        int i4 = 0, i5 = -158, i20 = 1, i21 = 49053, i22 = -51261, i23 = -216, i25 = 14, i26 = -28542;
        double d3 = 0.77246;
        byte by1 = 3;
        long[] lArr = new long[N];
        float[] fArr1 = new float[N];
        FuzzerUtils.init(lArr, -2060370563L);
        FuzzerUtils.init(fArr1, -30.789F);
        for (i4 = 157; i4 > 6; --i4) {
            boolean b1 = false;
            {
                java.io.PrintStream ax$54 = System.out;
                java.io.PrintStream ax$55 = System.err;
                java.io.PrintStream ax$56 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$56);
                System.setErr(ax$56);
                try {
                    ax$17 = true;
                    for (int ax$52 = 0; ax$52 < 6464; ax$52 += 1) vMeth();
                } catch (java.lang.Throwable ax$53) {
                } finally {
                    ax$17 = false;
                }
                System.setOut(ax$54);
                System.setErr(ax$55);
            }
            vMeth();
            if (i3 != 0) {
            }
            if (b1)
                continue;
            i5 = (int) Test.instanceCount;
            i3 *= i3;
            i2 = (int) Test.lFld;
            i3 = -99;
            for (i20 = i4; 4 > i20; i20 += 3) {
                i3 += (i20 * i1);
                lArr[i20 + 1] += (long) d3;
                Test.iArrFld[i4][i4 - 1] *= i3;
                Test.instanceCount = i3;
                Test.fFld *= 0;
                for (i22 = i20; i22 < 1; i22++) {
                    int i24 = -20479;
                    i3 *= -251;
                    Test.instanceCount *= (long) Test.fFld;
                    i1 -= i1;
                    i3 = i4;
                    i5 = i4;
                    fArr1[i22] -= i3;
                    d3 = i21;
                    by1 += (byte) (3645604914L + (i22 * i22));
                    Test.lFld -= Test.lFld;
                    Test.sFld = (short) i4;
                    d3 += Test.lFld;
                    i5 += -9104;
                    i2 = i21;
                    Test.fFld += (((i22 * i20) + i24) - i23);
                }
                if (b1)
                    break;
                for (i25 = 1; i25 > 1; i25 -= 3) {
                    i1 += (int) d3;
                    i23 &= i1;
                    d3 = i25;
                }
                i26 = i26;
            }
            by1 *= (byte) Test.lFld;
        }
        i21 += (int) d3;
        long meth_res = i1 + i2 + i3 + i4 + i5 + i20 + i21 + Double.doubleToLongBits(d3) + i22 + i23 + by1 + i25 + i26 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -52791, i28 = 23460, i29 = -11, i30 = -216, i31 = -19282, i32 = 22714, i33 = -14, i34 = 123, iArr1[] = new int[N];
        double d4 = 0.128253;
        boolean b2 = true;
        long[][] lArr1 = new long[N][N];
        FuzzerUtils.init(iArr1, -38);
        FuzzerUtils.init(lArr1, 139L);
        i -= (iMeth(98, i, 18850) - i);
        Test.instanceCount >>>= Test.instanceCount;
        for (int i27 : iArr1) {
            for (i28 = 1; 20 > i28; i28 += 3) {
                Test.lFld += i27;
                i -= (int) Test.instanceCount;
                i27 += i27;
                i27 >>= (int) Test.lFld;
                Test.lFld += 6;
                switch(((i28 % 3) * 5) + 117) {
                    case 131:
                        Test.lFld += i28;
                        Test.iArrFld[i28 + 1][i28 + 1] >>>= 5;
                        break;
                    case 119:
                        i27 >>= (int) Test.lFld;
                        i27 *= i28;
                        for (i30 = 4; i30 > 1; i30--) {
                            i29 += i28;
                            Test.instanceCount += i30;
                            try {
                                i29 = (i % Test.iArrFld[i28 - 1][i30 + 1]);
                                i31 = (i % -52491);
                                Test.iArrFld[i30 + 1][i28 - 1] = (i29 % -10);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.fFld -= i;
                            i31 >>= i29;
                        }
                        Test.instanceCount += i28;
                        i27 += (i28 * i28);
                        i27 -= (int) Test.fFld;
                        i += (((i28 * i) + i) - Test.instanceCount);
                        break;
                    case 118:
                        i31 *= (int) Test.lFld;
                        i /= (int) ((long) (d4) | 1);
                }
                i27 = i;
                Test.sFld = (short) 8646441368757673942L;
                for (i32 = 1; i32 < 4; ++i32) {
                    i33 -= (int) d4;
                }
                Test.iArrFld[i28] = iArr1;
                i34 = 1;
                while (++i34 < 4) {
                    Test.fFld += (i34 * i34);
                    i31 += i34;
                    Test.lFld += (5 + (i34 * i34));
                    i33 += (i34 * i29);
                    iArr1[i34 + 1] -= i30;
                    i31 += i34;
                    switch((i34 % 2) + 42) {
                        case 42:
                            Test.instanceCount += (i34 - i34);
                            Test.fFld -= i32;
                            i31 &= (int) Test.instanceCount;
                            if (b2) {
                                i31 = Test.byFld;
                                Test.byFld >>= (byte) 198L;
                                switch((i28 % 10) + 115) {
                                    case 115:
                                        try {
                                            Test.iArrFld[i28][i34 + 1] = (731950113 % i31);
                                            i = (16 / i30);
                                            i31 = (i % 721493869);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        d4 -= Test.lFld;
                                        i33 = (int) Test.fFld;
                                        Test.byFld = (byte) i30;
                                        Test.fFld = Test.instanceCount;
                                        i -= i27;
                                        Test.iArrFld[i28][i34 - 1] <<= i32;
                                        try {
                                            i = (1211067882 % i30);
                                            i31 = (10916 % i31);
                                            i33 = (i29 / -252);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        if (b2)
                                            continue;
                                        Test.lFld = Test.byFld;
                                        lArrFld[i34 - 1] = Test.byFld;
                                        Test.dArrFld[i28 - 1] = d4;
                                        Test.instanceCount *= (long) Test.fFld;
                                        Test.instanceCount -= 0;
                                        break;
                                    case 116:
                                        Test.sFld += (short) (i34 ^ i31);
                                        i = i31;
                                        Test.byFld = (byte) i27;
                                        break;
                                    case 117:
                                        Test.sFld /= (short) (i29 | 1);
                                        b2 = b2;
                                        if (true)
                                            break;
                                        Test.instanceCount *= 7;
                                        lArrFld[i28] = i27;
                                    case 118:
                                        Test.iArrFld[i28 - 1][i28] = i32;
                                        switch((i28 % 6) + 95) {
                                            case 95:
                                                iArr1[i28 + 1] = i33;
                                                break;
                                            case 96:
                                                i27 >>= 9;
                                                Test.iArrFld[i34 + 1] = iArr1;
                                                Test.instanceCount *= -31607;
                                                Test.fFld *= Test.lFld;
                                                break;
                                            case 97:
                                                i29 += i31;
                                            case 98:
                                            case 99:
                                                i27 += (((i34 * i30) + i31) - i30);
                                                break;
                                            case 100:
                                                i33 += (((i34 * Test.fFld) + i31) - i27);
                                                break;
                                            default:
                                                Test.fFld -= i31;
                                        }
                                    case 119:
                                        Test.instanceCount += Test.instanceCount;
                                        break;
                                    case 120:
                                        i = (int) d4;
                                        break;
                                    case 121:
                                        Test.iArrFld[(i31 >>> 1) % N][i34 + 1] *= i;
                                    case 122:
                                        Test.instanceCount >>= i32;
                                    case 123:
                                        Test.instanceCount += (i34 * i34);
                                        break;
                                    case 124:
                                        lArrFld[i28 - 1] = (long) Test.fFld;
                                        break;
                                }
                            } else if (b2) {
                                Test.instanceCount >>= i32;
                            }
                            break;
                        case 43:
                            lArrFld[i34 - 1] = i31;
                        default:
                            lArr1 = FuzzerUtils.long2array(N, (long) -27541L);
                    }
                }
            }
        }
        {
            java.io.PrintStream ax$6 = System.out;
            java.io.PrintStream ax$7 = System.err;
            java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$8);
            System.setErr(ax$8);
            try {
                for (int ax$4 = -1273; ax$4 < 4200; ax$4 += 1) {
                    long ax$2 = iMeth1_check_sum;
                    try {
                        long[] ax$0 = { // 7-bit
                        0x0FL, 0x7FL, 0xFFL };
                        for (int ax$1 = 0; ax$1 < 128; ax$1++) ax$0[ax$1] += iMeth1_check_sum;
                    } catch (Throwable ax$3) {
                    } finally {
                        iMeth1_check_sum = ax$2;
                    }
                }
            } catch (Throwable ax$5) {
            }
            System.setOut(ax$6);
            System.setErr(ax$7);
        }
        FuzzerUtils.out.println("i i28 i29 = " + i + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 d4 = " + i30 + "," + i31 + "," + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("b2 iArr1 lArr1 = " + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr1) + "," + FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.lFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Test.lFld);
        FuzzerUtils.out.println("Test.sFld Test.byFld Test.iArrFld = " + Test.sFld + "," + Test.byFld + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld Test.dArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$9 = false;

    private static Boolean ax$17 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
