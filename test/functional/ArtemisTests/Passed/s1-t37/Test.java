// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.HashSet;
import java.util.Set;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 19245L;

    public static boolean bFld = true;

    public static int iFld = -12;

    public static byte byFld = -20;

    public float fFld = 0.484F;

    public double dFld = 74.7118;

    public int iFld1 = -166;

    public static int iFld2 = 14;

    public static int[] iArrFld = new int[N];

    public byte[] byArrFld = new byte[N];

    public float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 151);
    }

    public static long vSmallMeth_check_sum = 0;

    public static long fMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vMeth() {
        if (ax$17) {
            int ax$20 = iFld2;
            try {
                if (iFld2 != 42) {
                }
            } catch (Throwable ax$21) {
            } finally {
                iFld2 = ax$20;
            }
            return;
        }
        int i4 = -98, i5 = -128, i6 = 48957, i7 = 13, i8 = -198, i9 = 5, i10 = 51, i11 = -1;
        byte by = 46;
        float f1 = 36.617F, fArr[] = new float[N];
        double d = 119.128596, dArr[] = new double[N];
        short s = 15581;
        long l1 = -21L, lArr[][] = new long[N][N];
        FuzzerUtils.init(lArr, 8L);
        FuzzerUtils.init(dArr, -110.78721);
        FuzzerUtils.init(fArr, 33.73F);
        i4 = by;
        Test.instanceCount = i4;
        i5 = 1;
        while (++i5 < 114) {
            Test.instanceCount -= i4;
            f1 -= i4;
            for (i6 = 1; i6 < 5; i6++) {
                i7 = (int) f1;
                switch((i5 % 2) + 87) {
                    case 87:
                        for (i8 = 1; i8 < 2; i8++) {
                            i4 += i9;
                            Test.iArrFld[i6 - 1] = i9;
                            i7 -= i10;
                            lArr[i5 - 1][i5 + 1] -= i4;
                            f1 = (float) d;
                            if (Test.bFld)
                                break;
                            dArr[i5] /= (i8 | 1);
                            i9 -= (int) Test.instanceCount;
                            if (Test.bFld)
                                break;
                            i10 = (int) Test.instanceCount;
                            i9 >>= -13;
                            i7 <<= i7;
                            i10 = s;
                            f1 += i8;
                            i9 += (4 + (i8 * i8));
                        }
                        for (l1 = i6; 2 > l1; l1++) {
                            f1 = (float) d;
                            i7 = i4;
                            Test.instanceCount += (l1 - i9);
                            Test.instanceCount += l1;
                            Test.iArrFld[(int) (l1)] = (int) l1;
                            Test.instanceCount |= i6;
                            Test.iFld += -42329;
                            fArr[i5 - 1] -= -24868;
                            fArr[(-9 >>> 1) % N] -= i6;
                            i11 = i10;
                            Test.instanceCount >>= i6;
                            Test.iArrFld[i6 + 1] = (int) l1;
                        }
                        break;
                    case 88:
                        i7 += (i6 * i6);
                        break;
                    default:
                        Test.iArrFld[i5] = i4;
                }
            }
        }
        vMeth_check_sum += i4 + by + i5 + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + s + l1 + i11 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static float fMeth(int i1) {
        int i2 = -51759, i3 = 7, i12 = -173, i13 = 26730, i14 = -10, i15 = 59112, i16 = -1, i17 = 9, i18 = -47, i19 = 6, i20 = -1, i21 = 73;
        float f2 = 77.475F;
        short s1 = 24577;
        for (i2 = 9; 222 > i2; ++i2) {
            i3 = Test.iArrFld[i2 - 1];
        }
        {
            java.io.PrintStream ax$6 = System.out;
            java.io.PrintStream ax$7 = System.err;
            java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$8);
            System.setErr(ax$8);
            try {
                for (int ax$4 = -3378; ax$4 < 3784; ax$4 += 1) {
                    try {
                        boolean[] ax$1 = new boolean[] { true, true, false, true, false };
                        boolean ax$0 = false;
                        for (int ax$2 = 0; ax$2 < 576; ax$2++) {
                            ax$1[ax$2] = ax$0;
                            ax$0 = !ax$0;
                        }
                    } catch (Throwable ax$3) {
                    } finally {
                    }
                }
            } catch (Throwable ax$5) {
            }
            System.setOut(ax$6);
            System.setErr(ax$7);
        }
        {
            java.io.PrintStream ax$24 = System.out;
            java.io.PrintStream ax$25 = System.err;
            java.io.PrintStream ax$26 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$26);
            System.setErr(ax$26);
            try {
                ax$17 = true;
                for (int ax$22 = 0; ax$22 < 7613; ax$22 += 1) vMeth();
            } catch (java.lang.Throwable ax$23) {
            } finally {
                ax$17 = false;
            }
            System.setOut(ax$24);
            System.setErr(ax$25);
        }
        vMeth();
        for (i12 = 6; 105 > i12; ++i12) {
            i14 = 1;
            do {
                Test.instanceCount = 8;
                i3 -= (int) Test.instanceCount;
                i13 += (((i14 * Test.instanceCount) + i14) - Test.iFld);
                for (i15 = i12; i15 < 1; i15++) {
                    try {
                        i17 = (-829867879 / i3);
                        i3 = (Test.iFld % -542379355);
                        Test.iArrFld[i15 + 1] = (-62504 % i3);
                    } catch (ArithmeticException a_e) {
                    }
                    f2 = Test.instanceCount;
                    i17 -= (int) 1.818F;
                    i16 = i12;
                    f2 = 223L;
                    f2 -= 103L;
                    i1 += i17;
                    Test.iArrFld[i15 - 1] <<= i12;
                    Test.instanceCount += Test.instanceCount;
                    s1 = s1;
                    i17 += (i15 - i2);
                }
                if (Test.bFld)
                    continue;
                i1 += (i14 + f2);
                i1 -= i14;
                for (i18 = 1; 1 > i18; i18++) {
                    i1 = (int) 2548L;
                }
                f2 += i1;
                if (Test.bFld) {
                    for (i20 = 1; i20 < 1; ++i20) {
                        double d1 = -84.76162;
                        i13 += (i20 - i19);
                        switch((i12 % 8) + 79) {
                            case 79:
                                Test.instanceCount += i20;
                            case 80:
                                Test.instanceCount += (i20 * i20);
                                i17 += i20;
                                i3 = i16;
                                Test.iArrFld = Test.iArrFld;
                                i21 += i20;
                                d1 *= f2;
                                break;
                            case 81:
                                if (Test.bFld)
                                    break;
                                break;
                            case 82:
                            case 83:
                                i21 += (i20 * f2);
                            case 84:
                            case 85:
                                i13 = (int) d1;
                                break;
                            case 86:
                                i3 += (i20 | i19);
                            default:
                                f2 -= Test.byFld;
                        }
                    }
                }
            } while (++i14 < 6);
        }
        long meth_res = i1 + i2 + i3 + i12 + i13 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f2) + s1 + i18 + i19 + i20 + i21;
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public static void vSmallMeth(int i, long l, float f) {
        i = (int) ((30 + fMeth(7)) * i);
        {
            java.io.PrintStream ax$14 = System.out;
            java.io.PrintStream ax$15 = System.err;
            java.io.PrintStream ax$16 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$16);
            System.setErr(ax$16);
            try {
                for (int ax$12 = -2967; ax$12 < 6629; ax$12 += 1) {
                    try {
                        java.util.Set ax$9 = new HashSet();
                        java.util.Set ax$10 = new HashSet();
                        if (ax$10.removeAll(ax$9))
                            ;
                    } catch (Throwable ax$11) {
                    } finally {
                    }
                }
            } catch (Throwable ax$13) {
            }
            System.setOut(ax$14);
            System.setErr(ax$15);
        }
        i = 2;
        vSmallMeth_check_sum += i + l + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {
        if (ax$27) {
            long ax$560 = fMeth_check_sum;
            long ax$561 = vMeth_check_sum;
            try {
                if (fMeth_check_sum != vMeth_check_sum)
                    ;
            } catch (Throwable ax$562) {
            } finally {
                fMeth_check_sum = ax$560;
                vMeth_check_sum = ax$561;
            }
            return;
        }
        short s2 = 21978, sArr[] = new short[N];
        int i22 = 53852, i23 = 5, i24 = 5, i25 = -37, i26 = -209, i27 = 13, i28 = -163, i29 = 3;
        long l2 = -62993L, l3 = -1238629402L, lArr1[] = new long[N];
        FuzzerUtils.init(sArr, (short) 16107);
        FuzzerUtils.init(lArr1, 0L);
        for (int smallinvoc = 0; smallinvoc < 137; smallinvoc++) vSmallMeth(Test.iFld, Test.instanceCount, -93.1012F);
        Test.iFld = Test.iFld;
        s2 -= (short) fFld;
        Test.iFld = -6;
        for (i22 = 3; i22 < 123; i22 += 2) {
            Test.instanceCount = (long) fFld;
            for (i24 = i22; i24 < 84; ++i24) {
                for (l2 = 1; l2 < 1; ++l2) {
                    Test.iArrFld[i24 - 1] -= (int) dFld;
                    Test.iFld = (int) Test.instanceCount;
                    s2 = (short) 4621;
                    fFld *= i24;
                    i23 -= i25;
                    sArr[i24] >>= (short) i26;
                    Test.iArrFld[i24] *= i23;
                    Test.byFld = (byte) Test.instanceCount;
                    i26 = -39730;
                    i26 += i25;
                    if (Test.bFld)
                        break;
                    Test.instanceCount &= i25;
                    Test.instanceCount -= -139;
                }
                lArr1[i24 + 1] = Test.byFld;
                Test.bFld = Test.bFld;
                i27 = 1;
                do {
                    s2 = (short) l2;
                    i23 -= i22;
                    Test.byFld >>= (byte) 249L;
                    i25 += (7855 + (i27 * i27));
                    switch(((i22 % 2) * 5) + 55) {
                        case 63:
                            switch(((i27 % 9) * 5) + 4) {
                                case 48:
                                    try {
                                        i25 = (i25 / -62);
                                        i23 = (i24 / i27);
                                        Test.iArrFld[i27] = (i23 / i25);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i25 = i27;
                                    fFld += (((i27 * i22) + fFld) - i25);
                                    Test.instanceCount -= iFld1;
                                    Test.instanceCount += (i27 * Test.instanceCount);
                                    i25 = (int) l2;
                                    Test.instanceCount >>= i27;
                                    Test.instanceCount += (i27 ^ i26);
                                    Test.iFld = i22;
                                    i28 = s2;
                                    Test.instanceCount -= (long) dFld;
                                    s2 = (short) 234;
                                    i25 += (int) l2;
                                    s2 *= (short) i22;
                                    break;
                                case 23:
                                    i23 = (int) Test.instanceCount;
                                    Test.iFld = (int) fFld;
                                    lArr1[i22 + 1] = Test.instanceCount;
                                    i28 = iFld1;
                                    lArr1[i24] += (long) fFld;
                                    iFld1 = (int) fFld;
                                    i23 += (int) fFld;
                                    switch(((i24 % 2) * 5) + 70) {
                                        case 77:
                                            dFld = -96;
                                            Test.iFld += (int) l2;
                                            iFld1 = (int) l2;
                                            break;
                                        case 71:
                                            try {
                                                Test.iArrFld[i22 + 1] = (Test.iArrFld[i24 + 1] / 70);
                                                Test.iArrFld[i22] = (Test.iFld / 180);
                                                Test.iArrFld[i22] = (1839454517 % iFld1);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            i23 += i27;
                                            break;
                                    }
                                    i28 = (int) Test.instanceCount;
                                    i26 = -20434;
                                    switch(((i22 % 5) * 5) + 98) {
                                        case 116:
                                            Test.iArrFld[i27] /= (int) ((long) (dFld) | 1);
                                            if (Test.bFld) {
                                                iFld1 = -7269;
                                                Test.instanceCount = Test.iFld;
                                                Test.iFld *= Test.iFld2;
                                                switch(((iFld1 >>> 1) % 1) + 68) {
                                                    case 68:
                                                        try {
                                                            iFld1 = (2112377921 % Test.iFld2);
                                                            Test.iFld2 = (Test.iArrFld[i24 + 1] % 862203054);
                                                            i25 = (i23 / 36);
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                        Test.iFld2 = (int) l3;
                                                        i28 = i25;
                                                        Test.byFld += (byte) i27;
                                                        Test.instanceCount += i24;
                                                        i25 <<= i28;
                                                }
                                                fFld *= i25;
                                                try {
                                                    i23 = (Test.iFld / 10523);
                                                    i25 = (7 % Test.iArrFld[i27]);
                                                    i25 = (-32166 / Test.iArrFld[i24 + 1]);
                                                } catch (ArithmeticException a_e) {
                                                }
                                            } else if (Test.bFld) {
                                                Test.bFld = Test.bFld;
                                            }
                                            break;
                                        case 109:
                                            Test.iArrFld = Test.iArrFld;
                                            break;
                                        case 106:
                                            Test.byFld <<= (byte) i24;
                                            break;
                                        case 107:
                                            Test.iFld *= Test.iFld2;
                                            break;
                                        case 123:
                                            i25 >>= (int) Test.instanceCount;
                                            break;
                                    }
                                    break;
                                case 33:
                                    if (Test.bFld)
                                        break;
                                case 27:
                                    if (Test.bFld)
                                        continue;
                                case 29:
                                    i29 -= 8382;
                                    break;
                                case 30:
                                    Test.iArrFld[i22] = i29;
                                    break;
                                case 28:
                                    iFld1 += (i27 * i27);
                                    break;
                                case 17:
                                    Test.iFld2 += i27;
                                    break;
                                case 8:
                                    l3 ^= i24;
                                    break;
                                default:
                                    byArrFld[i24 + 1] += (byte) Test.iFld;
                            }
                            break;
                        case 56:
                            if (false)
                                continue;
                            break;
                        default:
                            fArrFld[i24] -= -2662;
                    }
                } while (++i27 < 1);
            }
        }
        FuzzerUtils.out.println("s2 i22 i23 = " + s2 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 l2 = " + i24 + "," + i25 + "," + l2);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("l3 i29 sArr = " + l3 + "," + i29 + "," + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.iFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld fFld dFld = " + Test.byFld + "," + Float.floatToIntBits(fFld) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("iFld1 Test.iFld2 Test.iArrFld = " + iFld1 + "," + Test.iFld2 + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("byArrFld fArrFld = " + FuzzerUtils.checkSum(byArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$17 = false;

    private static Boolean ax$27 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
// DEBUG  fMeth ->  fMeth vSmallMeth mainTest Test
// DEBUG  vMeth ->  vMeth fMeth vSmallMeth mainTest Test
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
