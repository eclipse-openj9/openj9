// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 2875219336031147503L;

    public static long lFld = -179L;

    public static float fFld = -88.274F;

    public static volatile boolean bFld = false;

    public static long lFld1 = 44001L;

    public volatile int iFld = -13;

    public static volatile int iArrFld[] = new int[N];

    public static long lArrFld[] = new long[N];

    public static byte byArrFld[] = new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 2769);
        FuzzerUtils.init(Test.lArrFld, 4L);
        FuzzerUtils.init(Test.byArrFld, ((byte) (-86)));
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {
        int i3 = -10;
        int i4 = 236;
        int i5 = 33202;
        int i6 = -33154;
        int i7 = -50814;
        int i8 = -15751;
        int i9 = -253;
        int i10 = -11;
        int i11 = -99;
        double d1 = -2.80155;
        long lArr[] = new long[N];
        boolean bArr[] = new boolean[N];
        FuzzerUtils.init(lArr, -3L);
        FuzzerUtils.init(bArr, false);
        for (i3 = 9; 170 > i3; ++i3) {
            d1 = -95;
            i4 += i3 + i4;
            Test.fFld += ((i3 * i3) + Test.fFld) - i4;
            Test.lFld = i3;
            for (i5 = 4; i5 > i3; i5 -= 3) {
                i4 = i3;
                switch ((i5 % 4) + 52) {
                    case 52 :
                        i4 -= i6;
                        i4 -= i5;
                        Test.fFld = 74.754F;
                        for (i7 = i5; i7 < 1; i7++) {
                            Test.instanceCount += (-7791) + (i7 * i7);
                        }
                        bArr = bArr;
                        i4 = i3;
                        Test.lFld = i8;
                        for (i9 = 1; i9 < 1; i9++) {
                            byte by1 = -5;
                            short s = 23435;
                            if (Test.bFld) {
                                i8 = by1;
                                by1 = ((byte) (i3));
                                lArr[i5] += ((long) (d1));
                                Test.iArrFld[i5 - 1] += by1;
                                Test.iArrFld[i3] = i8;
                                switch ((i5 % 1) + 53) {
                                    case 53 :
                                        i8 *= ((int) (Test.instanceCount));
                                        i6 += ((int) (d1));
                                        if (Test.bFld) {
                                            i11 *= i6;
                                        }
                                        lArr[i9 + 1] /= Test.lFld1 | 1;
                                        d1 = Test.lFld;
                                        i8 >>= i4;
                                        if (i10 != 0) {
                                            vMeth2_check_sum += ((((((((((i3 + i4) + Double.doubleToLongBits(d1)) + i5) + i6) + i7) + i8) + i9) + i10) + i11) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(bArr);
                                            return;
                                        }
                                        i4 <<= i5;
                                        Test.instanceCount = i3;
                                        i6 -= ((int) (-2.688F));
                                        if (i9 != 0) {
                                            vMeth2_check_sum += ((((((((((i3 + i4) + Double.doubleToLongBits(d1)) + i5) + i6) + i7) + i8) + i9) + i10) + i11) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(bArr);
                                            return;
                                        }
                                        break;
                                    default :
                                        Test.lFld1 += s;
                                }
                            }
                        }
                        break;
                    case 53 :
                        i11 += ((int) (Test.lFld));
                        break;
                    case 54 :
                        Test.iArrFld[i3 + 1] <<= i3;
                        break;
                    case 55 :
                        i6 = -181;
                }
            }
        }
        vMeth2_check_sum += ((((((((((i3 + i4) + Double.doubleToLongBits(d1)) + i5) + i6) + i7) + i8) + i9) + i10) + i11) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1(int i2, boolean b1) {
        int i12 = 158;
        int i13 = -31000;
        int i14 = 53222;
        int i15 = 11;
        int i16 = 196;
        int i17 = 4136;
        int i18 = 7;
        int i19 = -33563;
        int i20 = 50328;
        byte by2 = 59;
        short s1 = -16600;
        short sArr[] = new short[N];
        float f = -88.622F;
        double d2 = -84.107026;
        double dArr[] = new double[N];
        FuzzerUtils.init(sArr, ((short) (28386)));
        FuzzerUtils.init(dArr, 0.13067);
        vMeth2();
        i2 *= i2;
        for (i12 = 14; i12 < 228; ++i12) {
            for (i14 = 3; 1 < i14; --i14) {
                i15 = i12;
                by2 += ((byte) (((i14 * i12) + Test.instanceCount) - Test.instanceCount));
                for (i16 = 1; i16 < 2; ++i16) {
                    {
                        try {
                            int ax$10 = -1921187894;
                            short[] ax$11 = new short[]{ ((short) (-8739)), ((short) (26337)) };
                            short ax$12 = new Short(((short) (321)));
                            short[] ax$13 = new short[]{ 20, 10, 0, -10, -20 };
                            for (int ax$9 = -691; ax$9 < (-691 + 14602); ax$9 += 1) {
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    for (int ax$14 = 0; ax$14 < ax$10; ax$14++) {
                                        ax$12 += Math.abs(ax$11[ax$14] - ax$13[ax$14]);
                                    }
                                } catch (Throwable ax$15) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                            }
                        } finally {
                        }
                    }
                    if (i14 != 0) {
                        vMeth1_check_sum += (((((((((((((((i2 + (b1 ? 1 : 0)) + i12) + i13) + i14) + i15) + by2) + i16) + i17) + s1) + Float.floatToIntBits(f)) + i18) + i19) + Double.doubleToLongBits(d2)) + i20) + FuzzerUtils.checkSum(sArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                    i13 = i16;
                    sArr[i14 + 1] = ((short) (i2));
                    if (Test.bFld) {
                        i13 += ((i16 * s1) + i15) - Test.fFld;
                        dArr[i12 - 1] -= Test.fFld;
                    }
                    i13 = ((int) (Test.fFld));
                    i13 += ((i16 * i17) + i13) - i2;
                    i17 += 116;
                    i15 *= ((int) (Test.fFld));
                    i17 += i16 - i13;
                    Test.lFld -= i12;
                    Test.instanceCount = 4;
                    if (Test.bFld)
                        break;

                }
                f = 1;
                while ((f += 3) < 2) {
                    Test.lFld1 += i17;
                    if (b1)
                        continue;

                }
                i15 -= i17;
                for (i18 = 1; i18 < 2; i18++) {
                    long l3 = 5L;
                    d2 = i15;
                    l3 <<= i17;
                    Test.fFld += i18 * i14;
                    d2 = Test.instanceCount;
                    Test.iArrFld[i18] = ((int) (-4L));
                    i19 += s1;
                    i17 -= -2;
                    Test.lFld -= i19;
                    i15 += i18 * i18;
                }
                i17 *= i20;
                i2 += ((i14 * Test.instanceCount) + Test.lFld1) - Test.fFld;
            }
        }
        vMeth1_check_sum += (((((((((((((((i2 + (b1 ? 1 : 0)) + i12) + i13) + i14) + i15) + by2) + i16) + i17) + s1) + Float.floatToIntBits(f)) + i18) + i19) + Double.doubleToLongBits(d2)) + i20) + FuzzerUtils.checkSum(sArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(boolean b, long l, long l1) {
        int i21 = 6;
        int i22 = -20359;
        int i23 = -6;
        int i24 = -15200;
        int i25 = 182;
        int i26 = -10;
        int i27 = -38;
        int i28 = -35797;
        long l4 = 0L;
        float f1 = -2.772F;
        double d3 = -29.20575;
        short s2 = 16335;
        vMeth1(i21, Test.bFld);
        i21 >>= ((int) (l4));
        for (i22 = 113; 2 < i22; i22--) {
            switch ((i22 % 5) + 123) {
                case 123 :
                    f1 *= Test.instanceCount;
                    break;
                case 124 :
                    {
                        final long ax$7 = Test.instanceCount;
                        final int ax$8 = i25;
                        try {
                            long[] ax$1 = new long[]{ 1342119010285199541L, -5688838282058300516L, -9024978806008584720L, 196666621697813110L, -484801942959296453L, -7034452180581426489L, -8594108494414133154L, 2818825628442084338L, -2989943312087147353L };
                            long[] ax$4 = new long[]{ 1624531873626028240L, 3579957970126041799L };
                            for (int ax$0 = -248; ax$0 < (-248 + 10654); ax$0 += 1) {
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    for (int ax$5 = 0; ax$5 < ax$4.length; ax$5 += 1) {
                                        ax$4[ax$5] = ((long) ((ax$1[ax$5] + instanceCount) << i25));
                                    }
                                } catch (Throwable ax$6) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                            }
                        } finally {
                            Test.instanceCount = ax$7;
                            i25 = ax$8;
                        }
                    }
                    Test.iArrFld[i22 - 1] *= i22;
                    i21 >>= i23;
                    switch (((i21 >>> 1) % 7) + 76) {
                        case 76 :
                            for (i24 = i22; i24 < 5; ++i24) {
                                l1 = i25;
                                i23 *= 220;
                                i25 += i24 * i21;
                                i25 = 10;
                                Test.iArrFld[i22] = ((int) (-2.114409));
                                i21 -= i25;
                                Test.lArrFld[i22] += i22;
                                i21 = i21;
                            }
                            d3 -= i23;
                            for (i26 = 1; i26 < 5; i26++) {
                                i21 %= ((int) (((long) (Test.fFld)) | 1));
                                Test.fFld += 0;
                                d3 %= 0.82577;
                            }
                            i21 = ((int) (Test.lFld));
                            i28 = 1;
                            do {
                                i27 += i28;
                                i21 += i27;
                                if (i21 != 0) {
                                    vMeth_check_sum += ((((((((((((((b ? 1 : 0) + l) + l1) + i21) + l4) + i22) + i23) + Float.floatToIntBits(f1)) + i24) + i25) + Double.doubleToLongBits(d3)) + i26) + i27) + i28) + s2;
                                    return;
                                }
                                i21 = i27;
                                switch ((((i23 >>> 1) % 3) * 5) + 95) {
                                    case 105 :
                                        i25 = i23;
                                        l *= i25;
                                        Test.iArrFld[i28 + 1] -= ((int) (-57385L));
                                        Test.iArrFld[i28 + 1] <<= i22;
                                        i21 += i28;
                                        i25 += 3;
                                        i27 += i28 * i28;
                                        if (false)
                                            continue;

                                        break;
                                    case 110 :
                                        i27 += ((i28 * i21) + i26) - i25;
                                        break;
                                    case 104 :
                                        Test.iArrFld[i28] >>= i26;
                                        break;
                                }
                            } while ((++i28) < 5 );
                            break;
                        case 77 :
                            i23 = 221;
                        case 78 :
                            Test.lArrFld[i22 - 1] ^= 13L;
                            break;
                        case 79 :
                            s2 -= ((short) (i22));
                            break;
                        case 80 :
                            Test.fFld -= i26;
                            break;
                        case 81 :
                            i27 += i23;
                            break;
                        case 82 :
                            i23 = i27;
                        default :
                            i21 += ((i22 * i21) + f1) - i23;
                    }
                case 125 :
                    i27 = s2;
                    break;
                case 126 :
                case 127 :
                    Test.iArrFld[i22 - 1] *= i24;
                    break;
                default :
                    Test.byArrFld[i22] = ((byte) (i22));
            }
        }
        vMeth_check_sum += ((((((((((((((b ? 1 : 0) + l) + l1) + i21) + l4) + i22) + i23) + Float.floatToIntBits(f1)) + i24) + i25) + Double.doubleToLongBits(d3)) + i26) + i27) + i28) + s2;
    }

    public void mainTest(String[] strArr1) {
        int i = 47328;
        int i1 = 14;
        int i29 = 1;
        int i30 = -10;
        int i31 = -14;
        int iArr[] = new int[N];
        double d = 2.62539;
        double dArr1[] = new double[N];
        long l6 = 13L;
        long l7 = -1L;
        long l8 = -36118L;
        short s3 = 1502;
        short sArr1[] = new short[N];
        float f2 = -55.447F;
        FuzzerUtils.init(iArr, -242);
        FuzzerUtils.init(sArr1, ((short) (-24560)));
        FuzzerUtils.init(dArr1, 0.89421);
        for (i = 221; 7 < i; i--) {
            byte by = 56;
            i1 += ((i * i1) + i1) - i;
            Test.lFld = (i1 * (-iArr[i])) ^ ((long) (109.5865 + ((-129) - (i1 + by))));
            Test.instanceCount += i ^ i;
            switch ((i % 3) + 104) {
                case 104 :
                    Test.fFld = ((float) ((Math.abs(i) - (i1--)) + (i1 - (d * i))));
                    vMeth(Test.bFld, Test.instanceCount, Test.instanceCount);
                    sArr1[i - 1] = ((short) (11));
                    i1 -= ((int) (Test.fFld));
                    Test.lFld %= -65463;
                    i1 -= ((int) (d));
                    i1 <<= i;
                    for (l6 = 1; l6 < 24; ++l6) {
                        Test.fFld *= Test.fFld;
                        i29 |= i29;
                        Test.lArrFld[((int) (l6 - 1))] = l6;
                        for (i30 = 1; 2 > i30; i30++) {
                            Test.instanceCount /= i31 | 1;
                            Test.bFld = Test.bFld;
                            i29 += i30 - i;
                            switch ((i % 5) + 117) {
                                case 117 :
                                    Test.lArrFld = Test.lArrFld;
                                    Test.lFld = 17246;
                                    i1 = -24232;
                                    i1 += i30 * i30;
                                    iArr[i30 - 1] >>= i;
                                    Test.lFld1 = ((long) (Test.fFld));
                                    i1 /= ((int) (i30 | 1));
                                    s3 += ((short) (i30 + Test.lFld1));
                                    break;
                                case 118 :
                                    Test.lFld -= ((long) (Test.fFld));
                                    d += i31;
                                    i31 = i29;
                                    i29 += ((int) (Test.lFld1));
                                    i31 >>= 32687;
                                    Test.lFld1 -= i;
                                    Test.fFld -= i29;
                                    try {
                                        i29 = i30 % i;
                                        i31 = (-200) / i31;
                                        i31 = (-179) / i29;
                                    } catch (ArithmeticException a_e) {
                                    }
                                    iArr = Test.iArrFld;
                                    i1 += ((int) ((-1.426F) + (i30 * i30)));
                                    Test.lArrFld[i30 - 1] |= i30;
                                    i1 *= i31;
                                    i29 += i31;
                                    Test.lArrFld = FuzzerUtils.long1array(N, ((long) (13L)));
                                    i29 += i30;
                                    break;
                                case 119 :
                                    Test.fFld += ((float) (d));
                                    break;
                                case 120 :
                                    if (Test.bFld)
                                        continue;

                                    Test.lFld -= i31;
                                    i29 -= i31;
                                    if (Test.bFld)
                                        break;

                                    i29 -= ((int) (Test.lFld));
                                    i31 += i30 - i29;
                                    switch (((int) (((l6 % 1) * 5) + 61))) {
                                        case 66 :
                                            try {
                                                i29 = (-64731) / i1;
                                                i31 = iArr[((int) (l6))] / i1;
                                                iFld = (-196) % i31;
                                            } catch (ArithmeticException a_e) {
                                            }
                                            d %= i | 1;
                                            iFld = i;
                                            Test.lFld1 += i30 * i30;
                                        default :
                                            i1 += i30;
                                            s3 -= ((short) (207));
                                    }
                                    s3 = ((short) (i29));
                                    i1 *= i31;
                                    f2 *= ((float) (d));
                                    Test.fFld += ((i30 * l7) + i31) - i1;
                                    Test.lFld1 += i30 - i30;
                                    Test.lArrFld[i30] = ((long) (f2));
                                    Test.fFld -= i;
                                    break;
                                case 121 :
                                    i1 = i30;
                                    i31 -= ((int) (-3L));
                                    l7 %= ((long) (Test.fFld)) | 1;
                                    i31 = ((int) (l6));
                                    if (Test.bFld)
                                        continue;

                                    l8 += 31139 + (i30 * i30);
                                    i29 *= ((int) (d));
                                    Test.iArrFld[((int) (l6 + 1))] *= i;
                                    i29 += i30;
                                    i29 <<= i31;
                                    break;
                                default :
                                    Test.iArrFld[((int) (l6))] -= i1;
                            }
                        }
                    }
                    break;
                case 105 :
                    i29 -= i31;
                    break;
                case 106 :
                    dArr1[i] = 210;
                    break;
            }
        }
        FuzzerUtils.out.println((((("i i1 d = " + i) + ",") + i1) + ",") + Double.doubleToLongBits(d));
        FuzzerUtils.out.println((((("l6 i29 i30 = " + l6) + ",") + i29) + ",") + i30);
        FuzzerUtils.out.println((((("i31 s3 f2 = " + i31) + ",") + s3) + ",") + Float.floatToIntBits(f2));
        FuzzerUtils.out.println((((("l7 l8 iArr = " + l7) + ",") + l8) + ",") + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println((("sArr1 dArr1 = " + FuzzerUtils.checkSum(sArr1)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.lFld Test.fFld = " + Test.instanceCount) + ",") + Test.lFld) + ",") + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println((((("Test.bFld Test.lFld1 iFld = " + (Test.bFld ? 1 : 0)) + ",") + Test.lFld1) + ",") + iFld);
        FuzzerUtils.out.println((((("Test.iArrFld Test.lArrFld Test.byArrFld = " + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + FuzzerUtils.checkSum(Test.lArrFld)) + ",") + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}
