// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.PriorityQueue;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -1L;

    public static int iFld = 136;

    public static float fFld = 2.707F;

    public static byte byFld = -25;

    public static long[] lArrFld = new long[N];

    public static double[] dArrFld = new double[N];

    public static volatile boolean[] bArrFld = new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -1L);
        FuzzerUtils.init(Test.dArrFld, 72.71649);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;

    public static long byMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(boolean b2, int i6, int i7) {
        if (ax$9) {
            try {
                new PriorityQueue<String>().add(null);
            } catch (Throwable ax$12) {
            } finally {
            }
            return -1969856968;
        }
        int i8 = -2, i9 = 36589, i10 = -50182, i11 = 64746, i12 = 64887, iArr1[] = new int[N], iArr2[][] = new int[N][N];
        float f1 = -1.1003F, f2 = 29.224F;
        byte by = 48;
        FuzzerUtils.init(iArr1, -8);
        FuzzerUtils.init(iArr2, -8);
        for (i8 = 5; i8 < 156; ++i8) {
            i7 = i8;
            f1 = 1;
            while (++f1 < 4) {
                switch((i8 % 6) + 28) {
                    case 28:
                        f2 = Test.instanceCount;
                        for (i10 = i8; i10 < 1; i10++) {
                            Test.instanceCount += (i10 * i9);
                            Test.instanceCount *= i6;
                            if (false) {
                                i11 &= i10;
                                i11 += i10;
                                Test.instanceCount *= Test.instanceCount;
                                i11 += (((i10 * i10) + Test.iFld) - i9);
                                i6 += (i10 * i10);
                                i7 >>>= i8;
                                switch((i8 % 1) + 51) {
                                    case 51:
                                        switch((i8 % 5) + 36) {
                                            case 36:
                                                try {
                                                    i6 = (i6 % -117);
                                                    i9 = (iArr1[i8 - 1] / -900097384);
                                                    i6 = (i11 / -63);
                                                } catch (ArithmeticException a_e) {
                                                }
                                                Test.instanceCount *= i10;
                                                iArr1[i10 - 1] *= i11;
                                                if (b2)
                                                    continue;
                                                i12 -= i6;
                                                if (b2)
                                                    continue;
                                                i6 += (((i10 * Test.instanceCount) + Test.iFld) - i12);
                                                i7 = (int) 63.104174;
                                                i11 += (i10 * i11);
                                                try {
                                                    Test.iFld = (iArr1[i10] % 78);
                                                    i7 = (-126 % i8);
                                                    Test.iFld = (i7 / -198);
                                                } catch (ArithmeticException a_e) {
                                                }
                                                i11 += (((i10 * i11) + f1) - i12);
                                                i12 += i10;
                                                b2 = b2;
                                                i12 += (i10 * i10);
                                                Test.instanceCount = i11;
                                            case 37:
                                                Test.iFld += (i10 - i11);
                                                Test.instanceCount -= 9;
                                                i7 += (i10 - i11);
                                                i12 *= (int) 2.958F;
                                                Test.instanceCount = Test.instanceCount;
                                                break;
                                            case 38:
                                                i11 <<= i7;
                                                break;
                                            case 39:
                                                iArr1[(int) (f1 + 1)] = i6;
                                                break;
                                            case 40:
                                                if (b2)
                                                    continue;
                                                break;
                                            default:
                                                Test.instanceCount += Test.iFld;
                                        }
                                        break;
                                }
                            } else {
                                i11 += i9;
                            }
                        }
                        break;
                    case 29:
                        Test.lArrFld[(int) (f1 - 1)] += Test.instanceCount;
                        break;
                    case 30:
                        iArr2 = FuzzerUtils.int2array(N, (int) -30159);
                        break;
                    case 31:
                        Test.lArrFld[i8] = (long) f2;
                    case 32:
                        Test.instanceCount += (long) (((f1 * i10) + i10) - by);
                        break;
                    case 33:
                        i7 = i9;
                        break;
                }
            }
        }
        long meth_res = (b2 ? 1 : 0) + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i10 + i11 + i12 + by + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static byte byMeth(boolean b1) {
        int i3 = -233, i4 = -50961, i5 = 56875, i13 = -192, i14 = -10, i16 = -44601, i17 = 34095, i18 = 2, iArr[] = new int[N];
        float f = 32.1001F, fArr[] = new float[N];
        double d = 0.104086;
        short s = -1783;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr, -9);
        FuzzerUtils.init(byArr, (byte) 73);
        FuzzerUtils.init(fArr, 0.6F);
        i3 = 1;
        do {
            f = 1;
            do {
                iArr[i3] -= (int) (((d--) * Integer.reverseBytes(-55366)) - (-7 * s));
                Test.iFld += (int) (((iArr[(int) (f - 1)]++) - i3) + 4158647930486816122L);
                Test.iFld -= ((iArr[(int) (f)] = i3) * (--byArr[(int) (f)]));
                for (i4 = i3; 1 > i4; ++i4) {
                    Test.lArrFld[i4] *= (long) ((d * (++Test.instanceCount)) % (iMeth(b1, i4, i3) | 1));
                    Test.iFld = Test.iFld;
                    Test.fFld += f;
                }
                {
                    java.io.PrintStream ax$6 = System.out;
                    java.io.PrintStream ax$7 = System.err;
                    java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$8);
                    System.setErr(ax$8);
                    try {
                        for (int ax$4 = -1562; ax$4 < 6733; ax$4 += 1) {
                            boolean ax$2 = b1;
                            try {
                                boolean[] ax$0 = new boolean[576];
                                for (// NOTE: bitwise or, not the common ||
                                // NOTE: bitwise or, not the common ||
                                // NOTE: bitwise or, not the common ||
                                int ax$1 = 0; ax$1 < 128; ax$1++) ax$0[ax$1] |= b1;
                            } catch (Throwable ax$3) {
                            } finally {
                                b1 = ax$2;
                            }
                        }
                    } catch (Throwable ax$5) {
                    }
                    System.setOut(ax$6);
                    System.setErr(ax$7);
                }
                for (i13 = 1; i13 < 1; i13++) {
                    iArr[i3] += Test.iFld;
                    fArr[i3] += -4;
                    iArr[(int) (f + 1)] ^= i13;
                    Test.byFld -= (byte) i5;
                    Test.instanceCount += (((i13 * i14) + i4) - Test.iFld);
                    i5 += (i13 + Test.fFld);
                    Test.byFld = (byte) i4;
                    d *= i13;
                    i14 -= -112;
                    Test.byFld = (byte) i4;
                    Test.iFld -= i5;
                    if (b1)
                        continue;
                    i5 += -5636;
                    Test.instanceCount = i13;
                    Test.dArrFld[i3] += i4;
                }
            } while (++f < 10);
            Test.instanceCount = i3;
            if (b1)
                break;
            if (i4 != 0) {
            }
            i16 = 1;
            while (++i16 < 10) {
                for (i17 = 1; i17 > i16; i17 -= 2) {
                    Test.iFld += (((i17 * i16) + i5) - Test.fFld);
                    i18 = (int) Test.instanceCount;
                    i18 *= (int) Test.instanceCount;
                    b1 = b1;
                    iArr[i3 - 1] >>= 49855;
                    Test.fFld += -33499;
                    Test.dArrFld[i17 - 1] = i5;
                }
            }
        } while ((i3 += 2) < 107);
        long meth_res = (b1 ? 1 : 0) + i3 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + s + i4 + i5 + i13 + i14 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        byMeth_check_sum += meth_res;
        return (byte) meth_res;
    }

    public void vMeth(long l, int i) {
        if (ax$18) {
            try {
                java.lang.StringBuffer ax$20 = new StringBuffer(1);
                for (int ax$19 = 0; ax$19 < 200; ax$19++) {
                    ax$20.replace(ax$19, ax$19 + 1, "a");
                }
            } catch (Throwable ax$21) {
            } finally {
            }
            return;
        }
        int i1 = 54, i2 = -13049, i19 = 6, i20 = 63, i21 = -85, i22 = -35568, i23 = -22517, i24 = -6259, i25 = -37969, i26 = -107, i27 = -51, i28 = -177, i29 = 5, iArr3[] = new int[N];
        short s1 = -17486;
        double d1 = 123.97253;
        float f3 = 0.802F;
        FuzzerUtils.init(iArr3, -15090);
        for (i1 = 8; 227 > i1; i1++) {
            boolean b = true;
            if (b = ((byMeth(b) != -6) | b))
                continue;
            i ^= i2;
            for (i19 = 1; i19 < 3; i19 += 3) {
                Test.fFld = i20;
            }
            for (i21 = 1; 3 > i21; ++i21) {
                Test.dArrFld[i21 + 1] += -148;
                for (i23 = 1; i23 < 2; i23++) {
                    i += (i23 | s1);
                    iArr3[i21 - 1] = -10;
                    Test.iFld -= (int) d1;
                    iArr3[i21] >>>= Test.iFld;
                    if (b)
                        continue;
                    Test.iFld += (i23 | l);
                }
                d1 += d1;
                iArr3[i21] -= (int) l;
                i *= Test.iFld;
            }
            l |= i;
            switch(((i1 % 1) * 5) + 30) {
                case 32:
                    f3 = 1;
                    do {
                        iArr3[(int) (f3)] -= i21;
                    } while (++f3 < 3);
                    i25 = 1;
                    while (++i25 < 3) {
                        Test.byFld = (byte) -20;
                        i20 = Test.iFld;
                        if (i2 != 0) {
                            vMeth_check_sum += l + i + i1 + i2 + i19 + i20 + i21 + i22 + i23 + i24 + s1 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f3) + i25 + i26 + i27 + i28 + i29 + FuzzerUtils.checkSum(iArr3);
                            return;
                        }
                        i20 <<= (int) l;
                        try {
                            i2 = (66 / i22);
                            Test.iFld = (226 / i23);
                            i24 = (iArr3[i1] % 552859662);
                        } catch (ArithmeticException a_e) {
                        }
                        i >>= Test.iFld;
                        Test.fFld += -3151298700L;
                        for (i26 = 1; i26 > 1; i26--) {
                            i27 += (int) 34L;
                        }
                        d1 = i20;
                        for (i28 = i25; i28 < 1; i28++) {
                            i20 += i28;
                            Test.instanceCount -= -89;
                            i20 = Test.byFld;
                            Test.lArrFld[i1 + 1] = i25;
                        }
                    }
                    break;
                default:
                    i22 >>= i25;
            }
        }
        vMeth_check_sum += l + i + i1 + i2 + i19 + i20 + i21 + i22 + i23 + i24 + s1 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f3) + i25 + i26 + i27 + i28 + i29 + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {
        int i30 = 28643, i31 = -37713, i32 = -22, i33 = -8, i34 = -180, i35 = -13707, i36 = 28490, i37 = 0, iArr4[] = new int[N];
        double d2 = -2.117556, d3 = 0.92689;
        short s2 = -21889;
        boolean b3 = true;
        byte[] byArr1 = new byte[N];
        FuzzerUtils.init(iArr4, 14);
        FuzzerUtils.init(byArr1, (byte) -40);
        {
            java.io.PrintStream ax$24 = System.out;
            java.io.PrintStream ax$25 = System.err;
            java.io.PrintStream ax$26 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$26);
            System.setErr(ax$26);
            try {
                ax$18 = true;
                for (int ax$22 = 0; ax$22 < 6689; ax$22 += 1) vMeth(-2418657628577638029L, -65584300);
            } catch (java.lang.Throwable ax$23) {
            } finally {
                ax$18 = false;
            }
            System.setOut(ax$24);
            System.setErr(ax$25);
        }
        vMeth(3459507560L, Test.iFld);
        i30 = 1;
        do {
            Test.iFld += i30;
        } while (++i30 < 143);
        iArr4[(Test.iFld >>> 1) % N] = i30;
        iArr4[(i30 >>> 1) % N] += i30;
        d2 %= ((long) (Test.fFld) | 1);
        for (i31 = 5; i31 < 156; i31++) {
            byArr1[(120 >>> 1) % N] *= (byte) Test.iFld;
            i33 = 1;
            while (++i33 < 34) {
                for (i34 = 1; i34 < 1; ++i34) {
                    i35 *= i34;
                    i32 += (int) Test.instanceCount;
                    switch((i34 % 2) + 104) {
                        case 104:
                            i32 = (int) Test.fFld;
                            Test.instanceCount += i34;
                            i36 += i32;
                            break;
                        case 105:
                            i32 *= i34;
                            i35 *= 38547;
                            switch(((i30 >>> 1) % 5) + 63) {
                                case 63:
                                    Test.instanceCount <<= Test.instanceCount;
                                    i36 -= 197;
                                    s2 = s2;
                                    i32 -= i32;
                                    i36 += (int) Test.instanceCount;
                                    Test.instanceCount = i35;
                                    b3 = b3;
                                    i32 -= (int) d2;
                                    Test.iFld += (i34 - i34);
                                    Test.instanceCount += -9L;
                                    if (b3) {
                                        Test.fFld += (((i34 * i31) + Test.byFld) - i31);
                                        switch(((i31 % 1) * 5) + 7) {
                                            case 11:
                                                Test.lArrFld[i34 + 1] = (long) Test.fFld;
                                                break;
                                        }
                                        iArr4[i34 - 1] -= i30;
                                        Test.iFld ^= i31;
                                        i35 >>= i36;
                                        i37 += i31;
                                    } else if (false) {
                                        i37 += (((i34 * Test.iFld) + Test.instanceCount) - Test.instanceCount);
                                        Test.instanceCount <<= i31;
                                        if (b3)
                                            continue;
                                        iArr4 = iArr4;
                                        i35 *= i30;
                                        Test.instanceCount *= Test.instanceCount;
                                        i35 = (int) d2;
                                        switch(((Test.iFld >>> 1) % 8) + 127) {
                                            case 127:
                                                b3 = b3;
                                                try {
                                                    i36 = (-119 % i35);
                                                    i32 = (28 % iArr4[i34 - 1]);
                                                    iArr4[i34 + 1] = (i36 % -67);
                                                } catch (ArithmeticException a_e) {
                                                }
                                                i32 -= (int) 1L;
                                                iArr4[i31 + 1] += (int) Test.fFld;
                                                Test.fFld *= -2;
                                                i36 *= i36;
                                                i37 = i35;
                                                if (b3) {
                                                    Test.iFld = (int) Test.instanceCount;
                                                    i37 = 33942;
                                                } else {
                                                }
                                                i37 += (i34 * i34);
                                                i32 = i35;
                                                b3 = false;
                                            case 128:
                                                i35 -= s2;
                                                Test.instanceCount += (long) d2;
                                                Test.iFld <<= i33;
                                                Test.instanceCount += -1240796865L;
                                                i36 = s2;
                                                i37 = (int) d3;
                                            case 129:
                                                Test.bArrFld[i31 - 1] = b3;
                                                iArr4[i34] -= i37;
                                                if (b3) {
                                                    Test.iFld += (((i34 * Test.fFld) + i32) - i33);
                                                } else if (true) {
                                                    i32 = i31;
                                                    s2 >>= (short) Test.iFld;
                                                    i37 = i32;
                                                    i35 = Test.iFld;
                                                    i37 += i34;
                                                    Test.byFld += (byte) i34;
                                                    Test.instanceCount = i30;
                                                }
                                                break;
                                            case 130:
                                            case 131:
                                                Test.instanceCount *= i30;
                                                break;
                                            case 132:
                                                i32 += i34;
                                            case 133:
                                                Test.fFld += (i34 * i34);
                                                break;
                                            case 134:
                                                try {
                                                    i36 = (i37 / i31);
                                                    i36 = (-1135392621 / Test.iFld);
                                                    iArr4[i34] = (-14714 % i36);
                                                } catch (ArithmeticException a_e) {
                                                }
                                                break;
                                        }
                                    } else {
                                        Test.instanceCount = i31;
                                    }
                                case 64:
                                    Test.fFld = i30;
                                    break;
                                case 65:
                                    Test.iFld -= (int) Test.fFld;
                                    break;
                                case 66:
                                    i37 = i32;
                                    break;
                                case 67:
                                    i37 -= i34;
                                    break;
                                default:
                                    i36 = i36;
                            }
                            break;
                        default:
                            Test.iFld += (((i34 * i31) + Test.fFld) - s2);
                    }
                }
            }
        }
        FuzzerUtils.out.println("i30 d2 i31 = " + i30 + "," + Double.doubleToLongBits(d2) + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 s2 = " + i35 + "," + i36 + "," + s2);
        FuzzerUtils.out.println("b3 i37 d3 = " + (b3 ? 1 : 0) + "," + i37 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("iArr4 byArr1 = " + FuzzerUtils.checkSum(iArr4) + "," + FuzzerUtils.checkSum(byArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld Test.lArrFld Test.dArrFld = " + Test.byFld + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.bArrFld = " + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$9 = false;

    private static Boolean ax$18 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  byMeth ->  byMeth vMeth mainTest
// DEBUG  iMeth ->  iMeth byMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
