// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.net.ServerSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.net.BindException;
import java.net.InetSocketAddress;

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = 1868344432L;

    public int iFld = -4434;

    public static boolean bFld = false;

    public float fFld = 1.1014F;

    public static byte byFld = -18;

    public volatile long lFld = -67L;

    public static byte byFld1 = 90;

    public static float[] fArrFld = new float[N];

    public static double[] dArrFld = new double[N];

    public int[] iArrFld = new int[N];

    public static short[] sArrFld = new short[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.350F);
        FuzzerUtils.init(Test.dArrFld, 1.69172);
        FuzzerUtils.init(Test.sArrFld, (short) -11135);
    }

    public static long lMeth_check_sum = 0;

    public static long byMeth_check_sum = 0;

    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i3, int i4, long l) {
        int i5 = 7, i6 = -172, i7 = -8, i8 = -26492, i9 = -56869, i10 = 65, i11 = -4, i12 = -37298, i13 = 128, i14 = -65, i15 = 27545, i16 = -15402, iArr[] = new int[N];
        short s = 8388;
        byte by1 = 32;
        float f1 = 0.260F;
        double d = -2.122606, dArr[] = new double[N];
        boolean[] bArr1 = new boolean[N];
        FuzzerUtils.init(iArr, 6);
        FuzzerUtils.init(dArr, -2.89917);
        FuzzerUtils.init(bArr1, false);
        i4 += i3;
        if (Test.bFld) {
            for (i5 = 3; i5 < 146; i5++) {
                switch((i5 % 6) + 54) {
                    case 54:
                        i4 += (i5 + l);
                        i3 -= i4;
                        for (i7 = i5; i7 < 4; ++i7) {
                            for (i9 = 1; i9 < 1; ++i9) {
                                s += (short) (((i9 * by1) + i4) - i4);
                                iArr[i9 + 1] -= i4;
                                i8 = i7;
                                f1 += 243;
                                by1 <<= (byte) l;
                                i8 = 4;
                                dArr[i7 - 1] += i5;
                                iArr[i7] += i7;
                                if (Test.bFld)
                                    continue;
                            }
                            for (i11 = i7; i11 < 1; ++i11) {
                                i10 += (((i11 * i6) + Test.instanceCount) - i9);
                                dArr[i11 + 1] = Test.instanceCount;
                            }
                            f1 *= f1;
                            iArr[i7] = (int) f1;
                            Test.bFld = Test.bFld;
                            i8 >>= i10;
                            s += (short) (((i7 * i6) + i4) - i12);
                            i10 <<= (int) Test.instanceCount;
                            s *= s;
                            i6 += i4;
                        }
                        f1 -= f1;
                        Test.bFld = Test.bFld;
                        Test.instanceCount += (((i5 * s) + f1) - Test.instanceCount);
                        f1 -= -7730;
                        l >>= s;
                        if (Test.bFld)
                            continue;
                        for (i13 = 1; i13 < 4; ++i13) {
                            iArr[i5 + 1] = i9;
                            i10 -= (int) -10L;
                        }
                        break;
                    case 55:
                        i15 = (int) d;
                    case 56:
                        i16 >>= i14;
                        break;
                    case 57:
                        f1 += -27779;
                        break;
                    case 58:
                        bArr1[i5 + 1] = true;
                        break;
                    case 59:
                        i3 <<= (int) l;
                        break;
                    default:
                        f1 = i12;
                }
            }
        }
        long meth_res = i3 + i4 + l + i5 + i6 + i7 + i8 + i9 + i10 + s + by1 + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d) + i16 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(bArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static byte byMeth(byte by, float f) {
        int i2 = -6, i17 = 3, i18 = 5, i19 = -45588, i20 = -6, i21 = 140, i22 = 175, i23 = 14, i24 = 46526, i25 = 13, iArr1[][] = new int[N][N];
        boolean b = true, bArr[] = new boolean[N];
        long l1 = -11L, lArr1[] = new long[N];
        double d1 = -44.33341;
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, -84);
        FuzzerUtils.init(lArr1, 14L);
        bArr[(i2 >>> 1) % N] = (b = (!bMeth(i2, -8205, Test.instanceCount)));
        {
            java.io.PrintStream ax$0 = System.out;
            java.io.PrintStream ax$1 = System.err;
            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$2);
            System.setErr(ax$2);
            {
                boolean ax$9 = false;
                for (int ax$8 = -3971; ax$8 < 2083; ax$8 += 3) {
                    if (!ax$9) {
                        ax$9 = true;
                        {
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                            for (i17 = 128; i17 > 5; i17--) {
                                i2 += (((i17 * i18) + i17) - i2);
                                for (l1 = 1; l1 < 5; l1++) {
                                    i2 = -13503;
                                    Test.instanceCount *= i19;
                                    i19 >>>= -13724;
                                    i19 -= (int) l1;
                                    i2 = 16864;
                                }
                                if (Test.bFld) {
                                    for (i20 = 5; i20 > 1; i20 -= 2) {
                                        i19 = i2;
                                        i19 = (int) Test.instanceCount;
                                        i18 += i20;
                                        i19 -= i18;
                                        try {
                                            i2 = (i18 / 58343);
                                            i19 = (i2 / 238);
                                            i18 = (i17 / iArr1[i20 - 1][i17 - 1]);
                                        } catch (ArithmeticException a_e) {
                                        }
                                    }
                                    Test.instanceCount += Test.instanceCount;
                                    i18 *= i17;
                                    i2 += i17;
                                    for (i22 = 1; i22 < 5; ++i22) {
                                        for (i24 = 1; i24 < 2; ++i24) {
                                            i18 += (((i24 * l1) + i23) - i24);
                                            Test.fArrFld[i24 + 1] += i18;
                                            switch(((i24 % 5) * 5) + 81) {
                                                case 90:
                                                    i18 >>= i2;
                                                    if (i2 != 0) {
                                                    }
                                                    i2 -= 49097;
                                                    Test.bFld = true;
                                                    Test.instanceCount -= i22;
                                                    d1 -= -11;
                                                    b = Test.bFld;
                                                    Test.instanceCount -= i19;
                                                    f *= i17;
                                                    Test.fArrFld[i24] = (float) d1;
                                                    if (Test.bFld)
                                                        break;
                                                    lArr1[i17 - 1] = i20;
                                                    i25 += (int) 1.10F;
                                                    break;
                                                case 94:
                                                    d1 += i19;
                                                    break;
                                                case 100:
                                                    iArr1[i22][i22] = i23;
                                                    break;
                                                case 97:
                                                    i23 += i20;
                                                    break;
                                                case 84:
                                                    Test.fArrFld[i17] = (float) d1;
                                                    break;
                                            }
                                        }
                                    }
                                }
                            }
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                        }
                    }
                    int ax$5 = i19;
                    int ax$6 = i18;
                    try {
                        java.io.OutputStream ax$4 = new PipedOutputStream();
                        byte[] ax$3 = new byte[10];
                        if ((i18 == 0) && (i19 == ax$3.length)) {
                            ax$4.write(ax$3);
                        } else {
                            ax$4.write(ax$3, i18, i19);
                        }
                    } catch (Throwable ax$7) {
                    } finally {
                        i19 = ax$5;
                        i18 = ax$6;
                    }
                }
            }
            System.setOut(ax$0);
            System.setErr(ax$1);
        }
        long meth_res = by + Float.floatToIntBits(f) + i2 + (b ? 1 : 0) + i17 + i18 + l1 + i19 + i20 + i21 + i22 + i23 + i24 + i25 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
        byMeth_check_sum += meth_res;
        return (byte) meth_res;
    }

    public long lMeth(int i1) {
        byte by2 = 81;
        float f2 = -2.504F;
        long l2 = 2986381296L, lArr[] = new long[N];
        int i26 = -155, i27 = 49169, i28 = 13, i29 = 3, iArr2[] = new int[N], iArr3[][] = new int[N][N];
        double d2 = 1.66133;
        short s1 = -7129;
        FuzzerUtils.init(lArr, 130L);
        FuzzerUtils.init(iArr2, 3);
        FuzzerUtils.init(iArr3, 11);
        Test.instanceCount -= (-((lArr[(i1 >>> 1) % N]--) + byMeth(by2, fFld)));
        Test.instanceCount = Test.instanceCount;
        i1 += iFld;
        Test.instanceCount *= iFld;
        f2 = 1;
        do {
            switch((int) (((f2 % 8) * 5) + 108)) {
                case 129:
                    for (l2 = 1; l2 < 6; ++l2) {
                        i27 = 1;
                        while (++i27 < 2) {
                            Test.instanceCount = 174;
                            Test.instanceCount -= iFld;
                            i1 += i27;
                            i1 *= (int) f2;
                        }
                        i26 >>= (int) Test.instanceCount;
                        try {
                            iFld = (i27 / -33078);
                            iArr2[(int) (f2 - 1)] = (-52043 % iArr2[(int) (f2)]);
                            iFld = (iFld / 953358123);
                        } catch (ArithmeticException a_e) {
                        }
                        fFld %= (i27 | 1);
                        for (i28 = (int) (l2); i28 < 2; i28++) {
                            iArr2[(int) (f2)] -= (int) Test.instanceCount;
                            Test.instanceCount = i1;
                            fFld -= fFld;
                            Test.instanceCount = (long) d2;
                            i1 = 0;
                            iArr3 = iArr3;
                            Test.instanceCount *= l2;
                            i26 >>>= i26;
                            i29 -= -49640;
                            iArr3[i28][(int) (l2)] >>= i27;
                            switch((int) ((l2 % 6) + 51)) {
                                case 51:
                                    s1 += (short) i28;
                                    s1 = (short) l2;
                                    fFld *= -10235;
                                    Test.bFld = Test.bFld;
                                    iFld += -9;
                                    i26 = by2;
                                    i29 += (-9 + (i28 * i28));
                                    by2 = (byte) f2;
                                    i1 = iFld;
                                    iFld += (((i28 * i27) + i27) - i28);
                                    break;
                                case 52:
                                    if (i29 != 0) {
                                    }
                                    break;
                                case 53:
                                    Test.dArrFld[(int) (l2)] -= l2;
                                    break;
                                case 54:
                                    i26 >>= i27;
                                    break;
                                case 55:
                                    i29 <<= i27;
                                    break;
                                case 56:
                                    by2 = (byte) i26;
                                    break;
                            }
                        }
                    }
                    break;
                case 141:
                    iArr3[(int) (f2 - 1)][(int) (f2 - 1)] %= (int) (i1 | 1);
                    break;
                case 112:
                    i29 = (int) Test.instanceCount;
                    break;
                case 119:
                    if (Test.bFld)
                        break;
                    break;
                case 134:
                    fFld += (f2 - i26);
                    break;
                case 138:
                    lArr[(i1 >>> 1) % N] = l2;
                    break;
                case 111:
                    iArrFld[(int) (f2 + 1)] -= 63836;
                case 126:
                    Test.instanceCount = i28;
                    break;
                default:
                    i29 += (int) (f2 + i29);
            }
        } while (++f2 < 97);
        long meth_res = i1 + by2 + Float.floatToIntBits(f2) + l2 + i26 + i27 + i28 + i29 + Double.doubleToLongBits(d2) + s1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = 11, i30 = -7, i31 = 12, i32 = -6, i33 = 58204, i34 = -12, i35 = 24077, i36 = -243, i37 = 11, i38 = -4, i39 = -11, i40 = 160, i41 = -235, i42 = 4, i43 = 208, i44 = -41699, i45 = 8303, i46 = 180, i47 = -55104;
        long l3 = -199L, l4 = -54609L, lArr2[] = new long[N];
        short s2 = -27051, s3 = -2257;
        byte by3 = 55;
        double d3 = -6.83044;
        FuzzerUtils.init(lArr2, -38630L);
        i = 1;
        while (++i < 251) {
            iFld |= (int) lMeth(iFld);
            Test.byFld += (byte) i;
            lFld = (long) fFld;
            for (i30 = i; i30 < 20; i30++) {
                Test.instanceCount = iFld;
                iFld = i30;
                for (l3 = 1; l3 < 1; l3++) {
                    i32 += i31;
                    fFld *= i31;
                    Test.instanceCount = s2;
                    Test.instanceCount -= i30;
                    iFld *= (int) -549205245258329028L;
                }
                lArr2[(i31 >>> 1) % N] >>= l3;
                i31 += (i30 ^ iFld);
                i32 += (93 + (i30 * i30));
                lFld >>= i32;
                i31 *= i33;
                iArrFld[i30 - 1] *= s2;
                try {
                    i33 = (iArrFld[i30 - 1] / -2068514174);
                    i33 = (i33 / -169);
                    i32 = (-140 % i30);
                } catch (ArithmeticException a_e) {
                }
            }
            iArrFld[i] = -151;
            switch(((i % 1) * 5) + 100) {
                case 101:
                    Test.instanceCount += (((i * l3) + i32) - i33);
                    iFld += (((i * lFld) + i) - iFld);
                    i31 *= (int) Test.instanceCount;
                    break;
            }
            iFld = i;
            i32 += (((i * i33) + by3) - Test.instanceCount);
            if (Test.bFld)
                continue;
            {
                java.io.PrintStream ax$15 = System.out;
                java.io.PrintStream ax$16 = System.err;
                java.io.PrintStream ax$17 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$17);
                System.setErr(ax$17);
                try {
                    for (int ax$13 = -475; ax$13 < 6069; ax$13 += 1) {
                        try {
                            Object[] ax$11 = new Object[1024];
                            Object[] ax$10 = new Object[2048];
                            // System.arraycopy to be intrinsified.
                            System.arraycopy(ax$11, 0, ax$10, 1024, 64);
                        } catch (Throwable ax$12) {
                        } finally {
                        }
                    }
                } catch (Throwable ax$14) {
                }
                System.setOut(ax$15);
                System.setErr(ax$16);
            }
        }
        for (i34 = 9; i34 < 181; ++i34) {
            s3 *= (short) i32;
            i33 += (int) 118L;
            i31 += (i34 * i34);
        }
        i36 = 1;
        do {
            for (l4 = 60; l4 > 1; l4 -= 3) {
                i32 = i34;
                i31 = -137;
                i35 -= Test.byFld;
                iArrFld[(int) (l4 + 1)] -= i30;
            }
        } while (++i36 < 84);
        i32 += (int) fFld;
        for (i38 = 9; i38 < 204; ++i38) {
            i32 += (i38 - Test.byFld);
            i40 = 1;
            do {
                for (i41 = 1; i41 < 1; i41 += 3) {
                    i33 = i33;
                    lFld /= (i30 | 1);
                    Test.sArrFld[i41 - 1] += by3;
                    s3 *= (short) i;
                    i42 = i38;
                    i37 = -13;
                    i42 += (-28366 + (i41 * i41));
                }
                switch(((i40 % 10) * 5) + 30) {
                    case 53:
                    case 32:
                        for (d3 = 1; d3 < 1; d3++) {
                            i33 -= (int) l3;
                            Test.instanceCount += (long) (((d3 * fFld) + fFld) - i32);
                            Test.bFld = false;
                        }
                        lFld = -8L;
                        s3 %= (short) (l4 | 1);
                        for (i44 = 1; i44 < 1; i44++) {
                            Test.bFld = Test.bFld;
                            Test.instanceCount += 237;
                            i45 += (i44 + i41);
                            i35 += i44;
                            i45 = (int) Test.instanceCount;
                            i33 += i;
                            iArrFld = iArrFld;
                            fFld -= i31;
                            iFld -= i38;
                            Test.bFld = Test.bFld;
                        }
                        Test.bFld = Test.bFld;
                        Test.instanceCount += (((i40 * by3) + fFld) - l3);
                        i31 >>= -2;
                        lFld = lFld;
                        for (i46 = 1; i46 < 1; ++i46) {
                            fFld = by3;
                            Test.bFld = Test.bFld;
                        }
                        break;
                    case 80:
                        i31 += (((i40 * by3) + iFld) - i42);
                    case 69:
                        i31 <<= (int) 13L;
                        break;
                    case 60:
                        Test.byFld1 += (byte) i31;
                        break;
                    case 35:
                        i33 += (int) (-44.776F + (i40 * i40));
                        break;
                    case 50:
                        i32 += (i40 ^ i42);
                        break;
                    case 37:
                    case 54:
                    case 51:
                        iFld = i32;
                        break;
                    default:
                        Test.byFld1 -= (byte) i38;
                }
            } while (++i40 < 26);
        }
        FuzzerUtils.out.println("i i30 i31 = " + i + "," + i30 + "," + i31);
        FuzzerUtils.out.println("l3 i32 s2 = " + l3 + "," + i32 + "," + s2);
        FuzzerUtils.out.println("i33 by3 i34 = " + i33 + "," + by3 + "," + i34);
        FuzzerUtils.out.println("i35 s3 i36 = " + i35 + "," + s3 + "," + i36);
        FuzzerUtils.out.println("l4 i37 i38 = " + l4 + "," + i37 + "," + i38);
        FuzzerUtils.out.println("i39 i40 i41 = " + i39 + "," + i40 + "," + i41);
        FuzzerUtils.out.println("i42 d3 i43 = " + i42 + "," + Double.doubleToLongBits(d3) + "," + i43);
        FuzzerUtils.out.println("i44 i45 i46 = " + i44 + "," + i45 + "," + i46);
        FuzzerUtils.out.println("i47 lArr2 = " + i47 + "," + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("Test.instanceCount iFld Test.bFld = " + Test.instanceCount + "," + iFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("fFld Test.byFld lFld = " + Float.floatToIntBits(fFld) + "," + Test.byFld + "," + lFld);
        FuzzerUtils.out.println("Test.byFld1 Test.fArrFld Test.dArrFld = " + Test.byFld1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("iArrFld Test.sArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$18) {
            try {
                ServerSocket ax$25 = new ServerSocket(0);
                Socket ax$27 = null, ax$28 = null;
                try {
                    int ax$26 = ax$25.getLocalPort();
                    ax$27 = new Socket(InetAddress.getLocalHost(), ax$26);
                    ax$28 = ax$25.accept();
                    // close server socket and the accepted connection
                    ax$25.close();
                    ax$28.close();
                    ax$25 = new ServerSocket();
                    ax$25.bind(new InetSocketAddress(ax$26));
                    ax$25.close();
                    // close the client socket
                    ax$27.close();
                } catch (BindException be) {
                    if (System.getProperty("sun.net.useExclusiveBind") != null) {
                        // exclusive bind, expected exception
                    } else {
                    }
                } finally {
                    if (ax$25 != null)
                        ax$25.close();
                    if (ax$27 != null)
                        ax$27.close();
                    if (ax$28 != null)
                        ax$28.close();
                }
            } catch (Throwable ax$29) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$18 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  lMeth ->  lMeth mainTest
// DEBUG  byMeth ->  byMeth lMeth mainTest
// DEBUG  bMeth ->  bMeth byMeth lMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
