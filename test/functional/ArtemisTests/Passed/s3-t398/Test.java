// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 1306136056205420374L;

    public static float fFld = 15.290F;

    public static short sFld = 1763;

    public static boolean bFld = false;

    public static int iFld = -134;

    public double dFld = -78.42153;

    public static volatile short sFld1 = 24990;

    public static volatile long[] lArrFld = new long[N];

    public static int[] iArrFld = new int[N];

    public volatile int[][] iArrFld1 = new int[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 60498L);
        FuzzerUtils.init(Test.iArrFld, -497);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(double d, double d1, int i1) {
        int i2 = 8, i3 = -10, i4 = -6, i5 = -22598, i6 = 10, i7 = 3, i8 = -180, i9 = 3, i10 = 8, i11 = 28664, i12 = -161, iArr[] = new int[N];
        byte by = 121;
        float f = -2.836F;
        boolean b = true;
        short[] sArr = new short[N];
        long[][] lArr = new long[N][N];
        FuzzerUtils.init(iArr, 1521);
        FuzzerUtils.init(sArr, (short) 17453);
        FuzzerUtils.init(lArr, -19479L);
        for (i2 = 1; i2 < 135; i2 += 3) {
            for (i4 = 1; i4 < 12; i4++) {
                i1 = (int) Test.instanceCount;
                iArr[i4] += (int) -61889L;
            }
            if (false)
                continue;
            iArr[i2 - 1] += (int) Test.instanceCount;
        }
        i5 -= i2;
        by >>>= (byte) 2;
        i1 -= i5;
        i3 = i4;
        sArr[(i5 >>> 1) % N] += (short) i4;
        iArr[(i4 >>> 1) % N] -= i4;
        i3 = i5;
        i1 -= -12;
        i1 -= i5;
        iArr[(i3 >>> 1) % N] = i2;
        i5 -= i4;
        i5 = -65038;
        lArr[(i2 >>> 1) % N][(i4 >>> 1) % N] = i2;
        i3 |= (int) Test.instanceCount;
        i1 -= 8;
        switch(((10 >>> 1) % 2) + 76) {
            case 76:
                d1 -= -244;
                i3 &= i3;
                for (f = 2; f < 90; f++) {
                    for (i7 = 1; 6 > i7; i7++) {
                        d = i7;
                        if (true)
                            continue;
                        by = (byte) 64;
                        Test.instanceCount += (((i7 * i8) + i4) - Test.instanceCount);
                        for (i9 = 1; 2 > i9; i9++) {
                            b = b;
                        }
                        for (i11 = 1; 2 > i11; ++i11) {
                            iArr[i11 + 1] += i12;
                            i10 += i10;
                            Test.instanceCount ^= 1221;
                            i6 += i11;
                        }
                    }
                }
                break;
            case 77:
                sArr[(i3 >>> 1) % N] |= (short) i6;
                break;
            default:
                i3 |= i3;
        }
        long meth_res = Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i1 + i2 + i3 + i4 + i5 + by + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + i11 + i12 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1() {
        if (ax$0) {
            try {
                byte[] ax$5 = new byte[16];
                int ax$2 = 2146724623;
                byte[] ax$1 = new byte[16];
                byte[] ax$4 = new byte[16];
                for (int ax$3 = 0; ax$3 < ax$2; ax$3++) {
                    ax$4[ax$3] = (byte) ((ax$5[ax$3] + ax$1[ax$3]) >> 1);
                }
            } catch (Throwable ax$6) {
            } finally {
            }
            return;
        }
        int i = 35416, i13 = 14, i14 = 9, i15 = -27900, i16 = -7, i17 = -149, i18 = 26, i19 = 12, i20 = 46798, iArr1[] = new int[N];
        double d2 = -123.36972;
        long l = -11L;
        byte by1 = -61;
        float[] fArr = new float[N];
        FuzzerUtils.init(iArr1, -43207);
        FuzzerUtils.init(fArr, -110.203F);
        i <<= (iMeth(d2, 118.95045, 60541) - i);
        iArr1[(i >>> 1) % N] = (int) Test.fFld;
        i *= (int) -1746175509L;
        i = (int) Test.instanceCount;
        iArr1[(i >>> 1) % N] = Test.sFld;
        Test.fFld += -69.428F;
        i <<= (int) Test.instanceCount;
        for (i13 = 8; i13 < 203; ++i13) {
            Test.sFld += (short) -139;
            i14 >>>= i;
            if (Test.bFld) {
                iArr1[i13 + 1] = (int) Test.instanceCount;
            }
            i >>= (int) Test.instanceCount;
            i14 = Test.sFld;
            iArr1[i13] = i13;
            i *= (int) -30.169F;
            iArr1 = iArr1;
            iArr1 = iArr1;
            i += (int) Test.fFld;
            i -= (int) Test.instanceCount;
            i14 = (int) Test.instanceCount;
        }
        for (i15 = 3; i15 < 80; i15++) {
            for (i17 = 1; i17 < 7; i17++) {
                Test.instanceCount >>>= Test.sFld;
                iArr1[i17] += i;
                d2 %= -6;
                i18 += i17;
            }
            Test.instanceCount += (i15 * i15);
            i = (int) Test.instanceCount;
            for (l = 7; l > 1; l -= 3) {
                Test.instanceCount += i20;
                i18 += by1;
                Test.fFld += -59143;
                Test.sFld += (short) (l - i17);
                Test.fFld = -2788719805L;
                Test.instanceCount >>= i19;
                Test.fFld = Test.instanceCount;
            }
        }
        vMeth1_check_sum += i + Double.doubleToLongBits(d2) + i13 + i14 + i15 + i16 + i17 + i18 + l + i19 + i20 + by1 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {
        int i21 = -3162, i22 = 15, i23 = 2639, i24 = 12726, i25 = -12, i26 = 121, iArr2[][] = new int[N][N], iArr3[] = new int[N];
        double[] dArr = new double[N];
        boolean[] bArr = new boolean[N];
        float[] fArr1 = new float[N];
        FuzzerUtils.init(iArr2, 11);
        FuzzerUtils.init(dArr, 0.35998);
        FuzzerUtils.init(iArr3, -24439);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr1, 0.251F);
        {
            java.io.PrintStream ax$9 = System.out;
            java.io.PrintStream ax$10 = System.err;
            java.io.PrintStream ax$11 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$11);
            System.setErr(ax$11);
            try {
                ax$0 = true;
                for (int ax$7 = 0; ax$7 < 8979; ax$7 += 1) vMeth1();
            } catch (java.lang.Throwable ax$8) {
            } finally {
                ax$0 = false;
            }
            System.setOut(ax$9);
            System.setErr(ax$10);
        }
        vMeth1();
        iArr2[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] += 46639;
        Test.iFld %= -21099;
        Test.iFld = (int) Test.instanceCount;
        Test.instanceCount -= Test.instanceCount;
        iArr2[(Test.iFld >>> 1) % N][(39 >>> 1) % N] &= (int) Test.instanceCount;
        i21 = 1;
        while (++i21 < 102) {
            iArr2[i21][i21] = (int) Test.instanceCount;
            Test.iFld ^= 5;
            Test.fFld *= Test.instanceCount;
            Test.iFld -= -47670;
            for (i22 = 1; i22 < 5; ++i22) {
                Test.iFld -= i22;
                Test.fFld += i22;
                i23 *= (int) Test.instanceCount;
                i24 = 2;
                do {
                    Test.instanceCount = -16198;
                    Test.instanceCount += i24;
                    if (i21 != 0) {
                        vMeth_check_sum += i21 + i22 + i23 + i24 + i25 + i26 + FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                        return;
                    }
                    dArr[i21 - 1] = i21;
                    Test.fFld += (i24 * i24);
                    if (true)
                        continue;
                } while (--i24 > 0);
                Test.instanceCount |= i24;
                Test.fFld = Test.instanceCount;
                i23 = i22;
                switch((((i24 >>> 1) % 4) * 5) + 106) {
                    case 114:
                        i23 += (i22 | Test.iFld);
                        iArr3[i22] = i22;
                        for (i25 = 1; i25 < 2; i25++) {
                            Test.lArrFld[i21 + 1] = i23;
                            i26 += (i25 + Test.instanceCount);
                            bArr[i25] = Test.bFld;
                            i23 = (int) 1.32701;
                            fArr1[i21 - 1] += Test.instanceCount;
                            i23 += (i25 - Test.fFld);
                        }
                        iArr3[i21] *= (int) Test.instanceCount;
                        Test.iFld += i22;
                        break;
                    case 119:
                        Test.instanceCount += -22;
                        break;
                    case 121:
                        i23 -= i26;
                    case 123:
                        i26 += i24;
                        break;
                }
            }
        }
        vMeth_check_sum += i21 + i22 + i23 + i24 + i25 + i26 + FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {
        int i27 = -8, i28 = 9309, i29 = 13, i30 = 2, i31 = 12, i32 = -1, i33 = 0, i34 = -5, i35 = 6, i36 = -1685, i37 = -40416;
        byte by2 = 4, byArr[] = new byte[N];
        double[] dArr1 = new double[N];
        short[][] sArr1 = new short[N][N];
        float[] fArr2 = new float[N];
        FuzzerUtils.init(byArr, (byte) 36);
        FuzzerUtils.init(dArr1, -88.121255);
        FuzzerUtils.init(sArr1, (short) -18118);
        FuzzerUtils.init(fArr2, -126.312F);
        vMeth();
        Test.instanceCount = Test.instanceCount;
        for (i27 = 11; i27 < 225; i27++) {
            i28 >>= i28;
            Test.instanceCount >>>= Test.instanceCount;
            switch((((Test.iFld >>> 1) % 2) * 5) + 121) {
                case 123:
                    Test.iFld += (i27 * i27);
                    Test.instanceCount -= -22187;
                    byArr[i27 - 1] *= (byte) -1;
                    Test.fFld -= Test.instanceCount;
                    Test.fFld += i27;
                    i28 += i27;
                    i28 = (int) dFld;
                    for (i29 = 1; i29 < 24; i29++) {
                        for (i31 = 1; i31 < 2; ++i31) {
                            i28 -= i27;
                            dFld = i30;
                            i32 = i32;
                            Test.iFld = -3;
                            Test.iFld = (int) Test.instanceCount;
                            Test.instanceCount *= (long) dFld;
                            Test.iArrFld[i31 - 1] %= -32468;
                            Test.fFld *= i29;
                            by2 <<= (byte) Test.iFld;
                            i30 -= (int) Test.instanceCount;
                        }
                        i33 *= i32;
                        i32 += (i29 * i29);
                        Test.iArrFld[i29 + 1] = 70;
                    }
                    i28 *= i27;
                    i34 = 1;
                    do {
                        i28 -= i34;
                        Test.iArrFld[i27 - 1] >>= i29;
                        i32 *= 54;
                        i28 -= (int) dFld;
                        i30 += (((i34 * i31) + Test.fFld) - i28);
                        for (i35 = i34; 1 > i35; i35++) {
                            dArr1[i34] -= i32;
                            Test.iFld += (i35 + Test.instanceCount);
                            i28 += -38;
                            dFld -= -30696;
                            i28 *= (int) Test.instanceCount;
                            i36 = (int) 8912L;
                            i32 *= (int) Test.instanceCount;
                            i33 >>= i34;
                            Test.fFld = i30;
                            Test.iFld &= i36;
                            Test.iArrFld[i27 + 1] = (int) Test.instanceCount;
                            Test.fFld += i30;
                            i30 -= (int) Test.instanceCount;
                        }
                        Test.iArrFld[i34] = i29;
                        sArr1[i34 + 1][i27 + 1] += (short) 12273;
                        i37 = 1;
                        while ((i37 += 2) < 1) {
                            i32 = Test.sFld1;
                            fArr2[i37 - 1] -= i30;
                            Test.iFld -= i36;
                            if (Test.bFld)
                                continue;
                            iArrFld1 = FuzzerUtils.int2array(N, (int) 1);
                            Test.iFld = (int) Test.instanceCount;
                            i36 += (((i37 * i27) + i28) - Test.instanceCount);
                            i36 /= -103;
                            switch(((i37 % 1) * 5) + 99) {
                                case 104:
                                    i30 += i37;
                                    Test.iArrFld[i27 - 1] = i33;
                                    iArrFld1[i27 - 1][i27 - 1] = i35;
                                    Test.iFld += i37;
                                    i33 *= (int) Test.instanceCount;
                                    Test.fFld = i35;
                                    Test.instanceCount <<= i35;
                            }
                            if (Test.bFld)
                                continue;
                            Test.fFld -= 149;
                            i33 = i32;
                            i36 = (int) -9898L;
                            i28 = i27;
                        }
                        i36 += (((i34 * i28) + i28) - Test.instanceCount);
                        try {
                            i33 = (iArrFld1[i27][i34 - 1] / -44204);
                            Test.iArrFld[i34 - 1] = (110 % i28);
                            i32 = (Test.iArrFld[i27 + 1] / i37);
                        } catch (ArithmeticException a_e) {
                        }
                    } while (++i34 < 24);
                case 130:
                    i33 += i35;
            }
        }
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 by2 i34 = " + i33 + "," + by2 + "," + i34);
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("byArr dArr1 sArr1 = " + FuzzerUtils.checkSum(byArr) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + "," + FuzzerUtils.checkSum(sArr1));
        FuzzerUtils.out.println("fArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld Test.iFld dFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.sFld1 Test.lArrFld Test.iArrFld = " + Test.sFld1 + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("iArrFld1 = " + FuzzerUtils.checkSum(iArrFld1));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$12) {
            try {
                StringBuilder ax$13 = new StringBuilder("hilbert");
                ax$13.replace(-1, 2, " ");
            } catch (Throwable ax$14) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$12 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
