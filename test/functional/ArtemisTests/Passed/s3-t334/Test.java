// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -21L;

    public static float fFld = -69.330F;

    public static int iFld = -36509;

    public static short sFld = -13573;

    public static boolean bFld = true;

    public static byte byFld = 0;

    public static float[] fArrFld = new float[N];

    public static long[][] lArrFld = new long[N][N];

    public static double[] dArrFld = new double[N];

    public static volatile int[] iArrFld = new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -9.643F);
        FuzzerUtils.init(Test.lArrFld, 6747694246835758525L);
        FuzzerUtils.init(Test.dArrFld, -2.88591);
        FuzzerUtils.init(Test.iArrFld, -14);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth() {
        if (ax$12) {
            int ax$13 = iFld;
            try {
                if (iFld != 14680079) {
                } else {
                }
            } catch (Throwable ax$14) {
            } finally {
                iFld = ax$13;
            }
            return -4389505214822825840L;
        }
        int i2 = 207, i3 = 12, i4 = -179, i5 = -5, i6 = 14, i7 = 12, i8 = -58853, iArr[] = new int[N];
        double d2 = -2.14913;
        long l = 7962497646715018410L;
        boolean b1 = false;
        FuzzerUtils.init(iArr, -63039);
        for (float f : Test.fArrFld) {
            switch((((i2 >>> 1) % 2) * 5) + 10) {
                case 15:
                    i2 += 51383;
                    i2 *= i2;
                    if (true)
                        break;
                    Test.instanceCount = i2;
                    d2 %= -224;
                    for (i3 = 2; 1 < i3; i3 -= 3) {
                        i2 = (int) Test.instanceCount;
                        for (i5 = 2; i5 > 1; i5--) {
                            i6 = (int) f;
                            i4 >>= Test.iFld;
                            Test.instanceCount = i3;
                            Test.instanceCount = i3;
                            Test.lArrFld = Test.lArrFld;
                            Test.iFld -= (int) Test.fFld;
                            Test.dArrFld = Test.dArrFld;
                            Test.iFld = (int) Test.instanceCount;
                            iArr[i5] -= (int) 1.1414;
                            i4 &= -52512;
                            Test.instanceCount -= 8;
                            i6 = (int) Test.instanceCount;
                        }
                        i2 += i3;
                    }
                    if (i3 != 0) {
                    }
                    Test.instanceCount >>= i4;
                    i7 = 1;
                    while (++i7 < 2) {
                        switch(((i7 % 10) * 5) + 4) {
                            case 29:
                                Test.iFld -= i2;
                                for (l = i7; l < 1; l++) {
                                    Test.sFld -= (short) i5;
                                    Test.sFld += (short) (((l * i4) + i5) - i7);
                                    i4 += 1;
                                    i6 = Test.iFld;
                                    switch(((i7 % 3) * 5) + 96) {
                                        case 111:
                                            b1 = b1;
                                            Test.fFld = Test.iFld;
                                            b1 = b1;
                                            break;
                                        case 102:
                                            i2 >>= i5;
                                            break;
                                        case 104:
                                            Test.fArrFld = Test.fArrFld;
                                            break;
                                        default:
                                            if (b1)
                                                break;
                                    }
                                }
                                break;
                            case 15:
                                b1 = true;
                                break;
                            case 8:
                                d2 = -12;
                                break;
                            case 41:
                                Test.instanceCount = 53154;
                                break;
                            case 22:
                                i8 -= Test.iFld;
                                break;
                            case 9:
                                Test.instanceCount = (long) d2;
                                break;
                            case 39:
                                Test.iFld = Test.sFld;
                                break;
                            case 49:
                                Test.lArrFld[i7] = Test.lArrFld[i7];
                                break;
                            case 45:
                                Test.sFld -= (short) i7;
                                break;
                            case 11:
                                iArr[i7] *= i4;
                                break;
                            default:
                                Test.iFld = (int) l;
                        }
                    }
                    break;
                case 11:
                    Test.instanceCount <<= i8;
                    break;
                default:
                    i6 = i2;
            }
        }
        long meth_res = i2 + Double.doubleToLongBits(d2) + i3 + i4 + i5 + i6 + i7 + l + i8 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth1(int i1) {
        int i9 = -196, i10 = -113, i11 = -97, i12 = 9, i13 = -28, i14 = -186, i15 = 141, i16 = -54353, i17 = 7, iArr1[][] = new int[N][N];
        FuzzerUtils.init(iArr1, -1);
        Test.fFld = (i1 + -11);
        {
            java.io.PrintStream ax$17 = System.out;
            java.io.PrintStream ax$18 = System.err;
            java.io.PrintStream ax$19 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$19);
            System.setErr(ax$19);
            try {
                ax$12 = true;
                for (int ax$15 = 0; ax$15 < 5023; ax$15 += 1) lMeth();
            } catch (java.lang.Throwable ax$16) {
            } finally {
                ax$12 = false;
            }
            System.setOut(ax$17);
            System.setErr(ax$18);
        }
        lMeth();
        for (i9 = 4; i9 < 106; i9++) {
            double d3 = -1.92640;
            iArr1[i9] = iArr1[i9 - 1];
            try {
                i10 = (Test.iFld / 360869919);
                i10 = (29 % i9);
                i10 = (i1 % Test.iFld);
            } catch (ArithmeticException a_e) {
            }
            Test.lArrFld = Test.lArrFld;
            i1 = (int) Test.instanceCount;
            d3 = i1;
            Test.iFld += (-50003 + (i9 * i9));
            i1 = i10;
            Test.lArrFld[i9 - 1][i9 - 1] = (long) d3;
            i1 -= (int) Test.fFld;
            Test.instanceCount /= (Test.iFld | 1);
            for (i11 = 1; 5 > i11; i11++) {
                short s = -12516;
                i1 -= i9;
                Test.instanceCount += i11;
                i10 += (i11 | i12);
                switch(((i9 % 7) * 5) + 71) {
                    case 96:
                        Test.instanceCount = i1;
                        Test.fFld += i11;
                        Test.fArrFld[(-16893 >>> 1) % N] *= Test.iFld;
                        i10 += i9;
                        i12 += (int) Test.instanceCount;
                        Test.iFld -= s;
                        for (i13 = 1; i13 < 2; ++i13) {
                            if (i12 != 0) {
                                vMeth1_check_sum += i1 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1);
                                return;
                            }
                        }
                        i10 >>>= i14;
                        Test.iFld += (114 + (i11 * i11));
                        for (i15 = 2; i15 > 1; i15--) {
                            i14 += (((i15 * i16) + i11) - i1);
                            i16 -= (int) Test.instanceCount;
                        }
                        {
                            java.io.PrintStream ax$4 = System.out;
                            java.io.PrintStream ax$5 = System.err;
                            java.io.PrintStream ax$6 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$6);
                            System.setErr(ax$6);
                            try {
                                for (int ax$2 = -2661; ax$2 < 4079; ax$2 += 1) {
                                    try {
                                        int ax$0 = 0x7007;
                                        for (; ax$0 < 20; ax$0++) ;
                                    } catch (Throwable ax$1) {
                                    } finally {
                                    }
                                }
                            } catch (Throwable ax$3) {
                            }
                            System.setOut(ax$4);
                            System.setErr(ax$5);
                        }
                        break;
                    case 94:
                        Test.instanceCount >>= Test.instanceCount;
                        i16 = i13;
                        break;
                    case 89:
                        i16 ^= (int) Test.instanceCount;
                        i16 >>= Test.iFld;
                        Test.sFld *= (short) i14;
                        Test.lArrFld[i9 - 1][i11] += i16;
                        break;
                    case 92:
                        iArr1[i11 - 1][i9] = i17;
                        break;
                    case 100:
                        i14 -= i11;
                        break;
                    case 79:
                    case 85:
                        iArr1[i9][i11 - 1] += Test.iFld;
                        break;
                    default:
                        i12 += (((i11 * i14) + i17) - Test.instanceCount);
                }
            }
        }
        vMeth1_check_sum += i1 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(boolean b, double d1) {
        int i18 = 4, i19 = -14, i20 = 20, i21 = -60776, i22 = -39156, i23 = 11166;
        long l1 = 76L;
        byte by = 79;
        vMeth1(Test.iFld);
        for (i18 = 138; i18 > 5; i18--) {
            Test.instanceCount ^= Test.instanceCount;
            i20 = 1;
            do {
                for (l1 = i20; l1 < 1; ++l1) {
                    i21 += (int) -26.213F;
                    Test.iFld = (int) 2573113687L;
                    i21 -= by;
                    Test.iFld = (int) Test.instanceCount;
                    i21 = by;
                }
                switch((i18 % 5) + 37) {
                    case 37:
                        i19 -= (int) l1;
                        i19 += (((i20 * i19) + i21) - i21);
                        for (i22 = 1; i22 < 1; ++i22) {
                            Test.instanceCount *= i20;
                            Test.instanceCount >>= i18;
                            i19 <<= by;
                            i21 = -63578;
                            if (b) {
                                i19 /= (int) (i21 | 1);
                                if (b)
                                    break;
                                Test.iArrFld[i18] = i18;
                                Test.fArrFld[i22 - 1] = by;
                                Test.sFld -= (short) i20;
                                Test.sFld = (short) l1;
                                i23 += (int) -5L;
                                if (i23 != 0) {
                                    vMeth_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d1) + i18 + i19 + i20 + l1 + i21 + by + i22 + i23;
                                    return;
                                }
                                Test.lArrFld[i20][i22] = i22;
                                Test.lArrFld[i22][i18 - 1] >>= -79;
                            } else if (b) {
                                switch((i22 % 7) + 76) {
                                    case 76:
                                        Test.iArrFld[i20 - 1] = (int) l1;
                                        Test.iArrFld[i20 - 1] ^= i22;
                                        i21 = i20;
                                        switch(((i22 % 4) * 5) + 16) {
                                            case 27:
                                                d1 = -58690;
                                                i19 = i23;
                                                Test.iFld = i19;
                                            case 35:
                                                i21 = i21;
                                                break;
                                            case 30:
                                                i19 -= -210;
                                            case 18:
                                                i21 += i22;
                                            default:
                                                d1 *= Test.iFld;
                                        }
                                        break;
                                    case 77:
                                        i23 *= 37596;
                                        break;
                                    case 78:
                                        Test.iArrFld = Test.iArrFld;
                                        break;
                                    case 79:
                                        Test.instanceCount += i22;
                                        break;
                                    case 80:
                                        Test.iArrFld[i20 + 1] *= 101;
                                    case 81:
                                        i21 -= Test.iFld;
                                        break;
                                    case 82:
                                    default:
                                        b = b;
                                }
                            } else {
                                i23 += (((i22 * i18) + i22) - i21);
                            }
                        }
                        break;
                    case 38:
                        d1 -= Test.instanceCount;
                        break;
                    case 39:
                        i19 += i20;
                        break;
                    case 40:
                        Test.fFld -= by;
                        break;
                    case 41:
                        i23 += (i20 ^ l1);
                }
            } while (++i20 < 4);
        }
        vMeth_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d1) + i18 + i19 + i20 + l1 + i21 + by + i22 + i23;
    }

    public void mainTest(String[] strArr1) {
        double d = 53.87678, d4 = 6.125416;
        int i = 11, i24 = 59451, i25 = 10, i26 = 65113, i27 = 18105, i29 = 6387, i30 = -95, i31 = 14, i32 = 8, i33 = -10, i34 = -9, iArr2[][] = new int[N][N];
        boolean b2 = true, bArr[] = new boolean[N];
        long l2 = 36292L;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(byArr, (byte) -118);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr2, -8681);
        for (d = 4; d < 219; ++d) {
            vMeth(b2, d);
            Test.bFld = b2;
            Test.iArrFld[(int) (d)] -= i;
            i += (int) (d * d);
            Test.fFld = Test.instanceCount;
        }
        Test.iFld <<= Test.iFld;
        for (i24 = 9; 168 > i24; ++i24) {
            for (i26 = i24; 32 > i26; i26++) {
                int i28 = -207;
                i -= Test.iFld;
                i25 = i25;
                Test.iArrFld[i24 + 1] *= Test.iFld;
                i *= i26;
                Test.fFld -= i25;
                i25 += (i26 * i26);
                Test.iArrFld[i26] -= i24;
                i28 >>= 152;
                Test.instanceCount = l2;
            }
        }
        Test.fFld %= (i25 | 1);
        for (i29 = 7; 250 > i29; i29++) {
            Test.fFld -= -63020;
            i25 = i25;
            for (i31 = 21; i31 > 1; i31--) {
                Test.instanceCount = 38752;
                for (i33 = 1; i33 < 2; i33++) {
                    Test.iArrFld[i29 + 1] = (int) d;
                    i27 += i33;
                    i += -31342;
                    i32 -= Test.iFld;
                    l2 *= Test.sFld;
                    byArr[i29] <<= (byte) i25;
                    switch((i33 % 4) + 97) {
                        case 97:
                            Test.iArrFld[i31 - 1] *= (int) l2;
                            l2 += (long) d;
                            d4 = Test.instanceCount;
                            i = -39958;
                            Test.iFld += i33;
                            Test.iFld -= i33;
                            Test.iFld ^= (int) Test.instanceCount;
                            break;
                        case 98:
                            Test.lArrFld[i29 + 1][i33 - 1] *= i27;
                            {
                                java.io.PrintStream ax$7 = System.out;
                                java.io.PrintStream ax$8 = System.err;
                                java.io.PrintStream ax$9 = new java.io.PrintStream(new java.io.OutputStream() {

                                    @Override
                                    public void write(int b) throws java.io.IOException {
                                        // DO NOTHING: DISCARD ALL OUTPUTS
                                    }
                                });
                                System.setOut(ax$9);
                                System.setErr(ax$9);
                                {
                                    boolean ax$11 = false;
                                    for (int ax$10 = -3687; ax$10 < 4615; ax$10 += 9) {
                                        if (!ax$11) {
                                            ax$11 = true;
                                            {
                                                System.setOut(ax$7);
                                                System.setErr(ax$8);
                                                try {
                                                    i = (Test.iArrFld[i29] % i24);
                                                    i32 = (107 % i29);
                                                    Test.iArrFld[i31] = (i33 / -22);
                                                } catch (ArithmeticException a_e) {
                                                }
                                                System.setOut(ax$9);
                                                System.setErr(ax$9);
                                            }
                                        }
                                    }
                                }
                                System.setOut(ax$7);
                                System.setErr(ax$8);
                            }
                            Test.byFld = (byte) i30;
                            b2 = Test.bFld;
                            Test.lArrFld[i33][i31 - 1] *= i24;
                            i -= (int) d;
                        case 99:
                            Test.fFld *= i25;
                            i25 = (int) d4;
                            Test.instanceCount %= (l2 | 1);
                            i32 += -21739;
                            i27 += (i33 * i24);
                            i30 += (i33 * i33);
                            i += (i33 * i33);
                            Test.instanceCount -= i29;
                            break;
                        case 100:
                            l2 += i33;
                            d4 *= i29;
                            Test.iFld = (int) -8.85F;
                            Test.iArrFld[i29 + 1] -= i29;
                            i30 = Test.iFld;
                    }
                    bArr = FuzzerUtils.boolean1array(N, (boolean) true);
                    i34 = i29;
                    Test.byFld *= (byte) i32;
                    i34 *= i34;
                    i34 = Test.sFld;
                    Test.iFld += (int) (-5512965977945597533L + (i33 * i33));
                    switch((i29 % 7) + 15) {
                        case 15:
                            switch(((i31 % 1) * 5) + 1) {
                                case 3:
                                    Test.dArrFld[i31] *= i30;
                                    break;
                            }
                            Test.fFld *= 14;
                            i34 += (((i33 * l2) + Test.fFld) - l2);
                            switch(((i31 % 4) * 5) + 68) {
                                case 81:
                                    i32 += i33;
                                    iArr2 = iArr2;
                                    i30 -= -4;
                                    d4 = i31;
                                    break;
                                case 80:
                                    Test.instanceCount -= i25;
                                    break;
                                case 77:
                                    if (b2)
                                        continue;
                                case 76:
                                    i32 += Test.byFld;
                                    break;
                            }
                        case 16:
                            b2 = b2;
                        case 17:
                            i30 = i34;
                        case 18:
                            i = (int) d4;
                            break;
                        case 19:
                            byArr[i33] = (byte) i27;
                            break;
                        case 20:
                            Test.iFld += i33;
                            break;
                        case 21:
                            if (Test.bFld)
                                continue;
                            break;
                    }
                }
            }
        }
        FuzzerUtils.out.println("d i b2 = " + Double.doubleToLongBits(d) + "," + i + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 l2 i29 = " + i27 + "," + l2 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 d4 = " + i33 + "," + i34 + "," + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("byArr bArr iArr2 = " + FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(bArr) + "," + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld Test.bFld Test.byFld = " + Test.sFld + "," + (Test.bFld ? 1 : 0) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.fArrFld Test.lArrFld Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$12 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
