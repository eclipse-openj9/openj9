// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = 51479L;

    public static volatile boolean bFld = true;

    public static int iFld = 60477;

    public static volatile float fFld = -95.28F;

    public static double dFld = 69.59723;

    public static int iFld1 = 59191;

    public static byte byFld = 118;

    public int iFld2 = 10097;

    public long lFld = 1597197013L;

    public static boolean[] bArrFld = new boolean[N];

    public int[] iArrFld = new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long iMeth_check_sum = 0;

    public static long sMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1(float f1) {
        if (ax$10) {
            try {
                java.lang.Byte ax$11 = new Byte((byte) 0xFFFFFFFF);
                ax$11 = (byte) (ax$11 + 2);
            } catch (Throwable ax$12) {
            } finally {
            }
            return 2052973484;
        }
        int i5 = 251, iArr1[] = new int[N];
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, -3430L);
        FuzzerUtils.init(iArr1, -111);
        lArr[(i5 >>> 1) % N] += i5;
        iArr1[(-2 >>> 1) % N] *= 21;
        i5 = (int) Test.instanceCount;
        long meth_res = Float.floatToIntBits(f1) + i5 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static short sMeth(int i4, float f) {
        int i6 = -3, i7 = -44306, i8 = -68, i9 = 1, i10 = 54741, i11 = -195, i12 = -9, i13 = -21441, i14 = 45465, iArr2[] = new int[N];
        double d = 2.101221, dArr[] = new double[N];
        byte by1 = -57;
        long[] lArr1 = new long[N];
        float[][] fArr = new float[N][N];
        FuzzerUtils.init(iArr2, -17191);
        FuzzerUtils.init(lArr1, -242L);
        FuzzerUtils.init(fArr, -1.1004F);
        FuzzerUtils.init(dArr, -1.75231);
        i4 += ((i4 + (i4 * i4)) + ((i4 | i4) * iMeth1(f)));
        i4 -= i4;
        i4 -= i4;
        iArr2 = iArr2;
        lArr1 = lArr1;
        fArr[(26800 >>> 1) % N][(i4 >>> 1) % N] += i4;
        Test.instanceCount <<= i4;
        for (i6 = 149; i6 > 7; i6 -= 2) {
            dArr[i6] -= -5;
            for (i8 = i6; i8 < 8; i8++) {
                i7 += (i8 ^ i6);
                iArr2[i6 - 1] = i9;
            }
            for (i10 = 1; i10 < 8; i10++) {
                d = i7;
                d += i6;
            }
            i7 = 199;
            i7 ^= Test.iFld;
            switch(((i10 >>> 1) % 1) + 90) {
                case 90:
                    fArr[i6 + 1][i6] = f;
                    for (i12 = 1; i12 < 8; i12++) {
                        Test.instanceCount = Test.instanceCount;
                        Test.iFld = by1;
                        try {
                            iArr2[i12 - 1] = (-28785 / i10);
                            Test.iFld = (i9 / 16954);
                            i11 = (i9 % 65536);
                        } catch (ArithmeticException a_e) {
                        }
                        i7 = (int) d;
                        iArr2[i12 + 1] = Test.iFld;
                        i11 -= i6;
                        i13 += (int) Test.instanceCount;
                        Test.iFld += (((i12 * Test.instanceCount) + by1) - Test.iFld);
                        i14 = 2;
                        while ((i14 -= 3) > 0) {
                            iArr2[i12] <<= (int) Test.instanceCount;
                            if (Test.bFld)
                                break;
                            Test.bArrFld[(i4 >>> 1) % N] = Test.bFld;
                            by1 = (byte) Test.instanceCount;
                            switch((i6 % 2) + 96) {
                                case 96:
                                    i11 >>= Test.iFld;
                                    fArr[i6 + 1][i6 - 1] = Test.instanceCount;
                                    Test.iFld += (i14 - Test.instanceCount);
                                    break;
                                case 97:
                                    iArr2[i6 - 1] = (int) f;
                                    break;
                                default:
                                    Test.instanceCount += i4;
                            }
                        }
                    }
                    {
                        java.io.PrintStream ax$7 = System.out;
                        java.io.PrintStream ax$8 = System.err;
                        java.io.PrintStream ax$9 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$9);
                        System.setErr(ax$9);
                        try {
                            for (int ax$5 = -3290; ax$5 < 5246; ax$5 += 1) {
                                try {
                                    long ax$1 = 1291788L;
                                    long[] ax$3 = { -1L, 0L, 1L };
                                    long[] ax$0 = new long[10];
                                    for (int ax$2 = 0; ax$2 < ax$3.length; ax$2 += 1) {
                                        ax$3[ax$2] = (long) (ax$0[ax$2] ^ ax$1);
                                    }
                                } catch (Throwable ax$4) {
                                } finally {
                                }
                            }
                        } catch (Throwable ax$6) {
                        }
                        System.setOut(ax$7);
                        System.setErr(ax$8);
                    }
                    break;
            }
        }
        long meth_res = i4 + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + i13 + by1 + i14 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        sMeth_check_sum += meth_res;
        return (short) meth_res;
    }

    public static int iMeth(int i2, byte by, int i3) {
        int i15 = -45801, i16 = -16140, i17 = 3, i18 = -13455, i19 = -29448, i20 = -14, i21 = -6, i22 = 70, i23 = 233, i24 = 9, i25 = -60506, iArr[] = new int[N], iArr3[][] = new int[N][N];
        long l = -390208133L, l1 = -2915200217L;
        byte[] byArr = new byte[N];
        float[] fArr1 = new float[N];
        FuzzerUtils.init(iArr, -25321);
        FuzzerUtils.init(byArr, (byte) 68);
        FuzzerUtils.init(iArr3, 7);
        FuzzerUtils.init(fArr1, 55.545F);
        Test.bFld = (((iArr[(i3 >>> 1) % N]--) + Test.instanceCount) != sMeth(Test.iFld, Test.fFld));
        for (i15 = 5; i15 < 88; i15++) {
            i2 *= i16;
            l += by;
            i3 += (i15 * i15);
            i16 *= 5;
            if (Test.bFld)
                break;
            if (Test.bFld)
                break;
            i17 = 7;
            do {
                Test.iFld >>= -2890;
                byArr[i15] *= (byte) i3;
                i16 += (((i17 * i17) + i2) - l1);
                for (i18 = 1; 1 > i18; ++i18) {
                    i16 += (((i18 * Test.instanceCount) + Test.iFld) - i15);
                    by = by;
                    l &= i3;
                    Test.dFld -= Test.fFld;
                }
                i19 ^= i2;
                i2 %= (int) (i2 | 1);
                i16 *= Test.iFld;
                iArr3 = iArr3;
                i19 += (int) 2279665073922430752L;
            } while (--i17 > 0);
            i19 = (int) Test.instanceCount;
            for (i20 = 1; i20 < 7; ++i20) {
                by <<= (byte) l1;
                Test.fFld += (10 + (i20 * i20));
                Test.bFld = Test.bFld;
                fArr1[i15 + 1] *= i17;
                Test.iFld = Test.iFld1;
                i21 >>= i2;
                for (i22 = 1; i22 < 2; ++i22) {
                    Test.bFld = Test.bFld;
                }
                Test.dFld = Test.dFld;
                Test.iFld1 = i17;
                for (i24 = 1; i24 < 2; i24++) {
                    iArr[i20 + 1] <<= (int) Test.instanceCount;
                    Test.iFld1 -= i15;
                }
            }
        }
        long meth_res = i2 + by + i3 + i15 + i16 + l + i17 + l1 + i18 + i19 + i20 + i21 + i22 + i23 + i24 + i25 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr3) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -6, i1 = 32571, i26 = -113, i27 = -51510, i28 = 7, i29 = -7;
        long l2 = -6258194573577562714L, lArr2[] = new long[N];
        FuzzerUtils.init(lArr2, -13L);
        for (i = 8; i < 220; ++i) {
            i1 ^= iMeth(92, Test.byFld, Test.iFld);
            Test.instanceCount |= i1;
            Test.instanceCount += i;
            i1 *= (int) Test.instanceCount;
            Test.instanceCount += (((i * Test.fFld) + Test.iFld) - Test.iFld1);
            Test.fFld = -10317L;
            Test.iFld -= Test.iFld1;
            switch(((i % 4) * 5) + 20) {
                case 28:
                    Test.iFld1 += i;
                    Test.iFld -= i;
                    for (i26 = 1; 24 > i26; i26++) {
                        Test.iFld = i26;
                        iArrFld[i] &= i27;
                        Test.instanceCount *= i1;
                        i28 = 2;
                        while (--i28 > 0) {
                            short s = -2357;
                            i1 = Test.byFld;
                            Test.instanceCount += i28;
                            i27 = i28;
                            i27 = i28;
                            if (Test.bFld)
                                continue;
                            s += (short) (i28 + i27);
                            i1 += (((i28 * Test.iFld) + Test.fFld) - i);
                            switch((i28 % 6) + 122) {
                                case 122:
                                    iArrFld[i28] <<= Test.iFld;
                                    Test.iFld1 += (i28 ^ Test.instanceCount);
                                    try {
                                        i1 = (1835400884 % i1);
                                        i27 = (-1162005278 % Test.iFld1);
                                        iArrFld[i - 1] = (36553 / Test.iFld);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    lArr2[i28] /= (i29 | 1);
                                    iFld2 |= 10;
                                    i29 += (int) Test.instanceCount;
                                    Test.instanceCount += i28;
                                    break;
                                case 123:
                                    Test.instanceCount = 449152553490703409L;
                                    Test.fFld = lFld;
                                    iArrFld[i26] >>= i1;
                                    iFld2 += i28;
                                    lFld -= -1258623579L;
                                    if (Test.bFld) {
                                        switch(((i28 % 6) * 5) + 12) {
                                            case 19:
                                                switch(((i26 % 3) * 5) + 127) {
                                                    case 138:
                                                        i27 += (i28 * i28);
                                                        Test.fFld *= i28;
                                                        Test.fFld += ((long) i28 ^ (long) Test.instanceCount);
                                                        if (Test.bFld)
                                                            break;
                                                        s += (short) (((i28 * i26) + Test.iFld1) - Test.instanceCount);
                                                        i1 -= iFld2;
                                                        iFld2 = Test.iFld1;
                                                        Test.byFld += (byte) (((i28 * i26) + Test.fFld) - Test.fFld);
                                                        i1 -= i28;
                                                        i29 += (i28 * i28);
                                                        break;
                                                    case 142:
                                                        Test.fFld += ((long) i28 | (long) i1);
                                                        iFld2 -= i27;
                                                    case 141:
                                                        if (false)
                                                            continue;
                                                        iArrFld[i26 - 1] |= i26;
                                                        switch((i % 3) + 116) {
                                                            case 116:
                                                                s += (short) 0;
                                                                lFld -= Test.instanceCount;
                                                                Test.fFld = iFld2;
                                                                Test.iFld >>= (int) -47504L;
                                                                i27 += (i28 ^ i27);
                                                                Test.iFld1 &= (int) Test.instanceCount;
                                                                iFld2 = -15470;
                                                                i27 -= (int) Test.dFld;
                                                                Test.fFld -= Test.byFld;
                                                                i1 = (int) -26929L;
                                                                break;
                                                            case 117:
                                                                Test.instanceCount += (long) Test.fFld;
                                                                Test.iFld <<= -215;
                                                                Test.iFld -= i27;
                                                                Test.bArrFld[i28 - 1] = false;
                                                                break;
                                                            case 118:
                                                                Test.fFld = Test.fFld;
                                                                break;
                                                        }
                                                        i1 -= (int) lFld;
                                                        Test.iFld = (int) Test.dFld;
                                                        Test.fFld = i28;
                                                        iArrFld[i - 1] = (int) lFld;
                                                        Test.byFld += (byte) i26;
                                                        i29 = (int) lFld;
                                                        break;
                                                    default:
                                                        iArrFld[i28 + 1] = i1;
                                                }
                                                break;
                                            case 37:
                                                Test.bFld = false;
                                                break;
                                            case 31:
                                                iArrFld = iArrFld;
                                                break;
                                            case 13:
                                                Test.iFld1 += (int) 28.113F;
                                                break;
                                            case 18:
                                                Test.iFld = Test.iFld1;
                                                break;
                                            case 39:
                                                Test.iFld1 *= (int) l2;
                                            default:
                                                i29 += i28;
                                        }
                                    } else if (true) {
                                        Test.fFld = i29;
                                    } else {
                                        Test.iFld = i28;
                                    }
                                    break;
                                case 124:
                                    iFld2 = (int) lFld;
                                    break;
                                case 125:
                                    Test.iFld1 %= (int) (Test.iFld1 | 1);
                                    break;
                                case 126:
                                    Test.dFld *= i26;
                                    break;
                                case 127:
                                default:
                            }
                        }
                    }
                    break;
                case 33:
                    Test.instanceCount /= (iFld2 | 1);
                    break;
                case 30:
                    iFld2 -= i28;
                    break;
                case 36:
                    lFld = iFld2;
                    break;
                default:
                    Test.iFld /= (int) (Test.iFld1 | 1);
            }
        }
        FuzzerUtils.out.println("i i1 i26 = " + i + "," + i1 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("l2 lArr2 = " + l2 + "," + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.iFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld Test.dFld Test.iFld1 = " + Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.byFld iFld2 lFld = " + Test.byFld + "," + iFld2 + "," + lFld);
        FuzzerUtils.out.println("Test.bArrFld iArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$18) {
            boolean ax$23 = bFld;
            try {
                if (!bFld) {
                }
            } catch (Throwable ax$24) {
            } finally {
                bFld = ax$23;
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$10 = false;

    private static Boolean ax$18 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  sMeth ->  sMeth iMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 sMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
