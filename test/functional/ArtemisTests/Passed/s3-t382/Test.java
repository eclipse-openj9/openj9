// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -22264L;

    public volatile int iFld = 11579;

    public static float fFld = 0.72F;

    public static volatile short sFld = 29552;

    public static double dFld = 0.29225;

    public long lFld = -3089779475L;

    public static boolean bFld = true;

    public int iFld1 = -159;

    public static byte byFld = 122;

    public static int[] iArrFld = new int[N];

    public static short[] sArrFld = new short[N];

    public static long[] lArrFld = new long[N];

    public static double[] dArrFld = new double[N];

    public static byte[] byArrFld = new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 12);
        FuzzerUtils.init(Test.sArrFld, (short) -26323);
        FuzzerUtils.init(Test.lArrFld, -614704511L);
        FuzzerUtils.init(Test.dArrFld, -1.129617);
        FuzzerUtils.init(Test.byArrFld, (byte) -68);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth() {
        int i5 = 77, i6 = 18, i7 = -3, i8 = -233, i9 = -2, i10 = -61766, i11 = 13, i12 = -2;
        boolean b = true, bArr[] = new boolean[N];
        byte by = 72;
        FuzzerUtils.init(bArr, true);
        for (i5 = 2; i5 < 200; ++i5) {
            for (i7 = 1; i7 < 3; i7++) {
                bArr[(i6 >>> 1) % N] = b;
                Test.lArrFld[i5] = i8;
                b = true;
                Test.sFld = (short) -12463;
                Test.instanceCount += (i7 - i6);
                Test.iArrFld = Test.iArrFld;
                for (i9 = 1; i9 < 2; ++i9) {
                    by <<= (byte) i9;
                    Test.lArrFld[i5] ^= i6;
                    Test.lArrFld[i5] >>>= Test.instanceCount;
                    if (i8 != 0) {
                    }
                    by += (byte) (16161 + (i9 * i9));
                    i8 += i9;
                    i8 -= (int) Test.fFld;
                }
            }
            i11 = 1;
            while (++i11 < 3) {
                Test.instanceCount += i9;
                i10 += (i11 * i11);
                try {
                    i8 = (i5 % Test.iArrFld[i5 - 1]);
                    i8 = (i6 % i5);
                    i8 = (i10 % i5);
                } catch (ArithmeticException a_e) {
                }
                Test.dArrFld[i5 + 1] /= 2;
                by = (byte) 99;
                i12 = 1;
                {
                    java.io.PrintStream ax$0 = System.out;
                    java.io.PrintStream ax$1 = System.err;
                    java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$2);
                    System.setErr(ax$2);
                    {
                        boolean ax$245 = false;
                        for (int ax$244 = -1394; ax$244 < 7235; ax$244 += 5) {
                            if (!ax$245) {
                                ax$245 = true;
                                {
                                    System.setOut(ax$0);
                                    System.setErr(ax$1);
                                    do {
                                        Test.instanceCount *= i5;
                                        if (b) {
                                            i6 -= (int) 8L;
                                            Test.instanceCount -= 13880;
                                            if (b)
                                                break;
                                            Test.instanceCount ^= -15301;
                                        } else {
                                            try {
                                                i10 = (i9 / i9);
                                                i6 = (i8 / i5);
                                                i6 = (i12 % Test.iArrFld[i12 - 1]);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            i10 += i9;
                                            Test.fFld += i6;
                                            i8 *= Test.sFld;
                                        }
                                        Test.instanceCount -= (long) Test.dFld;
                                        bArr[i12] = b;
                                    } while (++i12 < 1);
                                    System.setOut(ax$2);
                                    System.setErr(ax$2);
                                }
                            }
                            try {
                                long ax$241 = 0x1234567887654321L;
                                long ax$242 = 0x66;
                                if (ax$241 != ax$242)
                                    ;
                            } catch (Throwable ax$243) {
                            } finally {
                            }
                        }
                    }
                    System.setOut(ax$0);
                    System.setErr(ax$1);
                }
                if (b)
                    break;
                Test.sFld += (short) (i11 * Test.fFld);
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + (b ? 1 : 0) + i9 + i10 + by + i11 + i12 + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth(int i3, int i4) {
        if (ax$251) {
            int ax$253 = i3;
            long ax$254 = lMeth_check_sum;
            try {
                int[] ax$252 = { 10, 20, 45, 38, 88 };
                i3 += ax$252[(int) lMeth_check_sum];
            } catch (Throwable ax$255) {
            } finally {
                i3 = ax$253;
                lMeth_check_sum = ax$254;
            }
            return;
        }
        int i13 = -9, i14 = -45742, i15 = -3, i16 = 16968, i17 = 47254, i18 = 13;
        boolean b1 = true;
        i4 *= (int) (++Test.fFld);
        Test.sArrFld[(i3 >>> 1) % N] = (short) (lMeth() + Test.dFld);
        i4 >>>= i4;
        for (i13 = 9; i13 < 210; ++i13) {
            i15 = 1;
            do {
                for (i16 = 1; i16 < 1; ++i16) {
                    Test.lArrFld[i16 - 1] = -195;
                    switch((i13 % 1) + 10) {
                        case 10:
                            i3 += (i16 - i15);
                            i3 >>>= i16;
                            try {
                                i3 = (i4 / 219);
                                i4 = (i15 / -6217);
                                Test.iArrFld[i16] = (i15 % -18);
                            } catch (ArithmeticException a_e) {
                            }
                            switch(((i15 % 2) * 5) + 50) {
                                case 60:
                                case 56:
                                    Test.fFld = i17;
                                    i17 *= (int) Test.instanceCount;
                                    if (i17 != 0) {
                                        vMeth_check_sum += i3 + i4 + i13 + i14 + i15 + i16 + i17 + (b1 ? 1 : 0) + i18;
                                        return;
                                    }
                                    Test.iArrFld[i13 + 1] = i17;
                                    Test.sFld <<= (short) i16;
                                    if (b1)
                                        break;
                                    i14 = i14;
                                    i14 += (i16 * i16);
                                    Test.instanceCount = Test.instanceCount;
                                    switch((i16 % 6) + 77) {
                                        case 77:
                                            i14 -= 88;
                                            Test.instanceCount += (((i16 * i4) + Test.instanceCount) - i3);
                                            Test.dFld *= i16;
                                            Test.iArrFld[i13] += (int) Test.instanceCount;
                                            i17 = (int) Test.instanceCount;
                                            i18 -= i16;
                                            i14 += (((i16 * i4) + i3) - Test.fFld);
                                            Test.iArrFld[i16 + 1] = (int) Test.instanceCount;
                                            Test.iArrFld[i13] *= 50037;
                                            Test.instanceCount = i17;
                                            Test.instanceCount = i14;
                                            i14 -= i13;
                                            break;
                                        case 78:
                                            Test.lArrFld[i16 + 1] >>= i16;
                                            i3 -= i16;
                                            i14 += (i16 * i16);
                                            break;
                                        case 79:
                                            if (i16 != 0) {
                                                vMeth_check_sum += i3 + i4 + i13 + i14 + i15 + i16 + i17 + (b1 ? 1 : 0) + i18;
                                                return;
                                            }
                                            break;
                                        case 80:
                                            Test.dFld *= Test.instanceCount;
                                            break;
                                        case 81:
                                            Test.dFld = -43388;
                                            break;
                                        case 82:
                                            b1 = b1;
                                            break;
                                        default:
                                            Test.dFld -= Test.instanceCount;
                                    }
                                default:
                                    if (false)
                                        continue;
                            }
                            break;
                        default:
                            if (i4 != 0) {
                                vMeth_check_sum += i3 + i4 + i13 + i14 + i15 + i16 + i17 + (b1 ? 1 : 0) + i18;
                                return;
                            }
                    }
                }
            } while (++i15 < 3);
        }
        vMeth_check_sum += i3 + i4 + i13 + i14 + i15 + i16 + i17 + (b1 ? 1 : 0) + i18;
    }

    public static int iMeth() {
        int i1 = 39032, i2 = 17644, i20 = 150, i21 = -32321, i22 = -7, i23 = -58620, i24 = 5, i25 = 14765, i26 = -203, i27 = -160;
        byte by1 = -7;
        boolean b2 = false;
        long l = -1409123586L;
        float[] fArr = new float[N];
        FuzzerUtils.init(fArr, -1.226F);
        for (i1 = 4; i1 < 83; ++i1) {
            {
                java.io.PrintStream ax$258 = System.out;
                java.io.PrintStream ax$259 = System.err;
                java.io.PrintStream ax$260 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$260);
                System.setErr(ax$260);
                try {
                    ax$251 = true;
                    for (int ax$256 = 0; ax$256 < 6168; ax$256 += 1) vMeth(1912400851, 1002967802);
                } catch (java.lang.Throwable ax$257) {
                } finally {
                    ax$251 = false;
                }
                System.setOut(ax$258);
                System.setErr(ax$259);
            }
            vMeth(41160, -11);
            Test.instanceCount >>= i1;
            for (i20 = 7; i20 > 1; i20--) {
                i22 = 2;
                do {
                    i2 = 8;
                    Test.instanceCount >>= i20;
                    i21 += (i22 + i20);
                } while (--i22 > 0);
                Test.sFld = (short) Test.fFld;
                Test.sFld = (short) i23;
                i21 -= i20;
                fArr[i20 - 1] = i20;
            }
            for (i24 = 1; i24 < 7; i24++) {
                i23 = i23;
                Test.lArrFld[i1 + 1] = (long) Test.fFld;
                by1 -= (byte) Test.fFld;
                for (i26 = 1; i26 < 2; ++i26) {
                    Test.byArrFld[i26 + 1] >>= (byte) i21;
                    i23 = i23;
                    switch((i1 % 2) + 36) {
                        case 36:
                            i21 += (((i26 * i2) + i20) - i25);
                            i21 = by1;
                            i25 += i26;
                            Test.dFld -= Test.fFld;
                            Test.fFld = Test.instanceCount;
                            if (b2)
                                break;
                            break;
                        case 37:
                            Test.sFld &= (short) i26;
                            fArr = FuzzerUtils.float1array(N, (float) 104.76F);
                            try {
                                i2 = (i1 / i23);
                                Test.iArrFld[i1] = (i20 % i25);
                                Test.iArrFld[i1 + 1] = (Test.iArrFld[i24 - 1] % i22);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.iArrFld[i24] += 26851;
                            Test.instanceCount = i2;
                            Test.instanceCount += (i26 | l);
                            i23 += (i26 * i26);
                            i27 += (i26 + i22);
                            i21 *= i21;
                            Test.fFld += i26;
                            Test.fFld *= (float) Test.dFld;
                        default:
                            b2 = b2;
                    }
                }
            }
        }
        long meth_res = i1 + i2 + i20 + i21 + i22 + i23 + i24 + i25 + by1 + i26 + i27 + (b2 ? 1 : 0) + l + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        if (ax$261) {
            try {
                int ax$262 = 2500;
                if (ax$262 != 3) {
                }
            } catch (Throwable ax$263) {
            } finally {
            }
            return;
        }
        int i = 10, i28 = 13, i29 = 44087, i30 = 141, i31 = -178, i32 = -53104, i33 = -7, i34 = -1, i35 = -13, i36 = -27600, i37 = 13, i38 = 157, i39 = -5628, i40 = -24113, iArr[][] = new int[N][N];
        double d = 47.15044;
        FuzzerUtils.init(iArr, -18653);
        Test.iArrFld[(i >>> 1) % N] *= (int) ((iFld - (d - i)) - ((120 + (-(++i))) * iMeth()));
        lFld = Test.instanceCount;
        Test.fFld += iFld;
        for (i28 = 11; i28 < 194; ++i28) {
            for (i30 = 1; i30 < 28; ++i30) {
                Test.iArrFld[i28] += i31;
                if (Test.bFld)
                    continue;
                lFld -= 57;
                Test.instanceCount = iFld;
                Test.iArrFld[i30 + 1] <<= iFld;
                i32 = 1;
                do {
                    lFld -= -90L;
                    Test.iArrFld[i30 - 1] -= 0;
                    iArr = iArr;
                } while (++i32 < 2);
            }
            iFld = Test.sFld;
            for (i33 = 1; i33 < 28; i33++) {
                if (Test.bFld)
                    continue;
                lFld += (((i33 * i32) + Test.instanceCount) - i33);
                Test.fFld -= i32;
                i >>= iFld1;
                Test.instanceCount += (i33 * i29);
                Test.lArrFld[i33] = 1;
            }
            for (i35 = 1; i35 < 28; i35++) {
                i34 = Test.byFld;
                i36 = (int) Test.dFld;
                i31 += (((i35 * Test.instanceCount) + i31) - i32);
                if (false)
                    break;
                Test.fFld += i35;
                lFld = iFld1;
                i36 += i35;
                Test.iArrFld = iArr[i35 + 1];
                Test.fFld += -2.118F;
                i36 += i30;
                i34 <<= (int) Test.instanceCount;
                for (i37 = i28; i37 < 2; i37++) {
                    i29 *= -14;
                    i += i30;
                    iArr = iArr;
                    lFld <<= i28;
                    i34 += (((i37 * i29) + i36) - Test.instanceCount);
                    i34 -= i36;
                    Test.fFld += (((i37 * i30) + i) - i32);
                    i31 >>= i35;
                    switch(((i34 >>> 1) % 1) + 38) {
                        case 38:
                            i29 -= iFld;
                            i38 += (((i37 * i29) + i35) - Test.sFld);
                            iFld1 = (int) Test.fFld;
                            Test.lArrFld[i37 - 1] += i33;
                            Test.instanceCount += iFld1;
                            i31 -= i31;
                            break;
                        default:
                            Test.instanceCount += -85;
                            Test.fFld -= 2;
                    }
                    i29 *= i32;
                    i38 |= i31;
                    Test.fFld += (((i37 * i) + Test.byFld) - lFld);
                }
                for (i39 = 1; i39 < 2; ++i39) {
                    Test.fFld = Test.fFld;
                    i40 -= i39;
                    i40 = i35;
                    i36 = (int) Test.instanceCount;
                    i36 += 4580;
                    i34 = Test.byFld;
                    i38 <<= -4;
                    i31 = (int) -8L;
                    switch((i35 % 1) + 66) {
                        case 66:
                            switch((i39 % 3) + 119) {
                                case 119:
                                    Test.iArrFld[i28 + 1] *= -6;
                                    if (false)
                                        break;
                                    Test.sArrFld[i39 - 1] *= (short) -13;
                                    lFld = lFld;
                                    i29 += i39;
                                    Test.bFld = true;
                                    break;
                                case 120:
                                    i = -59;
                                    Test.fFld += i28;
                                    i31 -= i38;
                                    break;
                                case 121:
                                    i36 *= -55708;
                                    break;
                            }
                            break;
                        default:
                            Test.iArrFld[i35 - 1] /= (int) ((long) (d) | 1);
                    }
                }
            }
        }
        FuzzerUtils.out.println("i d i28 = " + i + "," + Double.doubleToLongBits(d) + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("i38 i39 i40 = " + i38 + "," + i39 + "," + i40);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld Test.dFld lFld = " + Test.sFld + "," + Double.doubleToLongBits(Test.dFld) + "," + lFld);
        FuzzerUtils.out.println("Test.bFld iFld1 Test.byFld = " + (Test.bFld ? 1 : 0) + "," + iFld1 + "," + Test.byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.sArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.dArrFld Test.byArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            {
                java.io.PrintStream ax$246 = System.out;
                java.io.PrintStream ax$247 = System.err;
                java.io.PrintStream ax$248 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$248);
                System.setErr(ax$248);
                {
                    boolean ax$250 = false;
                    for (int ax$249 = -2501; ax$249 < 5378; ax$249 += 4) {
                        if (!ax$250) {
                            ax$250 = true;
                            {
                                System.setOut(ax$246);
                                System.setErr(ax$247);
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                                System.setOut(ax$248);
                                System.setErr(ax$248);
                            }
                        }
                    }
                }
                System.setOut(ax$246);
                System.setErr(ax$247);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$251 = false;

    private static Boolean ax$261 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
