// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -14L;

    public static short sFld = 16383;

    public static volatile float fFld = -72.752F;

    public static int iFld = 205;

    public static int[] iArrFld = new int[N];

    public long[] lArrFld = new long[N];

    public static byte[] byArrFld = new byte[N];

    public double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -11);
        FuzzerUtils.init(Test.byArrFld, (byte) -33);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i7) {
        byte by = -69;
        int i8 = 59556, i9 = 52439, i10 = 58007, i11 = -3, i12 = 6;
        float f = -39.126F, f1 = 1.613F;
        boolean b = true;
        double d = -60.61487;
        i7 >>>= by;
        i7 += -7;
        for (i8 = 6; i8 < 224; ++i8) {
            f = 1;
            while (++f < 3) {
                i7 = (int) Test.instanceCount;
                switch((i8 % 9) + 85) {
                    case 85:
                        i10 = 1;
                        while (--i10 > 0) {
                            by = (byte) i9;
                            i7 = i8;
                            i7 *= i10;
                            b = b;
                            d *= i10;
                            Test.iArrFld[i8] -= i10;
                            try {
                                Test.iArrFld[i10 - 1] = (Test.iArrFld[i10] / -122);
                                i9 = (i8 % i8);
                                i7 = (Test.iArrFld[i8 + 1] / i7);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.instanceCount = i7;
                            i9 += (((i10 * i9) + i9) - f);
                            i9 = (int) Test.instanceCount;
                            d += i9;
                            Test.iArrFld[(int) (f - 1)] = i9;
                            i9 = i9;
                            Test.iArrFld[i10 + 1] >>= i10;
                            i7 += i10;
                        }
                        break;
                    case 86:
                        d -= -2155221696449509005L;
                        i7 += (int) (f * f);
                        switch(((i8 % 5) * 5) + 92) {
                            case 113:
                                f1 += f;
                                try {
                                    i7 = (i10 % i8);
                                    i9 = (-2001805850 / i7);
                                    Test.iArrFld[i8 + 1] = (i10 % -11421);
                                } catch (ArithmeticException a_e) {
                                }
                                i9 *= (int) d;
                                Test.iArrFld[i8 - 1] += i10;
                                for (i11 = i8; i11 < 1; i11++) {
                                    try {
                                        i7 = (i10 / i10);
                                        Test.iArrFld[i8 - 1] = (Test.iArrFld[i8] % 190);
                                        i7 = (30 % i7);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    Test.sFld = (short) i8;
                                    i9 = i10;
                                    i12 = (int) d;
                                    Test.iArrFld = Test.iArrFld;
                                    f1 *= i9;
                                    i9 = (int) Test.instanceCount;
                                }
                                break;
                            case 116:
                                f1 += f;
                                break;
                            case 104:
                            case 117:
                                if (i11 != 0) {
                                }
                                break;
                            case 101:
                                i7 += (int) (f - i7);
                                break;
                            default:
                                if (true)
                                    break;
                        }
                        break;
                    case 87:
                        by -= (byte) f;
                    case 88:
                        i12 += (int) (f * f);
                    case 89:
                        i7 += (int) Test.instanceCount;
                        break;
                    case 90:
                        i7 *= (int) Test.instanceCount;
                        break;
                    case 91:
                        i12 = by;
                    case 92:
                        i12 = i8;
                    case 93:
                        Test.instanceCount += (long) f;
                        break;
                }
            }
        }
        long meth_res = i7 + by + i8 + i9 + Float.floatToIntBits(f) + i10 + (b ? 1 : 0) + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i11 + i12;
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(int i6) {
        int i13 = 10875, i14 = -8201, i15 = 189, i16 = 11, i17 = -22012, i18 = 3, i19 = 186, i20 = -178, i21 = 8, i22 = 154, i23 = -134, i24 = 9, i25 = -8500;
        byte by1 = 27;
        boolean b1 = true, bArr[] = new boolean[N];
        double d2 = 2.12192, dArr[] = new double[N];
        long[] lArr = new long[N];
        FuzzerUtils.init(dArr, 122.113906);
        FuzzerUtils.init(lArr, -1170255538L);
        FuzzerUtils.init(bArr, false);
        dArr = (dArr = dArr);
        Test.instanceCount <<= iMeth1(i6);
        for (i13 = 7; i13 < 251; ++i13) {
            for (i15 = 1; i15 < 3; ++i15) {
                i16 = i14;
                Test.instanceCount *= i15;
                for (i17 = 1; i17 < 2; i17 += 2) {
                    Test.sFld = (short) i14;
                }
                if (i6 != 0) {
                }
                i14 *= (int) Test.instanceCount;
                i14 += i13;
            }
            try {
                Test.iArrFld[i13] = (i6 % 1905444895);
                Test.iArrFld[i13 - 1] = (i13 / -232);
                Test.iArrFld[i13 + 1] = (i19 / i17);
            } catch (ArithmeticException a_e) {
            }
            for (i20 = 1; i20 < 3; i20 += 2) {
                if (b1) {
                    by1 -= (byte) Test.instanceCount;
                    Test.instanceCount = i6;
                    try {
                        Test.iArrFld[(-64453 >>> 1) % N] = (Test.iArrFld[i13 - 1] % i21);
                        i19 = (i6 % -30398);
                        i21 = (i21 / 256);
                    } catch (ArithmeticException a_e) {
                    }
                    Test.fFld = Test.instanceCount;
                    for (i22 = 1; i22 < 3; ++i22) {
                        double d1 = 2.78331;
                        Test.instanceCount >>= Test.instanceCount;
                        lArr[i13 - 1] >>= -173L;
                        i16 = (int) d1;
                        Test.iArrFld[i13] = (int) Test.instanceCount;
                        i23 = i17;
                        i16 = i23;
                        Test.fFld = Test.instanceCount;
                        i16 -= i14;
                    }
                    Test.instanceCount += (long) Test.fFld;
                    Test.iArrFld[i13] = i22;
                    bArr[i13] = b1;
                    if (b1) {
                        for (i24 = 1; 3 > i24; ++i24) {
                            i14 = (int) d2;
                            Test.iArrFld[i20 - 1] *= i17;
                            i25 = i14;
                            Test.instanceCount = i13;
                            i14 += (int) 46.121367;
                        }
                    } else {
                        i23 = Test.sFld;
                    }
                } else {
                    i16 *= i21;
                }
            }
        }
        long meth_res = i6 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + by1 + i22 + i23 + (b1 ? 1 : 0) + i24 + i25 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth() {
        int i5 = 203, i26 = 61527, i27 = 79, i28 = 9324, i29 = 228, i30 = 3, i31 = -63829, i32 = 2400, i33 = 9;
        long l = 250L, lArr1[] = new long[N];
        float f2 = -126.558F, fArr[] = new float[N];
        boolean b2 = true;
        double d3 = 2.42731, dArr1[] = new double[N];
        byte by2 = -101;
        FuzzerUtils.init(fArr, 0.289F);
        FuzzerUtils.init(dArr1, 0.114979);
        FuzzerUtils.init(lArr1, 2630733926L);
        i5 >>= iMeth(i5);
        for (i26 = 5; 127 > i26; ++i26) {
            for (l = 1; l < 5; l++) {
                Test.iArrFld[i26] <<= 139;
            }
            f2 = 1;
            do {
                i29 = 1;
                while (++i29 < 1) {
                    i5 -= (int) Test.instanceCount;
                    Test.instanceCount = i26;
                    fArr[i29] = i28;
                    i5 += i29;
                    i27 -= (int) l;
                    Test.iArrFld[i29 + 1] = i5;
                    i27 += i5;
                }
                b2 = b2;
                b2 = b2;
                for (i30 = 1; i30 < 1; ++i30) {
                    i5 += (i30 * i31);
                }
                i31 += 63904;
                i28 = i27;
                i31 = i5;
                i28 = (int) d3;
                for (i32 = 1; i32 < 1; ++i32) {
                    Test.fFld -= 103;
                    Test.iArrFld[i32] += i26;
                    i27 *= (int) l;
                    i28 += (int) l;
                    i27 >>= i26;
                    fArr[(int) (f2 + 1)] += Test.instanceCount;
                    i28 *= i32;
                    i5 <<= (int) Test.instanceCount;
                    i31 = -5;
                    i31 += i32;
                    dArr1[i32 + 1] *= by2;
                    lArr1[i26 + 1] = l;
                }
                Test.instanceCount = Test.instanceCount;
            } while (++f2 < 5);
        }
        Test.instanceCount &= i26;
        Test.iArrFld[(i32 >>> 1) % N] += -8;
        vMeth_check_sum += i5 + i26 + i27 + l + i28 + Float.floatToIntBits(f2) + i29 + (b2 ? 1 : 0) + i30 + i31 + Double.doubleToLongBits(d3) + i32 + i33 + by2 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {
        int i = -33067, i1 = -241, i2 = -27, i3 = 12, i4 = 61998, i34 = -86, i35 = 37000, i36 = -64635, i37 = -64768, i38 = 52665, i39 = -57817, iArr[][] = new int[N][N];
        boolean b3 = true;
        byte by3 = -20;
        double d4 = 97.23963;
        short[] sArr = new short[N];
        FuzzerUtils.init(iArr, -7);
        FuzzerUtils.init(sArr, (short) -21548);
        Test.iArrFld[(i >>> 1) % N] = (int) (Test.instanceCount = (Test.iArrFld[(-50301 >>> 1) % N]--));
        for (i1 = 5; i1 < 92; i1++) {
            Test.sFld <<= (short) (--Test.instanceCount);
            for (i3 = i1; 58 > i3; i3++) {
                i2 <<= (int) (((i4 - Test.instanceCount) * (--Test.iArrFld[i1])) - (Math.abs(i4) * (5 + (++Test.instanceCount))));
                i2 -= (int) Math.max((long) (41.237F * Test.instanceCount), Integer.reverseBytes(i1) & Test.instanceCount);
                vMeth();
                for (i34 = 1; i34 < 1; i34++) {
                    i4 >>= i35;
                    switch(((i3 % 1) * 5) + 23) {
                        case 26:
                            lArrFld[i1 - 1] += i;
                            i2 = i34;
                            i2 -= i35;
                            Test.fFld += (22801 + (i34 * i34));
                            if (b3)
                                break;
                            i4 = -56;
                            i2 += i;
                            i4 = i;
                            Test.instanceCount += (i34 * i34);
                            iArr = iArr;
                            Test.byArrFld[i3 + 1] >>= (byte) Test.instanceCount;
                            Test.instanceCount = Test.instanceCount;
                            by3 += (byte) (i34 ^ (long) Test.fFld);
                            i4 |= 8;
                            break;
                    }
                    try {
                        i4 = (-51812 % i34);
                        i35 = (i35 % Test.iArrFld[i1]);
                        i2 = (i1 % i2);
                    } catch (ArithmeticException a_e) {
                    }
                    i2 -= i35;
                    i35 = i;
                    Test.instanceCount -= 7615968512096529326L;
                    i2 *= by3;
                }
                i35 -= i;
                i4 += (((i3 * Test.instanceCount) + Test.iFld) - Test.fFld);
                for (i36 = 1; i36 < 1; ++i36) {
                    i37 += (i36 * i34);
                    i2 *= 56103;
                    Test.iFld = Test.iFld;
                    i2 += i34;
                }
                Test.instanceCount -= Test.instanceCount;
                if (b3) {
                    switch((((i35 >>> 1) % 10) * 5) + 76) {
                        case 103:
                            lArrFld[i1] ^= i4;
                            Test.instanceCount = (long) d4;
                            for (i38 = i3; i38 < 1; i38++) {
                                Test.fFld += (i38 - Test.fFld);
                                if (b3)
                                    continue;
                                Test.instanceCount -= by3;
                                switch((((i39 >>> 1) % 2) * 5) + 42) {
                                    case 48:
                                        b3 = b3;
                                        break;
                                    case 50:
                                }
                                i39 >>= i39;
                                Test.fFld += (((i38 * i34) + i4) - i);
                                i37 += (((i38 * Test.fFld) + Test.instanceCount) - i38);
                                Test.iArrFld[i38] /= (int) (Test.instanceCount | 1);
                                switch((i38 % 2) + 120) {
                                    case 120:
                                        i39 -= i34;
                                        i2 <<= 4;
                                        i37 -= (int) d4;
                                        i4 += (i38 * Test.fFld);
                                        i = -16449;
                                        Test.fFld = (float) d4;
                                        Test.fFld -= i;
                                        i37 = i36;
                                        Test.instanceCount >>>= Test.instanceCount;
                                        i4 *= i39;
                                        i >>= (int) Test.instanceCount;
                                        break;
                                    case 121:
                                        switch(((i1 % 7) * 5) + 72) {
                                            case 76:
                                                Test.instanceCount = -121;
                                                switch((i38 % 2) + 1) {
                                                    case 1:
                                                        dArrFld[i38 + 1] = i35;
                                                        Test.iArrFld[i1 - 1] *= i35;
                                                        Test.instanceCount += i3;
                                                        b3 = b3;
                                                        Test.fFld += (i38 * i35);
                                                        i35 *= (int) Test.instanceCount;
                                                        if (b3) {
                                                            iArr[i3][i38 - 1] *= Test.sFld;
                                                            Test.instanceCount <<= Test.instanceCount;
                                                        } else if (b3) {
                                                            dArrFld[i1] = i3;
                                                        } else {
                                                            Test.iArrFld = Test.iArrFld;
                                                        }
                                                        break;
                                                    case 2:
                                                        Test.instanceCount *= i4;
                                                        break;
                                                    default:
                                                        i39 >>= i35;
                                                }
                                                break;
                                            case 107:
                                                by3 -= (byte) i4;
                                                break;
                                            case 89:
                                                i39 <<= (int) Test.instanceCount;
                                                break;
                                            case 82:
                                                sArr[i1] *= (short) d4;
                                                break;
                                            case 75:
                                                by3 -= (byte) Test.fFld;
                                            case 106:
                                            case 77:
                                                by3 >>= (byte) Test.sFld;
                                                break;
                                        }
                                        break;
                                    default:
                                        i2 -= i39;
                                }
                            }
                            break;
                        case 112:
                            Test.iFld = (int) Test.instanceCount;
                            break;
                        case 98:
                            iArr[i3 - 1][i1] = i34;
                            break;
                        case 104:
                            i39 = 5;
                            break;
                        case 102:
                            try {
                                i35 = (-233 % i2);
                                i2 = (iArr[i1 + 1][i3] / Test.iFld);
                                i39 = (i2 / i);
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        case 124:
                            i39 /= (int) -237L;
                            break;
                        case 107:
                            i += (i3 - Test.instanceCount);
                            break;
                        case 99:
                            Test.instanceCount = (long) Test.fFld;
                            break;
                        case 82:
                            i2 += (i3 * i3);
                            break;
                        case 84:
                            Test.iArrFld[i3] -= (int) 1.89F;
                            break;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i34 = " + i3 + "," + i4 + "," + i34);
        FuzzerUtils.out.println("i35 b3 by3 = " + i35 + "," + (b3 ? 1 : 0) + "," + by3);
        FuzzerUtils.out.println("i36 i37 d4 = " + i36 + "," + i37 + "," + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("i38 i39 iArr = " + i38 + "," + i39 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld Test.iArrFld lArrFld = " + Test.iFld + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test.byArrFld dArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
