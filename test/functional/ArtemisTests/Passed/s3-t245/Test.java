// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 933466287L;

    public static boolean bFld = false;

    public short sFld = 2160;

    public static double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.85442);
    }

    public static long vSmallMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth(int i3) {
        if (ax$0) {
            try {
                boolean ax$1 = false;
                if (ax$1)
                    ;
            } catch (Throwable ax$2) {
            } finally {
            }
            return 8502059874014728214L;
        }
        int i4 = -6, i5 = -132, i6 = -54038, i7 = -24643, i8 = -70, i9 = -24, i10 = -61681, i11 = -8, i12 = 207, i13 = -9, iArr1[] = new int[N];
        float f = 0.144F, f1 = 0.980F, fArr[] = new float[N];
        byte by = 100;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr1, 63073);
        FuzzerUtils.init(lArr1, 3780339226L);
        FuzzerUtils.init(fArr, -13.848F);
        i4 = 1;
        while (++i4 < 223) {
            iArr1[i4 - 1] = (int) Test.instanceCount;
            for (i5 = 1; i5 < 3; i5++) {
                f = i3;
                iArr1[i4 + 1] -= i6;
                f1 += (((i5 * i5) + i3) - Test.instanceCount);
                f = by;
                i7 = 1;
                while (++i7 < 2) {
                    Test.instanceCount *= -9919L;
                    Test.instanceCount += (((i7 * Test.instanceCount) + i5) - i3);
                    if (i4 != 0) {
                    }
                }
                by >>>= (byte) i3;
                f += ((long) i5 | (long) i8);
            }
            iArr1[i4 + 1] = i5;
            i6 = -4;
            i6 -= (int) Test.instanceCount;
            if (true) {
                i8 *= -7;
                if (Test.bFld)
                    continue;
                if (Test.bFld)
                    continue;
                i8 += (i4 * i4);
                for (i9 = 3; i9 > 1; i9--) {
                    Test.instanceCount = Test.instanceCount;
                    Test.instanceCount += (i9 + Test.instanceCount);
                    i3 = (int) -82.998F;
                    i3 = i4;
                    i8 += i5;
                    iArr1 = iArr1;
                    Test.instanceCount *= i11;
                    for (i12 = 1; i12 < 2; i12++) {
                        f -= Test.instanceCount;
                        lArr1[i12 + 1] = 48840;
                        Test.bFld = Test.bFld;
                        try {
                            i10 = (i12 % -57043);
                            i8 = (i8 / i10);
                            i6 = (iArr1[i12 + 1] / i8);
                        } catch (ArithmeticException a_e) {
                        }
                        if (Test.bFld)
                            break;
                        Test.instanceCount -= Test.instanceCount;
                    }
                    fArr[i9 + 1] += i12;
                }
            } else if (Test.bFld) {
                i8 <<= (int) Test.instanceCount;
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + by + i7 + i8 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static int iMeth(long l) {
        int i1 = -56478, i2 = -13, i14 = -48248, i15 = 9, i17 = -13, i18 = -130, i19 = 10, iArr[] = new int[N], iArr2[] = new int[N];
        double d = 0.993;
        byte by1 = -105;
        long l1 = -61613L;
        float f2 = 50.45F, fArr1[] = new float[N];
        FuzzerUtils.init(iArr, -116);
        FuzzerUtils.init(fArr1, -1.487F);
        FuzzerUtils.init(iArr2, -156);
        for (i1 = 7; i1 < 147; i1++) {
            d += (Long.reverseBytes(i1 - i1) + ((i1 - i2) + i1));
            iArr[(-45 >>> 1) % N] /= (int) (lMeth(5227) | 1);
            i2 -= (int) -1.71F;
            i2 = i2;
            by1 += (byte) (-8 + (i1 * i1));
            i2 += i2;
            l &= Test.instanceCount;
            if (Test.bFld)
                break;
            d = l1;
            i2 = i1;
        }
        iArr[(i1 >>> 1) % N] = (int) d;
        i2 = i1;
        i2 -= i2;
        iArr[(i1 >>> 1) % N] -= i1;
        i2 -= i2;
        i2 >>>= (int) -67L;
        for (i14 = 2; i14 < 221; i14++) {
            switch(((i14 >>> 1) % 1) + 63) {
                case 63:
                    i2 -= i15;
                    if (Test.bFld) {
                        Test.dArrFld[i14] = -4;
                        i2 -= 11742;
                        i2 += i1;
                        i2 = 216;
                        for (i17 = 1; i17 < 3; ++i17) {
                            i2 |= i2;
                            i2 = i14;
                            switch((i14 % 5) + 63) {
                                case 63:
                                    i18 += by1;
                                    i2 += i17;
                                    if (Test.bFld)
                                        break;
                                    Test.instanceCount += (i17 - i18);
                                    d -= f2;
                                    l1 -= i19;
                                    by1 = (byte) i1;
                                    iArr[i17 + 1] *= (int) f2;
                                    break;
                                case 64:
                                    i18 = i19;
                                    break;
                                case 65:
                                    i18 ^= i19;
                                    break;
                                case 66:
                                    i19 += (int) 7L;
                                    break;
                                case 67:
                                    i18 += (int) d;
                            }
                        }
                    } else if (Test.bFld) {
                        i15 += i2;
                    } else if (Test.bFld) {
                        l1 += i14;
                    } else {
                        fArr1[i14 + 1] += i14;
                    }
                default:
                    iArr2[i14] = by1;
            }
        }
        long meth_res = l + i1 + i2 + Double.doubleToLongBits(d) + by1 + l1 + i14 + i15 + i17 + i18 + Float.floatToIntBits(f2) + i19 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vSmallMeth() {
        if (ax$8) {
            try {
                int ax$9 = 26295;
                if (ax$9 == 5) {
                    int ax$10 = 2;
                    ax$9 += ax$10;
                }
            } catch (Throwable ax$11) {
            } finally {
            }
            return;
        }
        int i = 47960;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, 231L);
        lArr[(i >>> 1) % N] >>>= iMeth(Test.instanceCount);
        i <<= i;
        vSmallMeth_check_sum += i + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {
        int i20 = 54212, i21 = 4303, i22 = 112, i23 = 77, i24 = -13252, i25 = 13, i26 = 45, i27 = 5, i28 = -49, i29 = -105, i30 = -212, i31 = 60, i32 = 14, iArr3[] = new int[N];
        double d1 = -2.95321, d2 = 1.57495;
        float f3 = 2.305F, f4 = -7.880F;
        short[] sArr = new short[N];
        long[][] lArr2 = new long[N][N];
        FuzzerUtils.init(iArr3, -10);
        FuzzerUtils.init(sArr, (short) 1775);
        FuzzerUtils.init(lArr2, 3030798795L);
        for (int smallinvoc = 0; smallinvoc < 804; smallinvoc++) vSmallMeth();
        i20 += sFld;
        for (d1 = 6; 198 > d1; d1++) {
            i21 = -1233;
        }
        for (i22 = 2; 212 > i22; i22++) {
            byte by2 = 32;
            by2 = (byte) f3;
            f3 += f3;
            i21 -= (int) Test.instanceCount;
            i24 = 1;
            do {
                Test.instanceCount += (((i24 * i24) + sFld) - i22);
                for (i25 = 1; 1 > i25; i25++) {
                    i20 += (((i25 * Test.instanceCount) + i20) - i21);
                    switch(((i24 % 2) * 5) + 26) {
                        case 29:
                            i26 = 31937;
                            i21 *= (int) Test.instanceCount;
                            i20 += i24;
                            try {
                                i23 = (iArr3[i24 - 1] / 143);
                                i23 = (i26 / -243);
                                i20 = (-1811866644 % i25);
                            } catch (ArithmeticException a_e) {
                            }
                            sArr[i25 + 1] = (short) Test.instanceCount;
                            d2 = -46473L;
                            d2 += 63786;
                            i23 = i24;
                            break;
                        case 35:
                            if (Test.bFld)
                                break;
                            f3 += i25;
                            i20 += i25;
                            i26 += i24;
                            f3 -= f3;
                            i23 *= 3;
                            Test.instanceCount >>= sFld;
                            i23 -= i25;
                            i20 &= i26;
                            break;
                        default:
                            d2 -= Test.instanceCount;
                            by2 += (byte) (((i25 * i20) + i20) - i20);
                            i26 ^= sFld;
                            f3 += (65501 + (i25 * i25));
                            iArr3[i24] %= (int) ((long) (d1) | 1);
                    }
                    i21 = i22;
                }
                iArr3[i22 - 1] += (int) Test.instanceCount;
                try {
                    i23 = (42459 % i22);
                    i20 = (i20 / i26);
                    i23 = (i26 / iArr3[i24]);
                } catch (ArithmeticException a_e) {
                }
                i20 <<= by2;
                Test.instanceCount = -1;
                by2 <<= (byte) -7074030392418409345L;
                for (i27 = 1; 1 > i27; i27++) {
                    Test.instanceCount += 188L;
                    Test.instanceCount = i26;
                    Test.instanceCount >>>= i24;
                }
                i26 <<= i23;
                Test.instanceCount = (long) f3;
            } while (++i24 < 24);
            i29 = 1;
            while (++i29 < 24) {
                iArr3[i29] = -7;
                iArr3 = iArr3;
                lArr2[i22 + 1] = lArr2[i29];
                iArr3 = iArr3;
                Test.instanceCount >>= i27;
                Test.instanceCount += (i29 - sFld);
                f3 *= i22;
                i26 += (i29 * i24);
                lArr2[i29 - 1][i22 + 1] -= -28L;
                f3 += (4 + (i29 * i29));
                i21 += (((i29 * i23) + by2) - i22);
            }
            for (i30 = 24; 1 < i30; i30--) {
                i28 ^= i22;
                i32 = 2;
                while ((i32 -= 2) > 0) {
                    Test.instanceCount += (i32 - i27);
                    f3 = Test.instanceCount;
                    Test.bFld = Test.bFld;
                    switch((i22 % 5) + 47) {
                        case 47:
                            try {
                                i26 = (-628972358 / iArr3[i22]);
                                i21 = (i32 / 3);
                                i28 = (i31 / 9302);
                            } catch (ArithmeticException a_e) {
                            }
                            iArr3[i32 + 1] <<= (int) Test.instanceCount;
                            i28 -= 170;
                            switch(((i22 % 4) * 5) + 46) {
                                case 52:
                                    lArr2[i32 + 1][i32 + 1] = i23;
                                    i31 = i27;
                                    by2 += (byte) i31;
                                    i21 -= i31;
                                    i31 += i32;
                                case 51:
                                    i28 <<= i22;
                                case 60:
                                    f4 = Test.instanceCount;
                                case 64:
                                    d2 = i26;
                                    break;
                                default:
                                    Test.instanceCount += (((i32 * i29) + f4) - i24);
                            }
                        case 48:
                            i23 /= 49672;
                            break;
                        case 49:
                            i20 = i27;
                            break;
                        case 50:
                        case 51:
                            i20 = i28;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i20 d1 i21 = " + i20 + "," + Double.doubleToLongBits(d1) + "," + i21);
        FuzzerUtils.out.println("i22 i23 f3 = " + i22 + "," + i23 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("d2 i27 i28 = " + Double.doubleToLongBits(d2) + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 f4 iArr3 = " + i32 + "," + Float.floatToIntBits(f4) + "," + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("sArr lArr2 = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.bFld sFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0) + "," + sFld);
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$8 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
// DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
// DEBUG  lMeth ->  lMeth iMeth vSmallMeth mainTest Test
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
