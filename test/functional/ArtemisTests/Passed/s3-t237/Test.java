// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -247L;

    public static short sFld = -12690;

    public static boolean bFld = true;

    public static float fFld = -1.269F;

    public static int iFld = 40551;

    public static byte byFld = 105;

    public static int iFld1 = 1;

    public static float fFld1 = -85.47F;

    public static int iFld2 = -4;

    public static int[] iArrFld = new int[N];

    public static double[] dArrFld = new double[N];

    public static long[] lArrFld = new long[N];

    public static boolean[] bArrFld = new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 26134);
        FuzzerUtils.init(Test.dArrFld, 106.67115);
        FuzzerUtils.init(Test.lArrFld, -250L);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {
        int i12 = -24057, i13 = 192, i14 = 1, i15 = -52232, i16 = -9, i17 = 3876, i18 = -39725, i19 = 12815, i20 = -52375, i21 = -38145;
        double d1 = 1.128422;
        byte by1 = 30, byArr[] = new byte[N];
        FuzzerUtils.init(byArr, (byte) 104);
        byArr[(4 >>> 1) % N] = (byte) Test.sFld;
        for (i12 = 1; i12 < 249; i12 += 2) {
            Test.iArrFld[i12] = (int) d1;
            Test.bFld = Test.bFld;
            i13 += (i12 * i12);
            i13 = i13;
            d1 -= i13;
        }
        for (i14 = 4; i14 < 196; ++i14) {
            Test.instanceCount -= Test.sFld;
            i13 += (((i14 * i14) + i12) - i15);
            i13 *= i15;
            Test.dArrFld[i14] -= i12;
            if (false) {
                for (i16 = 3; i16 > 1; i16--) {
                    i13 += i16;
                    i13 *= i14;
                    if (Test.bFld) {
                        Test.iArrFld[i16 - 1] -= (int) d1;
                        switch((i16 % 5) + 119) {
                            case 119:
                                Test.instanceCount = Test.instanceCount;
                                i18 = 1;
                                do {
                                    Test.lArrFld[i16] = -2575476580L;
                                    i13 = (int) Test.fFld;
                                    Test.instanceCount = i18;
                                    if (Test.bFld)
                                        continue;
                                    Test.instanceCount += i16;
                                } while (++i18 < 2);
                                Test.instanceCount = i16;
                                for (i19 = 1; i19 < 2; ++i19) {
                                    Test.fFld -= 25882L;
                                    byArr[i14] *= (byte) -8519700988681795614L;
                                    i21 <<= (int) Test.instanceCount;
                                    i15 += (i19 * i19);
                                    Test.iArrFld[i14 - 1] += (int) Test.fFld;
                                    if (i15 != 0) {
                                    }
                                }
                                Test.fFld += (i16 * i16);
                                i17 *= i17;
                                by1 += (byte) i16;
                                break;
                            case 120:
                                i21 += (int) Test.instanceCount;
                            case 121:
                                Test.instanceCount >>= i13;
                            case 122:
                                Test.instanceCount += i16;
                            case 123:
                                Test.dArrFld = FuzzerUtils.double1array(N, (double) 123.38704);
                                break;
                            default:
                                i17 += (196 + (i16 * i16));
                        }
                    } else if (Test.bFld) {
                        Test.iArrFld[i16] += i16;
                    } else if (Test.bFld) {
                        i21 = (int) Test.instanceCount;
                    } else {
                        Test.instanceCount <<= i13;
                    }
                }
            } else {
                if (Test.bFld)
                    continue;
            }
        }
        long meth_res = i12 + i13 + Double.doubleToLongBits(d1) + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + by1 + FuzzerUtils.checkSum(byArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(int i7) {
        int i8 = -56100, i9 = 65210, i10 = -218, i11 = 659, i22 = 11, i23 = -89, i24 = -14, i25 = -2, i26 = -10, i27 = -59537, i28 = -11, i29 = 29545, i30 = 8157, i31 = -35336, i32 = 36197, i33 = -187, i34 = 91;
        byte by = -127, byArr1[] = new byte[N];
        float f = 0.322F, fArr[] = new float[N];
        double d2 = -1.35193;
        FuzzerUtils.init(byArr1, (byte) -13);
        FuzzerUtils.init(fArr, -2.979F);
        for (i8 = 1; i8 < 244; ++i8) {
            i9 = (int) ((-(Test.instanceCount *= -175)) + ((-165 * (Test.sFld - -78)) - Integer.reverseBytes(i7)));
            Test.bFld = Test.bFld;
            i9 -= (int) Test.instanceCount;
            for (i10 = 3; i10 > 1; i10 -= 2) {
                Test.instanceCount += (((i10 * by) + i8) - Test.instanceCount);
                f += iMeth1();
                if (i11 != 0) {
                }
                i9 -= (int) f;
            }
            Test.iArrFld[i8 - 1] -= Test.sFld;
            for (i22 = 1; i22 < 3; i22++) {
                for (i24 = 1; i24 < 2; i24++) {
                    Test.sFld += (short) (i24 * i24);
                }
            }
            by = (byte) Test.instanceCount;
            Test.fFld += (i8 * i11);
            i11 += i23;
            Test.instanceCount <<= i26;
            Test.instanceCount = i25;
            Test.sFld -= (short) 22;
            for (i27 = 1; i27 < 3; ++i27) {
                try {
                    i23 = (i22 % i23);
                    i7 = (i26 / 1601359898);
                    i28 = (i23 / -18);
                } catch (ArithmeticException a_e) {
                }
                byArr1[i27 + 1] += (byte) 1.811F;
                i9 = 21782;
                f = Test.instanceCount;
                Test.instanceCount = by;
                Test.fFld += (60973 + (i27 * i27));
                i11 += i27;
                Test.instanceCount = i11;
            }
        }
        for (i29 = 87; i29 > 3; i29--) {
            d2 += i30;
            for (i31 = i29; i31 < 6; ++i31) {
                Test.sFld = (short) 225;
                Test.bArrFld[i31 + 1] = Test.bFld;
            }
            Test.iArrFld[i29 + 1] = i9;
            for (i33 = 1; i33 < 6; i33 += 2) {
                fArr[i33] -= Test.instanceCount;
                i26 >>>= i33;
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + by + Float.floatToIntBits(f) + i22 + i23 + i24 + i25 + i26 + i27 + i28 + i29 + i30 + Double.doubleToLongBits(d2) + i31 + i32 + i33 + i34 + FuzzerUtils.checkSum(byArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(int i5, int i6, long l) {
        if (ax$15) {
            int ax$17 = i5;
            try {
                for (int ax$16 = 0; ax$16 < i5; ++ax$16) {
                }
            } catch (Throwable ax$18) {
            } finally {
                i5 = ax$17;
            }
            return;
        }
        short s1 = -4730;
        double d = -3.62995;
        int i35 = 4837, i36 = 196, i37 = -5, i38 = -4, i39 = 12, i40 = -127;
        float f1 = 2.184F, fArr1[] = new float[N];
        FuzzerUtils.init(fArr1, 0.306F);
        s1 *= (short) ((i5 + (-(i5 - -59L))) * ((d - Test.instanceCount) + iMeth(i5)));
        fArr1[(i6 >>> 1) % N] = i6;
        for (i35 = 216; i35 > 3; i35 -= 2) {
            i36 = Test.sFld;
            Test.fFld += (i35 * i35);
            i5 *= 8;
            if (Test.bFld) {
                l %= (i6 | 1);
                d = i35;
            }
            for (f1 = 1; f1 < 5; ++f1) {
                switch((int) ((f1 % 3) + 18)) {
                    case 18:
                        Test.iArrFld[i35 - 1] += (int) l;
                        i5 /= (int) -15.363F;
                        try {
                            Test.iArrFld[i35] = (-59 / i35);
                            i5 = (i5 % i36);
                            Test.iArrFld[(int) (f1)] = (i5 / Test.iArrFld[i35]);
                        } catch (ArithmeticException a_e) {
                        }
                        i36 -= i5;
                        Test.iArrFld[(int) (f1)] += i37;
                        i5 += (245 + (f1 * f1));
                        break;
                    case 19:
                        if (Test.bFld) {
                            switch((int) ((f1 % 9) + 127)) {
                                case 127:
                                    i37 *= i37;
                                    i5 >>= i35;
                                    l *= i36;
                                    for (i38 = i35; i38 < 2; i38++) {
                                        Test.instanceCount -= i5;
                                        Test.iArrFld = FuzzerUtils.int1array(N, (int) -11);
                                        Test.fFld += i37;
                                    }
                                    i40 = 1;
                                    while (++i40 < 2) {
                                        Test.lArrFld[i35 - 1] += Test.instanceCount;
                                        Test.instanceCount = i5;
                                        i6 += (i40 ^ s1);
                                        Test.bFld = true;
                                        Test.fFld = i38;
                                        i39 = i5;
                                        i39 = Test.iFld;
                                        i39 += (i40 ^ Test.iFld);
                                        if (i38 != 0) {
                                            vMeth_check_sum += i5 + i6 + l + s1 + Double.doubleToLongBits(d) + i35 + i36 + Float.floatToIntBits(f1) + i37 + i38 + i39 + i40 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                                            return;
                                        }
                                        Test.iFld += (-13699 + (i40 * i40));
                                    }
                                    break;
                                case 128:
                                case 129:
                                    try {
                                        i6 = (i40 % i40);
                                        i6 = (Test.iFld % Test.iFld);
                                        i37 = (Test.iFld / i36);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    break;
                                case 130:
                                    Test.iArrFld[(int) (f1 - 1)] -= i5;
                                    break;
                                case 131:
                                    Test.iArrFld = Test.iArrFld;
                                case 132:
                                case 133:
                                    Test.fFld += (((f1 * i37) + i35) - Test.instanceCount);
                                    break;
                                case 134:
                                    d = i38;
                                    break;
                                case 135:
                                    i37 += (int) ((long) f1 | (long) f1);
                                    break;
                                default:
                                    Test.iFld = (int) Test.instanceCount;
                            }
                        } else if (true) {
                            Test.iArrFld[(int) (f1)] = i40;
                        } else {
                            Test.byFld += (byte) Test.iFld;
                        }
                    case 20:
                        if (false)
                            break;
                        break;
                }
            }
        }
        vMeth_check_sum += i5 + i6 + l + s1 + Double.doubleToLongBits(d) + i35 + i36 + Float.floatToIntBits(f1) + i37 + i38 + i39 + i40 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {
        short s = -19968;
        int i = 9, i1 = -26309, i2 = 46981, i3 = -12, i4 = 187, i41 = -153, i42 = -51931, i43 = 0, i44 = -4, i45 = 12, i46 = -47304, i47 = 126, i48 = 58974, i49 = -132, iArr[] = new int[N], iArr1[] = new int[N];
        double d3 = 0.83982, d4 = 35.123150;
        float f2 = -2.518F, fArr2[] = new float[N];
        byte[][] byArr2 = new byte[N][N];
        FuzzerUtils.init(iArr, 46781);
        FuzzerUtils.init(iArr1, 11);
        FuzzerUtils.init(fArr2, 40.765F);
        FuzzerUtils.init(byArr2, (byte) -118);
        s = (short) (++i);
        for (i1 = 11; i1 < 198; ++i1) {
            for (i3 = 1; i3 < 27; i3 += 2) {
                switch(((i3 % 9) * 5) + 9) {
                    case 49:
                        {
                            java.io.PrintStream ax$21 = System.out;
                            java.io.PrintStream ax$22 = System.err;
                            java.io.PrintStream ax$23 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$23);
                            System.setErr(ax$23);
                            try {
                                ax$15 = true;
                                for (int ax$19 = 0; ax$19 < 7880; ax$19 += 1) vMeth(-1110808549, -121614054, -9104632841357089808L);
                            } catch (java.lang.Throwable ax$20) {
                            } finally {
                                ax$15 = false;
                            }
                            System.setOut(ax$21);
                            System.setErr(ax$22);
                        }
                        vMeth(Test.iFld, i2, Test.instanceCount);
                        switch((i3 % 10) + 14) {
                            case 14:
                                for (i41 = 1; i41 < 3; ++i41) {
                                    i42 = i3;
                                    i42 >>= (int) Test.instanceCount;
                                    i42 += (i41 + i42);
                                    i42 = -11;
                                }
                                Test.iFld = (int) Test.instanceCount;
                                for (d3 = 1; d3 < 3; d3++) {
                                    i &= -4;
                                    i42 = i4;
                                    try {
                                        Test.iFld = (201 % i1);
                                        Test.iFld = (Test.iArrFld[(int) (d3 + 1)] / -198);
                                        i4 = (i42 % 224);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    Test.iArrFld[(int) (d3)] -= (int) Test.instanceCount;
                                    Test.iArrFld[(int) (d3)] -= i2;
                                    i42 += (int) (((d3 * Test.fFld) + i41) - Test.byFld);
                                    i4 += (int) (((d3 * i1) + i4) - Test.iFld);
                                    Test.bFld = Test.bFld;
                                    d4 = Test.instanceCount;
                                    i2 = s;
                                    if (true)
                                        continue;
                                    i4 = (int) d4;
                                    i42 >>>= (int) Test.instanceCount;
                                    i43 += i3;
                                    Test.fFld += (float) (d3 * i42);
                                }
                                {
                                    java.io.PrintStream ax$7 = System.out;
                                    java.io.PrintStream ax$8 = System.err;
                                    java.io.PrintStream ax$9 = new java.io.PrintStream(new java.io.OutputStream() {

                                        @Override
                                        public void write(int b) throws java.io.IOException {
                                            // DO NOTHING: DISCARD ALL OUTPUTS
                                        }
                                    });
                                    System.setOut(ax$9);
                                    System.setErr(ax$9);
                                    try {
                                        for (int ax$5 = -2064; ax$5 < 7383; ax$5 += 1) {
                                            int ax$2 = i41;
                                            int ax$3 = i42;
                                            try {
                                                int[] ax$1 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
                                                int[] ax$0 = new int[8];
                                                ax$1[i42] = (int) (ax$0[i42] >>> i41);
                                            } catch (Throwable ax$4) {
                                            } finally {
                                                i41 = ax$2;
                                                i42 = ax$3;
                                            }
                                        }
                                    } catch (Throwable ax$6) {
                                    }
                                    System.setOut(ax$7);
                                    System.setErr(ax$8);
                                }
                                for (f2 = 1; 3 > f2; ++f2) {
                                    Test.iFld1 -= Test.iFld;
                                    iArr[(int) (f2 + 1)] -= i2;
                                    i44 += (int) (((f2 * i43) + i2) - f2);
                                    i42 -= i;
                                    i43 += (int) (f2 * f2);
                                    Test.sFld = (short) i44;
                                    iArr[i1] *= (int) Test.instanceCount;
                                    i4 -= -50310;
                                    i44 -= i41;
                                    i4 *= 42485;
                                    Test.fFld1 += i;
                                }
                                break;
                            case 15:
                                i45 = 1;
                                do {
                                    Test.instanceCount = i4;
                                    if (Test.bFld)
                                        break;
                                    Test.iFld1 += (i45 | Test.instanceCount);
                                    Test.iFld1 *= i45;
                                    Test.instanceCount -= Test.instanceCount;
                                    d4 = f2;
                                    Test.fFld1 = Test.instanceCount;
                                    i44 *= i1;
                                    Test.fFld1 += (((i45 * i1) + Test.iFld1) - Test.iFld1);
                                } while (++i45 < 3);
                                Test.lArrFld[i3] -= i45;
                                Test.iArrFld[i1 + 1] >>= i3;
                                for (i46 = 1; 3 > i46; i46++) {
                                    Test.instanceCount += i4;
                                    iArr1[i46 + 1] -= i1;
                                    i47 = -28538;
                                    Test.iArrFld[i46] = Test.byFld;
                                }
                                i4 = (int) Test.instanceCount;
                                i44 |= s;
                                i4 <<= (int) -3570087509L;
                                fArr2[i3 - 1] += i42;
                                Test.lArrFld[i3 - 1] += (long) f2;
                                i48 = 3;
                                do {
                                    i49 = -19;
                                    i42 = i1;
                                    Test.iArrFld[i1] = (int) Test.instanceCount;
                                    if (Test.bFld)
                                        break;
                                    iArr = iArr;
                                    try {
                                        i = (i43 / -8654);
                                        Test.iFld2 = (-21745 / Test.iFld2);
                                        i = (i42 / 495253157);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i43 >>= i4;
                                } while ((i48 -= 3) > 0);
                                Test.instanceCount = (long) d3;
                                if (Test.bFld) {
                                    if (true)
                                        continue;
                                    i47 >>= -247;
                                    Test.fFld += (13 + (i3 * i3));
                                } else if (false) {
                                    i42 += (((i3 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                                } else {
                                    Test.instanceCount >>= i43;
                                }
                            case 16:
                                Test.instanceCount *= i3;
                                break;
                            case 17:
                                byArr2[i1 - 1][i1] += (byte) i44;
                                break;
                            case 18:
                                Test.byFld <<= (byte) i48;
                                break;
                            case 19:
                                Test.iFld += (int) Test.instanceCount;
                            case 20:
                                i4 += (i3 * i3);
                            case 21:
                                d4 *= Test.fFld1;
                            case 22:
                                Test.instanceCount >>= i4;
                            case 23:
                                Test.iFld2 += (i3 * i3);
                                break;
                            default:
                                byArr2[i1][(-64071 >>> 1) % N] /= (byte) (i43 | 1);
                        }
                        break;
                    case 48:
                        i *= Test.iFld;
                        break;
                    case 40:
                        i2 *= i42;
                    case 16:
                        Test.bArrFld[(Test.iFld1 >>> 1) % N] = Test.bFld;
                    case 14:
                        i43 = i44;
                        break;
                    case 42:
                        i4 = i49;
                        break;
                    case 23:
                        i49 -= (int) Test.instanceCount;
                        break;
                    case 18:
                        iArr[i1] *= i44;
                        break;
                    case 10:
                        iArr[i1 + 1] = 57;
                        break;
                }
            }
        }
        FuzzerUtils.out.println("s i i1 = " + s + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
        FuzzerUtils.out.println("i41 i42 d3 = " + i41 + "," + i42 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i43 d4 f2 = " + i43 + "," + Double.doubleToLongBits(d4) + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i44 i45 i46 = " + i44 + "," + i45 + "," + i46);
        FuzzerUtils.out.println("i47 i48 i49 = " + i47 + "," + i48 + "," + i49);
        FuzzerUtils.out.println("iArr iArr1 fArr2 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(iArr1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));
        FuzzerUtils.out.println("byArr2 = " + FuzzerUtils.checkSum(byArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld Test.iFld Test.byFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.iFld + "," + Test.byFld);
        FuzzerUtils.out.println("Test.iFld1 Test.fFld1 Test.iFld2 = " + Test.iFld1 + "," + Float.floatToIntBits(Test.fFld1) + "," + Test.iFld2);
        FuzzerUtils.out.println("Test.iArrFld Test.dArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.bArrFld = " + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            {
                java.io.PrintStream ax$10 = System.out;
                java.io.PrintStream ax$11 = System.err;
                java.io.PrintStream ax$12 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$12);
                System.setErr(ax$12);
                {
                    boolean ax$14 = false;
                    for (int ax$13 = -4190; ax$13 < 5571; ax$13 += 6) {
                        if (!ax$14) {
                            ax$14 = true;
                            {
                                System.setOut(ax$10);
                                System.setErr(ax$11);
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                                System.setOut(ax$12);
                                System.setErr(ax$12);
                            }
                        }
                    }
                }
                System.setOut(ax$10);
                System.setErr(ax$11);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$15 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
