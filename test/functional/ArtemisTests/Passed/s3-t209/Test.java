// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 10L;

    public static volatile long lFld = -8248L;

    public static boolean bFld = true;

    public static short sFld = 12895;

    public long lFld1 = 138L;

    public static double dFld = 0.43297;

    public static float fFld = 1.615F;

    public int iFld = 34762;

    public static int iFld1 = -44845;

    public static int iFld2 = -127;

    public volatile float[] fArrFld = new float[N];

    public static long dMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth(int i3, int i4) {
        int i5 = -200, i6 = 63011, i7 = -8, i8 = -45154, i9 = 14, i10 = -15118, i11 = -14, i12 = -18383, i13 = 38176, iArr[] = new int[N], iArr1[][] = new int[N][N];
        byte by = -48;
        double d1 = 0.110924;
        long l3 = 2704880073L;
        short[] sArr = new short[N];
        FuzzerUtils.init(iArr, 156);
        FuzzerUtils.init(sArr, (short) -29922);
        FuzzerUtils.init(iArr1, 6);
        iArr[(-60391 >>> 1) % N] = i3;
        for (i5 = 2; i5 < 197; i5 += 3) {
            i4 = 62822;
            i4 = i4;
            i6 = by;
            d1 += d1;
            for (i7 = 8; i7 > 1; i7--) {
                if (i3 != 0) {
                }
                iArr[i5 + 1] -= i5;
                d1 *= 63626;
                i8 = by;
                iArr[i7 + 1] *= (int) Test.instanceCount;
                sArr[i5 - 1] = (short) -30;
                by -= (byte) i8;
                i4 -= i8;
            }
            if (i5 != 0) {
            }
            iArr[i5] >>= i6;
        }
        iArr[(i5 >>> 1) % N] += (int) -1.801F;
        i3 >>>= i7;
        i9 = 1;
        do {
            for (l3 = 1; l3 < 6; ++l3) {
                iArr[i9 + 1] >>= i4;
                for (i11 = 2; i11 > 1; i11--) {
                    i3 -= i12;
                    i3 = i11;
                    Test.instanceCount += 3107435183720588536L;
                    Test.lFld += 2;
                    i6 += (((i11 * l3) + l3) - i8);
                    i3 += (int) 1541390135040565646L;
                    Test.instanceCount = 0;
                    i10 += (0 + (i11 * i11));
                    i6 = i3;
                }
                if (true) {
                    iArr1 = iArr1;
                    iArr[(int) (l3 + 1)] = i4;
                    Test.bFld = Test.bFld;
                    i13 += (int) (l3 * l3);
                } else if (Test.bFld) {
                    d1 -= -3;
                } else {
                    i6 = i10;
                }
            }
        } while (++i9 < 88);
        long meth_res = i3 + i4 + i5 + i6 + by + Double.doubleToLongBits(d1) + i7 + i8 + i9 + l3 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth(long l1, long l2) {
        int i2 = -345, i14 = 22, i15 = -37, i16 = 12, i17 = 33012, i18 = 18733, i19 = 2, i20 = -3, iArr2[] = new int[N];
        float f1 = -11.909F;
        byte by1 = -29;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(lArr1, 227L);
        FuzzerUtils.init(iArr2, -16708);
        i2 = (int) ((57197 + (l1 + i2)) + lMeth(i2, i2));
        for (i14 = 6; i14 < 130; i14++) {
            i16 = 1;
            do {
                for (i17 = 1; i17 < 3; ++i17) {
                    lArr1[i14 - 1] -= i18;
                    Test.sFld -= (short) i18;
                }
                i2 += 60;
                for (i19 = 3; i19 > i14; i19 -= 2) {
                    i15 -= i18;
                    Test.sFld = (short) i15;
                    i20 -= (int) Test.instanceCount;
                    switch(((i16 % 1) * 5) + 105) {
                        case 107:
                            if (Test.bFld)
                                continue;
                            i18 += (60780 + (i19 * i19));
                            switch((i14 % 10) + 39) {
                                case 39:
                                case 40:
                                    f1 -= i19;
                                    Test.lFld += (i19 * i19);
                                    i15 += i19;
                                    l2 = i17;
                                    i2 ^= i16;
                                    iArr2[i14 - 1] >>>= (int) Test.lFld;
                                    lArr1 = lArr1;
                                    iArr2[i19 + 1] += i16;
                                    Test.lFld += (i19 + l2);
                                    i20 += i19;
                                    f1 += i15;
                                    l2 = i18;
                                    i2 += i18;
                                    break;
                                case 41:
                                    l2 = i14;
                                    l1 += (((i19 * Test.lFld) + Test.lFld) - i19);
                                    i15 += (i19 * i19);
                                    iArr2[i14] = (int) l2;
                                    switch(((i17 >>> 1) % 3) + 72) {
                                        case 72:
                                            i2 = i18;
                                            i20 = i2;
                                            i2 = (int) 4683196161939581903L;
                                            if (Test.bFld)
                                                continue;
                                        case 73:
                                            iArr2[i14 + 1] -= i17;
                                        case 74:
                                            i18 -= i2;
                                    }
                                    break;
                                case 42:
                                    Test.instanceCount -= -86;
                                case 43:
                                    iArr2[i19] = (int) Test.instanceCount;
                                case 44:
                                    i20 -= -42963;
                                    break;
                                case 45:
                                    i20 = i18;
                                case 46:
                                    i2 += (i19 * i19);
                                case 47:
                                    iArr2[i16] >>= i20;
                                    break;
                                case 48:
                                    i2 = by1;
                                    break;
                            }
                    }
                }
            } while ((i16 += 2) < 5);
        }
        vMeth_check_sum += l1 + l2 + i2 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f1) + by1 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public static double dMeth(int i, long l, double d) {
        int i1 = 110, i21 = 36605, i22 = -47068, i23 = 20, i24 = -251, i25 = -226, i26 = 51, i27 = 5, i28 = -85, iArr3[][] = new int[N][N];
        float f = -21.513F, fArr[] = new float[N];
        long[] lArr = new long[N];
        short[] sArr1 = new short[N];
        FuzzerUtils.init(lArr, -5L);
        FuzzerUtils.init(fArr, -31.208F);
        FuzzerUtils.init(iArr3, -228);
        FuzzerUtils.init(sArr1, (short) -6513);
        i1 = 1;
        while (++i1 < 226) {
            Test.lFld >>>= (long) ((212746618L * (f--)) + (++i));
            Test.instanceCount += i;
            d = -92.22910;
            lArr[i1 + 1] *= (long) ((Math.max(i, i) * (i1 - l)) * (f * (-2800054691L * (i ^ i1))));
            vMeth(-1902091121082333089L, l);
            i = -8;
            for (i21 = 1; i21 < 3; i21++) {
                i23 = 1;
                do {
                    Test.instanceCount >>= -12;
                    i22 = i;
                    if (i22 != 0) {
                    }
                    i22 &= (int) 53763L;
                    Test.lFld = i21;
                    i += i23;
                    i -= i1;
                    i22 *= -7;
                } while (++i23 < 2);
                fArr[i21 + 1] = -93;
            }
            for (i24 = 1; i24 < 3; i24++) {
                switch((i1 % 5) + 37) {
                    case 37:
                        i = i22;
                        i = (int) Test.instanceCount;
                        i22 = i21;
                        for (i26 = i24; 2 > i26; ++i26) {
                            Test.lFld -= i27;
                            lArr[i24] -= (long) f;
                            i25 = 0;
                            iArr3[i1 + 1] = iArr3[i26 + 1];
                        }
                        {
                            java.io.PrintStream ax$6 = System.out;
                            java.io.PrintStream ax$7 = System.err;
                            java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$8);
                            System.setErr(ax$8);
                            try {
                                for (int ax$4 = -3082; ax$4 < 3828; ax$4 += 1) {
                                    float ax$1 = f;
                                    int ax$2 = i1;
                                    try {
                                        java.lang.String[] ax$0 = { "\u0100\u0101", "\u0100 \u0101", "\u0100 \u0101\u0102", "\u0100 \u0101 \u0102", "\u0100C\u0101 \u0102", "\u0100\u0101\u0102", "?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&?&", "foobar", "foo?bar" };
                                        if (!Float.isInfinite(f = Float.parseFloat(ax$0[i1]))) {
                                        }
                                    } catch (Throwable ax$3) {
                                    } finally {
                                        f = ax$1;
                                        i1 = ax$2;
                                    }
                                }
                            } catch (Throwable ax$5) {
                            }
                            System.setOut(ax$6);
                            System.setErr(ax$7);
                        }
                        i28 = 1;
                        while (++i28 < 2) {
                            byte by2 = -55;
                            int i29 = -1;
                            iArr3[i28][i1 + 1] = i21;
                            if (true)
                                break;
                            switch(((i21 >>> 1) % 6) + 84) {
                                case 84:
                                    i27 += i28;
                                    i27 = i1;
                                    Test.instanceCount <<= i;
                                    i22 -= i26;
                                    i22 -= i1;
                                    break;
                                case 85:
                                    i = by2;
                                    break;
                                case 86:
                                    if (Test.bFld)
                                        continue;
                                case 87:
                                    i27 = i25;
                                    break;
                                case 88:
                                    i27 = (int) 57404L;
                                    break;
                                case 89:
                                    sArr1[i24] = (short) i29;
                                    break;
                            }
                        }
                        break;
                    case 38:
                        if (Test.bFld)
                            break;
                        break;
                    case 39:
                        i22 -= (int) Test.instanceCount;
                        break;
                    case 40:
                    case 41:
                        i27 = (int) Test.instanceCount;
                        break;
                    default:
                        f = i22;
                }
            }
        }
        long meth_res = i + l + Double.doubleToLongBits(d) + i1 + Float.floatToIntBits(f) + i21 + i22 + i23 + i24 + i25 + i26 + i27 + i28 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(sArr1);
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i30 = 147, i31 = -59395, i32 = -21211, i33 = 8, i34 = -43, i35 = -166, i36 = -190, i37 = 18, i38 = -1307, i39 = -4, i40 = -4, i41 = -28203, i42 = 139, i43 = -36164, i44 = -7909, i45 = 18823, iArr4[][] = new int[N][N], iArr5[] = new int[N];
        byte by3 = 5;
        double d2 = 0.43666;
        long l4 = -5066340203074708141L, lArr2[] = new long[N];
        boolean[] bArr = new boolean[N];
        short[] sArr2 = new short[N];
        FuzzerUtils.init(iArr4, 141);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr5, 33857);
        FuzzerUtils.init(lArr2, -6488178695939364258L);
        FuzzerUtils.init(sArr2, (short) -11885);
        dMeth(i30, 14L, -17.20215);
        i30 = (int) Test.instanceCount;
        for (i31 = 3; i31 < 226; i31++) {
            iArr4 = iArr4;
            i33 = 1;
            do {
                i32 += (((i33 * i30) + i31) - lFld1);
                i32 >>= i32;
                i32 *= i33;
                i30 += i33;
                i30 <<= (int) lFld1;
                Test.instanceCount += i33;
                lFld1 = i33;
                Test.dFld *= Test.fFld;
            } while ((i33 += 3) < 23);
            i32 -= 10042;
            try {
                iArr4[i31][i31 + 1] = (-9724 % i32);
                i32 = (-370 % iArr4[i31 + 1][i31 + 1]);
                i32 = (-7491 / iArr4[i31 - 1][(i32 >>> 1) % N]);
            } catch (ArithmeticException a_e) {
            }
            if (Test.bFld) {
                i30 = i31;
                iFld *= (int) Test.fFld;
                for (i34 = 1; 23 > i34; ++i34) {
                    Test.dFld = 35529L;
                    i30 <<= i30;
                    Test.sFld += (short) i34;
                    if (Test.bFld)
                        break;
                    iArr4[i34 - 1][i34] -= i31;
                    fArrFld[i34 + 1] -= (float) Test.dFld;
                    Test.bFld = Test.bFld;
                    i30 >>= i34;
                    Test.fFld *= by3;
                    for (i36 = 1; i36 < 2; ++i36) {
                        iFld -= (int) Test.lFld;
                        Test.lFld -= (long) Test.fFld;
                        i35 <<= i33;
                        iArr4[i31][i31 - 1] = (int) Test.instanceCount;
                        Test.instanceCount >>= i31;
                    }
                }
                iArr4[i31 + 1][i31] >>= Test.sFld;
                try {
                    i32 = (62860 / iArr4[i31][i31]);
                    i37 = (241 / i33);
                    i32 = (i37 % i33);
                } catch (ArithmeticException a_e) {
                }
                for (d2 = i31; d2 < 23; ++d2) {
                    iFld = (int) Test.instanceCount;
                    i35 = i32;
                    for (l4 = 1; l4 > 1; --l4) {
                        Test.fFld = Test.sFld;
                        iFld += (int) l4;
                    }
                    for (i40 = (int) (d2); i40 < 1; i40 += 2) {
                        bArr[i31] = Test.bFld;
                        i38 -= i42;
                        i42 += 104;
                        iArr5[(int) (d2)] = iFld;
                        by3 += (byte) (i40 ^ (long) Test.fFld);
                        i38 = (int) l4;
                        i38 += (((i40 * i42) + i35) - by3);
                        i30 = iFld;
                        Test.lFld %= -22999;
                        iFld += (i40 | l4);
                        Test.fFld = i41;
                        iArr5[(int) (d2)] = i42;
                        i37 >>= -22204;
                        i39 -= i34;
                    }
                    i30 = (int) Test.lFld;
                    i41 += (int) d2;
                    i43 = 1;
                    do {
                        i42 = (int) Test.instanceCount;
                    } while (++i43 < 1);
                    for (i44 = 1; i44 < 1; i44++) {
                        lArr2[(int) (d2)] += i40;
                        switch((int) ((d2 % 1) + 51)) {
                            case 51:
                                Test.instanceCount += (32L + (i44 * i44));
                                Test.lFld /= 17943;
                                iFld += (-11 + (i44 * i44));
                                switch((int) (((d2 % 4) * 5) + 59)) {
                                    case 68:
                                        iFld = i33;
                                        iFld = (int) Test.instanceCount;
                                        Test.instanceCount ^= Test.iFld1;
                                        i41 += (i44 - i39);
                                        i39 -= Test.iFld2;
                                        i45 <<= i31;
                                        i41 = -11;
                                        break;
                                    case 79:
                                        i39 += i44;
                                        break;
                                    case 77:
                                        iFld += i44;
                                        break;
                                    case 65:
                                        sArr2[(int) (d2 + 1)] = (short) Test.instanceCount;
                                        break;
                                    default:
                                        by3 *= (byte) lFld1;
                                }
                                break;
                        }
                    }
                }
            } else {
                Test.iFld1 = i37;
            }
        }
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("by3 i36 i37 = " + by3 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("d2 i38 l4 = " + Double.doubleToLongBits(d2) + "," + i38 + "," + l4);
        FuzzerUtils.out.println("i39 i40 i41 = " + i39 + "," + i40 + "," + i41);
        FuzzerUtils.out.println("i42 i43 i44 = " + i42 + "," + i43 + "," + i44);
        FuzzerUtils.out.println("i45 iArr4 bArr = " + i45 + "," + FuzzerUtils.checkSum(iArr4) + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("iArr5 lArr2 sArr2 = " + FuzzerUtils.checkSum(iArr5) + "," + FuzzerUtils.checkSum(lArr2) + "," + FuzzerUtils.checkSum(sArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.lFld Test.bFld = " + Test.instanceCount + "," + Test.lFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld lFld1 Test.dFld = " + Test.sFld + "," + lFld1 + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld iFld Test.iFld1 = " + Float.floatToIntBits(Test.fFld) + "," + iFld + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.iFld2 fArrFld = " + Test.iFld2 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$9) {
            int ax$11 = iFld2;
            try {
                byte ax$10 = (byte) 0xFFFFFFFF;
                if ((byte) iFld2 != ax$10)
                    ;
            } catch (Throwable ax$12) {
            } finally {
                iFld2 = ax$11;
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$9 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  dMeth ->  dMeth mainTest
// DEBUG  vMeth ->  vMeth dMeth mainTest
// DEBUG  lMeth ->  lMeth vMeth dMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
