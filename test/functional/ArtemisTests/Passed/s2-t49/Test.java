// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = 68L;

    public static double dFld = 1.34186;

    public static byte byFld = -68;

    public static volatile float fFld = 0.689F;

    public static boolean bFld = false;

    public static volatile byte byFld1 = 4;

    public static int[] iArrFld = new int[N];

    public static long[] lArrFld = new long[N];

    public short[] sArrFld = new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 246);
        FuzzerUtils.init(Test.lArrFld, 1153048190L);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {
        float f1 = -1.517F;
        int i7 = -7, i8 = -33165, i9 = -136, i10 = -13, i11 = 56644, i12 = 247;
        long l = -42L;
        double[] dArr = new double[N];
        FuzzerUtils.init(dArr, -62.20765);
        for (f1 = 4; f1 < 100; ++f1) {
            Test.instanceCount = -8963;
            for (i8 = 6; i8 > 1; --i8) {
                i7 ^= (int) Test.instanceCount;
                i9 *= i8;
                Test.fFld -= i9;
                Test.instanceCount >>>= i7;
                for (i10 = 1; i10 < 2; i10++) {
                    i11 += (i10 + Test.instanceCount);
                    switch((i10 % 9) + 117) {
                        case 117:
                            switch(((i7 >>> 1) % 3) + 4) {
                                case 4:
                                    i11 = i7;
                                    Test.iArrFld[(8642 >>> 1) % N] = (int) Test.instanceCount;
                                    i9 = (int) 3365259810L;
                                    Test.bFld = Test.bFld;
                                    i9 = i7;
                                    if (Test.bFld)
                                        continue;
                                    if (Test.bFld) {
                                        if (i7 != 0) {
                                            vMeth2_check_sum += Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11 + l + i12 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                                            return;
                                        }
                                        if (Test.bFld) {
                                            Test.instanceCount += i10;
                                        }
                                        Test.iArrFld[i8] = i10;
                                        l = i11;
                                        Test.instanceCount += 2668;
                                        Test.iArrFld[i8] = i11;
                                        Test.iArrFld[i8] = (int) -5731713763025640059L;
                                        Test.byFld = (byte) Test.instanceCount;
                                        i7 += (((i10 * i12) + i7) - l);
                                        i9 += (int) Test.dFld;
                                        i12 += (int) (-8085935147737097949L + (i10 * i10));
                                        vMeth2_check_sum += Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11 + l + i12 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                                        return;
                                    } else {
                                        i12 -= (int) 7L;
                                        if (Test.bFld)
                                            continue;
                                        try {
                                            Test.iArrFld[i8 + 1] = (i10 % 161);
                                            i7 = (i8 / -80);
                                            i12 = (i12 % -1940437320);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        i11 = i9;
                                        Test.lArrFld[i10 + 1] = i7;
                                    }
                                    Test.instanceCount %= (i9 | 1);
                                    Test.dFld = i8;
                                    break;
                                case 5:
                                    if (i12 != 0) {
                                        vMeth2_check_sum += Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11 + l + i12 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                                        return;
                                    }
                                    break;
                                case 6:
                                    Test.iArrFld[i10 + 1] += i11;
                            }
                            break;
                        case 118:
                            i7 -= i12;
                            break;
                        case 119:
                            l = (long) Test.dFld;
                            break;
                        case 120:
                            Test.byFld = (byte) i10;
                            break;
                        case 121:
                            Test.dFld = Test.instanceCount;
                            break;
                        case 122:
                            Test.byFld += (byte) (i10 - i9);
                            break;
                        case 123:
                            Test.dFld = i12;
                        case 124:
                            i11 += (i10 - i10);
                        case 125:
                            i11 %= (int) (i7 | 1);
                            break;
                        default:
                            dArr[i8 + 1] *= i8;
                    }
                }
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11 + l + i12 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1() {
        int i4 = -12, i5 = 13259, i6 = -21517, i13 = 118, i14 = -14, i15 = 9, i16 = 3, i17 = 2, i18 = -28, i19 = 8383, i20 = -18210;
        float f = 99.832F, fArr[] = new float[N];
        short s = 17568;
        byte by = -125, byArr[] = new byte[N];
        boolean[][] bArr = new boolean[N][N];
        FuzzerUtils.init(fArr, -43.55F);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(byArr, (byte) 76);
        Test.iArrFld[(i4 >>> 1) % N] = Math.abs(136);
        for (i5 = 4; i5 < 112; ++i5) {
            Test.instanceCount += (long) Test.dFld;
            i4 = (i6--);
            f += (((i5 * Test.instanceCount) + i6) - Test.byFld);
            f *= -146;
            vMeth2();
            Test.iArrFld[i5 - 1] = i5;
        }
        for (i13 = 148; i13 > 1; i13--) {
            i4 -= i5;
        }
        i15 = 1;
        do {
            for (i16 = i15; i16 < 3; i16 += 2) {
                Test.bFld = Test.bFld;
                i17 &= (int) Test.instanceCount;
                switch((i16 % 6) + 58) {
                    case 58:
                        i6 = i15;
                        {
                            java.io.PrintStream ax$0 = System.out;
                            java.io.PrintStream ax$1 = System.err;
                            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                            {
                                boolean ax$4 = false;
                                for (int ax$3 = -1758; ax$3 < 4452; ax$3 += 4) {
                                    if (!ax$4) {
                                        ax$4 = true;
                                        {
                                            System.setOut(ax$0);
                                            System.setErr(ax$1);
                                            switch(((i16 % 6) * 5) + 3) {
                                                case 17:
                                                    switch((i15 % 5) + 89) {
                                                        case 89:
                                                            i14 -= (int) Test.instanceCount;
                                                            Test.instanceCount >>= 24;
                                                            fArr[i15] = i15;
                                                            Test.instanceCount = Test.instanceCount;
                                                            Test.iArrFld[i15] <<= i16;
                                                            i4 = Test.byFld;
                                                            Test.dFld = i6;
                                                            i18 = 1;
                                                            do {
                                                                switch((i16 % 5) + 48) {
                                                                    case 48:
                                                                        i17 = Test.byFld1;
                                                                        i14 += (int) Test.instanceCount;
                                                                        break;
                                                                    case 49:
                                                                        Test.instanceCount = i15;
                                                                        Test.instanceCount += (((i18 * Test.instanceCount) + i18) - Test.fFld);
                                                                        f *= 27L;
                                                                        if (true)
                                                                            break;
                                                                        f = i15;
                                                                        i4 += (i18 - Test.fFld);
                                                                        i6 *= s;
                                                                        Test.iArrFld[i16 + 1] = (int) Test.instanceCount;
                                                                        break;
                                                                    case 50:
                                                                        bArr[i15 + 1][i16] = Test.bFld;
                                                                        break;
                                                                    case 51:
                                                                        i4 += (int) Test.fFld;
                                                                    case 52:
                                                                        Test.instanceCount += (i18 * i18);
                                                                    default:
                                                                        if (Test.bFld)
                                                                            break;
                                                                }
                                                            } while (++i18 < 1);
                                                            break;
                                                        case 90:
                                                            Test.dFld = -48.7062;
                                                            break;
                                                        case 91:
                                                            Test.dFld = i15;
                                                        case 92:
                                                            i17 = i6;
                                                            break;
                                                        case 93:
                                                            try {
                                                                i4 = (i13 / i16);
                                                                i6 = (i17 % -16167);
                                                                i17 = (i4 / -191);
                                                            } catch (ArithmeticException a_e) {
                                                            }
                                                    }
                                                case 5:
                                                    i6 = (int) Test.instanceCount;
                                                    break;
                                                case 31:
                                                    i17 -= by;
                                                    break;
                                                case 10:
                                                    i19 &= i17;
                                                    break;
                                                case 19:
                                                    Test.lArrFld[i15 + 1] = i13;
                                                    break;
                                                case 8:
                                                    Test.instanceCount *= 4287;
                                                    break;
                                                default:
                                                    i20 += i16;
                                            }
                                            System.setOut(ax$2);
                                            System.setErr(ax$2);
                                        }
                                    }
                                }
                            }
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                        }
                        break;
                    case 59:
                        i6 *= 7;
                        break;
                    case 60:
                    case 61:
                        i14 = i14;
                        break;
                    case 62:
                        i20 = Test.byFld1;
                        break;
                    case 63:
                        byArr[i16] -= (byte) i6;
                        break;
                    default:
                        if (Test.bFld)
                            break;
                }
            }
        } while (++i15 < 167);
        vMeth1_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + i17 + i18 + s + by + i19 + i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(int i, int i1, int i2) {
        int i3 = -78, i21 = 158, i23 = 44917, i24 = 42755, i25 = 228, i26 = 1571, i27 = 13952;
        short s1 = -22896;
        float f2 = 1.76F, fArr1[][] = new float[N][N];
        FuzzerUtils.init(fArr1, 116.784F);
        i3 = 1;
        do {
            vMeth1();
        } while (++i3 < 246);
        Test.lArrFld[(i1 >>> 1) % N] >>>= i;
        Test.instanceCount <<= i1;
        i21 = 1;
        while (++i21 < 91) {
            int i22 = 0;
            Test.fFld = (float) 2.3158;
            s1 >>>= (short) Test.instanceCount;
            i22 = i22;
            i2 = i22;
            for (f2 = 1; 6 > f2; f2++) {
                i24 = 1;
                do {
                    i2 &= (int) Test.instanceCount;
                    i23 += i2;
                    i1 = i;
                    i1 += -8;
                    fArr1[i24][(-175 >>> 1) % N] -= i24;
                    Test.fFld = 0;
                    Test.fFld = 711;
                    try {
                        i23 = (i21 % i2);
                        i = (41027 % i1);
                        i = (i3 % -280338844);
                    } catch (ArithmeticException a_e) {
                    }
                    fArr1[i21 + 1][i24] += 147;
                    Test.fFld %= -24301;
                    Test.bFld = Test.bFld;
                    Test.iArrFld[(int) (f2)] = i24;
                } while (++i24 < 2);
                i25 = (int) Test.instanceCount;
                i23 = (int) Test.instanceCount;
                for (i26 = 1; i26 < 2; i26++) {
                    Test.instanceCount += (((i26 * i23) + Test.instanceCount) - i21);
                    i22 >>= -51334;
                    i22 -= i23;
                    i = i23;
                    Test.byFld1 >>= (byte) Test.instanceCount;
                    Test.iArrFld[i26] *= s1;
                    Test.fFld = Test.instanceCount;
                    if (false) {
                    } else {
                        i1 += (i26 * i21);
                        Test.fFld *= i21;
                        i2 += (int) Test.fFld;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i21 + s1 + Float.floatToIntBits(f2) + i23 + i24 + i25 + i26 + i27 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {
        int i28 = -154, i30 = 23558, i31 = 17452, i32 = -172, i33 = -8, i34 = 6724, i35 = 61, i36 = 5, i37 = -101, i38 = -26426;
        short s2 = 5700, s3 = 2746;
        long l1 = -203171815L;
        double d = 0.73498;
        float[] fArr2 = new float[N];
        FuzzerUtils.init(fArr2, -50.236F);
        vMeth(i28, 0, i28);
        i28 = i28;
        i28 += (int) Test.instanceCount;
        Test.fFld *= i28;
        i28 *= i28;
        for (int i29 : Test.iArrFld) {
            i28 *= i29;
            i29 *= i29;
            if (Test.bFld) {
                Test.byFld1 >>= (byte) 5;
                Test.lArrFld[(i29 >>> 1) % N] = 31;
                i28 >>= 7;
            } else {
                for (i30 = 1; 20 > i30; i30 += 3) {
                    i29 += (int) Test.instanceCount;
                    for (i32 = i30; i32 < 4; ++i32) {
                        i28 = i29;
                        Test.instanceCount <<= i33;
                        i28 <<= (int) Test.instanceCount;
                        i33 = i31;
                        i28 += -9;
                        Test.instanceCount += s2;
                        i33 += i30;
                        i28 = i32;
                        sArrFld[i30 - 1] = (short) i32;
                        Test.fFld -= i28;
                        switch((((19399 >>> 1) % 1) * 5) + 37) {
                            case 39:
                                Test.lArrFld[i32] >>= Test.instanceCount;
                        }
                        i28 += i29;
                        Test.fFld *= Test.instanceCount;
                    }
                    i33 = i31;
                    i28 = -13;
                    i33 += i32;
                    for (i34 = 1; i34 < 4; i34++) {
                        Test.instanceCount = Test.instanceCount;
                        if (Test.bFld)
                            continue;
                        fArr2[i34] += i31;
                        i28 = i28;
                        i35 = (int) Test.instanceCount;
                        Test.iArrFld[i34 - 1] += (int) Test.dFld;
                    }
                    i31 *= (int) 1.447F;
                    Test.instanceCount ^= i30;
                    for (l1 = 1; l1 < 4; l1++) {
                        Test.instanceCount = 233;
                        Test.instanceCount += l1;
                        i35 -= (int) -2.72F;
                    }
                }
                Test.fFld = -139;
                i36 &= s2;
                for (d = 20; d > 1; d -= 2) {
                    i28 += (int) (d - l1);
                    Test.instanceCount -= s3;
                    Test.instanceCount += (long) d;
                    Test.dFld += Test.fFld;
                    i28 = i32;
                    Test.fFld = i33;
                    i38 = 1;
                    do {
                        int i39 = 7;
                        Test.instanceCount >>= i32;
                        Test.iArrFld[(int) (d)] -= i37;
                        i31 += i38;
                        Test.fFld += i29;
                        Test.instanceCount *= i28;
                        i29 = i38;
                        sArrFld[i38 + 1] += (short) l1;
                        s3 += (short) i38;
                        i29 += i35;
                        i37 += i38;
                        i37 += (i38 ^ i39);
                        i36 ^= (int) Test.instanceCount;
                    } while (++i38 < 3);
                    Test.iArrFld[(int) (d + 1)] += (int) l1;
                    i33 += (int) (d * i33);
                    i35 += i37;
                    Test.iArrFld[(int) (d + 1)] = (int) l1;
                    try {
                        i35 = (i36 / 35049);
                        i35 = (-4 % i37);
                        i33 = (i34 / Test.iArrFld[(int) (d)]);
                    } catch (ArithmeticException a_e) {
                    }
                    i29 += i36;
                    i35 += (int) d;
                }
                i31 = i34;
            }
        }
        {
            java.io.PrintStream ax$12 = System.out;
            java.io.PrintStream ax$13 = System.err;
            java.io.PrintStream ax$14 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$14);
            System.setErr(ax$14);
            try {
                for (int ax$10 = -439; ax$10 < 9477; ax$10 += 1) {
                    int ax$8 = i31;
                    try {
                        int[] ax$6 = { 0x11, 0x22, 0x33, 0x44, 0x88, 0x99, 0xaa, 0xbb };
                        int[] ax$5 = new int[20];
                        for (int ax$7 = 0; ax$7 < i31; ax$7++) {
                            // Need to know j < i < n for static bce.
                            ax$5[ax$7] += 1;
                            // Need to know just j < i for static bce.
                            ax$6[ax$7] += 1;
                        }
                    } catch (Throwable ax$9) {
                    } finally {
                        i31 = ax$8;
                    }
                }
            } catch (Throwable ax$11) {
            }
            System.setOut(ax$12);
            System.setErr(ax$13);
        }
        FuzzerUtils.out.println("i28 i30 i31 = " + i28 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 s2 = " + i32 + "," + i33 + "," + s2);
        FuzzerUtils.out.println("i34 i35 l1 = " + i34 + "," + i35 + "," + l1);
        FuzzerUtils.out.println("i36 d i37 = " + i36 + "," + Double.doubleToLongBits(d) + "," + i37);
        FuzzerUtils.out.println("s3 i38 fArr2 = " + s3 + "," + i38 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.byFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.fFld Test.bFld Test.byFld1 = " + Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0) + "," + Test.byFld1);
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld sArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(sArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$15) {
            try {
                Thread.sleep(10 * 1000);
            } catch (Throwable ax$19) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$15 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
