// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = 51L;

    public static boolean bFld = false;

    public static byte byFld = -61;

    public double dFld = 2.17608;

    public static float fFld = 2.308F;

    public static short sFld = 27651;

    public int iFld = 43745;

    public static float fFld1 = 6.79F;

    public static int iFld1 = 12;

    public static long lFld = -2011646495L;

    public static byte[] byArrFld = new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte) -82);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l, int i2, float f) {
        long l1 = 201L;
        float f1 = 1.697F;
        int i3 = -63, i4 = 9, i5 = -25050, i6 = -51, i7 = 21, iArr[] = new int[N];
        double d = 27.38672;
        short s1 = 3327;
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(iArr, -56);
        FuzzerUtils.init(bArr, false);
        l1 = 1;
        while (++l1 < 142) {
            f += (float) -1.92547;
            f1 = 1;
            do {
                for (i3 = 1; i3 < 1; ++i3) {
                    Test.bFld = Test.bFld;
                    i2 += i3;
                    i4 += (i3 ^ i2);
                }
                f += i2;
                l += (long) ((long) f1 ^ l);
                for (i5 = (int) (f1); 1 > i5; ++i5) {
                    switch((int) (((f1 % 3) * 5) + 44)) {
                        case 58:
                            i6 = (int) f1;
                            Test.instanceCount *= l1;
                            l >>>= i4;
                            i4 *= (int) f1;
                            if (true)
                                continue;
                            Test.instanceCount += (i5 | Test.instanceCount);
                            i2 <<= i5;
                            i4 += (i5 ^ i7);
                            i6 *= i4;
                            i6 += (i5 * i5);
                            i7 -= (int) l1;
                            i4 = (int) l;
                        case 49:
                            d += 3548148958L;
                            i7 = (int) Test.instanceCount;
                            iArr[(int) (f1 + 1)] = i6;
                            l = i6;
                            i6 += i5;
                            if (Test.bFld) {
                                i4 -= (int) 58.41443;
                                try {
                                    i6 = (i4 / 611842859);
                                    iArr[i5 - 1] = (i4 / -123);
                                    iArr[(int) (l1)] = (761 % i5);
                                } catch (ArithmeticException a_e) {
                                }
                                bArr[(int) (l1 + 1)] = Test.bFld;
                                i4 += (i5 * i5);
                                i7 *= (int) l1;
                                s1 = (short) l1;
                                i2 += i5;
                            } else if (true) {
                                i4 -= 0;
                            }
                            break;
                        case 48:
                    }
                }
            } while (++f1 < 4);
        }
        long meth_res = l + i2 + Float.floatToIntBits(f) + l1 + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + s1 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(int i1) {
        float f2 = -2.642F;
        int i8 = -3, i9 = 13, i10 = -6291, i11 = -218, i12 = -5349, i13 = -28, i14 = 18, i15 = 13, i16 = 87, i17 = -238, iArr1[][] = new int[N][N];
        double d1 = -48.42346;
        FuzzerUtils.init(iArr1, -187);
        iMeth1(Test.instanceCount, i1, f2);
        for (i8 = 6; i8 < 140; i8++) {
            Test.instanceCount += (i8 * i8);
            for (i10 = i8; i10 < 4; ++i10) {
                Test.byArrFld[i10 - 1] -= (byte) Test.instanceCount;
                iArr1[i10] = FuzzerUtils.int1array(N, (int) -12);
                i1 *= 122;
                Test.instanceCount = i9;
                for (i12 = 1; i12 > 1; i12--) {
                    d1 -= Test.instanceCount;
                }
                i9 += (int) -2L;
                d1 = i1;
                f2 = Test.instanceCount;
            }
            i1 -= i1;
            Test.instanceCount += (i8 * i11);
            iArr1[i8] = iArr1[i8];
            f2 -= Test.instanceCount;
            i1 = (int) 30443L;
            i11 = (int) Test.instanceCount;
            i11 = 0;
        }
        i11 <<= i8;
        if (Test.bFld) {
            i9 >>= (int) Test.instanceCount;
            i14 = 1;
            while (++i14 < 155) {
                for (i15 = i14; i15 < 4; i15++) {
                    Test.instanceCount += i15;
                    iArr1[i15 - 1][i15] ^= i14;
                    i16 -= i1;
                    i11 -= i14;
                    f2 += (((i15 * i1) + i17) - i13);
                }
                i11 += i12;
                i1 += i1;
                i13 *= (int) d1;
                iArr1[i14][i14 + 1] = (int) -8378016698941544357L;
                i17 -= i13;
                if (Test.bFld)
                    break;
                i16 += i10;
            }
        } else {
            i9 = (int) Test.instanceCount;
        }
        long meth_res = i1 + Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1) + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void vMeth(short s, int i) {
        if (ax$5) {
            int ax$7 = i;
            try {
                double ax$6 = 0.48F;
                try {
                    ax$6 = 10.0 / ax$6;
                } catch (ArithmeticException ae) {
                    i--;
                }
            } catch (Throwable ax$8) {
            } finally {
                i = ax$7;
            }
            return;
        }
        int i18 = -202, i19 = -38, i21 = 361, i22 = -5863, i23 = 11797, i24 = 0, i25 = -254, iArr2[] = new int[N];
        double[] dArr = new double[N];
        float[][] fArr = new float[N][N];
        FuzzerUtils.init(iArr2, -41);
        FuzzerUtils.init(dArr, 0.747);
        FuzzerUtils.init(fArr, 82.336F);
        iMeth(i);
        for (i18 = 10; i18 < 253; i18++) {
            i += (0 + (i18 * i18));
            iArr2 = iArr2;
            iArr2[i18 - 1] >>= (int) 8334192125065673804L;
            for (i21 = 3; 1 < i21; --i21) {
                for (i23 = 1; 2 > i23; i23++) {
                    float f3 = 123.292F;
                    f3 -= i24;
                    i24 -= 58011;
                    iArr2[i23 + 1] = i19;
                    switch((((i22 >>> 1) % 2) * 5) + 87) {
                        case 91:
                            s += (short) (i23 * i23);
                            i19 >>= -32;
                            dArr = dArr;
                            i19 = (int) 46428L;
                            i -= Test.byFld;
                            break;
                        case 92:
                            i22 -= i23;
                            f3 += i23;
                            i += i23;
                            Test.instanceCount += (((i23 * i19) + Test.byFld) - i19);
                            Test.instanceCount += (-56 + (i23 * i23));
                            i19 >>= 105;
                            f3 -= i24;
                            i25 = (int) -236L;
                            fArr[i21 + 1] = fArr[i23 - 1];
                            i = 58062;
                            Test.instanceCount &= i22;
                            f3 += (i23 * i23);
                            i22 = i;
                            break;
                    }
                    fArr[i23][i18] += (float) dFld;
                    i24 = i25;
                    i = i24;
                    i22 += i23;
                    i >>= (int) Test.instanceCount;
                    Test.instanceCount -= i;
                }
                try {
                    i19 = (-1 / iArr2[i18 + 1]);
                    iArr2[i18 - 1] = (i24 % i21);
                    iArr2[i21] = (128 / i22);
                } catch (ArithmeticException a_e) {
                }
                s -= (short) Test.fFld;
            }
        }
        vMeth_check_sum += s + i + i18 + i19 + i21 + i22 + i23 + i24 + i25 + FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {
        if (ax$14) {
            int ax$20 = iFld1;
            try {
                String ax$19 = (iFld1 < 0) ? "Unexpected EOF" : "One byte expected";
            } catch (Throwable ax$21) {
            } finally {
                iFld1 = ax$20;
            }
            return;
        }
        int i26 = -23273, i27 = 17, i28 = 127, i29 = -14, i30 = 55862, i31 = 101, i32 = -59, i33 = -250, iArr3[] = new int[N];
        long[] lArr = new long[N];
        short[] sArr = new short[N];
        float[][] fArr1 = new float[N][N];
        FuzzerUtils.init(iArr3, -3);
        FuzzerUtils.init(lArr, -249L);
        FuzzerUtils.init(sArr, (short) -4392);
        FuzzerUtils.init(fArr1, 0.228F);
        {
            java.io.PrintStream ax$11 = System.out;
            java.io.PrintStream ax$12 = System.err;
            java.io.PrintStream ax$13 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$13);
            System.setErr(ax$13);
            try {
                ax$5 = true;
                for (int ax$9 = 0; ax$9 < 6744; ax$9 += 1) vMeth((short) 935665593, 1939186182);
            } catch (java.lang.Throwable ax$10) {
            } finally {
                ax$5 = false;
            }
            System.setOut(ax$11);
            System.setErr(ax$12);
        }
        vMeth(Test.sFld, iFld);
        Test.instanceCount += Test.instanceCount;
        for (i26 = 6; i26 < 227; ++i26) {
            iFld <<= i26;
            Test.instanceCount += i26;
            for (i28 = 1; i28 < 23; i28++) {
                iFld >>= (int) Test.instanceCount;
                iFld -= (int) Test.instanceCount;
                Test.instanceCount <<= Test.instanceCount;
                iArr3[i28] = i26;
                iArr3[i26 + 1] = iFld;
                Test.instanceCount += (i28 ^ i26);
                i29 += (i28 * Test.instanceCount);
                lArr[i26] += (long) Test.fFld;
                Test.fFld -= i29;
                i27 += (int) Test.instanceCount;
            }
            i29 ^= Test.byFld;
            lArr[i26 - 1] = i27;
            iArr3[i26] = iFld;
            iFld = -32655;
            iArr3[i26 - 1] = -5420;
            i27 += (i26 * Test.fFld);
        }
        for (i30 = 8; i30 < 159; ++i30) {
            if (Test.bFld) {
                iFld = Test.byFld;
                iFld -= i26;
                i27 += i27;
                if (Test.bFld)
                    continue;
            } else if (Test.bFld) {
                Test.fFld += i30;
                i31 = (int) Test.instanceCount;
                if (Test.bFld) {
                    if (Test.bFld) {
                        i32 = 1;
                        do {
                            i31 /= (int) (Test.instanceCount | 1);
                            switch((i32 % 2) + 33) {
                                case 33:
                                    dFld *= i28;
                                    i31 = (int) Test.fFld;
                                    i27 += (i32 | i30);
                                    sArr[i30 + 1] += (short) i30;
                                    Test.fFld = i32;
                                    Test.fFld1 = -20719;
                                    dFld -= i30;
                                    i29 = Test.iFld1;
                                    i33 = 1;
                                    while ((i33 -= 2) > 0) {
                                        sArr[i30] = (short) i32;
                                        i31 += i33;
                                        dFld += Test.fFld;
                                        iArr3[i33 - 1] *= (int) Test.instanceCount;
                                        Test.byFld += (byte) (((i33 * Test.byFld) + Test.byFld) - i29);
                                        dFld *= -241;
                                        i31 <<= (int) Test.instanceCount;
                                        i27 = i27;
                                        try {
                                            i27 = (i26 / i29);
                                            Test.iFld1 = (iArr3[i33 + 1] / iFld);
                                            i31 = (i27 % -30998);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        if (Test.bFld)
                                            break;
                                        Test.instanceCount += i33;
                                        switch((i30 % 5) + 1) {
                                            case 1:
                                                i31 = (int) Test.instanceCount;
                                                fArr1[i32 - 1][i32] = i27;
                                                i31 += (int) -12L;
                                                Test.iFld1 += iFld;
                                                if (true) {
                                                    Test.iFld1 += i33;
                                                    Test.iFld1 -= 1;
                                                    i31 -= 64520;
                                                    Test.instanceCount >>= i27;
                                                    Test.instanceCount &= Test.instanceCount;
                                                    Test.byArrFld = FuzzerUtils.byte1array(N, (byte) 59);
                                                    if (Test.bFld)
                                                        continue;
                                                    lArr[i30 - 1] = i26;
                                                    i31 += -16842;
                                                    Test.instanceCount = -147;
                                                    try {
                                                        iArr3[i32 - 1] = (202 / iArr3[i30 + 1]);
                                                        Test.iFld1 = (i33 / i28);
                                                        i29 = (-1775398664 % i28);
                                                    } catch (ArithmeticException a_e) {
                                                    }
                                                    i31 = (int) Test.instanceCount;
                                                    iFld += (((i33 * Test.lFld) + Test.instanceCount) - Test.lFld);
                                                    i29 *= i26;
                                                }
                                            case 2:
                                                fArr1[i33][i30] = i31;
                                                break;
                                            case 3:
                                                Test.bFld = Test.bFld;
                                            case 4:
                                                i31 ^= 36572;
                                            case 5:
                                                iArr3[i33 + 1] &= i29;
                                        }
                                    }
                                    break;
                                case 34:
                                    iFld |= i26;
                                    break;
                                default:
                                    Test.fFld1 -= iFld;
                            }
                        } while (++i32 < 34);
                    } else if (false) {
                        iArr3[i30 - 1] += i27;
                    } else if (false) {
                        lArr[i30 - 1] *= i33;
                    }
                } else {
                    Test.fFld /= (Test.lFld | 1);
                }
            }
        }
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 iArr3 = " + i32 + "," + i33 + "," + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("lArr sArr fArr1 = " + FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(sArr) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.byFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0) + "," + Test.byFld);
        FuzzerUtils.out.println("dFld Test.fFld Test.sFld = " + Double.doubleToLongBits(dFld) + "," + Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("iFld Test.fFld1 Test.iFld1 = " + iFld + "," + Float.floatToIntBits(Test.fFld1) + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.lFld Test.byArrFld = " + Test.lFld + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        {
            java.io.PrintStream ax$0 = System.out;
            java.io.PrintStream ax$1 = System.err;
            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$2);
            System.setErr(ax$2);
            {
                boolean ax$4 = false;
                for (int ax$3 = -4693; ax$3 < 2781; ax$3 += 4) {
                    if (!ax$4) {
                        ax$4 = true;
                        {
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                            try {
                                Test _instance = new Test();
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                            } catch (Exception ex) {
                                FuzzerUtils.out.println(ex.getClass().getCanonicalName());
                            }
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                        }
                    }
                }
            }
            System.setOut(ax$0);
            System.setErr(ax$1);
        }
    }

    private static Boolean ax$5 = false;

    private static Boolean ax$14 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
