// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -2655561586L;

    public static byte byFld = 112;

    public static int iFld = 215;

    public int iFld1 = 0;

    public static float fFld = 63.626F;

    public double dFld = -2.10164;

    public static int[] iArrFld = new int[N];

    public static long[] lArrFld = new long[N];

    public static double[] dArrFld = new double[N];

    public static float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -231);
        FuzzerUtils.init(Test.lArrFld, -52L);
        FuzzerUtils.init(Test.dArrFld, -2.84118);
        FuzzerUtils.init(Test.fArrFld, -2.675F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {
        if (ax$8) {
            int ax$11 = iFld;
            try {
                int[] ax$9 = new int[] { 0xF1F2F3F4 };
                int[] ax$10 = new int[20];
                ax$9[iFld] = ax$10[ax$9.length] + 1;
            } catch (Throwable ax$12) {
            } finally {
                iFld = ax$11;
            }
            return;
        }
        int i7 = -19839, i8 = -190, i9 = -49951, i10 = -187, i11 = -27774, i12 = 11187, iArr1[] = new int[N];
        long l2 = 369311164L, l3 = 14L;
        float f1 = -121.631F;
        double d = -106.57048, dArr[] = new double[N];
        boolean b1 = false;
        FuzzerUtils.init(iArr1, 0);
        FuzzerUtils.init(dArr, 1.74813);
        for (i7 = 180; i7 > 4; i7 -= 2) {
            Test.instanceCount -= Test.instanceCount;
            for (l2 = 1; 6 > l2; l2++) {
                i8 += (int) l2;
                i9 = (int) Test.instanceCount;
                for (i10 = 2; i10 > 1; i10--) {
                    f1 %= (i8 | 1);
                    if (false)
                        break;
                    i8 >>= i11;
                    if (b1) {
                        iArr1[i10 - 1] += 7;
                        i11 = i9;
                        i12 = -32350;
                        i11 += (((i10 * i7) + i7) - Test.instanceCount);
                        i12 += i10;
                        if (false)
                            continue;
                        d = l2;
                        if (b1)
                            continue;
                    } else if (false) {
                        switch((int) ((l2 % 3) + 87)) {
                            case 87:
                                iArr1[(int) (l2 + 1)] = (int) f1;
                                f1 += (1.830F + (i10 * i10));
                                if (b1) {
                                    b1 = b1;
                                    Test.instanceCount *= i9;
                                } else if (b1) {
                                    Test.instanceCount = (long) d;
                                    i9 += i10;
                                    i8 += (i10 | i7);
                                    switch(((i10 % 8) * 5) + 63) {
                                        case 73:
                                            Test.instanceCount >>= i10;
                                            if (b1)
                                                break;
                                            i8 -= i10;
                                            i8 += -1;
                                            break;
                                        case 91:
                                            dArr[(int) (l2 - 1)] = l2;
                                            f1 -= (float) d;
                                            dArr[i7 - 1] *= f1;
                                            i12 >>= i9;
                                            Test.instanceCount = i12;
                                            break;
                                        case 88:
                                            i9 <<= i11;
                                            break;
                                        case 78:
                                            if (b1)
                                                break;
                                            break;
                                        case 98:
                                            Test.instanceCount &= i11;
                                            break;
                                        case 77:
                                            iArr1[i7 - 1] += i9;
                                        case 94:
                                            i8 = i9;
                                        case 89:
                                            if (b1)
                                                continue;
                                            break;
                                        default:
                                            f1 += (i10 * l3);
                                    }
                                } else {
                                    i11 += i10;
                                }
                            case 88:
                                i11 += (i10 * i7);
                            case 89:
                                l3 = -342;
                                break;
                            default:
                                i11 *= i11;
                        }
                    } else {
                        i9 = (int) 2679054915765592469L;
                    }
                }
            }
        }
        vMeth2_check_sum += i7 + i8 + l2 + i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + Double.doubleToLongBits(d) + (b1 ? 1 : 0) + l3 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(int i3, long l1) {
        if (ax$18) {
            try {
                int ax$19 = 100088;
                for (int ax$20 = 0; ax$20 < ax$19; ++ax$20) {
                    ax$19 *= ax$19;
                }
            } catch (Throwable ax$21) {
            } finally {
            }
            return;
        }
        int i4 = 2, i5 = 29922, i6 = 6, i13 = -57868, i14 = -7380, iArr[] = new int[N];
        float f2 = 0.865F;
        long[] lArr = new long[N];
        double[] dArr1 = new double[N];
        FuzzerUtils.init(lArr, 52817L);
        FuzzerUtils.init(iArr, -44719);
        FuzzerUtils.init(dArr1, 1.39249);
        i3 = (int) (-(i3 + (-1 + lArr[(i3 >>> 1) % N])));
        i4 = 198;
        while (--i4 > 0) {
            for (i5 = i4; i5 < 3; ++i5) {
                iArr[i5 + 1] *= (int) 11L;
                {
                    java.io.PrintStream ax$15 = System.out;
                    java.io.PrintStream ax$16 = System.err;
                    java.io.PrintStream ax$17 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$17);
                    System.setErr(ax$17);
                    try {
                        ax$8 = true;
                        for (int ax$13 = 0; ax$13 < 6105; ax$13 += 1) vMeth2();
                    } catch (java.lang.Throwable ax$14) {
                    } finally {
                        ax$8 = false;
                    }
                    System.setOut(ax$15);
                    System.setErr(ax$16);
                }
                vMeth2();
                for (i13 = 1; i13 < 1; i13++) {
                    lArr[i13 + 1] /= (Test.byFld | 1);
                    f2 += f2;
                    dArr1[i13 + 1] = -20102;
                    l1 = -5L;
                    i3 += i4;
                }
                f2 += (((i5 * Test.instanceCount) + Test.instanceCount) - i4);
                i3 = (int) l1;
                try {
                    i3 = (i14 / i14);
                    i6 = (i5 % -33779);
                    i6 = (-47 / i14);
                } catch (ArithmeticException a_e) {
                }
            }
        }
        vMeth1_check_sum += i3 + l1 + i4 + i5 + i6 + i13 + i14 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void vMeth(boolean b, float f, long l) {
        if (ax$27) {
            try {
                long[] ax$30 = { 7L, 7L, 5L, 5L, 7L, 7L, 7L, 5L, 5L };
                // this empty for-loop is required to reproduce this bug
                for (long duration : ax$30) {
                    // do nothing
                }
                {
                    String ax$28 = "test";
                    int ax$29 = ax$28.length();
                    ax$28 = ax$28 + ax$28;
                    ax$29 = ax$29 + ax$29;
                    ax$28 = ax$28 + ax$28;
                    ax$29 = ax$29 + ax$29;
                    ax$28 = ax$28 + ax$28;
                    ax$29 = ax$29 + ax$29;
                    if (ax$28.length() != ax$29) {
                    }
                }
            } catch (Throwable ax$31) {
            } finally {
            }
            return;
        }
        int i2 = 37810, i15 = -11, i16 = 155, i17 = -30779, i18 = -12, i19 = 131, i20 = -10690, i21 = -9945, i22 = -166, i23 = -2;
        short s = -9811;
        float f3 = 1.584F, fArr[] = new float[N];
        double[] dArr2 = new double[N];
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(dArr2, 50.103875);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr, 2.460F);
        i2 -= (i2 *= (--i2));
        {
            java.io.PrintStream ax$24 = System.out;
            java.io.PrintStream ax$25 = System.err;
            java.io.PrintStream ax$26 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$26);
            System.setErr(ax$26);
            try {
                ax$18 = true;
                for (int ax$22 = 0; ax$22 < 7088; ax$22 += 1) vMeth1(1211688728, -8749080439596646378L);
            } catch (java.lang.Throwable ax$23) {
            } finally {
                ax$18 = false;
            }
            System.setOut(ax$24);
            System.setErr(ax$25);
        }
        vMeth1(i2, l);
        Test.iArrFld[(i2 >>> 1) % N] -= 11;
        for (i15 = 9; i15 < 166; i15++) {
            i2 /= (int) (i2 | 1);
            i16 *= (int) f;
            for (i17 = 1; i17 < 4; i17++) {
                double d1 = 0.99759;
                Test.iArrFld[i17 + 1] -= (int) l;
                Test.lArrFld[i17] = (long) d1;
                i16 = (int) 23131L;
                switch(((i17 % 2) * 5) + 105) {
                    case 109:
                        i18 = i15;
                        if (b)
                            break;
                        l >>= Test.instanceCount;
                        Test.byFld = (byte) i16;
                        s += Test.byFld;
                        i16 = i17;
                        for (f3 = 1; f3 < 2; ++f3) {
                            i18 -= i17;
                            i19 -= (int) -842177853L;
                            Test.iArrFld = FuzzerUtils.int1array(N, (int) 199);
                            i2 -= (int) -1650671187256842180L;
                            d1 = s;
                            dArr2[(int) (f3 + 1)] *= i19;
                            l ^= 3;
                            Test.iFld = i17;
                        }
                        i19 |= i19;
                        break;
                    case 113:
                        f += -23.786F;
                        for (i20 = 1; i20 < 2; i20++) {
                            i21 >>>= -21603;
                        }
                        break;
                }
                for (i22 = 1; i22 < 2; i22++) {
                    f += (((i22 * i16) + i17) - iFld1);
                    switch(((i17 % 2) * 5) + 35) {
                        case 36:
                            Test.iArrFld[i17 + 1] += -38663;
                            bArr[i15 - 1] = false;
                            i23 = i18;
                            b = b;
                            break;
                        case 40:
                            fArr[i15 + 1] = i19;
                            break;
                        default:
                            iFld1 += i17;
                    }
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + Float.floatToIntBits(f) + l + i2 + i15 + i16 + i17 + i18 + s + Float.floatToIntBits(f3) + i19 + i20 + i21 + i22 + i23 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)) + FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {
        int i = 63, i1 = 0, i24 = 64865, i25 = 27831, i26 = -90, i27 = 2, i28 = -217, i29 = -28113, i30 = 143;
        boolean b2 = false;
        for (i = 11; i < 180; i += 3) {
            {
                java.io.PrintStream ax$34 = System.out;
                java.io.PrintStream ax$35 = System.err;
                java.io.PrintStream ax$36 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$36);
                System.setErr(ax$36);
                try {
                    ax$27 = true;
                    for (int ax$32 = 0; ax$32 < 7120; ax$32 += 1) vMeth(true, (float) 0.17477663293786216, 96856549691167690L);
                } catch (java.lang.Throwable ax$33) {
                } finally {
                    ax$27 = false;
                }
                System.setOut(ax$34);
                System.setErr(ax$35);
            }
            vMeth(b2, Test.fFld, Test.instanceCount);
            dFld *= Test.byFld;
            Test.iArrFld[i + 1] = i;
            for (i24 = 3; i24 < 90; ++i24) {
                for (i26 = 2; i26 > 1; i26 -= 3) {
                    dFld *= Test.byFld;
                }
                Test.instanceCount += i27;
                dFld -= Test.byFld;
                Test.iArrFld = Test.iArrFld;
                switch(((i24 % 7) * 5) + 17) {
                    case 25:
                        switch(((156 >>> 1) % 1) + 37) {
                            case 37:
                                Test.lArrFld[i] -= Test.instanceCount;
                                i25 += i;
                                switch((i % 4) + 124) {
                                    case 124:
                                        for (i28 = 1; i28 < 2; ++i28) {
                                            dFld *= Test.fFld;
                                            iFld1 *= i25;
                                            b2 = b2;
                                            if (b2)
                                                continue;
                                            i1 += i28;
                                            Test.fFld += (i28 + Test.instanceCount);
                                            dFld += Test.byFld;
                                            i29 -= (int) dFld;
                                            Test.iFld += 28075;
                                            if (b2) {
                                                switch((i28 % 2) + 29) {
                                                    case 29:
                                                        i25 -= i27;
                                                        i25 *= (int) 6675558221876159884L;
                                                        Test.iArrFld = Test.iArrFld;
                                                        if (false)
                                                            continue;
                                                        Test.fFld = i24;
                                                        Test.iArrFld[i24 - 1] -= i24;
                                                        if (b2)
                                                            continue;
                                                        Test.dArrFld[i] += 58818;
                                                        i29 = (int) Test.instanceCount;
                                                        i25 += (i28 - i);
                                                        i27 -= iFld1;
                                                        b2 = b2;
                                                        break;
                                                    case 30:
                                                        switch(((i28 % 2) * 5) + 110) {
                                                            case 115:
                                                                i27 = (int) Test.instanceCount;
                                                                Test.dArrFld = Test.dArrFld;
                                                                Test.instanceCount <<= -5;
                                                                Test.iFld = Test.iFld;
                                                                switch((i % 6) + 22) {
                                                                    case 22:
                                                                        i1 <<= Test.byFld;
                                                                        Test.fFld *= i26;
                                                                        if (true)
                                                                            break;
                                                                        Test.iFld += i28;
                                                                        Test.iFld = -9;
                                                                        Test.lArrFld[i24 - 1] -= i29;
                                                                        iFld1 *= -56632;
                                                                        i29 += i26;
                                                                        i27 = i26;
                                                                        Test.fFld = i1;
                                                                        iFld1 += (i28 * i26);
                                                                        i29 += i28;
                                                                    case 23:
                                                                        Test.fFld = i24;
                                                                        Test.iFld = i24;
                                                                        Test.fFld = Test.instanceCount;
                                                                        break;
                                                                    case 24:
                                                                        dFld += Test.iFld;
                                                                        i1 = (int) Test.instanceCount;
                                                                        i1 %= (int) (i27 | 1);
                                                                        Test.instanceCount += i28;
                                                                        break;
                                                                    case 25:
                                                                        i27 += (int) 1.310F;
                                                                        i1 >>= i;
                                                                        if (b2)
                                                                            break;
                                                                        Test.lArrFld[i - 1] >>= Test.instanceCount;
                                                                        i29 = i25;
                                                                        dFld -= -166;
                                                                        i27 = Test.byFld;
                                                                        Test.fArrFld[i24] += i29;
                                                                        i29 += (i28 - Test.fFld);
                                                                        iFld1 += (int) dFld;
                                                                        break;
                                                                    case 26:
                                                                        Test.iFld ^= i;
                                                                        break;
                                                                    case 27:
                                                                        Test.instanceCount += (long) 1.123228;
                                                                        break;
                                                                }
                                                                break;
                                                            case 112:
                                                                i30 -= Test.byFld;
                                                                break;
                                                            default:
                                                                Test.iArrFld[i28 - 1] >>>= (int) Test.instanceCount;
                                                        }
                                                        break;
                                                }
                                                {
                                                    java.io.PrintStream ax$5 = System.out;
                                                    java.io.PrintStream ax$6 = System.err;
                                                    java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                                                        @Override
                                                        public void write(int b) throws java.io.IOException {
                                                            // DO NOTHING: DISCARD ALL OUTPUTS
                                                        }
                                                    });
                                                    System.setOut(ax$7);
                                                    System.setErr(ax$7);
                                                    try {
                                                        for (int ax$3 = -4453; ax$3 < 3000; ax$3 += 1) {
                                                            int ax$1 = i29;
                                                            try {
                                                                long[] ax$0 = new long[] { 0x1122334455667788L, 0x8877665544332211L, 0L, 1L, -1l };
                                                                ax$0[i29] = i29;
                                                            } catch (Throwable ax$2) {
                                                            } finally {
                                                                i29 = ax$1;
                                                            }
                                                        }
                                                    } catch (Throwable ax$4) {
                                                    }
                                                    System.setOut(ax$5);
                                                    System.setErr(ax$6);
                                                }
                                            }
                                        }
                                        break;
                                    case 125:
                                    case 126:
                                        Test.iFld *= i26;
                                        break;
                                    case 127:
                                        if (true)
                                            continue;
                                        break;
                                    default:
                                        Test.iArrFld[i24] += (int) -59097L;
                                }
                                break;
                            default:
                                Test.iArrFld[i + 1] = (int) Test.instanceCount;
                        }
                    case 41:
                        Test.instanceCount *= 63929;
                        break;
                    case 20:
                        Test.iFld += (i24 - i1);
                        break;
                    case 32:
                        Test.instanceCount = i30;
                        break;
                    case 48:
                        Test.iFld = i24;
                        break;
                    case 23:
                        Test.lArrFld[i] = (long) dFld;
                    case 52:
                        Test.lArrFld[i - 1] >>>= i24;
                        break;
                    default:
                        Test.instanceCount += (i24 * i26);
                }
            }
        }
        FuzzerUtils.out.println("i i1 b2 = " + i + "," + i1 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 = " + i30);
        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.iFld = " + Test.instanceCount + "," + Test.byFld + "," + Test.iFld);
        FuzzerUtils.out.println("iFld1 Test.fFld dFld = " + iFld1 + "," + Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$37) {
            byte ax$39 = byFld;
            try {
                java.lang.Byte ax$38 = new Byte((byte) 0xFFFFFFFF);
                if ((byFld & 1) == 0)
                    ax$38 = new Byte((byte) (byFld + 1));
            } catch (Throwable ax$40) {
            } finally {
                byFld = ax$39;
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$8 = false;

    private static Boolean ax$18 = false;

    private static Boolean ax$27 = false;

    private static Boolean ax$37 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
