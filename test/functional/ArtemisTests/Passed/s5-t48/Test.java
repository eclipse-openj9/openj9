// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Iterator;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 1836068819L;

    public static byte byFld = 56;

    public static short sFld = -6392;

    public static double dFld = 12.42059;

    public byte byFld1 = 37;

    public static long lArrFld[] = new long[N];

    public static int iArrFld[] = new int[N];

    public static float fArrFld[] = new float[N];

    public double dArrFld[] = new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -72931417L);
        FuzzerUtils.init(Test.iArrFld, -94);
        FuzzerUtils.init(Test.fArrFld, 5.632F);
    }

    public static long vSmallMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth(long l) {
        if (Test.ax$0) {
            char ax$1 = 'ÓÖè';
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$1 = 0;
            } catch (Throwable ax$2) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return -6966076656622229681L;
        }
        int i4 = -51982;
        int i5 = -11;
        int i6 = 128;
        int i8 = -64554;
        int i9 = 41446;
        int i10 = 6;
        int i11 = -225;
        int i12 = -9884;
        int i13 = -7;
        int i14 = -229;
        int iArr1[] = new int[N];
        boolean b = true;
        float f = -2.519F;
        short sArr[] = new short[N];
        FuzzerUtils.init(sArr, ((short) (-10713)));
        FuzzerUtils.init(iArr1, 79);
        Test.instanceCount *= 61407;
        i4 += i4;
        Test.byFld += ((byte) (i4));
        for (i5 = 3; i5 < 114; ++i5) {
            switch ((i5 % 3) + 96) {
                case 96 :
                    sArr[i5] &= ((short) (i6));
                    Test.sFld = ((short) (Test.dFld));
                    i6 *= Test.sFld;
                    i4 += i5 - l;
                    if (b) {
                        i6 = i4;
                        for (i8 = 5; i8 > 1; i8--) {
                            if (b)
                                break;

                            iArr1[i8] = ((int) (l));
                            i4 ^= -30320;
                            Test.byFld += ((byte) (i8));
                            i9 = ((int) (l));
                        }
                        iArr1[i5] -= i6;
                        i10 = 1;
                        do {
                            Test.lArrFld[i5 + 1] = i6;
                            if (true)
                                break;

                            l += i10;
                            for (i11 = 1; 1 > i11; ++i11) {
                                Test.instanceCount <<= i10;
                            }
                            if (b)
                                break;

                            Test.dFld %= i10 | 1;
                            f += -147;
                        } while ((++i10) < 5 );
                        i6 += i5;
                        i12 += ((i5 * i11) + i8) - Test.byFld;
                        i4 += i5;
                        for (i13 = 1; i13 < 5; ++i13) {
                            i14 -= ((int) (Test.instanceCount));
                            i12 <<= i14;
                            l += ((i13 * i13) + Test.byFld) - i8;
                            i14 += i13;
                            f += i10;
                            if (b)
                                continue;

                        }
                    }
                    break;
                case 97 :
                    i4 += i5 * i5;
                case 98 :
                default :
                    l <<= i14;
            }
        }
        long meth_res = (((((((((((((l + i4) + i5) + i6) + i8) + i9) + (b ? 1 : 0)) + i10) + i11) + i12) + Float.floatToIntBits(f)) + i13) + i14) + FuzzerUtils.checkSum(sArr)) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return ((long) (meth_res));
    }

    public static void vMeth(int i3) {
        int i15 = 33;
        int i16 = 6;
        int i17 = -1;
        int i18 = 10;
        int i19 = 174;
        int i20 = 64;
        int i21 = 227;
        int iArr[] = new int[N];
        float f1 = -67.15F;
        boolean b1 = false;
        FuzzerUtils.init(iArr, -20880);
        {
            final int ax$13 = i19;
            final float ax$14 = f1;
            final int ax$15 = i16;
            final int ax$16 = i15;
            try {
                float[] ax$6 = new float[10];
                int[] ax$10 = new int[8];
                for (int ax$3 = -344; ax$3 < (-344 + 12016); ax$3 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (ax$6 != null) {
                            ax$6[i16 + 0] = f1;
                            ax$6[i16 + 1] = f1;
                        }
                    } catch (Throwable ax$8) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    lMeth(-3534198976802363916L);
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (ax$10[i19] != i15) {
                        }
                    } catch (Throwable ax$12) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i19 = ax$13;
                f1 = ax$14;
                i16 = ax$15;
                i15 = ax$16;
            }
        }
        iArr[(i3 >>> 1) % N] += ((int) (lMeth(20430L) - Test.instanceCount));
        for (i15 = 3; 173 > i15; i15++) {
            iArr[i15 + 1] = i3;
            i3 += i15 ^ i16;
            switch (((((-233) >>> 1) % 2) * 5) + 68) {
                case 76 :
                    i3 += i3;
                    for (i17 = 3; 1 < i17; i17 -= 2) {
                        iArr[i17] = ((int) (6190121113086783726L));
                        i16 += i17 ^ ((long) (f1));
                        iArr[i17 - 1] <<= i17;
                        if (b1) {
                            if (b1)
                                continue;

                            Test.instanceCount >>= Test.byFld;
                        } else if (b1) {
                            Test.sFld += ((short) ((-48365) + (i17 * i17)));
                            i16 += i17;
                            i3 >>= ((int) (Test.instanceCount));
                        }
                        Test.dFld = 1.117428;
                        if (b1)
                            continue;

                        i16 = i3;
                        Test.instanceCount *= i18;
                        i18 *= i16;
                        iArr[i15] = i17;
                    }
                    f1 -= f1;
                    Test.instanceCount = i16;
                    i18 *= ((int) (f1));
                    break;
                case 71 :
                    Test.lArrFld = Test.lArrFld;
                    i3 += ((int) (f1));
                    Test.instanceCount ^= Test.instanceCount;
                    i19 = 1;
                    do {
                        i3 += ((int) (f1));
                        if (i19 != 0) {
                            vMeth_check_sum += (((((((((i3 + i15) + i16) + i17) + i18) + Float.floatToIntBits(f1)) + (b1 ? 1 : 0)) + i19) + i20) + i21) + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        for (i20 = 1; i20 < 1; i20++) {
                            i16 >>= i15;
                            switch ((i20 % 2) + 56) {
                                case 56 :
                                    i3 = i20;
                                    i18 *= i19;
                                    break;
                                case 57 :
                                    Test.dFld = i17;
                                default :
                                    Test.instanceCount += i21;
                            }
                        }
                    } while ((++i19) < 3 );
                    break;
                default :
                    f1 %= i20 | 1;
            }
        }
        vMeth_check_sum += (((((((((i3 + i15) + i16) + i17) + i18) + Float.floatToIntBits(f1)) + (b1 ? 1 : 0)) + i19) + i20) + i21) + FuzzerUtils.checkSum(iArr);
    }

    public static void vSmallMeth(int i1, int i2) {
        {
            final int ax$37 = i2;
            try {
                for (int ax$28 = -125; ax$28 < (-125 + 9705); ax$28 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if ((i2 >= i2) && (i2 < i2)) {
                            i2 = i2;
                        } else if ((i2 >= i2) && (i2 < i2)) {
                            i2 = i2;
                        } else if ((i2 >= i2) && (i2 < i2)) {
                            i2 = i2;
                        } else if ((i2 >= i2) && (i2 < i2)) {
                            i2 = i2;
                        }
                    } catch (Throwable ax$36) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i2 = ax$37;
            }
        }
        vMeth(i1);
        Test.lArrFld[(i2 >>> 1) % N] *= i1;
        vSmallMeth_check_sum += i1 + i2;
    }

    public void mainTest(String[] strArr1) {
        if (Test.ax$17) {
            Iterator ax$18 = null;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                if ((((Integer) (ax$18.next())).intValue() % 2) == 1) {
                    ax$18.remove();
                }
            } catch (Throwable ax$19) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return;
        }
        int i = 9442;
        int i22 = -7;
        int i23 = 2;
        int i24 = 37;
        int i25 = -9;
        int i26 = 7808;
        boolean b2 = true;
        float f2 = 53.154F;
        byte byArr[] = new byte[N];
        FuzzerUtils.init(byArr, ((byte) (-121)));
        i = 1;
        while ((++i) < 94) {
            for (int smallinvoc = 0; smallinvoc < 19; smallinvoc++)
                vSmallMeth(i, 14);

            if (b2)
                break;

            switch ((i % 7) + 23) {
                case 23 :
                    Test.instanceCount += i;
                    for (i22 = i; i22 < 54; ++i22) {
                        i23 += i22;
                        i23 += i22 ^ i22;
                        if (b2)
                            continue;

                        Test.dFld += i23;
                        i23 += i22;
                        try {
                            Test.iArrFld[i22 + 1] = 25217 / i22;
                            Test.iArrFld[i22 + 1] = i22 % (-15597);
                            i23 = (-2102524635) / Test.iArrFld[i + 1];
                        } catch (ArithmeticException a_e) {
                        }
                        Test.dFld %= i | 1;
                        Test.iArrFld = Test.iArrFld;
                        try {
                            i23 = i22 % i22;
                            i23 = 683544781 % i23;
                            i23 = i / (-193971073);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.byFld = ((byte) (-104));
                    }
                    Test.iArrFld[i] = ((int) (-5L));
                    i24 = 1;
                    do {
                        if (b2) {
                            i23 += ((i24 * i23) + i23) - i;
                            for (i25 = i; i25 < 1; i25++) {
                                i26 = ((int) (f2));
                                Test.instanceCount -= -1;
                                Test.instanceCount += Test.instanceCount;
                                Test.sFld *= ((short) (i26));
                                Test.iArrFld[i + 1] = ((int) (Test.instanceCount));
                                Test.instanceCount = i24;
                                Test.iArrFld[(i25 >>> 1) % N] = i25;
                                switch ((i % 10) + 3) {
                                    case 3 :
                                    case 4 :
                                        i23 *= i;
                                        Test.instanceCount *= 16;
                                        Test.instanceCount = i26;
                                        break;
                                    case 5 :
                                        Test.instanceCount = i24;
                                        i23 = i26;
                                        i26 += ((int) (Test.instanceCount));
                                        if (b2)
                                            continue;

                                        Test.instanceCount %= i | 1;
                                        i23 += 204 + (i25 * i25);
                                        break;
                                    case 6 :
                                        i23 = -2;
                                        Test.instanceCount = i23;
                                        i23 = Test.sFld;
                                        Test.instanceCount <<= i24;
                                        i23 = i24;
                                        Test.dFld = Test.instanceCount;
                                        Test.fArrFld[i24 + 1] += -170L;
                                        i23 = i24;
                                        Test.instanceCount += ((i25 * i23) + i25) - i26;
                                        i26 = i25;
                                        break;
                                    case 7 :
                                        i23 = i;
                                        Test.dFld = Test.instanceCount;
                                        Test.iArrFld[i24] += i25;
                                        i26 *= Test.sFld;
                                        switch ((i % 1) + 105) {
                                            case 105 :
                                                Test.instanceCount -= ((long) (Test.dFld));
                                                i23 = ((int) (-8L));
                                                switch ((i % 2) + 80) {
                                                    case 80 :
                                                        byArr = byArr;
                                                        i23 = i24;
                                                        i26 <<= -19;
                                                        i26 = Test.sFld;
                                                        i26 += i25 * i25;
                                                        i23 += ((i25 * i26) + i22) - i22;
                                                        i26 += i25 | i24;
                                                        dArrFld[i] = i23;
                                                        Test.iArrFld[i] += Test.byFld;
                                                        switch ((i25 % 10) + 81) {
                                                            case 81 :
                                                                f2 += i23;
                                                                break;
                                                            case 82 :
                                                                Test.instanceCount += i24;
                                                                Test.byFld *= ((byte) (i22));
                                                                if (b2) {
                                                                    if (b2)
                                                                        continue;

                                                                    f2 -= i24;
                                                                    Test.byFld += ((byte) (i25 * i25));
                                                                    Test.iArrFld[i] += i23;
                                                                    Test.dFld %= i25 | 1;
                                                                } else if (b2)
                                                                    break;

                                                            case 83 :
                                                                i23 *= i26;
                                                                break;
                                                            case 84 :
                                                                i23 *= i22;
                                                                break;
                                                            case 85 :
                                                                i23 = ((int) (Test.instanceCount));
                                                                break;
                                                            case 86 :
                                                                i26 = i23;
                                                                break;
                                                            case 87 :
                                                                i26 <<= i23;
                                                                break;
                                                            case 88 :
                                                                Test.instanceCount *= Test.instanceCount;
                                                                break;
                                                            case 89 :
                                                            case 90 :
                                                                i23 += i25 - Test.instanceCount;
                                                                break;
                                                            default :
                                                                i23 *= -13;
                                                        }
                                                        break;
                                                    case 81 :
                                                        i23 = byFld1;
                                                    default :
                                                        i23 = i26;
                                                }
                                                break;
                                            default :
                                                i23 = ((int) (Test.instanceCount));
                                        }
                                        break;
                                    case 8 :
                                        Test.instanceCount += i25 - f2;
                                        break;
                                    case 9 :
                                        i23 -= i;
                                        break;
                                    case 10 :
                                        Test.dFld = -7719;
                                    case 11 :
                                        i23 = i24;
                                        break;
                                    case 12 :
                                        Test.iArrFld[i25 - 1] /= -94;
                                }
                            }
                        } else if (b2) {
                            Test.dFld = i25;
                        } else {
                        }
                    } while ((++i24) < 54 );
                    break;
                case 24 :
                    i23 += Test.sFld;
                case 25 :
                    Test.instanceCount *= ((long) (1.9005));
                case 26 :
                    if (b2)
                        continue;

                    break;
                case 27 :
                    i26 = ((int) (Test.instanceCount));
                    break;
                case 28 :
                    i26 += ((int) (1570138831632323588L + (i * i)));
                case 29 :
                    Test.fArrFld[i] -= i;
                    break;
                default :
                    i26 += ((int) (180L + (i * i)));
            }
        }
        FuzzerUtils.out.println((((("i b2 i22 = " + i) + ",") + (b2 ? 1 : 0)) + ",") + i22);
        FuzzerUtils.out.println((((("i23 i24 i25 = " + i23) + ",") + i24) + ",") + i25);
        FuzzerUtils.out.println((((("i26 f2 byArr = " + i26) + ",") + Float.floatToIntBits(f2)) + ",") + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println((((("Test.instanceCount Test.byFld Test.sFld = " + Test.instanceCount) + ",") + Test.byFld) + ",") + Test.sFld);
        FuzzerUtils.out.println((((("Test.dFld byFld1 Test.lArrFld = " + Double.doubleToLongBits(Test.dFld)) + ",") + byFld1) + ",") + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println((((("Test.iArrFld Test.fArrFld dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld))) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                {
                    final int ax$27 = i;
                    try {
                        int[] ax$21 = new int[]{ 7 };
                        boolean ax$25 = true;
                        for (int ax$20 = -76; ax$20 < (-76 + 6051); ax$20 += 1) {
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                ax$21[i] += 219;
                            } catch (Throwable ax$23) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                            Test.ax$17 = true;
                            _instance.mainTest(new String[]{ "s", "s", "s", "s", "s", "s", "s", "s", "s" });
                            Test.ax$17 = false;
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                ax$25 = true;
                            } catch (Throwable ax$26) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                        }
                    } finally {
                        i = ax$27;
                    }
                }
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$17 = false;
}
