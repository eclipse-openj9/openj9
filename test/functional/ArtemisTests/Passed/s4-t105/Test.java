// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.Random;

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = 916313770200667505L;

    public static short sFld = -31729;

    public static boolean bFld = true;

    public static float fFld = 50.692F;

    public volatile double dFld = -1.112666;

    public static long[] lArrFld = new long[N];

    public static volatile byte[] byArrFld = new byte[N];

    public double[] dArrFld = new double[N];

    public boolean[] bArrFld = new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 6L);
        FuzzerUtils.init(Test.byArrFld, (byte) -64);
    }

    public static long vMeth_check_sum = 0;

    public static long bMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i1, double d, long l1) {
        if (ax$16) {
            try {
                java.util.Random ax$19 = new Random(69);
                char ax$17 = (char) ax$19.nextInt();
                Character ax$18 = new Character(ax$17);
                if (!ax$18.toString().equals(Character.toString(ax$17)))
                    ;
            } catch (Throwable ax$20) {
            } finally {
            }
            return 1916764715;
        }
        int i2 = 151, i3 = -45591, i4 = 36300, i5 = -32305, i6 = 2207, i7 = 16115, iArr[] = new int[N];
        float f1 = -2.20F, f2 = -7.967F;
        byte by = -56;
        short[] sArr = new short[N];
        FuzzerUtils.init(iArr, -185);
        FuzzerUtils.init(sArr, (short) 31411);
        l1 = i1;
        switch(((i1 >>> 1) % 2) + 41) {
            case 41:
                for (i2 = 88; i2 > 5; i2--) {
                    iArr = iArr;
                    f1 += i2;
                    i4 = 1;
                    do {
                        i3 *= i4;
                        l1 = i2;
                        i1 += (i4 * i4);
                        for (i5 = 1; i5 < 1; ++i5) {
                            iArr[i4 + 1] += (int) Test.instanceCount;
                            Test.sFld <<= (short) l1;
                            i1 += i5;
                            i6 += (i5 * i5);
                            by *= (byte) Test.instanceCount;
                            i1 += i5;
                            i1 += (i5 * Test.instanceCount);
                        }
                        Test.lArrFld = Test.lArrFld;
                        i1 += (i4 * i4);
                        i6 >>= i1;
                        Test.bFld = Test.bFld;
                        Test.bFld = Test.bFld;
                        Test.lArrFld[i4] -= 1546404348873057626L;
                        switch((i2 % 10) + 98) {
                            case 98:
                                if (i1 != 0) {
                                }
                                break;
                            case 99:
                                iArr[i4 + 1] <<= Test.sFld;
                                for (f2 = 1; f2 < 1; ++f2) {
                                    switch((i2 % 9) + 77) {
                                        case 77:
                                            iArr[i4 - 1] >>= (int) 6746947243182737908L;
                                            if (Test.bFld) {
                                                d += d;
                                                by += (byte) (-54.559F + (f2 * f2));
                                                i1 = (int) d;
                                                l1 |= l1;
                                                i6 = (int) l1;
                                                f1 += (float) d;
                                                i7 = i7;
                                            }
                                            break;
                                        case 78:
                                            iArr[i4 + 1] = (int) l1;
                                            break;
                                        case 79:
                                            d = Test.instanceCount;
                                            break;
                                        case 80:
                                            i1 += i2;
                                        case 81:
                                            i6 = i7;
                                            break;
                                        case 82:
                                            iArr = iArr;
                                            break;
                                        case 83:
                                            i6 += i7;
                                            break;
                                        case 84:
                                            Test.lArrFld[i2 - 1] -= (long) d;
                                            break;
                                        case 85:
                                            i6 += (int) (f2 * f2);
                                            break;
                                    }
                                }
                                break;
                            case 100:
                                i7 = (int) f2;
                            case 101:
                                f1 += (-28604 + (i4 * i4));
                                break;
                            case 102:
                                Test.lArrFld[i4 - 1] >>= -119L;
                                break;
                            case 103:
                                i3 ^= i4;
                                break;
                            case 104:
                                Test.instanceCount += (long) -43.72846;
                                break;
                            case 105:
                                i1 = i7;
                            case 106:
                                sArr[i2 + 1] += (short) Test.instanceCount;
                                break;
                            case 107:
                                try {
                                    i7 = (i7 % i4);
                                    i3 = (i1 % i1);
                                    iArr[i2] = (-15 % i2);
                                } catch (ArithmeticException a_e) {
                                }
                            default:
                                i7 += (i4 | i5);
                        }
                    } while (++i4 < 7);
                }
                break;
            case 42:
                f1 = l1;
                break;
        }
        long meth_res = i1 + Double.doubleToLongBits(d) + l1 + i2 + i3 + Float.floatToIntBits(f1) + i4 + i5 + i6 + by + Float.floatToIntBits(f2) + i7 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static boolean bMeth(int i) {
        double d1 = 0.18146;
        int i8 = 7, i9 = -2763, i10 = 39415, i11 = -57172, i12 = -5, i13 = 45883, iArr1[] = new int[N];
        byte by1 = -41;
        boolean[] bArr = new boolean[N];
        short[] sArr1 = new short[N];
        FuzzerUtils.init(iArr1, 13);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(sArr1, (short) -13250);
        i *= (((i = i) - iMeth(i, d1, Test.instanceCount)) * i);
        for (i8 = 9; 217 > i8; ++i8) {
            d1 = by1;
            for (i10 = 1; i10 < 3; i10++) {
                i -= -153;
                iArr1[i8] = (int) -2665137612396491189L;
                switch(((i8 % 2) * 5) + 114) {
                    case 121:
                        Test.lArrFld[i10 - 1] *= Test.sFld;
                        switch((i10 % 8) + 110) {
                            case 110:
                                iArr1[i10] = (int) Test.instanceCount;
                                iArr1[i10] = i11;
                                i *= (int) Test.instanceCount;
                                iArr1[i10 + 1] *= (int) Test.instanceCount;
                                break;
                            case 111:
                                switch(((i8 % 9) * 5) + 4) {
                                    case 30:
                                        Test.instanceCount *= 22429;
                                        for (i12 = 2; i12 > 1; i12 -= 3) {
                                            i9 += (-181 + (i12 * i12));
                                            i11 += i12;
                                            d1 -= Test.instanceCount;
                                            try {
                                                iArr1[i8] = (iArr1[i8 - 1] / i8);
                                                i13 = (iArr1[i12 - 1] / 31254);
                                                i9 = (i9 / i13);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            i *= i13;
                                            bArr[i10] = Test.bFld;
                                            i = i8;
                                            Test.instanceCount += (((i12 * Test.fFld) + i11) - i12);
                                            i13 |= i11;
                                            Test.instanceCount = 13;
                                            Test.fFld = i;
                                        }
                                        Test.instanceCount >>= i12;
                                        if (Test.bFld)
                                            break;
                                        Test.lArrFld[i8 - 1] = 54160;
                                        i9 = (int) Test.instanceCount;
                                        by1 <<= (byte) Test.instanceCount;
                                        break;
                                    case 15:
                                        Test.instanceCount += -3;
                                        Test.instanceCount = i11;
                                        i9 *= -13;
                                        i -= (int) Test.instanceCount;
                                    case 44:
                                        i9 += (i10 * Test.instanceCount);
                                        break;
                                    case 8:
                                        sArr1[i10] *= (short) Test.instanceCount;
                                        break;
                                    case 12:
                                        Test.lArrFld[i10 - 1] += Test.instanceCount;
                                        break;
                                    case 26:
                                        iArr1 = iArr1;
                                    case 43:
                                        Test.fFld += (((i10 * i13) + Test.instanceCount) - i);
                                        break;
                                    case 27:
                                        iArr1[i8] = (int) Test.instanceCount;
                                    case 6:
                                        i |= i;
                                        break;
                                    default:
                                        i9 -= -12;
                                }
                            case 112:
                                Test.fFld = i12;
                                break;
                            case 113:
                                Test.fFld *= i8;
                                break;
                            case 114:
                                i11 &= 101;
                                break;
                            case 115:
                                Test.byArrFld[i10] = (byte) 14;
                                break;
                            case 116:
                                i11 = (int) -3832256253L;
                                break;
                            case 117:
                            default:
                                i13 = (int) Test.instanceCount;
                        }
                        break;
                    case 116:
                        i = i;
                        break;
                }
            }
        }
        long meth_res = i + Double.doubleToLongBits(d1) + i8 + i9 + by1 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(sArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(long l, float f) {
        boolean b = false, bArr1[][] = new boolean[N][N];
        int i14 = 3, i15 = 0, i16 = 170, i17 = -1, i18 = -93, i19 = -65372, i20 = -14, i21 = -19989, i22 = -121, i23 = 8, iArr2[][] = new int[N][N];
        long l2 = 139L, l3 = 6756665223281486720L, lArr[][] = new long[N][N];
        double d2 = 9.91778, d3 = -1.127618, dArr[] = new double[N];
        float[] fArr = new float[N];
        FuzzerUtils.init(lArr, 8184797807728543939L);
        FuzzerUtils.init(iArr2, -23);
        FuzzerUtils.init(bArr1, false);
        FuzzerUtils.init(dArr, -1.70142);
        FuzzerUtils.init(fArr, -74.222F);
        b = bMeth(i14);
        l2 = 1;
        while (++l2 < 79) {
            for (i15 = 1; i15 < 7; ++i15) {
                i14 ^= (int) Test.instanceCount;
                i16 <<= 66;
                d2 -= i17;
                l = Test.sFld;
                i14 -= i16;
            }
        }
        lArr = FuzzerUtils.long2array(N, (long) 201L);
        iArr2[(i17 >>> 1) % N] = iArr2[(i17 >>> 1) % N];
        Test.instanceCount = i15;
        for (i18 = 183; i18 > 3; --i18) {
            i14 *= (int) f;
            Test.fFld += (i18 * i18);
        }
        for (i20 = 4; 114 > i20; ++i20) {
            if (Test.bFld)
                break;
            if (true)
                continue;
            i17 &= (int) l2;
            bArr1[i20 - 1][i20 - 1] = Test.bFld;
            l -= l;
            Test.bFld = true;
            i22 = 1;
            while (++i22 < 5) {
                i19 += (((i22 * f) + i22) - Test.fFld);
                {
                    java.io.PrintStream ax$0 = System.out;
                    java.io.PrintStream ax$1 = System.err;
                    java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$2);
                    System.setErr(ax$2);
                    {
                        boolean ax$4 = false;
                        for (int ax$3 = -4019; ax$3 < 4589; ax$3 += 2) {
                            if (!ax$4) {
                                ax$4 = true;
                                {
                                    System.setOut(ax$0);
                                    System.setErr(ax$1);
                                    for (l3 = 1; l3 < 1; l3++) {
                                        byte by2 = -87;
                                        Test.lArrFld[i20 - 1] -= (long) d2;
                                        Test.fFld *= (float) d2;
                                        if (b)
                                            continue;
                                        l *= i17;
                                        Test.instanceCount += (l3 * l3);
                                        switch(((i21 >>> 1) % 2) + 68) {
                                            case 68:
                                                i16 = (int) -4353739700458017869L;
                                                switch((i22 % 8) + 10) {
                                                    case 10:
                                                        Test.instanceCount -= i18;
                                                        i21 += Test.sFld;
                                                        i17 += (int) (l3 ^ by2);
                                                        iArr2[i22 + 1][i20 - 1] -= (int) -55095L;
                                                        i21 *= i17;
                                                        break;
                                                    case 11:
                                                        dArr[(int) (l3)] = by2;
                                                        break;
                                                    case 12:
                                                        f = Test.instanceCount;
                                                        break;
                                                    case 13:
                                                    case 14:
                                                        i16 -= by2;
                                                        break;
                                                    case 15:
                                                        iArr2[i20 + 1] = FuzzerUtils.int1array(N, (int) -18985);
                                                    case 16:
                                                        d3 = i22;
                                                    case 17:
                                                        iArr2[i20 + 1][i22 + 1] -= -6675;
                                                        break;
                                                    default:
                                                        i16 -= (int) l;
                                                }
                                                break;
                                            case 69:
                                                fArr[i20] -= (float) d2;
                                                break;
                                        }
                                    }
                                    System.setOut(ax$2);
                                    System.setErr(ax$2);
                                }
                            }
                        }
                    }
                    System.setOut(ax$0);
                    System.setErr(ax$1);
                }
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + (b ? 1 : 0) + i14 + l2 + i15 + i16 + Double.doubleToLongBits(d2) + i17 + i18 + i19 + i20 + i21 + i22 + l3 + i23 + Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {
        long l4 = -28938L;
        int i24 = -178, i25 = 13002, i26 = -244, i27 = 56160, i28 = 21, i29 = 7, i30 = 4, i31 = 3427, i32 = 26346, i33 = 1, i34 = 3, i35 = -9, i36 = 1136, i37 = -191, i38 = 0, iArr3[] = new int[N], iArr4[] = new int[N];
        byte by3 = 98;
        float[] fArr1 = new float[N];
        FuzzerUtils.init(iArr3, -194);
        FuzzerUtils.init(fArr1, -2.560F);
        FuzzerUtils.init(iArr4, -47892);
        vMeth(l4, Test.fFld);
        for (i24 = 132; i24 > 7; i24--) {
            i25 += 243;
            for (i26 = 2; i26 < 41; i26 += 3) {
                iArr3[i26] -= i25;
                iArr3[i26 - 1] += i25;
                l4 = Test.instanceCount;
                switch(((i26 >>> 1) % 2) + 110) {
                    case 110:
                        Test.fFld += (((i26 * i27) + i26) - i26);
                        switch((i24 % 9) + 60) {
                            case 60:
                                i28 = i25;
                                Test.bFld = Test.bFld;
                                i29 = 1;
                                {
                                    java.io.PrintStream ax$5 = System.out;
                                    java.io.PrintStream ax$6 = System.err;
                                    java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                                        @Override
                                        public void write(int b) throws java.io.IOException {
                                            // DO NOTHING: DISCARD ALL OUTPUTS
                                        }
                                    });
                                    System.setOut(ax$7);
                                    System.setErr(ax$7);
                                    {
                                        boolean ax$15 = false;
                                        for (int ax$14 = -4000; ax$14 < 1377; ax$14 += 2) {
                                            if (!ax$15) {
                                                ax$15 = true;
                                                {
                                                    System.setOut(ax$5);
                                                    System.setErr(ax$6);
                                                    while (++i29 < 4) {
                                                        l4 -= -64438;
                                                        dArrFld[i29 - 1] += l4;
                                                        i25 = i29;
                                                        Test.sFld += (short) dFld;
                                                        fArr1[(i25 >>> 1) % N] += Test.fFld;
                                                        i28 = 14;
                                                    }
                                                    System.setOut(ax$7);
                                                    System.setErr(ax$7);
                                                }
                                            }
                                            int ax$12 = i31;
                                            try {
                                                int[] ax$9 = { 1, 3 };
                                                int[] ax$8 = new int[] { 71994000, 71994000, 12000, 71994000, 71994000, 144000000, 144000000, 72018000, 144000000, 144000000, 71994000, 71994000, 12000, 71994000, 71994000, 72000000, 72000000, 36006000, 72000000, 72000000, 144012000, 144012000, 72030000, 144012000, 144012000, 72000000, 72000000, 36006000, 72000000, 72000000, 499501, 499501, 499501, 499501, 499501, 1000002, 1000002, 1000002, 1000002, 1000002, 499501, 499501, 499501, 499501, 499501, 1001, 1001, 1001, 1001, 1001, 3002, 3002, 3002, 3002, 3002, 1001, 1001, 1001, 1001, 1001, 501, 501, 501, 501, 501, 1502, 1502, 1502, 1502, 1502 };
                                                if (i31 > 100) {
                                                    for (int ax$11 = 0; ax$11 < 128; ax$11++) {
                                                        ax$8[i31]++;
                                                    }
                                                } else {
                                                    for (int ax$10 = 0; ax$10 < 128; ax$10++) {
                                                        ax$9[i31]++;
                                                    }
                                                }
                                            } catch (Throwable ax$13) {
                                            } finally {
                                                i31 = ax$12;
                                            }
                                        }
                                    }
                                    System.setOut(ax$5);
                                    System.setErr(ax$6);
                                }
                                break;
                            case 61:
                                for (i30 = 1; i30 < 4; ++i30) {
                                    i27 += i30;
                                    l4 += (((i30 * i27) + i24) - i26);
                                    i28 = i29;
                                    l4 += i30;
                                    Test.bFld = Test.bFld;
                                    i25 -= (int) 33.463F;
                                    i25 += (i30 * i30);
                                    Test.instanceCount += (long) -40.228F;
                                    Test.fFld -= i28;
                                }
                                i25 += (i26 * i26);
                                for (i32 = i24; i32 < 4; i32++) {
                                    i25 -= i25;
                                    Test.bFld = Test.bFld;
                                    i28 *= Test.sFld;
                                    i33 ^= i26;
                                    iArr3[i24] *= 11083;
                                    i27 = -118;
                                    Test.instanceCount *= i27;
                                    i31 += (((i32 * i26) + i31) - l4);
                                    i33 -= (int) Test.instanceCount;
                                    i27 >>>= Test.sFld;
                                    Test.lArrFld[i32] *= (long) Test.fFld;
                                }
                                if (false)
                                    break;
                                for (i34 = 1; i34 < 4; ++i34) {
                                    Test.sFld -= (short) -9;
                                    i35 += (((i34 * i34) + i34) - i34);
                                    i36 = 8862;
                                    Test.instanceCount -= l4;
                                    i33 = (int) 71.907F;
                                    i33 += i31;
                                    Test.bFld = Test.bFld;
                                    i28 += (int) l4;
                                    Test.instanceCount -= (long) dFld;
                                    i25 += (((i34 * i26) + Test.instanceCount) - Test.sFld);
                                    l4 <<= i28;
                                }
                                i36 >>= (int) 223L;
                                for (i37 = 1; i37 < 4; ++i37) {
                                    i25 |= i31;
                                    switch(((i37 % 1) * 5) + 10) {
                                        case 15:
                                            switch((i26 % 5) + 56) {
                                                case 56:
                                                    bArrFld[i37] = Test.bFld;
                                                    i27 += (((i37 * i24) + Test.fFld) - Test.fFld);
                                                    i33 += (i37 ^ i35);
                                                    i33 -= i34;
                                                    i38 = i36;
                                                    i35 += (((i37 * Test.instanceCount) + i33) - Test.instanceCount);
                                                    switch(((i24 % 1) * 5) + 82) {
                                                        case 87:
                                                            fArr1[i37] = Test.instanceCount;
                                                            break;
                                                        default:
                                                            iArr3[i24] = (int) Test.fFld;
                                                            switch(((i26 % 7) * 5) + 60) {
                                                                case 62:
                                                                    iArr3[i24 - 1] += i32;
                                                                    Test.lArrFld = Test.lArrFld;
                                                                    by3 += (byte) i37;
                                                                    i33 *= 197;
                                                                    break;
                                                                case 64:
                                                                    i38 = i38;
                                                                    break;
                                                                case 70:
                                                                    Test.fFld += i24;
                                                                    break;
                                                                case 63:
                                                                    i27 = -4;
                                                                    break;
                                                                case 93:
                                                                    i33 = i29;
                                                                    break;
                                                                case 77:
                                                                    Test.lArrFld[i24 - 1] = l4;
                                                                    break;
                                                                case 86:
                                                                    iArr4[i24] = i28;
                                                                    break;
                                                                default:
                                                                    bArrFld[(i30 >>> 1) % N] = Test.bFld;
                                                            }
                                                    }
                                                    break;
                                                case 57:
                                                    dFld += i29;
                                                case 58:
                                                    Test.bFld = Test.bFld;
                                                    break;
                                                case 59:
                                                    Test.sFld += (short) (((i37 * i37) + l4) - i28);
                                                case 60:
                                                    dFld = l4;
                                                    break;
                                                default:
                                                    i28 -= (int) -5618151721692915315L;
                                            }
                                            break;
                                        default:
                                            i36 += i37;
                                    }
                                }
                            case 62:
                                i28 += 3;
                                break;
                            case 63:
                                Test.instanceCount = (long) Test.fFld;
                            case 64:
                                i27 += (((i26 * i28) + i30) - Test.instanceCount);
                                break;
                            case 65:
                                dFld = i36;
                                break;
                            case 66:
                                i28 += (((i26 * i32) + by3) - i29);
                                break;
                            case 67:
                                i33 -= (int) l4;
                                break;
                            case 68:
                                Test.bFld = Test.bFld;
                        }
                        break;
                    case 111:
                        i28 = -8;
                        break;
                    default:
                        iArr4[i26 - 1] ^= i26;
                }
            }
        }
        FuzzerUtils.out.println("l4 i24 i25 = " + l4 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("i38 by3 iArr3 = " + i38 + "," + by3 + "," + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("fArr1 iArr4 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," + FuzzerUtils.checkSum(iArr4));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld dFld Test.lArrFld = " + Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(dFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.byArrFld dArrFld bArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) + "," + FuzzerUtils.checkSum(bArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$16 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  bMeth ->  bMeth vMeth mainTest
// DEBUG  iMeth ->  iMeth bMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
