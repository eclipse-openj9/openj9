// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 655131226L;

    public static volatile short sFld = 8558;

    public static double dFld = 0.50404;

    public static float[][] fArrFld = new float[N][N];

    public static boolean[] bArrFld = new boolean[N];

    public long[] lArrFld = new long[N];

    public static double[][] dArrFld = new double[N][N];

    public int[] iArrFld = new int[N];

    public double[] dArrFld1 = new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.313F);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.dArrFld, 2.38013);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l1, int i7) {
        if (ax$0) {
            int ax$2 = i7;
            try {
                float ax$1 = 0.00001F;
                if (i7 == 10)
                    ax$1++;
            } catch (Throwable ax$3) {
            } finally {
                i7 = ax$2;
            }
            return 1571646013;
        }
        int i8 = 39126, i9 = 10, i10 = -253, i11 = -3, i12 = 45840, i13 = -64169, i14 = -167, i15 = 6, i16 = -10, i17 = -14, i18 = 135, i19 = -172, i20 = 7, i21 = -155, i22 = 11, iArr[] = new int[N];
        boolean b = false;
        long l2 = -31179L, lArr[] = new long[N];
        float f2 = 0.448F;
        FuzzerUtils.init(iArr, -11289);
        FuzzerUtils.init(lArr, 5078038474508364417L);
        Test.instanceCount = Test.instanceCount;
        for (i8 = 7; 253 > i8; i8++) {
            if (i8 != 0) {
            }
            if (b)
                break;
            for (i10 = 1; 3 > i10; i10++) {
                float f1 = -1.202F;
                Test.bArrFld[i10 - 1] = b;
                f1 *= i11;
                Test.instanceCount *= i8;
                f1 += i9;
            }
            Test.instanceCount <<= i10;
        }
        for (i12 = 1; 110 > i12; i12++) {
            l1 = i8;
            for (i14 = 5; i14 > 1; --i14) {
                Test.instanceCount = i14;
                try {
                    i15 = (i16 / i15);
                    i13 = (i7 % i7);
                    iArr[i14 - 1] = (i10 / 161);
                } catch (ArithmeticException a_e) {
                }
                for (l2 = 1; 2 > l2; ++l2) {
                    lArr = lArr;
                    i13 = Test.sFld;
                    iArr[i14 + 1] += i9;
                    i15 += (int) (((l2 * l2) + i8) - i10);
                    i17 += (int) l2;
                    if (b)
                        break;
                }
            }
            for (i18 = 1; i18 < 5; ++i18) {
                if (b)
                    continue;
                i17 = (int) 1L;
                l1 <<= i19;
                iArr[i12 + 1] = -4532;
                i13 += i17;
                for (i20 = 1; i20 < 2; i20 += 2) {
                    i22 += (int) -74L;
                    iArr[i12] -= i9;
                    i13 += (int) f2;
                    if (b)
                        break;
                    Test.instanceCount *= l1;
                }
                Test.instanceCount = (long) f2;
                i9 += i18;
                i19 *= i18;
            }
        }
        long meth_res = l1 + i7 + i8 + i9 + (b ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + i15 + i16 + l2 + i17 + i18 + i19 + i20 + i21 + i22 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(int i5, int i6) {
        if (ax$9) {
            try {
                java.lang.Exception ax$10 = new RuntimeException();
                boolean ax$11 = true;
                if (!ax$11 && ax$10 != null)
                    ;
            } catch (Throwable ax$12) {
            } finally {
            }
            return;
        }
        float f = 49.814F;
        int i23 = 117, i24 = -136, i25 = 0, i26 = 40296, iArr1[] = new int[N];
        byte by = 101;
        boolean b1 = true;
        double d = 82.12462;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr1, 12);
        FuzzerUtils.init(lArr1, 3281643793905311981L);
        switch((((--i5) >>> 1) % 10) + 55) {
            case 55:
                Test.fArrFld[(i6 >>> 1) % N][(14 >>> 1) % N] += (Test.fArrFld[(i5 >>> 1) % N][(i6 >>> 1) % N] + i6);
                f += (i6 += (iMeth1(Test.instanceCount, i5) - i5));
                i23 = 223;
                do {
                    if (true)
                        break;
                    by >>>= (byte) Test.instanceCount;
                    if (i6 != 0) {
                        vMeth_check_sum += i5 + i6 + Float.floatToIntBits(f) + i23 + by + (b1 ? 1 : 0) + i24 + i25 + i26 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    Test.instanceCount += i5;
                    if (b1)
                        break;
                    iArr1[i23 - 1] <<= i5;
                    i24 = 1;
                    do {
                        i6 -= (int) Test.instanceCount;
                        i6 += i5;
                        i25 = 1;
                        while (++i25 < 1) {
                            Test.instanceCount += (i25 * by);
                            Test.instanceCount += i25;
                            Test.instanceCount += (i25 - i24);
                            i5 -= i24;
                            Test.bArrFld[i24] = b1;
                            Test.instanceCount += -9;
                            i5 &= i24;
                            iArr1 = iArr1;
                        }
                        Test.fArrFld[i24][i24] = i6;
                        if (b1) {
                            i5 += i24;
                            Test.sFld = (short) -10L;
                            i5 = i6;
                            Test.instanceCount += (((i24 * f) + i24) - i25);
                            i6 -= i6;
                            iArr1[i23 - 1] -= -89;
                            switch(((i23 % 8) * 5) + 95) {
                                case 134:
                                    i26 = 1;
                                    do {
                                        Test.instanceCount += i26;
                                        i6 += (((i26 * i24) + f) - i25);
                                        i6 <<= i5;
                                        i5 = i24;
                                        Test.instanceCount += (7L + (i26 * i26));
                                    } while (++i26 < 1);
                                    break;
                                case 114:
                                    Test.instanceCount <<= i26;
                                    break;
                                case 101:
                                    Test.instanceCount = by;
                                    break;
                                case 118:
                                    i6 = (int) Test.instanceCount;
                                case 107:
                                    i6 = 31100;
                                    break;
                                case 110:
                                    i5 = (int) Test.instanceCount;
                                case 100:
                                    Test.instanceCount += (i24 | Test.instanceCount);
                                    break;
                                case 129:
                                default:
                                    lArr1[i24] -= i5;
                            }
                        }
                    } while (++i24 < 3);
                } while (--i23 > 0);
            case 56:
                i6 = i25;
                break;
            case 57:
                lArr1[(i23 >>> 1) % N] = Test.instanceCount;
                break;
            case 58:
                i5 *= (int) 1568L;
            case 59:
                i6 <<= i5;
                break;
            case 60:
                i5 = i24;
            case 61:
                Test.sFld += (short) i26;
                break;
            case 62:
                i5 -= Test.sFld;
                break;
            case 63:
                iArr1[(i24 >>> 1) % N] *= i26;
                break;
            case 64:
                d += Test.instanceCount;
                break;
        }
        vMeth_check_sum += i5 + i6 + Float.floatToIntBits(f) + i23 + by + (b1 ? 1 : 0) + i24 + i25 + i26 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public int iMeth(int i1, long l, int i2) {
        if (ax$18) {
            int ax$21 = i1;
            try {
                char[] ax$20 = new char[] { (char) 0xF3F4 };
                char ax$19 = '\ud800';
                ax$20[i1] = ax$19;
            } catch (Throwable ax$22) {
            } finally {
                i1 = ax$21;
            }
            return -706740915;
        }
        int i3 = 6, i4 = 14, i27 = 6153, i28 = 0, i29 = 31752, i30 = -181, i31 = -91, i32 = -17, i33 = -179, i34 = 1, iArr2[] = new int[N];
        float f3 = -1.334F, fArr[] = new float[N];
        boolean b2 = false;
        long l3 = 2273271257L, l4 = 188L;
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr2, 56072);
        FuzzerUtils.init(dArr, 14.103984);
        FuzzerUtils.init(fArr, 0.462F);
        for (i3 = 11; i3 < 238; ++i3) {
            {
                java.io.PrintStream ax$15 = System.out;
                java.io.PrintStream ax$16 = System.err;
                java.io.PrintStream ax$17 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$17);
                System.setErr(ax$17);
                try {
                    ax$9 = true;
                    for (int ax$13 = 0; ax$13 < 9639; ax$13 += 1) vMeth(-1846889488, 1956874399);
                } catch (java.lang.Throwable ax$14) {
                } finally {
                    ax$9 = false;
                }
                System.setOut(ax$15);
                System.setErr(ax$16);
            }
            vMeth(i2, 0);
            iArr2[i3 + 1] /= (int) (i4 | 1);
            for (i27 = 1; 3 > i27; ++i27) {
                Test.instanceCount >>= 0L;
                l = i1;
                for (i29 = 1; 2 > i29; i29++) {
                    l *= 54678L;
                    i1 <<= 11703;
                    f3 *= i4;
                    try {
                        iArr2[i3 - 1] = (i30 / 45);
                        i30 = (iArr2[i3] % iArr2[i29]);
                        iArr2[i3 - 1] = (310734100 % i27);
                    } catch (ArithmeticException a_e) {
                    }
                }
                i31 <<= i1;
                if (false)
                    break;
                dArr[i3 + 1] *= i29;
                iArr2[i27 + 1] = i28;
                f3 += i31;
                i31 += i2;
                f3 = -7428L;
                iArr2[i3] = (int) Test.instanceCount;
            }
            i31 = (int) 1.64145;
            b2 = b2;
            b2 = b2;
            iArr2 = iArr2;
            lArrFld[i3] <<= 240;
            iArr2[i3 + 1] += i30;
            i31 += -5133;
            i28 -= (int) f3;
            i30 -= Test.sFld;
            for (i32 = 1; i32 < 3; ++i32) {
                l3 = 2;
                do {
                    i28 = (int) f3;
                    i31 -= (int) Test.instanceCount;
                } while (--l3 > 0);
            }
        }
        Test.dArrFld = Test.dArrFld;
        Test.dFld -= i2;
        for (l4 = 208; l4 > 13; --l4) {
            iArr2[(int) (l4)] = -166;
            i33 = i2;
        }
        long meth_res = i1 + l + i2 + i3 + i4 + i27 + i28 + i29 + i30 + Float.floatToIntBits(f3) + i31 + (b2 ? 1 : 0) + i32 + i33 + l3 + l4 + i34 + FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -9, i35 = 0, i36 = -13, i37 = 10701, i38 = 0, i39 = 44781, i40 = -5, i41 = -3;
        boolean b3 = false;
        float f5 = -1.522F;
        byte by1 = -40;
        i = (int) ((Test.instanceCount + (i--)) + iMeth(i, Test.instanceCount, i));
        for (i35 = 246; i35 > 13; i35--) {
            i += (int) Test.instanceCount;
            i += i;
            i36 -= (int) -17.620F;
            for (i37 = 1; 22 > i37; i37++) {
                i39 = 1;
                while (++i39 < 2) {
                    i36 += 154;
                    iArrFld[i37] = (int) Test.instanceCount;
                    i36 = (int) 12515L;
                    i = i38;
                    i += i35;
                    i |= (int) Test.instanceCount;
                    i38 -= (int) Test.instanceCount;
                    i36 = (int) Test.instanceCount;
                    b3 = b3;
                    i38 += (i39 + i36);
                    Test.fArrFld[i37][i35] = i38;
                    Test.instanceCount ^= i39;
                    i += (i39 * i39);
                    Test.bArrFld[i39] = b3;
                }
                b3 = b3;
                i40 = 2;
                do {
                    if (b3) {
                        Test.instanceCount >>= 41738;
                        f5 = i37;
                        i36 -= (int) f5;
                        iArrFld[i40] = (int) Test.instanceCount;
                        Test.fArrFld[i40 + 1][i37 + 1] -= f5;
                        Test.instanceCount *= i36;
                        Test.dFld -= Test.sFld;
                        switch((((-13 >>> 1) % 2) * 5) + 81) {
                            case 85:
                                Test.instanceCount += (((i40 * i39) + i) - Test.instanceCount);
                                i36 += i40;
                                Test.instanceCount += (((i40 * i35) + Test.instanceCount) - i37);
                                i36 += i40;
                                i = (int) 4937302120914994955L;
                                i36 *= i40;
                                i += (((i40 * Test.instanceCount) + i37) - Test.instanceCount);
                                i36 += i40;
                                i36 *= i;
                                i &= i36;
                                i += (11 + (i40 * i40));
                                b3 = b3;
                                dArrFld1[i37 + 1] = i40;
                                i36 <<= by1;
                                break;
                            case 91:
                                i -= (int) Test.instanceCount;
                                switch((i37 % 1) + 98) {
                                    case 98:
                                        lArrFld[i35 + 1] %= ((long) (f5) | 1);
                                        if (b3) {
                                            Test.instanceCount |= i40;
                                            f5 = i38;
                                            Test.instanceCount >>>= 62030L;
                                            Test.instanceCount += (((i40 * i40) + i37) - i38);
                                            i36 += i;
                                            switch((i35 % 6) + 31) {
                                                case 31:
                                                    i <<= i37;
                                                    i36 += Test.sFld;
                                                    by1 <<= (byte) i;
                                                    i36 = (int) Test.instanceCount;
                                                    i38 += (((i40 * f5) + i) - i);
                                                    i = i35;
                                                    i += (i40 * i40);
                                                    iArrFld[i37] = -12;
                                                    i += -64451;
                                                    f5 += 8;
                                                    i += (i40 * by1);
                                                    Test.instanceCount *= i39;
                                                    break;
                                                case 32:
                                                    i41 = (int) Test.instanceCount;
                                                    switch(((-12 >>> 1) % 2) + 32) {
                                                        case 32:
                                                            iArrFld[i35] = i38;
                                                            iArrFld[i35 - 1] = i38;
                                                            dArrFld1[(i >>> 1) % N] += -57;
                                                            by1 += (byte) (i40 - i37);
                                                            i38 = i40;
                                                        case 33:
                                                            i36 >>= i36;
                                                            break;
                                                        default:
                                                            f5 = (float) Test.dFld;
                                                    }
                                                    break;
                                                case 33:
                                                    i41 = i37;
                                                    break;
                                                case 34:
                                                case 35:
                                                    i38 -= i35;
                                                    break;
                                                case 36:
                                                    i += (i40 * i37);
                                                    break;
                                            }
                                        } else if (b3) {
                                            i38 += i40;
                                        } else if (b3) {
                                            i38 += (((i40 * i39) + Test.instanceCount) - i);
                                        } else {
                                            Test.instanceCount += i41;
                                        }
                                        break;
                                }
                        }
                    } else {
                        if (b3)
                            break;
                    }
                } while (--i40 > 0);
            }
        }
        FuzzerUtils.out.println("i i35 i36 = " + i + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 i38 i39 = " + i37 + "," + i38 + "," + i39);
        FuzzerUtils.out.println("b3 i40 f5 = " + (b3 ? 1 : 0) + "," + i40 + "," + Float.floatToIntBits(f5));
        FuzzerUtils.out.println("by1 i41 = " + by1 + "," + i41);
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fArrFld Test.bArrFld lArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.bArrFld) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test.dArrFld iArrFld dArrFld1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld1)));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$28) {
            try {
                java.lang.String ax$30 = "81958.05153739330";
                char[] ax$29 = new char[1];
                ax$30.getChars(2, 19, ax$29, 0);
            } catch (Throwable ax$31) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$9 = false;

    private static Boolean ax$18 = false;

    private static Boolean ax$28 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
