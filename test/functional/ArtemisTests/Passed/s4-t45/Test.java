// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.nio.channels.AsynchronousSocketChannel;
import java.security.KeyException;
import java.security.spec.InvalidKeySpecException;
import java.security.SignatureException;
import java.security.cert.CertificateParsingException;
import java.security.ProviderException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.cert.CertificateException;
import java.security.InvalidAlgorithmParameterException;
import java.security.GeneralSecurityException;
import java.security.NoSuchAlgorithmException;
import java.security.DigestException;
import java.security.InvalidKeyException;
import java.security.cert.CRLException;
import java.security.cert.CertificateEncodingException;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -60463L;

    public static short sFld = 6002;

    public static byte byFld = -51;

    public float fFld = -61.891F;

    public static long[] lArrFld = new long[N];

    public static int[] iArrFld = new int[N];

    public static short[] sArrFld = new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3869807791430647728L);
        FuzzerUtils.init(Test.iArrFld, 217);
        FuzzerUtils.init(Test.sArrFld, (short) 12360);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, int i3) {
        if (ax$15) {
            try {
                java.lang.String ax$71 = "4.248288785737604E-9";
                java.lang.Exception ax$80 = new RuntimeException();
                SecurityException ax$81 = new SecurityException(ax$80);
                if (!ax$81.getCause().equals(ax$80)) {
                }
                ax$81 = new SecurityException(ax$71, ax$80);
                if (!ax$81.getMessage().equals(ax$71) || !ax$81.getCause().equals(ax$80)) {
                }
                DigestException ax$72 = new DigestException(ax$80);
                if (!ax$72.getCause().equals(ax$80)) {
                }
                ax$72 = new DigestException(ax$71, ax$80);
                if (!ax$72.getMessage().equals(ax$71) || !ax$72.getCause().equals(ax$80)) {
                }
                GeneralSecurityException ax$83 = new GeneralSecurityException(ax$80);
                if (!ax$83.getCause().equals(ax$80)) {
                }
                ax$83 = new GeneralSecurityException(ax$71, ax$80);
                if (!ax$83.getMessage().equals(ax$71) || !ax$83.getCause().equals(ax$80)) {
                }
                InvalidAlgorithmParameterException ax$87 = new InvalidAlgorithmParameterException(ax$80);
                if (!ax$87.getCause().equals(ax$80)) {
                }
                ax$87 = new InvalidAlgorithmParameterException(ax$71, ax$80);
                if (!ax$87.getMessage().equals(ax$71) || !ax$87.getCause().equals(ax$80)) {
                }
                InvalidKeyException ax$74 = new InvalidKeyException(ax$80);
                if (!ax$74.getCause().equals(ax$80)) {
                }
                ax$74 = new InvalidKeyException(ax$71, ax$80);
                if (!ax$74.getMessage().equals(ax$71) || !ax$74.getCause().equals(ax$80)) {
                }
                InvalidKeySpecException ax$78 = new InvalidKeySpecException(ax$80);
                if (!ax$78.getCause().equals(ax$80)) {
                }
                ax$78 = new InvalidKeySpecException(ax$71, ax$80);
                if (!ax$78.getMessage().equals(ax$71) || !ax$78.getCause().equals(ax$80)) {
                }
                KeyException ax$85 = new KeyException(ax$80);
                if (!ax$85.getCause().equals(ax$80)) {
                }
                ax$85 = new KeyException(ax$71, ax$80);
                if (!ax$85.getMessage().equals(ax$71) || !ax$85.getCause().equals(ax$80)) {
                }
                KeyManagementException ax$75 = new KeyManagementException(ax$80);
                if (!ax$75.getCause().equals(ax$80)) {
                }
                ax$75 = new KeyManagementException(ax$71, ax$80);
                if (!ax$75.getMessage().equals(ax$71) || !ax$75.getCause().equals(ax$80)) {
                }
                KeyStoreException ax$88 = new KeyStoreException(ax$80);
                if (!ax$88.getCause().equals(ax$80)) {
                }
                ax$88 = new KeyStoreException(ax$71, ax$80);
                if (!ax$88.getMessage().equals(ax$71) || !ax$88.getCause().equals(ax$80)) {
                }
                NoSuchAlgorithmException ax$86 = new NoSuchAlgorithmException(ax$80);
                if (!ax$86.getCause().equals(ax$80)) {
                }
                ax$86 = new NoSuchAlgorithmException(ax$71, ax$80);
                if (!ax$86.getMessage().equals(ax$71) || !ax$86.getCause().equals(ax$80)) {
                }
                ProviderException ax$82 = new ProviderException(ax$80);
                if (!ax$82.getCause().equals(ax$80)) {
                }
                ax$82 = new ProviderException(ax$71, ax$80);
                if (!ax$82.getMessage().equals(ax$71) || !ax$82.getCause().equals(ax$80)) {
                }
                SignatureException ax$73 = new SignatureException(ax$80);
                if (!ax$73.getCause().equals(ax$80)) {
                }
                ax$73 = new SignatureException(ax$71, ax$80);
                if (!ax$73.getMessage().equals(ax$71) || !ax$73.getCause().equals(ax$80)) {
                }
                CRLException ax$79 = new CRLException(ax$80);
                if (!ax$79.getCause().equals(ax$80)) {
                }
                ax$79 = new CRLException(ax$71, ax$80);
                if (!ax$79.getMessage().equals(ax$71) || !ax$79.getCause().equals(ax$80)) {
                }
                CertificateException ax$76 = new CertificateException(ax$80);
                if (!ax$76.getCause().equals(ax$80)) {
                }
                ax$76 = new CertificateException(ax$71, ax$80);
                if (!ax$76.getMessage().equals(ax$71) || !ax$76.getCause().equals(ax$80)) {
                }
                CertificateParsingException ax$84 = new CertificateParsingException(ax$80);
                if (!ax$84.getCause().equals(ax$80)) {
                }
                ax$84 = new CertificateParsingException(ax$71, ax$80);
                if (!ax$84.getMessage().equals(ax$71) || !ax$84.getCause().equals(ax$80)) {
                }
                CertificateEncodingException ax$77 = new CertificateEncodingException(ax$80);
                if (!ax$77.getCause().equals(ax$80)) {
                }
                ax$77 = new CertificateEncodingException(ax$71, ax$80);
                if (!ax$77.getMessage().equals(ax$71) || !ax$77.getCause().equals(ax$80)) {
                }
            } catch (Throwable ax$89) {
            } finally {
            }
            return;
        }
        float f = 1.920F, f1 = 2.133F, fArr[] = new float[N];
        int i4 = -3, i5 = 0, i6 = 31858, i7 = -2795, i8 = -10, i9 = -2, i10 = 8, i11 = -184, i12 = -26474, i13 = -14, i14 = 143, iArr[] = new int[N];
        boolean b = false;
        double d = 15.104464;
        long l1 = 3202272186073596309L;
        byte by = -93;
        FuzzerUtils.init(fArr, -2.173F);
        FuzzerUtils.init(iArr, 10);
        i3 = (int) f;
        for (i4 = 5; i4 < 103; i4 += 3) {
            i5 += (int) f;
            b = b;
        }
        for (i6 = 4; i6 < 97; ++i6) {
            i7 += (i6 * i6);
            d += i8;
            Test.lArrFld = Test.lArrFld;
            l = i8;
            i7 = (int) l;
            try {
                i5 = (i6 % i7);
                i5 = (i3 / -30);
                i9 = (i6 % i8);
            } catch (ArithmeticException a_e) {
            }
            i5 <<= Test.sFld;
            d += 4L;
            Test.lArrFld[i6] = i5;
            for (i10 = 6; i10 > 1; i10--) {
                i3 += i10;
            }
            i7 += (int) Test.instanceCount;
            i12 = 1;
            do {
                d *= l1;
                f = Test.instanceCount;
                for (i13 = 1; i13 < 1; ++i13) {
                    Test.instanceCount -= (long) f;
                    fArr[i6] = Test.instanceCount;
                    try {
                        i14 = (i13 % i14);
                        i9 = (-132 / i4);
                        i8 = (iArr[i13 + 1] / -127);
                    } catch (ArithmeticException a_e) {
                    }
                    f += i11;
                    i3 |= (int) l1;
                    b = b;
                    d *= i8;
                    i14 = i13;
                    i8 &= 100;
                }
                f += i14;
            } while (++i12 < 6);
        }
        iArr[(i12 >>> 1) % N] = i9;
        i3 <<= 94;
        f1 = 1;
        do {
            l1 *= 43037;
            by += (byte) l1;
            if (b)
                break;
        } while (++f1 < 115);
        vMeth2_check_sum += l + i3 + Float.floatToIntBits(f) + i4 + i5 + (b ? 1 : 0) + i6 + i7 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + i12 + l1 + i13 + i14 + Float.floatToIntBits(f1) + by + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i, int i1, int i2) {
        int i15 = -3, i16 = -36266, i17 = 9, i18 = -57744, i19 = -53376, i20 = 61873, i21 = -2, iArr1[] = new int[N];
        double d1 = 23.77353, d2 = 60.68176;
        float f2 = 16.873F, f3 = 98.954F, fArr1[] = new float[N];
        FuzzerUtils.init(fArr1, 1.0F);
        FuzzerUtils.init(iArr1, 9);
        {
            java.io.PrintStream ax$92 = System.out;
            java.io.PrintStream ax$93 = System.err;
            java.io.PrintStream ax$94 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$94);
            System.setErr(ax$94);
            try {
                ax$15 = true;
                for (int ax$90 = 0; ax$90 < 6822; ax$90 += 1) vMeth2(695914997998971585L, 403986658);
            } catch (java.lang.Throwable ax$91) {
            } finally {
                ax$15 = false;
            }
            System.setOut(ax$92);
            System.setErr(ax$93);
        }
        vMeth2(Test.instanceCount, i1);
        i15 = 1;
        while (++i15 < 109) {
            fArr1[i15] = i2;
            i1 -= i;
            i1 -= i;
        }
        d1 += 52001;
        for (i16 = 1; i16 < 78; ++i16) {
            if (i != 0) {
                vMeth1_check_sum += i + i1 + i2 + i15 + Double.doubleToLongBits(d1) + i16 + i17 + Double.doubleToLongBits(d2) + i18 + Float.floatToIntBits(f2) + i19 + i20 + Float.floatToIntBits(f3) + i21 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr1);
                return;
            }
            i = i16;
            Test.lArrFld[i16] = Test.sFld;
            for (d2 = 1; d2 < 7; d2++) {
                Test.byFld += (byte) f2;
            }
            i1 = (int) 88.421F;
            iArr1[i16 + 1] *= (int) -1.799F;
            i18 += (int) (1.171F + (i16 * i16));
            Test.instanceCount += (i16 * i16);
            i19 = 1;
            while (++i19 < 7) {
                i2 = i17;
                Test.lArrFld[i16] -= (long) 14.665F;
                Test.sFld += (short) i19;
                f2 += (i19 + i15);
                i2 = i15;
                i = i2;
                i20 = 1;
                while (++i20 < 1) {
                    i1 += i1;
                }
                Test.instanceCount *= i17;
                Test.lArrFld[i19] -= i15;
                for (f3 = 1; f3 < 1; ++f3) {
                    i1 = i18;
                    iArr1 = iArr1;
                    iArr1[i16 - 1] = i1;
                    i1 = -151;
                    Test.instanceCount *= i19;
                    i18 *= (int) Test.instanceCount;
                    i21 += (int) (((f3 * i19) + i20) - i1);
                    if (false)
                        continue;
                    i2 += (int) f3;
                }
            }
        }
        vMeth1_check_sum += i + i1 + i2 + i15 + Double.doubleToLongBits(d1) + i16 + i17 + Double.doubleToLongBits(d2) + i18 + Float.floatToIntBits(f2) + i19 + i20 + Float.floatToIntBits(f3) + i21 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {
        int i22 = -14695, i23 = -3144, i24 = -10, i25 = -9394, i26 = -40093, i27 = 93, i28 = -24059, i29 = -214, i30 = -9, i31 = 7799, i32 = 70, i33 = -30;
        double d3 = 1.104336;
        float f4 = -8.170F;
        boolean b1 = true;
        long l2 = -4704758016918427682L;
        vMeth1(i22, i22, i22);
        for (i23 = 2; i23 < 102; ++i23) {
            {
                java.io.PrintStream ax$0 = System.out;
                java.io.PrintStream ax$1 = System.err;
                java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$2);
                System.setErr(ax$2);
                {
                    boolean ax$7 = false;
                    for (int ax$6 = -1777; ax$6 < 7546; ax$6 += 2) {
                        if (!ax$7) {
                            ax$7 = true;
                            {
                                System.setOut(ax$0);
                                System.setErr(ax$1);
                                for (i25 = 1; 6 > i25; ++i25) {
                                    d3 *= i25;
                                    for (i27 = 2; i27 > i23; --i27) {
                                        Test.iArrFld[i27 + 1] >>>= i25;
                                        f4 += Test.instanceCount;
                                        if (b1)
                                            continue;
                                        Test.byFld >>= (byte) 220;
                                        if (b1)
                                            continue;
                                        b1 = b1;
                                        i28 -= (int) l2;
                                        i26 -= i22;
                                    }
                                    i26 ^= i24;
                                }
                                System.setOut(ax$2);
                                System.setErr(ax$2);
                            }
                        }
                        try {
                            AsynchronousSocketChannel.open();
                        } catch (Throwable ax$5) {
                        } finally {
                        }
                    }
                }
                System.setOut(ax$0);
                System.setErr(ax$1);
            }
            for (i29 = 1; i29 < 6; ++i29) {
                Test.instanceCount = Test.sFld;
                l2 -= i23;
                for (i31 = 1; 2 > i31; i31++) {
                    i32 = (int) l2;
                    Test.lArrFld = Test.lArrFld;
                    i24 += -14;
                    i22 >>= i30;
                    d3 -= i25;
                    i22 <<= i27;
                    f4 *= i29;
                    Test.byFld += (byte) (i31 * i31);
                }
                i33 = 2;
                while (--i33 > 0) {
                    l2 += i30;
                    i30 += i33;
                    Test.instanceCount = Test.instanceCount;
                    Test.lArrFld[i29 - 1] = i25;
                    i24 = -65047;
                    i24 += i23;
                    i28 += (int) Test.instanceCount;
                    Test.instanceCount = i28;
                    i26 += (i33 + i25);
                    d3 = l2;
                }
            }
        }
        vMeth_check_sum += i22 + i23 + i24 + i25 + i26 + Double.doubleToLongBits(d3) + i27 + i28 + Float.floatToIntBits(f4) + (b1 ? 1 : 0) + l2 + i29 + i30 + i31 + i32 + i33;
    }

    public void mainTest(String[] strArr1) {
        int i34 = -67, i35 = -168, i36 = -39534, i37 = -1638, i39 = 21235, i40 = 226, i41 = 60771, i42 = 63;
        double d4 = 109.5105;
        long l3 = 6L;
        boolean b2 = true, bArr[] = new boolean[N];
        byte[] byArr = new byte[N];
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(byArr, (byte) -15);
        vMeth();
        Test.sArrFld[(i34 >>> 1) % N] = (short) d4;
        Test.lArrFld[(i34 >>> 1) % N] -= i34;
        Test.iArrFld[(i34 >>> 1) % N] = (int) -6L;
        bArr = bArr;
        i34 <<= i34;
        fFld = i34;
        i35 = 1;
        do {
            Test.byFld <<= (byte) Test.instanceCount;
            l3 += i35;
            i34 = i35;
            Test.instanceCount += i35;
            i34 += i35;
        } while (++i35 < 86);
        {
            java.io.PrintStream ax$12 = System.out;
            java.io.PrintStream ax$13 = System.err;
            java.io.PrintStream ax$14 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$14);
            System.setErr(ax$14);
            try {
                for (int ax$10 = -1465; ax$10 < 6525; ax$10 += 1) {
                    int ax$8 = i40;
                    try {
                        if (i40 != 4) {
                        }
                    } catch (Throwable ax$9) {
                    } finally {
                        i40 = ax$8;
                    }
                }
            } catch (Throwable ax$11) {
            }
            System.setOut(ax$12);
            System.setErr(ax$13);
        }
        i34 >>>= i35;
        i34 = i35;
        i34 = i35;
        i34 *= i35;
        for (i36 = 3; i36 < 135; ++i36) {
            Test.iArrFld[i36 - 1] *= -9;
            i34 += (((i36 * fFld) + Test.byFld) - i35);
            l3 = i37;
            i34 -= (int) -7.285F;
        }
        Test.lArrFld[(i37 >>> 1) % N] ^= i34;
        i39 = 1;
        do {
            for (i40 = 1; i40 < 28; i40++) {
                i42 = 1;
                do {
                    i41 += (i42 * Test.byFld);
                    fFld = i40;
                    fFld *= l3;
                    Test.iArrFld[i39] -= i35;
                    i37 |= (int) l3;
                    d4 *= i35;
                    i41 += (int) fFld;
                    i37 += (int) fFld;
                    fFld = 13;
                    switch(((i39 % 8) * 5) + 84) {
                        case 116:
                            i41 = (int) Test.instanceCount;
                            if (b2) {
                                i34 = i42;
                            } else if (b2) {
                                Test.sFld = (short) l3;
                                d4 = -10;
                                i41 += (i42 * i42);
                                Test.instanceCount += (((i42 * l3) + i36) - i40);
                                i34 += (i42 + i42);
                                i41 = i42;
                                try {
                                    Test.iArrFld[(202 >>> 1) % N] = (Test.iArrFld[i39] % 1462265135);
                                    i37 = (i39 / i35);
                                    i37 = (11277 % i37);
                                } catch (ArithmeticException a_e) {
                                }
                                try {
                                    i37 = (i36 % 299246937);
                                    i34 = (Test.iArrFld[i40 + 1] % -23807);
                                    i34 = (-294957629 / i39);
                                } catch (ArithmeticException a_e) {
                                }
                                l3 += (i42 * i42);
                                i41 = -25503;
                            } else if (true) {
                                i41 += (((i42 * i40) + Test.instanceCount) - i42);
                                switch(((i34 >>> 1) % 6) + 109) {
                                    case 109:
                                        l3 &= i34;
                                        l3 += i37;
                                        switch(((i39 % 5) * 5) + 56) {
                                            case 81:
                                                i41 -= i40;
                                                i34 += (int) Test.instanceCount;
                                                i41 = (int) Test.instanceCount;
                                                if (true) {
                                                    Test.sFld += (short) (i42 * i42);
                                                    Test.instanceCount -= i34;
                                                    fFld = -2659;
                                                    i41 += (i42 * fFld);
                                                    i41 = i40;
                                                    Test.iArrFld[i40] -= (int) Test.instanceCount;
                                                    i41 += (((i42 * i40) + i40) - fFld);
                                                    i37 += (((i42 * i39) + i35) - i40);
                                                    i34 >>= i41;
                                                    d4 -= l3;
                                                }
                                                i37 /= (int) -885852595050139957L;
                                                i37 *= i41;
                                                Test.instanceCount += (((i42 * i40) + i37) - i39);
                                                if (false)
                                                    continue;
                                                i41 += i42;
                                                if (false)
                                                    continue;
                                                byArr[i40] ^= (byte) l3;
                                                break;
                                            case 74:
                                                Test.lArrFld[i39 + 1] -= 1;
                                            case 67:
                                                i34 *= (int) d4;
                                                break;
                                            case 78:
                                                i34 &= i36;
                                                break;
                                            case 58:
                                                i37 += i42;
                                                break;
                                            default:
                                        }
                                        break;
                                    case 110:
                                        if (b2)
                                            break;
                                        break;
                                    case 111:
                                        Test.instanceCount += (i42 * i42);
                                        break;
                                    case 112:
                                        i37 >>= i37;
                                        break;
                                    case 113:
                                        Test.instanceCount += i42;
                                        break;
                                    case 114:
                                        i34 += (i42 * i42);
                                    default:
                                        Test.iArrFld[i42] = Test.byFld;
                                }
                            } else {
                                i37 = i34;
                            }
                            break;
                        case 93:
                            i41 -= (int) d4;
                            break;
                        case 104:
                            i34 = i40;
                            break;
                        case 94:
                            i34 -= i42;
                            break;
                        case 111:
                            if (b2)
                                break;
                            break;
                        case 107:
                            i34 <<= (int) l3;
                            break;
                        case 105:
                        case 89:
                            i37 |= i39;
                            break;
                        default:
                            d4 *= d4;
                    }
                } while (++i42 < 2);
            }
        } while (++i39 < 185);
        FuzzerUtils.out.println("i34 d4 i35 = " + i34 + "," + Double.doubleToLongBits(d4) + "," + i35);
        FuzzerUtils.out.println("l3 i36 i37 = " + l3 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("i39 i40 i41 = " + i39 + "," + i40 + "," + i41);
        FuzzerUtils.out.println("i42 b2 bArr = " + i42 + "," + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.byFld = " + Test.instanceCount + "," + Test.sFld + "," + Test.byFld);
        FuzzerUtils.out.println("fFld Test.lArrFld Test.iArrFld = " + Float.floatToIntBits(fFld) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.sArrFld = " + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$15 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
