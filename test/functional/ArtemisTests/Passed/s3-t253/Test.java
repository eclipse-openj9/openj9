// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.UUID;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -2297843620600618900L;

    public static volatile double dFld = 13.7660;

    public static int iFld = -56074;

    public static short sFld = 1686;

    public boolean bFld = true;

    public boolean bFld1 = true;

    public static volatile float[] fArrFld = new float[N];

    public static long[][] lArrFld = new long[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 75.264F);
        FuzzerUtils.init(Test.lArrFld, -2455644129L);
    }

    public static long lMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long lMeth1_check_sum = 0;

    public static long lMeth1(float f, double d, long l1) {
        if (ax$22) {
            int ax$25 = iFld;
            float ax$26 = f;
            try {
                float[] ax$23 = new float[10];
                float ax$24 = 2;
                ax$23[iFld + 0] = ax$24;
                ax$23[iFld + 1] = f;
            } catch (Throwable ax$27) {
            } finally {
                iFld = ax$25;
                f = ax$26;
            }
            return -7486527564467012709L;
        }
        int i3 = 150, i4 = 61, i5 = 120, i6 = -61, i7 = -1, iArr[][] = new int[N][N];
        double d1 = 54.6939;
        long[][] lArr = new long[N][N];
        FuzzerUtils.init(iArr, 5);
        FuzzerUtils.init(lArr, -15L);
        i3 = 1;
        do {
            Test.instanceCount *= -5;
            i4 = 4;
            do {
                iArr[i4 + 1][i3] -= (int) l1;
                iArr[i3 - 1] = iArr[i4];
                i5 = 46052;
                i5 &= i4;
                i5 += (i4 + i5);
                switch((i4 % 7) + 83) {
                    case 83:
                    case 84:
                        i5 = i4;
                        iArr[i3][i3] ^= i5;
                        iArr[i4][i3] %= (int) (l1 | 1);
                        if (true)
                            break;
                        f += 0;
                        i5 = i4;
                        i5 -= i3;
                        l1 += i4;
                        break;
                    case 85:
                        iArr[i4][i3 - 1] = i3;
                        d += i5;
                        i5 += i3;
                        i5 += (int) Test.instanceCount;
                        break;
                    case 86:
                        Test.instanceCount += (((i4 * i3) + i5) - i4);
                        if (i3 != 0) {
                        }
                        break;
                    case 87:
                        Test.fArrFld = Test.fArrFld;
                        Test.instanceCount *= (long) f;
                        Test.instanceCount = 11;
                        try {
                            i5 = (-198 % i4);
                            i5 = (-65 / i3);
                            i5 = (i3 % i3);
                        } catch (ArithmeticException a_e) {
                        }
                        for (i6 = 1; i6 < 1; i6 += 2) {
                            i7 *= i7;
                            i7 += (((i6 * i5) + i6) - i6);
                            Test.fArrFld[i6 - 1] += i3;
                            i7 += i7;
                            iArr[i3][i6 - 1] = (int) Test.instanceCount;
                            i5 -= i6;
                            l1 >>= -169;
                            lArr[i3 + 1][i4] = Test.instanceCount;
                            l1 -= l1;
                        }
                        break;
                    case 88:
                        d1 += i4;
                        break;
                    case 89:
                        iArr[i3][i3 + 1] -= i5;
                    default:
                        i7 += i4;
                }
            } while (--i4 > 0);
        } while (++i3 < 164);
        long meth_res = Float.floatToIntBits(f) + Double.doubleToLongBits(d) + l1 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        lMeth1_check_sum += meth_res;
        return (long) meth_res;
    }

    public static int iMeth(long l, int i2) {
        float f1 = 16.27F;
        int i8 = -41667, i9 = 12, i10 = -63157, i11 = -1, i12 = -6172, i13 = 8, i14 = -7, iArr1[] = new int[N], iArr2[][] = new int[N][N];
        double d2 = 46.130252;
        short s = 23959, sArr[] = new short[N];
        byte by = 68, byArr[] = new byte[N];
        long[] lArr1 = new long[N];
        FuzzerUtils.init(byArr, (byte) -41);
        FuzzerUtils.init(sArr, (short) -217);
        FuzzerUtils.init(iArr1, 4);
        FuzzerUtils.init(iArr2, -40416);
        FuzzerUtils.init(lArr1, 3766799846L);
        l += Long.reverseBytes(lMeth1(f1, Test.dFld, Test.instanceCount));
        i8 = 1;
        while (++i8 < 199) {
            d2 = 1;
            do {
                i2 -= i2;
                i2 *= i2;
                for (i9 = 1; i9 < 3; i9++) {
                    i2 -= 32616;
                    i2 += (((i9 * i9) + f1) - i9);
                }
                l = i10;
            } while ((d2 += 3) < 3);
            {
                java.io.PrintStream ax$5 = System.out;
                java.io.PrintStream ax$6 = System.err;
                java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$7);
                System.setErr(ax$7);
                try {
                    for (int ax$3 = -363; ax$3 < 8533; ax$3 += 1) {
                        int ax$1 = i9;
                        try {
                            boolean[] ax$0 = { true, false, false, false, false, false, false };
                            try {
                                if (!ax$0[i9])
                                    System.out.print("   <-- error!");
                            } catch (Exception exception) {
                            }
                        } catch (Throwable ax$2) {
                        } finally {
                            i9 = ax$1;
                        }
                    }
                } catch (Throwable ax$4) {
                }
                System.setOut(ax$5);
                System.setErr(ax$6);
            }
            if (i8 != 0) {
            }
            byArr[i8 - 1] -= (byte) 1.952F;
            sArr = sArr;
            for (i11 = 1; i11 < 3; ++i11) {
                f1 += (i11 - s);
                iArr1[i11 + 1] <<= i2;
                i2 = (int) Test.instanceCount;
                f1 -= i12;
                for (i13 = i11; i13 < 2; i13++) {
                    iArr2 = iArr2;
                    Test.fArrFld[i11 - 1] = i10;
                    try {
                        i2 = (-79 % i2);
                        i12 = (i8 / -36);
                        i12 = (i9 % i11);
                    } catch (ArithmeticException a_e) {
                    }
                    i10 -= -16558;
                    f1 = i2;
                    sArr[i13 - 1] <<= (short) l;
                    switch(((i9 >>> 1) % 2) + 124) {
                        case 124:
                            i12 += -41646;
                            f1 -= i9;
                            i2 += (i13 ^ i13);
                            i14 += (((i13 * f1) + i13) - i10);
                            i14 -= i13;
                            f1 = i2;
                            i10 = i12;
                            s += (short) (((i13 * i8) + by) - i14);
                            i12 += (i13 * i13);
                            break;
                        case 125:
                            iArr1[i8 + 1] >>>= i14;
                            try {
                                i10 = (iArr1[i13 + 1] / i14);
                                i2 = (Test.iFld % -214);
                                i12 = (iArr2[i11][i11 + 1] / -48841);
                            } catch (ArithmeticException a_e) {
                            }
                            lArr1 = FuzzerUtils.long1array(N, (long) 226L);
                            break;
                        default:
                            by ^= (byte) i11;
                    }
                }
            }
        }
        long meth_res = l + i2 + Float.floatToIntBits(f1) + i8 + Double.doubleToLongBits(d2) + i9 + i10 + i11 + i12 + s + i13 + i14 + by + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static long lMeth(int i1) {
        if (ax$33) {
            try {
                java.util.UUID ax$34 = new UUID(34L, 64L);
                java.util.UUID ax$35 = new UUID(35L, 63L);
                if (ax$34.equals(ax$35))
                    ;
            } catch (Throwable ax$36) {
            } finally {
            }
            return -4398709108531707175L;
        }
        int i15 = -27093, i16 = -19009, i17 = -28629, i18 = -10, i19 = -44883, i20 = -82, i21 = -125, iArr3[] = new int[N];
        byte by1 = -4;
        boolean b = true;
        float f2 = 32.760F;
        long[] lArr2 = new long[N];
        double[][] dArr = new double[N][N];
        FuzzerUtils.init(lArr2, -3948348725L);
        FuzzerUtils.init(iArr3, 56911);
        FuzzerUtils.init(dArr, -1.120502);
        iMeth(Test.instanceCount, 51290);
        for (i15 = 3; i15 < 84; i15++) {
            lArr2 = lArr2;
            by1 -= (byte) i15;
            for (i17 = 7; i15 < i17; --i17) {
                if (i16 != 0) {
                }
            }
            i1 -= Test.iFld;
            i16 += i15;
            Test.instanceCount += (((i15 * i18) + i15) - Test.iFld);
            Test.instanceCount = (long) -2.111265;
            i18 += i17;
            b = true;
            if (false)
                continue;
            i1 /= (int) (i18 | 1);
            i19 = 1;
            do {
                lArr2[i19] *= Test.iFld;
                for (i20 = 1; 1 > i20; ++i20) {
                    b = true;
                    i18 = i1;
                    Test.iFld += (((i20 * i16) + f2) - Test.instanceCount);
                    iArr3[i20 + 1] = Test.sFld;
                    switch((i19 % 9) + 25) {
                        case 25:
                            i16 -= i17;
                            i1 = i17;
                            dArr[i15 - 1][i19] = i19;
                            Test.iFld += i20;
                            switch((i15 % 3) + 72) {
                                case 72:
                                    f2 = i17;
                                    i18 >>= i1;
                                    i18 = (int) 4.316F;
                                    f2 += (((i20 * i20) + i16) - f2);
                                    i21 = i16;
                                    i16 += (((i20 * i19) + f2) - Test.instanceCount);
                                    Test.instanceCount = i21;
                                    try {
                                        i18 = (9357 % i16);
                                        i18 = (i18 % 127851381);
                                        iArr3[i19] = (69 % i17);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    Test.instanceCount += (i20 * i20);
                                    iArr3[i15 + 1] -= i18;
                                    break;
                                case 73:
                                    i16 += (int) Test.dFld;
                                    break;
                                case 74:
                                    Test.sFld = (short) Test.iFld;
                            }
                            break;
                        case 26:
                            Test.iFld *= -27797;
                        case 27:
                            i1 -= Test.sFld;
                            break;
                        case 28:
                        case 29:
                            lArr2[i19] ^= i18;
                            break;
                        case 30:
                            b = b;
                            break;
                        case 31:
                            i21 >>= -60153;
                            break;
                        case 32:
                            iArr3[i19 - 1] >>= i19;
                            break;
                        case 33:
                            Test.sFld = (short) i21;
                            break;
                    }
                }
            } while (++i19 < 7);
        }
        long meth_res = i1 + i15 + i16 + by1 + i17 + i18 + (b ? 1 : 0) + i19 + i20 + i21 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(iArr3) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -13, i23 = -31829, i24 = 13, i25 = 31, i26 = -2, iArr4[] = new int[N];
        byte by2 = 39;
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr4, -161);
        bArr[(i >>> 1) % N] = (Math.max((int) (i + Test.instanceCount), (int) (Test.instanceCount * i)) <= Long.reverseBytes(lMeth(-7)));
        for (int i22 : iArr4) {
            Test.iFld = i;
            i22 *= -6564;
            for (i23 = 1; i23 < 20; i23++) {
                float f3 = 23.359F;
                i22 += (((i23 * i24) + Test.instanceCount) - f3);
                Test.dFld = i23;
                i22 = by2;
                i += (i23 * i23);
                for (i25 = 1; i25 < 2; i25++) {
                    Test.dFld = Test.instanceCount;
                    switch(((i25 % 7) * 5) + 116) {
                        case 128:
                            i26 *= by2;
                            i26 += i;
                            i22 >>= i22;
                            Test.instanceCount -= -11L;
                            f3 += 60.752F;
                            f3 = f3;
                            Test.iFld = i26;
                            break;
                        case 123:
                            i >>= i23;
                            Test.iFld -= Test.iFld;
                            Test.instanceCount = Test.instanceCount;
                            if (bFld) {
                                Test.fArrFld[i23 + 1] -= Test.instanceCount;
                                i -= -180;
                                Test.dFld += i23;
                            } else {
                                Test.instanceCount -= -4;
                                i22 <<= i22;
                                Test.instanceCount ^= 10540;
                                by2 += (byte) i26;
                            }
                            break;
                        case 150:
                            i26 &= (int) 5083486749451760549L;
                            Test.instanceCount += (i25 ^ Test.instanceCount);
                            i22 += (i25 - Test.sFld);
                            switch((i25 % 1) + 122) {
                                case 122:
                                    i22 = i23;
                                    switch((i23 % 8) + 14) {
                                        case 14:
                                            Test.sFld += (short) i23;
                                            f3 = (float) Test.dFld;
                                            i22 >>>= i25;
                                            f3 += f3;
                                            Test.instanceCount = (long) f3;
                                            i22 += (int) Test.instanceCount;
                                        case 15:
                                            Test.sFld += (short) i25;
                                            i22 += i22;
                                            break;
                                        case 16:
                                            Test.iFld >>= i;
                                            f3 = i24;
                                            i24 = i25;
                                            i26 -= -101;
                                            if (false)
                                                continue;
                                            i22 += (int) Test.instanceCount;
                                            i26 -= i24;
                                        case 17:
                                            Test.iFld -= (int) f3;
                                            i22 = i23;
                                            if (bFld1) {
                                                i26 += (i25 ^ Test.iFld);
                                                i22 = i25;
                                            }
                                            Test.instanceCount -= Test.instanceCount;
                                            i = i24;
                                            f3 *= i26;
                                            i24 = -9;
                                            i22 += (i25 - i24);
                                            Test.sFld >>>= by2;
                                            break;
                                        case 18:
                                            Test.iFld -= i;
                                            Test.iFld ^= i22;
                                            by2 -= (byte) 106;
                                            Test.dFld -= f3;
                                            {
                                                java.io.PrintStream ax$8 = System.out;
                                                java.io.PrintStream ax$9 = System.err;
                                                java.io.PrintStream ax$10 = new java.io.PrintStream(new java.io.OutputStream() {

                                                    @Override
                                                    public void write(int b) throws java.io.IOException {
                                                        // DO NOTHING: DISCARD ALL OUTPUTS
                                                    }
                                                });
                                                System.setOut(ax$10);
                                                System.setErr(ax$10);
                                                {
                                                    boolean ax$12 = false;
                                                    for (int ax$11 = -2674; ax$11 < 2942; ax$11 += 7) {
                                                        if (!ax$12) {
                                                            ax$12 = true;
                                                            {
                                                                System.setOut(ax$8);
                                                                System.setErr(ax$9);
                                                                if (bFld1) {
                                                                    i26 += i25;
                                                                    i += i25;
                                                                }
                                                                System.setOut(ax$10);
                                                                System.setErr(ax$10);
                                                            }
                                                        }
                                                    }
                                                }
                                                System.setOut(ax$8);
                                                System.setErr(ax$9);
                                            }
                                            i24 = (int) Test.instanceCount;
                                            iArr4[i25 + 1] = i23;
                                            Test.instanceCount += (i25 * i25);
                                            break;
                                        case 19:
                                            i24 = Test.iFld;
                                            i24 += (((i25 * Test.iFld) + Test.iFld) - i26);
                                            Test.instanceCount = i26;
                                        case 20:
                                            try {
                                                i22 = (iArr4[i25 - 1] / iArr4[i25 - 1]);
                                                i24 = (i25 % i);
                                                i24 = (i / iArr4[i23]);
                                            } catch (ArithmeticException a_e) {
                                            }
                                        case 21:
                                            i24 <<= i24;
                                            break;
                                    }
                                    break;
                                default:
                                    Test.dFld -= -14L;
                            }
                            break;
                        case 133:
                            Test.sFld *= (short) Test.instanceCount;
                            break;
                        case 142:
                            f3 *= 125.814F;
                        case 144:
                            Test.lArrFld[i23 - 1][i23 + 1] = i23;
                            break;
                        case 149:
                            i26 = (int) f3;
                            break;
                        default:
                            i = i22;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i i23 i24 = " + i + "," + i23 + "," + i24);
        FuzzerUtils.out.println("by2 i25 i26 = " + by2 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("bArr iArr4 = " + FuzzerUtils.checkSum(bArr) + "," + FuzzerUtils.checkSum(iArr4));
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld bFld bFld1 = " + Test.sFld + "," + (bFld ? 1 : 0) + "," + (bFld1 ? 1 : 0));
        FuzzerUtils.out.println("Test.fArrFld Test.lArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
            {
                java.io.PrintStream ax$19 = System.out;
                java.io.PrintStream ax$20 = System.err;
                java.io.PrintStream ax$21 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$21);
                System.setErr(ax$21);
                try {
                    for (int ax$17 = -785; ax$17 < 8047; ax$17 += 1) {
                        int ax$15 = iFld;
                        try {
                            float ax$13 = 2;
                            float ax$14 = 15.0f;
                            if (Float.floatToRawIntBits(-(ax$13 - ax$14)) == Float.floatToRawIntBits(-0.0f)) {
                                iFld++;
                            }
                        } catch (Throwable ax$16) {
                        } finally {
                            iFld = ax$15;
                        }
                    }
                } catch (Throwable ax$18) {
                }
                System.setOut(ax$19);
                System.setErr(ax$20);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$22 = false;

    private static Boolean ax$33 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  lMeth ->  lMeth mainTest
// DEBUG  iMeth ->  iMeth lMeth mainTest
// DEBUG  lMeth1 ->  lMeth1 iMeth lMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
