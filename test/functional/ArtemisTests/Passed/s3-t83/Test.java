// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.lang.reflect.Array;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 9L;

    public static volatile int iFld = 32010;

    public static double dFld = 1.26015;

    public static short sFld = 18169;

    public static boolean bFld = true;

    public byte byFld = -82;

    public static int[] iArrFld = new int[N];

    public static long[] lArrFld = new long[N];

    public static double[][] dArrFld = new double[N][N];

    public static float[][] fArrFld = new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -141);
        FuzzerUtils.init(Test.lArrFld, -14L);
        FuzzerUtils.init(Test.dArrFld, 73.10325);
        FuzzerUtils.init(Test.fArrFld, 0.757F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, int i2) {
        if (ax$14) {
            try {
                java.lang.Object ax$15 = "$opt$noinline$setVolatileIntField";
                if (Array.getInt(ax$15, 0) != 5)
                    ;
            } catch (Throwable ax$16) {
            } finally {
            }
            return -1620277249;
        }
        float f1 = 0.351F, fArr[] = new float[N];
        int i3 = -3, i4 = -191, i5 = -177, i6 = -144, i7 = 2379, i8 = -3, i9 = 39073, i10 = 9572;
        short s1 = -26524;
        byte by = 37;
        boolean b = false, b1 = false;
        double d = 2.7766, dArr[] = new double[N];
        FuzzerUtils.init(dArr, 0.3651);
        FuzzerUtils.init(fArr, 2.423F);
        f1 *= i2;
        i3 = 1;
        do {
            i2 *= (int) f1;
            try {
                Test.iArrFld[i3 - 1] = (i3 / Test.iFld);
                Test.iFld = (Test.iArrFld[i3] % Test.iArrFld[i3 + 1]);
                Test.iFld = (Test.iFld / -197);
            } catch (ArithmeticException a_e) {
            }
            Test.iFld += i3;
            Test.iArrFld[i3] -= i3;
            Test.iArrFld[i3] >>= i3;
            s1 -= (short) -42465;
            for (i4 = 1; 3 > i4; i4++) {
                l += (48260 + (i4 * i4));
                Test.iFld *= i2;
                f1 = i3;
                if (Test.iFld != 0) {
                }
                i2 += (i4 | (long) f1);
                Test.iArrFld[i3] += s1;
                i6 = 1;
                do {
                    i5 = by;
                } while (++i6 < 2);
            }
            Test.iFld = Test.iFld;
            b = b1;
            b = b1;
        } while (++i3 < 221);
        for (d = 7; d < 146; ++d) {
            dArr[(int) (d - 1)] -= i5;
            i8 = 1;
            do {
                for (i9 = 4; 1 < i9; --i9) {
                    s1 = (short) i8;
                    Test.iFld = i9;
                    s1 >>= (short) i5;
                    i7 = by;
                    f1 *= 24907L;
                    f1 = 0L;
                    i2 += (i9 * i9);
                    switch(((i9 % 6) * 5) + 6) {
                        case 29:
                            f1 *= -1.321F;
                            switch((int) ((d % 2) + 16)) {
                                case 16:
                                    Test.dFld = i7;
                                    i5 += (i9 * i10);
                                    Test.dFld += i9;
                                    break;
                                case 17:
                                    Test.iFld += i7;
                                    break;
                            }
                        case 24:
                            fArr[(int) (d)] += i3;
                            break;
                        case 33:
                            Test.lArrFld[(int) (d + 1)] += -8;
                        case 27:
                            Test.instanceCount = (long) 1.405F;
                            break;
                        case 7:
                            by = (byte) l;
                            break;
                        case 26:
                            if (i5 != 0) {
                            }
                        default:
                            l = l;
                    }
                }
            } while ((i8 += 3) < 4);
        }
        long meth_res = l + i2 + Float.floatToIntBits(f1) + i3 + s1 + i4 + i5 + i6 + by + (b ? 1 : 0) + (b1 ? 1 : 0) + Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1() {
        if (ax$22) {
            long ax$23 = iMeth_check_sum;
            int ax$24 = iFld;
            try {
                while (iFld-- > 0) {
                    iMeth_check_sum = iMeth_check_sum << 8;
                }
            } catch (Throwable ax$25) {
            } finally {
                iMeth_check_sum = ax$23;
                iFld = ax$24;
            }
            return;
        }
        float f = 2.220F, fArr1[] = new float[N];
        int i11 = 3, i12 = -2688, i13 = -117, i14 = -9, i15 = 21977;
        byte by1 = 17, byArr[] = new byte[N];
        long l1 = 9134729367288548466L;
        double[] dArr1 = new double[N];
        FuzzerUtils.init(dArr1, 0.31832);
        FuzzerUtils.init(byArr, (byte) 43);
        FuzzerUtils.init(fArr1, 56.506F);
        Test.iFld = ((Test.iFld--) + Math.abs(Test.iFld));
        f -= -7L;
        Test.dFld += iMeth(Test.instanceCount, Test.iFld);
        i11 = 1;
        while (++i11 < 96) {
            for (i12 = 1; i12 < 6; ++i12) {
                i13 += (int) f;
                i13 += i12;
                Test.iArrFld[i12 - 1] = i13;
                dArr1[i12 - 1] += Test.sFld;
                for (i14 = 1; 2 > i14; i14++) {
                    i15 += (int) (2821496797066231419L + (i14 * i14));
                    byArr[i12] = (byte) Test.dFld;
                    Test.iArrFld[i11 - 1] /= (int) (Test.instanceCount | 1);
                    fArr1[i14] = by1;
                    Test.iArrFld[i11] = i12;
                    i13 = (int) f;
                    switch((i14 % 8) + 97) {
                        case 97:
                            Test.instanceCount -= i15;
                            if (Test.bFld) {
                                if (Test.iFld != 0) {
                                    vMeth1_check_sum += Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + i15 + by1 + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                                    return;
                                }
                                Test.instanceCount = i12;
                                i13 = Test.sFld;
                                by1 &= (byte) i14;
                                i13 = (int) Test.instanceCount;
                                switch(((i12 % 4) * 5) + 30) {
                                    case 50:
                                    case 36:
                                        Test.iArrFld[i12 - 1] *= Test.iFld;
                                        Test.instanceCount <<= -16046;
                                        i13 *= (int) Test.instanceCount;
                                        Test.instanceCount += (long) f;
                                        i13 = i13;
                                        Test.iArrFld[i12 - 1] <<= i15;
                                        Test.iFld += (((i14 * by1) + Test.iFld) - l1);
                                        Test.instanceCount -= l1;
                                        break;
                                    case 41:
                                        i13 = Test.iFld;
                                        Test.instanceCount += (i14 ^ by1);
                                        Test.iFld += (i14 * i14);
                                        Test.iFld -= (int) Test.dFld;
                                        break;
                                    case 34:
                                        Test.iFld += (i14 * i11);
                                        break;
                                }
                            } else {
                                Test.instanceCount += i12;
                            }
                            break;
                        case 98:
                            Test.iArrFld = Test.iArrFld;
                            break;
                        case 99:
                            Test.dFld += 90.746F;
                        case 100:
                            if (true)
                                continue;
                        case 101:
                            i15 += (i14 ^ (long) f);
                        case 102:
                            i13 = i12;
                            break;
                        case 103:
                            f = 36252L;
                            break;
                        case 104:
                            Test.iArrFld[i11 + 1] -= by1;
                        default:
                            Test.iFld -= Test.iFld;
                    }
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i11 + i12 + i13 + i14 + i15 + by1 + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth() {
        int i = -1, i1 = 24, i16 = -30, i17 = -5, i18 = 237, i19 = 13923, i20 = -4;
        short s = 23043;
        byte by2 = 73;
        float f2 = -16.190F, fArr2[] = new float[N];
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(fArr2, 1.908F);
        FuzzerUtils.init(bArr, false);
        for (i = 7; i < 133; ++i) {
            Test.instanceCount -= s;
            Test.instanceCount = (Test.instanceCount--);
            {
                java.io.PrintStream ax$28 = System.out;
                java.io.PrintStream ax$29 = System.err;
                java.io.PrintStream ax$30 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$30);
                System.setErr(ax$30);
                try {
                    ax$22 = true;
                    for (int ax$26 = 0; ax$26 < 7693; ax$26 += 1) vMeth1();
                } catch (java.lang.Throwable ax$27) {
                } finally {
                    ax$22 = false;
                }
                System.setOut(ax$28);
                System.setErr(ax$29);
            }
            vMeth1();
            i1 >>= by2;
            for (i16 = 1; 4 > i16; ++i16) {
                Test.iFld += (int) Test.instanceCount;
                Test.iFld += (int) f2;
                switch((i % 5) + 106) {
                    case 106:
                        by2 += (byte) (((i16 * i) + Test.iFld) - Test.iFld);
                        i1 -= Test.iFld;
                        i18 = 1;
                        do {
                            fArr2[i16] = 51201;
                        } while (++i18 < 2);
                        Test.instanceCount = (long) f2;
                        Test.dFld = i17;
                    case 107:
                    case 108:
                        Test.instanceCount = 13;
                        Test.iArrFld[i + 1] >>= i;
                        Test.lArrFld[i16] |= -63617;
                        break;
                    case 109:
                        Test.lArrFld[i16] <<= Test.iFld;
                        switch((i16 % 8) + 85) {
                            case 85:
                                Test.dFld -= -5275L;
                                Test.iFld = (int) Test.instanceCount;
                                for (i19 = 1; 2 > i19; i19++) {
                                    Test.lArrFld[i16 + 1] *= (long) f2;
                                    Test.instanceCount += (long) f2;
                                    fArr2 = fArr2;
                                    i1 = 13;
                                    if (Test.bFld) {
                                        Test.lArrFld[i16] = 7;
                                        i1 += i19;
                                        Test.instanceCount = by2;
                                        bArr[i19] = true;
                                        i1 *= i20;
                                        Test.lArrFld[i16 + 1] |= i1;
                                        i1 += i19;
                                        Test.iArrFld[i16] *= (int) f2;
                                        i20 *= 136;
                                    } else {
                                        Test.bFld = Test.bFld;
                                    }
                                }
                            case 86:
                                f2 += ((long) i16 | (long) i16);
                            case 87:
                                i17 += (i16 * i);
                                break;
                            case 88:
                                i1 -= i;
                            case 89:
                                i17 += (((i16 * Test.instanceCount) + f2) - f2);
                                break;
                            case 90:
                                if (Test.bFld)
                                    continue;
                            case 91:
                                Test.instanceCount = i19;
                            case 92:
                                Test.instanceCount = Test.instanceCount;
                        }
                        break;
                    case 110:
                        Test.iFld += (i16 * i16);
                    default:
                        i1 -= i19;
                }
            }
        }
        vMeth_check_sum += i + i1 + s + by2 + i16 + i17 + Float.floatToIntBits(f2) + i18 + i19 + i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {
        int i21 = 195, i22 = 3, i23 = -63798, i24 = -23, i25 = -3;
        float f3 = 101.552F, fArr3[] = new float[N];
        double d1 = -103.34448;
        FuzzerUtils.init(fArr3, -87.124F);
        vMeth();
        i21 = 1;
        do {
            if (Test.bFld)
                break;
            Test.instanceCount = 1924L;
            Test.iFld *= -9419;
            Test.iFld = 7;
            Test.iFld += (((i21 * i21) + i21) - Test.iFld);
        } while (++i21 < 178);
        Test.instanceCount += i21;
        f3 %= ((long) (Test.dFld) | 1);
        Test.iFld >>= Test.iFld;
        for (i22 = 1; i22 < 82; ++i22) {
            Test.instanceCount += i22;
            Test.iFld = i23;
            d1 = 1;
            do {
                i23 *= Test.iFld;
                f3 += f3;
                Test.iFld -= (int) Test.instanceCount;
                Test.iFld += (int) (((d1 * Test.instanceCount) + byFld) - Test.instanceCount);
                Test.instanceCount = (long) f3;
                Test.instanceCount = i22;
                Test.iFld += (int) (((d1 * Test.sFld) + i23) - Test.iFld);
                Test.sFld <<= (short) 4;
                fArr3 = fArr3;
                for (i24 = i22; i24 < 1; i24++) {
                    i25 = i21;
                    f3 += (i24 - f3);
                    i25 = (int) Test.instanceCount;
                    i23 -= i24;
                    Test.iFld = Test.iFld;
                    f3 += i24;
                    i25 = (int) d1;
                    Test.iFld *= (int) -7525907624977272541L;
                    Test.sFld >>>= (short) i24;
                    Test.iArrFld[i22 - 1] = (int) f3;
                    Test.dFld -= -13689;
                    i25 = Test.sFld;
                    switch(((i24 >>> 1) % 10) + 107) {
                        case 107:
                            Test.instanceCount -= 15L;
                            Test.instanceCount += (-63464 + (i24 * i24));
                            i23 = -2892;
                            try {
                                i23 = (123 / i21);
                                i23 = (-15546 / i23);
                                i23 = (Test.iArrFld[i24] % Test.iArrFld[(int) (d1 + 1)]);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.dFld = i23;
                            Test.instanceCount *= i25;
                            i25 <<= -88;
                            if (Test.bFld) {
                                Test.dFld = -2;
                                i23 += i24;
                                if (Test.bFld)
                                    break;
                            }
                            Test.dFld *= i23;
                            Test.iFld += (int) -8L;
                            Test.iFld -= (int) Test.dFld;
                            break;
                        case 108:
                            Test.dArrFld[i22] = Test.dArrFld[i24 - 1];
                            break;
                        case 109:
                            Test.instanceCount = 3885741089L;
                            Test.iFld += (int) Test.instanceCount;
                            i25 = (int) Test.instanceCount;
                            Test.iFld = -8;
                            Test.instanceCount = Test.iFld;
                            Test.lArrFld[(int) (d1 + 1)] *= (long) -2.37F;
                            i23 ^= i22;
                            Test.bFld = true;
                            Test.sFld = Test.sFld;
                            break;
                        case 110:
                            f3 += (-226 + (i24 * i24));
                            i23 = (int) Test.instanceCount;
                            Test.fArrFld = Test.fArrFld;
                            Test.iFld = i22;
                            Test.instanceCount &= i22;
                            Test.iFld = i25;
                            Test.instanceCount = -2;
                            Test.instanceCount += 61;
                        case 111:
                            i23 >>= (int) Test.instanceCount;
                            Test.instanceCount += Test.instanceCount;
                            switch((i22 % 2) + 14) {
                                case 14:
                                case 15:
                                    {
                                        java.io.PrintStream ax$0 = System.out;
                                        java.io.PrintStream ax$1 = System.err;
                                        java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                            @Override
                                            public void write(int b) throws java.io.IOException {
                                                // DO NOTHING: DISCARD ALL OUTPUTS
                                            }
                                        });
                                        System.setOut(ax$2);
                                        System.setErr(ax$2);
                                        {
                                            boolean ax$4 = false;
                                            for (int ax$3 = -4716; ax$3 < 3834; ax$3 += 2) {
                                                if (!ax$4) {
                                                    ax$4 = true;
                                                    {
                                                        System.setOut(ax$0);
                                                        System.setErr(ax$1);
                                                        try {
                                                            i25 = (Test.iArrFld[i24] / Test.iFld);
                                                            Test.iFld = (i22 % -244);
                                                            i25 = (Test.iFld / Test.iArrFld[(i21 >>> 1) % N]);
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                        System.setOut(ax$2);
                                                        System.setErr(ax$2);
                                                    }
                                                }
                                            }
                                        }
                                        System.setOut(ax$0);
                                        System.setErr(ax$1);
                                    }
                                    Test.iFld = Test.iFld;
                                    Test.instanceCount += byFld;
                                default:
                                    Test.lArrFld[i24 - 1] %= -13L;
                            }
                            break;
                        case 112:
                            i23 = (int) d1;
                            break;
                        case 113:
                            Test.instanceCount = Test.sFld;
                            break;
                        case 114:
                            Test.iFld <<= i21;
                            break;
                        case 115:
                            i23 += Test.sFld;
                            break;
                        case 116:
                        default:
                            Test.iFld *= (int) Test.instanceCount;
                    }
                }
            } while (++d1 < 62);
        }
        FuzzerUtils.out.println("i21 f3 i22 = " + i21 + "," + Float.floatToIntBits(f3) + "," + i22);
        FuzzerUtils.out.println("i23 d1 i24 = " + i23 + "," + Double.doubleToLongBits(d1) + "," + i24);
        FuzzerUtils.out.println("i25 fArr3 = " + i25 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr3)));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld Test.bFld byFld = " + Test.sFld + "," + (Test.bFld ? 1 : 0) + "," + byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
        {
            java.io.PrintStream ax$11 = System.out;
            java.io.PrintStream ax$12 = System.err;
            java.io.PrintStream ax$13 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$13);
            System.setErr(ax$13);
            try {
                for (int ax$9 = -271; ax$9 < 9608; ax$9 += 1) {
                    try {
                        java.lang.Object ax$6 = "|(?:jobs|j[emop])";
                        java.lang.Object ax$5 = "B215510819 - wrong method_2!";
                        ((int[]) ax$6)[20] = 99;
                        for (int ax$7 = 0; ax$7 < ((int[]) ax$5).length; ax$7++) {
                            ((int[]) ax$5)[ax$7] = ((int[]) ax$6)[20] - 7;
                            ax$7++;
                            ((int[]) ax$5)[ax$7] = ((int[]) ax$6)[20] - 7;
                        }
                    } catch (Throwable ax$8) {
                    } finally {
                    }
                }
            } catch (Throwable ax$10) {
            }
            System.setOut(ax$11);
            System.setErr(ax$12);
        }
    }

    private static Boolean ax$14 = false;

    private static Boolean ax$22 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
