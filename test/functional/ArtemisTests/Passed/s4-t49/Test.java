// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.net.DatagramPacket;
import java.nio.channels.SocketChannel;
import java.net.InetSocketAddress;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -437955435456827559L;

    public static short sFld = 14877;

    public static byte byFld = -23;

    public int iFld = 53846;

    public static boolean bFld = false;

    public static int iFld1 = 6;

    public static int[] iArrFld = new int[N];

    public static float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 248);
        FuzzerUtils.init(Test.fArrFld, -5.905F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(byte by, int i5, boolean b) {
        if (ax$0) {
            try {
                byte[] ax$3 = new byte[1024];
                DatagramPacket ax$1 = new DatagramPacket(ax$3, 512, 512);
                byte[] ax$2 = new byte[20];
                ax$1.setData(ax$2);
                if (ax$1.getOffset() != 0) {
                }
            } catch (Throwable ax$4) {
            } finally {
            }
            return;
        }
        float f = 0.764F, fArr[] = new float[N];
        double d1 = 0.115090, d2 = -96.71693;
        int i6 = 76, i7 = 64080, i8 = -28926, i9 = 20967, i10 = -10118, i11 = 52645, i12 = 9, i13 = -6, i14 = 2, i15 = -4;
        FuzzerUtils.init(fArr, -2.313F);
        f *= i5;
        Test.sFld *= (short) 198;
        Test.instanceCount <<= i5;
        Test.iArrFld = FuzzerUtils.int1array(N, (int) 5);
        Test.iArrFld[(i5 >>> 1) % N] >>= (int) Test.instanceCount;
        Test.iArrFld[(i5 >>> 1) % N] >>= i5;
        fArr[(i5 >>> 1) % N] /= (i5 | 1);
        d1 %= (i5 | 1);
        Test.instanceCount -= (long) d1;
        d2 = by;
        for (i6 = 5; i6 < 105; ++i6) {
            f += (((i6 * i7) + i6) - f);
        }
        i5 = i6;
        Test.iArrFld[(i7 >>> 1) % N] ^= i5;
        for (i8 = 6; 145 > i8; ++i8) {
            for (i10 = 4; 1 < i10; --i10) {
                i9 *= (int) f;
                f -= Test.instanceCount;
                Test.iArrFld = Test.iArrFld;
                if (b)
                    break;
                i7 += (((i10 * i6) + i11) - i6);
                by += (byte) (((i10 * i7) + i6) - i8);
                i5 *= i11;
                f += f;
            }
            i9 = (int) Test.instanceCount;
            for (i12 = 1; i12 < 4; i12++) {
                Test.iArrFld[i8] *= i5;
                i5 = i10;
                for (i14 = 2; i14 > 1; i14--) {
                    Test.instanceCount = i13;
                    Test.iArrFld = Test.iArrFld;
                    Test.instanceCount = i5;
                    Test.instanceCount += (((i14 * f) + i7) - i13);
                    Test.instanceCount ^= i6;
                    Test.instanceCount |= Test.instanceCount;
                    i11 -= i9;
                    i15 += (i14 * i14);
                }
            }
        }
        vMeth2_check_sum += by + i5 + (b ? 1 : 0) + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(int i2, int i3, int i4) {
        boolean b1 = false;
        int i16 = 11, i17 = 49906, i18 = 66, i19 = 4197, i20 = -20141;
        float f1 = -96.245F;
        double d3 = 3.15109, d4 = 1.36413;
        byte by1 = 22;
        long[] lArr = new long[N];
        short[] sArr = new short[N];
        FuzzerUtils.init(lArr, 2L);
        FuzzerUtils.init(sArr, (short) 769);
        {
            java.io.PrintStream ax$7 = System.out;
            java.io.PrintStream ax$8 = System.err;
            java.io.PrintStream ax$9 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$9);
            System.setErr(ax$9);
            try {
                ax$0 = true;
                for (int ax$5 = 0; ax$5 < 6573; ax$5 += 1) vMeth2((byte) -1020887840, -1032106347, false);
            } catch (java.lang.Throwable ax$6) {
            } finally {
                ax$0 = false;
            }
            System.setOut(ax$7);
            System.setErr(ax$8);
        }
        vMeth2((byte) (-80), i4, b1);
        for (i16 = 3; 206 > i16; ++i16) {
            i18 = 1;
            while (++i18 < 3) {
                Test.instanceCount += (i18 ^ Test.instanceCount);
            }
            switch((i16 % 6) + 88) {
                case 88:
                    Test.iArrFld[i16] = (int) Test.instanceCount;
                    i17 >>= (int) Test.instanceCount;
                    Test.iArrFld[i16] *= -8;
                    for (i19 = 1; i19 < 3; ++i19) {
                        int i21 = 24931;
                        switch((((i2 >>> 1) % 6) * 5) + 36) {
                            case 48:
                                f1 += (float) d3;
                                f1 = i2;
                                lArr[i19] += i21;
                                if (i20 != 0) {
                                    vMeth1_check_sum += i2 + i3 + i4 + (b1 ? 1 : 0) + i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d3) + Double.doubleToLongBits(d4) + by1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
                                    return;
                                }
                                i21 += i19;
                                f1 += (i19 * i19);
                                d4 = 2;
                                do {
                                    long l1 = -4242078684L;
                                    i2 >>= i18;
                                    switch((int) ((d4 % 2) + 34)) {
                                        case 34:
                                            i20 += (int) ((long) d4 | (long) f1);
                                            i2 -= i2;
                                            try {
                                                i2 = (27594 / i16);
                                                i2 = (i2 % Test.iArrFld[i19 - 1]);
                                                i3 = (27676 / i16);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            Test.iArrFld[i19 - 1] >>>= Test.sFld;
                                            f1 -= l1;
                                            l1 += (long) d3;
                                            Test.instanceCount >>= -235;
                                            if (b1)
                                                break;
                                            i20 += (int) l1;
                                            lArr[(int) (d4)] -= Test.instanceCount;
                                            if (i4 != 0) {
                                                vMeth1_check_sum += i2 + i3 + i4 + (b1 ? 1 : 0) + i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d3) + Double.doubleToLongBits(d4) + by1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
                                                return;
                                            }
                                            Test.instanceCount += (long) (((d4 * i18) + Test.instanceCount) - f1);
                                            sArr[(int) (d4)] = (short) Test.instanceCount;
                                            d3 -= i2;
                                            break;
                                        case 35:
                                            f1 += (float) (d4 * l1);
                                            if (i17 != 0) {
                                                vMeth1_check_sum += i2 + i3 + i4 + (b1 ? 1 : 0) + i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d3) + Double.doubleToLongBits(d4) + by1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
                                                return;
                                            }
                                            if (b1)
                                                break;
                                            i2 -= i21;
                                            break;
                                        default:
                                            l1 += Test.sFld;
                                    }
                                } while ((d4 -= 3) > 0);
                                break;
                            case 40:
                                if (false)
                                    continue;
                                break;
                            case 53:
                                b1 = b1;
                            case 43:
                                i21 = (int) Test.instanceCount;
                                break;
                            case 38:
                                i17 += (((i19 * i17) + Test.instanceCount) - Test.instanceCount);
                                break;
                            case 59:
                                by1 -= (byte) f1;
                                break;
                        }
                    }
                    break;
                case 89:
                    if (false)
                        break;
                    break;
                case 90:
                    f1 += (-4 + (i16 * i16));
                case 91:
                    i3 *= i18;
                case 92:
                    Test.instanceCount -= 11;
                case 93:
                    f1 %= (i20 | 1);
                    break;
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + (b1 ? 1 : 0) + i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d3) + Double.doubleToLongBits(d4) + by1 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i1) {
        boolean b2 = false;
        int i22 = -264, i23 = -13907, i24 = 237, i25 = 44419, i26 = -20038, i27 = -9, i28 = 5, i29 = -2783, i30 = -2095;
        float f2 = 13.241F, fArr1[] = new float[N];
        double d5 = 2.75997;
        short[] sArr1 = new short[N];
        FuzzerUtils.init(fArr1, 4.988F);
        FuzzerUtils.init(sArr1, (short) 30605);
        vMeth1(-12272, i1, i1);
        b2 = b2;
        i22 = 1;
        while ((i22 += 2) < 94) {
            f2 += i22;
            switch((i22 % 6) + 81) {
                case 81:
                    f2 = 4;
                    for (i23 = 1; i23 < 11; ++i23) {
                        for (i25 = 1; i25 < 2; i25++) {
                            i26 /= (int) (i24 | 1);
                            Test.instanceCount = i24;
                            i24 -= (int) f2;
                            i1 += (i25 | Test.instanceCount);
                            Test.instanceCount *= (long) d5;
                            Test.byFld += (byte) (i25 * i25);
                        }
                        Test.sFld += (short) (((i23 * Test.instanceCount) + i26) - i23);
                    }
                    fArr1[i22] *= i1;
                    for (i27 = 1; i27 < 11; ++i27) {
                        for (i29 = 1; i29 < 2; ++i29) {
                            f2 += (i29 * i29);
                            d5 *= d5;
                            Test.instanceCount += (((i29 * Test.instanceCount) + i28) - Test.instanceCount);
                            i24 = i23;
                            d5 = Test.byFld;
                            i1 = (int) Test.instanceCount;
                            i26 &= i29;
                            Test.iArrFld[i29 - 1] /= (int) (i25 | 1);
                            if (b2) {
                                Test.sFld >>= (short) Test.instanceCount;
                            } else {
                                i1 += i25;
                                i26 <<= i27;
                                i1 += (i29 * i29);
                                i30 += i30;
                                Test.instanceCount += (i29 - i30);
                                i24 -= i28;
                                i30 = i1;
                                Test.instanceCount -= Test.instanceCount;
                            }
                            Test.iArrFld[i29] = i27;
                        }
                    }
                    break;
                case 82:
                    i28 -= (int) Test.instanceCount;
                    break;
                case 83:
                    f2 += i1;
                    break;
                case 84:
                    Test.sFld -= (short) f2;
                    break;
                case 85:
                case 86:
                    i26 &= Test.sFld;
                default:
                    d5 = i24;
            }
        }
        vMeth_check_sum += i1 + (b2 ? 1 : 0) + i22 + Float.floatToIntBits(f2) + i23 + i24 + i25 + i26 + Double.doubleToLongBits(d5) + i27 + i28 + i29 + i30 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(sArr1);
    }

    public void mainTest(String[] strArr1) {
        double d = -82.37648, d6 = 0.96686, dArr[] = new double[N];
        int i = 39097, i31 = -28652, i32 = 0, i33 = 9483, i34 = -13, i35 = -2, i36 = -7, i37 = -24102, i38 = 5677;
        float f4 = -74.859F;
        FuzzerUtils.init(dArr, 0.13828);
        for (d = 2; d < 220; ++d) {
            float f3 = 2.476F;
            vMeth(i);
            i = (int) -27133L;
            f3 /= -10;
            i = i;
            Test.iArrFld[(int) (d)] *= iFld;
            i -= i;
            Test.instanceCount <<= -2;
        }
        for (i31 = 3; i31 < 120; i31++) {
            iFld += (i31 * iFld);
            iFld += (int) Test.instanceCount;
            f4 = (float) d;
            iFld += (((i31 * i32) + i32) - iFld);
            i = iFld;
            for (i33 = 1; i33 < 43; i33++) {
                for (i35 = 1; i35 < 2; i35++) {
                    switch(((i33 >>> 1) % 2) + 127) {
                        case 127:
                            Test.instanceCount += (i35 ^ i33);
                            if (Test.bFld) {
                                d6 += d;
                                Test.iArrFld[i35 + 1] |= -19202;
                                i36 += (((i35 * Test.sFld) + i32) - i36);
                                f4 += (i35 * i35);
                                i = (int) Test.instanceCount;
                                i34 -= (int) -253L;
                                i36 = (int) Test.instanceCount;
                                Test.fArrFld[i35] *= Test.instanceCount;
                                Test.instanceCount >>= i31;
                            } else if (Test.bFld) {
                                i += (i35 * i35);
                                i <<= i35;
                                i32 >>= (int) 763704023L;
                                i += (i35 - i36);
                                i32 = (int) Test.instanceCount;
                                f4 -= Test.instanceCount;
                                i36 += (((i35 * f4) + i) - i);
                                i += i35;
                                i34 -= -40;
                                Test.instanceCount += (i35 ^ (long) f4);
                            } else {
                                i34 = i32;
                                Test.bFld = Test.bFld;
                            }
                            i = (int) f4;
                            iFld = i33;
                            break;
                        case 128:
                    }
                    i = i32;
                    Test.instanceCount += i31;
                    iFld += (i35 * i36);
                    i32 -= (int) 1564855506463804602L;
                    d6 -= d6;
                    f4 -= iFld;
                    iFld += (int) f4;
                    i36 -= (int) -1.598F;
                    Test.sFld += (short) (i35 | (long) f4);
                    dArr[i33 + 1] *= i33;
                    Test.instanceCount <<= iFld;
                    Test.instanceCount += Test.sFld;
                    i34 += i35;
                    try {
                        iFld = (42 / i31);
                        i36 = (Test.iArrFld[i31 + 1] / i35);
                        i32 = (Test.iArrFld[(i31 >>> 1) % N] / Test.iArrFld[i35 - 1]);
                    } catch (ArithmeticException a_e) {
                    }
                }
                for (i37 = 1; i37 < 2; i37++) {
                    iFld += i35;
                    i32 += i37;
                    Test.instanceCount *= Test.instanceCount;
                    d6 = i31;
                    Test.instanceCount *= (long) d6;
                    Test.instanceCount += i37;
                    Test.iFld1 += (int) Test.instanceCount;
                    Test.sFld += (short) Test.instanceCount;
                    switch((i33 % 5) + 24) {
                        case 24:
                            i38 = i31;
                            i34 = Test.iFld1;
                            i38 += i37;
                            Test.instanceCount += i35;
                            i32 += i37;
                            Test.instanceCount = (long) f4;
                            Test.instanceCount = -208L;
                            d6 = 0;
                            iFld += (((i37 * Test.instanceCount) + i32) - f4);
                            break;
                        case 25:
                        case 26:
                            Test.iFld1 >>= (int) 6L;
                            break;
                        case 27:
                            Test.instanceCount ^= i36;
                            break;
                        case 28:
                            Test.instanceCount += (((i37 * f4) + f4) - f4);
                    }
                }
            }
        }
        FuzzerUtils.out.println("d i i31 = " + Double.doubleToLongBits(d) + "," + i + "," + i31);
        FuzzerUtils.out.println("i32 f4 i33 = " + i32 + "," + Float.floatToIntBits(f4) + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("d6 i37 i38 = " + Double.doubleToLongBits(d6) + "," + i37 + "," + i38);
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.byFld = " + Test.instanceCount + "," + Test.sFld + "," + Test.byFld);
        FuzzerUtils.out.println("iFld Test.bFld Test.iFld1 = " + iFld + "," + (Test.bFld ? 1 : 0) + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.iArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$10) {
            try {
                java.net.InetSocketAddress ax$12 = new InetSocketAddress((0));
                SocketChannel ax$11 = SocketChannel.open();
                ax$11.socket().connect(ax$12, 30000);
            } catch (Throwable ax$13) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$10 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
