// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -58150L;

    public static volatile float fFld = 1.4F;

    public static double dFld = 0.46602;

    public int iFld = 239;

    public volatile byte byFld = 76;

    public static int[] iArrFld = new int[N];

    public static float[] fArrFld = new float[N];

    public static long[] lArrFld = new long[N];

    public static double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -7);
        FuzzerUtils.init(Test.fArrFld, -19.397F);
        FuzzerUtils.init(Test.lArrFld, -3642550836L);
        FuzzerUtils.init(Test.dArrFld, -1.44637);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i8) {
        int i9 = -41531, i10 = 45928, i11 = 22489, i12 = 163, i13 = -9, i14 = 109;
        float f1 = -55.510F;
        byte by1 = 1;
        short s1 = -16084, sArr[] = new short[N];
        boolean b1 = false;
        FuzzerUtils.init(sArr, (short) 11271);
        for (i9 = 4; 196 > i9; i9++) {
            double d1 = 106.121896;
            d1 += i10;
            i8 += (int) Test.instanceCount;
        }
        for (i11 = 1; i11 < 77; i11++) {
            switch(((i11 % 1) * 5) + 78) {
                case 82:
                    i12 += (((i11 * Test.instanceCount) + i8) - i10);
                    Test.instanceCount ^= i11;
                    switch((i11 % 9) + 27) {
                        case 27:
                            i12 >>>= 11919;
                            Test.fArrFld[i11 - 1] = i12;
                            for (i13 = 1; i13 < 7; i13++) {
                                Test.fFld += i13;
                                Test.instanceCount |= i12;
                                f1 = 1;
                                while (++f1 < 2) {
                                    switch(((-176 >>> 1) % 9) + 125) {
                                        case 125:
                                            sArr[(i11 >>> 1) % N] = (short) i13;
                                            i12 += (int) (((f1 * i14) + Test.instanceCount) - by1);
                                            switch((i13 % 7) + 16) {
                                                case 16:
                                                    Test.lArrFld[i11 + 1] *= i10;
                                                    Test.iArrFld[(int) (f1 - 1)] += (int) Test.dFld;
                                                    Test.instanceCount += (long) ((long) f1 ^ by1);
                                                    i10 = by1;
                                                    Test.instanceCount += (-56247 + (f1 * f1));
                                                    i14 = -8;
                                                    Test.fFld += i13;
                                                    if (false) {
                                                        i14 *= by1;
                                                        i8 = i13;
                                                    } else {
                                                        Test.instanceCount ^= 13L;
                                                        if (true)
                                                            break;
                                                        i8 >>= 5593;
                                                        i8 = i9;
                                                        Test.iArrFld[i11 - 1] -= (int) -1.81F;
                                                        i14 = (int) Test.instanceCount;
                                                        Test.fFld += (23094 + (f1 * f1));
                                                        Test.instanceCount = i14;
                                                        sArr[(int) (f1)] -= (short) Test.fFld;
                                                    }
                                                    break;
                                                case 17:
                                                    i10 ^= by1;
                                                    break;
                                                case 18:
                                                    Test.instanceCount >>= s1;
                                                    break;
                                                case 19:
                                                    Test.iArrFld[i11 + 1] -= -26063;
                                                    break;
                                                case 20:
                                                    i10 = i11;
                                                    break;
                                                case 21:
                                                    by1 *= (byte) i12;
                                                    break;
                                                case 22:
                                                    Test.iArrFld[i13 - 1] -= by1;
                                                    break;
                                                default:
                                                    Test.instanceCount = i13;
                                            }
                                            break;
                                        case 126:
                                            Test.instanceCount = i14;
                                            break;
                                        case 127:
                                            Test.dFld -= i8;
                                            break;
                                        case 128:
                                            b1 = b1;
                                            break;
                                        case 129:
                                            Test.instanceCount = -13;
                                            break;
                                        case 130:
                                            i10 += (int) (((f1 * i10) + f1) - i10);
                                            break;
                                        case 131:
                                            Test.instanceCount += (long) (((f1 * i12) + f1) - i14);
                                        case 132:
                                            i8 = (int) -31912L;
                                            break;
                                        case 133:
                                            Test.instanceCount = i9;
                                            break;
                                    }
                                }
                            }
                        case 28:
                            i14 *= (int) Test.instanceCount;
                            break;
                        case 29:
                            Test.iArrFld = Test.iArrFld;
                            break;
                        case 30:
                            i8 *= i12;
                            break;
                        case 31:
                            i10 = (int) -131L;
                            break;
                        case 32:
                            Test.lArrFld = Test.lArrFld;
                            break;
                        case 33:
                        case 34:
                            i8 *= (int) Test.dFld;
                            break;
                        case 35:
                            i14 = i11;
                    }
                    break;
                default:
                    i14 = i13;
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f1) + by1 + s1 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(sArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth1(int i1, int i2) {
        double d = -33.28844;
        int i3 = 50, i4 = -4529, i5 = -10, i6 = 73, i7 = 7, i15 = 16221, i16 = -77, i17 = -1, i18 = -204, i19 = -17700, i20 = 149, i21 = 24;
        float f = -1.669F;
        boolean b = true;
        for (d = 4; d < 148; ++d) {
            for (i4 = 1; i4 < 4; ++i4) {
                i6 += (int) (f - ((i2 + -46) + i7));
                if (b)
                    continue;
                Test.iArrFld[i4] = (int) (((i7 = i2) * (Test.instanceCount + i7)) - (-Integer.reverseBytes(i6)));
                if (((b = b) & b) || bMeth(i4))
                    break;
            }
            f += Test.instanceCount;
            Test.fArrFld[(int) (d)] -= (float) d;
            i3 = (int) -12394L;
        }
        for (i15 = 5; 88 > i15; i15++) {
            short s2 = -10798;
            i1 += s2;
            i17 = 1;
            do {
                i16 = (int) Test.instanceCount;
                s2 *= (short) i16;
                i7 *= (int) d;
                Test.instanceCount += (-10 + (i17 * i17));
                for (i18 = 1; i18 < 1; ++i18) {
                    i16 = (int) d;
                }
                for (i20 = 1; i20 < 1; ++i20) {
                    if (i18 != 0) {
                        vMeth1_check_sum += i1 + i2 + Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + (b ? 1 : 0) + i15 + i16 + i17 + i18 + i19 + i20 + i21;
                        return;
                    }
                    if (true) {
                        i6 = i21;
                        i5 = i17;
                        try {
                            i16 = (Test.iArrFld[i15 + 1] / Test.iArrFld[i20 + 1]);
                            i7 = (Test.iArrFld[i15 + 1] / i19);
                            i16 = (i4 % -26247);
                        } catch (ArithmeticException a_e) {
                        }
                        if (i18 != 0) {
                            vMeth1_check_sum += i1 + i2 + Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + (b ? 1 : 0) + i15 + i16 + i17 + i18 + i19 + i20 + i21;
                            return;
                        }
                        i7 += i20;
                        i3 -= (int) -74.88070;
                        if (b)
                            break;
                        Test.fFld -= Test.instanceCount;
                        Test.fFld = f;
                        i19 <<= (int) Test.instanceCount;
                        i16 >>= i15;
                        i21 >>= i2;
                        i1 >>>= i1;
                        i5 += i17;
                    } else if (b) {
                        i7 += (((i20 * i21) + Test.instanceCount) - i16);
                        i6 *= (int) f;
                    }
                }
            } while (++i17 < 7);
        }
        vMeth1_check_sum += i1 + i2 + Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + (b ? 1 : 0) + i15 + i16 + i17 + i18 + i19 + i20 + i21;
    }

    public static void vMeth(short s, int i) {
        if (ax$0) {
            long ax$4 = bMeth_check_sum;
            try {
                int ax$2 = 100033;
                int ax$1 = 0xFFFF0001;
                int ax$3 = 2635416;
                for (ax$3 = ax$1; ax$3 <= ax$2; ax$3++) {
                    bMeth_check_sum++;
                    if (bMeth_check_sum > 1000000) {
                    }
                }
            } catch (Throwable ax$5) {
            } finally {
                bMeth_check_sum = ax$4;
            }
            return;
        }
        byte by = -104;
        int i22 = 0, i23 = 6, i24 = 3, i25 = 27593, i26 = 14, i27 = -27568, i28 = 4, i29 = -246;
        float f2 = 0.436F;
        boolean b2 = true;
        Test.instanceCount <<= (Test.iArrFld[(i >>> 1) % N] * ((i + i) - (by - i)));
        vMeth1(226, -38354);
        for (i22 = 4; 179 > i22; i22++) {
            for (f2 = i22; f2 < 3; ++f2) {
                by = (byte) i24;
            }
            Test.instanceCount *= i24;
            i23 <<= (int) Test.instanceCount;
            i23 = i22;
            i = i23;
            b2 = false;
            i23 = -172;
        }
        for (i25 = 2; i25 < 101; i25++) {
            for (i27 = 1; i27 < 6; ++i27) {
                i29 = 1;
                do {
                    i28 += (i29 * i29);
                    Test.dArrFld[i27] -= i22;
                    Test.iArrFld[i27 - 1] = (int) Test.fFld;
                    i23 -= i25;
                    Test.dFld *= 0.201F;
                    switch((i27 % 2) + 39) {
                        case 39:
                            Test.fFld *= i22;
                            i23 = (int) Test.instanceCount;
                            s = (short) 3;
                            Test.instanceCount = (long) -2.50229;
                            Test.instanceCount = i25;
                            i += i;
                        case 40:
                            switch(((i29 >>> 1) % 2) + 98) {
                                case 98:
                                    i23 += (int) Test.fFld;
                                    i26 += (((i29 * Test.instanceCount) + i22) - i24);
                                    if (b2)
                                        break;
                                    Test.fFld = i22;
                                    if (true)
                                        break;
                                    Test.instanceCount <<= i24;
                                    Test.instanceCount >>= i22;
                                    Test.iArrFld = Test.iArrFld;
                                    i26 += (i29 | Test.instanceCount);
                                    i += (int) (211L + (i29 * i29));
                                case 99:
                                    i >>= -12;
                                    break;
                            }
                            break;
                        default:
                            Test.instanceCount >>= Test.instanceCount;
                    }
                } while (++i29 < 2);
            }
        }
        vMeth_check_sum += s + i + by + i22 + i23 + Float.floatToIntBits(f2) + i24 + (b2 ? 1 : 0) + i25 + i26 + i27 + i28 + i29;
    }

    public void mainTest(String[] strArr1) {
        short s3 = 32558, sArr1[] = new short[N];
        int i30 = -43239, i31 = -20314, i32 = -78, i33 = 13, i34 = 63011, i36 = -221;
        boolean b4 = false;
        long l = 30573L, l1 = 50836L;
        FuzzerUtils.init(sArr1, (short) -22188);
        {
            java.io.PrintStream ax$8 = System.out;
            java.io.PrintStream ax$9 = System.err;
            java.io.PrintStream ax$10 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$10);
            System.setErr(ax$10);
            try {
                ax$0 = true;
                for (int ax$6 = 0; ax$6 < 5180; ax$6 += 1) vMeth((short) 1157649817, 1798632008);
            } catch (java.lang.Throwable ax$7) {
            } finally {
                ax$0 = false;
            }
            System.setOut(ax$8);
            System.setErr(ax$9);
        }
        vMeth(s3, i30);
        for (i31 = 10; 163 > i31; ++i31) {
            Test.instanceCount += i31;
            i33 = 1;
            do {
                switch(((2 >>> 1) % 10) + 50) {
                    case 50:
                        i34 = 1;
                        while (++i34 < 1) {
                            boolean b3 = false;
                            byte by2 = 70;
                            int i35 = -57;
                            b3 = b3;
                            Test.dFld = i31;
                            i30 >>= -11;
                            i32 += (((i34 * Test.instanceCount) + i32) - i30);
                            Test.instanceCount = i34;
                            switch((i31 % 2) + 93) {
                                case 93:
                                    Test.fFld = i31;
                                    try {
                                        i32 = (i31 / i34);
                                        i30 = (50748 / i33);
                                        i32 = (-65034 / i32);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    Test.instanceCount += (i34 * i34);
                                    i32 -= (int) Test.fFld;
                                    break;
                                case 94:
                                    Test.lArrFld[i31 - 1] += i31;
                                    Test.iArrFld[i33] += 14;
                                    Test.lArrFld[i31] -= i30;
                                    break;
                                default:
                                    by2 += (byte) i34;
                                    i30 += i34;
                                    i30 = i34;
                                    try {
                                        i32 = (i34 % 9001);
                                        i30 = (162 % i30);
                                        Test.iArrFld[i34 - 1] = (i33 % 43361);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i32 = i33;
                                    i30 = i31;
                                    Test.iArrFld[i31 + 1] = i34;
                                    s3 += (short) 13;
                                    if (b3) {
                                        i32 = (int) Test.instanceCount;
                                        i32 += (i34 * Test.instanceCount);
                                        Test.fArrFld[i33 - 1] *= i34;
                                        Test.instanceCount += by2;
                                        i32 += iFld;
                                        try {
                                            iFld = (iFld / -62);
                                            i32 = (183 / iFld);
                                            i32 = (i31 % 47640);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        i32 = -1;
                                        i32 *= 19353;
                                        Test.dFld += i33;
                                        s3 += (short) (58L + (i34 * i34));
                                        Test.dArrFld[i34 + 1] *= i34;
                                    } else {
                                        i30 -= (int) Test.fFld;
                                        Test.fFld *= Test.fFld;
                                        b3 = b3;
                                        Test.fFld = i35;
                                        Test.dArrFld[i33 + 1] = Test.instanceCount;
                                        Test.instanceCount -= (long) Test.dFld;
                                        i30 += i32;
                                    }
                                    Test.instanceCount >>= Test.instanceCount;
                                    if (false)
                                        break;
                                    Test.dFld += 4168;
                            }
                            i30 <<= i31;
                            Test.instanceCount = i33;
                        }
                        b4 = b4;
                        break;
                    case 51:
                        Test.lArrFld[i33] /= (Test.instanceCount | 1);
                        byFld += (byte) 194;
                        i30 = byFld;
                        i32 = (int) Test.instanceCount;
                        for (l = i33; l < 1; l++) {
                            Test.instanceCount -= (long) Test.dFld;
                            Test.iArrFld = Test.iArrFld;
                            i36 += (int) (l | (long) Test.fFld);
                            if (b4)
                                break;
                            Test.instanceCount = i30;
                            Test.instanceCount = 253;
                            try {
                                i30 = (188 / i30);
                                Test.iArrFld[i33] = (-89 / i34);
                                i36 = (Test.iArrFld[i33] % i32);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.instanceCount = l;
                            Test.instanceCount -= i31;
                            Test.instanceCount += (l + iFld);
                            switch((((-21395 >>> 1) % 8) * 5) + 120) {
                                case 136:
                                    Test.instanceCount = (long) Test.dFld;
                                    if (b4)
                                        continue;
                                    Test.fFld *= i34;
                                    s3 += (short) i34;
                                    break;
                                case 158:
                                    Test.iArrFld[i31] += i36;
                                    i30 += i33;
                                    break;
                                case 155:
                                    i30 = (int) l;
                                    break;
                                case 134:
                                    i32 *= i31;
                                    break;
                                case 139:
                                    i32 += (int) (l + l);
                                case 126:
                                    iFld -= i34;
                                    break;
                                case 160:
                                    sArr1[(iFld >>> 1) % N] = (short) -3659962175L;
                                case 138:
                                    Test.instanceCount += l;
                                    break;
                            }
                        }
                    case 52:
                        b4 = b4;
                        break;
                    case 53:
                    case 54:
                    case 55:
                        i36 = (int) Test.dFld;
                        break;
                    case 56:
                        Test.iArrFld[i33 + 1] *= iFld;
                        break;
                    case 57:
                        Test.dFld = 0;
                        break;
                    case 58:
                        if (b4)
                            continue;
                        break;
                    case 59:
                        l1 += i33;
                        break;
                }
            } while (++i33 < 33);
        }
        FuzzerUtils.out.println("s3 i30 i31 = " + s3 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("b4 l i36 = " + (b4 ? 1 : 0) + "," + l + "," + i36);
        FuzzerUtils.out.println("l1 sArr1 = " + l1 + "," + FuzzerUtils.checkSum(sArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("iFld byFld Test.iArrFld = " + iFld + "," + byFld + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld Test.lArrFld Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  bMeth ->  bMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
