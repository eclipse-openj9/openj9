// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -204L;

    public static float fFld = 106.618F;

    public static int iFld = 0;

    public static byte byFld = -49;

    public static int iArrFld[] = new int[N];

    public static float fArrFld[] = new float[N];

    public static volatile long lArrFld[] = new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 50910);
        FuzzerUtils.init(Test.fArrFld, 1.163F);
        FuzzerUtils.init(Test.lArrFld, 2032444536L);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {
        int iArr1[] = new int[N];
        FuzzerUtils.init(iArr1, -136);
        iArr1[(Test.iFld >>> 1) % N] &= Test.iFld;
        Test.instanceCount -= Test.iFld;
        Test.fFld = 11478;
        vMeth2_check_sum += FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i3, int i4, int i5) {
        int i6 = 1;
        int i7 = -14210;
        int i8 = 66;
        int i9 = 845;
        int iArr2[][] = new int[N][N];
        float f = -2.67F;
        double d = -92.37936;
        double dArr[] = new double[N];
        short s1 = 1562;
        long lArr1[] = new long[N];
        FuzzerUtils.init(iArr2, -60);
        FuzzerUtils.init(dArr, 2.116632);
        FuzzerUtils.init(lArr1, -3941484674L);
        vMeth2();
        i3 = i4;
        for (i6 = 4; i6 < 155; i6 += 3) {
            Test.instanceCount += ((i6 * Test.instanceCount) + Test.fFld) - i4;
            i7 ^= ((int) (Test.instanceCount));
            i8 = 1;
            {
                try {
                    int[] ax$21 = new int[]{ 0x11, 0x22, 0x33, 0x44, 0x88, 0x99, 0xaa, 0xbb };
                    for (int ax$20 = -911; ax$20 < (-911 + 19021); ax$20 += 1) {
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            ax$21[0] = 5;
                        } catch (Throwable ax$22) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                    }
                } finally {
                }
            }
            while ((++i8) < 11) {
                i4 ^= ((int) (Test.instanceCount));
                try {
                    iArr2[((-182) >>> 1) % N][i8] = i6 / (-12861);
                    Test.iFld = Test.iFld % (-26132);
                    i5 = 50 / i3;
                } catch (ArithmeticException a_e) {
                }
                dArr[i6 + 1] += i8;
                for (f = 1; f > 1; f--) {
                    boolean b = false;
                    Test.instanceCount = i3;
                    Test.iArrFld[i8 + 1] = 0;
                    iArr2[i6 - 1][i8] *= ((int) (d));
                    s1 += ((short) (i5));
                    try {
                        i9 = i7 / 8;
                        i9 = i8 % (-170);
                        i4 = i3 % iArr2[i8 + 1][i8 - 1];
                    } catch (ArithmeticException a_e) {
                    }
                    switch (((int) (f % 6))) {
                        case 0 :
                            i5 += ((int) (f * f));
                            Test.instanceCount >>= i7;
                            Test.instanceCount <<= i8;
                            Test.fArrFld[((int) (f + 1))] = -6L;
                            b = b;
                            i5 = Test.iFld;
                            i9 /= ((int) (((long) (f)) | 1));
                            i4 += ((int) (((long) (f)) ^ i7));
                            try {
                                i7 = 182 / i3;
                                i5 = i6 % (-32);
                                i9 = Test.iArrFld[((int) (f))] / i7;
                            } catch (ArithmeticException a_e) {
                            }
                            d = Test.iFld;
                            break;
                        case 1 :
                            Test.fArrFld[(i5 >>> 1) % N] += Test.instanceCount;
                            i4 -= i7;
                            i5 -= i3;
                            Test.iArrFld[((int) (f + 1))] = ((int) (Test.instanceCount));
                            Test.instanceCount <<= i7;
                            i3 *= ((int) (Test.instanceCount));
                            i9 >>>= i8;
                            i3 += ((int) (-146L));
                            Test.iFld -= -29705;
                            i3 *= ((int) (Test.instanceCount));
                            b = b;
                            break;
                        case 2 :
                            lArr1[i6] += Test.iFld;
                            break;
                        case 3 :
                            i3 <<= i7;
                            break;
                        case 4 :
                            Test.instanceCount |= i4;
                            break;
                        case 5 :
                            i9 = ((int) (Test.instanceCount));
                            break;
                        default :
                            try {
                                i3 = 10826092 % i4;
                                i3 = iArr2[((int) (f))][i8] % (-47349);
                                i5 = i5 % (-52881);
                            } catch (ArithmeticException a_e) {
                            }
                    }
                }
            }
        }
        vMeth1_check_sum += (((((((((((i3 + i4) + i5) + i6) + i7) + i8) + Float.floatToIntBits(f)) + i9) + Double.doubleToLongBits(d)) + s1) + FuzzerUtils.checkSum(iArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(int i2) {
        int i10 = -57137;
        int i11 = 2;
        int i12 = -5;
        int i13 = -118;
        int i14 = -13;
        int i15 = 5;
        int i16 = 10612;
        int i17 = 198;
        int i18 = 15006;
        short s2 = -2787;
        double d1 = 1.8909;
        double d2 = -61.35552;
        byte by = 57;
        boolean b1 = true;
        long lArr2[] = new long[N];
        FuzzerUtils.init(lArr2, -4L);
        vMeth1(i2, 46472, i2);
        for (i10 = 1; i10 < 98; i10++) {
            Test.instanceCount = s2;
            d1 = 1;
            do {
                Test.iArrFld[((int) (d1 - 1))] -= i2;
                Test.iFld += ((int) (((d1 * Test.instanceCount) + i2) - Test.instanceCount));
                i12 = i10;
                switch (((int) (((d1 % 4) * 5) + 72))) {
                    case 85 :
                        Test.iFld &= i12;
                        d2 += Test.instanceCount;
                        for (i13 = 1; i13 < 1; ++i13) {
                            Test.iFld *= i2;
                            i2 = i2;
                            lArr2[i13 + 1] >>= by;
                            switch ((i10 % 1) + 39) {
                                case 39 :
                                    i14 += ((i13 * i10) + Test.fFld) - s2;
                                    Test.fFld -= i13;
                                    Test.instanceCount -= by;
                                    Test.iFld = -10418;
                                    try {
                                        i12 = (-69) / Test.iFld;
                                        Test.iArrFld[((int) (d1 - 1))] = (-128) / Test.iArrFld[i10 + 1];
                                        i2 = i13 % Test.iArrFld[i10];
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i14 = s2;
                            }
                            if (b1)
                                continue;

                            Test.fFld += 3L + (i13 * i13);
                            Test.instanceCount += i13 ^ by;
                            Test.instanceCount += i10;
                            i12 = ((int) (-929147940L));
                            Test.lArrFld[i10 + 1] += -3071261906L;
                            Test.instanceCount += (-4246815224718315917L) + (i13 * i13);
                            Test.iFld += ((int) (Test.fFld));
                        }
                        Test.instanceCount *= i10;
                        break;
                    case 89 :
                        by += ((byte) (d1));
                        for (i15 = 1; 1 > i15; i15++) {
                            i11 += i10;
                            Test.instanceCount &= i14;
                        }
                        for (i17 = i10; 1 > i17; ++i17) {
                            i2 -= ((int) (d1));
                            Test.instanceCount >>= i18;
                        }
                    case 80 :
                        i12 += ((int) (d1));
                    case 84 :
                        Test.instanceCount <<= -5357692677390157807L;
                        break;
                }
            } while ((++d1) < 6 );
        }
        vMeth_check_sum += ((((((((((((((i2 + i10) + i11) + s2) + Double.doubleToLongBits(d1)) + i12) + Double.doubleToLongBits(d2)) + i13) + i14) + by) + (b1 ? 1 : 0)) + i15) + i16) + i17) + i18) + FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {
        if (Test.ax$0) {
            final int ax$6 = Test.iFld;
            int[] ax$3 = new int[]{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                iFld = ax$3[iFld];
                for (int ax$4 = 0; ax$4 < 10; ++ax$4) {
                    iFld += ax$3[ax$4];
                    iFld = ax$3[iFld];
                }
            } catch (Throwable ax$5) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iFld = ax$6;
            return;
        }
        int i = 14190;
        int i1 = 57789;
        int i19 = 6;
        int i20 = -47925;
        int i21 = -5;
        int i22 = -37398;
        int i23 = 11;
        int i24 = -53000;
        int i25 = 39;
        int i27 = 110;
        int i28 = 11699;
        int i29 = 4;
        int i30 = 33054;
        int iArr[] = new int[N];
        short s = 13594;
        short sArr[] = new short[N];
        boolean b2 = true;
        double d3 = -78.125959;
        double dArr1[] = new double[N];
        long l = -2032767816653242517L;
        long l1 = 1658151112940541983L;
        long l2 = -76L;
        long lArr[] = new long[N];
        byte byArr[] = new byte[N];
        FuzzerUtils.init(lArr, -7005323047801531697L);
        FuzzerUtils.init(iArr, -61);
        FuzzerUtils.init(sArr, ((short) (6394)));
        FuzzerUtils.init(byArr, ((byte) (66)));
        FuzzerUtils.init(dArr1, 114.79759);
        lArr[(i >>> 1) % N] *= i;
        s = ((short) (Test.instanceCount));
        i1 = 149;
        do {
            i += ((int) (Test.instanceCount -= lArr[i1]));
        } while ((i1 -= 3) > 0 );
        i = ((int) (59753277L));
        iArr[(i1 >>> 1) % N] <<= ((int) (i1 + ((Test.fFld++) - i1)));
        vMeth(Test.iFld);
        for (i19 = 6; 234 > i19; i19++) {
            Test.fFld %= 14;
            Test.instanceCount += ((i19 * Test.byFld) + i1) - Test.iFld;
            iArr[i19 - 1] &= i19;
            i20 >>= i20;
        }
        Test.iArrFld[(i >>> 1) % N] = 58;
        Test.instanceCount = i19;
        iArr[(31369 >>> 1) % N] -= Test.iFld;
        iArr[(i1 >>> 1) % N] = Test.iFld;
        i21 = 1;
        while ((++i21) < 180) {
            for (i22 = i21; 28 > i22; i22++) {
                i += ((i22 * i) + Test.instanceCount) - Test.iFld;
                i23 = ((int) (-3554316863417569456L));
                if (b2)
                    break;

                Test.fFld += 6938;
                Test.iFld += ((int) (Test.instanceCount));
            }
        }
        i20 -= ((int) (d3));
        sArr[(Test.iFld >>> 1) % N] -= ((short) (i19));
        i20 += ((int) (d3));
        for (byte by1 : byArr) {
            Test.iArrFld[(i23 >>> 1) % N] = ((int) (137L));
            iArr[(i23 >>> 1) % N] -= i21;
        }
        for (i24 = 13; i24 < 238; i24++) {
            i25 += i22;
            Test.instanceCount += i24 * i24;
            for (i27 = 1; i27 < 23; ++i27) {
                for (i29 = i24; i29 < 2; ++i29) {
                    i20 += i29;
                    i *= i29;
                    dArr1[i27 + 1] -= i25;
                    d3 = l;
                    switch (((i24 % 7) * 5) + 106) {
                        case 129 :
                            d3 *= i30;
                            Test.instanceCount %= ((long) (d3)) | 1;
                            Test.instanceCount = i23;
                            i28 += i30;
                            break;
                        case 121 :
                            if (b2)
                                continue;

                            try {
                                Test.iArrFld[(i25 >>> 1) % N] = iArr[i29 - 1] % 11;
                                Test.iFld = 25913 % iArr[i27 + 1];
                                i20 = (-255) % i19;
                            } catch (ArithmeticException a_e) {
                            }
                            Test.fFld = Test.instanceCount;
                            Test.iArrFld[i27] &= i30;
                            i20 *= i21;
                            i *= ((int) (Test.fFld));
                            i28 >>= -50746;
                            i20 -= i;
                            Test.fFld += i24;
                            break;
                        case 137 :
                            Test.fFld = ((float) (80.58404));
                            l += i29 | i30;
                            i += i29 + Test.iFld;
                            byArr[i24 - 1] += ((byte) (i22));
                            d3 += l1;
                            i = i27;
                            i25 += -8672;
                            l -= 11;
                            i += i29 - i30;
                            Test.iArrFld = Test.iArrFld;
                            break;
                        case 132 :
                            Test.fFld = i29;
                            l2 += i29 * i30;
                            Test.byFld <<= ((byte) (-238));
                            i28 -= ((int) (d3));
                            i28 += 13713;
                            i28 += 11 + (i29 * i29);
                            switch (((4 >>> 1) % 7) + 36) {
                                case 36 :
                                    i20 -= ((int) (l1));
                                    i25 = 14;
                                    iArr[i29 - 1] <<= i29;
                                    Test.fArrFld[i27] *= 28380;
                                    s += ((short) (i29));
                                    break;
                                case 37 :
                                    Test.fArrFld[i24 - 1] -= -133;
                                case 38 :
                                    dArr1[i27] *= -9;
                                case 39 :
                                    d3 -= -71;
                                    break;
                                case 40 :
                                    Test.iArrFld[i29] = i28;
                                case 41 :
                                    i28 = ((int) (-86.506F));
                                    break;
                                case 42 :
                                    i = i21;
                                    break;
                                default :
                                    l2 += ((i29 * i21) + l2) - i30;
                            }
                            break;
                        case 117 :
                            Test.fFld *= Test.fFld;
                            break;
                        case 108 :
                            i20 = ((int) (l));
                            break;
                        case 133 :
                            i20 += i29;
                            break;
                        default :
                            try {
                                Test.iFld = i30 / (-23071);
                                iArr[i24] = i27 % Test.iFld;
                                Test.iArrFld[i29] = Test.iArrFld[i29 + 1] / Test.iArrFld[i29 - 1];
                            } catch (ArithmeticException a_e) {
                            }
                    }
                }
            }
        }
        FuzzerUtils.out.println((((("i s i1 = " + i) + ",") + s) + ",") + i1);
        FuzzerUtils.out.println((((("i19 i20 i21 = " + i19) + ",") + i20) + ",") + i21);
        FuzzerUtils.out.println((((("i22 i23 b2 = " + i22) + ",") + i23) + ",") + (b2 ? 1 : 0));
        FuzzerUtils.out.println((((("d3 i24 i25 = " + Double.doubleToLongBits(d3)) + ",") + i24) + ",") + i25);
        FuzzerUtils.out.println((((("i27 i28 i29 = " + i27) + ",") + i28) + ",") + i29);
        FuzzerUtils.out.println((((("i30 l l1 = " + i30) + ",") + l) + ",") + l1);
        FuzzerUtils.out.println((((("l2 lArr iArr = " + l2) + ",") + FuzzerUtils.checkSum(lArr)) + ",") + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println((((("sArr byArr dArr1 = " + FuzzerUtils.checkSum(sArr)) + ",") + FuzzerUtils.checkSum(byArr)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount) + ",") + Float.floatToIntBits(Test.fFld)) + ",") + Test.iFld);
        FuzzerUtils.out.println((((("Test.byFld Test.iArrFld Test.fArrFld = " + Test.byFld) + ",") + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                {
                    try {
                        Object ax$8 = new int[2];
                        Object ax$9 = new Object();
                        String[] ax$11 = new String[]{ "s" };
                        boolean ax$12 = true;
                        String ax$13 = "s";
                        File ax$14 = null;
                        for (int ax$7 = -107; ax$7 < (-107 + 13053); ax$7 += 1) {
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                if (ax$9 != ax$8) {
                                }
                            } catch (Throwable ax$10) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                            Test.ax$0 = true;
                            _instance.mainTest(new String[]{ "s", "s", "s", "s", "s", "s" });
                            Test.ax$0 = false;
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                if (ax$14.isDirectory() && new File(ax$14, "SetCwd.class").exists()) {
                                    String ax$15 = ax$14.getCanonicalPath();
                                    Process ax$16 = null;
                                    if (ax$12) {
                                        ax$16 = Runtime.getRuntime().exec(ax$13, null, ax$14);
                                    } else {
                                        ax$16 = Runtime.getRuntime().exec(ax$11, null, ax$14);
                                    }
                                    BufferedReader ax$17 = new BufferedReader(new InputStreamReader(ax$16.getInputStream()));
                                    String ax$18 = ax$17.readLine();
                                    if (!ax$18.startsWith(ax$15)) {
                                    }
                                    ax$16.waitFor();
                                }
                            } catch (Throwable ax$19) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                        }
                    } finally {
                    }
                }
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}
