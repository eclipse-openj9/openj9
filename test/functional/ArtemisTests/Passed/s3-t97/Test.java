// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.math.BigDecimal;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -174L;

    public static boolean bFld = false;

    public static short sFld = 19545;

    public static byte byFld = -52;

    public float fFld = 52.42F;

    public int iFld = 2009;

    public double dFld = -1.19791;

    public static volatile short[] sArrFld = new short[N];

    public volatile long[] lArrFld = new long[N];

    public double[] dArrFld = new double[N];

    public float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short) -27637);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(short s) {
        if (ax$0) {
            try {
                long[] ax$1 = new long[10];
                java.lang.Long ax$4 = new Long(0xFFFFFFFFL);
                java.lang.Long ax$3 = new Long(0xFFFFFFFFL);
                for (Long ax$2 : ax$1) {
                    ax$4 += ax$2;
                    ax$3 += new Long(ax$2 + 1);
                }
            } catch (Throwable ax$5) {
            } finally {
            }
            return;
        }
        int i5 = 48238, i6 = -150, i7 = -182, i8 = -16749, i9 = -24146, i10 = 123, i11 = -6, i12 = -240, i14 = 67, i15 = -49649, i16 = -240, i17 = -17606, i18 = -14, iArr2[] = new int[N];
        double d1 = 0.105186, d2 = 62.70491;
        byte by = -47;
        float f3 = 0.144F, fArr[] = new float[N];
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, -3067219599L);
        FuzzerUtils.init(fArr, 110.15F);
        FuzzerUtils.init(iArr2, -39264);
        lArr = lArr;
        for (i5 = 11; i5 < 205; i5++) {
            i7 = 1;
            while (++i7 < 3) {
                i6 = i6;
                for (i8 = 1; 1 < i8; --i8) {
                    float f1 = -2.226F;
                    f1 += (i8 - i7);
                    Test.bFld = false;
                    Test.instanceCount = i5;
                    i6 += i6;
                    f1 += Test.instanceCount;
                }
                i6 -= (int) Test.instanceCount;
                Test.instanceCount += (((i7 * i5) + i7) - Test.instanceCount);
                i6 += (((i7 * i8) + Test.instanceCount) - i7);
                fArr[i7] += Test.instanceCount;
                for (d1 = 1; d1 > i7; d1--) {
                    i10 += by;
                    i10 = i8;
                    i9 = i6;
                    lArr = lArr;
                    i9 = i7;
                    try {
                        i6 = (1267087689 % iArr2[i5 + 1]);
                        i9 = (i5 / i5);
                        i6 = (-2071029712 % i8);
                    } catch (ArithmeticException a_e) {
                    }
                    i6 = i8;
                }
            }
            i10 += i5;
            i10 += i5;
        }
        for (i11 = 150; i11 > 7; --i11) {
            Test.instanceCount = i8;
            for (i14 = 1; i14 < 4; i14 += 2) {
                d2 = i12;
                i9 += i14;
                i15 %= (int) (i8 | 1);
                for (i16 = 1; i16 < 4; i16++) {
                    float f2 = 104.239F;
                    f2 += i6;
                    d2 = i11;
                }
                Test.instanceCount <<= Test.instanceCount;
                s <<= (short) i18;
                i12 += i5;
                f3 *= i11;
            }
        }
        vMeth2_check_sum += s + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d1) + i10 + by + i11 + i12 + i14 + i15 + Double.doubleToLongBits(d2) + i16 + i17 + i18 + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth1(long l) {
        if (ax$11) {
            try {
                java.lang.String ax$12 = "testIface001";
                try {
                    BigDecimal d = new BigDecimal(ax$12);
                } catch (NumberFormatException e) {
                }
            } catch (Throwable ax$13) {
            } finally {
            }
            return;
        }
        int i3 = -6, i4 = 31316, i19 = 0, i20 = 8, i21 = -58392, i22 = -3, i23 = -22, iArr1[] = new int[N], iArr3[][] = new int[N][N];
        double d = -1.94798;
        byte by1 = 108;
        float f4 = -47.602F;
        boolean[][] bArr = new boolean[N][N];
        long[][] lArr1 = new long[N][N];
        FuzzerUtils.init(iArr1, -38836);
        FuzzerUtils.init(iArr3, 1379);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr1, -5571965049127235923L);
        iArr1[(i3 >>> 1) % N] -= (int) (((--i3) + (i3 + Test.instanceCount)) + (i3 * (d++)));
        iArr1[(i3 >>> 1) % N] -= (int) (i3 += (int) ((i3 - i3) - d));
        i4 = 1;
        while (++i4 < 229) {
            {
                java.io.PrintStream ax$8 = System.out;
                java.io.PrintStream ax$9 = System.err;
                java.io.PrintStream ax$10 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$10);
                System.setErr(ax$10);
                try {
                    ax$0 = true;
                    for (int ax$6 = 0; ax$6 < 6798; ax$6 += 1) vMeth2((short) -254071695);
                } catch (java.lang.Throwable ax$7) {
                } finally {
                    ax$0 = false;
                }
                System.setOut(ax$8);
                System.setErr(ax$9);
            }
            vMeth2(Test.sFld);
            i3 += (-87 + (i4 * i4));
            for (i19 = 3; i19 > 1; i19 -= 3) {
                for (i21 = 1; i21 < 3; ++i21) {
                    iArr1[i21 + 1] = 32412;
                    switch((i4 % 2) + 15) {
                        case 15:
                            iArr3 = iArr3;
                            iArr3[i4][i21 + 1] += i21;
                            i20 += i21;
                            bArr[i21 + 1] = FuzzerUtils.boolean1array(N, (boolean) false);
                            Test.sFld += (short) (i21 - Test.instanceCount);
                            break;
                        case 16:
                            switch((i19 % 3) + 89) {
                                case 89:
                                    i20 >>>= (int) l;
                                    if (i3 != 0) {
                                        vMeth1_check_sum += l + i3 + Double.doubleToLongBits(d) + i4 + i19 + i20 + i21 + i22 + by1 + Float.floatToIntBits(f4) + i23 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1);
                                        return;
                                    }
                                    i3 += (int) Test.instanceCount;
                                    i3 += (((i21 * i21) + i4) - Test.instanceCount);
                                    lArr1[i4][i19 - 1] |= -62557;
                                    iArr1[i4 + 1] = 1;
                                    i20 = 13;
                                    d -= i4;
                                    i22 -= (int) -1L;
                                    l = i21;
                                    i3 += (11 + (i21 * i21));
                                case 90:
                                    i22 = i20;
                                    if (Test.bFld)
                                        continue;
                                    i22 = i3;
                                    i22 += (37686 + (i21 * i21));
                                    Test.instanceCount = i19;
                                    i20 += (i21 - i4);
                                    l <<= i4;
                                    Test.instanceCount += (-60393 + (i21 * i21));
                                    Test.sFld <<= by1;
                                    lArr1[i21][i4] -= i19;
                                    if (i21 != 0) {
                                        vMeth1_check_sum += l + i3 + Double.doubleToLongBits(d) + i4 + i19 + i20 + i21 + i22 + by1 + Float.floatToIntBits(f4) + i23 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1);
                                        return;
                                    }
                                case 91:
                                default:
                                    i22 += i21;
                            }
                            break;
                        default:
                            f4 = i23;
                    }
                }
            }
        }
        vMeth1_check_sum += l + i3 + Double.doubleToLongBits(d) + i4 + i19 + i20 + i21 + i22 + by1 + Float.floatToIntBits(f4) + i23 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(float f, int i, int i1) {
        if (ax$19) {
            int ax$22 = i;
            int ax$23 = i1;
            try {
                int[] ax$21 = { 1, 3 };
                int[] ax$20 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
                ax$21[i1] = (int) (ax$20[i1] / i);
            } catch (Throwable ax$24) {
            } finally {
                i = ax$22;
                i1 = ax$23;
            }
            return;
        }
        int i2 = 34155, i24 = -13, i25 = -25980, i26 = -1, iArr[][] = new int[N][N];
        double d3 = 0.130037;
        byte by2 = 68;
        float[] fArr1 = new float[N];
        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(fArr1, -2.977F);
        i += (int) ((-(++i1)) - (iArr[(i >>> 1) % N][(i >>> 1) % N] -= (int) (--f)));
        i2 = 1;
        do {
            {
                java.io.PrintStream ax$16 = System.out;
                java.io.PrintStream ax$17 = System.err;
                java.io.PrintStream ax$18 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$18);
                System.setErr(ax$18);
                try {
                    ax$11 = true;
                    for (int ax$14 = 0; ax$14 < 6514; ax$14 += 1) vMeth1(-6919261604172127396L);
                } catch (java.lang.Throwable ax$15) {
                } finally {
                    ax$11 = false;
                }
                System.setOut(ax$16);
                System.setErr(ax$17);
            }
            vMeth1(Test.instanceCount);
            i ^= (int) Test.instanceCount;
            i24 = 1;
            while ((i24 += 2) < 4) {
                fArr1[i2] += i2;
                i1 -= (int) Test.instanceCount;
                i1 += i1;
                i += (int) -7333099738170790220L;
                i1 = i1;
                for (i25 = 1; i25 < 2; i25 += 2) {
                    f *= Test.sFld;
                    i26 = i1;
                    Test.sArrFld = Test.sArrFld;
                    i26 += (int) Test.instanceCount;
                    switch((i24 % 9) + 62) {
                        case 62:
                            Test.instanceCount = i2;
                            Test.instanceCount -= i2;
                            Test.byFld -= (byte) i2;
                            i = Test.sFld;
                            iArr[i24][i25] = i26;
                            f -= i25;
                            if (Test.bFld)
                                break;
                            i1 = i26;
                            Test.byFld |= (byte) Test.instanceCount;
                            f = -6276549299092189841L;
                            break;
                        case 63:
                            i <<= 2;
                            i += i25;
                            try {
                                iArr[i24][i24 - 1] = (-236008961 % i1);
                                i = (2111302966 / i24);
                                i = (1182445822 % iArr[i25 - 1][i24]);
                            } catch (ArithmeticException a_e) {
                            }
                            iArr[i2][i24 + 1] <<= Test.sFld;
                            iArr[i24][i2 - 1] -= Test.sFld;
                            Test.instanceCount += i1;
                            if (true) {
                                Test.instanceCount += i25;
                                if (i2 != 0) {
                                    vMeth_check_sum += Float.floatToIntBits(f) + i + i1 + i2 + i24 + i25 + i26 + Double.doubleToLongBits(d3) + by2 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                                    return;
                                }
                            } else if (Test.bFld) {
                                try {
                                    i1 = (i % iArr[i25 + 1][i24 + 1]);
                                    i = (i26 / -63191);
                                    i1 = (1064885273 / i24);
                                } catch (ArithmeticException a_e) {
                                }
                                d3 -= i24;
                            } else if (Test.bFld) {
                                f = i;
                            } else {
                                i26 += (i25 | i);
                            }
                            break;
                        case 64:
                            Test.instanceCount -= i;
                            break;
                        case 65:
                            Test.instanceCount = i24;
                            break;
                        case 66:
                            Test.instanceCount = (long) f;
                            break;
                        case 67:
                            i26 -= i2;
                            break;
                        case 68:
                            Test.instanceCount = i26;
                            break;
                        case 69:
                            i += (((i25 * Test.instanceCount) + i2) - i25);
                            break;
                        case 70:
                            i += (((i25 * by2) + i26) - i26);
                            break;
                    }
                }
            }
        } while (++i2 < 163);
        vMeth_check_sum += Float.floatToIntBits(f) + i + i1 + i2 + i24 + i25 + i26 + Double.doubleToLongBits(d3) + by2 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {
        int i27 = 0, i28 = 235, i29 = -103, i30 = -162, i31 = 3, i32 = -5, i33 = 4, i34 = 7402, i35 = 221, i36 = -92, i37 = 33355, i38 = 17452, i39 = 11, i40 = 10, i41 = -12, i42 = 0, iArr4[] = new int[N];
        float f5 = 9.500F;
        FuzzerUtils.init(iArr4, 121);
        {
            java.io.PrintStream ax$27 = System.out;
            java.io.PrintStream ax$28 = System.err;
            java.io.PrintStream ax$29 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$29);
            System.setErr(ax$29);
            try {
                ax$19 = true;
                for (int ax$25 = 0; ax$25 < 7386; ax$25 += 1) vMeth((float) 0.629938922342406, -312532065, 1453236330);
            } catch (java.lang.Throwable ax$26) {
            } finally {
                ax$19 = false;
            }
            System.setOut(ax$27);
            System.setErr(ax$28);
        }
        vMeth(fFld, i27, i27);
        Test.instanceCount = 2640200706L;
        i27 <<= i27;
        iArr4[(i27 >>> 1) % N] = i27;
        fFld = 66.870F;
        Test.sFld += (short) -12;
        i27 ^= i27;
        for (i28 = 7; i28 < 130; ++i28) {
            Test.instanceCount &= 9;
        }
        i27 = i29;
        for (i30 = 2; i30 < 174; ++i30) {
            i31 *= Test.byFld;
            fFld += i30;
            iArr4[i30] -= (int) Test.instanceCount;
            if (true)
                break;
            i27 ^= i32;
            for (i33 = 1; i33 < 30; i33++) {
                iFld += (i33 | i34);
                if (Test.bFld)
                    break;
                iFld += (i33 ^ i30);
                i31 *= i29;
                f5 = Test.instanceCount;
                for (i35 = 1; i35 < 2; i35 += 3) {
                    iFld -= (int) Test.instanceCount;
                    if (false)
                        break;
                    Test.instanceCount ^= -3L;
                    i36 >>= Test.sFld;
                    Test.instanceCount = -67;
                    Test.instanceCount += (((i35 * Test.instanceCount) + iFld) - i36);
                    Test.byFld |= (byte) i29;
                    f5 = f5;
                    iFld <<= -32;
                    try {
                        i34 = (i28 / i36);
                        iArr4[i33 - 1] = (iArr4[i35] / i29);
                        iArr4[i30 - 1] = (-83 / iArr4[i30 + 1]);
                    } catch (ArithmeticException a_e) {
                    }
                }
                Test.instanceCount *= Test.instanceCount;
                iArr4[i33 + 1] >>>= i31;
                i32 -= i27;
                i32 = (int) Test.instanceCount;
                for (i37 = 1; 2 > i37; i37++) {
                    iFld += i36;
                    iArr4[i30 - 1] = -128;
                    lArrFld[i37] = i36;
                    dArrFld[i30 + 1] = Test.byFld;
                    f5 += (4077225L + (i37 * i37));
                    Test.instanceCount >>>= i37;
                    iArr4[i37 + 1] += (int) Test.instanceCount;
                    Test.byFld *= (byte) -7;
                }
                Test.instanceCount *= (long) f5;
                fArrFld[i30] += 48.546F;
            }
            i36 += (i30 | Test.instanceCount);
            i31 -= iFld;
            if (Test.bFld)
                continue;
            iFld += (i30 ^ Test.instanceCount);
            for (i39 = 1; i39 < 30; i39++) {
                for (i41 = 1; i41 < 2; ++i41) {
                    iArr4[i41] *= i29;
                    i38 = i35;
                    if (true) {
                        i38 = (int) Test.instanceCount;
                        i42 = i32;
                        fFld = i35;
                        i38 = i40;
                        iFld = iFld;
                        dFld = iFld;
                        iArr4 = iArr4;
                        Test.byFld = (byte) Test.instanceCount;
                        i34 -= i37;
                        f5 -= Test.byFld;
                        i32 = (int) Test.instanceCount;
                        Test.instanceCount = (long) fFld;
                        iArr4 = iArr4;
                        i31 -= (int) Test.instanceCount;
                    } else if (false) {
                        Test.instanceCount *= (long) -1.914F;
                        Test.byFld -= (byte) -50759;
                        iArr4[i30 - 1] += (int) fFld;
                        if (Test.bFld)
                            break;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 f5 = " + i33 + "," + i34 + "," + Float.floatToIntBits(f5));
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("i38 i39 i40 = " + i38 + "," + i39 + "," + i40);
        FuzzerUtils.out.println("i41 i42 iArr4 = " + i41 + "," + i42 + "," + FuzzerUtils.checkSum(iArr4));
        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.sFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.byFld fFld iFld = " + Test.byFld + "," + Float.floatToIntBits(fFld) + "," + iFld);
        FuzzerUtils.out.println("dFld Test.sArrFld lArrFld = " + Double.doubleToLongBits(dFld) + "," + FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("dArrFld fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$30) {
            try {
                java.lang.Object[] ax$34 = new Object[100000];
                java.lang.Object ax$32 = "3.558140908285596E-41";
                java.lang.Object ax$33 = "7.377526913516641E-11";
                for (int ax$31 = 0; ax$31 < ax$34.length; ax$31++) {
                    ax$34[ax$31] = ax$32;
                    if (ax$31 == 10)
                        ax$32 = ax$33;
                }
            } catch (Throwable ax$35) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$11 = false;

    private static Boolean ax$19 = false;

    private static Boolean ax$30 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
