// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.ArrayList;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 2267775483928645551L;

    public boolean bFld = true;

    public static float fFld = -60.385F;

    public static byte byFld = -100;

    public static short sFld = -14983;

    public static volatile int iFld = 212;

    public static long lFld = -10499L;

    public int iFld1 = 80;

    public static int iFld2 = 919;

    public volatile float fFld1 = -2.165F;

    public int iFld3 = -58426;

    public static int[] iArrFld = new int[N];

    public static float[] fArrFld = new float[N];

    public long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 145);
        FuzzerUtils.init(Test.fArrFld, 6.656F);
    }

    public static long vMeth_check_sum = 0;

    public static long bMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i1, long l, short s) {
        int i2 = 61, i3 = -9, i4 = 9, i5 = 207, i6 = -6038, i7 = 3, i8 = 1088, i9 = -8, iArr[][] = new int[N][N];
        double d = -1.117862;
        boolean b = false;
        FuzzerUtils.init(iArr, 12);
        Test.fFld += i1;
        i1 += 4;
        i1 = i1;
        iArr[(i1 >>> 1) % N][(i1 >>> 1) % N] = i1;
        iArr[(i1 >>> 1) % N][(i1 >>> 1) % N] |= -29;
        i2 -= Test.byFld;
        iArr[(i1 >>> 1) % N][(i2 >>> 1) % N] += Test.byFld;
        for (i3 = 7; i3 < 128; ++i3) {
            for (i5 = 1; i5 < 5; ++i5) {
                d += Test.instanceCount;
                i2 += i4;
                i6 += 53;
                Test.fFld = i6;
            }
            i1 += (((i3 * i4) + i2) - Test.fFld);
            i7 = 1;
            while (++i7 < 5) {
                if (b)
                    break;
                iArr[i3] = iArr[i7 + 1];
                for (i8 = 1; i8 < 1; ++i8) {
                    switch(((i7 % 2) * 5) + 85) {
                        case 93:
                            i4 += (((i8 * i8) + Test.instanceCount) - s);
                            switch((i8 % 2) + 67) {
                                case 67:
                                    iArr[i8 + 1][i8] -= 6;
                                    l += (((i8 * Test.instanceCount) + l) - l);
                                case 68:
                                    switch(((i8 % 2) * 5) + 72) {
                                        case 82:
                                            i4 = i9;
                                            iArr[(-19141 >>> 1) % N][i7] = Test.byFld;
                                            i1 <<= i5;
                                            iArr[i7 - 1][i3 + 1] += i4;
                                            switch((i7 % 10) + 121) {
                                                case 121:
                                                    i2 = (int) l;
                                                    Test.fFld += i6;
                                                    l += i8;
                                                    i2 = -7407;
                                                    i9 -= -24182;
                                                    Test.instanceCount >>= i4;
                                                    Test.instanceCount += i2;
                                                    i4 = i1;
                                                case 122:
                                                    i9 -= i9;
                                                    break;
                                                case 123:
                                                    i4 = 52610;
                                                    break;
                                                case 124:
                                                    i6 += (int) 1084994006456155856L;
                                                case 125:
                                                    i2 = i7;
                                                    break;
                                                case 126:
                                                    i6 -= i3;
                                                case 127:
                                                    Test.fFld += i8;
                                                case 128:
                                                    Test.instanceCount += (-62100 + (i8 * i8));
                                                    break;
                                                case 129:
                                                    i2 = (int) Test.fFld;
                                                case 130:
                                            }
                                            break;
                                        case 78:
                                            i4 >>>= i3;
                                            break;
                                    }
                            }
                            break;
                        case 86:
                            i6 += (i8 * i8);
                    }
                }
            }
        }
        vMeth1_check_sum += i1 + l + s + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + i7 + (b ? 1 : 0) + i8 + i9 + FuzzerUtils.checkSum(iArr);
    }

    public static boolean bMeth(int i) {
        int i10 = -2, i11 = 24746, i12 = 1738, i13 = 3, i14 = -15450, i15 = -12, i16 = 1, i17 = -139, i18 = -59, i19 = 34278, i20 = 68, i21 = 3, i22 = 185, iArr1[][] = new int[N][N];
        float f1 = 114.420F, fArr[] = new float[N];
        double d1 = -111.121563;
        boolean b1 = true;
        long l1 = 4465162021343005303L, lArr[] = new long[N];
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr1, -11);
        FuzzerUtils.init(fArr, 119.5F);
        FuzzerUtils.init(lArr, -11639L);
        FuzzerUtils.init(byArr, (byte) -23);
        vMeth1(i, Test.instanceCount, Test.sFld);
        for (i10 = 4; 246 > i10; ++i10) {
            for (f1 = i10; f1 < 3; f1++) {
                float f2 = -87.317F;
                i13 = i11;
                Test.instanceCount = i10;
                i -= 12;
                i11 = Test.sFld;
                if (b1) {
                    i12 += (40647 + (f1 * f1));
                    Test.instanceCount += (long) f1;
                    Test.byFld -= (byte) i;
                    Test.instanceCount += i13;
                    i13 += (int) (f1 * f1);
                    Test.iArrFld[(int) (f1 + 1)] += (int) 26.759F;
                    switch((int) ((f1 * 5) + 24)) {
                        case 225:
                            iArr1 = FuzzerUtils.int2array(N, (int) -8);
                            for (i14 = 1; i14 > 1; --i14) {
                                Test.fFld -= -45667;
                                i11 *= i;
                                i12 -= i13;
                                i = i15;
                            }
                            Test.instanceCount = i;
                            for (i16 = 1; f1 < i16; i16--) {
                                i15 += i14;
                                i15 += i10;
                                Test.fFld -= 33717;
                                Test.iArrFld[i16 - 1] = (int) Test.instanceCount;
                                d1 = d1;
                                i12 = (int) Test.instanceCount;
                            }
                            i12 += (int) (((f1 * i17) + Test.byFld) - f1);
                            i = 17703;
                            i15 += (int) (f1 * f1);
                            Test.iArrFld[i10 + 1] += Test.sFld;
                        case 53:
                            for (i18 = 1; i18 < 1; ++i18) {
                                Test.instanceCount += (i18 ^ Test.iFld);
                                Test.instanceCount = Test.instanceCount;
                                i -= (int) d1;
                            }
                            break;
                        case 103:
                            i13 *= (int) Test.instanceCount;
                            break;
                        case 118:
                            b1 = b1;
                            break;
                        case 224:
                            i15 *= i16;
                            break;
                        case 365:
                            i19 = (int) d1;
                            break;
                        case 337:
                            i11 = i14;
                            break;
                        case 371:
                            i15 += i19;
                            break;
                        case 173:
                            i13 += (int) f1;
                            break;
                        case 69:
                            i17 += (int) (((f1 * f1) + Test.instanceCount) - Test.instanceCount);
                        case 189:
                            iArr1 = iArr1;
                            break;
                        case 342:
                            fArr[i10] += i17;
                        case 62:
                            Test.sFld += (short) (f1 + i11);
                            break;
                        case 47:
                            Test.iFld *= (int) Test.instanceCount;
                        case 240:
                            i12 -= Test.byFld;
                            break;
                        case 144:
                            Test.iArrFld[(int) (f1 - 1)] = i11;
                            break;
                        case 25:
                            Test.instanceCount = i20;
                            break;
                        case 221:
                            i21 = i12;
                            break;
                        case 139:
                            try {
                                i12 = (i21 / 1222026437);
                                i17 = (i10 % iArr1[(int) (f1)][(int) (f1)]);
                                i = (i11 % -15033);
                            } catch (ArithmeticException a_e) {
                            }
                        case 364:
                            i15 = (int) 148L;
                        case 117:
                            Test.fFld += (((f1 * i21) + i16) - i10);
                            break;
                        case 264:
                            i += Test.iFld;
                            break;
                        case 176:
                            i11 += (int) f1;
                            break;
                        case 273:
                            i17 += (int) f1;
                        case 89:
                            lArr[i10 - 1] *= (long) d1;
                            break;
                        case 352:
                            iArr1[i10][i10 - 1] <<= i10;
                            break;
                        case 29:
                            i17 = i12;
                        case 275:
                            if (b1)
                                break;
                            break;
                        case 246:
                            Test.instanceCount = i13;
                            break;
                        case 310:
                            Test.instanceCount *= l1;
                            break;
                        case 262:
                            Test.instanceCount = i14;
                            break;
                        case 289:
                            l1 >>= Test.lFld;
                            break;
                        case 286:
                            Test.instanceCount = Test.byFld;
                            break;
                        case 51:
                            i21 >>>= i11;
                            break;
                        case 188:
                            if (b1)
                                continue;
                            break;
                        case 199:
                            Test.fFld *= i13;
                            break;
                        case 267:
                            l1 = i16;
                        case 252:
                            i13 = i;
                            break;
                        case 332:
                            if (b1)
                                continue;
                            break;
                        case 84:
                            i13 -= (int) 8809031064142753580L;
                            break;
                        case 247:
                            byArr[(int) (f1)] += (byte) i18;
                            break;
                        case 374:
                            Test.fFld -= f1;
                            break;
                        case 283:
                            i19 = i18;
                            break;
                        case 226:
                        case 30:
                            iArr1[i10][(int) (f1 - 1)] = (int) Test.instanceCount;
                            break;
                        case 27:
                            if (i11 != 0) {
                                return ((int) (i + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(d1) + i18 + i19 + (b1 ? 1 : 0) + i20 + i21 + l1 + i22 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr))) % 2 > 0;
                            }
                        case 198:
                            Test.iArrFld[i10] = (int) 131L;
                        case 297:
                            fArr[i10 + 1] = i13;
                        case 56:
                            Test.lFld = -26993;
                            break;
                        case 360:
                        case 322:
                            if (b1)
                                continue;
                        case 75:
                            iArr1[i10 - 1][i10 + 1] <<= (int) Test.instanceCount;
                            break;
                        case 315:
                            iArr1[i10 + 1][i10] = 45695;
                        case 83:
                            iArr1[(int) (f1 - 1)][i10 - 1] *= (int) f1;
                            break;
                        case 138:
                            fArr[i10 + 1] -= i11;
                        case 236:
                            i20 = i18;
                            break;
                        case 215:
                            iArr1[i10 + 1][(int) (f1 + 1)] = i21;
                            break;
                        case 164:
                            i13 = i15;
                            break;
                        case 184:
                        case 177:
                            i11 += (int) (((f1 * i21) + Test.instanceCount) - f2);
                            break;
                        case 85:
                        case 363:
                            i = (int) l1;
                        case 86:
                            i19 += (int) (((f1 * i13) + i14) - Test.iFld);
                        case 235:
                            i15 = (int) l1;
                            break;
                        case 180:
                            l1 <<= Test.byFld;
                            break;
                        case 207:
                            b1 = true;
                            break;
                        case 249:
                            i17 |= i22;
                        case 59:
                            i += (int) (((f1 * i22) + Test.lFld) - i15);
                        case 369:
                            i13 *= (int) Test.instanceCount;
                        case 305:
                        default:
                            Test.lFld += (long) d1;
                    }
                }
            }
        }
        long meth_res = i + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(d1) + i18 + i19 + (b1 ? 1 : 0) + i20 + i21 + l1 + i22 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void vMeth() {
        float f = 6.885F;
        int i23 = 2, i24 = -173, i25 = -55151, i26 = -1, i27 = -25, i28 = -13, i29 = -1, i30 = -3;
        double d2 = 47.80739;
        f = 1;
        do {
            bFld = (bFld = (bFld = bMeth(iFld1)));
        } while ((f += 2) < 81);
        for (i23 = 1; i23 < 154; i23++) {
            Test.byFld += (byte) (i23 * i23);
            i24 = Test.sFld;
            iFld1 += (i23 - Test.byFld);
            for (i25 = i23; i25 < 4; i25++) {
                for (i27 = 1; i27 < 1; i27++) {
                    i24 *= i28;
                    i26 += (i27 * i27);
                    i24 += (int) f;
                }
                Test.instanceCount += (i25 * i25);
                Test.instanceCount = -2977053160L;
                if (bFld)
                    break;
                i26 >>= i26;
                Test.iFld += i23;
                d2 = iFld1;
                i28 *= -171;
                Test.fArrFld[i25 - 1] = Test.sFld;
                try {
                    Test.iFld = (18 / i25);
                    Test.iFld = (26898 / i25);
                    iFld1 = (i23 % Test.iArrFld[i23]);
                } catch (ArithmeticException a_e) {
                }
                Test.fFld += 0;
            }
            i28 += i23;
            {
                java.io.PrintStream ax$0 = System.out;
                java.io.PrintStream ax$1 = System.err;
                java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$2);
                System.setErr(ax$2);
                {
                    boolean ax$9 = false;
                    for (int ax$8 = -3081; ax$8 < 3840; ax$8 += 8) {
                        if (!ax$9) {
                            ax$9 = true;
                            {
                                System.setOut(ax$0);
                                System.setErr(ax$1);
                                try {
                                    i24 = (Test.iArrFld[i23] % -1268164801);
                                    i26 = (iFld1 % 1203);
                                    i28 = (i27 / 15943);
                                } catch (ArithmeticException a_e) {
                                }
                                System.setOut(ax$2);
                                System.setErr(ax$2);
                            }
                        }
                        try {
                            List ax$3 = Collections.nCopies(7, "deadly sin");
                            List ax$5 = Collections.nCopies(4, "basic food group");
                            List ax$4 = new ArrayList(ax$3);
                            List ax$6 = new LinkedList(ax$3);
                            ax$4.addAll(ax$5);
                            ax$6.addAll(ax$5);
                            if (!ax$4.equals(ax$6))
                                ;
                        } catch (Throwable ax$7) {
                        } finally {
                        }
                    }
                }
                System.setOut(ax$0);
                System.setErr(ax$1);
            }
            Test.instanceCount += (i23 * i23);
            Test.lFld >>>= Test.byFld;
            Test.iArrFld[i23 + 1] ^= iFld1;
            lArrFld[i23] *= Test.instanceCount;
            for (i29 = 1; i29 < 4; i29++) {
                Test.iFld += (int) Test.lFld;
                Test.iArrFld[i23] = (int) Test.lFld;
                Test.iFld2 = iFld1;
                Test.iFld += i29;
                i26 -= i23;
                lArrFld = lArrFld;
                Test.iArrFld[i23 + 1] -= (int) Test.fFld;
                iFld1 &= (int) Test.lFld;
                bFld = bFld;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i23 + i24 + i25 + i26 + i27 + i28 + Double.doubleToLongBits(d2) + i29 + i30;
    }

    public void mainTest(String[] strArr1) {
        if (ax$10) {
            long ax$11 = bMeth_check_sum;
            long ax$12 = vMeth1_check_sum;
            try {
                for (; vMeth1_check_sum > 100; ++bMeth_check_sum) {
                    vMeth1_check_sum %= 10;
                }
            } catch (Throwable ax$13) {
            } finally {
                bMeth_check_sum = ax$11;
                vMeth1_check_sum = ax$12;
            }
            return;
        }
        double d3 = 77.39920, d4 = 81.16185, dArr[] = new double[N];
        int i31 = 24400, i32 = 51286, i33 = 133, i34 = -7, i35 = 3, i36 = -61339, i37 = -231, i38 = -26922;
        float f3 = -121.4F;
        long l2 = 89L;
        FuzzerUtils.init(dArr, 0.127589);
        vMeth();
        for (d3 = 219; d3 > 6; d3--) {
            Test.lFld |= Test.iFld2;
            for (f3 = 1; f3 < 24; f3++) {
                Test.instanceCount -= i31;
                bFld = bFld;
                Test.fFld = -1;
                i32 %= (int) ((long) (d3) | 1);
                for (i33 = 1; 2 > i33; i33++) {
                    if (bFld) {
                        iFld1 += i33;
                        Test.iFld = 7334;
                    } else {
                        Test.lFld = iFld1;
                        Test.iFld += (((i33 * Test.byFld) + Test.byFld) - i33);
                        Test.iFld2 *= i31;
                        Test.fArrFld[(int) (f3 + 1)] = Test.byFld;
                        i34 <<= i32;
                        iFld1 *= (int) Test.fFld;
                        Test.iFld = i34;
                        i34 = Test.iFld;
                        Test.iArrFld[i33 - 1] = i34;
                        if (bFld)
                            break;
                        if (false) {
                            Test.iFld2 += i32;
                        }
                        Test.iFld += i34;
                        i34 += i34;
                        Test.instanceCount += i33;
                    }
                    lArrFld[(int) (f3)] = i33;
                    i32 <<= Test.sFld;
                    d4 %= ((long) (d4) | 1);
                    Test.byFld = (byte) Test.iFld;
                    Test.instanceCount = -131;
                    bFld = bFld;
                    Test.lFld += Test.sFld;
                }
                i31 += (int) (f3 - i32);
                if (bFld)
                    continue;
            }
            i35 = 1;
            while (++i35 < 24) {
                Test.byFld = (byte) i33;
                d4 *= -156;
            }
            for (i36 = 1; i36 < 24; i36++) {
                Test.iFld2 *= i31;
                iFld1 += Test.iFld2;
                i32 &= iFld1;
                iFld1 *= 6831;
                Test.instanceCount += (i36 * i36);
                for (l2 = 1; l2 < 2; l2++) {
                    Test.iArrFld[(int) (d3)] *= i35;
                    try {
                        i31 = (iFld1 % -1862573168);
                        Test.iFld2 = (i33 / -44);
                        Test.iFld = (Test.iArrFld[i36 - 1] % i38);
                    } catch (ArithmeticException a_e) {
                    }
                    Test.iArrFld = Test.iArrFld;
                    Test.lFld = (long) 1.22510;
                    Test.fFld /= (i37 | 1);
                    lArrFld[(int) (l2 + 1)] <<= 25022;
                    iFld1 |= (int) Test.lFld;
                    switch((int) (((l2 % 2) * 5) + 5)) {
                        case 8:
                            switch(((i34 >>> 1) % 4) + 100) {
                                case 100:
                                    lArrFld[(int) (d3 + 1)] -= i32;
                                    Test.instanceCount >>= i36;
                                    i32 += (int) (51676L + (l2 * l2));
                                    switch((int) ((d3 % 10) + 10)) {
                                        case 10:
                                            Test.instanceCount |= i37;
                                            i34 -= i38;
                                            i37 += (int) l2;
                                            break;
                                        case 11:
                                            if (true) {
                                                Test.lFld = i31;
                                                d4 -= -233L;
                                                Test.sFld += (short) i37;
                                                i34 = iFld1;
                                                i37 = i36;
                                                Test.iArrFld[i36] += 54049;
                                                i34 += Test.byFld;
                                                Test.instanceCount += i36;
                                                Test.lFld = i35;
                                                Test.lFld += (long) Test.fFld;
                                                Test.iFld2 += i31;
                                            } else if (bFld) {
                                                Test.fFld += l2;
                                            }
                                            break;
                                        case 12:
                                            iFld1 += (int) d3;
                                            break;
                                        case 13:
                                            i38 = Test.iFld2;
                                            break;
                                        case 14:
                                            i32 += (int) (l2 - Test.iFld2);
                                            break;
                                        case 15:
                                            Test.lFld <<= l2;
                                            break;
                                        case 16:
                                            d4 += i34;
                                            break;
                                        case 17:
                                            Test.iArrFld[(int) (d3 + 1)] = i31;
                                            break;
                                        case 18:
                                            fFld1 = Test.iFld;
                                            break;
                                        case 19:
                                            i31 -= i32;
                                        default:
                                            dArr[(int) (d3 - 1)] += i34;
                                    }
                                    break;
                                case 101:
                                    i34 *= (int) Test.instanceCount;
                                    break;
                                case 102:
                                    iFld3 = (int) 6L;
                                    break;
                                case 103:
                                    Test.lFld |= i33;
                                    break;
                                default:
                                    Test.iFld = (int) 0L;
                            }
                            break;
                        case 11:
                            i32 = Test.iFld2;
                            break;
                        default:
                            Test.lFld += (((l2 * i31) + l2) - f3);
                    }
                }
            }
        }
        FuzzerUtils.out.println("d3 i31 f3 = " + Double.doubleToLongBits(d3) + "," + i31 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("d4 i35 i36 = " + Double.doubleToLongBits(d4) + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 l2 i38 = " + i37 + "," + l2 + "," + i38);
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("Test.instanceCount bFld Test.fFld = " + Test.instanceCount + "," + (bFld ? 1 : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld Test.sFld Test.iFld = " + Test.byFld + "," + Test.sFld + "," + Test.iFld);
        FuzzerUtils.out.println("Test.lFld iFld1 Test.iFld2 = " + Test.lFld + "," + iFld1 + "," + Test.iFld2);
        FuzzerUtils.out.println("fFld1 iFld3 Test.iArrFld = " + Float.floatToIntBits(fFld1) + "," + iFld3 + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld lArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$19) {
            int ax$22 = iFld2;
            try {
                double[] ax$21 = { 0.0, 1.0, 2.0, 3.0 };
                long[] ax$20 = new long[] { 0x1122334455667788L, 0x8877665544332211L, 0L, 1L, -1l };
                ax$20[iFld2] = (long) ax$21[20] - 7;
            } catch (Throwable ax$23) {
            } finally {
                iFld2 = ax$22;
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$10 = false;

    private static Boolean ax$19 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  bMeth ->  bMeth vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 bMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
