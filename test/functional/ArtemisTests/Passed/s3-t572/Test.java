// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.SortedSet;
import java.util.TreeSet;

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = 741199430L;

    public static float fFld = -58.610F;

    public static boolean bFld = true;

    public double dFld = 31.30397;

    public static float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.79F);
    }

    public static long lMeth_check_sum = 0;

    public static long lMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6) {
        int i7 = 48833, i8 = 3, i9 = -12492, i10 = -12153, i11 = -2, i12 = -15413, i13 = -140, i14 = -249, i15 = 2, iArr1[] = new int[N];
        short s = 23795;
        float f1 = 74.826F;
        double d2 = -54.90391, dArr[] = new double[N];
        FuzzerUtils.init(iArr1, 4);
        FuzzerUtils.init(dArr, 57.29435);
        i7 = 1;
        {
            java.io.PrintStream ax$0 = System.out;
            java.io.PrintStream ax$1 = System.err;
            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$2);
            System.setErr(ax$2);
            {
                boolean ax$7 = false;
                for (int ax$6 = -2135; ax$6 < 3214; ax$6 += 8) {
                    if (!ax$7) {
                        ax$7 = true;
                        {
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                            while (++i7 < 80) {
                                i8 = 1;
                                do {
                                    if (i9 != 0) {
                                    }
                                    i6 = s;
                                    i9 &= i9;
                                    Test.instanceCount = i8;
                                    i9 >>>= i10;
                                    Test.fArrFld[i8] = i10;
                                    for (f1 = i7; 1 > f1; ++f1) {
                                        try {
                                            iArr1[(int) (f1 - 1)] = (i6 / 42920);
                                            iArr1[(int) (f1)] = (84 / iArr1[i7]);
                                            i11 = (77 % i10);
                                        } catch (ArithmeticException a_e) {
                                        }
                                    }
                                    i11 *= s;
                                    iArr1[i8] = i12;
                                    i12 /= (int) (i6 | 1);
                                    Test.instanceCount = i9;
                                    i12 += (i8 * i8);
                                    Test.instanceCount <<= i6;
                                } while (++i8 < 7);
                                Test.instanceCount += Test.instanceCount;
                                i13 = 1;
                                do {
                                    byte by = 78;
                                    switch(((i13 >>> 1) % 2) + 77) {
                                        case 77:
                                            switch(((i11 >>> 1) % 2) + 114) {
                                                case 114:
                                                    i10 >>>= i11;
                                                    Test.instanceCount = 33516;
                                                    Test.fFld += (((i13 * Test.instanceCount) + i9) - by);
                                                    i6 += (((i13 * Test.instanceCount) + i7) - Test.instanceCount);
                                                    s += (short) i10;
                                                    try {
                                                        i6 = (iArr1[i13 + 1] % i11);
                                                        iArr1[i13 - 1] = (i12 / 5632);
                                                        i14 = (58603 % i9);
                                                    } catch (ArithmeticException a_e) {
                                                    }
                                                    i10 = 56;
                                                    i12 += i7;
                                                    if (true)
                                                        continue;
                                                    i15 = 1;
                                                    while ((i15 -= 2) > 0) {
                                                        double d1 = -27.48509;
                                                        d1 = i9;
                                                        by += (byte) (i15 | i9);
                                                        i10 = (int) Test.instanceCount;
                                                        Test.instanceCount += (((i15 * i8) + i10) - i9);
                                                        dArr[i13 + 1] += Test.instanceCount;
                                                        Test.fFld += i15;
                                                        i9 = i8;
                                                    }
                                                    break;
                                                case 115:
                                                    d2 -= i6;
                                                    break;
                                            }
                                            break;
                                        case 78:
                                        default:
                                            Test.instanceCount >>= i10;
                                    }
                                } while (++i13 < 7);
                            }
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                        }
                    }
                    int ax$4 = i9;
                    try {
                        double[] ax$3 = { 0.0, 1.0, 2.0, 3.0 };
                        ax$3[i9] = i9;
                    } catch (Throwable ax$5) {
                    } finally {
                        i9 = ax$4;
                    }
                }
            }
            System.setOut(ax$0);
            System.setErr(ax$1);
        }
        long meth_res = i6 + i7 + i8 + i9 + s + i10 + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static long lMeth1() {
        int i4 = 14, i5 = 146, i16 = -14, i17 = 34839, i18 = 80, i19 = -2, i20 = 124, iArr[] = new int[N];
        float f = 2.471F;
        double d = 106.123934;
        byte by1 = 75;
        boolean b = true;
        FuzzerUtils.init(iArr, -44980);
        {
            java.io.PrintStream ax$8 = System.out;
            java.io.PrintStream ax$9 = System.err;
            java.io.PrintStream ax$10 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$10);
            System.setErr(ax$10);
            {
                boolean ax$14 = false;
                for (int ax$13 = -521; ax$13 < 7441; ax$13 += 6) {
                    if (!ax$14) {
                        ax$14 = true;
                        {
                            System.setOut(ax$8);
                            System.setErr(ax$9);
                            for (i4 = 128; i4 > 8; --i4) {
                                i5 -= (int) (iArr[i4] = (int) (i5 - (5 + (i5 + f))));
                                f += (i4 * i4);
                                f += (((i4 * i5) + i5) - i5);
                                i5 += (((i4 * i5) + i5) - i4);
                                iArr[i4] *= (int) ((long) (43241L + (-(d--))) | (iMeth(i4) + i5));
                                i5 += i5;
                                Test.instanceCount -= i4;
                                i16 = 1;
                                while (++i16 < 5) {
                                    d += Test.instanceCount;
                                    d = by1;
                                    i5 = i5;
                                    i5 = i4;
                                    for (i17 = i4; i17 < 1; ++i17) {
                                        if (b)
                                            break;
                                        i18 <<= i17;
                                        iArr[i16 - 1] <<= i4;
                                        i18 -= 57166;
                                    }
                                    for (i19 = 1; 1 > i19; ++i19) {
                                        if (false) {
                                            i5 -= (int) Test.instanceCount;
                                            i18 += (i19 + Test.fFld);
                                        }
                                        i5 = (int) 182L;
                                        i5 = (int) 22956L;
                                    }
                                }
                                iArr[i4] >>= i16;
                                Test.instanceCount = Test.instanceCount;
                            }
                            System.setOut(ax$10);
                            System.setErr(ax$10);
                        }
                    }
                    try {
                        java.lang.Short ax$11 = new Short((short) 0xFFFFFFFF);
                        ax$11 = (short) (ax$11 + 1);
                    } catch (Throwable ax$12) {
                    } finally {
                    }
                }
            }
            System.setOut(ax$8);
            System.setErr(ax$9);
        }
        long meth_res = i4 + i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i16 + by1 + i17 + i18 + (b ? 1 : 0) + i19 + i20 + FuzzerUtils.checkSum(iArr);
        lMeth1_check_sum += meth_res;
        return (long) meth_res;
    }

    public static long lMeth() {
        int i3 = 179, i21 = -6886, i22 = 208, i23 = 11, i24 = -64602, i25 = 159, i26 = 133, i27 = -10095, iArr2[] = new int[N];
        short s1 = 29723, sArr[] = new short[N];
        double d3 = -2.66543;
        byte by2 = 68;
        long[][] lArr = new long[N][N];
        FuzzerUtils.init(iArr2, -8);
        FuzzerUtils.init(lArr, -7L);
        FuzzerUtils.init(sArr, (short) -22989);
        i3 *= (int) ((i3 * lMeth1()) - 42635);
        i21 = 137;
        do {
            i3 = (int) -635914802L;
            Test.bFld = Test.bFld;
            Test.fFld %= -198;
        } while (--i21 > 0);
        iArr2[(i3 >>> 1) % N] *= i21;
        i3 *= i3;
        i3 &= 54650;
        i22 = 1;
        do {
            i3 >>>= i21;
            Test.instanceCount += i22;
            i3 -= i3;
            i3 *= i3;
            for (i23 = i22; i23 < 6; ++i23) {
                s1 += (short) i3;
                i3 += (((i23 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
            }
            i24 += (int) Test.instanceCount;
            i24 |= (int) Test.instanceCount;
            Test.instanceCount += (((i22 * i22) + Test.instanceCount) - i3);
            i25 = 6;
            do {
                Test.instanceCount = i22;
            } while (--i25 > 0);
            d3 = i24;
            Test.fArrFld[i22] = by2;
            Test.fFld = Test.fFld;
            lArr[i22 - 1][i22] <<= -252;
            i3 -= (int) Test.instanceCount;
        } while (++i22 < 94);
        Test.fFld += i24;
        i3 = i21;
        i24 -= (int) Test.instanceCount;
        i24 += (int) Test.fFld;
        for (i26 = 7; i26 < 151; ++i26) {
            i24 -= (int) -6L;
            lArr[i26][i26 + 1] -= by2;
            i27 += i26;
            Test.instanceCount += (long) d3;
            d3 = 0;
            lArr[i26 - 1][i26] = i27;
        }
        long meth_res = i3 + i21 + i22 + i23 + i24 + s1 + i25 + Double.doubleToLongBits(d3) + by2 + i26 + i27 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -63206, i1 = 58883, i2 = -45749, i28 = -70, i29 = 38051, i30 = 9, i31 = 214, i32 = -170, i33 = -71, i34 = -8, i35 = -10, i36 = 54859, i37 = -30292, i38 = 0, iArr3[][] = new int[N][N];
        short s3 = 15585;
        long l = -3966454864660132844L, l1 = -10L, l2 = 37L, lArr1[] = new long[N];
        byte by3 = 85;
        FuzzerUtils.init(lArr1, 24682L);
        FuzzerUtils.init(iArr3, 7);
        i = (++i);
        for (i1 = 10; 182 > i1; i1++) {
            i |= (int) lMeth();
            i2 = i1;
            i += i1;
            dFld -= dFld;
            i28 = 1;
            do {
                switch((i1 % 3) + 77) {
                    case 77:
                        i2 += (141 + (i28 * i28));
                        Test.fArrFld[i28 - 1] = i1;
                        if (Test.bFld)
                            break;
                        for (i29 = 1; i29 < 1; ++i29) {
                            lArr1[i28] <<= i1;
                            iArr3[i28 + 1][i1 - 1] += i;
                            Test.fFld = (float) dFld;
                            s3 = s3;
                            i30 += i29;
                            i30 *= i2;
                            iArr3[i29] = iArr3[i28];
                            iArr3[i29 - 1][i28] = (int) 115L;
                        }
                        i2 = i28;
                        break;
                    case 78:
                        Test.instanceCount -= 195;
                        i2 /= (int) (i28 | 1);
                        for (i31 = 1; i31 < 1; ++i31) {
                            Test.instanceCount -= Test.instanceCount;
                            i += (int) (1.804F + (i31 * i31));
                            i2 &= (int) Test.instanceCount;
                        }
                        switch(((i1 % 2) * 5) + 3) {
                            case 4:
                                if (Test.bFld) {
                                    i >>= i28;
                                    Test.instanceCount = i29;
                                    if (Test.bFld) {
                                        iArr3[i28][i28] -= 13;
                                        Test.instanceCount += Test.instanceCount;
                                        i2 += (((i28 * Test.instanceCount) + i29) - Test.fFld);
                                        i30 <<= -45510;
                                        lArr1[i28 - 1] = 6;
                                        iArr3[i28 + 1][i1 - 1] += 27622;
                                        iArr3[i1][i28] >>= i;
                                        i30 += (int) dFld;
                                        i32 *= (int) l;
                                        i33 = 1;
                                        do {
                                            Test.instanceCount += i33;
                                        } while (++i33 < 1);
                                        Test.instanceCount <<= i;
                                    } else if (Test.bFld) {
                                        i32 *= i;
                                        for (i34 = 1; i34 < 1; ++i34) {
                                            i += (int) (-2.136F + (i34 * i34));
                                            i32 *= i35;
                                            Test.fFld += i34;
                                            i += i34;
                                            Test.fFld = i31;
                                        }
                                        for (l1 = 1; l1 < 1; ++l1) {
                                            iArr3[(int) (l1 - 1)][i1 + 1] -= i29;
                                            i2 = i35;
                                            i2 = i;
                                            dFld = -3068454305003221348L;
                                            Test.fFld = i1;
                                            i32 -= 0;
                                            i35 -= (int) l;
                                            i2 = (int) l;
                                            lArr1[(int) (l1)] = i34;
                                        }
                                        {
                                            java.io.PrintStream ax$19 = System.out;
                                            java.io.PrintStream ax$20 = System.err;
                                            java.io.PrintStream ax$21 = new java.io.PrintStream(new java.io.OutputStream() {

                                                @Override
                                                public void write(int b) throws java.io.IOException {
                                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                                }
                                            });
                                            System.setOut(ax$21);
                                            System.setErr(ax$21);
                                            try {
                                                for (int ax$17 = -544; ax$17 < 8096; ax$17 += 1) {
                                                    try {
                                                        java.lang.CharSequence ax$15 = "3.304535770275098E-35";
                                                        if (ax$15.charAt(0) != 'e' || ax$15.charAt(1) != 's') {
                                                        }
                                                    } catch (Throwable ax$16) {
                                                    } finally {
                                                    }
                                                }
                                            } catch (Throwable ax$18) {
                                            }
                                            System.setOut(ax$19);
                                            System.setErr(ax$20);
                                        }
                                        for (i37 = 1; i37 < 1; i37++) {
                                            i30 >>= (int) l1;
                                            l2 = i;
                                            i30 *= (int) Test.fFld;
                                            Test.instanceCount = i38;
                                            i36 += by3;
                                            Test.fFld += l1;
                                            i36 += (((i37 * l) + Test.fFld) - i);
                                            switch((i37 % 2) + 1) {
                                                case 1:
                                                    Test.fFld += i37;
                                                    i35 -= i;
                                                    dFld *= l2;
                                                    Test.fFld -= by3;
                                                    Test.fFld = i1;
                                                    break;
                                                case 2:
                                                    i30 /= (int) (i34 | 1);
                                                    break;
                                            }
                                        }
                                    }
                                } else if (Test.bFld) {
                                    if (Test.bFld)
                                        continue;
                                }
                                break;
                            case 7:
                                i30 += (i28 | l1);
                            default:
                                i2 >>= (int) l2;
                        }
                        break;
                    case 79:
                        l -= l1;
                        break;
                    default:
                        i36 = -9;
                }
            } while (++i28 < 30);
        }
        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("s3 i31 i32 = " + s3 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("l i33 i34 = " + l + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 l1 i36 = " + i35 + "," + l1 + "," + i36);
        FuzzerUtils.out.println("i37 i38 l2 = " + i37 + "," + i38 + "," + l2);
        FuzzerUtils.out.println("by3 lArr1 iArr3 = " + by3 + "," + FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("dFld Test.fArrFld = " + Double.doubleToLongBits(dFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
            {
                java.io.PrintStream ax$26 = System.out;
                java.io.PrintStream ax$27 = System.err;
                java.io.PrintStream ax$28 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$28);
                System.setErr(ax$28);
                try {
                    for (int ax$24 = -1735; ax$24 < 5856; ax$24 += 1) {
                        try {
                            SortedSet ax$22 = new TreeSet();
                            ax$22.tailSet(null);
                        } catch (Throwable ax$23) {
                        } finally {
                        }
                    }
                } catch (Throwable ax$25) {
                }
                System.setOut(ax$26);
                System.setErr(ax$27);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  lMeth ->  lMeth mainTest
// DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
// DEBUG  iMeth ->  iMeth lMeth1 lMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
