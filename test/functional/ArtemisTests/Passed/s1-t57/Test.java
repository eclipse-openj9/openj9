// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 7673657371782913803L;

    public static byte byFld = -32;

    public static volatile float fFld = -32.891F;

    public static boolean bFld = false;

    public static volatile int iFld = -210;

    public static int iFld1 = -12;

    public static short sFld = -5316;

    public static volatile int iFld2 = -212;

    public static int iFld3 = -56;

    public static double[] dArrFld = new double[N];

    public static int[] iArrFld = new int[N];

    public boolean[] bArrFld = new boolean[N];

    public int[][] iArrFld1 = new int[N][N];

    public static long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.104894);
        FuzzerUtils.init(Test.iArrFld, -1);
        FuzzerUtils.init(Test.lArrFld, -43440L);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b) {
        int i1 = 27077, i2 = -169, i3 = -187, i4 = -9, i5 = -3, i6 = -42, i7 = 24344, iArr[] = new int[N];
        double d = 90.121178, dArr[] = new double[N];
        boolean b1 = false;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr, -59437);
        FuzzerUtils.init(dArr, -1.104773);
        FuzzerUtils.init(byArr, (byte) -7);
        for (i1 = 2; i1 < 225; i1 += 2) {
            short s = 14650;
            i2 <<= (int) Test.instanceCount;
            Test.instanceCount = Test.byFld;
            switch(((i1 % 2) * 5) + 55) {
                case 59:
                    i2 += (((i1 * Test.instanceCount) + i2) - i2);
                    if (b) {
                        i2 += (((i1 * i2) + Test.byFld) - i2);
                        Test.instanceCount *= Test.instanceCount;
                        iArr[i1] = i2;
                        i2 >>>= s;
                        for (i3 = 1; i3 < 5; ++i3) {
                            d = i1;
                            d -= -9L;
                        }
                        Test.fFld *= i4;
                        Test.instanceCount += (i1 | i2);
                        try {
                            iArr[i1] = (-231 / iArr[i1 - 1]);
                            i4 = (iArr[i1 - 1] % i3);
                            i2 = (i1 % -985329482);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.instanceCount += Test.instanceCount;
                        iArr[i1 + 1] += i1;
                        i4 += (int) d;
                    } else {
                        i2 = 8;
                        i4 -= i3;
                        if (i1 != 0) {
                            vMeth2_check_sum += (b ? 1 : 0) + i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + i5 + i6 + i7 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr);
                            return;
                        }
                        s -= (short) Test.instanceCount;
                    }
                    for (i5 = i1; i5 < 5; ++i5) {
                        Test.instanceCount -= i5;
                        b = b;
                        i2 %= (int) (Test.instanceCount | 1);
                        i2 = s;
                        i2 *= i7;
                        if (b) {
                            byArr[i5 + 1] <<= (byte) i5;
                            Test.instanceCount += i5;
                            i2 >>= (int) Test.instanceCount;
                            if (b1)
                                continue;
                            Test.instanceCount -= i7;
                            Test.fFld += (((i5 * i1) + i1) - Test.fFld);
                            try {
                                i2 = (252 % iArr[i1 + 1]);
                                i7 = (i1 % i5);
                                i7 = (46283 / i4);
                            } catch (ArithmeticException a_e) {
                            }
                        } else if (b) {
                            i6 -= (int) d;
                        } else {
                            i2 = i2;
                        }
                    }
                case 62:
                    i6 >>= (int) Test.instanceCount;
                    break;
            }
        }
        vMeth2_check_sum += (b ? 1 : 0) + i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + i5 + i6 + i7 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth1() {
        if (ax$9) {
            long ax$10 = vMeth2_check_sum;
            int ax$11 = iFld3;
            int ax$12 = iFld2;
            try {
                iFld2 ^= (int) (-((-(-(vMeth2_check_sum - vMeth2_check_sum))) * iFld3));
            } catch (Throwable ax$13) {
            } finally {
                vMeth2_check_sum = ax$10;
                iFld3 = ax$11;
                iFld2 = ax$12;
            }
            return;
        }
        int i8 = 8739, i9 = -13, i10 = 6, i11 = 51581, i12 = -100, iArr1[] = new int[N];
        long l = 66L;
        short s1 = -26404;
        FuzzerUtils.init(iArr1, 28197);
        vMeth2(Test.bFld);
        for (i8 = 10; 218 > i8; ++i8) {
            switch(((i8 % 2) * 5) + 15) {
                case 23:
                    i10 = 1;
                    do {
                        iArr1[i8] = i10;
                        i9 += (i10 * Test.instanceCount);
                        for (l = i8; l < 1; l += 2) {
                            Test.dArrFld[i8 - 1] += i10;
                            i11 = (int) Test.fFld;
                            i9 = (int) Test.instanceCount;
                            iArr1[(int) (l - 1)] = -73;
                            iArr1[i10 + 1] = (int) l;
                            try {
                                i11 = (i11 % -960897690);
                                i11 = (-36088 / i9);
                                i11 = (iArr1[(int) (l)] / i11);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.fFld *= 18999;
                            Test.instanceCount = i8;
                            switch(((i10 % 1) * 5) + 44) {
                                case 46:
                                    i9 += (int) (((l * i11) + i10) - i11);
                                    Test.bFld = false;
                                    i11 &= i11;
                                    i9 = (int) Test.instanceCount;
                                    Test.instanceCount += (l * s1);
                                    i11 = i10;
                                    break;
                            }
                        }
                        Test.dArrFld[i8 - 1] *= s1;
                        i12 = 1;
                        do {
                            iArr1[i10 + 1] >>= s1;
                            Test.iFld *= (int) Test.instanceCount;
                            Test.instanceCount *= i11;
                            Test.iFld += (i12 * i12);
                            Test.iFld += i12;
                            i9 <<= i12;
                            iArr1[i10 + 1] = s1;
                            i11 /= (int) -43772L;
                            i11 = (int) l;
                            Test.instanceCount = (long) Test.fFld;
                            if (true)
                                continue;
                            i11 = (int) Test.instanceCount;
                            Test.instanceCount = l;
                        } while (++i12 < 1);
                    } while (++i10 < 3);
                case 16:
                    Test.fFld = Test.instanceCount;
                    break;
            }
        }
        vMeth1_check_sum += i8 + i9 + i10 + l + i11 + s1 + i12 + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(int i) {
        if (ax$19) {
            try {
                boolean ax$20 = true;
                ax$20 = true;
            } catch (Throwable ax$21) {
            } finally {
            }
            return;
        }
        int i13 = 57049, i14 = 22, i15 = 16266, i16 = -125, i17 = 222, i18 = 221, i19 = -184, i20 = -11;
        float f = 1.635F, fArr[] = new float[N];
        double d2 = 0.105023;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, 1481415960L);
        FuzzerUtils.init(fArr, 1.437F);
        i *= -3;
        {
            java.io.PrintStream ax$16 = System.out;
            java.io.PrintStream ax$17 = System.err;
            java.io.PrintStream ax$18 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$18);
            System.setErr(ax$18);
            try {
                ax$9 = true;
                for (int ax$14 = 0; ax$14 < 6948; ax$14 += 1) vMeth1();
            } catch (java.lang.Throwable ax$15) {
            } finally {
                ax$9 = false;
            }
            System.setOut(ax$16);
            System.setErr(ax$17);
        }
        vMeth1();
        Test.instanceCount -= Test.iFld;
        i = (int) Test.instanceCount;
        for (i13 = 15; 249 > i13; i13++) {
            Test.iFld -= (int) Test.instanceCount;
            Test.byFld = (byte) Test.iFld;
            i14 = (int) Test.instanceCount;
            for (i15 = 1; 3 > i15; ++i15) {
                i14 >>= 5;
                Test.iArrFld[i13] *= (int) 2.550F;
                if (Test.bFld)
                    break;
                for (i17 = 1; i17 < 2; i17++) {
                    lArr = lArr;
                    Test.bFld = Test.bFld;
                    i14 += (i17 * i17);
                    Test.iArrFld = FuzzerUtils.int1array(N, (int) -16);
                    Test.fFld = f;
                }
                Test.iArrFld[i13 + 1] -= i17;
                i14 = i16;
                i = i16;
                f = (float) d2;
                i /= (int) (i17 | 1);
                for (i19 = 1; i19 < 2; ++i19) {
                    short s2 = 18276;
                    i18 = i16;
                    switch(((i19 % 7) * 5) + 75) {
                        case 86:
                            fArr[i13 - 1] -= 9L;
                            s2 += (short) i15;
                            Test.iArrFld[i19 + 1] *= (int) Test.instanceCount;
                            bArrFld[i19 - 1] = Test.bFld;
                            Test.instanceCount += (((i19 * i15) + Test.instanceCount) - i16);
                            Test.instanceCount >>= 10;
                            i16 = (int) Test.instanceCount;
                            i16 -= i17;
                            lArr[(i14 >>> 1) % N] -= i13;
                        case 90:
                            i16 += (int) Test.instanceCount;
                            Test.instanceCount += i19;
                            break;
                        case 93:
                            i += (i19 * i19);
                            break;
                        case 106:
                            i = 25;
                            break;
                        case 76:
                            i20 += (i19 * i19);
                            break;
                        case 84:
                            Test.iFld += (i19 ^ Test.instanceCount);
                            break;
                        case 98:
                            i14 = i14;
                            break;
                    }
                }
            }
        }
        vMeth_check_sum += i + i13 + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + i19 + i20 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {
        long l1 = 4996286786995572960L;
        int i21 = 6, i22 = 17692, i23 = 29, i24 = 15263, i25 = 107, i26 = 242, i27 = -2, i28 = -8, i29 = 60556, i31 = 50504;
        double d3 = -1.53502;
        byte[][] byArr1 = new byte[N][N];
        float[] fArr1 = new float[N];
        FuzzerUtils.init(byArr1, (byte) 126);
        FuzzerUtils.init(fArr1, -1.1F);
        Test.instanceCount -= Test.instanceCount;
        {
            java.io.PrintStream ax$24 = System.out;
            java.io.PrintStream ax$25 = System.err;
            java.io.PrintStream ax$26 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$26);
            System.setErr(ax$26);
            try {
                ax$19 = true;
                for (int ax$22 = 0; ax$22 < 9946; ax$22 += 1) vMeth(-371754140);
            } catch (java.lang.Throwable ax$23) {
            } finally {
                ax$19 = false;
            }
            System.setOut(ax$24);
            System.setErr(ax$25);
        }
        vMeth(-14083);
        for (l1 = 5; 246 > l1; ++l1) {
            byArr1 = byArr1;
            for (i22 = 21; i22 > l1; i22 -= 3) {
                Test.iArrFld[i22 - 1] += (int) l1;
                Test.iArrFld[i22] = 8740;
                Test.instanceCount = i21;
                if (Test.bFld)
                    continue;
                i23 /= -19852;
                Test.iFld1 += -29912;
                try {
                    Test.iFld = (53896 % i21);
                    Test.iFld1 = (Test.iFld1 % i21);
                    i21 = (i23 / i23);
                } catch (ArithmeticException a_e) {
                }
                Test.instanceCount += i23;
                Test.iFld1 -= (int) Test.fFld;
                i21 = i23;
                i21 += (int) d3;
                try {
                    i21 = (-56382 / Test.iFld);
                    Test.iFld = (-61697 % i23);
                    Test.iArrFld[i22] = (484452001 % Test.iArrFld[i22]);
                } catch (ArithmeticException a_e) {
                }
                {
                    java.io.PrintStream ax$6 = System.out;
                    java.io.PrintStream ax$7 = System.err;
                    java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$8);
                    System.setErr(ax$8);
                    try {
                        for (int ax$4 = -3173; ax$4 < 5737; ax$4 += 1) {
                            boolean ax$2 = bFld;
                            try {
                                boolean[] ax$0 = new boolean[] { true, true, false, true, false };
                                for (// NOTE: bitwise xor
                                // NOTE: bitwise xor
                                // NOTE: bitwise xor
                                int ax$1 = 0; ax$1 < 128; ax$1++) ax$0[ax$1] ^= bFld;
                            } catch (Throwable ax$3) {
                            } finally {
                                bFld = ax$2;
                            }
                        }
                    } catch (Throwable ax$5) {
                    }
                    System.setOut(ax$6);
                    System.setErr(ax$7);
                }
                i21 = Test.iFld;
            }
            Test.iArrFld[(int) (l1)] <<= i22;
            i24 = 1;
            while (++i24 < 21) {
                Test.dArrFld[(int) (l1)] -= l1;
            }
            Test.iArrFld[(int) (l1)] = i22;
            i23 -= i23;
            i21 += Test.iFld1;
            switch((int) (l1 + 118)) {
                case 118:
                    i21 += (int) l1;
                    d3 = Test.instanceCount;
                    Test.instanceCount ^= i22;
                    for (i25 = (int) (l1); i25 < 21; ++i25) {
                        i26 -= i24;
                        i26 += (i25 + i26);
                        i23 >>= i22;
                        i27 = 1;
                        do {
                            if (Test.bFld) {
                                Test.sFld += (short) (((i27 * i25) + Test.iFld1) - Test.fFld);
                                switch((int) ((l1 % 2) + 64)) {
                                    case 64:
                                        i26 += (i27 * i21);
                                        i23 = i27;
                                        break;
                                    case 65:
                                        i23 -= i25;
                                        break;
                                }
                                Test.iFld = i26;
                                Test.iArrFld[i27 - 1] = 12087;
                                i26 ^= (int) l1;
                                switch(((i25 % 2) * 5) + 50) {
                                    case 57:
                                        i23 *= i23;
                                        Test.fFld -= -15.64F;
                                        Test.iArrFld[i25] <<= i28;
                                        i26 = i21;
                                        i23 += i27;
                                        if (true) {
                                            i28 += i24;
                                            iArrFld1 = iArrFld1;
                                            i28 <<= 5564;
                                            i28 = -23273;
                                        } else {
                                            bArrFld[(int) (l1)] = Test.bFld;
                                            if (Test.bFld) {
                                                Test.iFld += (int) (132L + (i27 * i27));
                                                i23 = Test.iFld1;
                                                i26 -= i23;
                                                d3 = Test.iFld1;
                                                Test.fFld = Test.iFld;
                                                Test.iArrFld[i27] >>= 54697;
                                                i21 = Test.iFld;
                                                Test.byFld += (byte) (i27 ^ i28);
                                                Test.fFld *= 186L;
                                            } else if (Test.bFld) {
                                                Test.instanceCount = Test.iFld;
                                                Test.instanceCount += (long) Test.fFld;
                                            } else if (true) {
                                                i28 = (int) l1;
                                                i21 <<= i21;
                                            } else {
                                                i28 %= (int) (l1 | 1);
                                                Test.fFld += (-25008 + (i27 * i27));
                                                Test.bFld = Test.bFld;
                                                switch(((i24 >>> 1) % 3) + 117) {
                                                    case 117:
                                                        Test.iFld = Test.iFld2;
                                                        break;
                                                    case 118:
                                                        Test.instanceCount -= i29;
                                                        break;
                                                    case 119:
                                                        Test.instanceCount -= Test.iFld2;
                                                        break;
                                                }
                                            }
                                        }
                                        break;
                                    case 51:
                                }
                            } else if (Test.bFld) {
                                d3 = -253;
                            } else {
                                Test.iArrFld = iArrFld1[i25];
                            }
                        } while (++i27 < 1);
                    }
                    break;
                case 119:
                    d3 += Test.iFld2;
                case 120:
                    Test.instanceCount += (long) Test.fFld;
                    break;
                case 121:
                    Test.iFld2 += (int) (((l1 * i21) + Test.iFld3) - Test.fFld);
                case 122:
                    Test.instanceCount += (l1 - l1);
                    break;
                case 123:
                    Test.sFld >>= (short) Test.iFld3;
                    break;
                case 124:
                    Test.iFld1 -= i24;
                    break;
                case 125:
                    i26 += (int) (((l1 * i22) + Test.instanceCount) - i21);
                    break;
                case 126:
                    Test.fFld += i25;
                    break;
                case 127:
                    i29 *= (int) l1;
                    break;
                case 128:
                    i21 = -11349;
                    break;
                case 129:
                case 130:
                    i29 += (int) (l1 + Test.iFld1);
                    break;
                case 131:
                    d3 -= i21;
                    break;
                case 132:
                    i29 += (int) (l1 ^ i23);
                    break;
                case 133:
                    byArr1[(int) (l1 + 1)][(int) (l1 - 1)] *= (byte) i28;
                    break;
                case 134:
                    Test.iArrFld[(int) (l1)] = Test.iFld2;
                    break;
                case 135:
                    i26 = (int) 1.70562;
                    break;
                case 136:
                    i21 >>= -7;
                    break;
                case 137:
                case 138:
                    Test.iFld1 = (int) Test.fFld;
                    break;
                case 139:
                    Test.dArrFld[(int) (l1 + 1)] -= Test.instanceCount;
                    break;
                case 140:
                    fArr1[(int) (l1 + 1)] = i27;
                    break;
                case 141:
                    i21 <<= i23;
                    break;
                case 142:
                    Test.sFld *= (short) i25;
                    break;
                case 143:
                    Test.iFld3 = i21;
                    break;
                case 144:
                    Test.instanceCount += l1;
                    break;
                case 145:
                    Test.fFld += (float) d3;
                case 146:
                    Test.iFld3 *= Test.byFld;
                case 147:
                    if (Test.bFld)
                        continue;
                    break;
                case 148:
                    Test.fFld += (((l1 * Test.instanceCount) + Test.iFld) - i25);
                    break;
                case 149:
                    Test.sFld *= (short) Test.iFld3;
                    break;
                case 150:
                    i28 += -10;
                    break;
                case 151:
                    Test.instanceCount += (l1 ^ i27);
                    break;
                case 152:
                case 153:
                case 154:
                    iArrFld1[(int) (l1)][(int) (l1)] = i24;
                case 155:
                    if (Test.bFld)
                        continue;
                    break;
                case 156:
                    i28 += Test.iFld1;
                    break;
                case 157:
                    Test.iFld3 *= (int) Test.fFld;
                    break;
                case 158:
                    if (Test.bFld)
                        continue;
                    break;
                case 159:
                    i29 = 65;
                case 160:
                    Test.fFld -= -50963;
                    break;
                case 161:
                    Test.instanceCount >>>= -36;
                case 162:
                    Test.sFld <<= (short) 193;
                    break;
                case 163:
                    i29 += (227 + (l1 * l1));
                    break;
                case 164:
                    bArrFld[(int) (l1)] = false;
                    break;
                case 165:
                    Test.iFld2 = i28;
                    break;
                case 166:
                    Test.iFld -= i26;
                    break;
                case 167:
                    fArr1[(int) (l1)] -= 13;
                case 168:
                    i23 += (int) l1;
                    break;
                case 169:
                    iArrFld1[(int) (l1)][(int) (l1 - 1)] = (int) Test.instanceCount;
                case 170:
                    byArr1[(int) (l1 - 1)][(int) (l1)] -= (byte) 1246;
                    break;
                case 171:
                    i21 += (int) l1;
                    break;
                case 172:
                    Test.instanceCount += i27;
                    break;
                case 173:
                    Test.iFld += (int) l1;
                    break;
                case 174:
                    i28 = i24;
                    break;
                case 175:
                    iArrFld1[(i24 >>> 1) % N][(int) (l1 - 1)] += -160;
                case 176:
                    i21 += (int) (l1 * l1);
                    break;
                case 177:
                    Test.fFld *= i21;
                    break;
                case 178:
                    Test.iFld3 = 246;
                    break;
                case 179:
                    iArrFld1[(int) (l1)][(int) (l1)] >>= -173;
                    break;
                case 180:
                    if (Test.bFld)
                        break;
                    break;
                case 181:
                case 182:
                    Test.iFld3 += (int) (((l1 * l1) + i21) - i24);
                    break;
                case 183:
                    Test.iFld3 += (int) (67.607F + (l1 * l1));
                case 184:
                    Test.sFld >>>= (short) Test.instanceCount;
                    break;
                case 185:
                    i31 += (int) (l1 * Test.fFld);
                case 186:
                    Test.fFld += (-10 + (l1 * l1));
                    break;
                case 187:
                    Test.lArrFld[(int) (l1)] = i29;
                    break;
                default:
                    Test.instanceCount += (l1 * Test.iFld2);
            }
        }
        FuzzerUtils.out.println("l1 i21 i22 = " + l1 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 d3 i24 = " + i23 + "," + Double.doubleToLongBits(d3) + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i31 = " + i28 + "," + i29 + "," + i31);
        FuzzerUtils.out.println("byArr1 fArr1 = " + FuzzerUtils.checkSum(byArr1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.fFld = " + Test.instanceCount + "," + Test.byFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld Test.iFld Test.iFld1 = " + (Test.bFld ? 1 : 0) + "," + Test.iFld + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.sFld Test.iFld2 Test.iFld3 = " + Test.sFld + "," + Test.iFld2 + "," + Test.iFld3);
        FuzzerUtils.out.println("Test.dArrFld Test.iArrFld bArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(bArrFld));
        FuzzerUtils.out.println("iArrFld1 Test.lArrFld = " + FuzzerUtils.checkSum(iArrFld1) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$9 = false;

    private static Boolean ax$19 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
