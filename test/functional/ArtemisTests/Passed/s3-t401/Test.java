// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = -60L;

    public int iFld = -12;

    public static byte byFld = -89;

    public static short sFld = 26865;

    public static volatile float fFld = 125.536F;

    public boolean bFld = false;

    public volatile int iFld1 = 126;

    public static volatile boolean[] bArrFld = new boolean[N];

    public static long[] lArrFld = new long[N];

    public static float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.lArrFld, 53264L);
        FuzzerUtils.init(Test.fArrFld, 2.461F);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f) {
        if (ax$12) {
            float ax$14 = f;
            try {
                for (int ax$13 = 576 - 1; ax$13 >= 0; ax$13--) {
                    f -= 976981405.0f;
                }
            } catch (Throwable ax$15) {
            } finally {
                f = ax$14;
            }
            return;
        }
        int i4 = 7593, i5 = -239, i6 = -14, i7 = 24574, i8 = -142, i9 = 174, iArr1[] = new int[N];
        double d1 = -1.87999;
        long l = -2312452585848156548L, lArr[] = new long[N];
        boolean b1 = true;
        float[][] fArr = new float[N][N];
        FuzzerUtils.init(lArr, -3046037222L);
        FuzzerUtils.init(iArr1, 468);
        FuzzerUtils.init(fArr, -11.937F);
        i4 -= (int) Test.instanceCount;
        for (i5 = 245; i5 > 9; i5 -= 2) {
            d1 -= f;
            if (true) {
                lArr[i5 + 1] -= i5;
                for (i7 = 1; i7 < 5; ++i7) {
                    boolean b = false;
                    for (l = i5; l < 2; ++l) {
                        Test.instanceCount = (long) f;
                        d1 -= i4;
                        Test.instanceCount = i5;
                        iArr1[(int) (l + 1)] <<= i7;
                        i4 = (int) d1;
                        f = Test.byFld;
                        lArr[i7] = i5;
                        Test.instanceCount |= i5;
                    }
                    i8 += (-11 + (i7 * i7));
                    i8 <<= -157;
                    Test.instanceCount -= l;
                    i9 *= 238;
                    i9 = 8;
                    iArr1[i5 + 1] = i4;
                    Test.bArrFld[i5 + 1] = b;
                    f = l;
                    Test.instanceCount += (((i7 * i6) + i7) - f);
                    i9 -= i4;
                    fArr[i5 + 1][i5] += i4;
                    if (b)
                        continue;
                    i8 = Test.byFld;
                    i8 += (((i7 * i8) + f) - i4);
                }
                f += -61332;
                i4 = i6;
            } else {
                Test.instanceCount <<= Test.instanceCount;
                Test.instanceCount *= i8;
                if (b1) {
                    Test.sFld = (short) l;
                    iArr1[i5] = i8;
                }
                iArr1[i5 + 1] = i8;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i4 + i5 + i6 + Double.doubleToLongBits(d1) + i7 + i8 + l + i9 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i3) {
        int i10 = -13, i11 = -22507, i13 = -2, i14 = 120, i15 = -41182, i16 = 0, i17 = -50631, i18 = -53997, i19 = 51878, iArr2[] = new int[N];
        boolean b2 = true;
        long l1 = 7586L, lArr1[] = new long[N];
        double d2 = 46.80334, d3 = 13.269;
        float[] fArr1 = new float[N];
        FuzzerUtils.init(iArr2, -13644);
        FuzzerUtils.init(lArr1, -811091865681140870L);
        FuzzerUtils.init(fArr1, 2.974F);
        {
            java.io.PrintStream ax$18 = System.out;
            java.io.PrintStream ax$19 = System.err;
            java.io.PrintStream ax$20 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$20);
            System.setErr(ax$20);
            try {
                ax$12 = true;
                for (int ax$16 = 0; ax$16 < 7190; ax$16 += 1) vMeth1((float) 0.08792313739727653);
            } catch (java.lang.Throwable ax$17) {
            } finally {
                ax$12 = false;
            }
            System.setOut(ax$18);
            System.setErr(ax$19);
        }
        vMeth1(Test.fFld);
        for (i10 = 8; i10 < 168; ++i10) {
            if (b2)
                break;
            for (i13 = 4; i13 > 1; i13--) {
                Test.sFld -= (short) Test.instanceCount;
                Test.instanceCount >>= Test.byFld;
                for (i15 = 1; 2 > i15; i15++) {
                    iArr2[i15] <<= i3;
                    i14 = i16;
                }
                if (b2)
                    break;
                Test.instanceCount += (i13 ^ l1);
                Test.byFld += (byte) (((i13 * Test.fFld) + Test.sFld) - l1);
                i11 = (int) -14L;
                lArr1[i13 - 1] <<= i16;
            }
            d2 *= i15;
            for (i17 = 1; i17 < 4; ++i17) {
                if (b2)
                    continue;
                i11 += i16;
                i14 -= i17;
                i14 += (((i17 * Test.fFld) + Test.fFld) - Test.instanceCount);
                i16 += i15;
                i16 = i3;
                for (d3 = 2; d3 > 1; d3 -= 3) {
                    Test.fFld = i10;
                    iArr2[(int) (d3 - 1)] >>= i14;
                    Test.instanceCount >>= l1;
                    if (b2) {
                        i18 >>= i19;
                        iArr2[(int) (d3 + 1)] *= (int) l1;
                        if (i18 != 0) {
                            vMeth_check_sum += i3 + i10 + i11 + (b2 ? 1 : 0) + i13 + i14 + i15 + i16 + l1 + Double.doubleToLongBits(d2) + i17 + i18 + Double.doubleToLongBits(d3) + i19 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                            return;
                        }
                    }
                    fArr1[(int) (d3 + 1)] = l1;
                    switch((((-46174 >>> 1) % 6) * 5) + 16) {
                        case 35:
                            i14 = 102;
                            Test.byFld = (byte) Test.sFld;
                            i19 -= i19;
                            i11 -= i15;
                            i19 -= (int) Test.fFld;
                        case 36:
                            i14 += (int) (4L + (d3 * d3));
                            break;
                        case 24:
                            lArr1[i10] = (long) d3;
                            break;
                        case 18:
                            i18 *= i19;
                            break;
                        case 33:
                            i19 = i13;
                            break;
                        case 23:
                            i3 -= i18;
                            break;
                        default:
                            i14 = (int) l1;
                    }
                }
            }
        }
        vMeth_check_sum += i3 + i10 + i11 + (b2 ? 1 : 0) + i13 + i14 + i15 + i16 + l1 + Double.doubleToLongBits(d2) + i17 + i18 + Double.doubleToLongBits(d3) + i19 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static int iMeth(int i1, int i2) {
        if (ax$21) {
            int ax$51 = i1;
            try {
                java.lang.Integer ax$50 = new Integer(5);
                ax$50 = new Integer(i1);
            } catch (Throwable ax$52) {
            } finally {
                i1 = ax$51;
            }
            return 1414033409;
        }
        int i20 = 8, i21 = -5258, i22 = 225, i23 = -249, iArr3[] = new int[N];
        float f1 = -110.304F;
        boolean b3 = false;
        double[] dArr = new double[N];
        short[] sArr = new short[N];
        FuzzerUtils.init(dArr, -2.117318);
        FuzzerUtils.init(iArr3, -2);
        FuzzerUtils.init(sArr, (short) -39);
        vMeth(i1);
        for (i20 = 5; i20 < 86; i20++) {
            dArr[i20] *= i1;
            i1 += (i20 * i20);
            iArr3[i20 - 1] |= (int) Test.instanceCount;
            i21 = (int) 13L;
            i2 = (int) Test.fFld;
            f1 = 1;
            do {
                for (i22 = i20; i22 < 1; ++i22) {
                    Test.instanceCount -= Test.instanceCount;
                    if (b3) {
                        Test.instanceCount = Test.byFld;
                        i21 = i22;
                        switch((i22 % 4) + 58) {
                            case 58:
                                i1 = i23;
                                Test.lArrFld[i22 - 1] >>= i23;
                                Test.lArrFld[i20] = Test.instanceCount;
                                if (true)
                                    break;
                                if (b3) {
                                    Test.instanceCount += (13 + (i22 * i22));
                                } else {
                                    Test.instanceCount += (i22 - i1);
                                    b3 = false;
                                    i21 += (((i22 * i21) + Test.sFld) - i21);
                                }
                                Test.instanceCount += i1;
                                break;
                            case 59:
                                i23 += (int) Test.instanceCount;
                                Test.instanceCount -= Test.sFld;
                                i23 = i22;
                                switch((int) ((f1 % 2) + 17)) {
                                    case 17:
                                        i2 += i22;
                                        Test.instanceCount += (long) (-1.986F + (i22 * i22));
                                        Test.fFld = i1;
                                        i21 = i1;
                                        iArr3 = iArr3;
                                        i23 += (i22 * i22);
                                        Test.instanceCount += i22;
                                        Test.instanceCount -= (long) 1.429F;
                                        break;
                                    case 18:
                                }
                                sArr[i22] = (short) i2;
                                break;
                            case 60:
                                Test.instanceCount += (i22 * i22);
                            case 61:
                                i21 += 19036;
                                break;
                        }
                    } else if (b3) {
                        Test.lArrFld[i22 - 1] -= i21;
                    } else {
                        Test.instanceCount -= i2;
                    }
                }
            } while (++f1 < 7);
        }
        long meth_res = i1 + i2 + i20 + i21 + Float.floatToIntBits(f1) + i22 + i23 + (b3 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        double d = -1.100075;
        int i24 = 41508, i25 = -28657, i26 = 6, i27 = 55209, i28 = 0, i29 = 41612, i30 = -19598, i31 = 106, i32 = 12, i33 = -14, i34 = 14, i35 = 56, i36 = -13920, iArr[] = new int[N];
        long l2 = 7L;
        FuzzerUtils.init(iArr, -1719);
        Test.instanceCount <<= (iFld--);
        iFld = (int) (-((iFld + iFld) - d));
        iFld = (int) Test.instanceCount;
        for (int i : iArr) {
            i -= ((i--) + iMeth(i24, iFld));
            iArr[(-50612 >>> 1) % N] = (int) Test.instanceCount;
            for (i25 = 1; i25 < 20; ++i25) {
                i26 += (i25 * i24);
                for (i27 = 1; i27 < 2; i27++) {
                    Test.byFld = (byte) i;
                    i24 = i28;
                    if (bFld)
                        continue;
                    Test.instanceCount = -6;
                    Test.instanceCount &= i24;
                    i |= i;
                    i26 = (int) Test.fFld;
                }
                for (i29 = 1; i29 < 2; i29++) {
                    iFld = (int) 1L;
                    i30 = i24;
                    Test.lArrFld[i25 + 1] ^= i28;
                    Test.sFld = Test.sFld;
                    i24 += i;
                    Test.instanceCount = (long) Test.fFld;
                    i += Test.sFld;
                    Test.fFld += 3;
                    i30 = (int) d;
                    Test.fArrFld[(i27 >>> 1) % N] *= Test.instanceCount;
                    Test.fArrFld[i25 - 1] -= 7L;
                    i28 -= i27;
                    d = iFld;
                    iArr[i29] >>>= Test.sFld;
                    i %= (int) (i25 | 1);
                }
                for (i31 = 2; i31 > 1; --i31) {
                    iFld *= i33;
                    i33 += (i31 ^ (long) Test.fFld);
                    Test.instanceCount += (0L + (i31 * i31));
                    Test.instanceCount = iFld;
                    i28 = (int) Test.fFld;
                    Test.fFld = i30;
                    Test.instanceCount -= 215L;
                    iFld = (int) Test.instanceCount;
                    i33 += i31;
                    i24 = iFld;
                    i26 = i27;
                    Test.lArrFld = FuzzerUtils.long1array(N, (long) 12L);
                    iArr[i25 + 1] += i30;
                }
                l2 += i27;
                i24 = 11;
                Test.instanceCount *= (long) Test.fFld;
            }
            i30 ^= (int) Test.instanceCount;
            for (i34 = 1; i34 < 20; ++i34) {
                switch((i34 % 10) + 1) {
                    case 1:
                        if (false)
                            continue;
                    case 2:
                        iArr[i34 + 1] <<= 224;
                        if (bFld) {
                            i <<= -1;
                            Test.instanceCount += (((i34 * i32) + i27) - i25);
                            Test.instanceCount >>>= i;
                            bFld = true;
                            i26 = i35;
                            i33 <<= i;
                            Test.lArrFld[i34 - 1] <<= 0L;
                            i26 += (i34 * i34);
                            i36 = 2;
                            do {
                                l2 += 12;
                                i28 *= (int) l2;
                                iArr[i36 - 1] -= i25;
                                l2 += (i36 | (long) Test.fFld);
                            } while ((i36 -= 3) > 0);
                            Test.lArrFld[i34 - 1] = l2;
                            i30 /= (int) (Test.sFld | 1);
                            Test.fFld -= i30;
                            switch((((-33669 >>> 1) % 7) * 5) + 42) {
                                case 72:
                                    d = l2;
                                    break;
                                case 54:
                                    Test.byFld += (byte) Test.instanceCount;
                                    i = (int) d;
                                case 71:
                                    Test.fFld += Test.fFld;
                                case 66:
                                    i33 <<= (int) Test.instanceCount;
                                case 43:
                                    iFld = i29;
                                    break;
                                case 64:
                                    Test.lArrFld[i34 - 1] = i34;
                                    break;
                                case 49:
                                    d -= Test.fFld;
                                    break;
                                default:
                                    i33 += i34;
                            }
                        } else {
                            i30 += 54364;
                        }
                    case 3:
                        i33 >>= (int) Test.instanceCount;
                        break;
                    case 4:
                        iArr[i34] |= i34;
                        break;
                    case 5:
                    case 6:
                    case 7:
                        iFld1 ^= 105;
                        break;
                    case 8:
                        try {
                            i32 = (-58498 % i24);
                            i32 = (i29 / -51075);
                            i24 = (1535420894 % i25);
                        } catch (ArithmeticException a_e) {
                        }
                        {
                            java.io.PrintStream ax$9 = System.out;
                            java.io.PrintStream ax$10 = System.err;
                            java.io.PrintStream ax$11 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$11);
                            System.setErr(ax$11);
                            try {
                                for (int ax$7 = -1714; ax$7 < 3512; ax$7 += 1) {
                                    long ax$4 = l2;
                                    int ax$5 = i31;
                                    try {
                                        short[] ax$2 = new short[] { 20, 10, 0, -10, -20 };
                                        short[] ax$3 = new short[] { 20, 10, 0, -10, -20 };
                                        long ax$0 = ax$2[i31];
                                        long ax$1 = ax$3[i31];
                                        l2 += Math.abs(ax$0 - ax$1);
                                    } catch (Throwable ax$6) {
                                    } finally {
                                        l2 = ax$4;
                                        i31 = ax$5;
                                    }
                                }
                            } catch (Throwable ax$8) {
                            }
                            System.setOut(ax$9);
                            System.setErr(ax$10);
                        }
                        break;
                    case 9:
                        Test.lArrFld = FuzzerUtils.long1array(N, (long) 5L);
                        break;
                    case 10:
                        Test.instanceCount -= Test.instanceCount;
                }
            }
        }
        FuzzerUtils.out.println("d i24 i25 = " + Double.doubleToLongBits(d) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 l2 = " + i32 + "," + i33 + "," + l2);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("Test.instanceCount iFld Test.byFld = " + Test.instanceCount + "," + iFld + "," + Test.byFld);
        FuzzerUtils.out.println("Test.sFld Test.fFld bFld = " + Test.sFld + "," + Float.floatToIntBits(Test.fFld) + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("iFld1 Test.bArrFld Test.lArrFld = " + iFld1 + "," + FuzzerUtils.checkSum(Test.bArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$58) {
            try {
                new StringBuffer();
            } catch (Throwable ax$59) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$12 = false;

    private static Boolean ax$21 = false;

    private static Boolean ax$58 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
