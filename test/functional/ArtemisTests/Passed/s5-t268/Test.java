// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.


public class Test {
    public static final int N = 256;

    public static volatile long instanceCount = -1915062125684605676L;

    public static double dFld = -42.81733;

    public static volatile int iFld = 19027;

    public static volatile short sFld = 1906;

    public static float fFld = -26.289F;

    public static volatile boolean bFld = true;

    public long lArrFld[] = new long[N];

    public static double dArrFld[] = new double[N];

    public static float fArrFld[] = new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.6694);
        FuzzerUtils.init(Test.fArrFld, 2.442F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth() {
        int i7 = 91;
        int i9 = 4;
        int i10 = 8;
        int i11 = -88;
        int i12 = -1;
        int i13 = -23704;
        int i14 = -12;
        int i15 = 60379;
        int iArr[] = new int[N];
        short s = -24157;
        boolean b1 = false;
        float f = -51.477F;
        double dArr[] = new double[N];
        long lArr[] = new long[N];
        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(dArr, 0.70319);
        FuzzerUtils.init(lArr, 39371L);
        i7 = i7;
        iArr[(i7 >>> 1) % N] = s;
        for (int i8 : iArr) {
            iArr[(i8 >>> 1) % N] += ((int) (Test.dFld));
            i8 += i8;
            for (i9 = 1; i9 < 2; ++i9) {
                for (i11 = 1; 2 > i11; ++i11) {
                    byte by1 = -33;
                    i12 *= ((int) (Test.dFld));
                    i8 += ((int) (Test.instanceCount));
                    b1 = b1;
                    i8 = ((int) (Test.instanceCount));
                    Test.iFld += i11 ^ i11;
                    iArr[i11 - 1] *= ((int) (Test.instanceCount));
                    i12 += ((int) (19191L + (i11 * i11)));
                    Test.instanceCount += i11 + i10;
                    i12 *= by1;
                    Test.instanceCount += i11 * i11;
                    f %= i8 | 1;
                    i8 += (-82) + (i11 * i11);
                    dArr[i11 - 1] += Test.instanceCount;
                    i8 >>= s;
                }
            }
            lArr[(i10 >>> 1) % N] = 46584;
            Test.iFld += i10;
        }
        i13 = 1;
        do {
            i10 |= -20054;
            i7 -= i7;
            Test.iFld += ((int) (-1.908F));
            s = ((short) (Test.instanceCount));
            dArr[i13 + 1] = i7;
            lArr[i13] <<= i10;
            if (b1)
                continue;

            i7 = i7;
            for (i14 = 1; 5 > i14; i14++) {
                if (i12 != 0) {
                }
                Test.instanceCount = i11;
                try {
                    i12 = (-42) / i9;
                    i12 = iArr[i14] % iArr[i14 + 1];
                    Test.iFld = iArr[i14 - 1] % 9017;
                } catch (ArithmeticException a_e) {
                }
                i10 *= i11;
            }
        } while ((++i13) < 123 );
        long meth_res = ((((((((((((i7 + s) + i9) + i10) + i11) + i12) + (b1 ? 1 : 0)) + Float.floatToIntBits(f)) + i13) + i14) + i15) + FuzzerUtils.checkSum(iArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static void vMeth1(int i3, int i4, byte by) {
        int i5 = -21421;
        int i6 = 59036;
        int i16 = -100;
        int i17 = -33004;
        int i18 = -32810;
        int i19 = -57041;
        int i20 = 10;
        int iArr1[] = new int[N];
        boolean b2 = true;
        float f1 = -100.327F;
        float fArr[] = new float[N];
        FuzzerUtils.init(iArr1, 72);
        FuzzerUtils.init(fArr, 0.767F);
        for (i5 = 224; i5 > 12; i5--) {
            iMeth();
            for (i16 = i5; i16 < 3; i16++) {
                iArr1[i5 - 1] = ((int) (13L));
                for (i18 = 1; 1 > i18; i18++) {
                    Test.iFld >>= i5;
                    i4 += i18 + i5;
                    i3 <<= i18;
                }
                i6 = ((int) (Test.instanceCount));
                if (b2) {
                    i4 = i18;
                    i3 += ((i16 * i17) + i17) - i6;
                } else if (b2) {
                    Test.instanceCount += i16 * i16;
                    i4 /= ((int) (i6 | 1));
                    Test.instanceCount %= 8;
                    i3 = i5;
                    fArr[i5] *= -122;
                    i20 = 1;
                    while ((++i20) < 1) {
                        iArr1[i20] += i18;
                        i19 += ((int) (Test.instanceCount));
                        Test.instanceCount *= i4;
                        if (b2)
                            break;

                    }
                    f1 += i16 * f1;
                    Test.dFld -= i5;
                    Test.instanceCount <<= -15608;
                    by = ((byte) (228));
                    iArr1[i16 - 1] += -63;
                    i3 += Test.iFld;
                    i17 += i16;
                    if (b2)
                        break;

                    vMeth1_check_sum += ((((((((((((i3 + i4) + by) + i5) + i6) + i16) + i17) + i18) + i19) + i20) + (b2 ? 1 : 0)) + Float.floatToIntBits(f1)) + FuzzerUtils.checkSum(iArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                } else if (b2) {
                    i6 += ((int) (f1));
                    iArr1[i5 - 1] += Test.sFld;
                    i19 = -28420;
                } else {
                    Test.instanceCount -= i17;
                }
            }
            Test.instanceCount = Test.instanceCount;
            iArr1[i5 + 1] *= i4;
            i19 = ((int) (11.10954));
        }
        vMeth1_check_sum += ((((((((((((i3 + i4) + by) + i5) + i6) + i16) + i17) + i18) + i19) + i20) + (b2 ? 1 : 0)) + Float.floatToIntBits(f1)) + FuzzerUtils.checkSum(iArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(boolean b, int i) {
        int i1 = -10575;
        int i2 = -11056;
        int i21 = 13628;
        int i22 = 13;
        int i23 = -7;
        int i24 = -119;
        int i25 = 27261;
        int iArr2[] = new int[N];
        byte by2 = -113;
        short sArr[] = new short[N];
        float fArr1[] = new float[N];
        double dArr1[] = new double[N];
        FuzzerUtils.init(sArr, ((short) (-27663)));
        FuzzerUtils.init(fArr1, -20.197F);
        FuzzerUtils.init(iArr2, 21);
        FuzzerUtils.init(dArr1, 0.25565);
        for (i1 = 1; 150 > i1; i1++) {
            Test.instanceCount += 14L + (i1 * i1);
            vMeth1(i, Test.iFld, by2);
            i >>= i1;
            Test.instanceCount -= 12315;
            sArr[i1] += ((short) (i1));
            switch (((23 >>> 1) % 3) + 19) {
                case 19 :
                    fArr1[i1 + 1] = Test.instanceCount;
                    try {
                        iArr2[i1] = iArr2[i1 + 1] % (-24);
                        Test.iFld = Test.iFld % (-247152039);
                        iArr2[(i >>> 1) % N] = (-1996543944) % i1;
                    } catch (ArithmeticException a_e) {
                    }
                    i21 = 1;
                    do {
                        Test.iFld += i21 ^ Test.iFld;
                        i22 = 1;
                        do {
                            iArr2[i1] &= i22;
                            Test.instanceCount <<= Test.iFld;
                            Test.dFld = 0;
                            Test.iFld += ((i22 * i1) + Test.instanceCount) - Test.instanceCount;
                            Test.dFld -= Test.fFld;
                            if (i2 != 0) {
                                vMeth_check_sum += (((((((((((((b ? 1 : 0) + i) + i1) + i2) + by2) + i21) + i22) + i23) + i24) + i25) + FuzzerUtils.checkSum(sArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(iArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
                                return;
                            }
                            i = Test.iFld;
                            fArr1[i22] = -189;
                            Test.iFld *= ((int) (-222002181L));
                            Test.instanceCount += i22 ^ i2;
                            i -= ((int) (Test.instanceCount));
                        } while ((++i22) < 1 );
                        if (b)
                            break;

                        i23 = 1;
                        while ((i23 += 3) < 1) {
                            Test.dFld += i23;
                            dArr1[i23] += by2;
                            Test.instanceCount = 26162;
                            Test.fFld = i;
                            iArr2[i1 + 1] += 45;
                            i2 -= i;
                            if (i23 != 0) {
                                vMeth_check_sum += (((((((((((((b ? 1 : 0) + i) + i1) + i2) + by2) + i21) + i22) + i23) + i24) + i25) + FuzzerUtils.checkSum(sArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(iArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
                                return;
                            }
                            Test.iFld += ((int) (8837272464222408084L + (i23 * i23)));
                        }
                        iArr2[i1] += ((int) (Test.instanceCount));
                    } while ((++i21) < 4 );
                    for (i24 = 1; i24 < 4; i24++) {
                        Test.instanceCount -= -7496655543554157906L;
                        i2 <<= ((int) (Test.instanceCount));
                    }
                    break;
                case 20 :
                    i2 *= ((int) (Test.instanceCount));
                    break;
                case 21 :
                    Test.fFld += i1;
                    break;
                default :
                    Test.instanceCount <<= Test.iFld;
            }
        }
        vMeth_check_sum += (((((((((((((b ? 1 : 0) + i) + i1) + i2) + by2) + i21) + i22) + i23) + i24) + i25) + FuzzerUtils.checkSum(sArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(iArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {
        boolean b3 = false;
        int i26 = 9398;
        int i27 = -9;
        int i28 = 9;
        int i29 = -235;
        int i30 = -18674;
        int i31 = -119;
        int iArr3[][] = new int[N][N];
        byte by3 = 105;
        long l = 19643L;
        short sArr1[] = new short[N];
        short sArr2[] = new short[N];
        FuzzerUtils.init(sArr1, ((short) (-27413)));
        FuzzerUtils.init(iArr3, -35276);
        FuzzerUtils.init(sArr2, ((short) (2291)));
        vMeth(b3, Test.iFld);
        Test.iFld = ((int) (Test.instanceCount));
        Test.iFld &= ((int) (Test.instanceCount));
        i26 = 1;
        while ((++i26) < 212) {
            i27 = 1;
            do {
                Test.iFld -= Test.iFld;
                Test.iFld += i27;
                lArrFld[i26 + 1] -= Test.iFld;
                Test.iFld += i27 | Test.iFld;
                sArr1[i27 + 1] <<= ((short) (50));
                for (i28 = 1; 1 > i28; ++i28) {
                    if (b3)
                        break;

                    i29 = -8;
                    iArr3[i28] = iArr3[i27 - 1];
                    i29 += i28 ^ i26;
                }
                for (i30 = i27; 1 > i30; ++i30) {
                    i29 *= i28;
                    Test.instanceCount -= Test.instanceCount;
                    iArr3[i26 + 1][i26] >>>= Test.iFld;
                    switch (((i27 % 1) * 5) + 28) {
                        case 30 :
                            Test.fFld = i30;
                            iArr3[i26][i27] = ((int) (Test.instanceCount));
                            i29 += ((int) ((-7146573712608024773L) + (i30 * i30)));
                            switch ((i27 % 10) + 69) {
                                case 69 :
                                    i29 -= ((int) (1.84031));
                                    i29 ^= i27;
                                    break;
                                case 70 :
                                    Test.iFld += i30 + Test.fFld;
                                    Test.fFld -= i29;
                                    switch ((i30 % 5) + 41) {
                                        case 41 :
                                            iArr3[i27 - 1][i30 + 1] = ((int) (Test.instanceCount));
                                            sArr2[i27] += ((short) (Test.fFld));
                                            i31 >>= i29;
                                            Test.iFld += i30;
                                            iArr3[i30 - 1][i26 + 1] *= i30;
                                            switch ((((i29 >>> 1) % 8) * 5) + 32) {
                                                case 45 :
                                                    i31 = i26;
                                                    iArr3[i26][i26] -= i31;
                                                    Test.dArrFld[i26] = i27;
                                                    Test.iFld = by3;
                                                    i29 -= ((int) (Test.dFld));
                                                    i29 = ((int) (2675353100L));
                                                    i29 = Test.sFld;
                                                    iArr3[i26 - 1][i30 + 1] |= Test.iFld;
                                                    if (b3) {
                                                        by3 = ((byte) (Test.instanceCount));
                                                        i31 += ((int) (Test.instanceCount));
                                                        Test.iFld -= i27;
                                                        by3 = ((byte) (i26));
                                                        Test.instanceCount = Test.instanceCount;
                                                        Test.iFld = i30;
                                                        by3 = ((byte) (i29));
                                                        Test.sFld -= ((short) (i30));
                                                        Test.fFld -= 5;
                                                        Test.iFld |= 24593;
                                                        lArrFld[((-190) >>> 1) % N] = Test.instanceCount;
                                                        lArrFld[i27] >>>= i27;
                                                        iArr3[i30 + 1][i30] &= i28;
                                                    } else if (Test.bFld) {
                                                        b3 = false;
                                                        i29 += i30 * i30;
                                                        Test.instanceCount += ((i30 * Test.iFld) + i27) - i26;
                                                        Test.fFld += 99;
                                                        Test.bFld = Test.bFld;
                                                        switch (((i26 % 2) * 5) + 91) {
                                                            case 99 :
                                                                iArr3[i30 - 1] = iArr3[i26 - 1];
                                                                Test.fArrFld[i27] = 218;
                                                                break;
                                                            case 96 :
                                                                Test.dArrFld[i27] -= Test.dFld;
                                                                i31 -= by3;
                                                                Test.iFld = ((int) (-5L));
                                                                lArrFld = lArrFld;
                                                                Test.dFld *= i31;
                                                                Test.instanceCount -= -1935;
                                                                i29 >>>= ((int) (l));
                                                        }
                                                        lArrFld[i26 - 1] -= ((long) (Test.fFld));
                                                        l += i30;
                                                        Test.dFld = -25316;
                                                    } else {
                                                        i29 = ((int) (Test.instanceCount));
                                                    }
                                                    break;
                                                case 48 :
                                                    Test.iFld = by3;
                                                    break;
                                                case 40 :
                                                    i29 >>= i31;
                                                case 39 :
                                                    Test.dFld += 60L;
                                                    break;
                                                case 61 :
                                                    i29 = ((int) (l));
                                                    break;
                                                case 70 :
                                                    i29 >>>= ((int) (4L));
                                                    break;
                                                case 67 :
                                                case 50 :
                                                    iArr3[i30][i26] -= -64103;
                                                    break;
                                                default :
                                                    iArr3[i26 + 1][i30 - 1] += ((int) (Test.instanceCount));
                                            }
                                            break;
                                        case 42 :
                                            Test.iFld += ((i30 * i30) + i30) - i29;
                                        case 43 :
                                            i29 = Test.sFld;
                                            break;
                                        case 44 :
                                            i29 *= ((int) (Test.fFld));
                                            break;
                                        case 45 :
                                            iArr3[i30 - 1] = FuzzerUtils.int1array(N, ((int) (56035)));
                                    }
                                    break;
                                case 71 :
                                    i29 += i30 * i30;
                                    break;
                                case 72 :
                                    Test.iFld >>= i31;
                                case 73 :
                                    i31 = by3;
                                    break;
                                case 74 :
                                    Test.fFld += 11091;
                                    break;
                                case 75 :
                                    Test.instanceCount += i30;
                                case 76 :
                                case 77 :
                                    Test.sFld = ((short) (224));
                                    break;
                                case 78 :
                                    i29 -= -95;
                                    break;
                                default :
                                    i29 >>>= -126;
                            }
                            break;
                    }
                }
            } while ((++i27) < 24 );
        }
        FuzzerUtils.out.println((((("b3 i26 i27 = " + (b3 ? 1 : 0)) + ",") + i26) + ",") + i27);
        FuzzerUtils.out.println((((("i28 i29 i30 = " + i28) + ",") + i29) + ",") + i30);
        FuzzerUtils.out.println((((("i31 by3 l = " + i31) + ",") + by3) + ",") + l);
        FuzzerUtils.out.println((((("sArr1 iArr3 sArr2 = " + FuzzerUtils.checkSum(sArr1)) + ",") + FuzzerUtils.checkSum(iArr3)) + ",") + FuzzerUtils.checkSum(sArr2));
        FuzzerUtils.out.println((((("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount) + ",") + Double.doubleToLongBits(Test.dFld)) + ",") + Test.iFld);
        FuzzerUtils.out.println((((("Test.sFld Test.fFld Test.bFld = " + Test.sFld) + ",") + Float.floatToIntBits(Test.fFld)) + ",") + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println((((("lArrFld Test.dArrFld Test.fArrFld = " + FuzzerUtils.checkSum(lArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld))) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }
}
