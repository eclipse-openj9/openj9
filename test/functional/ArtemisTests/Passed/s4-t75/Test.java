// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -945808900L;

    public static int iFld = 8;

    public static short sFld = 26108;

    public static long lFld = 183L;

    public static double dFld = -102.94338;

    public static float[] fArrFld = new float[N];

    public static long[] lArrFld = new long[N];

    public static volatile short[] sArrFld = new short[N];

    public static volatile byte[] byArrFld = new byte[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.522F);
        FuzzerUtils.init(Test.lArrFld, 1L);
        FuzzerUtils.init(Test.sArrFld, (short) -4447);
        FuzzerUtils.init(Test.byArrFld, (byte) -87);
    }

    public static long vMeth_check_sum = 0;

    public static long fMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(long l1, int i5) {
        if (ax$5) {
            int ax$8 = i5;
            try {
                int[] ax$6 = new int[20];
                for (int ax$7 = 0; ax$7 < i5; ax$7++) {
                    ax$6[ax$7] = ax$7;
                }
            } catch (Throwable ax$9) {
            } finally {
                i5 = ax$8;
            }
            return 1389547707;
        }
        int i6 = -9, i7 = -23920, i8 = 37382, i9 = 0, i10 = 0, iArr[] = new int[N];
        float f = 2.167F;
        boolean b = false, bArr[] = new boolean[N];
        double d = 1.56262;
        byte by = -11;
        long[] lArr = new long[N];
        FuzzerUtils.init(iArr, -94);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, -1541L);
        for (i6 = 221; i6 > 12; --i6) {
            for (i8 = 1; 3 > i8; i8++) {
                iArr[i8] /= (int) ((long) (f) | 1);
                i9 = Test.iFld;
                if (b)
                    break;
                i10 = 1;
                do {
                    i5 = 53;
                    i7 += (((i10 * i5) + l1) - f);
                    l1 += (i10 * i10);
                    Test.instanceCount -= 29414;
                    i9 = (int) Test.instanceCount;
                    d = f;
                    i9 = i7;
                    i9 = (int) 2400725010354369310L;
                    i7 >>= i10;
                    Test.iFld = Test.iFld;
                    switch((i10 % 9) + 91) {
                        case 91:
                            iArr[i6] = -115;
                            f += (i10 - Test.sFld);
                            iArr[i6 + 1] <<= i8;
                            bArr[i10] = true;
                            f *= i8;
                            i9 = Test.iFld;
                            break;
                        case 92:
                            iArr[i10 - 1] = Test.iFld;
                            if (i6 != 0) {
                            }
                            i5 *= i9;
                            i5 += (i10 + i6);
                            iArr[i8] = i6;
                            by >>= (byte) Test.iFld;
                            Test.fArrFld[i10] = i10;
                            i7 <<= i9;
                            iArr[i8 - 1] *= (int) -3208122201471996403L;
                            break;
                        case 93:
                            d -= 0.886F;
                            i7 = i9;
                            iArr[i6] += i10;
                            i9 <<= (int) Test.instanceCount;
                            lArr[i8] = Test.instanceCount;
                            break;
                        case 94:
                            lArr[i6 - 1] >>>= i10;
                            break;
                        case 95:
                            Test.sFld = (short) i9;
                            break;
                        case 96:
                            b = false;
                            break;
                        case 97:
                            l1 += i10;
                        case 98:
                            try {
                                iArr[i8] = (i10 % iArr[i10]);
                                iArr[i10] = (i5 / -940932832);
                                Test.iFld = (i10 % 50799);
                            } catch (ArithmeticException a_e) {
                            }
                        case 99:
                            i9 -= i8;
                            break;
                        default:
                            l1 = i7;
                    }
                } while (++i10 < 2);
            }
        }
        long meth_res = l1 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + (b ? 1 : 0) + i10 + Double.doubleToLongBits(d) + by + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static float fMeth(long l, int i4) {
        int i11 = 56659, i12 = 94, i13 = -12749, i14 = 27040, i15 = -173, i16 = -1729, i17 = -12, i18 = -98, i19 = -20, i20 = 6, iArr1[] = new int[N];
        long l2 = -3413568797547178820L, l3 = 19554L;
        byte by1 = -27, byArr[] = new byte[N];
        double d1 = 1.78320;
        float f1 = 0.829F;
        boolean b1 = true;
        FuzzerUtils.init(iArr1, 34814);
        FuzzerUtils.init(byArr, (byte) 99);
        {
            java.io.PrintStream ax$12 = System.out;
            java.io.PrintStream ax$13 = System.err;
            java.io.PrintStream ax$14 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$14);
            System.setErr(ax$14);
            try {
                ax$5 = true;
                for (int ax$10 = 0; ax$10 < 7213; ax$10 += 1) iMeth(4749295716840673875L, -1501805409);
            } catch (java.lang.Throwable ax$11) {
            } finally {
                ax$5 = false;
            }
            System.setOut(ax$12);
            System.setErr(ax$13);
        }
        iMeth(l, Test.iFld);
        Test.iFld >>= 173;
        Test.instanceCount = Test.iFld;
        for (i11 = 1; 138 > i11; i11++) {
            if (b1) {
                for (i13 = i11; i13 < 4; i13++) {
                    l %= (i13 | 1);
                    Test.lArrFld[i13 - 1] <<= Test.iFld;
                    for (i15 = 1; 1 > i15; i15++) {
                        iArr1[i11] += i15;
                        i14 *= (int) 71L;
                        iArr1[i11 + 1] += i4;
                        Test.instanceCount = Test.instanceCount;
                        l2 += i16;
                        by1 -= (byte) i16;
                        by1 = (byte) i16;
                        Test.sFld += (short) (i15 * i15);
                        d1 *= d1;
                        l2 += (i15 * Test.iFld);
                        if (true)
                            continue;
                    }
                    i4 += i13;
                    Test.sFld += (short) i13;
                    byArr[i11 - 1] -= (byte) i16;
                    for (i17 = i13; i17 < 1; i17++) {
                        iArr1[i17] = (int) l2;
                        l3 >>= i14;
                        try {
                            i12 = (i14 % 703700068);
                            iArr1[i17 - 1] = (33066 / i4);
                            i18 = (i11 / -31376);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.instanceCount *= (long) -21.309F;
                        Test.instanceCount += i17;
                        i4 = (int) -1779345261447362662L;
                        l3 = i17;
                    }
                    f1 += i4;
                    for (i19 = i13; i19 < 1; ++i19) {
                        by1 += (byte) (i19 * i19);
                        iArr1[i11] <<= i19;
                        i18 += i20;
                        i16 = Test.iFld;
                    }
                }
            } else if (b1) {
                Test.iFld = i11;
            } else if (b1) {
                f1 += i19;
            } else {
                Test.iFld = 40753;
            }
        }
        long meth_res = l + i4 + i11 + i12 + i13 + i14 + i15 + i16 + l2 + by1 + Double.doubleToLongBits(d1) + i17 + i18 + l3 + Float.floatToIntBits(f1) + i19 + i20 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr);
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public static void vMeth() {
        int i2 = -103, i3 = -11, i21 = -181, i22 = 0, i23 = -36966, i24 = -55, i25 = 200, i26 = 186, i27 = 103, iArr2[][] = new int[N][N];
        float f2 = 1.189F;
        boolean b2 = false;
        byte by2 = -17;
        double d2 = -45.72785;
        FuzzerUtils.init(iArr2, 11);
        for (i2 = 6; i2 < 103; i2++) {
            fMeth(Test.instanceCount, i2);
            Test.iFld = -168;
            for (i21 = i2; i21 < 6; ++i21) {
                for (i23 = 1; i23 < 1; i23 += 3) {
                    boolean b3 = true;
                    i3 = (int) Test.instanceCount;
                    f2 = f2;
                    b2 = b3;
                    f2 = i3;
                }
                f2 = by2;
                switch(((i2 % 1) * 5) + 48) {
                    case 50:
                        if (b2)
                            continue;
                        for (i25 = 1; i25 < 1; ++i25) {
                            i26 = (int) d2;
                            switch((i25 % 3) + 41) {
                                case 41:
                                    iArr2 = iArr2;
                                    i26 = 8;
                                    i24 -= (int) -3212180004051861088L;
                                    if (b2)
                                        break;
                                    break;
                                case 42:
                                    i3 |= i3;
                                    i24 += (i25 + i2);
                                    i24 = (int) Test.instanceCount;
                                    i24 += (int) -1485135810L;
                                    Test.lFld -= i21;
                                    i26 -= Test.iFld;
                                    if (b2) {
                                        Test.lArrFld[i25 - 1] *= i23;
                                        f2 *= i27;
                                        i3 <<= i27;
                                        Test.fArrFld[i25] += Test.iFld;
                                    } else if (b2) {
                                        f2 -= Test.iFld;
                                        d2 += Test.lFld;
                                        iArr2[i25 + 1][i21 - 1] |= -10656;
                                        switch((i2 % 7) + 25) {
                                            case 25:
                                                iArr2[i2 + 1][i2] += (int) 1.680F;
                                                Test.sFld = (short) -6;
                                                Test.iFld = Test.sFld;
                                                break;
                                            case 26:
                                                i3 &= i23;
                                                break;
                                            case 27:
                                                if (false)
                                                    break;
                                                break;
                                            case 28:
                                                i22 += (((i25 * Test.iFld) + i27) - i3);
                                                break;
                                            case 29:
                                                i27 += i27;
                                                break;
                                            case 30:
                                                Test.lArrFld[i25 + 1] = i23;
                                                break;
                                            case 31:
                                                if (i2 != 0) {
                                                    vMeth_check_sum += i2 + i3 + i21 + i22 + i23 + i24 + Float.floatToIntBits(f2) + (b2 ? 1 : 0) + by2 + i25 + i26 + Double.doubleToLongBits(d2) + i27 + FuzzerUtils.checkSum(iArr2);
                                                    return;
                                                }
                                            default:
                                                i3 <<= (int) Test.lFld;
                                        }
                                    } else if (b2) {
                                        i24 <<= i26;
                                    }
                                    break;
                                case 43:
                                    i3 += i25;
                            }
                        }
                        break;
                    default:
                        i26 += (i21 * i21);
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i21 + i22 + i23 + i24 + Float.floatToIntBits(f2) + (b2 ? 1 : 0) + by2 + i25 + i26 + Double.doubleToLongBits(d2) + i27 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {
        int i = 0, i1 = 46199, i28 = -4, i29 = 9265, i30 = 2, i31 = 155, i32 = -4, i33 = -94, i34 = -62070, i35 = 16143, i36 = 248, i37 = -14, i38 = 32992, i39 = -219, i40 = -50265, iArr3[] = new int[N];
        byte by3 = -72;
        float f3 = 0.844F;
        boolean b4 = false;
        FuzzerUtils.init(iArr3, -28423);
        Test.iFld <<= Test.iFld;
        for (i = 4; i < 99; ++i) {
            vMeth();
            Test.lFld += 63862;
            for (i28 = 2; i28 < 53; ++i28) {
                Test.iFld = (int) 0L;
                Test.sArrFld[i - 1] += (short) i;
                i29 &= 31;
                i29 <<= (int) 1213285376L;
            }
            for (i30 = 53; i30 > 2; i30--) {
                float f4 = -31.589F;
                i29 -= i30;
                Test.dFld *= by3;
                switch((i % 2) + 19) {
                    case 19:
                        i1 += (i30 + i1);
                        i29 += (i30 * i30);
                        Test.instanceCount += (i30 ^ (long) f3);
                        i1 -= Test.iFld;
                        f3 += (i30 * i30);
                        Test.iFld = i29;
                        f4 -= i1;
                        switch((i % 2) + 114) {
                            case 114:
                                Test.iFld = i30;
                                by3 = (byte) i28;
                                Test.iFld += (int) Test.dFld;
                                for (i32 = 1; i32 < 2; ++i32) {
                                    f4 += (i32 * i32);
                                    i1 <<= i31;
                                    i33 = i28;
                                    i1 <<= i29;
                                    f4 += (((i32 * Test.lFld) + i31) - i34);
                                    i1 += (int) -182L;
                                }
                                i1 >>= i32;
                                Test.instanceCount += (-12 + (i30 * i30));
                                b4 = b4;
                                i31 *= i34;
                            case 115:
                                Test.lArrFld[i] *= Test.instanceCount;
                                i31 -= -42;
                                Test.lArrFld[i30 - 1] = i29;
                                if (b4)
                                    continue;
                                switch(((i29 >>> 1) % 10) + 102) {
                                    case 102:
                                        Test.sFld -= (short) 51775;
                                        i35 = 1;
                                        while (++i35 < 2) {
                                            i31 *= (int) Test.instanceCount;
                                            f4 = i35;
                                            Test.instanceCount += -8;
                                            try {
                                                i31 = (-169 % i29);
                                                i34 = (i30 / -1958079388);
                                                i31 = (iArr3[i30] % 64);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            iArr3[i30 - 1] += (int) Test.instanceCount;
                                            Test.instanceCount = 43;
                                            i1 -= (int) f4;
                                            Test.dFld += i33;
                                            iArr3[i30 - 1] *= i1;
                                            i31 = (int) 76L;
                                            i33 = i30;
                                            i34 >>= i35;
                                        }
                                        i33 += (i30 * i30);
                                        i31 *= i32;
                                        i34 += 1;
                                        i29 = i36;
                                        switch(((i30 % 3) * 5) + 12) {
                                            case 27:
                                                i29 += (((i30 * Test.instanceCount) + Test.iFld) - i29);
                                                f3 = f4;
                                                Test.instanceCount *= Test.lFld;
                                                f4 -= i30;
                                                i31 += -119;
                                                for (i37 = i30; i37 < 2; i37++) {
                                                    Test.iFld += i38;
                                                    i33 = 190;
                                                    f4 -= Test.instanceCount;
                                                    i34 -= Test.sFld;
                                                }
                                                Test.sFld += (short) i30;
                                                break;
                                            case 25:
                                                for (i39 = 1; 2 > i39; i39++) {
                                                    Test.lArrFld[i30 - 1] = Test.instanceCount;
                                                    f4 -= f4;
                                                }
                                                Test.instanceCount = -189;
                                                i38 -= (int) f4;
                                                break;
                                            case 21:
                                                Test.dFld += i35;
                                        }
                                        break;
                                    case 103:
                                        f4 *= i30;
                                    case 104:
                                        Test.byArrFld[i + 1] = (byte) Test.sFld;
                                        break;
                                    case 105:
                                        i34 += by3;
                                        break;
                                    case 106:
                                        Test.dFld = Test.dFld;
                                        break;
                                    case 107:
                                        Test.lArrFld[i30] = 133;
                                        break;
                                    case 108:
                                        f3 += i30;
                                        break;
                                    case 109:
                                        i38 += (i30 * Test.sFld);
                                        break;
                                    case 110:
                                        by3 >>>= (byte) Test.lFld;
                                        break;
                                    case 111:
                                        i40 += i32;
                                }
                                break;
                        }
                        break;
                    case 20:
                        i33 *= i31;
                        break;
                }
            }
        }
        FuzzerUtils.out.println("i i1 i28 = " + i + "," + i1 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("by3 f3 i32 = " + by3 + "," + Float.floatToIntBits(f3) + "," + i32);
        FuzzerUtils.out.println("i33 i34 b4 = " + i33 + "," + i34 + "," + (b4 ? 1 : 0));
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("i38 i39 i40 = " + i38 + "," + i39 + "," + i40);
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld + "," + Test.sFld);
        FuzzerUtils.out.println("Test.lFld Test.dFld Test.fArrFld = " + Test.lFld + "," + Double.doubleToLongBits(Test.dFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.lArrFld Test.sArrFld Test.byArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        {
            java.io.PrintStream ax$0 = System.out;
            java.io.PrintStream ax$1 = System.err;
            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$2);
            System.setErr(ax$2);
            {
                boolean ax$4 = false;
                for (int ax$3 = -2978; ax$3 < 6214; ax$3 += 1) {
                    if (!ax$4) {
                        ax$4 = true;
                        {
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                            try {
                                Test _instance = new Test();
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                            } catch (Exception ex) {
                                FuzzerUtils.out.println(ex.getClass().getCanonicalName());
                            }
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                        }
                    }
                }
            }
            System.setOut(ax$0);
            System.setErr(ax$1);
        }
    }

    private static Boolean ax$5 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  fMeth ->  fMeth vMeth mainTest
// DEBUG  iMeth ->  iMeth fMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
