// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.Arrays;
import java.security.KeyException;
import java.security.spec.InvalidKeySpecException;
import java.security.SignatureException;
import java.security.cert.CertificateParsingException;
import java.security.ProviderException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.cert.CertificateException;
import java.security.InvalidAlgorithmParameterException;
import java.security.GeneralSecurityException;
import java.security.NoSuchAlgorithmException;
import java.security.DigestException;
import java.security.InvalidKeyException;
import java.security.cert.CRLException;
import java.security.cert.CertificateEncodingException;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 5767532911259513005L;

    public static int iFld = 149;

    public static volatile boolean bFld = true;

    public static short sFld = -25969;

    public static float fFld = -50.956F;

    public static int iFld1 = -49955;

    public volatile double dFld = -1.54384;

    public static int[] iArrFld = new int[N];

    public static long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -47800);
        FuzzerUtils.init(Test.lArrFld, 5783L);
    }

    public static long vSmallMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i6, int i7) {
        int i8 = -117, i9 = -10, i10 = 8, i11 = 226, i12 = -22139, i13 = 26497, iArr2[] = new int[N];
        double d1 = 116.41950;
        byte by = 121;
        long[] lArr = new long[N];
        FuzzerUtils.init(iArr2, -28719);
        FuzzerUtils.init(lArr, 7659821237802674296L);
        i7 += i7;
        for (i8 = 2; i8 < 164; ++i8) {
            iArr2[(Test.iFld >>> 1) % N] = i9;
            iArr2[i8] = 1189;
            i9 >>= (int) Test.instanceCount;
            switch((i8 % 3) + 115) {
                case 115:
                    i6 += (3 + (i8 * i8));
                    Test.instanceCount += i8;
                    for (i10 = 1; i10 < 4; ++i10) {
                        i9 += (i10 | (long) Test.fFld);
                        for (d1 = 1; d1 < 2; ++d1) {
                            i9 = i7;
                            if (Test.bFld)
                                continue;
                            lArr[i10 + 1] = (long) d1;
                            i7 += (int) Test.instanceCount;
                            i12 += (int) (13L + (d1 * d1));
                            i11 = Test.iFld;
                            if (false) {
                                by ^= by;
                            } else {
                                try {
                                    iArr2[i10 + 1] = (134 % i11);
                                    Test.iFld = (i6 % -45598);
                                    i6 = (iArr2[(int) (d1 - 1)] % i8);
                                } catch (ArithmeticException a_e) {
                                }
                                i12 += (-70 + (d1 * d1));
                                i12 += (int) (1206946293L + (d1 * d1));
                                i6 <<= i11;
                                i12 = Test.sFld;
                                iArr2[i8 - 1] -= (int) d1;
                                iArr2[i8] >>= (int) Test.instanceCount;
                                Test.fFld += (float) d1;
                            }
                        }
                        i13 = 1;
                        while (++i13 < 2) {
                            i11 += i13;
                            Test.instanceCount += (i13 * i13);
                            iArr2[i8 + 1] += -24116;
                            Test.instanceCount += (i13 * i13);
                            by = (byte) i13;
                            if (true)
                                continue;
                            iArr2[i10 - 1] = (int) Test.instanceCount;
                            i11 &= i6;
                            i12 += i13;
                        }
                    }
                    break;
                case 116:
                    Test.fFld *= i13;
                    break;
                case 117:
                    i9 += i13;
                    break;
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d1) + i12 + by + i13 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(double d) {
        long l = -12057L;
        int i5 = -189, i14 = -49262, i15 = 22847, i16 = 32916, i17 = -52, i18 = 61880, i19 = -12283, i20 = -61000, i21 = -6, i22 = 61056, i23 = 59852, i24 = 37906, i25 = 10, iArr1[] = new int[N], iArr3[] = new int[N];
        float f = 104.558F;
        byte by1 = 72;
        boolean[] bArr = new boolean[N];
        double[] dArr = new double[N];
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr1, -1587);
        FuzzerUtils.init(dArr, 2.117147);
        FuzzerUtils.init(iArr3, -13);
        bArr[(-4 >>> 1) % N] = (Test.bFld = (Test.bFld = Test.bFld));
        for (l = 150; l > 8; l -= 2) {
            Test.instanceCount += (l * Test.iFld);
            Test.iFld = Test.sFld;
            i5 ^= (int) (1.899F + Test.iFld);
            f %= ((long) (Double.longBitsToDouble((++iArr1[(int) (l - 1)]) * Test.iFld)) | 1);
        }
        iMeth(86, Test.iFld);
        Test.iFld -= Test.iFld;
        f *= 14663;
        for (i14 = 8; 204 > i14; i14++) {
            Test.sFld += (short) (i14 * i14);
            Test.instanceCount <<= i14;
            i15 = -94;
            iArr1[i14] = Test.iFld;
            Test.instanceCount += (-2863479198L + (i14 * i14));
            for (i16 = 3; i16 > i14; i16--) {
                i18 = 1;
                do {
                    Test.fFld += i18;
                } while (--i18 > 0);
            }
            Test.instanceCount = i17;
            i5 += (((i14 * Test.instanceCount) + i5) - i16);
            i17 += (int) f;
        }
        for (i19 = 1; i19 < 174; ++i19) {
            i15 += (i19 - l);
            for (i21 = i19; 3 > i21; i21++) {
                Test.sFld -= (short) -12;
                iArr1[i21] ^= i20;
                Test.instanceCount = -2901217600035390297L;
                d += Test.sFld;
                dArr[i19 + 1] = i17;
                {
                    java.io.PrintStream ax$0 = System.out;
                    java.io.PrintStream ax$1 = System.err;
                    java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$2);
                    System.setErr(ax$2);
                    {
                        boolean ax$8 = false;
                        for (int ax$7 = -3393; ax$7 < 2401; ax$7 += 2) {
                            if (!ax$8) {
                                ax$8 = true;
                                {
                                    System.setOut(ax$0);
                                    System.setErr(ax$1);
                                    try {
                                        iArr1[i21 + 1] = (i16 % i15);
                                        i23 = (i22 % -15905);
                                        i23 = (i16 / 12137);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    System.setOut(ax$2);
                                    System.setErr(ax$2);
                                }
                            }
                            int ax$5 = i20;
                            try {
                                long[] ax$3 = { 6 };
                                // Initialize
                                for (int ax$4 = 0; ax$4 < i20; ax$4++) {
                                    ax$3[ax$4] = (long) ax$4;
                                }
                            } catch (Throwable ax$6) {
                            } finally {
                                i20 = ax$5;
                            }
                        }
                    }
                    System.setOut(ax$0);
                    System.setErr(ax$1);
                }
            }
            Test.iFld += i19;
            iArr3 = FuzzerUtils.int1array(N, (int) 3);
        }
        i5 = by1;
        iArr1[(i17 >>> 1) % N] <<= i15;
        for (i24 = 6; i24 < 188; ++i24) {
            iArr1[i24 + 1] = 60890;
            i17 += (i24 + i17);
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + l + i5 + Float.floatToIntBits(f) + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22 + i23 + by1 + i24 + i25 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr3);
    }

    public static void vSmallMeth(int i2, int i3, int i4) {
        if (ax$22) {
            try {
                java.lang.String ax$86 = "oo";
                java.lang.Exception ax$95 = new Exception();
                SecurityException ax$96 = new SecurityException(ax$95);
                if (!ax$96.getCause().equals(ax$95)) {
                }
                ax$96 = new SecurityException(ax$86, ax$95);
                if (!ax$96.getMessage().equals(ax$86) || !ax$96.getCause().equals(ax$95)) {
                }
                DigestException ax$87 = new DigestException(ax$95);
                if (!ax$87.getCause().equals(ax$95)) {
                }
                ax$87 = new DigestException(ax$86, ax$95);
                if (!ax$87.getMessage().equals(ax$86) || !ax$87.getCause().equals(ax$95)) {
                }
                GeneralSecurityException ax$98 = new GeneralSecurityException(ax$95);
                if (!ax$98.getCause().equals(ax$95)) {
                }
                ax$98 = new GeneralSecurityException(ax$86, ax$95);
                if (!ax$98.getMessage().equals(ax$86) || !ax$98.getCause().equals(ax$95)) {
                }
                InvalidAlgorithmParameterException ax$102 = new InvalidAlgorithmParameterException(ax$95);
                if (!ax$102.getCause().equals(ax$95)) {
                }
                ax$102 = new InvalidAlgorithmParameterException(ax$86, ax$95);
                if (!ax$102.getMessage().equals(ax$86) || !ax$102.getCause().equals(ax$95)) {
                }
                InvalidKeyException ax$89 = new InvalidKeyException(ax$95);
                if (!ax$89.getCause().equals(ax$95)) {
                }
                ax$89 = new InvalidKeyException(ax$86, ax$95);
                if (!ax$89.getMessage().equals(ax$86) || !ax$89.getCause().equals(ax$95)) {
                }
                InvalidKeySpecException ax$93 = new InvalidKeySpecException(ax$95);
                if (!ax$93.getCause().equals(ax$95)) {
                }
                ax$93 = new InvalidKeySpecException(ax$86, ax$95);
                if (!ax$93.getMessage().equals(ax$86) || !ax$93.getCause().equals(ax$95)) {
                }
                KeyException ax$100 = new KeyException(ax$95);
                if (!ax$100.getCause().equals(ax$95)) {
                }
                ax$100 = new KeyException(ax$86, ax$95);
                if (!ax$100.getMessage().equals(ax$86) || !ax$100.getCause().equals(ax$95)) {
                }
                KeyManagementException ax$90 = new KeyManagementException(ax$95);
                if (!ax$90.getCause().equals(ax$95)) {
                }
                ax$90 = new KeyManagementException(ax$86, ax$95);
                if (!ax$90.getMessage().equals(ax$86) || !ax$90.getCause().equals(ax$95)) {
                }
                KeyStoreException ax$103 = new KeyStoreException(ax$95);
                if (!ax$103.getCause().equals(ax$95)) {
                }
                ax$103 = new KeyStoreException(ax$86, ax$95);
                if (!ax$103.getMessage().equals(ax$86) || !ax$103.getCause().equals(ax$95)) {
                }
                NoSuchAlgorithmException ax$101 = new NoSuchAlgorithmException(ax$95);
                if (!ax$101.getCause().equals(ax$95)) {
                }
                ax$101 = new NoSuchAlgorithmException(ax$86, ax$95);
                if (!ax$101.getMessage().equals(ax$86) || !ax$101.getCause().equals(ax$95)) {
                }
                ProviderException ax$97 = new ProviderException(ax$95);
                if (!ax$97.getCause().equals(ax$95)) {
                }
                ax$97 = new ProviderException(ax$86, ax$95);
                if (!ax$97.getMessage().equals(ax$86) || !ax$97.getCause().equals(ax$95)) {
                }
                SignatureException ax$88 = new SignatureException(ax$95);
                if (!ax$88.getCause().equals(ax$95)) {
                }
                ax$88 = new SignatureException(ax$86, ax$95);
                if (!ax$88.getMessage().equals(ax$86) || !ax$88.getCause().equals(ax$95)) {
                }
                CRLException ax$94 = new CRLException(ax$95);
                if (!ax$94.getCause().equals(ax$95)) {
                }
                ax$94 = new CRLException(ax$86, ax$95);
                if (!ax$94.getMessage().equals(ax$86) || !ax$94.getCause().equals(ax$95)) {
                }
                CertificateException ax$91 = new CertificateException(ax$95);
                if (!ax$91.getCause().equals(ax$95)) {
                }
                ax$91 = new CertificateException(ax$86, ax$95);
                if (!ax$91.getMessage().equals(ax$86) || !ax$91.getCause().equals(ax$95)) {
                }
                CertificateParsingException ax$99 = new CertificateParsingException(ax$95);
                if (!ax$99.getCause().equals(ax$95)) {
                }
                ax$99 = new CertificateParsingException(ax$86, ax$95);
                if (!ax$99.getMessage().equals(ax$86) || !ax$99.getCause().equals(ax$95)) {
                }
                CertificateEncodingException ax$92 = new CertificateEncodingException(ax$95);
                if (!ax$92.getCause().equals(ax$95)) {
                }
                ax$92 = new CertificateEncodingException(ax$86, ax$95);
                if (!ax$92.getMessage().equals(ax$86) || !ax$92.getCause().equals(ax$95)) {
                }
            } catch (Throwable ax$104) {
            } finally {
            }
            return;
        }
        double d2 = 94.55331;
        vMeth(d2);
        vSmallMeth_check_sum += i2 + i3 + i4 + Double.doubleToLongBits(d2);
    }

    public void mainTest(String[] strArr1) {
        int i = -74, i1 = -177, i26 = 2, i27 = 3, i28 = -1, i29 = 5, i30 = -32663, i31 = -65195, i32 = 5, i33 = 12, iArr[] = new int[N];
        long l1 = 173L, lArr1[] = new long[N];
        byte by2 = 11, by3 = 72;
        float[] fArr = new float[N];
        boolean[][] bArr1 = new boolean[N][N];
        double[] dArr1 = new double[N];
        short[] sArr = new short[N];
        FuzzerUtils.init(fArr, -1.196F);
        FuzzerUtils.init(iArr, 67);
        FuzzerUtils.init(bArr1, false);
        FuzzerUtils.init(lArr1, -4761697899207349153L);
        FuzzerUtils.init(dArr1, 0.107918);
        FuzzerUtils.init(sArr, (short) -5507);
        fArr[(-99 >>> 1) % N] *= (++iArr[(Test.iFld >>> 1) % N]);
        for (i = 12; i < 226; i++) {
            for (int smallinvoc = 0; smallinvoc < 19; smallinvoc++) vSmallMeth(-2, i, Test.iFld);
            for (i26 = i; i26 < 24; i26++) {
                if (Test.bFld)
                    break;
                bArr1 = bArr1;
                for (i28 = 1; i28 < 1; ++i28) {
                    Test.fFld += l1;
                    i1 = i26;
                    by2 -= (byte) Test.iFld1;
                    Test.fFld -= Test.instanceCount;
                    Test.iFld += (((i28 * i27) + i28) - i1);
                    Test.instanceCount -= Test.sFld;
                }
                iArr = FuzzerUtils.int1array(N, (int) -58859);
                for (i30 = 1; i30 < 1; ++i30) {
                    long l2 = 1802495519L;
                    Test.iFld += 10;
                    dFld = 3817953963969711871L;
                    Test.fFld = Test.sFld;
                    switch(((i % 2) * 5) + 60) {
                        case 64:
                            i27 += i30;
                            l1 -= l1;
                            Test.iArrFld[i + 1] = -84;
                            Test.iFld1 += i1;
                            Test.iFld -= i31;
                            iArr[i26 - 1] = by2;
                            i29 = (int) l1;
                            i31 += Test.iFld;
                            break;
                        case 66:
                            fArr[i30] -= i30;
                            switch(((i % 9) * 5) + 118) {
                                case 152:
                                    Test.instanceCount = i26;
                                    if (Test.bFld) {
                                        Test.fFld += i30;
                                        Test.fFld += (i30 + Test.instanceCount);
                                        iArr[i26 - 1] -= i27;
                                        Test.iArrFld[i26] -= (int) Test.instanceCount;
                                    } else if (Test.bFld) {
                                        Test.iFld -= i29;
                                        Test.iFld *= i30;
                                        i32 *= 21203;
                                        i1 += i30;
                                    } else {
                                        l1 += (((i30 * by2) + i26) - i27);
                                        Test.iFld1 -= i1;
                                        i31 += (((i30 * i28) + Test.instanceCount) - by2);
                                    }
                                    l1 = (long) dFld;
                                    if (Test.bFld) {
                                        if (true) {
                                            switch((i26 % 9) + 24) {
                                                case 24:
                                                    try {
                                                        Test.iArrFld[i26] = (i1 % i31);
                                                        i1 = (34187 % iArr[i26 - 1]);
                                                        Test.iFld1 = (i26 % Test.iArrFld[i26 + 1]);
                                                    } catch (ArithmeticException a_e) {
                                                    }
                                                    {
                                                        java.io.PrintStream ax$19 = System.out;
                                                        java.io.PrintStream ax$20 = System.err;
                                                        java.io.PrintStream ax$21 = new java.io.PrintStream(new java.io.OutputStream() {

                                                            @Override
                                                            public void write(int b) throws java.io.IOException {
                                                                // DO NOTHING: DISCARD ALL OUTPUTS
                                                            }
                                                        });
                                                        System.setOut(ax$21);
                                                        System.setErr(ax$21);
                                                        try {
                                                            for (int ax$17 = -2487; ax$17 < 7274; ax$17 += 1) {
                                                                try {
                                                                    float[] ax$9 = new float[16];
                                                                    for (int ax$11 = 0; ax$11 < 200000; ax$11++) {
                                                                        int ax$10 = ax$11 & 7;
                                                                        int ax$12 = ax$10 + ((ax$11 >> 4) & 7);
                                                                        float ax$15 = (float) ax$11;
                                                                        if ((ax$11 & 1) == 1)
                                                                            ax$15 = -ax$15;
                                                                        Arrays.fill(ax$9, ax$10, ax$12, ax$15);
                                                                        boolean ax$14 = false;
                                                                        for (int ax$13 = ax$10; ax$13 < ax$12; ax$13++) {
                                                                            if (ax$9[ax$13] != ax$15) {
                                                                                ax$14 = true;
                                                                            }
                                                                        }
                                                                        if (ax$14)
                                                                            ;
                                                                    }
                                                                } catch (Throwable ax$16) {
                                                                } finally {
                                                                }
                                                            }
                                                        } catch (Throwable ax$18) {
                                                        }
                                                        System.setOut(ax$19);
                                                        System.setErr(ax$20);
                                                    }
                                                    Test.iFld += (i30 ^ Test.instanceCount);
                                                    if (false)
                                                        continue;
                                                    switch((((Test.iFld1 >>> 1) % 3) * 5) + 28) {
                                                        case 34:
                                                            i27 *= (int) -19.444F;
                                                            i32 >>>= i28;
                                                            if (Test.bFld)
                                                                continue;
                                                            i32 += i30;
                                                            switch((i26 % 10) + 89) {
                                                                case 89:
                                                                    i1 -= (int) Test.fFld;
                                                                    switch((((i28 >>> 1) % 9) * 5) + 117) {
                                                                        case 159:
                                                                            lArr1[i30] = i1;
                                                                            Test.bFld = Test.bFld;
                                                                            i27 ^= i26;
                                                                            Test.iFld1 = (int) Test.fFld;
                                                                            Test.fFld += -108;
                                                                            iArr[i30] -= i31;
                                                                            Test.fFld = i28;
                                                                            iArr[i26 - 1] += -130;
                                                                            Test.fFld += 11936;
                                                                            try {
                                                                                iArr[i30 + 1] = (i29 / Test.iArrFld[i30]);
                                                                                i31 = (132 / i1);
                                                                                i31 = (i1 % -47984);
                                                                            } catch (ArithmeticException a_e) {
                                                                            }
                                                                            dArr1[i26 + 1] = 11480;
                                                                            i31 += (-180 + (i30 * i30));
                                                                            Test.instanceCount >>= l2;
                                                                            break;
                                                                        case 149:
                                                                            l1 -= i26;
                                                                            l2 >>= l2;
                                                                            i27 += (i30 * i30);
                                                                            Test.iArrFld = FuzzerUtils.int1array(N, (int) -8118);
                                                                            dFld *= i27;
                                                                            break;
                                                                        case 118:
                                                                            fArr[i30 + 1] += i31;
                                                                            break;
                                                                        case 138:
                                                                            i27 = Test.iFld1;
                                                                        case 131:
                                                                            i32 <<= Test.iFld1;
                                                                            break;
                                                                        case 143:
                                                                            sArr[i30] *= (short) i29;
                                                                            break;
                                                                        case 124:
                                                                            i29 = i31;
                                                                            break;
                                                                        case 119:
                                                                            if (true)
                                                                                break;
                                                                            break;
                                                                        case 148:
                                                                            Test.sFld = (short) i26;
                                                                        default:
                                                                            Test.lArrFld[i30 + 1] -= 4;
                                                                    }
                                                                    break;
                                                                case 90:
                                                                    dFld += i31;
                                                                    break;
                                                                case 91:
                                                                    if (false)
                                                                        break;
                                                                case 92:
                                                                    Test.sFld = (short) 1;
                                                                    break;
                                                                case 93:
                                                                    dFld = i30;
                                                                case 94:
                                                                    Test.instanceCount *= l1;
                                                                    break;
                                                                case 95:
                                                                    i1 -= by2;
                                                                    break;
                                                                case 96:
                                                                    Test.bFld = true;
                                                                case 97:
                                                                case 98:
                                                                    iArr[i] *= i29;
                                                                    break;
                                                                default:
                                                                    Test.fFld = i33;
                                                            }
                                                            break;
                                                        case 31:
                                                            i32 *= i31;
                                                            break;
                                                        case 40:
                                                            i27 %= (int) (Test.iFld1 | 1);
                                                            break;
                                                        default:
                                                            Test.iFld1 += (i30 * i30);
                                                    }
                                                case 25:
                                                    l2 = i33;
                                                    break;
                                                case 26:
                                                    i1 = i;
                                                    break;
                                                case 27:
                                                    Test.iFld1 += (i30 + Test.sFld);
                                                    break;
                                                case 28:
                                                    Test.bFld = Test.bFld;
                                                    break;
                                                case 29:
                                                case 30:
                                                    iArr[i26 - 1] <<= Test.iFld;
                                                    break;
                                                case 31:
                                                    Test.fFld = Test.fFld;
                                                    break;
                                                case 32:
                                                    dArr1[i] = Test.iFld;
                                                    break;
                                            }
                                        } else if (false) {
                                            Test.iArrFld[i26] = (int) Test.instanceCount;
                                        } else {
                                            i1 += i30;
                                        }
                                    } else {
                                        fArr[i] *= l2;
                                    }
                                    break;
                                case 157:
                                    dFld = Test.fFld;
                                case 163:
                                    try {
                                        i33 = (-1266237527 / i33);
                                        Test.iFld1 = (i33 / 147);
                                        iArr[i] = (222 % i32);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    break;
                                case 154:
                                case 133:
                                    i32 += (i30 ^ i);
                                case 153:
                                    if (Test.bFld)
                                        continue;
                                    break;
                                case 149:
                                    i29 += (((i30 * by3) + Test.fFld) - l1);
                                case 145:
                                    Test.iFld <<= 56588;
                                case 140:
                                    i33 = i31;
                            }
                            break;
                        default:
                            i31 = -12;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i i1 i26 = " + i + "," + i1 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("l1 by2 i30 = " + l1 + "," + by2 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("by3 fArr iArr = " + by3 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("bArr1 lArr1 dArr1 = " + FuzzerUtils.checkSum(bArr1) + "," + FuzzerUtils.checkSum(lArr1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld Test.fFld Test.iFld1 = " + Test.sFld + "," + Float.floatToIntBits(Test.fFld) + "," + Test.iFld1);
        FuzzerUtils.out.println("dFld Test.iArrFld Test.lArrFld = " + Double.doubleToLongBits(dFld) + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$22 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
// DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
// DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
