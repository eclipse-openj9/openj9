// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.concurrent.CountDownLatch;
import java.security.BasicPermission;
import java.security.AccessController;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 54646L;

    public static int iFld = -24;

    public static float fFld = -1.933F;

    public static double dFld = -1.126301;

    public static float[][] fArrFld = new float[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 79.117F);
    }

    public static long vSmallMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {
        if (ax$31) {
            double ax$33 = dFld;
            int ax$34 = iFld;
            try {
                java.lang.Object ax$32 = "7.888888295802402E-24";
                // Unnecessary IPUT.
                iFld = 0;
                // Unnecessary IPUT.
                dFld = 0.0;
                // Unnecessary IPUT.
                ax$32 = null;
            } catch (Throwable ax$35) {
            } finally {
                dFld = ax$33;
                iFld = ax$34;
            }
            return;
        }
        int i4 = 8, i5 = 10, i6 = -5, i7 = 18928, i8 = -2, i9 = 48, i10 = -64, i11 = 110, i12 = -21933, i13 = 0, iArr[] = new int[N];
        boolean b = true;
        byte by = -2;
        float f = -59.974F;
        double d = 64.23401;
        short s = 23661;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, -8L);
        FuzzerUtils.init(iArr, 77);
        for (long l : lArr) {
            Test.iFld = Test.iFld;
            l -= Test.iFld;
        }
        Test.iFld = (int) Test.instanceCount;
        Test.iFld = Test.iFld;
        Test.iFld = (int) Test.instanceCount;
        i4 = 1;
        do {
            if (b)
                continue;
        } while (++i4 < 191);
        for (i5 = 8; 235 > i5; ++i5) {
            switch(((i5 % 4) * 5) + 89) {
                case 109:
                    i6 *= (int) Test.instanceCount;
                    for (i7 = i5; i7 < 3; ++i7) {
                        by = (byte) f;
                        i6 += i7;
                        iArr[i7] += i5;
                        d = 186;
                        iArr[i7] >>= by;
                    }
                    for (i9 = 1; i9 < 3; i9++) {
                        i11 = 2;
                        while (--i11 > 0) {
                            s = by;
                            if (i7 != 0) {
                                vMeth1_check_sum += i4 + (b ? 1 : 0) + i5 + i6 + i7 + i8 + by + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i9 + i10 + i11 + s + i12 + i13 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
                                return;
                            }
                            if (b)
                                break;
                            Test.instanceCount = i11;
                            i10 += i5;
                            Test.instanceCount <<= i7;
                            if (b)
                                continue;
                            lArr[i9] >>>= i8;
                            s += (short) i11;
                            i6 += (int) (-33.867F + (i11 * i11));
                            i10 += (i11 + Test.instanceCount);
                        }
                        for (i12 = 1; i12 < 2; ++i12) {
                            d += Test.instanceCount;
                            i6 *= (int) Test.instanceCount;
                            i8 += i12;
                            d += Test.instanceCount;
                            i8 = Test.iFld;
                            i13 <<= (int) Test.instanceCount;
                        }
                    }
                    break;
                case 90:
                    Test.iFld += (((i5 * i8) + i5) - i13);
                    break;
                case 94:
                    Test.instanceCount = i6;
                    break;
                case 91:
                    iArr[i5 + 1] += (int) f;
                    break;
            }
        }
        vMeth1_check_sum += i4 + (b ? 1 : 0) + i5 + i6 + i7 + i8 + by + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i9 + i10 + i11 + s + i12 + i13 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i1, int i2, int i3) {
        int i14 = -12, i15 = -1, i16 = -204, i17 = -163, i18 = 1, i19 = -23, i20 = -5, i21 = -43308, iArr1[] = new int[N];
        boolean b1 = true;
        long l1 = -5012L;
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr1, -56);
        FuzzerUtils.init(dArr, -53.1320);
        {
            java.io.PrintStream ax$38 = System.out;
            java.io.PrintStream ax$39 = System.err;
            java.io.PrintStream ax$40 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$40);
            System.setErr(ax$40);
            try {
                ax$31 = true;
                for (int ax$36 = 0; ax$36 < 7162; ax$36 += 1) vMeth1();
            } catch (java.lang.Throwable ax$37) {
            } finally {
                ax$31 = false;
            }
            System.setOut(ax$38);
            System.setErr(ax$39);
        }
        vMeth1();
        Test.fArrFld[(i2 >>> 1) % N][(i2 >>> 1) % N] *= Test.fFld;
        for (i14 = 3; i14 < 118; ++i14) {
            i16 = 1;
            do {
                iArr1[i14 - 1] = 169;
                i17 = 1;
                do {
                    i15 = i14;
                    Test.instanceCount <<= Test.iFld;
                    iArr1[i17 + 1] = i16;
                    i2 -= -32550;
                    Test.dFld = i16;
                } while (--i17 > 0);
                for (i18 = 1; i18 < 1; ++i18) {
                    i19 -= (int) Test.dFld;
                    if (b1)
                        break;
                    {
                        java.io.PrintStream ax$6 = System.out;
                        java.io.PrintStream ax$7 = System.err;
                        java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$8);
                        System.setErr(ax$8);
                        try {
                            for (int ax$4 = -2631; ax$4 < 3245; ax$4 += 1) {
                                int ax$2 = i19;
                                try {
                                    short[] ax$0 = new short[] { 20, 10, 0, -10, -20 };
                                    for (int ax$1 = 0; ax$1 < 128; ax$1++) ax$0[ax$1] -= i19;
                                } catch (Throwable ax$3) {
                                } finally {
                                    i19 = ax$2;
                                }
                            }
                        } catch (Throwable ax$5) {
                        }
                        System.setOut(ax$6);
                        System.setErr(ax$7);
                    }
                    i2 += i18;
                    Test.iFld += i16;
                    i19 <<= i18;
                    Test.fFld += i3;
                    iArr1[i16] *= i14;
                    Test.dFld -= i15;
                    Test.dFld = Test.dFld;
                    i15 += -47;
                    Test.fFld += (((i18 * i1) + Test.instanceCount) - Test.instanceCount);
                    Test.instanceCount = i1;
                    i15 ^= i14;
                    iArr1[i18] = i3;
                    i19 += (((i18 * i3) + i15) - Test.iFld);
                }
                Test.instanceCount <<= 14;
                Test.instanceCount = -87;
                iArr1[i14 - 1] = (int) Test.fFld;
                for (i20 = 1; i20 < 1; ++i20) {
                    Test.iFld += (((i20 * i20) + i1) - Test.iFld);
                    Test.fFld += i20;
                    dArr[i14 - 1] = 2.487F;
                    Test.instanceCount = Test.iFld;
                    i19 *= i19;
                    Test.instanceCount = l1;
                }
            } while (++i16 < 5);
        }
        vMeth_check_sum += i1 + i2 + i3 + i14 + i15 + i16 + i17 + i18 + i19 + (b1 ? 1 : 0) + i20 + i21 + l1 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vSmallMeth() {
        vMeth(Test.iFld, Test.iFld, Test.iFld);
        {
            java.io.PrintStream ax$28 = System.out;
            java.io.PrintStream ax$29 = System.err;
            java.io.PrintStream ax$30 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$30);
            System.setErr(ax$30);
            try {
                for (int ax$26 = -2832; ax$26 < 6277; ax$26 += 1) {
                    try {
                        java.util.concurrent.CountDownLatch ax$24 = new CountDownLatch(1000);
                        ax$24.countDown();
                    } catch (Throwable ax$25) {
                    } finally {
                    }
                }
            } catch (Throwable ax$27) {
            }
            System.setOut(ax$28);
            System.setErr(ax$29);
        }
        Test.iFld = Test.iFld;
        vSmallMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {
        int i = 225, iArr2[] = new int[N];
        FuzzerUtils.init(iArr2, -47942);
        i <<= (int) Long.reverseBytes(1439131890L);
        for (int smallinvoc = 0; smallinvoc < 740; smallinvoc++) vSmallMeth();
        iArr2[(i >>> 1) % N] = Test.iFld;
        FuzzerUtils.out.println("i iArr2 = " + i + "," + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld Test.fArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$41) {
            try {
                AccessController.checkPermission(new BasicPermission("no such permission") {
                });
            } catch (Throwable ax$42) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$31 = false;

    private static Boolean ax$41 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
// DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
// DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
