// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.HashSet;
import java.util.List;
import java.util.Collections;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -37354L;

    public static volatile float fFld = 75.758F;

    public static volatile short sFld = 31596;

    public byte byFld = -18;

    public static volatile long[] lArrFld = new long[N];

    public static volatile float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4044974594L);
        FuzzerUtils.init(Test.fArrFld, 0.417F);
    }

    public static long vSmallMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth() {
        int i3 = -11537, i4 = -229, i5 = 35782, i6 = 48171, i7 = 1, i8 = -44248, i9 = -10428, iArr[] = new int[N];
        byte by = -13;
        double d = 1.37988;
        boolean b = true;
        long l1 = 1250258990559636820L;
        short s = -24585;
        float f = -17.34F, fArr[] = new float[N];
        FuzzerUtils.init(fArr, -2.548F);
        FuzzerUtils.init(iArr, 64970);
        if (b) {
            fArr[(i3 >>> 1) % N] += (float) 2.94199;
            iArr[(i3 >>> 1) % N] = i3;
        } else if (b) {
            switch((((i3 >>> 1) % 6) * 5) + 55) {
                case 60:
                    for (i4 = 9; i4 < 241; ++i4) {
                        switch((i4 % 2) + 65) {
                            case 65:
                                for (i6 = 3; i6 > 1; i6--) {
                                    i8 = 1;
                                    do {
                                        iArr[i8] -= (int) 18.322F;
                                        Test.lArrFld[i4] -= 63099;
                                        Test.instanceCount += (i8 | i3);
                                        by |= (byte) Test.instanceCount;
                                        iArr[i4] = i5;
                                        iArr[i6 - 1] += 110;
                                        fArr = fArr;
                                    } while ((i8 += 2) < 2);
                                    by = (byte) Test.instanceCount;
                                    i7 += -99;
                                    by <<= (byte) i5;
                                    if (b) {
                                        Test.instanceCount -= Test.instanceCount;
                                        Test.instanceCount = i5;
                                        i5 *= (int) d;
                                        d -= i3;
                                        try {
                                            i5 = (i8 / 44779);
                                            i7 = (i8 / 46752);
                                            i7 = (33 / i6);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        Test.instanceCount += i3;
                                        i5 -= (int) Test.instanceCount;
                                        i5 = i6;
                                    }
                                    for (l1 = i4; l1 < 2; ++l1) {
                                        if (i9 != 0) {
                                        }
                                        b = true;
                                        i3 += (int) (((l1 * by) + Test.instanceCount) - l1);
                                        b = b;
                                        Test.instanceCount = i8;
                                        switch(((i8 >>> 1) % 1) + 31) {
                                            case 31:
                                                Test.lArrFld[(int) (l1)] = 0;
                                                s ^= (short) i4;
                                                i3 += s;
                                                break;
                                            default:
                                                i3 += (int) (l1 ^ by);
                                        }
                                    }
                                }
                                break;
                            case 66:
                                if (b)
                                    continue;
                                break;
                        }
                    }
                    break;
                case 61:
                    i9 *= (int) Test.instanceCount;
                    break;
                case 70:
                case 75:
                    f += Test.instanceCount;
                case 67:
                    i5 = (int) f;
                    break;
                case 72:
                    by = (byte) i3;
                default:
                    fArr[(-122 >>> 1) % N] -= 16473;
            }
        } else {
            i7 = (int) -10L;
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + by + Double.doubleToLongBits(d) + (b ? 1 : 0) + l1 + i9 + s + Float.floatToIntBits(f) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(int i2) {
        int i10 = 27872, i11 = -44, i12 = 8, i13 = 4, i14 = -237, iArr1[] = new int[N], iArr2[][] = new int[N][N];
        long l2 = 5L;
        double d1 = 30.1338, dArr[][] = new double[N][N];
        byte by1 = -117;
        FuzzerUtils.init(iArr1, 78);
        FuzzerUtils.init(dArr, 47.3997);
        FuzzerUtils.init(iArr2, -13);
        Test.instanceCount ^= iMeth();
        for (i10 = 2; 100 > i10; ++i10) {
            for (l2 = 1; l2 < 6; l2++) {
                Test.instanceCount = -6;
                iArr1[i10] -= (int) Test.fFld;
                Test.lArrFld[(int) (l2 + 1)] = 11;
                i12 += (int) (l2 * i11);
                i2 += (int) (l2 * i2);
                for (i13 = 1; i13 < 2; i13++) {
                    int i15 = -13, i16 = -4;
                    i14 += (i13 * i13);
                    i12 += (i13 * i13);
                    iArr1 = iArr1;
                    switch((i13 % 6) + 84) {
                        case 84:
                            switch((i10 % 2) + 104) {
                                case 104:
                                    i11 += (i13 * i13);
                                    i11 = (int) Test.instanceCount;
                                    dArr[i13 + 1] = dArr[i10 + 1];
                                    break;
                                case 105:
                                    Test.fFld += (((i13 * l2) + i2) - Test.instanceCount);
                                    Test.lArrFld = Test.lArrFld;
                                    i14 -= i11;
                                    Test.fFld -= (float) d1;
                                    i12 += (int) -79.105664;
                                    iArr2 = iArr2;
                                default:
                                    i15 += i13;
                                    Test.fFld += (i13 * i2);
                                    i15 = i16;
                                    Test.fFld = -16782;
                                    i16 -= i10;
                                    i15 = i14;
                                    switch((i10 % 1) + 15) {
                                        case 15:
                                            iArr1[i13 + 1] = -19944;
                                            iArr2[i13][i13] <<= (int) l2;
                                            switch((i10 % 7) + 69) {
                                                case 69:
                                                    Test.instanceCount ^= i2;
                                                    Test.fFld -= l2;
                                                    try {
                                                        i11 = (i14 % i2);
                                                        i11 = (-52164 / iArr1[i10 - 1]);
                                                        i16 = (i16 % -17996);
                                                    } catch (ArithmeticException a_e) {
                                                    }
                                                    try {
                                                        iArr1[i10] = (177455278 / i11);
                                                        i11 = (iArr1[i13 - 1] / iArr2[i13 + 1][(int) (l2)]);
                                                        i16 = (i10 / 150);
                                                    } catch (ArithmeticException a_e) {
                                                    }
                                                    break;
                                                case 70:
                                                    Test.instanceCount <<= -13;
                                                case 71:
                                                    i2 += (i13 + i13);
                                                    break;
                                                case 72:
                                                    i16 -= by1;
                                                case 73:
                                                    Test.sFld += (short) i11;
                                                case 74:
                                                    Test.fFld += (((i13 * Test.instanceCount) + Test.instanceCount) - i14);
                                                    break;
                                                case 75:
                                                    i11 += (106 + (i13 * i13));
                                                default:
                                                    i15 += 23827;
                                            }
                                    }
                            }
                        case 85:
                            Test.instanceCount += (i13 | i15);
                        case 86:
                            Test.fFld += (((i13 * i13) + l2) - i15);
                            break;
                        case 87:
                            i2 += (-158 + (i13 * i13));
                            break;
                        case 88:
                            i16 += i11;
                            break;
                        case 89:
                            d1 *= i14;
                        default:
                            i15 = i16;
                    }
                }
            }
        }
        vMeth_check_sum += i2 + i10 + i11 + l2 + i12 + i13 + i14 + Double.doubleToLongBits(d1) + by1 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vSmallMeth(long l, int i, int i1) {
        int[] iArr3 = new int[N];
        FuzzerUtils.init(iArr3, 12);
        vMeth(i1);
        iArr3[(i1 >>> 1) % N] += i1;
        vSmallMeth_check_sum += l + i + i1 + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {
        if (ax$0) {
            try {
                int ax$1 = 0x12;
                ax$1++;
            } catch (Throwable ax$2) {
            } finally {
            }
            return;
        }
        int i17 = -56, i18 = -134, i19 = -44281, i20 = 12, i21 = -48211, i22 = -81, i23 = 29808, i24 = 50359, i25 = 27571, i26 = 11569, i27 = -2553, i28 = -142, i29 = -2, i30 = -93, i31 = 116, i32 = 65091, iArr4[] = new int[N], iArr5[] = new int[N];
        boolean b1 = false, b2 = true;
        double d2 = -124.129848, d3 = 2.40378, d4 = 41.60032;
        float f1 = 0.464F;
        FuzzerUtils.init(iArr4, 115);
        FuzzerUtils.init(iArr5, 39308);
        for (int smallinvoc = 0; smallinvoc < 916; smallinvoc++) vSmallMeth(Test.instanceCount, i17, i17);
        for (i18 = 5; i18 < 168; i18 += 3) {
            Test.fFld += i17;
            if (b1)
                break;
            i19 = -5;
            Test.fArrFld[i18 - 1] += i17;
            iArr4[i18 + 1] = (int) Test.fFld;
            for (d2 = 1; d2 < 93; ++d2) {
                i19 -= i17;
                Test.fFld += (float) d2;
                i17 <<= (int) 6L;
                iArr4[i18 - 1] = i17;
                Test.sFld += (short) 1.626F;
                i17 ^= (int) Test.instanceCount;
                i19 = i18;
            }
            Test.lArrFld[(i18 >>> 1) % N] -= (long) Test.fFld;
            i17 = i20;
            i17 = i17;
            iArr5[i18 - 1] = (int) Test.instanceCount;
            for (i21 = 93; i21 > 5; i21--) {
                i20 = (int) Test.instanceCount;
            }
            Test.instanceCount <<= i18;
            i19 *= (int) 1.810F;
            b1 = false;
        }
        i23 = 1;
        while (++i23 < 208) {
            for (i24 = i23; 25 > i24; ++i24) {
                Test.fFld *= i17;
                b1 = b1;
            }
            if (b1)
                break;
            iArr5[i23] >>= 3;
            iArr5[i23 - 1] <<= (int) Test.instanceCount;
            b1 = b2;
            for (i26 = 1; i26 < 25; ++i26) {
                i17 = (int) Test.instanceCount;
                iArr5[i23 + 1] = i24;
                switch((i26 % 2) + 119) {
                    case 119:
                        Test.fFld = i20;
                        for (d3 = 1; d3 < 2; d3++) {
                            i17 += (int) Test.instanceCount;
                            i27 += (int) d3;
                            if (b1)
                                continue;
                        }
                        i17 = i25;
                        break;
                    case 120:
                        if (true)
                            continue;
                        i28 -= (int) Test.instanceCount;
                        for (i29 = 1; 2 > i29; i29++) {
                            iArr5[i29 - 1] |= i22;
                            i19 += (int) Test.instanceCount;
                        }
                        i25 = i23;
                        for (i31 = 1; i31 < 2; ++i31) {
                            i30 -= (int) Test.fFld;
                            try {
                                i22 = (i32 % 7439);
                                i25 = (232 % iArr4[i26]);
                                i28 = (23076 / i18);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.fFld -= i25;
                            if (false)
                                break;
                            Test.instanceCount >>= -42;
                            switch(((i22 >>> 1) % 2) + 70) {
                                case 70:
                                    Test.fFld = i17;
                                    if (false) {
                                        Test.instanceCount = i25;
                                        f1 += Test.instanceCount;
                                        iArr5[i31 - 1] += Test.sFld;
                                        iArr5[i23 + 1] = i28;
                                        i28 = (int) f1;
                                        Test.fFld += (i31 * i31);
                                        switch((((-4 >>> 1) % 6) * 5) + 105) {
                                            case 108:
                                                i28 = (int) Test.instanceCount;
                                                if (b2)
                                                    continue;
                                                d4 = 3380;
                                                Test.instanceCount /= ((long) (f1) | 1);
                                                switch(((11 >>> 1) % 10) + 6) {
                                                    case 6:
                                                        d4 *= i31;
                                                        i27 <<= i30;
                                                        iArr5[i26 - 1] = -2;
                                                        try {
                                                            iArr5[(i25 >>> 1) % N] = (i17 / i31);
                                                            i25 = (i29 / -45315);
                                                            i17 = (i17 % i29);
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                        i22 >>>= (int) Test.instanceCount;
                                                    case 7:
                                                        i17 <<= i17;
                                                        break;
                                                    case 8:
                                                        i22 = (int) Test.instanceCount;
                                                    case 9:
                                                        iArr4[i31] += (int) d3;
                                                        break;
                                                    case 10:
                                                        Test.instanceCount &= 8253965630622887606L;
                                                        break;
                                                    case 11:
                                                        byFld += (byte) (3873613265L + (i31 * i31));
                                                        break;
                                                    case 12:
                                                        i20 = Test.sFld;
                                                    case 13:
                                                        i28 = 13870;
                                                        break;
                                                    case 14:
                                                        i25 *= i31;
                                                        break;
                                                    case 15:
                                                        Test.sFld += (short) Test.instanceCount;
                                                    default:
                                                        i22 = 36918;
                                                }
                                                break;
                                            case 116:
                                                iArr4[i26 + 1] *= i28;
                                                break;
                                            case 112:
                                                Test.instanceCount <<= i18;
                                                break;
                                            case 111:
                                                i19 += (int) Test.instanceCount;
                                                break;
                                            case 132:
                                                byFld %= (byte) (i30 | 1);
                                                break;
                                            case 124:
                                                Test.fFld += i22;
                                                break;
                                        }
                                    } else {
                                        iArr5[i26 + 1] -= (int) Test.instanceCount;
                                    }
                                    break;
                                case 71:
                                    Test.instanceCount -= (long) d4;
                                    break;
                            }
                        }
                    default:
                        try {
                            i17 = (i24 % iArr4[i26 - 1]);
                            iArr4[i26 + 1] = (-26633 / i26);
                            i30 = (i28 / -200);
                        } catch (ArithmeticException a_e) {
                        }
                }
            }
        }
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("b1 d2 i20 = " + (b1 ? 1 : 0) + "," + Double.doubleToLongBits(d2) + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 b2 = " + i24 + "," + i25 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i26 i27 d3 = " + i26 + "," + i27 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 f1 = " + i31 + "," + i32 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("d4 iArr4 iArr5 = " + Double.doubleToLongBits(d4) + "," + FuzzerUtils.checkSum(iArr4) + "," + FuzzerUtils.checkSum(iArr5));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("byFld Test.lArrFld Test.fArrFld = " + byFld + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$8) {
            try {
                java.util.List[] ax$11 = new java.util.List[2436];
                int ax$15 = 0x7f01;
                for (int ax$13 = 0; ax$13 < ax$15; ax$13++) {
                    for (int ax$14 = 0; ax$14 < ax$15; ax$14++) {
                        boolean ax$12 = (Math.abs(ax$13 - ax$14) > 1);
                        List<Integer> ax$9 = (List<Integer>) ax$11[ax$13];
                        List<Integer> ax$10 = (List<Integer>) ax$11[ax$14];
                        if (Collections.disjoint(ax$9, ax$10) != ax$12)
                            ;
                        if (Collections.disjoint(new HashSet<Integer>(ax$9), ax$10) != ax$12)
                            ;
                        if (Collections.disjoint(new HashSet<Integer>(ax$9), new HashSet<Integer>(ax$10)) != ax$12)
                            ;
                    }
                }
            } catch (Throwable ax$16) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$8 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
// DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
// DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
