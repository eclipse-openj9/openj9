// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 241L;

    public static float fFld = 0.148F;

    public static short sFld = -9398;

    public static byte byFld = 116;

    public int iFld = 57;

    public boolean bFld = true;

    public int[] iArrFld = new int[N];

    public long[] lArrFld = new long[N];

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5) {
        int i6 = -49990, i7 = -6, i8 = -5, i9 = 30526, i10 = 129, i11 = -13, i12 = -25, iArr[] = new int[N];
        boolean b = false;
        long l = 215L, lArr[] = new long[N];
        byte by = 5;
        double d = 99.76675;
        FuzzerUtils.init(lArr, -24L);
        FuzzerUtils.init(iArr, -3);
        for (i6 = 3; i6 < 183; i6 += 3) {
            i8 = 1;
            while (++i8 < 9) {
                Test.instanceCount = (long) Test.fFld;
                if (b)
                    break;
                i7 = Test.sFld;
                lArr[i6] *= (long) Test.fFld;
                i9 = 1;
                while ((i9 += 2) < 1) {
                    Test.fFld += (((i9 * i7) + i9) - i7);
                    Test.instanceCount <<= i8;
                }
                Test.instanceCount += (-28775L + (i8 * i8));
                i7 += i8;
                i5 *= i8;
                Test.instanceCount += i8;
                Test.instanceCount += (long) Test.fFld;
            }
        }
        i5 -= i6;
        if (b) {
            Test.fFld *= i7;
            i10 = 1;
            while (++i10 < 107) {
                Test.instanceCount += -5713607612988920036L;
                iArr[i10 - 1] += i6;
                switch(((i10 % 2) * 5) + 62) {
                    case 64:
                        Test.instanceCount = i9;
                        iArr[i10] -= i8;
                        break;
                    case 72:
                        iArr = iArr;
                        iArr[i10 - 1] *= (int) Test.fFld;
                        for (i11 = 1; i11 < 5; ++i11) {
                            iArr[i10] -= (int) Test.fFld;
                        }
                        Test.instanceCount = Test.instanceCount;
                        i12 <<= i11;
                    default:
                        if (b)
                            continue;
                        l = 1;
                        while (++l < 5) {
                            i5 = 0;
                            i5 %= (int) ((long) (Test.fFld) | 1);
                            i5 += (-5 + (l * l));
                            Test.sFld += (short) (((l * Test.fFld) + by) - i9);
                            i7 += (int) d;
                            Test.instanceCount += (l - l);
                        }
                }
            }
        }
        vMeth2_check_sum += i5 + i6 + i7 + i8 + (b ? 1 : 0) + i9 + i10 + i11 + i12 + l + by + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i2, int i3, int i4) {
        int i13 = 52318, i14 = 47069, i15 = 4205, i16 = 31, i17 = 0, i18 = -22095, i19 = 0, i20 = 60, iArr1[] = new int[N];
        double d1 = -1.113685;
        boolean b1 = true, b2 = false;
        long l1 = 4L, lArr1[] = new long[N];
        FuzzerUtils.init(iArr1, 31169);
        FuzzerUtils.init(lArr1, -32L);
        vMeth2(i2);
        i3 >>= i2;
        i2 >>= (int) -154L;
        Test.fFld += Test.fFld;
        for (i13 = 4; i13 < 86; i13++) {
            i4 = -2;
            for (i15 = 1; i15 < 7; i15++) {
                Test.instanceCount += Test.instanceCount;
                i3 += (i15 | (long) Test.fFld);
                i16 += (((i15 * i16) + Test.fFld) - Test.instanceCount);
                switch(((i15 % 4) * 5) + 11) {
                    case 25:
                        for (i17 = 1; i17 < 2; i17++) {
                            i16 += (143 + (i17 * i17));
                        }
                        iArr1[i13] = (int) d1;
                        Test.sFld *= (short) Test.instanceCount;
                    case 29:
                    case 21:
                        i19 = 1;
                        do {
                            Test.byFld = (byte) i15;
                            iArr1[i15] = -6;
                            i16 -= 28445;
                            Test.instanceCount -= Test.byFld;
                            iArr1[i15 + 1] *= i4;
                            i4 = i3;
                        } while (++i19 < 2);
                        iArr1[i15 - 1] %= (int) (i17 | 1);
                        d1 -= i14;
                        if (b1)
                            continue;
                        switch(((i13 % 2) * 5) + 79) {
                            case 81:
                                Test.fFld += i17;
                                if (b1) {
                                    Test.fFld = (float) d1;
                                    i14 += i13;
                                    lArr1[i13 + 1] *= l1;
                                    Test.fFld += Test.sFld;
                                    i3 += (int) (4130079340712300580L + (i15 * i15));
                                    Test.fFld *= (float) -53.39233;
                                    i16 = 10285;
                                    l1 <<= Test.byFld;
                                } else if (b2) {
                                    Test.byFld -= (byte) d1;
                                }
                                break;
                            case 85:
                                i16 += (((i15 * i20) + l1) - i2);
                                break;
                        }
                        break;
                    case 13:
                        i16 *= (int) Test.fFld;
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i13 + i14 + i15 + i16 + i17 + i18 + Double.doubleToLongBits(d1) + i19 + (b1 ? 1 : 0) + l1 + (b2 ? 1 : 0) + i20 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth(int i, int i1) {
        if (ax$0) {
            int ax$4 = i1;
            int ax$5 = i;
            try {
                int[][][] ax$1 = new int[337][4][1];
                for (int ax$2 = i1 - 2 - 1; ax$2 >= 3; ax$2--) {
                    for (int ax$3 = 2; ax$3 < i1; ax$3++) {
                        ax$1[i1][4][i] >>= 1;
                    }
                }
            } catch (Throwable ax$6) {
            } finally {
                i1 = ax$4;
                i = ax$5;
            }
            return;
        }
        int i21 = 133, i22 = -52946, i23 = 183, i24 = 2, i25 = -145, i26 = 0;
        boolean b3 = false, bArr[] = new boolean[N];
        double d2 = -1.100932;
        FuzzerUtils.init(bArr, false);
        i1 -= (int) (++Test.instanceCount);
        vMeth1(-5321, 151, -245);
        i = i;
        for (i21 = 9; i21 < 147; ++i21) {
            i >>= i22;
            i22 = i21;
            for (i23 = 1; 4 > i23; ++i23) {
                for (i25 = 1; i25 < 2; ++i25) {
                    Test.instanceCount += (long) Test.fFld;
                    switch(((i25 % 6) * 5) + 39) {
                        case 66:
                            i1 = 28513;
                            Test.instanceCount += i25;
                            Test.fFld += (((i25 * i24) + Test.instanceCount) - Test.instanceCount);
                            bArr[i25] = b3;
                            iArrFld = FuzzerUtils.int1array(N, (int) -55);
                            iArrFld[i21 - 1] = i25;
                            i26 = Test.byFld;
                            i1 -= i24;
                            i += (i25 * i26);
                            i24 += i1;
                            i24 += i25;
                            iArrFld[i25 + 1] |= i25;
                            break;
                        case 43:
                        case 47:
                            i = i22;
                            d2 += Test.fFld;
                            i26 = -41021;
                            b3 = false;
                            i24 += (((i25 * Test.fFld) + i26) - i);
                            iArrFld[i23 - 1] = (int) Test.instanceCount;
                            i22 = 9;
                            break;
                        case 50:
                            i22 *= i1;
                            Test.instanceCount <<= i26;
                            Test.sFld <<= (short) 10;
                            Test.fFld = (float) d2;
                            i -= (int) Test.instanceCount;
                            break;
                        case 59:
                            i24 += (int) Test.fFld;
                            i1 += (i25 + i21);
                            Test.instanceCount = i1;
                            break;
                        case 61:
                            Test.byFld *= (byte) i23;
                            break;
                        default:
                            i24 -= Test.byFld;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + i21 + i22 + i23 + i24 + i25 + i26 + (b3 ? 1 : 0) + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {
        float f = -53.457F, fArr[] = new float[N];
        int i27 = -2, i28 = -114, i29 = 100, i30 = 0, i31 = 0, i32 = 234;
        double d3 = 61.13211;
        FuzzerUtils.init(fArr, -14.985F);
        iArrFld = (iArrFld = (iArrFld = (iArrFld = iArrFld)));
        {
            java.io.PrintStream ax$9 = System.out;
            java.io.PrintStream ax$10 = System.err;
            java.io.PrintStream ax$11 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$11);
            System.setErr(ax$11);
            try {
                ax$0 = true;
                for (int ax$7 = 0; ax$7 < 7784; ax$7 += 1) vMeth(1622528442, 224835119);
            } catch (java.lang.Throwable ax$8) {
            } finally {
                ax$0 = false;
            }
            System.setOut(ax$9);
            System.setErr(ax$10);
        }
        vMeth(iFld, iFld);
        for (f = 178; 10 < f; f--) {
            i28 = 1;
            do {
                d3 += 11;
                bFld = bFld;
                i27 += i27;
                i27 += (i28 * i28);
                lArrFld[i28] *= Test.sFld;
                i27 = i28;
                i27 += (int) -4171056957L;
                iFld += (i28 * i28);
            } while (++i28 < 30);
            iFld = 2;
            for (i29 = 1; i29 < 30; ++i29) {
                iFld += i29;
                Test.instanceCount = iFld;
                i27 += (i29 + i29);
                i30 += (i29 | (long) Test.fFld);
                i30 *= Test.sFld;
                lArrFld[i29 - 1] = 63173;
                for (i31 = 1; i31 < 2; ++i31) {
                    Test.instanceCount *= (long) Test.fFld;
                    Test.fFld *= -99.642F;
                    iFld += Test.byFld;
                    iFld = (int) -3198709414410658380L;
                    Test.instanceCount += (((i31 * i29) + i30) - i29);
                    Test.instanceCount = Test.byFld;
                    Test.fFld -= -146;
                    i30 = Test.sFld;
                    Test.instanceCount *= i27;
                    fArr[i29] -= Test.sFld;
                    switch(((i29 % 2) * 5) + 38) {
                        case 42:
                            iArrFld[i31] += i31;
                        case 48:
                            i32 += (int) Test.instanceCount;
                            lArrFld[(int) (f + 1)] = i27;
                            i27 = 11;
                            i30 *= (int) 1643424927323399450L;
                            Test.fFld *= Test.instanceCount;
                            bFld = bFld;
                            switch((int) (((f % 5) * 5) + 94)) {
                                case 102:
                                    i30 += -87;
                                    d3 += iFld;
                                    iFld = (int) d3;
                                    i30 *= i28;
                                    if (bFld) {
                                        i27 -= (int) -26.121808;
                                        iArrFld[(i32 >>> 1) % N] = (int) f;
                                        i32 += (int) Test.instanceCount;
                                        iArrFld[(int) (f - 1)] -= i30;
                                        Test.sFld += (short) (((i31 * i32) + i29) - Test.sFld);
                                        switch(((i31 % 2) * 5) + 80) {
                                            case 85:
                                                Test.instanceCount -= i28;
                                                i30 -= i32;
                                                Test.sFld += (short) (((i31 * i28) + i30) - i31);
                                                i32 += (i31 * Test.instanceCount);
                                                d3 -= i30;
                                                iFld *= i30;
                                                iFld += i28;
                                                d3 = 242;
                                                Test.byFld += (byte) Test.instanceCount;
                                                i32 += i31;
                                            case 90:
                                                bFld = bFld;
                                                i27 = i31;
                                                i27 *= (int) d3;
                                                if (bFld)
                                                    continue;
                                                d3 -= i31;
                                                Test.instanceCount >>>= 128;
                                                break;
                                            default:
                                                fArr[i31 + 1] -= (float) d3;
                                                Test.instanceCount *= i31;
                                                i30 = i32;
                                                i30 -= i29;
                                                if (bFld)
                                                    continue;
                                                i32 *= (int) -1.200F;
                                                i30 -= -204;
                                                i27 = i30;
                                        }
                                    } else {
                                        Test.instanceCount = i29;
                                    }
                                    break;
                                case 101:
                                    i27 += (((i31 * Test.byFld) + Test.instanceCount) - i27);
                                case 113:
                                    lArrFld[i31 - 1] >>= Test.sFld;
                                    break;
                                case 96:
                                    i27 -= i30;
                                case 100:
                                    Test.instanceCount *= i30;
                                    break;
                                default:
                                    Test.fFld -= i27;
                            }
                            break;
                        default:
                            Test.fFld /= (Test.instanceCount | 1);
                    }
                }
            }
        }
        FuzzerUtils.out.println("f i27 i28 = " + Float.floatToIntBits(f) + "," + i27 + "," + i28);
        FuzzerUtils.out.println("d3 i29 i30 = " + Double.doubleToLongBits(d3) + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 fArr = " + i31 + "," + i32 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.byFld iFld bFld = " + Test.byFld + "," + iFld + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("iArrFld lArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
