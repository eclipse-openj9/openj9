// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -6803228466963076256L;

    public static int iFld = 248;

    public static double dFld = -1.15893;

    public static boolean bFld = false;

    public static short sFld = -23072;

    public static int iFld1 = -219;

    public static double[][] dArrFld = new double[N][N];

    public static int[][] iArrFld = new int[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, -62.73813);
        FuzzerUtils.init(Test.iArrFld, 15522);
    }

    public static long lMeth_check_sum = 0;

    public static long bMeth_check_sum = 0;

    public static long lMeth1_check_sum = 0;

    public static long lMeth1(int i3, int i4) {
        if (ax$0) {
            try {
                java.lang.String[] ax$2 = { "com..net", "com..", ".com", ".com." };
                for (int ax$1 = 0; ax$1 < ax$2.length; ax$1++) {
                    try {
                        Charset.forName(ax$2[ax$1]);
                    } catch (IllegalCharsetNameException x) {
                        // expected
                    }
                    try {
                        Charset.isSupported(ax$2[ax$1]);
                    } catch (IllegalCharsetNameException x) {
                        // expected
                    }
                }
            } catch (Throwable ax$3) {
            } finally {
            }
            return 3585166578360594171L;
        }
        float f2 = -2.82F, f4 = -77.519F;
        long l = 192L, l1 = -1450140870L, l2 = 34228L;
        short s = -12050, sArr[][] = new short[N][N];
        int i5 = -164, i6 = 0, i7 = 4, i8 = 53, iArr2[] = new int[N];
        byte by = -76, byArr[] = new byte[N];
        FuzzerUtils.init(iArr2, 56862);
        FuzzerUtils.init(byArr, (byte) -109);
        FuzzerUtils.init(sArr, (short) 15370);
        f2 = 1;
        do {
            l = 1;
            do {
                float f3 = -72.299F;
                iArr2[(int) (l - 1)] = (int) Test.instanceCount;
                i3 >>= i4;
                byArr[(int) (l - 1)] = (byte) Test.instanceCount;
                Test.instanceCount *= i4;
                i3 -= (int) Test.dFld;
                i3 = i4;
                f3 *= i3;
                Test.iFld = (int) Test.instanceCount;
                s = (short) i3;
                try {
                    i3 = (1905672782 / Test.iFld);
                    iArr2[(i3 >>> 1) % N] = (-46950 / i3);
                    i3 = (Test.iFld / -107);
                } catch (ArithmeticException a_e) {
                }
                l1 += (10 + (l * l));
                i4 += (int) Test.dFld;
            } while (++l < 7);
            l1 += (long) (f2 + Test.iFld);
        } while (++f2 < 81);
        if (Test.bFld) {
            i3 = i4;
            if (Test.bFld) {
                f4 = l1;
                l2 = 1;
                do {
                    for (i5 = (int) (l2); i5 < 3; i5++) {
                        Test.iFld += (i5 ^ l2);
                        switch((((i5 >>> 1) % 8) * 5) + 113) {
                            case 143:
                                for (i7 = 1; 1 > i7; ++i7) {
                                    l1 -= -10;
                                    i6 += i7;
                                    Test.dFld -= Test.iFld;
                                    by *= (byte) Test.instanceCount;
                                    if (Test.bFld)
                                        break;
                                    Test.iFld += (int) (5315249372868168043L + (i7 * i7));
                                    Test.iFld = i3;
                                }
                                i8 <<= (int) l1;
                                i8 -= i5;
                                Test.instanceCount = -73L;
                                Test.iFld += i3;
                                f4 -= 3;
                                if (Test.bFld)
                                    continue;
                                break;
                            case 132:
                                i3 = i8;
                                break;
                            case 117:
                                sArr[(int) (l2 + 1)][(int) (l2)] = (short) Test.instanceCount;
                                break;
                            case 118:
                                sArr[(int) (l2 + 1)][(int) (l2 + 1)] = (short) i5;
                                break;
                            case 131:
                                Test.dArrFld[i5 - 1][i5 - 1] -= 39552181L;
                            case 124:
                                i3 -= s;
                                break;
                            case 133:
                            case 141:
                                i6 *= (int) f4;
                                break;
                        }
                    }
                } while (++l2 < 218);
            } else {
                Test.iFld = -7903;
            }
        } else {
            i8 -= i6;
        }
        long meth_res = i3 + i4 + Float.floatToIntBits(f2) + l + s + l1 + Float.floatToIntBits(f4) + l2 + i5 + i6 + i7 + i8 + by + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr);
        lMeth1_check_sum += meth_res;
        return (long) meth_res;
    }

    public static boolean bMeth(int i1) {
        if (ax$9) {
            int ax$11 = i1;
            try {
                byte ax$10 = (byte) 0xFFFFFFFF;
                if ((byte) i1 != ax$10)
                    ;
            } catch (Throwable ax$12) {
            } finally {
                i1 = ax$11;
            }
            return false;
        }
        float f = -79.989F, f1 = 0.416F;
        int i2 = 10183, i9 = -26796, i10 = -9, i11 = 41366, iArr[][] = new int[N][N], iArr1[][] = new int[N][N];
        long l3 = -2371113108261700454L;
        byte by1 = 9, byArr1[] = new byte[N];
        double[][] dArr = new double[N][N];
        FuzzerUtils.init(dArr, 0.84666);
        FuzzerUtils.init(iArr, 1752);
        FuzzerUtils.init(iArr1, -54);
        FuzzerUtils.init(byArr1, (byte) -7);
        for (f = 3; 149 > f; f++) {
            dArr[(int) (f)][(int) (f - 1)] %= ((--Test.instanceCount) | 1);
            i1 += (int) (i2 * ((f + f) - (++f1)));
            Test.iFld += (int) f;
            iArr[(int) (f - 1)][(int) (f + 1)] *= (iArr[(int) (f)][(int) (f)]--);
            iArr1[(int) (f - 1)][(int) (f)] -= (int) Test.instanceCount;
            Test.iFld = (int) ((lMeth1(-6, Test.iFld) - f1) + Test.iFld);
            for (l3 = (long) (f); l3 < 4; l3++) {
                Test.instanceCount += 7;
                i9 += (int) (((l3 * Test.iFld) + Test.iFld) - i1);
                if (Test.bFld)
                    break;
                switch((int) ((l3 % 1) + 107)) {
                    case 107:
                        Test.instanceCount += l3;
                        Test.instanceCount = 958751127L;
                        iArr1[(int) (f + 1)] = iArr[(int) (f - 1)];
                        f1 += (((l3 * i9) + i9) - Test.iFld);
                        i2 |= (int) l3;
                        Test.instanceCount = Test.instanceCount;
                        i2 += i9;
                        byArr1[(int) (f)] -= (byte) i2;
                        i2 -= -35849;
                }
                by1 = (byte) i2;
                for (i10 = 1; i10 < 1; ++i10) {
                    switch((((-51378 >>> 1) % 5) * 5) + 6) {
                        case 15:
                            Test.iFld = by1;
                            switch((i10 % 6) + 95) {
                                case 95:
                                    Test.instanceCount = -4;
                                    iArr[i10 + 1][(i9 >>> 1) % N] -= 247;
                                    Test.bFld = Test.bFld;
                                case 96:
                                    Test.instanceCount *= i2;
                                    if (i10 != 0) {
                                        return ((int) (i1 + Float.floatToIntBits(f) + i2 + Float.floatToIntBits(f1) + l3 + i9 + by1 + i10 + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr1))) % 2 > 0;
                                    }
                                    Test.iFld += (int) f1;
                                    iArr1[(int) (f)] = FuzzerUtils.int1array(N, (int) -19589);
                                case 97:
                                    if (Test.bFld)
                                        break;
                                    Test.instanceCount += (((i10 * Test.iFld) + i11) - i10);
                                    f1 = l3;
                                    Test.instanceCount = i10;
                                case 98:
                                    Test.instanceCount += i10;
                                    break;
                                case 99:
                                    try {
                                        i11 = (i1 / i11);
                                        i9 = (i1 % -35643);
                                        iArr[(int) (f)][(int) (f - 1)] = (iArr1[i10 + 1][(int) (l3 + 1)] % i1);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    break;
                                case 100:
                                    by1 = (byte) l3;
                                    break;
                                default:
                                    iArr[(int) (l3)] = FuzzerUtils.int1array(N, (int) -20497);
                            }
                            break;
                        case 25:
                            Test.instanceCount = l3;
                            break;
                        case 7:
                            Test.sFld = (short) i1;
                            break;
                        case 10:
                            iArr1[(int) (f + 1)][i10 + 1] >>= (int) 7200470905444382868L;
                            break;
                        case 23:
                            iArr[(int) (f - 1)] = iArr[i10 + 1];
                            break;
                    }
                }
            }
        }
        long meth_res = i1 + Float.floatToIntBits(f) + i2 + Float.floatToIntBits(f1) + l3 + i9 + by1 + i10 + i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public long lMeth() {
        if (ax$18) {
            try {
                int ax$21 = 0x7007;
                int[] ax$19 = { 7 };
                // Check results
                for (int ax$20 = 0; ax$20 < ax$21; ax$20++) if (ax$19[ax$20] != ax$20)
                    ;
            } catch (Throwable ax$22) {
            } finally {
            }
            return 906930085935247281L;
        }
        boolean b = false;
        int i12 = -10, i13 = 54938, i14 = -13, i15 = -9972, i16 = 48134, i17 = -217, iArr3[][] = new int[N][N];
        long l4 = 156L, lArr[] = new long[N];
        float f5 = -1.705F, fArr[] = new float[N];
        byte by2 = 19, byArr2[] = new byte[N];
        FuzzerUtils.init(lArr, 57189L);
        FuzzerUtils.init(fArr, 103.893F);
        FuzzerUtils.init(byArr2, (byte) -33);
        FuzzerUtils.init(iArr3, -6);
        b = (b && (b = bMeth(Test.iFld)));
        for (i12 = 4; i12 < 130; i12++) {
            i13 *= (int) Test.dFld;
            for (l4 = 1; l4 < 4; ++l4) {
                Test.instanceCount = i13;
                i13 = Test.iFld;
                f5 = (float) Test.dFld;
                switch((int) ((l4 % 1) + 24)) {
                    case 24:
                        i14 += (int) l4;
                        for (i15 = 1; i15 < 2; i15++) {
                            Test.iFld += (i15 * i15);
                            i13 = 4;
                            lArr[i12] *= (long) Test.dFld;
                            i14 <<= i14;
                            i13 -= (int) Test.instanceCount;
                        }
                        break;
                    default:
                        i14 += (int) Test.dFld;
                        fArr[(int) (l4 + 1)] /= -108L;
                        i16 += 57091;
                        i17 = 2;
                        do {
                            Test.iFld1 += by2;
                            i16 = i13;
                            Test.iFld1 += i17;
                            switch(((i13 >>> 1) % 4) + 44) {
                                case 44:
                                    f5 = l4;
                                    i13 = i17;
                                    Test.iFld -= (int) f5;
                                    break;
                                case 45:
                                    Test.iFld1 -= (int) f5;
                                    Test.bFld = true;
                                    break;
                                case 46:
                                    Test.instanceCount += (i17 * i17);
                                    switch(((i12 % 4) * 5) + 98) {
                                        case 109:
                                            i16 = (int) 1397801706L;
                                            Test.dFld += Test.iFld1;
                                            Test.dFld -= i17;
                                            f5 = i15;
                                            byArr2[(int) (l4)] -= (byte) Test.iFld1;
                                            iArr3[i17 + 1][i12] -= (int) Test.instanceCount;
                                            fArr[i12 + 1] = 0.572F;
                                            break;
                                        case 105:
                                            i13 -= (int) 64511L;
                                            break;
                                        case 101:
                                            i14 >>>= i14;
                                        case 100:
                                            i16 += (((i17 * f5) + Test.instanceCount) - i12);
                                        default:
                                            Test.instanceCount >>>= 59L;
                                    }
                                    break;
                                case 47:
                                    i13 += -98;
                                    break;
                                default:
                                    i13 += (int) f5;
                            }
                        } while (--i17 > 0);
                }
            }
        }
        long meth_res = (b ? 1 : 0) + i12 + i13 + l4 + i14 + Float.floatToIntBits(f5) + i15 + i16 + i17 + by2 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(byArr2) + FuzzerUtils.checkSum(iArr3);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = 153, i18 = 62, i19 = -12, i20 = -51666, i21 = -179, i22 = 22592, i23 = -10782, i24 = -37, i25 = -16, i26 = -6631, i27 = 203, i28 = 55219, i29 = 4, iArr4[] = new int[N];
        byte by3 = 115, byArr3[] = new byte[N];
        float f6 = -52.15F, fArr1[] = new float[N];
        long[] lArr1 = new long[N];
        FuzzerUtils.init(lArr1, 3L);
        FuzzerUtils.init(byArr3, (byte) -60);
        FuzzerUtils.init(iArr4, 62639);
        FuzzerUtils.init(fArr1, 2.677F);
        i = 1;
        do {
            {
                java.io.PrintStream ax$25 = System.out;
                java.io.PrintStream ax$26 = System.err;
                java.io.PrintStream ax$27 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$27);
                System.setErr(ax$27);
                try {
                    ax$18 = true;
                    for (int ax$23 = 0; ax$23 < 9987; ax$23 += 1) lMeth();
                } catch (java.lang.Throwable ax$24) {
                } finally {
                    ax$18 = false;
                }
                System.setOut(ax$25);
                System.setErr(ax$26);
            }
            lMeth();
            Test.iFld += i;
        } while (++i < 118);
        lArr1[(-52297 >>> 1) % N] = (long) Test.dFld;
        for (i18 = 2; i18 < 226; ++i18) {
            Test.iFld1 -= Test.sFld;
            for (i20 = 23; i20 > 1; i20 -= 2) {
                Test.iArrFld[i20 + 1][i18 + 1] >>= Test.iFld1;
            }
            for (i22 = 23; i18 < i22; i22 -= 3) {
                for (i24 = 1; i24 < 1; ++i24) {
                    switch(((Test.iFld >>> 1) % 1) + 48) {
                        case 48:
                            if (Test.bFld)
                                continue;
                            i21 += (int) Test.instanceCount;
                            by3 = (byte) -2;
                            Test.iArrFld[i22][i24 + 1] >>>= i25;
                    }
                    i19 += i24;
                    Test.iArrFld[i18 - 1][i18] = -186;
                }
                i25 = i21;
                Test.bFld = Test.bFld;
                switch((i22 % 5) + 65) {
                    case 65:
                        i25 += i22;
                        for (i26 = 1; i26 < 1; i26++) {
                            if (Test.bFld)
                                break;
                            i19 %= (int) 142L;
                            i23 >>= -250;
                            Test.instanceCount = i19;
                            if (Test.bFld)
                                break;
                            i23 = (int) Test.dFld;
                            i25 = (int) Test.instanceCount;
                            byArr3[i18] -= (byte) Test.instanceCount;
                            switch(((i26 >>> 1) % 2) + 33) {
                                case 33:
                                    f6 = 135;
                                    i25 = (int) Test.instanceCount;
                                    iArr4[i26 + 1] >>>= -27075;
                                    break;
                                case 34:
                                    if (Test.bFld)
                                        continue;
                                    Test.instanceCount >>= -5634;
                                    lArr1[i26 - 1] = (long) f6;
                                    Test.iArrFld[i26][i26 - 1] = 60;
                                    if (true)
                                        break;
                                    i21 += (i26 * i26);
                                    i27 -= (int) -1.179F;
                                    break;
                                default:
                                    Test.instanceCount >>= 2;
                                    Test.instanceCount *= by3;
                                    Test.instanceCount += i23;
                                    i27 *= (int) Test.instanceCount;
                            }
                            Test.instanceCount = i23;
                            i23 += (i26 ^ Test.instanceCount);
                            Test.iFld /= (int) (i25 | 1);
                            Test.iFld = -39984;
                            iArr4[i26 + 1] *= (int) -68.462F;
                            try {
                                i23 = (i26 % i);
                                i21 = (683091031 % iArr4[i18 - 1]);
                                i19 = (i22 / i);
                            } catch (ArithmeticException a_e) {
                            }
                        }
                        if (Test.bFld) {
                            for (i28 = 1; i28 < 1; ++i28) {
                                f6 -= Test.instanceCount;
                                lArr1[i28 + 1] ^= 2;
                                Test.instanceCount += i28;
                                switch((i18 % 3) + 102) {
                                    case 102:
                                        Test.instanceCount += i27;
                                        i27 += (-1287 + (i28 * i28));
                                        i19 = i28;
                                        i25 += -146;
                                        f6 *= Test.iFld1;
                                        Test.iFld1 = (int) Test.instanceCount;
                                        lArr1[i28 + 1] -= i21;
                                        switch((i18 % 1) + 26) {
                                            case 26:
                                            default:
                                                i19 *= (int) 418395173L;
                                                Test.iFld += (i28 * Test.sFld);
                                                i27 += (int) (2.108F + (i28 * i28));
                                                i29 -= (int) Test.dFld;
                                                Test.instanceCount += 9;
                                                lArr1[i22 + 1] -= (long) f6;
                                                Test.iFld += i;
                                                if (true)
                                                    continue;
                                                by3 = (byte) i22;
                                                fArr1[i18 + 1] -= Test.iFld;
                                        }
                                    case 103:
                                        Test.instanceCount += Test.instanceCount;
                                    case 104:
                                        if (Test.bFld)
                                            continue;
                                }
                            }
                        } else if (Test.bFld) {
                            Test.bFld = Test.bFld;
                        } else {
                            i27 <<= (int) -2509331747L;
                        }
                        break;
                    case 66:
                        Test.dFld = f6;
                    case 67:
                        Test.iFld1 -= i27;
                    case 68:
                        lArr1[i22] >>= Test.instanceCount;
                    case 69:
                        Test.sFld += (short) f6;
                        break;
                    default:
                        byArr3[i18 - 1] += (byte) Test.iFld;
                }
            }
        }
        FuzzerUtils.out.println("i i18 i19 = " + i + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("by3 i26 i27 = " + by3 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("f6 i28 i29 = " + Float.floatToIntBits(f6) + "," + i28 + "," + i29);
        FuzzerUtils.out.println("lArr1 byArr3 iArr4 = " + FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(byArr3) + "," + FuzzerUtils.checkSum(iArr4));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.sFld Test.iFld1 = " + (Test.bFld ? 1 : 0) + "," + Test.sFld + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.dArrFld Test.iArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$9 = false;

    private static Boolean ax$18 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  lMeth ->  lMeth mainTest
// DEBUG  bMeth ->  bMeth lMeth mainTest
// DEBUG  lMeth1 ->  lMeth1 bMeth lMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
