// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -199L;

    public volatile int iFld = -4;

    public boolean bFld = true;

    public static int iFld1 = -1;

    public static float fFld = 0.210F;

    public static short sFld = -12782;

    public static boolean bFld1 = true;

    public static double dFld = -1.51615;

    public static int iFld2 = 122;

    public static int[] iArrFld = new int[N];

    public boolean[] bArrFld = new boolean[N];

    public double[] dArrFld = new double[N];

    public static volatile short[] sArrFld = new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13);
        FuzzerUtils.init(Test.sArrFld, (short) -28187);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {
        int i6 = -38622, i7 = -48368, i8 = 51, i9 = 196, i10 = -37390, i11 = 55, i12 = 45, i13 = 7, i14 = -1, i15 = -129, i16 = -21093;
        byte by1 = 2;
        float[] fArr = new float[N];
        long[] lArr = new long[N];
        FuzzerUtils.init(fArr, 74.38F);
        FuzzerUtils.init(lArr, 93L);
        Test.fFld -= Test.iFld1;
        i6 = 1;
        do {
            switch(((i6 % 2) * 5) + 110) {
                case 116:
                    for (i7 = 3; i7 > 1; --i7) {
                        for (i9 = i6; 2 > i9; ++i9) {
                            Test.sFld = (short) Test.iFld1;
                            Test.instanceCount = i7;
                            Test.iFld1 += (i9 - i10);
                        }
                        Test.instanceCount += i7;
                        if (Test.bFld1)
                            break;
                        i10 += (int) Test.fFld;
                        Test.iArrFld[i7 + 1] = (int) Test.instanceCount;
                    }
                    Test.fFld = i8;
                    Test.fFld = (float) 2.18221;
                    for (i11 = 1; i11 < 3; i11++) {
                        Test.instanceCount = (long) Test.fFld;
                        try {
                            i12 = (i10 / Test.iArrFld[i11 - 1]);
                            i12 = (Test.iFld1 % i12);
                            i8 = (i6 % Test.iArrFld[i11]);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.iFld1 = i10;
                        Test.instanceCount &= i12;
                        for (i13 = i6; i13 < 2; ++i13) {
                            i8 += (int) Test.instanceCount;
                            i12 += (5 + (i13 * i13));
                            i12 += -4;
                            i10 += (int) -6080400674028882235L;
                            fArr = fArr;
                        }
                        i12 += i11;
                        Test.iArrFld[i6] &= 10784;
                        Test.iArrFld[i11] = (int) Test.fFld;
                        for (i15 = 1; i15 < 2; i15 += 3) {
                            lArr[i11 - 1] = 50;
                            i14 += (int) Test.instanceCount;
                            Test.iFld1 /= (int) (i6 | 1);
                            switch(((i15 % 6) * 5) + 25) {
                                case 46:
                                    Test.iArrFld[i6 + 1] = 23273;
                                    Test.iArrFld[i15 + 1] += (int) Test.fFld;
                                    break;
                                case 55:
                                    Test.iFld1 *= i14;
                                    i12 = (int) Test.instanceCount;
                                    break;
                                case 37:
                                    Test.iArrFld[i6 - 1] ^= (int) Test.instanceCount;
                                case 38:
                                    i8 -= by1;
                                    break;
                                case 39:
                                    if (true)
                                        continue;
                                    break;
                                case 30:
                                    i8 -= i13;
                                    break;
                            }
                        }
                    }
                    break;
                case 112:
            }
        } while (++i6 < 220);
        vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i5, long l) {
        int i18 = 43760, i19 = -11, i20 = -8, i21 = -62003, i23 = 63, i24 = -11;
        double d = 8.27812;
        long l1 = 4035812915L, lArr1[] = new long[N];
        short[] sArr = new short[N];
        float[] fArr1 = new float[N];
        FuzzerUtils.init(lArr1, -2621583599L);
        FuzzerUtils.init(sArr, (short) 12888);
        FuzzerUtils.init(fArr1, 0.12F);
        vMeth1();
        for (int i17 : Test.iArrFld) {
            i5 -= i5;
            Test.iArrFld[(Test.iFld1 >>> 1) % N] += (int) l;
            if (Test.bFld1) {
                for (i18 = 1; i18 < 2; ++i18) {
                    Test.fFld *= Test.instanceCount;
                    for (i20 = 1; i20 < 2; ++i20) {
                        int i22 = 14;
                        l += (i20 * i20);
                        i21 += (int) (-4698618044147193657L + (i20 * i20));
                        i21 = i21;
                        i21 <<= i5;
                        i21 += (i20 * Test.instanceCount);
                        i17 += (((i20 * l) + i20) - Test.iFld1);
                        try {
                            i21 = (i18 % i5);
                            i17 = (-7 / Test.iArrFld[i20]);
                            i19 = (91 / i18);
                        } catch (ArithmeticException a_e) {
                        }
                        i19 += i20;
                        Test.iArrFld[i20 - 1] = (int) Test.instanceCount;
                        Test.instanceCount = l;
                        i17 += (i20 * i20);
                        i19 -= i22;
                        lArr1[i20 + 1] = Test.instanceCount;
                        i19 *= i5;
                        i21 -= 14718;
                    }
                    l = Test.sFld;
                    lArr1[i18 - 1] += i20;
                    i5 += (int) Test.fFld;
                    d -= i5;
                    Test.iFld1 -= i18;
                    lArr1[i18 - 1] -= i21;
                    Test.iArrFld[i18 + 1] -= 41012;
                }
                i21 -= (int) Test.instanceCount;
                sArr[(i17 >>> 1) % N] *= (short) i5;
                fArr1[(-10 >>> 1) % N] %= (l | 1);
                for (i23 = 1; i23 < 2; i23++) {
                    Test.iArrFld[i23 - 1] = i18;
                    i5 += (((i23 * Test.fFld) + Test.instanceCount) - i17);
                    i24 = (int) l1;
                }
            } else if (Test.bFld1) {
                i19 |= (int) Test.instanceCount;
            }
        }
        vMeth_check_sum += i5 + l + i18 + i19 + i20 + i21 + Double.doubleToLongBits(d) + i23 + i24 + l1 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static int iMeth(float f, int i1, int i2) {
        byte by = -112, byArr[] = new byte[N];
        int i3 = 49393, i4 = -195, i25 = 9628, i26 = -4, i27 = 1208, i28 = 9, i29 = 103, i30 = 0, i31 = -4, i32 = -182;
        double d1 = 35.107548;
        FuzzerUtils.init(byArr, (byte) 123);
        i1 += Integer.reverseBytes(i1 += (i1 + by));
        for (i3 = 6; i3 < 163; i3 += 2) {
            switch((i3 % 1) + 60) {
                case 60:
                    Test.iFld1 <<= (-Test.iArrFld[i3]);
                    vMeth(114, Test.instanceCount);
                    Test.instanceCount = i3;
                    Test.iFld1 *= (int) Test.instanceCount;
                    i1 *= (int) Test.instanceCount;
                    d1 = 7;
                    while (--d1 > 0) {
                        i1 += i4;
                        i1 = i1;
                        for (i25 = 1; i25 < 1; i25++) {
                            i1 += (((i25 * i3) + Test.sFld) - Test.fFld);
                            i26 = (int) Test.instanceCount;
                            i2 += (i25 | (long) f);
                            Test.dFld *= Test.instanceCount;
                        }
                        for (i27 = (int) (d1); i27 < 1; ++i27) {
                            if (Test.bFld1)
                                break;
                            Test.instanceCount *= Test.instanceCount;
                            i2 += i27;
                            i2 -= 193;
                            Test.instanceCount >>= Test.instanceCount;
                            Test.dFld *= f;
                        }
                    }
                    switch(((i3 % 2) * 5) + 81) {
                        case 82:
                            byArr = byArr;
                            i2 = (int) -1388112523L;
                            for (i29 = 1; 7 > i29; i29++) {
                                i28 = (int) 59L;
                                Test.iArrFld[i3] = by;
                                i4 &= i1;
                                for (i31 = 1; i31 < 2; i31++) {
                                    i32 *= (int) Test.instanceCount;
                                    Test.bFld1 = Test.bFld1;
                                    f = (float) d1;
                                    if (Test.bFld1)
                                        break;
                                    Test.instanceCount <<= Test.instanceCount;
                                    by -= (byte) i2;
                                }
                            }
                        case 89:
                            Test.iArrFld[i3 - 1] += i27;
                            break;
                        default:
                            i2 >>= i32;
                    }
                    break;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + i2 + by + i3 + i4 + Double.doubleToLongBits(d1) + i25 + i26 + i27 + i28 + i29 + i30 + i31 + i32 + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = 37909, i33 = 9200, i34 = 61381, i35 = 29958, i36 = -60097, i37 = 36568, i38 = 222, i39 = -239, i40 = 8, i41 = -157, i42 = -11, i43 = -98;
        byte by2 = 121, byArr1[] = new byte[N];
        long[] lArr2 = new long[N];
        float[] fArr2 = new float[N];
        FuzzerUtils.init(lArr2, 41232L);
        FuzzerUtils.init(byArr1, (byte) 46);
        FuzzerUtils.init(fArr2, -103.888F);
        i = 1;
        while (++i < 125) {
            boolean b = true;
            if (bArrFld[i] = (bFld == ((iFld > -163) || (-249 != iMeth(-91.317F, i, iFld))))) {
                iFld = iFld;
                Test.iArrFld = (Test.iArrFld = Test.iArrFld);
            }
            switch((i % 6) + 83) {
                case 83:
                    iFld += iFld;
                    lArr2[i] += Test.iFld1;
                    for (i33 = 2; i33 < 41; i33++) {
                        iFld = (int) Test.fFld;
                        Test.iFld1 += i33;
                        i34 -= i;
                        by2 = (byte) Test.instanceCount;
                        for (i35 = i; i35 < 2; ++i35) {
                            i34 = i;
                            Test.sFld /= (short) (i36 | 1);
                            if (Test.bFld1)
                                continue;
                            iFld &= iFld;
                            Test.iFld2 = (int) Test.instanceCount;
                            try {
                                Test.iArrFld[i - 1] = (iFld / -65168);
                                Test.iArrFld[i - 1] = (Test.iArrFld[i33 - 1] / i33);
                                iFld = (i33 / -5371);
                            } catch (ArithmeticException a_e) {
                            }
                        }
                        Test.iFld1 *= i36;
                        i37 = 2;
                        do {
                            Test.iArrFld[i + 1] >>= i33;
                            iFld += Test.iFld2;
                            i36 = (int) -3047024135396251043L;
                            Test.iFld2 /= (int) (Test.sFld | 1);
                            if (Test.bFld1)
                                break;
                            Test.iFld1 -= (int) Test.instanceCount;
                            Test.instanceCount += (i37 - Test.instanceCount);
                            Test.iFld1 >>= iFld;
                            Test.instanceCount += (-21947 + (i37 * i37));
                            Test.instanceCount = i37;
                            Test.iArrFld = Test.iArrFld;
                        } while (--i37 > 0);
                    }
                    break;
                case 84:
                case 85:
                    iFld <<= (int) -123L;
                    i38 = 1;
                    do {
                        for (i39 = 1; 1 > i39; i39++) {
                            Test.iArrFld[i] = (int) Test.dFld;
                            i40 = (int) Test.fFld;
                            bFld = Test.bFld1;
                            if (Test.bFld1)
                                break;
                            Test.instanceCount = i34;
                            i36 = iFld;
                            if (Test.bFld1)
                                continue;
                            Test.iFld2 = i35;
                            Test.iFld2 = Test.iFld1;
                            iFld >>= i;
                            Test.instanceCount = Test.instanceCount;
                            Test.instanceCount = Test.instanceCount;
                            i34 += i39;
                        }
                        Test.instanceCount -= (long) Test.dFld;
                        Test.fFld -= i36;
                        i40 = iFld;
                        i34 *= 25257;
                        dArrFld[i] = i39;
                        byArr1[i38 + 1] |= (byte) iFld;
                        for (i41 = 1; i41 < 1; ++i41) {
                            try {
                                Test.iArrFld[i41 + 1] = (Test.iArrFld[i] / i41);
                                iFld = (i % -254);
                                i36 = (Test.iFld2 / i38);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.iFld2 -= i41;
                            iFld >>>= i39;
                            Test.iArrFld[i41 + 1] += Test.iFld2;
                            i43 = i40;
                            try {
                                Test.iArrFld[i] = (Test.iFld2 / i33);
                                i43 = (i43 % 44);
                                Test.iFld1 = (Test.iArrFld[i38 - 1] % i41);
                            } catch (ArithmeticException a_e) {
                            }
                            if (true)
                                break;
                            try {
                                i34 = (-1862617073 / i43);
                                i34 = (i34 % i40);
                                i42 = (199614068 / i36);
                            } catch (ArithmeticException a_e) {
                            }
                            iFld = i38;
                            fArr2[i38 + 1] -= Test.fFld;
                            Test.fFld -= Test.instanceCount;
                            Test.iArrFld[i - 1] = i38;
                            if (Test.bFld1)
                                continue;
                            if (Test.bFld1)
                                continue;
                        }
                        Test.iFld2 <<= Test.iFld2;
                        Test.fFld += (((i38 * Test.instanceCount) + Test.sFld) - iFld);
                    } while (++i38 < 41);
                    fArr2[i] += i35;
                    if (bFld)
                        break;
                    bArrFld[i] = b;
                    Test.iArrFld = Test.iArrFld;
                    break;
                case 86:
                    Test.iFld2 += i;
                case 87:
                    Test.sArrFld[i + 1] = (short) Test.instanceCount;
                    break;
                case 88:
                default:
                    Test.fFld += (((i * Test.instanceCount) + Test.iFld1) - i39);
            }
            {
                java.io.PrintStream ax$377 = System.out;
                java.io.PrintStream ax$378 = System.err;
                java.io.PrintStream ax$379 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$379);
                System.setErr(ax$379);
                try {
                    for (int ax$375 = -2647; ax$375 < 3078; ax$375 += 1) {
                        long ax$372 = vMeth_check_sum;
                        long ax$373 = vMeth1_check_sum;
                        try {
                            if (vMeth_check_sum != vMeth1_check_sum)
                                ;
                        } catch (Throwable ax$374) {
                        } finally {
                            vMeth_check_sum = ax$372;
                            vMeth1_check_sum = ax$373;
                        }
                    }
                } catch (Throwable ax$376) {
                }
                System.setOut(ax$377);
                System.setErr(ax$378);
            }
        }
        FuzzerUtils.out.println("i i33 i34 = " + i + "," + i33 + "," + i34);
        FuzzerUtils.out.println("by2 i35 i36 = " + by2 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 i38 i39 = " + i37 + "," + i38 + "," + i39);
        FuzzerUtils.out.println("i40 i41 i42 = " + i40 + "," + i41 + "," + i42);
        FuzzerUtils.out.println("i43 lArr2 byArr1 = " + i43 + "," + FuzzerUtils.checkSum(lArr2) + "," + FuzzerUtils.checkSum(byArr1));
        FuzzerUtils.out.println("fArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));
        FuzzerUtils.out.println("Test.instanceCount iFld bFld = " + Test.instanceCount + "," + iFld + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld1 Test.fFld Test.sFld = " + Test.iFld1 + "," + Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld1 Test.dFld Test.iFld2 = " + (Test.bFld1 ? 1 : 0) + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld2);
        FuzzerUtils.out.println("Test.iArrFld bArrFld dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(bArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("Test.sArrFld = " + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        {
            java.io.PrintStream ax$380 = System.out;
            java.io.PrintStream ax$381 = System.err;
            java.io.PrintStream ax$382 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$382);
            System.setErr(ax$382);
            {
                boolean ax$384 = false;
                for (int ax$383 = -4034; ax$383 < 3388; ax$383 += 3) {
                    if (!ax$384) {
                        ax$384 = true;
                        {
                            System.setOut(ax$380);
                            System.setErr(ax$381);
                            try {
                                Test _instance = new Test();
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                            } catch (Exception ex) {
                                FuzzerUtils.out.println(ex.getClass().getCanonicalName());
                            }
                            System.setOut(ax$382);
                            System.setErr(ax$382);
                        }
                    }
                }
            }
            System.setOut(ax$380);
            System.setErr(ax$381);
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
