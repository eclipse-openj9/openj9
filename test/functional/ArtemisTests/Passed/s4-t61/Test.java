// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.Map;
import java.util.Hashtable;
import java.math.BigInteger;
import java.lang.reflect.Array;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 2086806534L;

    public static int iFld = 232;

    public static byte byFld = -119;

    public static double dFld = 0.36171;

    public static boolean[] bArrFld = new boolean[N];

    public static float[] fArrFld = new float[N];

    public volatile int[] iArrFld = new int[N];

    public long[] lArrFld = new long[N];

    public volatile byte[] byArrFld = new byte[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.fArrFld, 1.185F);
    }

    public static long vMeth_check_sum = 0;

    public static long sMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, long l, float f) {
        int i3 = 218, i4 = -7, i5 = -128, i6 = 2, i7 = -242, i8 = 8, i9 = -62059, i10 = 52671, iArr[] = new int[N];
        double d1 = 82.70589;
        boolean b = false;
        byte by = -79;
        float[] fArr = new float[N];
        FuzzerUtils.init(iArr, -27815);
        FuzzerUtils.init(fArr, 2.92F);
        i2 += i2;
        for (i3 = 2; i3 < 85; i3++) {
            Test.instanceCount = i4;
            Test.instanceCount = -53742;
            l -= (long) f;
            i4 += i2;
        }
        l = i3;
        for (i5 = 214; i5 > 7; i5--) {
            for (i7 = 1; 3 > i7; i7++) {
                i4 = i6;
                for (i9 = i7; i9 < 2; ++i9) {
                    i4 >>= 8;
                    switch(((i10 >>> 1) % 3) + 81) {
                        case 81:
                            i8 = i2;
                            i8 += (i9 - Test.instanceCount);
                            i2 += -3;
                            i2 -= i7;
                            i4 >>= i7;
                            d1 -= i2;
                        case 82:
                            switch(((i9 % 6) * 5) + 123) {
                                case 141:
                                    Test.instanceCount |= Test.instanceCount;
                                    f += -34892;
                                    if (b) {
                                        i6 += i9;
                                    } else {
                                        i4 += i9;
                                        f -= (float) 2.76080;
                                        if (i8 != 0) {
                                            vMeth1_check_sum += i2 + l + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + (b ? 1 : 0) + by + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                            return;
                                        }
                                        Test.instanceCount >>>= i8;
                                        iArr[i9] = (int) 94.86189;
                                    }
                                    i4 = i8;
                                    i4 = i9;
                                    break;
                                case 132:
                                    l += (i9 + i2);
                                    break;
                                case 139:
                                    f *= i3;
                                    d1 -= 6;
                                    by -= (byte) i3;
                                    iArr[i9 - 1] -= i3;
                                    f = i7;
                                    break;
                                case 149:
                                    i2 += (i9 * i9);
                                    break;
                                case 151:
                                    i6 <<= i3;
                                    break;
                                case 148:
                                    fArr[i9] = i9;
                                    break;
                            }
                            break;
                        case 83:
                    }
                }
            }
        }
        {
            java.io.PrintStream ax$4 = System.out;
            java.io.PrintStream ax$5 = System.err;
            java.io.PrintStream ax$6 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$6);
            System.setErr(ax$6);
            try {
                for (int ax$2 = -2963; ax$2 < 4507; ax$2 += 1) {
                    try {
                        java.util.Map ax$0 = new Hashtable();
                        ax$0.put(3, 1);
                    } catch (Throwable ax$1) {
                    } finally {
                    }
                }
            } catch (Throwable ax$3) {
            }
            System.setOut(ax$4);
            System.setErr(ax$5);
        }
        vMeth1_check_sum += i2 + l + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + (b ? 1 : 0) + by + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static short sMeth() {
        float f1 = -38.820F, f2 = 12.649F, f3 = 2.216F;
        boolean b1 = true;
        int i11 = -14, i12 = 63074, i13 = 49, i14 = -6, i15 = 8, i16 = 139, i17 = 14, i18 = 3, iArr1[] = new int[N];
        short s = 2660;
        long[] lArr = new long[N];
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr1, 11559);
        FuzzerUtils.init(lArr, -5721423537036927951L);
        FuzzerUtils.init(dArr, -2.59495);
        vMeth1(Test.iFld, Test.instanceCount, f1);
        Test.instanceCount = Test.instanceCount;
        Test.iFld += -176;
        Test.bArrFld[(Test.iFld >>> 1) % N] = b1;
        for (f2 = 228; 11 < f2; f2 -= 2) {
            i11 = (int) -19641L;
            Test.byFld -= (byte) Test.instanceCount;
            iArr1[(int) (f2)] = 19917;
        }
        i12 = 1;
        do {
            i13 = 1;
            while (++i13 < 3) {
                i11 <<= 13;
                for (f3 = 1; f3 > 1; f3--) {
                    i14 += (int) (f3 * f3);
                    lArr[i13] <<= Test.instanceCount;
                    i11 += (int) f3;
                    Test.instanceCount -= 3;
                    Test.dFld *= f2;
                    i11 = -133;
                }
                Test.instanceCount += i11;
                for (i15 = 1; 1 > i15; i15++) {
                    byte by1 = 89;
                    Test.fArrFld = FuzzerUtils.float1array(N, (float) 2.3F);
                    i16 &= Test.iFld;
                    i14 <<= i14;
                    s = (short) i11;
                    Test.iFld = i12;
                    by1 >>= (byte) i16;
                }
                i16 |= i11;
                f1 *= i14;
                Test.dFld = i12;
                i11 /= (int) (Test.instanceCount | 1);
                f1 += Test.instanceCount;
                for (i17 = 1; i17 < 1; ++i17) {
                    f1 += (((i17 * i11) + Test.instanceCount) - i14);
                    iArr1[i17 + 1] = i16;
                    i18 = i11;
                    Test.instanceCount = i17;
                    dArr[i17 - 1] += -3941L;
                }
            }
        } while (++i12 < 173);
        long meth_res = Float.floatToIntBits(f1) + (b1 ? 1 : 0) + Float.floatToIntBits(f2) + i11 + i12 + i13 + Float.floatToIntBits(f3) + i14 + i15 + i16 + s + i17 + i18 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        sMeth_check_sum += meth_res;
        return (short) meth_res;
    }

    public static void vMeth(int i, int i1) {
        double d = -4.124855;
        long l1 = -38L, lArr1[] = new long[N];
        int i19 = 13, i20 = -118, i21 = -213, i22 = -33788, i23 = 8, iArr2[] = new int[N];
        float f4 = 0.453F, f5 = 16.780F;
        short s1 = 16579;
        boolean b2 = false;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(byArr, (byte) 101);
        FuzzerUtils.init(iArr2, -247);
        FuzzerUtils.init(lArr1, 135L);
        d += sMeth();
        for (l1 = 6; l1 < 161; l1++) {
            Test.iFld |= Test.iFld;
            for (f4 = 1; f4 < 4; f4++) {
                i19 = -244;
                Test.iFld >>= i;
                i |= Test.iFld;
                d += i1;
                byArr[(int) (f4 + 1)] -= (byte) i;
                s1 += (short) 39.93F;
                for (i21 = 2; i21 > 1; --i21) {
                    i19 += -63;
                    i1 = Test.iFld;
                    iArr2[(int) (l1 - 1)] = i20;
                    if (b2)
                        continue;
                    {
                        java.io.PrintStream ax$15 = System.out;
                        java.io.PrintStream ax$16 = System.err;
                        java.io.PrintStream ax$17 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$17);
                        System.setErr(ax$17);
                        try {
                            for (int ax$13 = -312; ax$13 < 8418; ax$13 += 1) {
                                try {
                                    boolean[] ax$10 = new boolean[576];
                                    int[] ax$11 = { 0x11, 0x22, 0x33, 0x44, 0x88, 0x99, 0xaa, 0xbb };
                                    java.math.BigInteger ax$8 = new BigInteger("00");
                                    for (int ax$9 = 0; ax$9 < ax$11.length; ax$9++) {
                                        boolean ax$7;
                                        if ((ax$7 = ax$8.isProbablePrime(ax$11[ax$9])) != ax$10[ax$9])
                                            ;
                                    }
                                } catch (Throwable ax$12) {
                                } finally {
                                }
                            }
                        } catch (Throwable ax$14) {
                        }
                        System.setOut(ax$15);
                        System.setErr(ax$16);
                    }
                    switch((int) (((l1 % 2) * 5) + 53)) {
                        case 56:
                            lArr1[i21 + 1] = Test.iFld;
                            i1 = (int) Test.instanceCount;
                            Test.instanceCount += Test.instanceCount;
                            i20 -= (int) l1;
                            f5 += Test.instanceCount;
                            i19 -= i1;
                            i19 += (i21 ^ i1);
                            i22 += i21;
                            Test.iFld += (int) -52.56810;
                            Test.instanceCount *= i22;
                            Test.dFld = i21;
                            d += Test.instanceCount;
                            i = -11517;
                            i19 += (((i21 * s1) + i22) - i1);
                        case 61:
                            i -= (int) 43.587F;
                            i23 &= i19;
                            try {
                                Test.iFld = (-51 % i);
                                i20 = (i21 % 10584);
                                Test.iFld = (i19 % i23);
                            } catch (ArithmeticException a_e) {
                            }
                            i20 <<= 28002;
                            i1 /= (int) (l1 | 1);
                            i1 = 93;
                            iArr2[(int) (l1 + 1)] -= (int) d;
                            break;
                    }
                }
            }
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + l1 + i19 + Float.floatToIntBits(f4) + i20 + s1 + i21 + i22 + (b2 ? 1 : 0) + Float.floatToIntBits(f5) + i23 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {
        if (ax$25) {
            try {
                long ax$856 = 8L;
                long ax$857 = 12L;
                if (ax$856 != ax$857)
                    ;
            } catch (Throwable ax$858) {
            } finally {
            }
            return;
        }
        int i24 = -16625, i25 = 22775, i26 = -13, i27 = -7, i28 = 9, i29 = 16793, i30 = 3, i31 = 35, i32 = 27, i33 = 50753, i34 = -6, i35 = -13, i36 = -9;
        float f6 = 27.756F;
        short s2 = -14113, sArr[] = new short[N];
        boolean b3 = false;
        double[] dArr1 = new double[N];
        FuzzerUtils.init(sArr, (short) 8079);
        FuzzerUtils.init(dArr1, 2.120095);
        vMeth(-249, Test.iFld);
        for (i24 = 4; i24 < 108; ++i24) {
            for (i26 = 3; i26 < 49; i26 += 3) {
                f6 -= 11L;
                i25 = (int) f6;
                f6 += i27;
                for (i28 = 4; i28 > 1; i28--) {
                    Test.iFld += (i28 ^ i28);
                    i25 += i28;
                    Test.instanceCount += i28;
                    f6 *= i27;
                    iArrFld[i24 + 1] -= 169;
                    if (b3) {
                        i25 |= i27;
                        iArrFld[i24 + 1] /= (int) (Test.instanceCount | 1);
                        Test.iFld += (((i28 * f6) + f6) - Test.byFld);
                        try {
                            Test.iFld = (Test.iFld / i28);
                            iArrFld[i24] = (iArrFld[i26 + 1] % -113);
                            iArrFld[(-57636 >>> 1) % N] = (iArrFld[(i26 >>> 1) % N] % i26);
                        } catch (ArithmeticException a_e) {
                        }
                        lArrFld = lArrFld;
                        i27 <<= -2;
                        if (b3) {
                            i27 += i27;
                            i27 >>= (int) Test.instanceCount;
                            sArr[i28] = (short) Test.instanceCount;
                            i25 += i24;
                            i25 += i28;
                            Test.instanceCount *= i24;
                            iArrFld[i24 + 1] -= i28;
                            s2 = (short) i26;
                            i27 += i28;
                            i29 += i24;
                        }
                        i29 = i26;
                        lArrFld[i28 + 1] -= i25;
                        dArr1[i28] = f6;
                        i27 |= i25;
                    }
                }
            }
        }
        lArrFld[(12867 >>> 1) % N] %= (Test.instanceCount | 1);
        b3 = b3;
        Test.iFld = (int) -72.399F;
        i27 -= i25;
        for (i30 = 183; 1 < i30; i30--) {
            if (b3) {
                if (false)
                    continue;
                Test.byFld *= (byte) Test.dFld;
                for (i32 = 1; i32 < 28; i32++) {
                    i31 += (i32 * Test.instanceCount);
                    Test.byFld += (byte) Test.instanceCount;
                    i33 += i32;
                    i31 += i32;
                    i34 = 1;
                    while (++i34 < 2) {
                        Test.fArrFld[i32] *= Test.instanceCount;
                        s2 = (short) f6;
                        i25 += (((i34 * f6) + i24) - i27);
                        Test.instanceCount += 21;
                        Test.fArrFld[i32] -= -122;
                    }
                    for (i35 = 1; i35 < 2; i35++) {
                        switch((i32 % 7) + 16) {
                            case 16:
                                iArrFld[i35] -= i31;
                                i36 += s2;
                                try {
                                    iArrFld[i35] = (31517 / i25);
                                    iArrFld[i35 + 1] = (178 / i32);
                                    i29 = (-22383 % i33);
                                } catch (ArithmeticException a_e) {
                                }
                                Test.instanceCount += (((i35 * i31) + i32) - i33);
                                switch(((i34 >>> 1) % 8) + 76) {
                                    case 76:
                                        i31 >>= (int) Test.instanceCount;
                                        Test.byFld += (byte) i31;
                                        byArrFld[i30 - 1] += (byte) i24;
                                        b3 = b3;
                                        iArrFld[i35 - 1] = i36;
                                        Test.instanceCount = Test.instanceCount;
                                        if (b3) {
                                            i27 -= (int) Test.instanceCount;
                                            i29 += (i35 + i31);
                                            Test.dFld = i25;
                                            iArrFld[i32 - 1] = (int) 62038L;
                                            Test.instanceCount -= (long) Test.dFld;
                                            i36 = i25;
                                            iArrFld[i32 - 1] <<= (int) Test.instanceCount;
                                            if (b3)
                                                continue;
                                        } else if (b3) {
                                            i25 += (int) Test.instanceCount;
                                        }
                                        break;
                                    case 77:
                                        if (b3)
                                            break;
                                        break;
                                    case 78:
                                        i29 >>= i32;
                                        break;
                                    case 79:
                                        iArrFld[i35] >>= i35;
                                    case 80:
                                        i27 += (i35 + Test.instanceCount);
                                        break;
                                    case 81:
                                        iArrFld[i30] += 184;
                                        break;
                                    case 82:
                                        i25 = 16255;
                                    case 83:
                                        Test.iFld += (7136 + (i35 * i35));
                                        break;
                                }
                                break;
                            case 17:
                            case 18:
                                i31 |= 27960;
                                break;
                            case 19:
                                Test.dFld -= i29;
                                break;
                            case 20:
                            case 21:
                                iArrFld[i32 + 1] = i27;
                                break;
                            case 22:
                                i29 *= 90;
                                break;
                        }
                    }
                }
            } else if (b3) {
                f6 += i25;
            }
        }
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 f6 i28 = " + i27 + "," + Float.floatToIntBits(f6) + "," + i28);
        FuzzerUtils.out.println("i29 s2 b3 = " + i29 + "," + s2 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 sArr dArr1 = " + i36 + "," + FuzzerUtils.checkSum(sArr) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld + "," + Test.byFld);
        FuzzerUtils.out.println("Test.dFld Test.bArrFld Test.fArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(Test.bArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iArrFld lArrFld byArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," + FuzzerUtils.checkSum(lArrFld) + "," + FuzzerUtils.checkSum(byArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
        {
            java.io.PrintStream ax$22 = System.out;
            java.io.PrintStream ax$23 = System.err;
            java.io.PrintStream ax$24 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$24);
            System.setErr(ax$24);
            try {
                for (int ax$20 = -2716; ax$20 < 6040; ax$20 += 1) {
                    try {
                        Object ax$18 = Array.newInstance(Number.class, 1);
                        ax$18 = Array.newInstance(Cloneable.class, 1);
                    } catch (Throwable ax$19) {
                    } finally {
                    }
                }
            } catch (Throwable ax$21) {
            }
            System.setOut(ax$22);
            System.setErr(ax$23);
        }
    }

    private static Boolean ax$25 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  sMeth ->  sMeth vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 sMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
