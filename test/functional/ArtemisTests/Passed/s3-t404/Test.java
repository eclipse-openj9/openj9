// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.SortedSet;
import java.util.Collections;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 36181L;

    public static int iFld = 53197;

    public volatile short sFld = 203;

    public static boolean bFld = true;

    public static int iFld1 = 781;

    public static float fFld = -1.1005F;

    public static volatile byte byFld = 110;

    public double dFld = 71.98467;

    public static int[] iArrFld = new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
    }

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, long l2) {
        int i1 = -177, i2 = -53711, i3 = 8, i4 = -3, i5 = 1, i6 = 193, i7 = 11920, i8 = 137, i9 = 66, i10 = -192, i11 = -24783, i12 = -3, i13 = 46, iArr1[] = new int[N];
        double d = -124.23442, dArr[] = new double[N];
        short s = -13844, sArr[] = new short[N];
        byte by = 115;
        long l3 = -7L, lArr[] = new long[N];
        float f = 1.532F, fArr[] = new float[N];
        FuzzerUtils.init(iArr1, 33534);
        FuzzerUtils.init(sArr, (short) 14078);
        FuzzerUtils.init(lArr, 35330L);
        FuzzerUtils.init(fArr, 122.852F);
        FuzzerUtils.init(dArr, 0.101200);
        Test.instanceCount += Test.iFld;
        l2 = Test.iFld;
        Test.iFld -= Test.iFld;
        l1 *= Test.instanceCount;
        for (i1 = 5; i1 < 80; i1++) {
            iArr1 = iArr1;
            i2 |= 0;
            i2 = i2;
            i2 = i1;
            d = d;
            for (i3 = 1; 7 > i3; ++i3) {
                l2 = -12;
                i4 -= i1;
            }
            i2 -= s;
            for (i5 = 1; i5 < 7; i5 += 3) {
                iArr1[i5 - 1] += -50328;
                sArr[i1 + 1] *= by;
            }
            {
                java.io.PrintStream ax$14 = System.out;
                java.io.PrintStream ax$15 = System.err;
                java.io.PrintStream ax$16 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$16);
                System.setErr(ax$16);
                try {
                    for (int ax$12 = -966; ax$12 < 4144; ax$12 += 1) {
                        try {
                            java.lang.String[] ax$9 = { "com..net", "com..", ".com", ".com." };
                            int ax$10 = 0x7fffffff;
                            java.lang.String ax$8 = "192.168.255.255";
                            if (!ax$8.equals(ax$9[ax$10])) {
                            }
                        } catch (Throwable ax$11) {
                        } finally {
                        }
                    }
                } catch (Throwable ax$13) {
                }
                System.setOut(ax$14);
                System.setErr(ax$15);
            }
            Test.iFld = i1;
            for (i7 = i1; 7 > i7; ++i7) {
                l2 += (i7 * i7);
                lArr[i7 + 1] &= 62038L;
                Test.iFld -= i2;
                i6 *= i2;
                Test.instanceCount += (-7 + (i7 * i7));
                by = (byte) d;
                lArr[i7 - 1] -= 7;
            }
            fArr[i1 - 1] *= Test.instanceCount;
        }
        for (i9 = 5; i9 < 86; ++i9) {
            for (l3 = 1; l3 < 7; ++l3) {
                lArr[i9 + 1] |= l1;
                Test.iFld += i8;
                f += (l3 - i4);
                f -= (float) d;
                for (i12 = 1; i12 < 2; ++i12) {
                    dArr[(int) (l3 + 1)] = i13;
                }
                i6 -= (int) -4L;
                i8 = (int) f;
            }
        }
        vMeth_check_sum += l1 + l2 + i1 + i2 + Double.doubleToLongBits(d) + i3 + i4 + s + i5 + i6 + by + i7 + i8 + i9 + i10 + l3 + i11 + Float.floatToIntBits(f) + i12 + i13 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth1() {
        int i14 = 12, i15 = 228, i16 = 4, i17 = 236, i19 = 0, iArr2[] = new int[N];
        double d1 = -22.2277;
        byte by1 = -46;
        boolean b = false;
        float f1 = -85.508F;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr2, 71);
        FuzzerUtils.init(lArr1, 0L);
        vMeth(Test.instanceCount, Test.instanceCount);
        iArr2[(-141 >>> 1) % N] = Test.iFld;
        i14 = 1;
        while ((i14 += 2) < 222) {
            Test.iFld += (int) (251L + (i14 * i14));
            iArr2[i14] >>= -20043;
            Test.instanceCount = Test.instanceCount;
            iArr2[i14] = (int) Test.instanceCount;
            Test.instanceCount = i14;
            Test.iFld = (int) Test.instanceCount;
            Test.iFld = (int) 1848686511L;
            d1 -= Test.iFld;
            by1 ^= (byte) i14;
            for (i15 = 1; i15 < 5; i15++) {
                switch(((i15 % 1) * 5) + 27) {
                    case 31:
                        if (b) {
                            i16 += (i15 + i14);
                            i17 = 1;
                            do {
                                int i18 = -31738;
                                lArr1[i17 - 1] += Test.instanceCount;
                                b = b;
                                Test.instanceCount += i14;
                                try {
                                    Test.iFld = (iArr2[i14 - 1] % iArr2[(Test.iFld >>> 1) % N]);
                                    i18 = (Test.iFld % i18);
                                    i19 = (-33093 % i19);
                                } catch (ArithmeticException a_e) {
                                }
                                Test.instanceCount = -177L;
                                i16 &= 151;
                                iArr2[i14] = (int) -7496283968279645031L;
                                Test.iFld = i16;
                                d1 = Test.iFld;
                            } while (++i17 < 2);
                            {
                                java.io.PrintStream ax$21 = System.out;
                                java.io.PrintStream ax$22 = System.err;
                                java.io.PrintStream ax$23 = new java.io.PrintStream(new java.io.OutputStream() {

                                    @Override
                                    public void write(int b) throws java.io.IOException {
                                        // DO NOTHING: DISCARD ALL OUTPUTS
                                    }
                                });
                                System.setOut(ax$23);
                                System.setErr(ax$23);
                                try {
                                    for (int ax$19 = -4788; ax$19 < 1275; ax$19 += 1) {
                                        boolean ax$17 = b;
                                        try {
                                            try {
                                                SortedSet c = Collections.unmodifiableSortedSet(null);
                                            } catch (NullPointerException e) {
                                                b = true;
                                            }
                                        } catch (Throwable ax$18) {
                                        } finally {
                                            b = ax$17;
                                        }
                                    }
                                } catch (Throwable ax$20) {
                                }
                                System.setOut(ax$21);
                                System.setErr(ax$22);
                            }
                            switch((((i19 >>> 1) % 1) * 5) + 34) {
                                case 35:
                                    Test.instanceCount = i17;
                                    i19 *= 1;
                                    Test.iFld += (i15 * i15);
                                    i16 += -5;
                                    f1 -= i15;
                                    iArr2 = iArr2;
                                    Test.iFld ^= i17;
                                    Test.instanceCount += (i15 ^ i15);
                                    break;
                                default:
                                    i19 *= (int) Test.instanceCount;
                                    if (Test.iFld != 0) {
                                    }
                            }
                        }
                        break;
                }
            }
        }
        long meth_res = i14 + Double.doubleToLongBits(d1) + by1 + i15 + i16 + i17 + (b ? 1 : 0) + i19 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public int iMeth(long l, int i) {
        int i20 = -8585, i21 = 12, i22 = 187, i23 = -32457, i24 = -9, i25 = -74, i26 = -58929, i27 = 2, i28 = -145, iArr[][] = new int[N][N], iArr3[] = new int[N];
        double d2 = -114.79590;
        float f2 = -63.486F, f3 = -126.341F;
        byte by2 = 27;
        FuzzerUtils.init(iArr, 44955);
        FuzzerUtils.init(iArr3, -5);
        iArr[(-166 >>> 1) % N][(i >>> 1) % N] += -8;
        iMeth1();
        Test.iFld = (int) 12L;
        for (i20 = 8; i20 < 153; i20++) {
            for (i22 = 1; 4 > i22; ++i22) {
                sFld += (short) (-58 + (i22 * i22));
                sFld |= (short) -236;
                if (Test.bFld) {
                    for (d2 = 1; d2 < 2; ++d2) {
                        i21 >>= i;
                        f2 += sFld;
                        i = (int) d2;
                        i23 *= (int) l;
                        i21 += (int) (d2 * d2);
                        iArr3[(int) (d2 + 1)] = (int) f2;
                    }
                    Test.iFld += (((i22 * f2) + i20) - i24);
                    i -= i21;
                    f2 *= -9;
                    i21 *= (int) Test.instanceCount;
                    sFld += (short) l;
                    i23 += i22;
                    for (i25 = 1; i25 < 2; i25++) {
                        f2 = f3;
                        Test.instanceCount = i23;
                        f2 = 129;
                        Test.instanceCount = i20;
                        l = Test.instanceCount;
                        i24 += (i25 * i25);
                        if (Test.bFld)
                            continue;
                    }
                    i26 = (int) 142L;
                } else if (Test.bFld) {
                    iArr3[i20 - 1] = (int) f3;
                    for (i27 = 1; 2 > i27; i27++) {
                        iArr3[i22] |= i23;
                        Test.instanceCount = i25;
                        Test.iFld1 -= (int) l;
                        try {
                            iArr3[i27] = (iArr[i20 - 1][i22 - 1] % 78);
                            i23 = (i21 % -421578938);
                            i24 = (i22 % iArr[i22 - 1][i20]);
                        } catch (ArithmeticException a_e) {
                        }
                        i23 += (((i27 * Test.instanceCount) + by2) - sFld);
                    }
                } else if (Test.bFld) {
                    i = (int) d2;
                }
            }
        }
        long meth_res = l + i + i20 + i21 + i22 + i23 + Double.doubleToLongBits(d2) + i24 + Float.floatToIntBits(f2) + i25 + i26 + Float.floatToIntBits(f3) + i27 + i28 + by2 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i29 = -7, i30 = -243, i31 = 208, i32 = 10, i33 = -18914, i34 = -15097, i35 = 8, i36 = 19606, i37 = -1, i38 = -10114, i39 = -64541;
        long l4 = 5L, l5 = -884153634432512482L, lArr2[] = new long[N];
        boolean b1 = true;
        byte by3 = 126;
        float[] fArr1 = new float[N];
        FuzzerUtils.init(fArr1, -2.863F);
        FuzzerUtils.init(lArr2, -1216254916L);
        Test.instanceCount += ((Test.iFld -= iMeth(Test.instanceCount, Test.iFld)) - Test.iFld);
        for (i29 = 6; i29 < 192; i29++) {
            if (Test.bFld)
                break;
            fArr1 = FuzzerUtils.float1array(N, (float) 90.397F);
            lArr2[i29 - 1] *= (long) 79.207F;
            Test.instanceCount %= (i30 | 1);
            Test.iFld = (int) 102.103049;
            for (i31 = 27; i31 > 1; --i31) {
                i33 = 1;
                while (++i33 < 2) {
                    double d3 = 53.45390;
                    i32 <<= Test.iFld;
                    Test.fFld += (i33 + i30);
                    d3 = i29;
                    fArr1[i31 - 1] += Test.iFld;
                    Test.iFld1 -= i31;
                }
                Test.iArrFld[i29] = (int) Test.fFld;
                for (l4 = 1; l4 < 2; ++l4) {
                    Test.byFld <<= (byte) l4;
                }
                Test.iFld += (int) Test.instanceCount;
                i32 = -44130;
            }
            Test.instanceCount += (((i29 * i33) + i30) - i30);
            for (i35 = i29; i35 < 27; ++i35) {
                i34 -= (int) Test.instanceCount;
                Test.iFld -= (int) 23525L;
                for (i37 = i35; i37 < 1; i37++) {
                    lArr2[i37] += Test.byFld;
                    Test.fFld = Test.iFld1;
                    dFld = 188L;
                    Test.byFld = (byte) i37;
                    i30 -= -20549;
                    Test.iFld += (((i37 * i30) + i34) - i37);
                    i36 = i33;
                    Test.iArrFld = Test.iArrFld;
                    i30 = i37;
                    i36 *= i37;
                    Test.iArrFld[i37 + 1] = i30;
                }
                dFld *= i37;
                i30 = Test.byFld;
                Test.instanceCount -= i30;
                switch(((i29 % 3) * 5) + 54) {
                    case 61:
                        if (false)
                            continue;
                        i30 *= (int) Test.instanceCount;
                        Test.bFld = Test.bFld;
                        dFld += i38;
                        Test.bFld = Test.bFld;
                        for (l5 = 1; l5 < 1; l5++) {
                            i30 = (int) Test.instanceCount;
                            Test.iArrFld[i35] -= -1985;
                            Test.iArrFld[i29] >>= (int) l4;
                            switch(((i38 >>> 1) % 5) + 113) {
                                case 113:
                                    Test.iArrFld[(int) (l5 + 1)] *= i39;
                                    Test.iFld += (int) (((l5 * i35) + Test.iFld1) - i34);
                                    Test.iArrFld = Test.iArrFld;
                                    i36 += (int) (l5 * i30);
                                    Test.instanceCount += (long) Test.fFld;
                                    i39 *= i31;
                                    break;
                                case 114:
                                case 115:
                                    Test.fFld -= (float) dFld;
                                    b1 = b1;
                                    Test.fFld += i35;
                                    i38 = i37;
                                    break;
                                case 116:
                                    i32 = (int) 1.300F;
                                    Test.byFld += (byte) i32;
                                    i34 += (int) (((l5 * Test.instanceCount) + Test.iFld) - i36);
                                    Test.instanceCount *= l4;
                                    by3 *= (byte) Test.fFld;
                                    Test.iFld1 <<= i33;
                                    Test.iFld *= i38;
                                    i39 -= i31;
                                    break;
                                case 117:
                                    i32 >>= (int) l5;
                                    lArr2 = lArr2;
                                    Test.instanceCount = sFld;
                                    if (false) {
                                        i32 = Test.iFld;
                                        Test.instanceCount += l5;
                                        Test.fFld += l5;
                                        Test.instanceCount += l4;
                                    } else if (Test.bFld) {
                                        i39 += i36;
                                    } else {
                                        Test.instanceCount -= -27116;
                                    }
                                    break;
                                default:
                                    Test.iArrFld[i35 - 1] >>= (int) l4;
                            }
                        }
                        break;
                    case 66:
                        sFld = (short) i35;
                    case 64:
                        i30 = i35;
                        break;
                }
            }
        }
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 l4 = " + i32 + "," + i33 + "," + l4);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 i38 l5 = " + i37 + "," + i38 + "," + l5);
        FuzzerUtils.out.println("i39 b1 by3 = " + i39 + "," + (b1 ? 1 : 0) + "," + by3);
        FuzzerUtils.out.println("fArr1 lArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld sFld = " + Test.instanceCount + "," + Test.iFld + "," + sFld);
        FuzzerUtils.out.println("Test.bFld Test.iFld1 Test.fFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld1 + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld dFld Test.iArrFld = " + Test.byFld + "," + Double.doubleToLongBits(dFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            {
                java.io.PrintStream ax$24 = System.out;
                java.io.PrintStream ax$25 = System.err;
                java.io.PrintStream ax$26 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$26);
                System.setErr(ax$26);
                {
                    boolean ax$28 = false;
                    for (int ax$27 = -398; ax$27 < 7712; ax$27 += 3) {
                        if (!ax$28) {
                            ax$28 = true;
                            {
                                System.setOut(ax$24);
                                System.setErr(ax$25);
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                                System.setOut(ax$26);
                                System.setErr(ax$26);
                            }
                        }
                    }
                }
                System.setOut(ax$24);
                System.setErr(ax$25);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
