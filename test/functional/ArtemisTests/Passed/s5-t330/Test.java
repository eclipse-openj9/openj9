// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ListIterator;

public class Test {
    public static final int N = 256;

    public static volatile long instanceCount = 343190457931451094L;

    public static double dFld = 18.72716;

    public static int iFld = 3;

    public static volatile short sFld = 1362;

    public byte byFld = 45;

    public static double dArrFld[] = new double[N];

    public static long lArrFld[][] = new long[N][N];

    public static float fArrFld[] = new float[N];

    public static byte byArrFld[][] = new byte[N][N];

    public int iArrFld[] = new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 50.33611);
        FuzzerUtils.init(Test.lArrFld, 2911487928L);
        FuzzerUtils.init(Test.fArrFld, 71.323F);
        FuzzerUtils.init(Test.byArrFld, ((byte) (-33)));
    }

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vMeth() {
        int i7 = 9;
        int i8 = 73;
        int i9 = 62991;
        int i10 = -5;
        int i11 = -36160;
        int i12 = 12;
        int i13 = 156;
        int i14 = 4;
        byte by = 45;
        byte byArr[] = new byte[N];
        short s = -3992;
        boolean b = false;
        boolean bArr[][] = new boolean[N][N];
        float f = 7.233F;
        FuzzerUtils.init(byArr, ((byte) (-63)));
        FuzzerUtils.init(bArr, true);
        for (i7 = 1; i7 < 93; i7++) {
            for (i9 = i7; i9 < 6; ++i9) {
                i8 *= by;
            }
            Test.instanceCount = i8;
            Test.dFld = i9;
            Test.instanceCount *= -56149;
            i8 = i7;
            for (i11 = 1; i11 < 6; ++i11) {
                s += ((short) (((i11 * Test.instanceCount) + Test.instanceCount) - i12));
                Test.dArrFld[i11 - 1] += -2332;
                for (i13 = 2; 1 < i13; --i13) {
                    s += ((short) (30711));
                    i8 += i9;
                    if (i7 != 0) {
                        vMeth_check_sum += ((((((((((((i7 + i8) + i9) + i10) + by) + i11) + i12) + s) + i13) + i14) + (b ? 1 : 0)) + Float.floatToIntBits(f)) + FuzzerUtils.checkSum(byArr)) + FuzzerUtils.checkSum(bArr);
                        return;
                    }
                    switch ((((i14 >>> 1) % 5) * 5) + 44) {
                        case 50 :
                            i14 -= i9;
                            if (b)
                                continue;

                            f *= i11;
                            by >>>= by;
                            i12 += i10;
                            i14 -= ((int) (Test.instanceCount));
                            i14 = ((int) (-12L));
                            i10 -= -4692;
                            Test.instanceCount += ((i13 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount;
                            i14 ^= ((int) (Test.instanceCount));
                            break;
                        case 56 :
                            switch (((i7 % 1) * 5) + 50) {
                                case 55 :
                                    byArr[i7 + 1] -= ((byte) (484));
                                    switch ((((i14 >>> 1) % 4) * 5) + 121) {
                                        case 128 :
                                            Test.lArrFld[i13 + 1] = Test.lArrFld[i13 + 1];
                                            i12 -= i12;
                                            Test.instanceCount -= ((long) (f));
                                            switch (((i10 >>> 1) % 7) + 126) {
                                                case 126 :
                                                    Test.dFld -= 40316;
                                                    switch ((i7 % 1) + 36) {
                                                        case 36 :
                                                            Test.dFld = -2L;
                                                            i12 = i14;
                                                            i14 *= i11;
                                                            break;
                                                    }
                                                    break;
                                                case 127 :
                                                case 128 :
                                                    if (b)
                                                        continue;

                                                    break;
                                                case 129 :
                                                    Test.instanceCount >>= i10;
                                                    break;
                                                case 130 :
                                                    i8 += i13;
                                                    break;
                                                case 131 :
                                                case 132 :
                                                    i10 *= i8;
                                                    break;
                                            }
                                            break;
                                        case 140 :
                                            i8 -= ((int) (1.657F));
                                            break;
                                        case 126 :
                                            i8 += 48904;
                                            break;
                                        case 125 :
                                            i14 += ((int) (Test.instanceCount));
                                            break;
                                        default :
                                            Test.instanceCount >>= i7;
                                    }
                                    break;
                                default :
                                    bArr[i11][i7 + 1] = true;
                            }
                            break;
                        case 54 :
                            f = Test.instanceCount;
                            break;
                        case 64 :
                            i10 = ((int) (f));
                            break;
                        case 67 :
                            if (b)
                                break;

                            break;
                        default :
                            Test.instanceCount += i13 + f;
                    }
                }
            }
        }
        vMeth_check_sum += ((((((((((((i7 + i8) + i9) + i10) + by) + i11) + i12) + s) + i13) + i14) + (b ? 1 : 0)) + Float.floatToIntBits(f)) + FuzzerUtils.checkSum(byArr)) + FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth1() {
        if (Test.ax$14) {
            int[] ax$15 = new int[8];
            int[] ax$16 = new int[]{ 0x11, 0x22, 0x33, 0x44, 0x88, 0x99, 0xaa, 0xbb };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$16 = ax$15;
            } catch (Throwable ax$17) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return 54936973;
        }
        int i15 = 10;
        int i16 = -138;
        int i17 = -6;
        int i18 = -4;
        int i19 = -60944;
        int i20 = -989;
        int i21 = 8;
        int iArr[] = new int[N];
        float f1 = -59.706F;
        double d = -63.3009;
        double d1 = -79.128474;
        byte by1 = -4;
        FuzzerUtils.init(iArr, 13);
        vMeth();
        i15 = 177;
        do {
            Test.instanceCount -= ((long) (f1));
            i16 += ((i15 * i16) + i15) - Test.instanceCount;
            i16 = 8721;
            iArr[i15 + 1] = -206;
            i16 /= ((int) (i16 | 1));
        } while ((--i15) > 0 );
        i16 *= i15;
        d = 1;
        while ((++d) < 83) {
            for (i17 = 1; i17 < 7; ++i17) {
                i16 >>= i16;
            }
            Test.instanceCount = ((long) (f1));
            Test.instanceCount = Test.instanceCount;
            for (d1 = 1; d1 < 7; ++d1) {
                i19 |= ((int) (Test.instanceCount));
                for (i20 = 2; i20 > 1; --i20) {
                    short s1 = -14647;
                    Test.lArrFld[(i19 >>> 1) % N][((int) (d - 1))] -= 7;
                    s1 >>>= ((short) (Test.instanceCount));
                    Test.instanceCount = i20;
                    if (true) {
                        iArr = iArr;
                        i18 -= by1;
                        iArr = iArr;
                        i21 = i20;
                        Test.instanceCount += ((i20 * f1) + i19) - i17;
                        Test.instanceCount += i20;
                        i19 ^= i15;
                        by1 *= ((byte) (i18));
                        Test.dFld += i19;
                        Test.instanceCount -= Test.instanceCount;
                        i16 += 196;
                        Test.instanceCount += i21;
                        i21 = s1;
                        f1 = i20;
                        Test.lArrFld[((int) (d1))][((int) (d1 - 1))] >>= i19;
                    } else {
                        Test.dFld -= Test.iFld;
                        iArr[((int) (d))] = s1;
                    }
                }
            }
        }
        long meth_res = ((((((((((i15 + Float.floatToIntBits(f1)) + i16) + Double.doubleToLongBits(d)) + i17) + i18) + Double.doubleToLongBits(d1)) + i19) + i20) + i21) + by1) + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static int iMeth(int i, int i1) {
        if (Test.ax$0) {
            ListIterator ax$1 = null;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$1.remove();
            } catch (Throwable ax$2) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return -1074680481;
        }
        int i2 = 70;
        int i3 = 11;
        int i4 = -143;
        int i5 = 11;
        int i6 = -221;
        int i22 = -11;
        int i23 = -16843;
        int i24 = -9;
        int i25 = 7;
        int i26 = -126;
        int i27 = 6;
        int iArr1[] = new int[N];
        float f2 = 105.981F;
        byte by2 = 126;
        double d2 = 2.916;
        boolean b1 = false;
        FuzzerUtils.init(iArr1, 8);
        for (i2 = 6; i2 < 112; ++i2) {
            for (i4 = 1; 5 > i4; ++i4) {
                i6 = 1;
                while ((++i6) < 2) {
                    {
                        final int ax$28 = i25;
                        final int ax$29 = i27;
                        try {
                            String ax$19 = "def";
                            String ax$20 = "s";
                            Object ax$26 = new Object();
                            for (int ax$18 = -466; ax$18 < (-466 + 11605); ax$18 += 1) {
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    try {
                                        long ax$21 = Long.decode(ax$19).longValue();
                                    } catch (NumberFormatException ax$22) {

                                    }
                                } catch (Throwable ax$23) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                                Test.ax$14 = true;
                                iMeth1();
                                Test.ax$14 = false;
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    i25 = ax$26.hashCode();
                                    i27 = System.identityHashCode(ax$26);
                                } catch (Throwable ax$27) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                            }
                        } finally {
                            i25 = ax$28;
                            i27 = ax$29;
                        }
                    }
                    Test.dArrFld[i2] = iMeth1();
                }
                i = ((int) (Test.instanceCount));
                i1 -= i5;
                i3 = i5;
                Test.instanceCount |= Test.instanceCount;
                Test.instanceCount += i4 - i;
                f2 %= i4 | 1;
            }
            iArr1[i2 + 1] -= ((int) (Test.dFld));
            i5 *= by2;
            for (d2 = i2; d2 < 5; ++d2) {
                iArr1[i2 + 1] = ((int) (Test.instanceCount));
                Test.instanceCount -= Test.iFld;
                Test.fArrFld = Test.fArrFld;
                for (i23 = 1; i23 > 1; i23 -= 2) {
                    Test.instanceCount = -82;
                    i3 += ((int) (f2));
                    i3 = ((int) (f2));
                    i22 -= ((int) (Test.instanceCount));
                    Test.dArrFld[((int) (d2 + 1))] = d2;
                    i *= ((int) (d2));
                    i3 = 1;
                    i1 += i1;
                    f2 = i23;
                    i = Test.iFld;
                    i22 *= i24;
                    Test.instanceCount = i22;
                }
            }
            i25 = 1;
            while ((++i25) < 5) {
                Test.sFld -= ((short) (-55550));
                Test.sFld = ((short) (-63));
                i1 -= ((int) (Test.instanceCount));
                for (i26 = 1; i26 < 1; i26++) {
                    if (b1) {
                        Test.byArrFld[i26][i26] -= ((byte) (-1));
                        f2 -= 0.25F;
                    } else {
                        i3 = i5;
                    }
                }
            }
        }
        long meth_res = ((((((((((((((((i + i1) + i2) + i3) + i4) + i5) + i6) + Float.floatToIntBits(f2)) + by2) + Double.doubleToLongBits(d2)) + i22) + i23) + i24) + i25) + i26) + i27) + (b1 ? 1 : 0)) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public void mainTest(String[] strArr1) {
        long l = 24945L;
        long l1 = 5L;
        long l2 = 57L;
        float f3 = -2.742F;
        float f4 = -1.482F;
        int i28 = 23;
        int i29 = 42527;
        int i30 = 20802;
        int i31 = -10;
        int i32 = 7;
        int i33 = 4759;
        boolean b2 = false;
        {
            final int ax$12 = i29;
            final int ax$13 = i32;
            try {
                Thread ax$4 = new Thread();
                int[] ax$7 = new int[]{ 1675281533, -1129132611, -338451954, -957905844, -2090655700, 448319734, -632883837, 2094758092, 1356968241 };
                for (int ax$3 = -626; ax$3 < (-626 + 16443); ax$3 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        try {
                            ax$4.join();
                        } catch (InterruptedException ax$5) {
                        }
                    } catch (Throwable ax$6) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    iMeth(-1765122138, -31430820);
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$10 = i29 - 1; ax$10 >= (i32 + 1); ax$10--) {
                            ax$7[ax$10] += 1;
                        }
                    } catch (Throwable ax$11) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i29 = ax$12;
                i32 = ax$13;
            }
        }
        Test.instanceCount = ((long) ((Test.instanceCount - ((-38) - l)) - (iMeth(Test.iFld, Test.iFld) + f3)));
        Test.iFld |= Test.iFld;
        byFld = ((byte) (177));
        byFld <<= ((byte) (l));
        for (i28 = 7; i28 < 207; ++i28) {
            i29 = ((int) (l));
            Test.sFld &= ((short) (i28));
            for (i30 = 1; i30 < 26; i30++) {
                for (l1 = i28; l1 < 2; l1++) {
                    Test.instanceCount = i28;
                    f3 -= i29;
                    f3 += ((l1 * f3) + i29) - f3;
                    Test.instanceCount += ((long) (f3));
                    f3 = i28;
                    Test.iFld += byFld;
                    switch ((i30 % 1) + 84) {
                        case 84 :
                            i31 /= ((int) (l | 1));
                            Test.dArrFld[((int) (l1))] -= Test.iFld;
                            b2 = b2;
                            Test.iFld -= Test.iFld;
                            Test.instanceCount = i31;
                    }
                    switch (((int) (((l1 % 10) * 5) + 31))) {
                        case 37 :
                            f3 = 207;
                            Test.iFld -= ((int) (f3));
                            i32 += ((int) (l1 - i28));
                            i31 >>= ((int) (1L));
                            i31 += ((int) (l1 + Test.sFld));
                            Test.instanceCount -= i31;
                            Test.instanceCount /= ((long) (14.914F));
                            Test.iFld -= ((int) (-8540777347188675656L));
                            Test.instanceCount <<= i30;
                            Test.sFld += ((short) (l));
                            l -= l;
                        case 42 :
                            Test.sFld -= ((short) (-10));
                            byFld += ((byte) (((l1 * i31) + Test.instanceCount) - i28));
                            switch (((i29 >>> 1) % 1) + 58) {
                                case 58 :
                                    switch (((int) (((l1 % 7) * 5) + 91))) {
                                        case 105 :
                                            switch (((i29 >>> 1) % 9) + 43) {
                                                case 43 :
                                                    f3 -= -8202;
                                                    if (b2)
                                                        break;

                                                    Test.iFld = i28;
                                                    i33 -= i31;
                                                    Test.byArrFld[i28][i30 + 1] = ((byte) (i29));
                                                    i29 *= ((int) (-87.15279));
                                                    Test.lArrFld[i28] = Test.lArrFld[i30 + 1];
                                                    break;
                                                case 44 :
                                                    Test.iFld = -11775;
                                                    iArrFld[i30 + 1] = i30;
                                                    i32 += ((int) (8607975061670321512L));
                                                    Test.instanceCount = Test.sFld;
                                                    i29 += ((int) (l1 * l1));
                                                    byFld = ((byte) (i31));
                                                    i29 += i28;
                                                    Test.iFld = ((int) (f3));
                                                    i32 |= i33;
                                                case 45 :
                                                    i31 &= 1032;
                                                    f4 = l1;
                                                    break;
                                                case 46 :
                                                    i29 *= ((int) (Test.dFld));
                                                    i31 -= Test.sFld;
                                                    iArrFld[i28 - 1] *= i33;
                                                    break;
                                                case 47 :
                                                    Test.iFld += ((int) (l));
                                                    l2 += l1;
                                                    i33 = i28;
                                                    if (b2) {
                                                        Test.instanceCount += ((l1 * i32) + i29) - i31;
                                                        iArrFld = iArrFld;
                                                        Test.iFld = 77;
                                                    } else if (true) {
                                                        iArrFld[i28 + 1] *= Test.iFld;
                                                        Test.dFld += i32;
                                                        iArrFld[((int) (l1 - 1))] >>= 18024;
                                                        Test.dFld -= 73;
                                                        iArrFld[i28 + 1] = i29;
                                                        iArrFld[i28 + 1] += i30;
                                                        byFld += ((byte) (i29));
                                                        Test.dFld -= 48;
                                                        try {
                                                            Test.iFld = i32 % (-18913);
                                                            i32 = 206 / Test.iFld;
                                                            i31 = (-58921) % i30;
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                    } else {
                                                        i33 += i33;
                                                    }
                                                case 48 :
                                                    i32 += ((int) (l1));
                                                    break;
                                                case 49 :
                                                    Test.dFld = Test.iFld;
                                                    break;
                                                case 50 :
                                                    f4 += 2.338F + (l1 * l1);
                                                    break;
                                                case 51 :
                                                    Test.lArrFld[((int) (l1))][i28 - 1] &= i33;
                                                    break;
                                                default :
                                                    i33 >>>= ((int) (l));
                                            }
                                            break;
                                        case 114 :
                                            Test.iFld = Test.iFld;
                                        case 94 :
                                            iArrFld[i30 - 1] -= ((int) (l));
                                            break;
                                        case 125 :
                                            iArrFld[i28 + 1] = ((int) (f4));
                                        case 109 :
                                            f3 *= l2;
                                            break;
                                        case 116 :
                                            f4 += Test.iFld;
                                            break;
                                        case 106 :
                                            Test.iFld += ((int) (((l1 * i29) + Test.instanceCount) - i32));
                                            break;
                                    }
                                    break;
                                default :
                                    Test.sFld += ((short) (l));
                            }
                        case 61 :
                            i33 += i31;
                            break;
                        case 39 :
                            Test.sFld -= Test.sFld;
                            break;
                        case 79 :
                            i32 -= ((int) (f3));
                            break;
                        case 56 :
                            l2 = ((long) (f4));
                            break;
                        case 43 :
                            l += l1;
                        case 40 :
                            iArrFld[i30] = ((int) (-515740740L));
                        case 68 :
                            i33 = 47013;
                            break;
                        case 67 :
                            iArrFld[i28] -= i33;
                            break;
                    }
                }
            }
        }
        FuzzerUtils.out.println((((("l f3 i28 = " + l) + ",") + Float.floatToIntBits(f3)) + ",") + i28);
        FuzzerUtils.out.println((((("i29 i30 i31 = " + i29) + ",") + i30) + ",") + i31);
        FuzzerUtils.out.println((((("l1 i32 b2 = " + l1) + ",") + i32) + ",") + (b2 ? 1 : 0));
        FuzzerUtils.out.println((((("i33 f4 l2 = " + i33) + ",") + Float.floatToIntBits(f4)) + ",") + l2);
        FuzzerUtils.out.println((((("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount) + ",") + Double.doubleToLongBits(Test.dFld)) + ",") + Test.iFld);
        FuzzerUtils.out.println((((("Test.sFld byFld Test.dArrFld = " + Test.sFld) + ",") + byFld) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println((((("Test.lArrFld Test.fArrFld Test.byArrFld = " + FuzzerUtils.checkSum(Test.lArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld))) + ",") + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$14 = false;
}
