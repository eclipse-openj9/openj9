// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -2111864251L;

    public static int iFld = 9;

    public static float fFld = -1.620F;

    public static volatile int iFld1 = 11;

    public static double dFld = 1.126402;

    public static int iFld2 = 146;

    public static int iFld3 = -2;

    public static long[] lArrFld = new long[N];

    public static int[] iArrFld = new int[N];

    public static boolean[] bArrFld = new boolean[N];

    public static float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3821310193L);
        FuzzerUtils.init(Test.iArrFld, -48);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.fArrFld, 2.134F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(long l2) {
        double d = 2.10222;
        int i7 = -14, i8 = 13, i9 = 0, i10 = -233, i11 = -39359, i12 = -52446, i13 = -181, i14 = 6, i15 = 61980, iArr[] = new int[N];
        short s = -16547;
        byte by1 = -1;
        long l3 = 224116125L;
        float[] fArr = new float[N];
        FuzzerUtils.init(iArr, -8);
        FuzzerUtils.init(fArr, 85.371F);
        l2 = Test.iFld;
        d -= 29871;
        for (i7 = 4; i7 < 239; i7++) {
            iArr[i7 + 1] <<= (int) Test.instanceCount;
            s <<= by1;
            iArr[(Test.iFld >>> 1) % N] = (int) Test.instanceCount;
            i8 ^= i7;
            for (i9 = 1; 3 > i9; ++i9) {
                Test.fFld -= l2;
                i8 = (int) 1302626518L;
                switch(((i8 >>> 1) % 2) + 103) {
                    case 103:
                        i10 -= i7;
                        d = i9;
                        by1 *= (byte) -151;
                        break;
                    case 104:
                        for (i11 = 1; i11 < 2; i11++) {
                            iArr[i9] = (int) Test.instanceCount;
                            l3 = -195L;
                            i13 += (i11 * i11);
                            i13 = -24004;
                            l3 = i8;
                            Test.iFld += (i11 - i7);
                            Test.fFld += (((i11 * i10) + l3) - i7);
                        }
                        iArr[i7 + 1] *= s;
                        Test.fFld += (float) d;
                        s = (short) d;
                        Test.iFld = by1;
                        for (i14 = 1; 2 > i14; i14++) {
                            i12 *= i10;
                            by1 = (byte) -225;
                            i8 += (i14 * i14);
                            Test.instanceCount |= -18053L;
                            iArr[i14] = i12;
                            i13 = 253;
                            fArr[i14 + 1] = i12;
                            if (i15 != 0) {
                            }
                            i13 += (((i14 * Test.fFld) + Test.instanceCount) - i8);
                            Test.fFld = (float) d;
                        }
                        break;
                }
            }
        }
        long meth_res = l2 + Double.doubleToLongBits(d) + i7 + i8 + s + by1 + i9 + i10 + i11 + i12 + l3 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(int i1, int i2, long l1) {
        if (ax$0) {
            try {
                java.lang.Object ax$1 = "4124.359493873326";
                if (ax$1 != null) {
                }
            } catch (Throwable ax$2) {
            } finally {
            }
            return;
        }
        int i3 = 62, i4 = -31652, i5 = 4, i6 = -5625, i16 = 13, i17 = -3562, i18 = 6, i19 = 207, iArr1[] = new int[N];
        byte by = -83;
        boolean b = false;
        double d1 = 0.23719, dArr[] = new double[N];
        float[] fArr1 = new float[N];
        FuzzerUtils.init(iArr1, -13);
        FuzzerUtils.init(dArr, -110.38179);
        FuzzerUtils.init(fArr1, 0.803F);
        for (i3 = 5; i3 < 99; ++i3) {
            i2 = (int) (((i3 / (i4 | 1)) - by) - Math.sqrt(i1 + i2));
        }
        for (i5 = 135; i5 > 5; i5--) {
            l1 *= ((iMeth(Test.instanceCount) >> i2) >> i6);
            for (i16 = i5; i16 < 4; ++i16) {
                iArr1[i5 - 1] >>= Test.iFld;
                iArr1[i5] = i1;
                if (b)
                    break;
                switch((i16 % 5) + 34) {
                    case 34:
                    case 35:
                        try {
                            i17 = (i6 % -232);
                            Test.iFld = (i16 / -171);
                            Test.iFld = (i1 % i3);
                        } catch (ArithmeticException a_e) {
                        }
                        iArr1[i5] += (int) l1;
                        break;
                    case 36:
                    case 37:
                        i4 += (i16 * i16);
                        dArr[i16 + 1] = i2;
                        l1 <<= l1;
                        for (i18 = 1; i18 > 1; --i18) {
                            long l4 = 0L;
                            i6 = (int) l4;
                            i1 += (((i18 * l1) + i18) - i6);
                            i17 += (int) -2.862F;
                            i4 <<= by;
                            Test.iFld1 = (int) l4;
                            dArr[i18 + 1] += 109;
                            switch((((i19 >>> 1) % 9) * 5) + 118) {
                                case 162:
                                    i1 += i18;
                                    l1 = i16;
                                    Test.instanceCount = (long) Test.fFld;
                                    i1 = i17;
                                    fArr1[i16] += Test.instanceCount;
                                    Test.iFld1 = i5;
                                    Test.instanceCount >>= i16;
                                    if (b) {
                                        d1 *= Test.iFld;
                                        Test.instanceCount *= -7;
                                        iArr1[i16 - 1] -= i6;
                                        Test.instanceCount ^= i4;
                                        i19 *= (int) d1;
                                        i1 -= Test.iFld1;
                                        i6 *= (int) d1;
                                    } else if (b) {
                                        Test.fFld -= i17;
                                    }
                                    break;
                                case 131:
                                    Test.iFld *= (int) d1;
                                    break;
                                case 129:
                                    if (Test.iFld1 != 0) {
                                        vMeth1_check_sum += i1 + i2 + l1 + i3 + i4 + by + i5 + i6 + i16 + i17 + (b ? 1 : 0) + i18 + i19 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                                        return;
                                    }
                                    break;
                                case 126:
                                    i2 += (i18 * i18);
                                case 123:
                                    i17 = Test.iFld;
                                    break;
                                case 151:
                                    Test.fFld += (float) d1;
                                    break;
                                case 119:
                                    i1 >>= i2;
                                case 139:
                                    Test.fFld /= ((long) (Test.fFld) | 1);
                                    break;
                                case 154:
                                    Test.iFld1 += -14;
                                    break;
                            }
                        }
                        break;
                    case 38:
                        Test.lArrFld[i5] |= i4;
                }
            }
        }
        vMeth1_check_sum += i1 + i2 + l1 + i3 + i4 + by + i5 + i6 + i16 + i17 + (b ? 1 : 0) + i18 + i19 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth(long l, int i, float f) {
        if (ax$8) {
            int ax$11 = iFld3;
            try {
                java.lang.Object[] ax$9 = new Object[1000000];
                Object ax$10 = ax$9[iFld3];
                if (ax$10.getClass() == int[].class) {
                } else if (ax$10.getClass() == long[].class) {
                } else if (ax$10.getClass() == float[].class) {
                } else if (ax$10.getClass() == double[].class) {
                } else {
                }
            } catch (Throwable ax$12) {
            } finally {
                iFld3 = ax$11;
            }
            return;
        }
        short s1 = -7318, sArr[] = new short[N];
        int i20 = -10, i21 = 100, i22 = -59, i23 = -8, i24 = 3, i25 = -113, i26 = -26558, i27 = -186, iArr2[][] = new int[N][N];
        double d2 = 107.117725, dArr1[] = new double[N];
        boolean b1 = true;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(dArr1, -78.14526);
        FuzzerUtils.init(iArr2, 4426);
        FuzzerUtils.init(sArr, (short) -26906);
        FuzzerUtils.init(byArr, (byte) -123);
        {
            java.io.PrintStream ax$5 = System.out;
            java.io.PrintStream ax$6 = System.err;
            java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$7);
            System.setErr(ax$7);
            try {
                ax$0 = true;
                for (int ax$3 = 0; ax$3 < 6546; ax$3 += 1) vMeth1(2086576787, -855242279, 2144102790329193765L);
            } catch (java.lang.Throwable ax$4) {
            } finally {
                ax$0 = false;
            }
            System.setOut(ax$5);
            System.setErr(ax$6);
        }
        vMeth1(7, 23830, Test.instanceCount);
        s1 = (short) i;
        for (i20 = 8; i20 < 181; ++i20) {
            for (i22 = 1; i22 < 3; ++i22) {
                Test.iFld1 += (i22 * i22);
                i21 *= (int) l;
                i21 = i22;
                switch((((14 >>> 1) % 2) * 5) + 43) {
                    case 51:
                        i21 = (int) d2;
                        i24 = 1;
                        while (++i24 < 2) {
                            i23 *= Test.iFld;
                            Test.iFld1 = i20;
                            dArr1[i24 - 1] = 27212L;
                        }
                        Test.iFld1 += 11;
                        for (i25 = 1; i25 < 2; i25++) {
                            iArr2 = iArr2;
                            b1 = b1;
                            i += i25;
                            switch(((-10 >>> 1) % 2) + 114) {
                                case 114:
                                case 115:
                                    i -= (int) f;
                                    i26 += (((i25 * Test.instanceCount) + i22) - i26);
                                    i23 = (int) Test.fFld;
                                    b1 = b1;
                                    Test.instanceCount += (i25 - i24);
                                    i26 >>= i20;
                                    s1 = s1;
                                    Test.iFld += i21;
                                    sArr[i25 - 1] *= (short) Test.instanceCount;
                                    try {
                                        i23 = (i24 / -1028499209);
                                        iArr2[i22 - 1][i22 + 1] = (i20 / -243);
                                        iArr2[i25 + 1][(i24 >>> 1) % N] = (-235 / Test.iFld1);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    iArr2[i20][i20 + 1] += Test.iFld;
                                    break;
                                default:
                                    Test.iFld += (i25 | Test.iFld1);
                                    byArr[i25 - 1] += (byte) 1;
                                    try {
                                        i21 = (i27 % iArr2[(Test.iFld1 >>> 1) % N][i20 - 1]);
                                        Test.iFld1 = (i26 % -12254);
                                        iArr2[i25 - 1][i25 - 1] = (i20 / -224);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    try {
                                        i23 = (i22 / Test.iFld);
                                        i21 = (931416113 / i27);
                                        iArr2[i20 + 1][i25 + 1] = (i22 % -459618837);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i += 19;
                                    Test.iFld &= (int) 7L;
                                    Test.instanceCount ^= -1599142452L;
                            }
                        }
                        break;
                    case 47:
                        Test.instanceCount -= (long) f;
                        break;
                    default:
                        i27 -= Test.iFld;
                }
            }
        }
        vMeth_check_sum += l + i + Float.floatToIntBits(f) + s1 + i20 + i21 + i22 + i23 + Double.doubleToLongBits(d2) + i24 + i25 + i26 + (b1 ? 1 : 0) + i27 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {
        byte by2 = 94;
        int i28 = 13, i29 = -19, i30 = -28496, i31 = -46397, i32 = 88, i33 = 15, i34 = 64, i35 = 171, i36 = 38447, i37 = 48893, i38 = 74, i39 = -39618;
        float f1 = 1.244F, f2 = 0.420F;
        short s2 = 15610;
        long l5 = -1668884239L;
        boolean b2 = false;
        {
            java.io.PrintStream ax$15 = System.out;
            java.io.PrintStream ax$16 = System.err;
            java.io.PrintStream ax$17 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$17);
            System.setErr(ax$17);
            try {
                ax$8 = true;
                for (int ax$13 = 0; ax$13 < 5336; ax$13 += 1) vMeth(1363698389524399559L, -668491785, (float) 0.5851172506297826);
            } catch (java.lang.Throwable ax$14) {
            } finally {
                ax$8 = false;
            }
            System.setOut(ax$15);
            System.setErr(ax$16);
        }
        vMeth(Test.instanceCount, -9, Test.fFld);
        Test.iFld1 = by2;
        for (i28 = 2; i28 < 189; ++i28) {
            for (f1 = 1; 27 > f1; ++f1) {
                Test.instanceCount += (long) ((long) f1 | Test.instanceCount);
                Test.iFld >>= i29;
                try {
                    Test.iArrFld[(int) (f1 - 1)] = (913187697 % i28);
                    i29 = (-33156 % Test.iArrFld[i28 - 1]);
                    i29 = (5987 % i30);
                } catch (ArithmeticException a_e) {
                }
                Test.instanceCount *= i28;
                Test.iArrFld[i28 - 1] += (int) Test.instanceCount;
            }
            Test.iFld *= s2;
            switch(((i29 >>> 1) % 2) + 95) {
                case 95:
                    Test.fFld -= Test.iFld1;
                    Test.dFld += by2;
                    Test.lArrFld[i28 - 1] += -13;
                    i29 -= Test.iFld;
                    Test.dFld += i28;
                    Test.instanceCount += i30;
                    Test.iFld1 = 13;
                    try {
                        Test.iArrFld[i28 - 1] = (i29 / i28);
                        i30 = (-27128 % Test.iArrFld[i28]);
                        Test.iArrFld[i28 + 1] = (-29314 % Test.iFld1);
                    } catch (ArithmeticException a_e) {
                    }
                    Test.fFld += (((i28 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                    for (l5 = 27; l5 > 1; l5 -= 2) {
                        s2 = (short) i31;
                    }
                    Test.fFld = f1;
                    i32 = 1;
                    while (++i32 < 27) {
                        Test.instanceCount += i30;
                        Test.iArrFld[i32 + 1] -= (int) Test.dFld;
                        Test.bArrFld[i28] = b2;
                        i31 >>>= (int) Test.instanceCount;
                        i30 = i29;
                    }
                    i30 += (200 + (i28 * i28));
                    Test.iFld += i30;
                    break;
                case 96:
                    Test.instanceCount += (long) Test.dFld;
                    Test.lArrFld = FuzzerUtils.long1array(N, (long) 3137479205L);
                    Test.fFld += i32;
                    Test.iFld = i32;
                    Test.fFld -= 1;
                    for (f2 = 1; 27 > f2; f2++) {
                        i30 -= i32;
                        Test.iFld = (int) l5;
                        Test.instanceCount *= -41285;
                        i29 += i33;
                        b2 = b2;
                        i31 >>= 1947;
                        i30 = 199;
                        for (i34 = 1; i34 < 2; ++i34) {
                            if (b2)
                                break;
                            i35 = (int) -2084491660743413288L;
                            Test.iArrFld[(int) (f2)] = (int) l5;
                            Test.iArrFld[(int) (f2 + 1)] = i28;
                            Test.lArrFld[i28] = i31;
                            Test.fFld = i28;
                        }
                        i29 = (int) l5;
                        for (i36 = 1; i36 < 2; i36++) {
                            i37 = i34;
                            Test.bArrFld[(int) (f2)] = true;
                            i31 += i36;
                            i37 = i35;
                        }
                        Test.iFld1 += (int) (((f2 * Test.iFld2) + i34) - i37);
                        for (i38 = (int) (f2); i38 < 2; i38 += 2) {
                            i35 = i39;
                            Test.iFld1 += (int) l5;
                            Test.instanceCount = Test.instanceCount;
                            Test.fArrFld[i28 + 1] -= Test.instanceCount;
                            Test.iFld += (((i38 * i34) + Test.iFld2) - i35);
                            i33 += Test.iFld3;
                            i30 += Test.iFld3;
                            Test.iArrFld = FuzzerUtils.int1array(N, (int) -58);
                            i35 = (int) Test.instanceCount;
                            i37 += i38;
                        }
                        Test.fFld = 49221;
                    }
                    if (b2) {
                        if (b2)
                            continue;
                        Test.dFld -= i35;
                        Test.instanceCount -= l5;
                        Test.instanceCount += (44682 + (i28 * i28));
                    }
                    break;
            }
        }
        FuzzerUtils.out.println("by2 i28 i29 = " + by2 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("f1 i30 s2 = " + Float.floatToIntBits(f1) + "," + i30 + "," + s2);
        FuzzerUtils.out.println("l5 i31 i32 = " + l5 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("b2 f2 i33 = " + (b2 ? 1 : 0) + "," + Float.floatToIntBits(f2) + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 i38 i39 = " + i37 + "," + i38 + "," + i39);
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld1 Test.dFld Test.iFld2 = " + Test.iFld1 + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld2);
        FuzzerUtils.out.println("Test.iFld3 Test.lArrFld Test.iArrFld = " + Test.iFld3 + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.bArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;

    private static Boolean ax$8 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
