// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.nio.channels.AsynchronousChannelGroup;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 101L;

    public static byte byFld = 19;

    public static boolean bFld = false;

    public static short sFld = -22237;

    public float fFld = 59.740F;

    public long lFld = -8688708832955390851L;

    public static volatile float[] fArrFld = new float[N];

    public static volatile long[] lArrFld = new long[N];

    public static short[] sArrFld = new short[N];

    public static int[] iArrFld = new int[N];

    public static volatile double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.334F);
        FuzzerUtils.init(Test.lArrFld, -119L);
        FuzzerUtils.init(Test.sArrFld, (short) 12212);
        FuzzerUtils.init(Test.iArrFld, -59647);
        FuzzerUtils.init(Test.dArrFld, 78.22393);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(float f) {
        int i2 = -4, i3 = -840, i4 = 39670, i5 = -10, i6 = -6275, iArr[][] = new int[N][N];
        short s1 = -22659, sArr1[] = new short[N];
        boolean b = true;
        double d = 0.78119, dArr[] = new double[N];
        byte by = 0;
        long l = 38976L;
        FuzzerUtils.init(iArr, 19550);
        FuzzerUtils.init(dArr, 1.105389);
        FuzzerUtils.init(sArr1, (short) -10093);
        for (i2 = 4; i2 < 249; i2++) {
            i3 += (i2 + Test.instanceCount);
            i4 = 1;
            do {
                f += (58883 + (i4 * i4));
                f += i4;
                s1 = (short) Test.instanceCount;
                for (i5 = i4; i5 < 1; i5 += 3) {
                    b = b;
                    Test.instanceCount = 3803574842340964747L;
                    i6 += i6;
                    iArr = FuzzerUtils.int2array(N, (int) -22548);
                    switch(((i2 % 5) * 5) + 43) {
                        case 50:
                            i3 -= 0;
                            dArr[i2 - 1] *= i2;
                            if (i4 != 0) {
                            }
                            Test.instanceCount *= s1;
                            switch(((i5 % 9) * 5) + 64) {
                                case 104:
                                    i6 = (int) Test.instanceCount;
                                    i3 += (((i5 * i3) + i4) - Test.instanceCount);
                                    iArr[(i5 >>> 1) % N][i2 + 1] >>= 60364;
                                    i6 <<= s1;
                                    if (b)
                                        break;
                                    d *= 199;
                                    break;
                                case 95:
                                    Test.instanceCount *= by;
                                    i6 += i6;
                                    switch((i4 % 2) + 5) {
                                        case 5:
                                            Test.fArrFld[i5 - 1] = i5;
                                            by += (byte) (-27254 + (i5 * i5));
                                            f = i2;
                                            switch(((i4 >>> 1) % 5) + 26) {
                                                case 26:
                                                    by += (byte) -1342;
                                                    b = b;
                                                    break;
                                                case 27:
                                                    d -= i6;
                                                    dArr[i4] += i3;
                                                    d = l;
                                                    f -= i6;
                                                    f -= i2;
                                                    break;
                                                case 28:
                                                    l *= i5;
                                                    break;
                                                case 29:
                                                    by += (byte) (i5 * i5);
                                                    break;
                                                case 30:
                                                    i6 = i5;
                                                    break;
                                                default:
                                                    i3 = i6;
                                            }
                                            break;
                                        case 6:
                                            d *= f;
                                        default:
                                            i6 = i3;
                                    }
                                    break;
                                case 101:
                                    i3 += i3;
                                    break;
                                case 69:
                                    f *= 48;
                                    break;
                                case 93:
                                case 84:
                                    i3 += i5;
                                    break;
                                case 105:
                                case 91:
                                    Test.instanceCount += (i5 ^ i5);
                                    break;
                                case 98:
                                    sArr1[i5 + 1] -= (short) Test.instanceCount;
                                    break;
                                default:
                                    iArr[i2 - 1][i5 + 1] = i3;
                            }
                            break;
                        case 58:
                            if (i5 != 0) {
                            }
                            break;
                        case 62:
                            l = i3;
                            break;
                        case 49:
                            Test.lArrFld[i4 - 1] = i5;
                            break;
                        case 61:
                            iArr[i2][i2 - 1] += i5;
                            break;
                        default:
                            f = i2;
                    }
                }
            } while (++i4 < 3);
        }
        long meth_res = Float.floatToIntBits(f) + i2 + i3 + i4 + s1 + i5 + i6 + (b ? 1 : 0) + Double.doubleToLongBits(d) + by + l + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(sArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(int i1) {
        float f1 = -23.443F, f2 = 0.777F;
        int i7 = -46761, i8 = 37638, i9 = -27553, i10 = 107, i11 = 205, i12 = 4, i13 = 191, i14 = 254, iArr1[] = new int[N];
        short s2 = -10684;
        double d1 = 110.65749, dArr1[][] = new double[N][N];
        boolean b1 = false;
        FuzzerUtils.init(iArr1, -8);
        FuzzerUtils.init(dArr1, -1.62846);
        iMeth(f1);
        iArr1[(i1 >>> 1) % N] -= i1;
        for (f2 = 234; f2 > 11; --f2) {
            iArr1[(164 >>> 1) % N] = s2;
            Test.lArrFld = Test.lArrFld;
        }
        Test.instanceCount ^= i1;
        d1 = 1;
        do {
            Test.sArrFld[(int) (d1 - 1)] = (short) i7;
        } while (++d1 < 176);
        i7 *= i7;
        iArr1[(8 >>> 1) % N] = i1;
        s2 <<= (short) 11;
        for (i8 = 4; i8 < 236; i8++) {
            b1 = false;
            f1 *= i1;
            i10 = 1;
            while (++i10 < 3) {
                Test.instanceCount = i1;
                f1 *= Test.byFld;
                dArr1[i10 + 1][i8 - 1] += i7;
                i1 = (int) Test.instanceCount;
                i11 = 1;
                while (++i11 < 1) {
                    i1 -= (int) d1;
                    f1 += f2;
                    i7 |= i10;
                    i7 -= (int) Test.instanceCount;
                    i9 = i8;
                    f1 += -8;
                    Test.instanceCount <<= i9;
                    i7 += i11;
                }
                for (i12 = 1; i12 < 1; i12++) {
                    iArr1[i12] |= i8;
                    iArr1[i10] *= i12;
                    i9 *= (int) f2;
                }
                i7 >>= i7;
                i9 = i11;
                i14 = 1;
                while (++i14 < 1) {
                    Test.instanceCount *= (long) f1;
                    s2 += (short) Test.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i1 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i7 + s2 + Double.doubleToLongBits(d1) + i8 + i9 + (b1 ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void vMeth(int i) {
        if (ax$611) {
            try {
                try {
                    AsynchronousChannelGroup.withFixedThreadPool(1, null);
                } catch (NullPointerException x) {
                }
            } catch (Throwable ax$612) {
            } finally {
            }
            return;
        }
        double d2 = -2.81551, dArr2[] = new double[N];
        int i15 = 14, i16 = -58, i17 = -159, i18 = -26, i19 = 0, i20 = -50471, i21 = 6, i22 = -13, i23 = -32, i24 = 1, i25 = 65;
        float f4 = 0.756F;
        boolean b2 = false;
        long l1 = -71L;
        FuzzerUtils.init(dArr2, 0.48706);
        vMeth1(i);
        Test.iArrFld[(i >>> 1) % N] >>= (int) -5609531178784420528L;
        i = i;
        switch((((i >>> 1) % 9) * 5) + 27) {
            case 49:
                d2 = i;
                i *= i;
                for (i15 = 3; i15 < 108; i15++) {
                    for (i17 = 1; i17 < 5; i17++) {
                        for (f4 = 2; f4 > 1; --f4) {
                            Test.iArrFld[i15 + 1] >>= i18;
                        }
                        i18 += (i17 - i16);
                        for (i20 = 1; i20 < 2; i20++) {
                            b2 = b2;
                            i19 += (i20 - i20);
                            i18 *= i21;
                            i += (i20 * i20);
                            i18 += (int) (75.670F + (i20 * i20));
                            Test.instanceCount += i20;
                            Test.instanceCount += (i20 * i16);
                            Test.iArrFld[i17] = (int) Test.instanceCount;
                            Test.iArrFld[i20] = i21;
                            Test.byFld += (byte) (((i20 * Test.instanceCount) + Test.byFld) - i);
                            Test.iArrFld[i17 + 1] /= 156;
                            i19 += i15;
                            i16 = i18;
                            Test.fArrFld[i20 - 1] = Test.byFld;
                        }
                        i22 -= i17;
                        for (i23 = 1; i23 < 2; i23++) {
                            i += i23;
                            dArr2 = FuzzerUtils.double1array(N, (double) 111.105187);
                            i24 -= (int) f4;
                            i16 = 208;
                            i19 = (int) l1;
                            i18 *= (int) l1;
                            l1 = 134;
                            Test.byFld *= (byte) l1;
                        }
                        Test.instanceCount = l1;
                    }
                }
                break;
            case 46:
                Test.iArrFld[(i24 >>> 1) % N] <<= i16;
                break;
            case 57:
                i19 += Test.byFld;
            case 63:
                Test.lArrFld[(i24 >>> 1) % N] = (long) d2;
                break;
            case 33:
                i24 -= (int) f4;
                break;
            case 71:
                d2 *= i19;
            case 70:
                i25 = (int) Test.instanceCount;
                break;
            case 69:
                Test.fArrFld[(45748 >>> 1) % N] += i19;
                break;
            case 35:
                i25 = (int) -6L;
                break;
        }
        vMeth_check_sum += i + Double.doubleToLongBits(d2) + i15 + i16 + i17 + i18 + Float.floatToIntBits(f4) + i19 + i20 + i21 + (b2 ? 1 : 0) + i22 + i23 + i24 + l1 + i25 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2));
    }

    public void mainTest(String[] strArr1) {
        int i26 = 89, i27 = 60693, i28 = -22415, i29 = -117, i30 = -20740, i33 = 11, i34 = 41835, i35 = 6, i36 = 54793, i37 = 9, i38 = 11, i39 = 185;
        long l2 = 1191691399745042754L;
        double d3 = 2.34596;
        short[] sArr = new short[N];
        byte[] byArr = new byte[N];
        float[] fArr = new float[N];
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(sArr, (short) -15539);
        FuzzerUtils.init(byArr, (byte) -18);
        FuzzerUtils.init(fArr, 79.371F);
        FuzzerUtils.init(bArr, false);
        for (short s : sArr) {
            {
                java.io.PrintStream ax$615 = System.out;
                java.io.PrintStream ax$616 = System.err;
                java.io.PrintStream ax$617 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$617);
                System.setErr(ax$617);
                try {
                    ax$611 = true;
                    for (int ax$613 = 0; ax$613 < 5009; ax$613 += 1) vMeth(2011177295);
                } catch (java.lang.Throwable ax$614) {
                } finally {
                    ax$611 = false;
                }
                System.setOut(ax$615);
                System.setErr(ax$616);
            }
            vMeth(i26);
            byArr[(-56425 >>> 1) % N] = (byte) i26;
            if (Test.bFld) {
                Test.bFld = Test.bFld;
                Test.instanceCount = i26;
                switch(((i26 >>> 1) % 10) + 84) {
                    case 84:
                        switch(((-1 >>> 1) % 6) + 41) {
                            case 41:
                                for (i27 = 1; i27 < 20; i27++) {
                                    i26 += (10 + (i27 * i27));
                                    Test.sFld ^= (short) Test.instanceCount;
                                    i29 = 1;
                                    do {
                                        i26 += -46;
                                        Test.instanceCount |= i29;
                                        i26 += (((i29 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                                    } while (++i29 < 2);
                                    fArr[i27] -= Test.sFld;
                                    for (l2 = 1; 2 > l2; ++l2) {
                                        int i31 = 37044;
                                        i30 &= (int) Test.instanceCount;
                                        i28 += i27;
                                        i28 -= (int) l2;
                                        i30 += (int) l2;
                                        i30 = (int) l2;
                                        i28 += (int) (((l2 * i30) + i28) - fFld);
                                        sArr = sArr;
                                        i31 = i28;
                                        i30 = Test.byFld;
                                    }
                                    Test.instanceCount ^= Test.instanceCount;
                                    fArr[i27 + 1] = l2;
                                    bArr[i27] = Test.bFld;
                                    i26 += (i27 * i30);
                                }
                                Test.iArrFld[(-107 >>> 1) % N] -= (int) d3;
                                Test.iArrFld[(i27 >>> 1) % N] >>= 18738;
                                i30 = i28;
                                Test.instanceCount = i29;
                                i28 = Test.byFld;
                                Test.dArrFld[(i28 >>> 1) % N] -= -10963;
                                d3 += 47714;
                                Test.sFld = (short) 118.48F;
                                Test.byFld *= (byte) i30;
                                i26 = i30;
                                Test.iArrFld[(13 >>> 1) % N] -= 5;
                                break;
                            case 42:
                                bArr[(i29 >>> 1) % N] = Test.bFld;
                                for (i33 = 1; i33 < 20; i33++) {
                                    i26 += (i33 + i29);
                                    i28 -= 247;
                                    i30 += (((i33 * l2) + fFld) - i26);
                                }
                                for (i35 = 1; i35 < 20; i35++) {
                                    for (i37 = 2; i37 > i35; i37 -= 2) {
                                        Test.iArrFld[i35 + 1] -= i29;
                                        i28 = i36;
                                        if (Test.bFld) {
                                            Test.lArrFld = Test.lArrFld;
                                            Test.instanceCount += (long) d3;
                                            i28 += (int) fFld;
                                            d3 += fFld;
                                            Test.instanceCount += i37;
                                            i36 = (int) l2;
                                            lFld = -8235188355754493344L;
                                            try {
                                                i34 = (-11600 / i38);
                                                i28 = (i36 / 76);
                                                i28 = (840810609 % i35);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            Test.iArrFld[i37] = i33;
                                            i38 -= i27;
                                            Test.byFld = (byte) i37;
                                            Test.iArrFld[i35 - 1] *= (int) d3;
                                            switch(((i35 % 7) * 5) + 127) {
                                                case 144:
                                                    i28 %= (int) ((long) (d3) | 1);
                                                    break;
                                                case 136:
                                                    Test.iArrFld[i37 - 1] ^= -189;
                                                    lFld += i29;
                                                    fFld += (float) d3;
                                                    bArr = FuzzerUtils.boolean1array(N, (boolean) true);
                                                    i34 *= (int) l2;
                                                    i26 = i30;
                                                    if (Test.bFld) {
                                                        i38 = i34;
                                                        Test.iArrFld[(i34 >>> 1) % N] *= (int) 2.338F;
                                                        lFld += i37;
                                                    } else if (Test.bFld) {
                                                        try {
                                                            Test.iArrFld[i35 - 1] = (Test.iArrFld[i37] / -73);
                                                            i36 = (Test.iArrFld[i35 + 1] / Test.iArrFld[i37 - 1]);
                                                            Test.iArrFld[i35] = (-123539453 % i38);
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                    } else {
                                                        i34 += (38289 + (i37 * i37));
                                                    }
                                                    break;
                                                case 157:
                                                    lFld += (-102 + (i37 * i37));
                                                case 151:
                                                    i26 = (int) lFld;
                                                case 149:
                                                    i38 += i30;
                                                    break;
                                                case 148:
                                                    i28 += i37;
                                                    break;
                                                case 130:
                                                default:
                                                    lFld = (long) d3;
                                            }
                                        } else if (Test.bFld) {
                                            fFld += 240;
                                        } else {
                                            i26 = i37;
                                        }
                                    }
                                }
                                break;
                            case 43:
                                i34 = i26;
                                break;
                            case 44:
                                fFld = i39;
                                break;
                            case 45:
                                fFld = i33;
                                break;
                            case 46:
                                Test.iArrFld[(i26 >>> 1) % N] = Test.sFld;
                                break;
                        }
                    case 85:
                        Test.iArrFld[(i39 >>> 1) % N] *= i30;
                        break;
                    case 86:
                    case 87:
                        fFld += (float) d3;
                        break;
                    case 88:
                        try {
                            i30 = (i39 % i35);
                            i34 = (i34 % -58482);
                            i26 = (1004668726 / i33);
                        } catch (ArithmeticException a_e) {
                        }
                        break;
                    case 89:
                        try {
                            i26 = (i34 / i36);
                            i34 = (i30 / -9);
                            i28 = (i36 / -61757);
                        } catch (ArithmeticException a_e) {
                        }
                        break;
                    case 90:
                        s = (short) i29;
                    case 91:
                        lFld += Test.instanceCount;
                        break;
                    case 92:
                        if (true)
                            break;
                        break;
                    case 93:
                        Test.fArrFld = Test.fArrFld;
                        break;
                }
            } else if (Test.bFld) {
                i36 = -14;
            } else {
                i36 += 62222;
            }
        }
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 l2 i30 = " + i29 + "," + l2 + "," + i30);
        FuzzerUtils.out.println("d3 i33 i34 = " + Double.doubleToLongBits(d3) + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("i38 i39 sArr = " + i38 + "," + i39 + "," + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("byArr fArr bArr = " + FuzzerUtils.checkSum(byArr) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.bFld = " + Test.instanceCount + "," + Test.byFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld fFld lFld = " + Test.sFld + "," + Float.floatToIntBits(fFld) + "," + lFld);
        FuzzerUtils.out.println("Test.fArrFld Test.lArrFld Test.sArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("Test.iArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
            {
                java.io.PrintStream ax$608 = System.out;
                java.io.PrintStream ax$609 = System.err;
                java.io.PrintStream ax$610 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$610);
                System.setErr(ax$610);
                try {
                    for (int ax$606 = -2839; ax$606 < 5394; ax$606 += 1) {
                        long ax$603 = vMeth1_check_sum;
                        long ax$604 = iMeth_check_sum;
                        try {
                            if (vMeth1_check_sum != iMeth_check_sum)
                                ;
                        } catch (Throwable ax$605) {
                        } finally {
                            vMeth1_check_sum = ax$603;
                            iMeth_check_sum = ax$604;
                        }
                    }
                } catch (Throwable ax$607) {
                }
                System.setOut(ax$608);
                System.setErr(ax$609);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$611 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
