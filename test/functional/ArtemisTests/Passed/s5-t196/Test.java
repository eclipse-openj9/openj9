// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.Socket;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.concurrent.atomic.AtomicIntegerArray;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 6027423031800508975L;

    public int iFld = -3;

    public boolean bFld = true;

    public static short sFld = 4570;

    public double dFld = -30.57461;

    public float fFld = 1.608F;

    public static int iFld1 = 34900;

    public static int iArrFld[] = new int[N];

    public byte byArrFld[] = new byte[N];

    public float fArrFld[] = new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 117);
    }

    public static long lMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i11) {
        if (Test.ax$15) {
            final int ax$22 = Test.iFld1;
            AtomicIntegerArray ax$17 = null;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                for (int ax$20 = iFld1 - 1; ax$20 >= 0; ax$20 -= 1) {
                    ax$17.compareAndSet(ax$20, iFld1, iFld1);
                }
            } catch (Throwable ax$21) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iFld1 = ax$22;
            return 1971671404;
        }
        int i12 = 12;
        int i13 = -5;
        int i14 = -6;
        int i15 = -3964;
        int i16 = -60944;
        int i17 = 6;
        int i18 = -53680;
        int i19 = 171;
        int i20 = 48437;
        boolean b1 = false;
        double d = -97.73025;
        double d1 = -1.34229;
        float f1 = 1.101F;
        float fArr[] = new float[N];
        long l2 = 1869976333L;
        long lArr[][] = new long[N][N];
        byte byArr[] = new byte[N];
        FuzzerUtils.init(byArr, ((byte) (84)));
        FuzzerUtils.init(lArr, -8L);
        FuzzerUtils.init(fArr, 0.753F);
        for (i12 = 4; 172 > i12; i12++) {
            b1 = b1;
            i14 = 1;
            do {
                byte by = -49;
                Test.iArrFld[i12 + 1] *= ((int) (Test.instanceCount));
                b1 = b1;
                Test.instanceCount = by;
                d += i14;
                i15 = 1;
                do {
                    f1 *= Test.instanceCount;
                    i13 = i13;
                    Test.sFld = ((short) (-84));
                    Test.iArrFld[i14 + 1] = ((int) (Test.instanceCount));
                    f1 = Test.instanceCount;
                    i13 += i13;
                } while ((++i15) < 1 );
                i13 += ((int) (d));
                if (i12 != 0) {
                }
                i11 = by;
                Test.iArrFld[i12 - 1] |= i15;
                byArr[i12 - 1] -= ((byte) (i12));
                for (i16 = 1; 1 > i16; i16++) {
                    d1 += 9060123431632649586L;
                    b1 = true;
                }
                switch ((i12 % 2) + 52) {
                    case 52 :
                        for (i18 = 1; i18 < 1; i18++) {
                            Test.instanceCount = i16;
                            i17 -= ((int) (Test.instanceCount));
                            lArr[i14 + 1][i18] -= ((long) (f1));
                        }
                        i11 = i12;
                        fArr[i12 + 1] *= -77;
                        i20 = 1;
                        do {
                            i11 = i20;
                            switch ((i20 % 2) + 119) {
                                case 119 :
                                    Test.instanceCount += 16514L;
                                    Test.iArrFld[i14] *= by;
                                    i11 += i20 ^ i16;
                                    i19 = ((int) (l2));
                                    try {
                                        i11 = (-117) % i13;
                                        Test.iArrFld[i20 + 1] = Test.iArrFld[i20] / i13;
                                        i19 = Test.iArrFld[i12] % 59161;
                                    } catch (ArithmeticException a_e) {
                                    }
                                case 120 :
                                    fArr[i20 - 1] -= i12;
                                    break;
                            }
                        } while ((i20 += 3) < 1 );
                        break;
                    case 53 :
                        by *= ((byte) (i15));
                        break;
                }
            } while ((++i14) < 3 );
        }
        long meth_res = ((((((((((((((((i11 + i12) + i13) + (b1 ? 1 : 0)) + i14) + Double.doubleToLongBits(d)) + i15) + Float.floatToIntBits(f1)) + i16) + i17) + Double.doubleToLongBits(d1)) + i18) + i19) + i20) + l2) + FuzzerUtils.checkSum(byArr)) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public int iMeth(int i2, int i3, int i4) {
        int i5 = -4;
        int i6 = 1;
        int i7 = -10;
        int i8 = -237;
        int i9 = 47;
        int i10 = 154;
        long l = -2095963679L;
        long l1 = 21558L;
        float f2 = 1.604F;
        double dArr1[] = new double[N];
        FuzzerUtils.init(dArr1, -101.15473);
        iFld >>= Test.sFld;
        for (i5 = 212; i5 > 12; --i5) {
            i4 -= i3--;
            if (bFld = bFld)
                continue;

            Test.instanceCount -= ((long) (dFld - i3));
            for (l = 1; 3 > l; ++l) {
                if (true) {
                    fFld = ((i6 = -210) - 57602) + iFld;
                    switch ((i5 % 1) + 96) {
                        case 96 :
                            for (l1 = i5; l1 < 2; l1++) {
                                i3 += ((int) (l1));
                                Test.iArrFld[((int) (l1 + 1))] = ((int) (Test.iArrFld[((int) (l))] * (dArr1[((int) (l))] - (i3 * fFld))));
                                fFld += l1 + iFld;
                            }
                            for (i9 = 1; 2 > i9; i9++) {
                                {
                                    final int ax$29 = i7;
                                    try {
                                        Object[] ax$24 = new Object[]{ new Object(), new Object(), new Object(), new Object(), new Object(), new Object(), new Object() };
                                        Set ax$27 = null;
                                        for (int ax$23 = -530; ax$23 < (-530 + 6143); ax$23 += 1) {
                                            Test.AxOutputRedirectionHelper.redirect();
                                            try {
                                                ax$24 = new Object[i7];
                                            } catch (Throwable ax$26) {
                                            } finally {
                                            }
                                            Test.AxOutputRedirectionHelper.recover();
                                            Test.ax$15 = true;
                                            iMeth1(-1534534475);
                                            Test.ax$15 = false;
                                            Test.AxOutputRedirectionHelper.redirect();
                                            try {
                                                if (new LinkedHashSet(ax$27).hashCode() != ax$27.hashCode());
                                            } catch (Throwable ax$28) {
                                            } finally {
                                            }
                                            Test.AxOutputRedirectionHelper.recover();
                                        }
                                    } finally {
                                        i7 = ax$29;
                                    }
                                }
                                i6 ^= (Test.iArrFld[((int) (l - 1))]++) + iMeth1(52221);
                                i7 -= ((int) (13162L));
                                i10 = ((int) (2.151F));
                                if (i9 != 0) {
                                }
                                switch (((i3 >>> 1) % 3) + 22) {
                                    case 22 :
                                        if (bFld)
                                            break;

                                        Test.instanceCount += i9;
                                        fFld -= Test.instanceCount;
                                        i7 += ((int) (fFld));
                                        i4 = ((int) (l));
                                        byArrFld[i9 - 1] -= ((byte) (i6));
                                        {
                                            final boolean ax$11 = this.bFld;
                                            final int ax$12 = i2;
                                            final int ax$13 = i4;
                                            final long ax$14 = Test.iMeth_check_sum;
                                            try {
                                                String ax$4 = "s";
                                                boolean ax$1 = false;
                                                for (int ax$0 = -771; ax$0 < (-771 + 3682); ax$0 += 1) {
                                                    Test.AxOutputRedirectionHelper.redirect();
                                                    try {
                                                        if (bFld);
                                                    } catch (Throwable ax$6) {
                                                    } finally {
                                                    }
                                                    Test.AxOutputRedirectionHelper.recover();
                                                    if (!ax$1) {
                                                        dFld -= i3;
                                                        ax$1 = true;
                                                    }
                                                    Test.AxOutputRedirectionHelper.redirect();
                                                    try {
                                                        int ax$9 = i4 % 4;
                                                        i4 += (ax$9 > 1.0) ? 1 : 2;
                                                    } catch (Throwable ax$10) {
                                                    } finally {
                                                    }
                                                    Test.AxOutputRedirectionHelper.recover();
                                                }
                                            } finally {
                                                this.bFld = ax$11;
                                                i2 = ax$12;
                                                i4 = ax$13;
                                                Test.iMeth_check_sum = ax$14;
                                            }
                                        }
                                        i3 -= i8;
                                        Test.iFld1 += iFld;
                                    case 23 :
                                        if (bFld)
                                            continue;

                                        i4 = ((int) (l1));
                                        Test.instanceCount += ((i9 * l1) + l) - fFld;
                                        i2 += i6;
                                        Test.iArrFld[i9] = i7;
                                        if (bFld) {
                                            fFld += (-29671) + (i9 * i9);
                                            Test.iArrFld[i9] = i2;
                                            Test.instanceCount |= i4;
                                        } else if (bFld) {
                                            Test.instanceCount = i2;
                                        }
                                        break;
                                    case 24 :
                                        Test.iArrFld[i5 - 1] = i9;
                                        break;
                                    default :
                                        Test.instanceCount = ((long) (f2));
                                }
                            }
                            break;
                    }
                } else if (false) {
                    Test.iArrFld[i5] = i8;
                } else {
                    Test.instanceCount &= iFld;
                }
            }
        }
        long meth_res = (((((((((((i2 + i3) + i4) + i5) + i6) + l) + i7) + l1) + i8) + i9) + i10) + Float.floatToIntBits(f2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public long lMeth(float f, boolean b) {
        int i21 = 47417;
        int i22 = -14;
        int i23 = -57575;
        int i24 = -31879;
        int i25 = -36500;
        int i26 = -5;
        byte by1 = 40;
        iFld -= --iFld;
        Test.instanceCount -= Test.iArrFld[(6 >>> 1) % N] >>= iMeth(iFld, Test.iFld1, Test.iFld1);
        for (i21 = 150; i21 > 2; i21--) {
            i22 = i21;
            if (b)
                break;

            if (iFld != 0) {
            }
            Test.iFld1 = ((int) (Test.instanceCount));
            Test.instanceCount += ((i21 * fFld) + i23) - i22;
            Test.instanceCount *= i21;
            iFld += i21 * i21;
            for (i24 = 4; i24 > 1; i24 -= 3) {
                i25 = ((int) (Test.instanceCount));
                Test.iFld1 *= i24;
                i26 = 1;
                do {
                    bFld = false;
                    switch (((i21 % 6) * 5) + 83) {
                        case 95 :
                            Test.iArrFld[i24] = -12;
                            Test.iFld1 += ((i26 * i24) + Test.instanceCount) - f;
                            Test.iArrFld[i21 - 1] += -9;
                            iFld += i23;
                            by1 = ((byte) (Test.instanceCount));
                            fFld -= 10;
                            try {
                                Test.iArrFld[i21] = Test.iArrFld[i21] / i22;
                                Test.iArrFld[i21] = iFld % i25;
                                i23 = Test.iArrFld[i26 - 1] % 19018;
                            } catch (ArithmeticException a_e) {
                            }
                            if (bFld) {
                                Test.sFld += ((short) (-3));
                                Test.iFld1 -= ((int) (Test.instanceCount));
                                fFld -= by1;
                            } else {
                                switch ((i26 % 5) + 1) {
                                    case 1 :
                                        Test.iArrFld[i24] = i22;
                                        f = -44141;
                                        iFld -= iFld;
                                        Test.instanceCount += i26;
                                        i23 += ((i26 * iFld) + Test.sFld) - i26;
                                        break;
                                    case 2 :
                                        Test.iFld1 = ((int) (fFld));
                                        Test.iArrFld[i26] *= ((int) (Test.instanceCount));
                                        i22 = i24;
                                        i22 >>= i25;
                                        break;
                                    case 3 :
                                        iFld = i26;
                                        break;
                                    case 4 :
                                        fArrFld[i24 + 1] = Test.instanceCount;
                                        break;
                                    case 5 :
                                        f = Test.instanceCount;
                                        break;
                                }
                            }
                            break;
                        case 90 :
                            Test.instanceCount += Test.instanceCount;
                            break;
                        case 92 :
                            i23 += i26;
                            break;
                        case 100 :
                            i22 += ((int) (-1.999F));
                            break;
                        case 86 :
                            i22 += (-30) + (i26 * i26);
                        case 110 :
                            i25 += i26 | Test.instanceCount;
                            break;
                        default :
                            i23 += 10 + (i26 * i26);
                    }
                } while ((++i26) < 4 );
            }
        }
        long meth_res = (((((((Float.floatToIntBits(f) + (b ? 1 : 0)) + i21) + i22) + i23) + i24) + i25) + i26) + by1;
        lMeth_check_sum += meth_res;
        return ((long) (meth_res));
    }

    public void mainTest(String[] strArr1) {
        int i = 14;
        int i1 = -9240;
        int i27 = -59;
        int i28 = -10;
        int i29 = -190;
        int i30 = 93;
        int i31 = -29926;
        int i32 = -13;
        int i33 = 27529;
        int i34 = -5;
        int i35 = 58792;
        int i36 = -89;
        int i37 = -2;
        int i38 = 3;
        int i39 = 19349;
        int i40 = -97;
        int i41 = 20;
        int i43 = 46;
        int i44 = -8;
        byte by2 = 103;
        long l3 = 13L;
        long lArr1[] = new long[N];
        double dArr[] = new double[N];
        FuzzerUtils.init(dArr, 57.97837);
        FuzzerUtils.init(lArr1, -108L);
        Test.instanceCount -= iFld;
        Test.instanceCount += (++iFld) - (--Test.instanceCount);
        bFld = bFld;
        for (i = 7; i < 116; i++) {
            switch ((i % 1) + 105) {
                case 105 :
                    dArr[i] -= lMeth(fFld, bFld);
                    break;
            }
            for (i27 = 2; 46 > i27; i27++) {
                i28 += ((i27 * Test.iFld1) + i) - Test.iFld1;
                i28 -= 8;
                Test.instanceCount >>= -27637;
                for (i29 = 1; i29 < 2; i29++) {
                    if (bFld)
                        continue;

                    if (bFld) {
                        i31 = i1;
                        Test.iFld1 = Test.sFld;
                        i31 += by2;
                        fFld = Test.instanceCount;
                        Test.iArrFld[i29] -= 73;
                        fFld -= Test.instanceCount;
                        iFld -= Test.iFld1;
                    }
                }
                Test.instanceCount = 18135L;
                lArr1[i27 - 1] *= ((long) (-91.55881));
                for (i32 = i; i32 < 2; ++i32) {
                    fArrFld[i - 1] = i1;
                    i30 -= 0;
                    Test.iFld1 &= ((int) (Test.instanceCount));
                    Test.instanceCount -= i29;
                    lArr1[i32] = Test.instanceCount;
                    i28 |= i29;
                    Test.instanceCount = Test.instanceCount;
                    fFld -= iFld;
                    i31 <<= i27;
                }
                for (i34 = 1; i34 < 2; ++i34) {
                    Test.instanceCount += Test.instanceCount;
                    i35 *= i1;
                    Test.iArrFld[i34 + 1] = i34;
                    bFld = bFld;
                    Test.instanceCount += ((i34 * Test.instanceCount) + Test.instanceCount) - i27;
                }
                Test.instanceCount += ((long) (1.378F));
                i35 &= i31;
                Test.instanceCount = Test.instanceCount;
                i1 -= by2;
            }
        }
        Test.iFld1 += i28;
        i36 = 181;
        while ((i36 -= 3) > 0) {
            lArr1 = lArr1;
            i33 += i36;
            {
                final int ax$39 = i28;
                final int ax$40 = i43;
                try {
                    char[] ax$33 = new char[]{ 40000, 40001, 40002, 40003, 40004 };
                    char[] ax$35 = new char[100];
                    Socket ax$37 = new Socket();
                    boolean ax$31 = false;
                    for (int ax$30 = -337; ax$30 < (-337 + 4160); ax$30 += 1) {
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            i43 += Math.abs(ax$33[i28] - ax$35[i28]);
                        } catch (Throwable ax$36) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                        if (!ax$31) {
                            Test.iArrFld[i36 + 1] |= Test.iFld1;
                            ax$31 = true;
                        }
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            if (ax$37.getLocalPort() <= 0);
                        } catch (Throwable ax$38) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                    }
                } finally {
                    i28 = ax$39;
                    i43 = ax$40;
                }
            }
            i31 += i36 * Test.instanceCount;
            iFld += i36;
            for (l3 = 4; l3 < 82; l3++) {
                Test.iArrFld = FuzzerUtils.int1array(N, ((int) (34617)));
                Test.instanceCount *= i29;
                Test.instanceCount = i30;
                i30 += ((int) (l3));
                Test.sFld <<= ((short) (i37));
            }
            try {
                i30 = i28 / (-27713);
                i35 = i28 % i27;
                i1 = i28 % (-33446);
            } catch (ArithmeticException a_e) {
            }
        }
        for (i38 = 7; i38 < 244; ++i38) {
            i30 -= i1;
        }
        i35 -= Test.sFld;
        byArrFld[(i30 >>> 1) % N] <<= ((byte) (i29));
        for (i40 = 3; 181 > i40; i40++) {
            i30 += i40 ^ i27;
            Test.instanceCount += i40 * i40;
            i39 *= i38;
            bFld = bFld;
        }
        for (int i42 : Test.iArrFld) {
            fFld = i31;
            for (i43 = 1; 20 > i43; i43++) {
                Test.iArrFld = Test.iArrFld;
                i35 = 12;
                i37 = -216;
                fFld = by2;
                lArr1[i43] >>>= i40;
                try {
                    i39 = 14 / i33;
                    i44 = i44 / Test.iArrFld[i43];
                    i44 = i27 % 26045;
                } catch (ArithmeticException a_e) {
                }
                Test.instanceCount += ((i43 * i28) + by2) - i;
            }
        }
        FuzzerUtils.out.println((((("i i1 i27 = " + i) + ",") + i1) + ",") + i27);
        FuzzerUtils.out.println((((("i28 i29 i30 = " + i28) + ",") + i29) + ",") + i30);
        FuzzerUtils.out.println((((("i31 by2 i32 = " + i31) + ",") + by2) + ",") + i32);
        FuzzerUtils.out.println((((("i33 i34 i35 = " + i33) + ",") + i34) + ",") + i35);
        FuzzerUtils.out.println((((("i36 l3 i37 = " + i36) + ",") + l3) + ",") + i37);
        FuzzerUtils.out.println((((("i38 i39 i40 = " + i38) + ",") + i39) + ",") + i40);
        FuzzerUtils.out.println((((("i41 i43 i44 = " + i41) + ",") + i43) + ",") + i44);
        FuzzerUtils.out.println((("dArr lArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + ",") + FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println((((("Test.instanceCount iFld bFld = " + Test.instanceCount) + ",") + iFld) + ",") + (bFld ? 1 : 0));
        FuzzerUtils.out.println((((("Test.sFld dFld fFld = " + Test.sFld) + ",") + Double.doubleToLongBits(dFld)) + ",") + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println((((("Test.iFld1 Test.iArrFld byArrFld = " + Test.iFld1) + ",") + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + FuzzerUtils.checkSum(byArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$15 = false;
}
