// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Locale;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -148L;

    public int iFld = 149;

    public float fFld = 15.628F;

    public static byte byFld = 116;

    public static int iFld1 = 27073;

    public static int iArrFld[] = new int[N];

    public static double dArrFld[] = new double[N];

    public short sArrFld[][] = new short[N][N];

    public static volatile byte byArrFld[] = new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3436);
        FuzzerUtils.init(Test.dArrFld, -83.46736);
        FuzzerUtils.init(Test.byArrFld, ((byte) (-8)));
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i3) {
        if (Test.ax$0) {
            double ax$1 = 0.43768891078600813;
            double[] ax$2 = new double[]{ 0.08354123074879827, 0.6410576070249334, 0.2103702136702177, 0.196508271107672 };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$1 = ax$2[1];
            } catch (Throwable ax$3) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return -1377196314;
        }
        float f2 = -6.581F;
        int i4 = -28;
        int i5 = -2;
        int i6 = 1656;
        int i7 = -1;
        int i8 = 12218;
        int i9 = -27802;
        int i10 = -107;
        byte by = -90;
        boolean b = true;
        long l1 = 3068273901L;
        double dArr[] = new double[N];
        FuzzerUtils.init(dArr, 0.49045);
        Test.instanceCount -= ((long) (f2));
        f2 /= i3 | 1;
        i4 = 1;
        do {
            i3 <<= i3;
        } while ((++i4) < 138 );
        i3 += i3;
        f2 -= i3;
        for (i5 = 9; i5 < 153; ++i5) {
            double d = 32.82172;
            i3 = ((int) (d));
            Test.instanceCount = by;
            i7 = 1;
            while ((++i7) < 4) {
                Test.instanceCount = 68;
                f2 = 112;
                Test.iArrFld[i7 + 1] &= i4;
                for (i8 = 1; i8 < 1; i8 += 2) {
                    b = b;
                    dArr[i8] -= 8295591802603693408L;
                    Test.instanceCount += i9;
                    by = ((byte) (i5));
                    Test.iArrFld[i7 + 1] >>= ((int) (4L));
                }
                b = b;
                for (l1 = i7; l1 < 1; ++l1) {
                    Test.instanceCount = Test.instanceCount;
                    i3 += ((int) (l1));
                    i3 = i7;
                    i6 = i9;
                    if (i8 != 0) {
                    }
                    Test.iArrFld[((int) (l1))] = by;
                    i6 += ((int) (l1 | i7));
                    i6 += ((int) (((l1 * i10) + l1) - i7));
                    Test.instanceCount += ((long) (f2));
                    i6 += ((int) (l1 ^ ((long) (f2))));
                    Test.instanceCount = ((long) (d));
                    Test.instanceCount = -2;
                    i3 += ((int) (l1));
                    if (b)
                        break;

                    i9 -= i7;
                }
            }
            Test.instanceCount >>>= l1;
        }
        long meth_res = (((((((((((i3 + Float.floatToIntBits(f2)) + i4) + i5) + i6) + by) + i7) + i8) + i9) + (b ? 1 : 0)) + l1) + i10) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static void vMeth1(float f1, int i2, long l) {
        byte by1 = 59;
        float f3 = -2.977F;
        int i11 = 5102;
        {
            final int ax$13 = Test.iFld1;
            try {
                float[] ax$5 = new float[16];
                float[] ax$6 = new float[]{ 0.58452153F, 0.08561945F, 0.46951926F, 0.40446132F, 0.98693746F, 0.6183967F };
                float[] ax$7 = new float[]{ -0.0F, -0.0F, 0.0F, -0.0F };
                double ax$10 = 0.07938075624197793;
                for (int ax$4 = -275; ax$4 < (-275 + 4763); ax$4 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$8 = 0; ax$8 < ax$7.length; ax$8 += 1) {
                            ax$7[ax$8] = ax$5[ax$8] * ax$6[ax$8];
                        }
                    } catch (Throwable ax$9) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    iMeth(1450922336);
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                    } catch (Throwable ax$12) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                Test.iFld1 = ax$13;
            }
        }
        iMeth(i2);
        by1 *= ((byte) (l));
        for (f3 = 2; f3 < 195; f3++) {
            i2 ^= i2;
        }
        i11 *= i11;
        vMeth1_check_sum += ((((Float.floatToIntBits(f1) + i2) + l) + by1) + Float.floatToIntBits(f3)) + i11;
    }

    public static void vMeth(int i, float f, int i1) {
        int i12 = 202;
        int i13 = -63252;
        int i14 = -22286;
        int i15 = 204;
        int i16 = 15533;
        int i17 = -5;
        int i18 = -12704;
        float f4 = 0.98F;
        double d1 = 4.61563;
        short s = 7906;
        byte by2 = -18;
        long l2 = 117L;
        long lArr[] = new long[N];
        FuzzerUtils.init(lArr, -1L);
        vMeth1(f, -26, Test.instanceCount);
        for (i12 = 8; i12 < 230; i12 += 2) {
            i13 += i12 | i1;
            i14 = 1;
            do {
                for (f4 = 1; f4 < 1; f4++) {
                    i13 = -120;
                }
                for (i16 = 1; i16 < 1; ++i16) {
                    boolean b1 = false;
                    Test.instanceCount += i18;
                    f += i16 * i16;
                    i *= 2;
                    Test.instanceCount += i16;
                    if (true) {
                        Test.iArrFld[(i12 >>> 1) % N] >>= i14;
                        Test.instanceCount -= i17;
                        d1 *= s;
                        Test.dArrFld[i12] += i15;
                        i13 >>>= i14;
                        switch (((((-6) >>> 1) % 8) * 5) + 19) {
                            case 57 :
                                f += i15;
                            case 49 :
                                i18 |= ((int) (Test.instanceCount));
                                Test.instanceCount = i13;
                                Test.iArrFld[i16 + 1] >>= ((int) (5L));
                                i13 += i16 * i16;
                                i18 -= i17;
                                switch ((i12 % 4) + 37) {
                                    case 37 :
                                        i13 = ((int) (Test.instanceCount));
                                        lArr[i12] = Test.instanceCount;
                                        i += ((i16 * f) + i18) - f;
                                        i18 -= ((int) (d1));
                                        Test.iArrFld = Test.iArrFld;
                                        break;
                                    case 38 :
                                        if (b1) {
                                            i17 -= ((int) (Test.instanceCount));
                                            vMeth_check_sum += ((((((((((((((i + Float.floatToIntBits(f)) + i1) + i12) + i13) + i14) + Float.floatToIntBits(f4)) + i15) + i16) + i17) + i18) + Double.doubleToLongBits(d1)) + s) + by2) + l2) + FuzzerUtils.checkSum(lArr);
                                            return;
                                        }
                                        f = i18;
                                        switch ((i12 % 10) * 5) {
                                            case 46 :
                                                Test.instanceCount -= i15;
                                                i15 %= ((int) (s | 1));
                                                d1 = i13;
                                                break;
                                            case 47 :
                                                Test.instanceCount >>>= i13;
                                            case 27 :
                                                Test.iArrFld[i16 + 1] += s;
                                            case 48 :
                                                i = i15;
                                                break;
                                            case 12 :
                                                by2 /= ((byte) (Test.instanceCount | 1));
                                            case 34 :
                                                i18 -= ((int) (Test.instanceCount));
                                                break;
                                            case 7 :
                                                Test.instanceCount += ((i16 * s) + i12) - i18;
                                            case 10 :
                                                Test.instanceCount ^= Test.instanceCount;
                                            case 9 :
                                                if (b1)
                                                    break;

                                            case 24 :
                                                if (b1)
                                                    continue;

                                                break;
                                        }
                                        break;
                                    case 39 :
                                        l2 = i15;
                                        break;
                                    case 40 :
                                        by2 += ((byte) (63560 + (i16 * i16)));
                                        break;
                                }
                                break;
                            case 48 :
                                Test.instanceCount = i14;
                                break;
                            case 24 :
                                if (i14 != 0) {
                                    vMeth_check_sum += ((((((((((((((i + Float.floatToIntBits(f)) + i1) + i12) + i13) + i14) + Float.floatToIntBits(f4)) + i15) + i16) + i17) + i18) + Double.doubleToLongBits(d1)) + s) + by2) + l2) + FuzzerUtils.checkSum(lArr);
                                    return;
                                }
                                break;
                            case 50 :
                                Test.iArrFld[i16 + 1] += i12;
                            case 39 :
                                lArr[i16 + 1] = i15;
                            case 52 :
                                Test.instanceCount = i12;
                                break;
                            case 45 :
                                Test.iArrFld[i12 - 1] >>>= i13;
                            default :
                                i13 += i16;
                        }
                    } else if (b1) {
                        f = i;
                    }
                }
            } while ((++i14) < 5 );
        }
        vMeth_check_sum += ((((((((((((((i + Float.floatToIntBits(f)) + i1) + i12) + i13) + i14) + Float.floatToIntBits(f4)) + i15) + i16) + i17) + i18) + Double.doubleToLongBits(d1)) + s) + by2) + l2) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {
        if (Test.ax$20) {
            final long ax$25 = Test.instanceCount;
            long[] ax$22 = new long[]{ -6600905965693219837L, -4555775546257576949L, 7430386884057033232L, 5368772207594844947L, -270563766901261718L, 7443068964819785211L, 5533253110198105746L, 8673027699644102346L };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                for (long ax$23 = 0; ax$23 < 10; ax$23++) {
                    instanceCount += ax$22[0];
                }
            } catch (Throwable ax$24) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.instanceCount = ax$25;
            return;
        }
        int i19 = -7;
        int i20 = -50374;
        int i21 = -32730;
        int i22 = -32991;
        int i24 = 12;
        int i25 = -2;
        int i26 = 117;
        int i27 = -13;
        int i28 = -84;
        int i29 = -236;
        int i30 = -39498;
        int i31 = 2;
        int i32 = 57728;
        int i33 = 48936;
        int i34 = -199;
        int i35 = 64384;
        int i36 = 25;
        int i37 = -64012;
        int i38 = -203;
        int i39 = -17261;
        int i40 = 48187;
        int i41 = 185;
        int iArr[] = new int[N];
        double d2 = 0.101701;
        boolean b2 = false;
        short s1 = -20875;
        float fArr[] = new float[N];
        long lArr1[] = new long[N];
        FuzzerUtils.init(fArr, 98.284F);
        FuzzerUtils.init(lArr1, -4008245295L);
        FuzzerUtils.init(iArr, -48385);
        vMeth(iFld, fFld, iFld);
        for (i19 = 11; i19 < 246; i19++) {
            iFld *= ((int) (d2));
            iFld = -25761;
            Test.instanceCount = Test.instanceCount;
            fArr[i19] = Test.byFld;
            Test.instanceCount = i20;
            d2 = i19;
        }
        for (i21 = 11; i21 < 194; ++i21) {
            int i23 = 14;
            i23 += i21;
            i22 = iFld;
            i22 *= 3;
            for (i24 = 1; i24 < 28; ++i24) {
                Test.iArrFld[i21] = i22;
                sArrFld[i24][i24 + 1] >>= ((short) (i22));
                iFld *= i24;
                for (i26 = 1; i26 < 2; i26 += 3) {
                    lArr1[i21 - 1] *= Test.instanceCount;
                    iFld -= i21;
                    i28 += ((i26 * i28) + i22) - i19;
                    i23 = iFld;
                }
                i22 = Test.byFld;
                Test.iArrFld[i21 - 1] >>= ((int) (Test.instanceCount));
            }
        }
        for (i29 = 4; i29 < 206; ++i29) {
            fFld *= 14;
            for (i31 = 1; 25 > i31; i31++) {
                for (i33 = 1; i33 < 2; i33++) {
                    Test.instanceCount *= i28;
                    i20 += (-54443) + (i33 * i33);
                    fFld = Test.instanceCount;
                    Test.byFld += ((byte) (i30));
                    b2 = b2;
                    i34 |= s1;
                    Test.instanceCount >>= Test.instanceCount;
                    i30 += i33 * Test.instanceCount;
                    fFld = -7;
                    Test.iArrFld[i33 + 1] += ((int) (Test.instanceCount));
                    i25 += i20;
                    b2 = b2;
                    i22 += -7;
                    i32 += ((int) (190L));
                }
                fFld += ((float) (-97.66194));
                i20 += i31 + i21;
            }
            for (i35 = 1; i35 < 25; i35++) {
                for (i37 = i29; i37 < 2; ++i37) {
                    s1 += ((short) (Test.instanceCount));
                }
                i38 <<= i35;
                i36 -= i38;
                i25 -= ((int) (Test.instanceCount));
                s1 -= ((short) (-2.4794));
                i20 *= Test.byFld;
                for (i39 = 1; i39 < 2; ++i39) {
                    Test.iArrFld[i39] >>= i30;
                    i32 -= i39;
                    i40 += s1;
                    switch ((i29 % 4) + 71) {
                        case 71 :
                            fArr[i29] += i26;
                            Test.iArrFld[i29 - 1] >>= i26;
                            switch (((i25 >>> 1) % 8) * 5) {
                                case 14 :
                                    try {
                                        i25 = i30 % (-252);
                                        i22 = i31 / 172;
                                        i20 = 212 % i27;
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i38 = i38;
                                    if (b2) {
                                        i32 |= 145;
                                        fFld += ((i39 * i38) + fFld) - i40;
                                        Test.instanceCount -= i39;
                                        fFld = Test.instanceCount;
                                        Test.instanceCount += i39 ^ i29;
                                    } else if (b2) {
                                        i40 = i19;
                                        i27 += i39;
                                        if (b2)
                                            continue;

                                        Test.iArrFld = Test.iArrFld;
                                        i28 >>= ((int) (3836271867L));
                                        i22 += i37;
                                        try {
                                            Test.iArrFld[i35 - 1] = Test.iArrFld[i29] % 25;
                                            iArr[i35 - 1] = i30 / (-727725505);
                                            i22 = i24 % (-13840);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        i20 >>= i41;
                                    } else {
                                        Test.byFld -= ((byte) (Test.instanceCount));
                                    }
                                    break;
                                case 23 :
                                    i30 += i39 * i39;
                                    break;
                                case 11 :
                                    Test.iFld1 = Test.iFld1;
                                    break;
                                case 3 :
                                    Test.byArrFld[i35] = ((byte) (Test.instanceCount));
                                    break;
                                case 18 :
                                    d2 += -37861;
                                    break;
                                case 19 :
                                    i25 = i41;
                                case 36 :
                                    iArr = Test.iArrFld;
                                    break;
                                case 8 :
                                    Test.byFld <<= ((byte) (i31));
                            }
                        case 72 :
                            i22 &= i20;
                            break;
                        case 73 :
                            i25 -= s1;
                            break;
                        case 74 :
                            Test.iFld1 = -123;
                            break;
                    }
                }
            }
        }
        FuzzerUtils.out.println((((("i19 i20 d2 = " + i19) + ",") + i20) + ",") + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println((((("i21 i22 i24 = " + i21) + ",") + i22) + ",") + i24);
        FuzzerUtils.out.println((((("i25 i26 i27 = " + i25) + ",") + i26) + ",") + i27);
        FuzzerUtils.out.println((((("i28 i29 i30 = " + i28) + ",") + i29) + ",") + i30);
        FuzzerUtils.out.println((((("i31 i32 i33 = " + i31) + ",") + i32) + ",") + i33);
        FuzzerUtils.out.println((((("i34 b2 s1 = " + i34) + ",") + (b2 ? 1 : 0)) + ",") + s1);
        FuzzerUtils.out.println((((("i35 i36 i37 = " + i35) + ",") + i36) + ",") + i37);
        FuzzerUtils.out.println((((("i38 i39 i40 = " + i38) + ",") + i39) + ",") + i40);
        FuzzerUtils.out.println((((("i41 fArr lArr1 = " + i41) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + ",") + FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println((((("Test.instanceCount iFld fFld = " + Test.instanceCount) + ",") + iFld) + ",") + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println((((("Test.byFld Test.iFld1 Test.iArrFld = " + Test.byFld) + ",") + Test.iFld1) + ",") + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println((((("Test.dArrFld sArrFld Test.byArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld))) + ",") + FuzzerUtils.checkSum(sArrFld)) + ",") + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        {
            final long ax$19 = Test.vMeth1_check_sum;
            try {
                for (int ax$14 = -11; ax$14 < (-11 + 19136); ax$14 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$16 = 0; ax$16 < 10000; ax$16++) {
                            int ax$17 = ax$16 % 4;
                            vMeth1_check_sum += ((ax$17 >= 1) && (ax$17 < 3)) ? 1L : 2L;
                        }
                    } catch (Throwable ax$18) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                Test.vMeth1_check_sum = ax$19;
            }
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                {
                    try {
                        InetAddress ax$27 = null;
                        String ax$28 = "This is a message";
                        for (int ax$26 = -304; ax$26 < (-304 + 12420); ax$26 += 1) {
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                ax$27 = InetAddress.getByName(ax$28);
                                boolean ax$29 = ax$27.isReachable(3000);
                                if (ax$29) {
                                } else {
                                }
                            } catch (Throwable ax$30) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                            Test.ax$20 = true;
                            _instance.mainTest(new String[]{ "s", "s", "s", "s", "s", "s", "s", "s" });
                            Test.ax$20 = false;
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                new SimpleDateFormat("yy", ((Locale) (null)));
                            } catch (Throwable ax$31) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                        }
                    } finally {
                    }
                }
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$20 = false;
}
