// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -89L;

    public static double dFld = 0.57856;

    public static short sFld = 26262;

    public static boolean bFld = true;

    public static byte byFld = 59;

    public static int iFld = -38737;

    public static volatile float fFld = -38.541F;

    public static long[] lArrFld = new long[N];

    public static int[] iArrFld = new int[N];

    public byte[] byArrFld = new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 1795054865L);
        FuzzerUtils.init(Test.iArrFld, 9);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3) {
        float f = 2.186F;
        int i4 = 31, i5 = -3, i6 = -13498, i7 = -8649, i8 = 1, iArr[] = new int[N];
        byte by = 70;
        boolean b = true;
        double d1 = -1.110480;
        short[] sArr = new short[N];
        FuzzerUtils.init(sArr, (short) 27005);
        FuzzerUtils.init(iArr, 115);
        i3 = (int) f;
        Test.lArrFld[(i3 >>> 1) % N] = Test.instanceCount;
        i4 = 1;
        while (++i4 < 180) {
            i3 += (((i4 * i3) + f) - f);
            Test.instanceCount = Test.instanceCount;
            f += by;
            Test.iArrFld[i4] -= (int) f;
            i3 += i4;
            f += i3;
            for (i5 = i4; i5 < 3; i5++) {
                Test.lArrFld = Test.lArrFld;
                if (b)
                    continue;
                for (i7 = 1; i7 < 1; ++i7) {
                    Test.instanceCount = i4;
                    f += ((long) i7 ^ (long) Test.instanceCount);
                    switch((((i7 >>> 1) % 7) * 5) + 27) {
                        case 37:
                            i3 *= i5;
                            i3 += -189;
                            i6 *= i7;
                            break;
                        case 42:
                            switch(((i5 % 3) * 5) + 20) {
                                case 35:
                                    d1 += -12L;
                                    d1 = f;
                                    if (b) {
                                        i6 = -64630;
                                        i3 += (i7 * i7);
                                        try {
                                            i3 = (-96 % i8);
                                            i8 = (-1823349691 / i4);
                                            Test.iArrFld[i7 - 1] = (i4 % -55577);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        Test.dFld -= i4;
                                        i8 = i4;
                                        Test.iArrFld[i4 + 1] -= i6;
                                    } else {
                                        i6 += (i7 * i3);
                                        switch(((i4 % 6) * 5) + 61) {
                                            case 74:
                                                Test.iArrFld[i5] |= 12;
                                                if (i6 != 0) {
                                                    vMeth1_check_sum += i3 + Float.floatToIntBits(f) + i4 + by + i5 + i6 + (b ? 1 : 0) + i7 + i8 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr);
                                                    return;
                                                }
                                                Test.iArrFld[i7 - 1] -= -9;
                                                Test.iArrFld[i7] = 4;
                                                i6 = i3;
                                                i3 = (int) d1;
                                                break;
                                            case 86:
                                                Test.iArrFld[i4 + 1] >>= i4;
                                                break;
                                            case 88:
                                                Test.sFld &= (short) Test.instanceCount;
                                                break;
                                            case 62:
                                                Test.iArrFld[i7] += (int) f;
                                                break;
                                            case 63:
                                                d1 += -8642813318634188052L;
                                                break;
                                            case 64:
                                                i8 += (2915 + (i7 * i7));
                                                break;
                                        }
                                    }
                                    break;
                                case 23:
                                    i8 <<= (int) Test.instanceCount;
                                    break;
                                case 24:
                                    try {
                                        i8 = (Test.iArrFld[i4 - 1] % -103);
                                        i3 = (-23227 / Test.iArrFld[i5 - 1]);
                                        i6 = (i4 / 47557);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    break;
                            }
                            break;
                        case 45:
                            i8 *= i4;
                            break;
                        case 60:
                            i6 = i5;
                            break;
                        case 46:
                            Test.instanceCount -= Test.instanceCount;
                            break;
                        case 50:
                            Test.instanceCount += (i7 * i4);
                            break;
                        case 51:
                            sArr[i7 - 1] >>= (short) i7;
                            break;
                        default:
                            iArr[i4 + 1] = 11;
                    }
                }
            }
        }
        vMeth1_check_sum += i3 + Float.floatToIntBits(f) + i4 + by + i5 + i6 + (b ? 1 : 0) + i7 + i8 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(double d, short s, int i2) {
        int i9 = 125, i10 = -1, i11 = 14, i12 = -1571, i13 = 14, i14 = -6474, i15 = -9, i16 = -1793, i17 = -24636;
        float f1 = -110.598F;
        double[] dArr = new double[N];
        FuzzerUtils.init(dArr, 63.79154);
        vMeth1(i2);
        Test.iArrFld = Test.iArrFld;
        i9 = 114;
        while (--i9 > 0) {
            for (i10 = 1; 5 > i10; ++i10) {
                Test.instanceCount = i2;
                i11 = -40692;
                i11 -= i9;
                f1 *= i10;
                dArr[i9 - 1] *= i9;
                f1 -= Test.instanceCount;
                for (i12 = 1; i12 < 2; ++i12) {
                    i13 = (int) f1;
                    i13 -= i12;
                }
                Test.bFld = false;
            }
            Test.byFld = (byte) i9;
            i13 += (((i9 * i13) + f1) - f1);
            i11 <<= i10;
            Test.iArrFld[i9] -= (int) Test.instanceCount;
            i13 += (int) f1;
            d = 113;
            Test.instanceCount = i10;
            f1 += Test.byFld;
            Test.iArrFld[i9] += 46;
            i2 += (int) (94L + (i9 * i9));
            i2 += i9;
            Test.sFld += (short) (i9 * i9);
            i11 *= i12;
            Test.instanceCount <<= i13;
        }
        i2 *= i10;
        for (i14 = 8; i14 < 146; i14++) {
            Test.bFld = false;
            for (i16 = 1; i16 < 4; ++i16) {
                i13 = (int) Test.instanceCount;
                switch(((i14 % 2) * 5) + 4) {
                    case 13:
                        Test.instanceCount += (-36588 + (i16 * i16));
                        Test.byFld = (byte) i9;
                        i2 -= 202;
                        break;
                    case 5:
                        Test.iArrFld[i14 - 1] = i17;
                    default:
                        Test.sFld += (short) (((i16 * i13) + i11) - i16);
                }
                {
                    java.io.PrintStream ax$5 = System.out;
                    java.io.PrintStream ax$6 = System.err;
                    java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$7);
                    System.setErr(ax$7);
                    try {
                        for (int ax$3 = -893; ax$3 < 4226; ax$3 += 1) {
                            float ax$1 = f1;
                            try {
                                for (int ax$0 = 576 - 1; ax$0 >= 0; ax$0--) {
                                    f1 -= 976981405.0f;
                                }
                            } catch (Throwable ax$2) {
                            } finally {
                                f1 = ax$1;
                            }
                        }
                    } catch (Throwable ax$4) {
                    }
                    System.setOut(ax$5);
                    System.setErr(ax$6);
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + s + i2 + i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(int i1) {
        if (ax$8) {
            try {
                boolean ax$9 = false;
                ax$9 = true;
            } catch (Throwable ax$10) {
            } finally {
            }
            return -2125084424;
        }
        int i18 = -3, i19 = -8, i20 = -13, i21 = -5566, i22 = 9;
        double d2 = -2.63639, dArr1[] = new double[N];
        float f2 = 34.1003F, fArr[] = new float[N];
        FuzzerUtils.init(fArr, -62.164F);
        FuzzerUtils.init(dArr1, 0.49609);
        fArr[(i1 >>> 1) % N] += -242L;
        vMeth(Test.dFld, (short) (7060), 6);
        for (i18 = 7; i18 < 248; i18++) {
            i1 >>= -49;
            Test.sFld += (short) (i18 * i18);
            dArr1[i18 + 1] += i18;
            Test.instanceCount += (i18 | Test.instanceCount);
            Test.byFld *= (byte) 148;
            d2 = 1;
            do {
                Test.instanceCount = Test.instanceCount;
                for (i20 = 1; i20 < 1; i20++) {
                    i21 = i18;
                    Test.iArrFld[(int) (d2 - 1)] = i21;
                    i19 += i20;
                    Test.iArrFld[i20] -= (int) f2;
                    Test.lArrFld[i18 - 1] -= i18;
                    i21 <<= i20;
                    i21 += i20;
                    Test.instanceCount >>= i19;
                    Test.sFld *= (short) f2;
                    switch((int) ((d2 % 10) + 115)) {
                        case 115:
                            Test.instanceCount += (i20 * Test.instanceCount);
                            i21 += 6;
                            i19 += (i20 * f2);
                            f2 = -8L;
                            i1 &= i19;
                            break;
                        case 116:
                            f2 += (i20 * Test.instanceCount);
                            i19 += (((i20 * i20) + f2) - i18);
                            i22 *= i22;
                            Test.instanceCount = i20;
                            f2 -= -4971279074545982427L;
                            Test.sFld += (short) 74L;
                            fArr[(Test.iFld >>> 1) % N] -= Test.instanceCount;
                            switch(((i1 >>> 1) % 7) + 101) {
                                case 101:
                                    i1 -= i22;
                                    i22 -= Test.iFld;
                                    Test.iArrFld[(-8 >>> 1) % N] >>= i20;
                                    break;
                                case 102:
                                    if (Test.bFld)
                                        break;
                                    break;
                                case 103:
                                    i22 += (int) 42.471F;
                                    break;
                                case 104:
                                    Test.iFld = i18;
                                    break;
                                case 105:
                                case 106:
                                    Test.lArrFld = Test.lArrFld;
                                    break;
                                case 107:
                                default:
                                    i19 = i22;
                            }
                        case 117:
                            Test.instanceCount %= (Test.iFld | 1);
                        case 118:
                            Test.iArrFld[i20 - 1] *= 126;
                            break;
                        case 119:
                            Test.instanceCount += (i20 * Test.instanceCount);
                            break;
                        case 120:
                            i1 += (((i20 * i18) + i20) - Test.instanceCount);
                            break;
                        case 121:
                            Test.byFld = (byte) i21;
                        case 122:
                            Test.instanceCount += (i20 - Test.instanceCount);
                            break;
                        case 123:
                            i1 = i20;
                        case 124:
                            Test.sFld *= (short) 94.32903;
                            break;
                        default:
                            Test.instanceCount += (((i20 * i22) + Test.instanceCount) - i22);
                    }
                }
            } while (++d2 < 3);
        }
        long meth_res = i1 + i18 + i19 + Double.doubleToLongBits(d2) + i20 + i21 + Float.floatToIntBits(f2) + i22 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = 25663, i23 = 106, i24 = -2, i25 = -6, i26 = 26477, i27 = -52364, i28 = -25218, i29 = 163, i30 = -212, i31 = -72, i32 = 19208, i33 = 2, i34 = 198;
        long l = 3L, l1 = -32601L;
        float f3 = 0.747F;
        double[] dArr2 = new double[N];
        boolean[][] bArr = new boolean[N][N];
        short[] sArr1 = new short[N];
        FuzzerUtils.init(dArr2, 51.86071);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(sArr1, (short) 12868);
        i = iMeth(i);
        if (Test.bFld) {
            Test.byFld -= (byte) Test.instanceCount;
            Test.iFld = (int) Test.dFld;
            Test.fFld *= i;
            Test.iArrFld[(i >>> 1) % N] = i;
            for (i23 = 3; i23 < 98; i23++) {
                Test.lArrFld[i23] %= (Test.instanceCount | 1);
                Test.iFld += i23;
            }
            i25 = 159;
            do {
                for (l = i25; l < 95; l++) {
                    dArr2[(int) (l - 1)] = i;
                    i26 <<= -4;
                    for (i27 = 1; i27 > 1; i27--) {
                        if (Test.bFld)
                            break;
                        Test.iArrFld = Test.iArrFld;
                        Test.iFld <<= i25;
                        i26 -= (int) Test.fFld;
                        i29 = (int) Test.instanceCount;
                        i += (i27 + l);
                        Test.iFld += i27;
                        Test.fFld += i;
                        i24 *= i26;
                        Test.iArrFld = Test.iArrFld;
                        i29 += i23;
                        try {
                            i26 = (i25 / Test.iArrFld[i25]);
                            i28 = (i23 / -33196);
                            i29 = (-14375 / Test.iFld);
                        } catch (ArithmeticException a_e) {
                        }
                    }
                    i24 -= (int) -14L;
                    for (i30 = 1; 1 > i30; ++i30) {
                        i24 += (i30 - i31);
                        Test.iFld += i30;
                        i24 -= 162;
                        Test.instanceCount -= (long) Test.fFld;
                        i28 = i27;
                        Test.bFld = false;
                        i24 -= i30;
                    }
                    for (i32 = 1; 1 > i32; i32++) {
                        i33 -= -10;
                        i29 = i25;
                    }
                    Test.iArrFld[i25 - 1] &= Test.sFld;
                    i29 += (int) Test.instanceCount;
                    for (f3 = 1; f3 < 1; ++f3) {
                        i *= (int) Test.instanceCount;
                        i >>>= -142;
                        Test.bFld = Test.bFld;
                        bArr[(int) (l - 1)][(int) (f3 + 1)] = Test.bFld;
                        switch(((i24 >>> 1) % 2) + 13) {
                            case 13:
                                Test.iArrFld[i25 - 1] = (int) -1972193782L;
                                Test.iArrFld[i25 - 1] += (int) l;
                                Test.fFld += (f3 - i);
                                i34 &= i27;
                                i34 *= (int) Test.instanceCount;
                                i29 >>= (int) l;
                                Test.iFld += i29;
                                Test.lArrFld[(int) (f3)] -= (long) Test.fFld;
                                Test.sFld -= (short) Test.dFld;
                                switch((int) ((f3 % 7) + 109)) {
                                    case 109:
                                        try {
                                            i31 = (Test.iArrFld[i25 + 1] % i);
                                            i34 = (77 / i26);
                                            i29 = (i26 % i27);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        i -= -56461;
                                        Test.iArrFld[(int) (l)] >>>= -24007;
                                        Test.iFld += (int) (f3 * i25);
                                        i24 = i31;
                                        i24 *= i30;
                                        Test.iArrFld = FuzzerUtils.int1array(N, (int) -36971);
                                    case 110:
                                        Test.fFld += (f3 - Test.iFld);
                                        if (Test.bFld)
                                            break;
                                        i |= i26;
                                        i33 += (int) (((f3 * i24) + i28) - f3);
                                        i >>>= i33;
                                        if (Test.bFld) {
                                            Test.iArrFld[(int) (f3)] <<= (int) Test.instanceCount;
                                            sArr1[(int) (f3)] += (short) f3;
                                            l1 = i23;
                                            Test.instanceCount -= i24;
                                            Test.instanceCount >>= i33;
                                            byArrFld = byArrFld;
                                        } else {
                                            i31 -= (int) l1;
                                        }
                                    case 111:
                                        Test.fFld *= Test.instanceCount;
                                        break;
                                    case 112:
                                        i29 = 67;
                                        break;
                                    case 113:
                                        i26 -= Test.iFld;
                                        break;
                                    case 114:
                                        i31 += i30;
                                        break;
                                    case 115:
                                        l1 = i34;
                                        break;
                                }
                                break;
                            case 14:
                                i += i32;
                        }
                    }
                }
            } while ((i25 -= 3) > 0);
        }
        FuzzerUtils.out.println("i i23 i24 = " + i + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 l i26 = " + i25 + "," + l + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 f3 i34 = " + i33 + "," + Float.floatToIntBits(f3) + "," + i34);
        FuzzerUtils.out.println("l1 dArr2 bArr = " + l1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)) + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("sArr1 = " + FuzzerUtils.checkSum(sArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld Test.byFld Test.iFld = " + (Test.bFld ? 1 : 0) + "," + Test.byFld + "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld Test.lArrFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("byArrFld = " + FuzzerUtils.checkSum(byArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$16) {
            try {
                java.lang.String ax$18 = "8.759605730991504E-36";
                java.lang.String ax$17 = "3419.129239720079";
                if (ax$18 == ax$17) {
                }
            } catch (Throwable ax$19) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$8 = false;

    private static Boolean ax$16 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
