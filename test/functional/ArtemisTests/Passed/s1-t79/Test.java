// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.lang.reflect.Array;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -3559723960L;

    public static double dFld = 95.5663;

    public static float fFld = 56.620F;

    public static byte byFld = 58;

    public static long[] lArrFld = new long[N];

    public static int[] iArrFld = new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 117L);
        FuzzerUtils.init(Test.iArrFld, 61904);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, int i4, byte by) {
        if (ax$8) {
            try {
                float[] ax$12 = { -16777215.5f, -16777215.0f, -0.49999998f, -0.4999999701976776123046875f, 0.4999999701976776123046875f, 0.49999998f, 16777215.0f, 16777215.5f };
                int ax$9 = 1234;
                float ax$10 = 55.0f;
                float ax$11 = 41.0f;
                if (ax$12 != null) {
                    ax$12[ax$9 + 4] = ax$11;
                    ax$12[ax$9 + 5] = ax$10;
                }
            } catch (Throwable ax$13) {
            } finally {
            }
            return;
        }
        int i5 = -14, i6 = 0, i7 = 33985, i9 = -131, i10 = -1, i11 = -112, iArr[] = new int[N];
        double d = 0.34816;
        short s = -7588, sArr[] = new short[N];
        boolean b = false;
        float f1 = -21.545F, fArr[][] = new float[N][N];
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(byArr, (byte) 87);
        FuzzerUtils.init(sArr, (short) -24944);
        FuzzerUtils.init(fArr, -70.281F);
        i4 = i3;
        i5 = 1;
        while (++i5 < 226) {
            for (i6 = 1; 3 > i6; i6++) {
                d = 1;
                do {
                    i3 = (int) -3133168447L;
                    s -= (short) Test.instanceCount;
                    Test.instanceCount += (long) d;
                    i4 -= (int) Test.instanceCount;
                    Test.lArrFld[(int) (d + 1)] -= i7;
                    i4 = i5;
                    i7 = (int) Test.instanceCount;
                    if (b)
                        break;
                } while (++d < 2);
                f1 = Test.instanceCount;
                i7 = 32180;
                s = (short) i7;
                i3 ^= (int) 1580791994L;
                i3 += i5;
                i4 = (int) Test.instanceCount;
            }
            i4 = (int) 0L;
        }
        for (int i8 : iArr) {
            i9 = 1;
            do {
                by *= (byte) d;
                switch((i9 % 7) + 87) {
                    case 87:
                        i7 -= i6;
                        byArr[i9] >>>= by;
                        i8 += 4702;
                        i7 -= by;
                        f1 += Test.instanceCount;
                        Test.instanceCount |= -2280039867L;
                        i3 = i6;
                        sArr[i9] *= (short) i9;
                        switch(((i9 % 10) * 5) + 26) {
                            case 60:
                                for (i10 = i9; i10 < 1; i10++) {
                                    i7 += (int) Test.instanceCount;
                                    i7 >>>= i5;
                                    i8 -= i5;
                                    i3 -= (int) d;
                                }
                            case 69:
                                i3 += (int) d;
                                break;
                            case 30:
                                i11 = i6;
                                break;
                            case 35:
                                i3 -= (int) 175L;
                                break;
                            case 66:
                                fArr[i9][i9 - 1] -= i5;
                                break;
                            case 54:
                                i3 = (int) 125L;
                                break;
                            case 49:
                                f1 += -5;
                                break;
                            case 58:
                                Test.instanceCount >>= i11;
                                break;
                            case 73:
                            case 53:
                                i8 += (45052 + (i9 * i9));
                                break;
                        }
                    case 88:
                        Test.instanceCount = Test.instanceCount;
                    case 89:
                        i4 <<= -12;
                        break;
                    case 90:
                        i11 >>= 20759;
                        break;
                    case 91:
                        iArr[i9] += i7;
                        break;
                    case 92:
                        f1 = 0L;
                        break;
                    case 93:
                    default:
                        i7 -= i8;
                }
            } while (++i9 < 2);
        }
        vMeth1_check_sum += i3 + i4 + by + i5 + i6 + i7 + Double.doubleToLongBits(d) + s + (b ? 1 : 0) + Float.floatToIntBits(f1) + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i, int i1, long l) {
        if (ax$19) {
            try {
                char[] ax$20 = new char[] { (char) 0xF3F4 };
                for (// 0, since & 31
                // 0, since & 31
                // 0, since & 31
                int ax$21 = 0; ax$21 < 128; ax$21++) ax$20[ax$21] >>>= 32;
            } catch (Throwable ax$22) {
            } finally {
            }
            return -1472750230;
        }
        int i2 = -5, i12 = -76, i13 = -33227, i14 = 151, i15 = 3, i16 = 191, i17 = -52731, i18 = 22367, i19 = 204, i20 = -13, i21 = -22543;
        float f = 118.580F;
        byte by1 = 112, byArr1[] = new byte[N];
        long l1 = 7116606434157108455L;
        short s1 = -1556, sArr1[] = new short[N];
        double[] dArr = new double[N];
        FuzzerUtils.init(byArr1, (byte) -116);
        FuzzerUtils.init(sArr1, (short) 24895);
        FuzzerUtils.init(dArr, -14.46088);
        i2 = 137;
        do {
            i1 += (((i2 * Test.instanceCount) + f) - i1);
            i1 += (24536 + (i2 * i2));
            {
                java.io.PrintStream ax$16 = System.out;
                java.io.PrintStream ax$17 = System.err;
                java.io.PrintStream ax$18 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$18);
                System.setErr(ax$18);
                try {
                    ax$8 = true;
                    for (int ax$14 = 0; ax$14 < 5729; ax$14 += 1) vMeth1(1916983691, -1917738818, (byte) 1097739168);
                } catch (java.lang.Throwable ax$15) {
                } finally {
                    ax$8 = false;
                }
                System.setOut(ax$16);
                System.setErr(ax$17);
            }
            vMeth1(i1, i1, by1);
            Test.lArrFld[i2 - 1] += Test.instanceCount;
            Test.instanceCount *= 64764;
            for (i12 = 1; i12 < 4; i12++) {
                i1 &= i;
                i14 = 1;
                while (++i14 < 2) {
                    Test.iArrFld[i2] <<= i13;
                    l += (-202 + (i14 * i14));
                    Test.iArrFld[i14 - 1] = (int) l;
                    i = i2;
                }
                i1 <<= (int) Test.instanceCount;
            }
            for (l1 = 1; l1 < 4; ++l1) {
                f += l1;
                l = 48;
                s1 += (short) (((l1 * i2) + i15) - i15);
                for (i16 = 2; i16 > 1; i16--) {
                    byArr1[i16] *= (byte) 119.1019F;
                }
                i13 += (64237 + (l1 * l1));
                i13 = i17;
                sArr1[i2] = (short) i17;
                i17 -= i1;
                i13 += (int) Test.dFld;
                Test.instanceCount = i13;
                for (i18 = i2; i18 < 2; i18++) {
                    Test.dFld = f;
                    i17 += (i18 - i15);
                    i17 = i1;
                    i17 += i18;
                }
                l >>= l1;
            }
            switch((i2 % 3) + 122) {
                case 122:
                    for (i20 = 1; i20 < 4; ++i20) {
                        i1 += i2;
                        dArr[i2] -= i;
                        i15 = by1;
                    }
                case 123:
                    l = Test.instanceCount;
                    break;
                case 124:
            }
        } while (--i2 > 0);
        long meth_res = i + i1 + l + i2 + Float.floatToIntBits(f) + by1 + i12 + i13 + i14 + l1 + i15 + s1 + i16 + i17 + i18 + i19 + i20 + i21 + FuzzerUtils.checkSum(byArr1) + FuzzerUtils.checkSum(sArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth() {
        if (ax$28) {
            try {
                java.lang.Object ax$29 = "12345678987";
                if (Array.getLength(ax$29) != 0)
                    ;
            } catch (Throwable ax$30) {
            } finally {
            }
            return;
        }
        int i22 = 902, i23 = 26235, i24 = 128, i25 = -35601, i26 = -5, i27 = 203;
        boolean b1 = true, bArr[] = new boolean[N];
        short s2 = 15769;
        double[] dArr1 = new double[N];
        byte[][] byArr2 = new byte[N][N];
        FuzzerUtils.init(dArr1, -107.108447);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(byArr2, (byte) -46);
        switch(((iMeth(i22, i22, Test.instanceCount) >>> 1) % 10) + 122) {
            case 122:
                for (i23 = 1; i23 < 82; i23++) {
                    for (i25 = i23; i25 < 7; ++i25) {
                        i26 += i25;
                        i24 = i22;
                        i26 *= (int) Test.dFld;
                        i27 = 1;
                        do {
                            i26 *= i23;
                            dArr1[i27 + 1] = -149;
                            i22 += -29098;
                            switch((((-26 >>> 1) % 3) * 5) + 75) {
                                case 88:
                                    Test.fFld = i22;
                                    Test.fFld *= i25;
                                    i26 *= 39026;
                                    i24 += i25;
                                    i24 += (int) Test.dFld;
                                    i26 -= i27;
                                    Test.byFld += (byte) i23;
                                    bArr[i23] = b1;
                                    Test.iArrFld[i23 - 1] += (int) 2.726F;
                                case 80:
                                    Test.iArrFld = Test.iArrFld;
                                    Test.byFld += (byte) i27;
                                    Test.instanceCount += (long) Test.fFld;
                                    if (b1)
                                        continue;
                                    i24 <<= (int) Test.instanceCount;
                                    byArr2[i25][i27] = (byte) i27;
                                    Test.instanceCount -= i23;
                                    if (b1)
                                        continue;
                                    Test.instanceCount += Test.instanceCount;
                                    i22 += i26;
                                    switch((i27 % 2) + 118) {
                                        case 118:
                                            Test.dFld += i24;
                                            Test.dFld += -58944L;
                                            if (i26 != 0) {
                                                vMeth_check_sum += i22 + i23 + i24 + i25 + i26 + i27 + (b1 ? 1 : 0) + s2 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(byArr2);
                                                return;
                                            }
                                            Test.instanceCount += (i27 * i27);
                                            Test.instanceCount = -71;
                                            try {
                                                i26 = (-166 / i22);
                                                i24 = (i23 % -134);
                                                Test.iArrFld[i27] = (801491 / i25);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            break;
                                        case 119:
                                            i26 &= 44011;
                                        default:
                                            i26 <<= Test.byFld;
                                    }
                                    break;
                                case 76:
                                    i26 = (int) Test.instanceCount;
                            }
                        } while ((i27 += 2) < 1);
                    }
                }
                break;
            case 123:
            case 124:
                i26 += 23195;
                break;
            case 125:
                Test.iArrFld[(i25 >>> 1) % N] = (int) -2854692870L;
            case 126:
                Test.iArrFld[(i23 >>> 1) % N] ^= s2;
                break;
            case 127:
                bArr[(i26 >>> 1) % N] = b1;
                break;
            case 128:
                i26 -= (int) -5165515680180388012L;
                break;
            case 129:
            case 130:
                i24 += (int) Test.instanceCount;
            case 131:
                i24 *= (int) Test.instanceCount;
                break;
            default:
                Test.instanceCount = (long) 2.117F;
        }
        vMeth_check_sum += i22 + i23 + i24 + i25 + i26 + i27 + (b1 ? 1 : 0) + s2 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(byArr2);
    }

    public void mainTest(String[] strArr1) {
        int i28 = 12;
        {
            java.io.PrintStream ax$33 = System.out;
            java.io.PrintStream ax$34 = System.err;
            java.io.PrintStream ax$35 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$35);
            System.setErr(ax$35);
            try {
                ax$28 = true;
                for (int ax$31 = 0; ax$31 < 8207; ax$31 += 1) vMeth();
            } catch (java.lang.Throwable ax$32) {
            } finally {
                ax$28 = false;
            }
            System.setOut(ax$33);
            System.setErr(ax$34);
        }
        vMeth();
        i28 *= i28;
        FuzzerUtils.out.println("i28 = " + i28);
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld Test.lArrFld Test.iArrFld = " + Test.byFld + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
            {
                java.io.PrintStream ax$5 = System.out;
                java.io.PrintStream ax$6 = System.err;
                java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$7);
                System.setErr(ax$7);
                try {
                    for (int ax$3 = -588; ax$3 < 8031; ax$3 += 1) {
                        try {
                            java.lang.Double ax$1 = new Double(0.1111D);
                            java.lang.Double ax$0 = new Double(0.1111D);
                            ax$0 *= ax$1;
                        } catch (Throwable ax$2) {
                        } finally {
                        }
                    }
                } catch (Throwable ax$4) {
                }
                System.setOut(ax$5);
                System.setErr(ax$6);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$8 = false;

    private static Boolean ax$19 = false;

    private static Boolean ax$28 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
