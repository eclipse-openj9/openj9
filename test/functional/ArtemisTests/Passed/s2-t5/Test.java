// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -12L;

    public static float fFld = -25.560F;

    public static double dFld = -26.63623;

    public static short sFld = -14600;

    public static byte byFld = 104;

    public boolean bFld = false;

    public long lFld = -8L;

    public static float fFld1 = 0.714F;

    public static short[] sArrFld = new short[N];

    public static boolean[] bArrFld = new boolean[N];

    public static double[] dArrFld = new double[N];

    public static volatile float[] fArrFld = new float[N];

    public long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short) -11867);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.dArrFld, 2.38283);
        FuzzerUtils.init(Test.fArrFld, 0.324F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth() {
        int i4 = -121, i5 = 90, i6 = 13, i7 = -16581, i8 = 0, i9 = -6, i10 = 39491, i11 = -48, i12 = -1, i13 = 25745, i14 = 3, i15 = 6, iArr[] = new int[N];
        short s1 = 2917;
        byte by = -76;
        FuzzerUtils.init(iArr, 36728);
        for (i4 = 7; i4 < 162; ++i4) {
            Test.instanceCount = i5;
            for (i6 = 1; i6 < 4; i6++) {
                i5 = i5;
            }
            for (i8 = 1; i8 < 4; ++i8) {
                Test.fFld += i9;
                Test.instanceCount -= Test.instanceCount;
                iArr[i4 + 1] = (int) -6L;
                s1 |= (short) Test.instanceCount;
                Test.fFld += Test.fFld;
                i9 += i8;
                i9 += (i8 * i8);
                try {
                    i5 = (-196 / i8);
                    i5 = (i8 / 1324013441);
                    i7 = (i6 % -42);
                } catch (ArithmeticException a_e) {
                }
                i9 += (int) Test.instanceCount;
                i5 = 12;
                i5 -= by;
                i7 += i4;
                iArr[i8] = i6;
                for (i10 = 2; i10 > i4; i10--) {
                    Test.instanceCount += i10;
                    i7 = (int) Test.instanceCount;
                    Test.fFld *= Test.fFld;
                    i9 *= (int) Test.fFld;
                    i9 += i11;
                    if (i8 != 0) {
                    }
                    {
                        java.io.PrintStream ax$6 = System.out;
                        java.io.PrintStream ax$7 = System.err;
                        java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$8);
                        System.setErr(ax$8);
                        try {
                            for (int ax$4 = -1820; ax$4 < 3528; ax$4 += 1) {
                                int ax$2 = i11;
                                try {
                                    long[] ax$1 = new long[10];
                                    long[] ax$0 = { // Long-range values
                                    // Long-range values
                                    // Long-range values
                                    // Long-range values
                                    // Long-range values
                                    0L, // Long-range values
                                    1L, // Long-range values
                                    2L, // Long-range values
                                    3L, // Long-range values
                                    99999L, // Long-range values
                                    100000L, // Long-range values
                                    999999L, // Long-range values
                                    100000L, // Long-range values
                                    999999999L, // Long-range values
                                    1000000000L, // Long-range values
                                    0x1234_5678L, // Long-range values
                                    0x8000_0000L, // Long-range values
                                    0x8000_0001L, // Long-range values
                                    0x8000_0002L, 0x8000_0003L, 0x8765_4321L, 0xFFFF_FFFEL, 0xFFFF_FFFFL, 999_999_999_999L, 1_000_000_000_000L, 999_999_999_999_999_999L, 1_000_000_000_000_000_000L, 0xFFFF_FFFF_FFFF_FFFEL, 0xFFFF_FFFF_FFFF_FFFFL };
                                    ax$0[i11] -= 12345 * ax$1[i11];
                                } catch (Throwable ax$3) {
                                } finally {
                                    i11 = ax$2;
                                }
                            }
                        } catch (Throwable ax$5) {
                        }
                        System.setOut(ax$6);
                        System.setErr(ax$7);
                    }
                    Test.dArrFld[i4 - 1] *= i10;
                }
            }
            for (i12 = i4; 4 > i12; ++i12) {
                iArr = iArr;
                switch((i12 % 2) + 79) {
                    case 79:
                        for (i14 = 1; 1 > i14; ++i14) {
                            i11 >>= i7;
                            iArr[i4 + 1] *= -61;
                            Test.dFld += -7;
                            i13 <<= i15;
                            i9 += (int) Test.instanceCount;
                            Test.fFld += i14;
                            i15 += (i14 ^ Test.instanceCount);
                        }
                        break;
                    case 80:
                        i9 = (int) Test.instanceCount;
                        break;
                    default:
                        i13 = i12;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + s1 + by + i10 + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(int i3, float f1) {
        boolean b = false, b1 = false;
        long l1 = -176L, lArr[] = new long[N];
        int i16 = -4, i17 = -2102, i18 = 5, i19 = -6, i20 = 43305, i21 = 0, i22 = -317, i23 = 15, i24 = -42034, i25 = 64586, iArr1[] = new int[N];
        FuzzerUtils.init(lArr, -229L);
        FuzzerUtils.init(iArr1, 12);
        Test.bArrFld[(i3 >>> 1) % N] = b;
        i3 = (iMeth() + i3);
        for (l1 = 7; l1 < 232; l1++) {
            for (i17 = 1; i17 < 3; i17++) {
                i16 *= i3;
                i3 += (i17 * Test.fFld);
                i18 >>= i16;
                if (b)
                    continue;
                i3 += (i17 ^ i18);
                Test.dFld -= Test.sFld;
                i19 -= 1;
            }
            lArr[(int) (l1 + 1)] = i3;
            i19 += i19;
            i16 >>= -4;
            i16 -= (int) Test.fFld;
        }
        Test.sFld = (short) i18;
        Test.instanceCount += 5690;
        Test.fFld -= 23786;
        Test.fFld -= l1;
        i18 *= (int) Test.instanceCount;
        iArr1[(i19 >>> 1) % N] = (int) l1;
        i3 = (int) Test.instanceCount;
        Test.instanceCount += i16;
        for (i20 = 4; 180 > i20; i20++) {
            if (b1)
                continue;
            Test.byFld *= (byte) i17;
            for (i22 = 3; i22 > 1; i22 -= 2) {
                i18 >>= (int) Test.instanceCount;
                lArr[i22] += Test.instanceCount;
                for (i24 = 1; i24 < 3; i24 += 2) {
                    lArr[i24] >>= i20;
                    Test.byFld |= (byte) i24;
                    try {
                        i21 = (100 / iArr1[i22 - 1]);
                        iArr1[i24 + 1] = (45099 / i24);
                        i21 = (i22 % i18);
                    } catch (ArithmeticException a_e) {
                    }
                    i19 >>= i24;
                    iArr1[i24] = i17;
                    Test.instanceCount -= Test.instanceCount;
                    Test.fFld -= i22;
                }
            }
        }
        vMeth1_check_sum += i3 + Float.floatToIntBits(f1) + (b ? 1 : 0) + l1 + i16 + i17 + i18 + i19 + i20 + i21 + (b1 ? 1 : 0) + i22 + i23 + i24 + i25 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l, int i, int i1) {
        float f = -2.236F;
        int i2 = -3, i26 = -200, i27 = 5, iArr2[] = new int[N], iArr3[] = new int[N], iArr4[] = new int[N];
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr2, 0);
        FuzzerUtils.init(iArr3, 60429);
        FuzzerUtils.init(lArr1, -12L);
        FuzzerUtils.init(iArr4, 4);
        for (short s : Test.sArrFld) {
            for (f = 1; f < 2; f++) {
                vMeth1(i2, Test.fFld);
                l += (long) Test.fFld;
                for (i26 = 1; i26 < 2; ++i26) {
                    iArr2[(int) (f)] = i;
                    i &= 2;
                    iArr3[i26] |= i2;
                    l = 25178;
                    l -= i;
                    iArr2 = iArr3;
                    i2 = Test.sFld;
                    lArr1[i26 + 1] -= i2;
                    i -= 220;
                    Test.fFld += i2;
                    switch(((8 >>> 1) % 3) + 40) {
                        case 40:
                            i -= (int) f;
                            iArr2[(int) (f)] -= (int) Test.instanceCount;
                            l += (i26 | i26);
                            iArr2[i26] = (int) Test.instanceCount;
                            Test.instanceCount = Test.instanceCount;
                            i27 = i1;
                            l += -59172;
                            i += i26;
                            Test.fArrFld = Test.fArrFld;
                        case 41:
                            Test.fFld -= f;
                            i += (((i26 * Test.fFld) + i27) - l);
                            Test.fFld += f;
                            i27 = 32;
                            l *= l;
                            iArr2[(int) (f + 1)] -= s;
                            l *= i2;
                            Test.dFld -= i26;
                            i1 &= i2;
                            try {
                                i1 = (i26 / 103);
                                i = (i / 53745);
                                i2 = (i27 % iArr4[(int) (f + 1)]);
                            } catch (ArithmeticException a_e) {
                            }
                            iArr2[(int) (f)] = i27;
                            Test.fFld = i27;
                            break;
                        case 42:
                    }
                }
            }
        }
        vMeth_check_sum += l + i + i1 + Float.floatToIntBits(f) + i2 + i26 + i27 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr4);
    }

    public void mainTest(String[] strArr1) {
        if (ax$9) {
            float ax$11 = fFld1;
            try {
                boolean ax$10 = true;
                if (fFld1 != (ax$10 ? Float.NEGATIVE_INFINITY : Float.POSITIVE_INFINITY))
                    ;
            } catch (Throwable ax$12) {
            } finally {
                fFld1 = ax$11;
            }
            return;
        }
        int i28 = 34, i29 = -221, i30 = 2, i31 = -21451, i32 = -218, i33 = 34743, i34 = -14, i35 = -6, i36 = 59857, i37 = 54, i38 = 11918, i39 = 8, i40 = 6, i41 = -165, i42 = -212, i43 = -1, iArr5[] = new int[N];
        double d = -1.55298, d1 = 2.2354;
        long l2 = -6659285023404905532L;
        byte by1 = 81, byArr[] = new byte[N];
        FuzzerUtils.init(iArr5, 0);
        FuzzerUtils.init(byArr, (byte) -96);
        vMeth(Test.instanceCount, i28, i28);
        for (i29 = 4; i29 < 83; ++i29) {
            if (false)
                continue;
        }
        i28 = i29;
        for (d = 187; d > 2; d -= 2) {
            i28 = i31;
            for (i32 = (int) (d); i32 < 55; ++i32) {
                Test.instanceCount += Test.byFld;
            }
            i34 = 1;
            do {
                i33 += (((i34 * i31) + i33) - i28);
            } while (++i34 < 55);
            Test.instanceCount += Test.instanceCount;
            for (d1 = 55; d1 > 1; d1 -= 2) {
                i30 += (int) d1;
                iArr5[(int) (d)] = i32;
                lArrFld[(int) (d1)] = i35;
                iArr5 = iArr5;
                iArr5[(i29 >>> 1) % N] = (int) Test.instanceCount;
                for (i36 = 1; i36 < 3; i36++) {
                    byArr[i36] += (byte) Test.instanceCount;
                    i33 += i36;
                    Test.dArrFld[(int) (d1)] += 178;
                    i31 = (int) Test.fFld;
                    lArrFld[(int) (d)] = i28;
                    i35 -= i32;
                    i31 += i36;
                    i37 *= (int) d1;
                    i33 -= i32;
                    i31 += (int) Test.instanceCount;
                    i35 += i31;
                    i31 >>= i31;
                    i37 *= (int) Test.fFld;
                }
                l2 = 3;
                while ((l2 -= 2) > 0) {
                    i28 += (int) l2;
                    Test.instanceCount ^= i31;
                    Test.fArrFld[(int) (d1 + 1)] = Test.instanceCount;
                    i28 >>= i37;
                    Test.instanceCount = (long) Test.fFld;
                    lArrFld = FuzzerUtils.long1array(N, (long) -3672844149L);
                    i33 = i34;
                }
                for (i38 = 1; 3 > i38; i38++) {
                    bFld = bFld;
                    lFld += i32;
                    i37 += (i38 * i36);
                    i31 -= (int) 40L;
                    i37 += (i38 * i33);
                }
                iArr5[(int) (d1 + 1)] *= (int) Test.fFld;
                i28 += -5667;
                i31 += (249 + (d1 * d1));
            }
            i30 += (int) Test.fFld;
        }
        for (short s2 : Test.sArrFld) {
            for (i40 = 1; 20 > i40; ++i40) {
                i42 = 1;
                while ((i42 += 3) < 2) {
                    lFld += 5;
                    i35 += i42;
                    Test.sArrFld = FuzzerUtils.short1array(N, (short) -2813);
                    Test.dFld += 3;
                    switch(((i40 % 7) * 5) + 85) {
                        case 91:
                            iArr5[i40 + 1] += by1;
                            lArrFld[i40 + 1] += i31;
                            break;
                        case 110:
                            iArr5[i42 + 1] += i28;
                            Test.fFld += 2;
                            iArr5[i42 + 1] *= -12;
                            iArr5 = FuzzerUtils.int1array(N, (int) 2702);
                            Test.instanceCount = i28;
                            i43 *= -57415;
                            Test.fFld = i40;
                            Test.dFld = i32;
                            i35 -= (int) d;
                            i31 *= (int) Test.instanceCount;
                            i41 = i41;
                            Test.instanceCount += i41;
                            i43 = (int) Test.fFld1;
                            i30 -= (int) d1;
                        case 112:
                            i37 -= i32;
                            Test.fArrFld[i42 - 1] = Test.instanceCount;
                        case 95:
                            i33 += (8 + (i42 * i42));
                        case 109:
                            i35 *= i32;
                            break;
                        case 88:
                            iArr5[i40] *= i31;
                        case 116:
                            i39 /= (int) (i31 | 1);
                        default:
                            lFld = i35;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("d i31 i32 = " + Double.doubleToLongBits(d) + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 d1 = " + i33 + "," + i34 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("l2 i38 i39 = " + l2 + "," + i38 + "," + i39);
        FuzzerUtils.out.println("i40 i41 i42 = " + i40 + "," + i41 + "," + i42);
        FuzzerUtils.out.println("by1 i43 iArr5 = " + by1 + "," + i43 + "," + FuzzerUtils.checkSum(iArr5));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld Test.byFld bFld = " + Test.sFld + "," + Test.byFld + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("lFld Test.fFld1 Test.sArrFld = " + lFld + "," + Float.floatToIntBits(Test.fFld1) + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("Test.bArrFld Test.dArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$18) {
            try {
                int ax$19 = 143444;
                ax$19++;
            } catch (Throwable ax$20) {
            } finally {
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$9 = false;

    private static Boolean ax$18 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
