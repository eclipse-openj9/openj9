// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.nio.channels.DatagramChannel;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 4L;

    public static long lFld = 2603893389L;

    public static int iFld = -53300;

    public static volatile boolean bFld = true;

    public short sFld = -16406;

    public byte byFld = 41;

    public static int[] iArrFld = new int[N];

    public static long[] lArrFld = new long[N];

    public static float[] fArrFld = new float[N];

    public int[][] iArrFld1 = new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 5);
        FuzzerUtils.init(Test.lArrFld, 11L);
        FuzzerUtils.init(Test.fArrFld, 90.308F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth() {
        Test.instanceCount >>= 1;
        long meth_res = 0;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(int i, double d) {
        byte by = 27, byArr[] = new byte[N];
        float f = 2.374F;
        int i1 = 244, i2 = -18926, i3 = 5, i4 = 154, i5 = -15, i6 = -5, i7 = 9, iArr[] = new int[N];
        boolean b = false;
        short s = -10213;
        long[][] lArr = new long[N][N];
        FuzzerUtils.init(byArr, (byte) -42);
        FuzzerUtils.init(lArr, 29210L);
        FuzzerUtils.init(iArr, -180);
        iMeth();
        by >>>= (byte) -6;
        i = i;
        byArr[(-41 >>> 1) % N] -= (byte) f;
        for (i1 = 12; i1 < 236; i1 += 3) {
            lArr[i1 + 1][i1] <<= i;
            Test.instanceCount += (i1 + i2);
            i >>= i2;
            if (b) {
                i2 >>= i1;
                i2 += (i1 * i1);
                Test.instanceCount = i1;
                i2 += (i1 | i);
            } else {
                Test.instanceCount *= (long) d;
                i = (int) Test.instanceCount;
                f *= (float) d;
                i += i1;
                switch((i1 % 9) + 69) {
                    case 69:
                        for (i3 = 1; i3 < 7; ++i3) {
                            for (i5 = 1; i5 < 2; ++i5) {
                                s %= (short) (i3 | 1);
                                Test.instanceCount += (long) d;
                                Test.instanceCount += i5;
                                i6 = (int) d;
                                f = f;
                                i6 *= (int) d;
                                i2 = (int) Test.instanceCount;
                                i -= (int) Test.instanceCount;
                                i2 -= i3;
                                i2 >>>= (int) Test.instanceCount;
                                i7 += (i5 * i6);
                                if (i != 0) {
                                    vMeth1_check_sum += i + Double.doubleToLongBits(d) + by + Float.floatToIntBits(f) + i1 + i2 + (b ? 1 : 0) + i3 + i4 + i5 + i6 + s + i7 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
                                    return;
                                }
                                i4 <<= (int) Test.instanceCount;
                                iArr[i5 - 1] <<= (int) Test.instanceCount;
                            }
                            Test.instanceCount += i5;
                            iArr[i3 + 1] += (int) -5L;
                            if (i6 != 0) {
                                vMeth1_check_sum += i + Double.doubleToLongBits(d) + by + Float.floatToIntBits(f) + i1 + i2 + (b ? 1 : 0) + i3 + i4 + i5 + i6 + s + i7 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
                                return;
                            }
                        }
                        break;
                    case 70:
                    case 71:
                        Test.instanceCount *= i;
                    case 72:
                        if (i6 != 0) {
                            vMeth1_check_sum += i + Double.doubleToLongBits(d) + by + Float.floatToIntBits(f) + i1 + i2 + (b ? 1 : 0) + i3 + i4 + i5 + i6 + s + i7 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        break;
                    case 73:
                        Test.instanceCount >>= Test.instanceCount;
                        break;
                    case 74:
                        i4 = i2;
                    case 75:
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 76:
                        i2 = (int) 94.950F;
                        break;
                    case 77:
                        i2 >>= -53804;
                        break;
                }
            }
        }
        {
            java.io.PrintStream ax$7 = System.out;
            java.io.PrintStream ax$8 = System.err;
            java.io.PrintStream ax$9 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$9);
            System.setErr(ax$9);
            try {
                for (int ax$5 = -3134; ax$5 < 3998; ax$5 += 1) {
                    try {
                        java.lang.Object ax$2 = "12.76189825841631";
                        int ax$1 = 0x7FFFFFC0;
                        java.lang.Object ax$3 = "9999e100";
                        java.lang.Object[] ax$0 = new Object[100000];
                        ax$0[ax$1] = (ax$0[20] == ax$2) ? ax$3 : ax$2;
                    } catch (Throwable ax$4) {
                    } finally {
                    }
                }
            } catch (Throwable ax$6) {
            }
            System.setOut(ax$7);
            System.setErr(ax$8);
        }
        vMeth1_check_sum += i + Double.doubleToLongBits(d) + by + Float.floatToIntBits(f) + i1 + i2 + (b ? 1 : 0) + i3 + i4 + i5 + i6 + s + i7 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {
        int i8 = -8, i9 = -13, i10 = 3, i11 = -92, i12 = 11, i13 = 8, i14 = -5, i15 = 73;
        byte by1 = 30, byArr1[] = new byte[N];
        long l = 7326164456652175180L;
        float f1 = 7.592F;
        double d1 = 1.44792;
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(byArr1, (byte) 95);
        vMeth1(-128, -53.11524);
        i8 >>>= by1;
        i8 = i8;
        i8 = 9446;
        i8 += i8;
        for (i9 = 14; i9 < 252; ++i9) {
            i10 += i9;
            i10 += i9;
            i8 += (int) (69975411773170595L + (i9 * i9));
            {
                java.io.PrintStream ax$10 = System.out;
                java.io.PrintStream ax$11 = System.err;
                java.io.PrintStream ax$12 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$12);
                System.setErr(ax$12);
                {
                    boolean ax$19 = false;
                    for (int ax$18 = -3; ax$18 < 7316; ax$18 += 7) {
                        if (!ax$19) {
                            ax$19 = true;
                            {
                                System.setOut(ax$10);
                                System.setErr(ax$11);
                                for (l = 1; l < 3; l++) {
                                    i8 ^= (int) l;
                                    for (i12 = 1; 2 > i12; i12++) {
                                        Test.instanceCount = 102;
                                        Test.lFld += (i12 - i8);
                                        bArr = FuzzerUtils.boolean1array(N, (boolean) true);
                                        Test.iArrFld[i12] += by1;
                                    }
                                    for (i14 = 1; i14 < 2; i14++) {
                                        byArr1[i9 - 1] >>= (byte) 4506497411082594393L;
                                        i11 += i9;
                                        Test.iArrFld[i14] <<= Test.iFld;
                                        Test.instanceCount += i14;
                                        i8 += i10;
                                        switch(((i14 % 1) * 5) + 63) {
                                            case 65:
                                                Test.instanceCount += (i14 * i14);
                                                if (Test.bFld)
                                                    continue;
                                                i8 -= 136;
                                                Test.iFld = i11;
                                                if (Test.bFld)
                                                    continue;
                                                f1 += (((i14 * i13) + l) - i15);
                                                Test.lArrFld = Test.lArrFld;
                                                i10 *= (int) 2L;
                                                Test.lFld >>>= i15;
                                                break;
                                            default:
                                                if (Test.bFld)
                                                    continue;
                                        }
                                        Test.iFld = i15;
                                        Test.instanceCount ^= i13;
                                        i13 = -7;
                                        Test.iFld = (int) d1;
                                    }
                                }
                                System.setOut(ax$12);
                                System.setErr(ax$12);
                            }
                        }
                        try {
                            double[] ax$13 = new double[1];
                            double[] ax$16 = { 0.0, 1.0, 2.0, 3.0 };
                            int ax$14 = 0x0000ffff;
                            double ax$15 = 0.0d;
                            ax$16[ax$14] = (ax$13[ax$14] * ax$15);
                        } catch (Throwable ax$17) {
                        } finally {
                        }
                    }
                }
                System.setOut(ax$10);
                System.setErr(ax$11);
            }
        }
        vMeth_check_sum += i8 + by1 + i9 + i10 + l + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(byArr1);
    }

    public void mainTest(String[] strArr1) {
        if (ax$35) {
            try {
                byte[] ax$36 = new byte[1 << 14];
                for (int ax$37 = 0; ax$37 < 128; ax$37++) ax$36[ax$37] = (byte) ~ax$36[ax$37];
            } catch (Throwable ax$38) {
            } finally {
            }
            return;
        }
        float f2 = -67.721F, f4 = 0.942F;
        int i16 = 142, i17 = -225, i18 = 11, i19 = -217, i20 = -98, i21 = 15910, i22 = -136;
        double d3 = 1.106839;
        boolean[] bArr1 = new boolean[N];
        FuzzerUtils.init(bArr1, true);
        if (Test.bFld) {
            vMeth();
            Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
            for (f2 = 4; f2 < 108; ++f2) {
                for (i17 = 2; i17 < 49; i17++) {
                    double d2 = -21.54743;
                    Test.lFld -= i16;
                    i16 = i18;
                    Test.lFld -= 19675;
                    sFld -= (short) Test.instanceCount;
                    Test.iArrFld[i17 - 1] = -5;
                    for (i19 = 1; i19 < 2; i19++) {
                        float f3 = 121.289F;
                        i18 *= (int) Test.lFld;
                        Test.iArrFld[i17] = -80;
                        Test.lFld += (i19 ^ Test.instanceCount);
                        Test.iFld *= (int) Test.instanceCount;
                        Test.lFld *= Test.iFld;
                        if (Test.bFld)
                            break;
                        try {
                            i20 = (-64763 % i20);
                            i16 = (i20 / -157);
                            Test.iFld = (30 % i16);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.instanceCount += (i19 * f2);
                        if (true) {
                            Test.fArrFld[(int) (f2)] += Test.iFld;
                            f3 = Test.instanceCount;
                            Test.iArrFld[i19] = sFld;
                        }
                        i20 += (172 + (i19 * i19));
                    }
                    Test.iArrFld[i17] ^= i16;
                    i16 += (int) d2;
                    if (false) {
                        Test.iArrFld[(int) (f2)] = (int) -1598918088L;
                        i18 |= 169;
                    } else if (Test.bFld) {
                        try {
                            Test.iArrFld[i17 + 1] = (i18 / 115);
                            i20 = (-191 % Test.iArrFld[(int) (f2)]);
                            i18 = (Test.iArrFld[i17 + 1] % Test.iFld);
                        } catch (ArithmeticException a_e) {
                        }
                        i20 += (i17 - Test.lFld);
                        for (i21 = 1; i21 < 2; ++i21) {
                            Test.instanceCount -= -37417;
                            if (Test.bFld)
                                break;
                            i20 -= (int) Test.instanceCount;
                            Test.lArrFld[i17 + 1] = i19;
                            switch((((i16 >>> 1) % 2) * 5) + 76) {
                                case 77:
                                    sFld = (short) i16;
                                    i16 |= -224;
                                    if (Test.bFld)
                                        break;
                                    Test.lFld = -21928;
                                    byFld += (byte) i21;
                                    f4 += i21;
                                    Test.iArrFld[(int) (f2)] = (int) 25468L;
                                    i16 >>>= 19166;
                                    i20 >>>= (int) Test.lFld;
                                    Test.iArrFld[(int) (f2)] *= (int) Test.lFld;
                                    i22 += i16;
                                    bArr1[i21] = Test.bFld;
                                    iArrFld1 = FuzzerUtils.int2array(N, (int) -11);
                                    break;
                                case 82:
                                    Test.lFld += i19;
                                    if (Test.bFld)
                                        continue;
                                default:
                                    if (Test.bFld) {
                                        Test.fArrFld[i21 + 1] = i19;
                                        Test.lFld -= i20;
                                        i16 *= (int) d2;
                                        i20 += (int) d3;
                                        f4 = i16;
                                        i18 += (((i21 * f4) + i16) - i22);
                                        Test.instanceCount += i17;
                                        if (false) {
                                            f4 *= i17;
                                            i20 = (int) Test.instanceCount;
                                        } else if (Test.bFld) {
                                            i18 >>= i21;
                                            i18 = 8;
                                            iArrFld1[i21 - 1] = Test.iArrFld;
                                            iArrFld1[(int) (f2 - 1)][i21 + 1] *= Test.iFld;
                                            i16 -= i16;
                                            i16 -= i18;
                                            i22 += (i21 * i21);
                                            Test.iArrFld[(int) (f2 - 1)] = i18;
                                            Test.instanceCount = Test.lFld;
                                            try {
                                                i22 = (8019 / i22);
                                                i22 = (i17 / -29884);
                                                Test.iArrFld[i17 + 1] = (i19 / i20);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            i22 = i18;
                                            Test.instanceCount += (i21 * i21);
                                        } else if (false) {
                                            d2 *= f2;
                                        } else {
                                            Test.lArrFld[i21] += i21;
                                        }
                                    }
                            }
                        }
                    }
                }
            }
        } else {
            Test.instanceCount *= 13;
        }
        FuzzerUtils.out.println("f2 i16 i17 = " + Float.floatToIntBits(f2) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 f4 = " + i21 + "," + i22 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("d3 bArr1 = " + Double.doubleToLongBits(d3) + "," + FuzzerUtils.checkSum(bArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.lFld Test.iFld = " + Test.instanceCount + "," + Test.lFld + "," + Test.iFld);
        FuzzerUtils.out.println("Test.bFld sFld byFld = " + (Test.bFld ? 1 : 0) + "," + sFld + "," + byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iArrFld1 = " + FuzzerUtils.checkSum(iArrFld1));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            {
                java.io.PrintStream ax$20 = System.out;
                java.io.PrintStream ax$21 = System.err;
                java.io.PrintStream ax$22 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$22);
                System.setErr(ax$22);
                {
                    boolean ax$34 = false;
                    for (int ax$33 = -2579; ax$33 < 2787; ax$33 += 5) {
                        if (!ax$34) {
                            ax$34 = true;
                            {
                                System.setOut(ax$20);
                                System.setErr(ax$21);
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                                System.setOut(ax$22);
                                System.setErr(ax$22);
                            }
                        }
                        try {
                            try (DatagramChannel ax$31 = DatagramChannel.open()) {
                                ax$31.bind(null);
                            }
                        } catch (Throwable ax$32) {
                        } finally {
                        }
                    }
                }
                System.setOut(ax$20);
                System.setErr(ax$21);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$35 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
