// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.nio.channels.ServerSocketChannel;
import java.net.SocketPermission;

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = -854538301L;

    public static short sFld = -17631;

    public static boolean bFld = false;

    public static double dFld = 23.129262;

    public static int[] iArrFld = new int[N];

    public static volatile boolean[] bArrFld = new boolean[N];

    public static volatile int[][] iArrFld1 = new int[N][N];

    public static long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 27671);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.iArrFld1, -64508);
        FuzzerUtils.init(Test.lArrFld, -22538L);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long fMeth_check_sum = 0;

    public static float fMeth() {
        int i12 = 154, i13 = 43428, i14 = -34229, i15 = -13, i16 = -250;
        long l = -4279673528L;
        byte by = 68;
        float f1 = 57.1014F, fArr1[] = new float[N];
        double d2 = 6.8128;
        boolean b1 = true;
        FuzzerUtils.init(fArr1, -2.935F);
        for (i12 = 2; 107 > i12; i12++) {
            for (l = 1; l < 5; ++l) {
                i15 = 1;
                while (++i15 < 2) {
                    if (b1) {
                        by += (byte) f1;
                        i13 = i15;
                        d2 -= i15;
                        i13 -= (int) l;
                        i14 -= (int) Test.instanceCount;
                        if (b1)
                            break;
                        i14 *= Test.sFld;
                        i13 *= i15;
                        d2 = l;
                    } else if (true) {
                        b1 = b1;
                        Test.iArrFld1 = Test.iArrFld1;
                        Test.lArrFld[(int) (l - 1)] -= 10L;
                        Test.sFld += (short) i15;
                        Test.instanceCount = (long) f1;
                        i13 >>= i13;
                    } else {
                        i13 *= i16;
                        i16 = by;
                        Test.instanceCount += i16;
                        i16 += (((i15 * i12) + Test.sFld) - f1);
                        i16 += i16;
                        fArr1 = fArr1;
                        i13 = i15;
                        Test.instanceCount = Test.instanceCount;
                    }
                    Test.instanceCount += i15;
                    Test.instanceCount >>= i15;
                    i14 += (-124 + (i15 * i15));
                    switch((i12 % 1) + 115) {
                        case 115:
                            i13 += i15;
                            i13 = i15;
                            Test.instanceCount = i14;
                            b1 = true;
                            fArr1[(int) (l + 1)] *= i16;
                            f1 *= l;
                            break;
                    }
                }
            }
        }
        long meth_res = i12 + i13 + l + i14 + i15 + by + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + (b1 ? 1 : 0) + i16 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public static int iMeth() {
        int i7 = -7, i8 = 38315, i9 = 22060, i10 = -177, i11 = -7, i17 = -37000, i18 = 0, i19 = 2, i20 = 9, i21 = 12;
        float f = 47.28F, fArr[] = new float[N];
        double d1 = 0.37520;
        byte by1 = 117;
        FuzzerUtils.init(fArr, -57.231F);
        for (i7 = 4; i7 < 167; i7 += 3) {
            double d = 64.7773;
            d -= i9;
            fArr[i7] -= (float) (d - ((i7 + f) + (i8 - i8)));
            i9 = (int) f;
            d1 = 1;
            while (++d1 < 10) {
                i10 = 1;
                do {
                    Test.iArrFld[i7 - 1] -= (i8--);
                    Test.iArrFld = (Test.iArrFld = Test.iArrFld);
                    i8 >>= i9;
                    Test.iArrFld = (Test.iArrFld = (Test.iArrFld = (Test.iArrFld = Test.iArrFld)));
                    Test.sFld += (short) (((i10 * i7) + i9) - i8);
                    i9 = (-i11);
                    if (fMeth() != f)
                        break;
                    Test.iArrFld[i7 - 1] += i10;
                } while (++i10 < 1);
            }
        }
        for (i17 = 7; i17 < 126; i17++) {
            for (i19 = 1; i19 < 5; i19++) {
                Test.lArrFld[i19 + 1] %= (i10 | 1);
                try {
                    i8 = (14789 / i7);
                    i8 = (Test.iArrFld1[i17 - 1][i17 + 1] / 35233);
                    Test.iArrFld[i19 + 1] = (Test.iArrFld[i17] % i17);
                } catch (ArithmeticException a_e) {
                }
                i21 = 1;
                do {
                    i11 += (int) Test.instanceCount;
                    Test.instanceCount = i17;
                    f *= i21;
                    Test.sFld += (short) (i21 * i21);
                    switch((i21 % 7) + 94) {
                        case 94:
                            Test.instanceCount += i11;
                            Test.iArrFld[i19] %= (int) (by1 | 1);
                            f += i21;
                            i8 -= i11;
                            by1 = (byte) i11;
                            try {
                                i9 = (i11 % 22093);
                                i11 = (49858 % i18);
                                i9 = (Test.iArrFld[i19] / -23060);
                            } catch (ArithmeticException a_e) {
                            }
                            i11 += (i21 ^ i17);
                            i18 += (i21 + Test.instanceCount);
                            switch((((i9 >>> 1) % 4) * 5) + 123) {
                                case 140:
                                    f += i9;
                                    if (true) {
                                        i11 *= i9;
                                        i18 += (-6 + (i21 * i21));
                                    }
                                case 124:
                                    i11 &= i20;
                                    break;
                                case 126:
                                    if (Test.bFld)
                                        continue;
                                    break;
                                case 132:
                                    i9 = (int) 2341775980028320719L;
                                    break;
                                default:
                                    i11 += i21;
                            }
                            break;
                        case 95:
                            i18 *= by1;
                            break;
                        case 96:
                            i9 = i9;
                            break;
                        case 97:
                            f -= i9;
                            break;
                        case 98:
                            i8 += (int) d1;
                            break;
                        case 99:
                            Test.iArrFld[i21] += (int) d1;
                            break;
                        case 100:
                            i8 -= (int) d1;
                            break;
                        default:
                            Test.instanceCount += (i21 * i8);
                    }
                } while (++i21 < 2);
            }
        }
        long meth_res = i7 + i8 + i9 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i10 + i11 + i17 + i18 + i19 + i20 + i21 + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(int i, int i1, int i2) {
        int i3 = 0, i4 = -213, i5 = 3, i6 = 210, i22 = 149, i23 = 1, i24 = -55285;
        boolean b = false;
        byte by2 = 43, byArr[] = new byte[N];
        float f2 = -1.643F;
        long[] lArr = new long[N];
        short[] sArr = new short[N];
        FuzzerUtils.init(byArr, (byte) 98);
        FuzzerUtils.init(lArr, -3237415926953616209L);
        FuzzerUtils.init(sArr, (short) -8888);
        for (i3 = 12; i3 < 235; ++i3) {
            i5 = 1;
            do {
                i >>= ((i++) - i);
                i *= (int) ((6 + (i5 + i5)) - ((Test.instanceCount + Test.instanceCount) + (i2 * i)));
                i6 = 1;
                do {
                    Test.sFld += (short) i6;
                    i2 += (int) (30806L + (i6 * i6));
                    i1 *= (int) (i1 - ((Test.instanceCount - -6) + Math.max(i2, i3)));
                    Test.instanceCount += (++i4);
                    byArr[i3] += (byte) (--Test.iArrFld[i3]);
                    if (b = (b = (Test.bArrFld[i3] = (i != i4))))
                        break;
                    i = (i3 * i3);
                    i4 &= i1;
                    i1 <<= i;
                    lArr[i6] = (Test.instanceCount >>= (i4 += (-23702 * iMeth())));
                    i4 += (i6 - i2);
                    Test.instanceCount <<= i6;
                    Test.iArrFld[i5] = i5;
                } while (++i6 < 1);
                i4 += (i5 * i5);
                Test.iArrFld1[i3][i5 + 1] = i2;
                Test.iArrFld1[i3][i3 + 1] >>= i4;
                by2 += (byte) Test.dFld;
                Test.instanceCount >>= by2;
                i4 = i1;
                i2 += (i5 ^ Test.sFld);
                sArr[(-45799 >>> 1) % N] -= (short) i6;
                Test.iArrFld[i3] -= i1;
            } while (++i5 < 3);
            {
                java.io.PrintStream ax$0 = System.out;
                java.io.PrintStream ax$1 = System.err;
                java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$2);
                System.setErr(ax$2);
                {
                    boolean ax$8 = false;
                    for (int ax$7 = -1187; ax$7 < 7927; ax$7 += 8) {
                        if (!ax$8) {
                            ax$8 = true;
                            {
                                System.setOut(ax$0);
                                System.setErr(ax$1);
                                for (i22 = 1; i22 < 3; ++i22) {
                                    i4 += (int) 1.10122;
                                    i24 = 1;
                                    do {
                                        i23 -= -17850;
                                        if (Test.bFld)
                                            continue;
                                        i1 = (int) Test.instanceCount;
                                        i1 -= 37;
                                        i4 += i24;
                                        Test.iArrFld[i24 + 1] = i3;
                                        f2 += i24;
                                    } while (++i24 < 2);
                                }
                                System.setOut(ax$2);
                                System.setErr(ax$2);
                            }
                        }
                        try {
                            ServerSocketChannel ax$5 = ServerSocketChannel.open();
                            try {
                                ax$5.socket().setReceiveBufferSize(-1);
                            } catch (IllegalArgumentException iae) {
                                // correct behavior
                            }
                            try {
                                ax$5.socket().setReceiveBufferSize(0);
                            } catch (IllegalArgumentException iae) {
                                // correct behavior
                            }
                            ax$5.close();
                        } catch (Throwable ax$6) {
                        } finally {
                        }
                    }
                }
                System.setOut(ax$0);
                System.setErr(ax$1);
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + (b ? 1 : 0) + by2 + i22 + i23 + i24 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {
        int i25 = -14, i26 = 12, i27 = -30, i28 = 29308, i29 = -2, i30 = 193, i31 = -7613, i32 = 1, i33 = -26533, i34 = 7669, i35 = 36, i36 = 4, i37 = -7, i38 = -20263, i39 = 12787, i40 = -112;
        double d3 = 2.35049;
        float f3 = -98.221F, fArr2[] = new float[N];
        FuzzerUtils.init(fArr2, 90.195F);
        vMeth(i25, i25, i25);
        for (i26 = 7; i26 < 194; ++i26) {
            d3 = 1;
            do {
                Test.lArrFld[i26] = -43741L;
            } while (++d3 < 27);
        }
        i25 += (int) Test.instanceCount;
        Test.instanceCount >>= Test.instanceCount;
        i27 = i25;
        Test.instanceCount = Test.instanceCount;
        f3 += i26;
        f3 = 29220;
        i27 -= (int) d3;
        Test.instanceCount = i27;
        for (i28 = 2; i28 < 242; i28++) {
            for (i30 = i28; 21 > i30; i30++) {
                byte by3 = -19;
                i27 -= -47412;
                if (Test.bFld) {
                    f3 = i28;
                    Test.iArrFld[i30 - 1] -= i30;
                    i29 >>= 2;
                    i31 -= by3;
                } else if (Test.bFld) {
                    Test.instanceCount = Test.instanceCount;
                    i29 += (((i30 * i31) + i31) - Test.instanceCount);
                    for (i32 = i28; 1 > i32; i32++) {
                        i33 += (int) Test.instanceCount;
                        i31 &= 37577;
                        i29 = i28;
                        Test.iArrFld[i32] += i29;
                    }
                    for (i34 = 1; i34 < 1; ++i34) {
                        Test.instanceCount += i34;
                        f3 += i32;
                        Test.dFld = i25;
                    }
                    i29 += (((i30 * f3) + i26) - i29);
                } else if (Test.bFld) {
                    Test.bArrFld[i28 - 1] = Test.bFld;
                    i25 = i34;
                    Test.dFld += i30;
                    for (i36 = 1; i36 > 1; --i36) {
                        i33 = (int) Test.instanceCount;
                    }
                    i25 -= i28;
                    Test.iArrFld1[i28 - 1][i30 + 1] = i27;
                }
                if (Test.bFld)
                    break;
                i27 *= i34;
                try {
                    i33 = (2690 % i36);
                    i33 = (-63853 / i34);
                    i31 = (Test.iArrFld[i28] / i36);
                } catch (ArithmeticException a_e) {
                }
                i38 = 1;
                while (++i38 < 1) {
                    i35 <<= (int) Test.instanceCount;
                    switch((i30 % 2) + 44) {
                        case 44:
                            Test.dFld += Test.dFld;
                            i33 += (32752 + (i38 * i38));
                            i27 += i31;
                            i31 *= (int) f3;
                            i29 *= i31;
                            Test.lArrFld[i38 + 1] = i31;
                        case 45:
                        default:
                            i33 += i31;
                            i29 *= 13811;
                            i35 += (i38 * i38);
                            fArr2[i30 + 1] += -239;
                    }
                    f3 += i30;
                }
                i29 -= i34;
                for (i39 = 1; i39 > 1; i39--) {
                    i29 += -23558;
                    i27 = i34;
                    Test.dFld -= -19;
                    i29 += i29;
                    Test.iArrFld[i39] >>>= i37;
                    Test.dFld = i39;
                    if (Test.bFld)
                        break;
                    i29 += (i39 * i36);
                    Test.dFld = i34;
                    fArr2 = FuzzerUtils.float1array(N, (float) -2.78F);
                    Test.lArrFld[i28] = (long) Test.dFld;
                    Test.lArrFld[i28 + 1] = i27;
                    Test.instanceCount += i32;
                    i29 %= (int) ((long) (d3) | 1);
                }
                Test.instanceCount += 16367;
            }
            Test.instanceCount <<= i39;
            Test.instanceCount *= (long) d3;
        }
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("d3 f3 i28 = " + Double.doubleToLongBits(d3) + "," + Float.floatToIntBits(f3) + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("i38 i39 i40 = " + i38 + "," + i39 + "," + i40);
        FuzzerUtils.out.println("fArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld Test.iArrFld Test.bArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld1) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            {
                java.io.PrintStream ax$9 = System.out;
                java.io.PrintStream ax$10 = System.err;
                java.io.PrintStream ax$11 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$11);
                System.setErr(ax$11);
                {
                    boolean ax$16 = false;
                    for (int ax$15 = -2749; ax$15 < 3785; ax$15 += 1) {
                        if (!ax$16) {
                            ax$16 = true;
                            {
                                System.setOut(ax$9);
                                System.setErr(ax$10);
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                                System.setOut(ax$11);
                                System.setErr(ax$11);
                            }
                        }
                        try {
                            java.net.SocketPermission ax$12 = new SocketPermission("*", "connect , accept");
                            java.net.SocketPermission ax$13 = new SocketPermission("*", "connect , accept");
                            if (!ax$12.implies(ax$13))
                                ;
                        } catch (Throwable ax$14) {
                        } finally {
                        }
                    }
                }
                System.setOut(ax$9);
                System.setErr(ax$10);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
