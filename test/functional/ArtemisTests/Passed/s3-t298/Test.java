// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.Random;

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = -8748039350169976886L;

    public static volatile boolean bFld = false;

    public static short sFld = 13305;

    public static int iFld = 8862;

    public static double[][] dArrFld = new double[N][N];

    public static volatile int[] iArrFld = new int[N];

    public static float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 79.46720);
        FuzzerUtils.init(Test.iArrFld, -20544);
        FuzzerUtils.init(Test.fArrFld, -1.141F);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8) {
        long l1 = 2987887103153340604L, lArr[] = new long[N];
        int i10 = -8, i11 = -62435, i12 = -206, i13 = 242, i14 = 161, iArr[] = new int[N];
        float f1 = 93.858F;
        short s = -8888, sArr[] = new short[N];
        byte by = -1, byArr[] = new byte[N];
        boolean[] bArr1 = new boolean[N];
        FuzzerUtils.init(iArr, 14);
        FuzzerUtils.init(byArr, (byte) -90);
        FuzzerUtils.init(bArr1, false);
        FuzzerUtils.init(sArr, (short) 18351);
        FuzzerUtils.init(lArr, -3729150724626930504L);
        for (int i9 : iArr) {
            iArr[(i8 >>> 1) % N] *= -249;
            for (l1 = 1; l1 < 2; l1++) {
                byArr[(int) (l1 + 1)] += (byte) i9;
                f1 = i9;
                if (Test.bFld)
                    break;
                i11 = 1;
                while (++i11 < 2) {
                    s *= (short) i9;
                    i8 = 170;
                    i9 >>= i10;
                    Test.instanceCount *= (long) 113.885F;
                    Test.instanceCount = i11;
                    Test.dArrFld[i11 - 1][(int) (l1 - 1)] += Test.instanceCount;
                }
                i10 += (int) l1;
                Test.instanceCount >>>= i10;
                i12 = 1;
                while (++i12 < 2) {
                    i9 = 3632;
                    if (Test.bFld)
                        continue;
                    if (false) {
                        iArr[i12] |= i8;
                        iArr = iArr;
                        {
                            java.io.PrintStream ax$0 = System.out;
                            java.io.PrintStream ax$1 = System.err;
                            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                            {
                                boolean ax$4 = false;
                                for (int ax$3 = -3767; ax$3 < 2846; ax$3 += 6) {
                                    if (!ax$4) {
                                        ax$4 = true;
                                        {
                                            System.setOut(ax$0);
                                            System.setErr(ax$1);
                                            iArr[i12 + 1] = i8;
                                            System.setOut(ax$2);
                                            System.setErr(ax$2);
                                        }
                                    }
                                }
                            }
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                        }
                        i9 += (int) Test.instanceCount;
                        bArr1[(int) (l1)] = Test.bFld;
                        Test.instanceCount = i10;
                    } else if (Test.bFld) {
                        i10 <<= i9;
                        i9 |= (int) -7L;
                        sArr[i12 + 1] <<= (short) Test.instanceCount;
                        f1 *= i12;
                        iArr[(int) (l1 - 1)] >>>= by;
                        i8 = i9;
                    }
                    lArr[(int) (l1 + 1)] ^= i9;
                }
            }
            for (i13 = 1; i13 < 2; i13++) {
                i9 *= i9;
                s %= (short) ((long) (f1) | 1);
                Test.sFld += (short) i9;
                by = (byte) i8;
            }
        }
        vMeth1_check_sum += i8 + l1 + i10 + Float.floatToIntBits(f1) + i11 + s + i12 + by + i13 + i14 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr1) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i3, int i4) {
        double d = 0.82487, d1 = 1.37093;
        int i5 = 25776, i6 = -14807, i7 = -4, i15 = -13, i16 = -128, i17 = 128, i18 = 4, i19 = 6, i20 = 1, i21 = -11, i22 = -9, iArr1[] = new int[N];
        long l = -10L;
        float f = -77.734F, f2 = 73.818F;
        boolean b = false, bArr[] = new boolean[N];
        byte by1 = -88;
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, -31580);
        d /= (Test.instanceCount | 1);
        for (i5 = 9; i5 < 158; ++i5) {
            for (l = 1; l < 4; ++l) {
                f += (36 + (l * l));
            }
            b = bArr[i5 - 1];
            i3 += i3;
            vMeth1(i5);
            for (i15 = 1; 4 > i15; ++i15) {
                iArr1[i5] -= i5;
            }
            for (f2 = 1; 4 > f2; ++f2) {
                switch(((i5 % 4) * 5) + 103) {
                    case 113:
                        if (Test.bFld)
                            continue;
                        Test.sFld += (short) i5;
                        d1 = 1;
                        while (++d1 < 2) {
                            i6 <<= (int) l;
                            i7 -= i6;
                            if (i4 != 0) {
                                vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d) + i5 + i6 + l + i7 + Float.floatToIntBits(f) + (b ? 1 : 0) + i15 + i16 + Float.floatToIntBits(f2) + i17 + Double.doubleToLongBits(d1) + i18 + by1 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
                                return;
                            }
                            iArr1[(int) (d1 + 1)] *= i17;
                        }
                        i18 = 1;
                        while (++i18 < 2) {
                            iArr1[i5 - 1] *= i5;
                            i4 += (((i18 * Test.instanceCount) + i18) - i7);
                            Test.instanceCount = i3;
                            iArr1[i18] = i15;
                            Test.instanceCount = l;
                            iArr1[i18 + 1] = by1;
                            i3 += (((i18 * i7) + i4) - i15);
                            i19 += (i18 ^ i4);
                        }
                        i3 = i5;
                        break;
                    case 117:
                        i6 += (int) Test.instanceCount;
                        for (i20 = 1; i20 < 2; i20++) {
                            Test.iFld += -5;
                            try {
                                i4 = (-1038078330 % iArr1[i5]);
                                iArr1[i5 - 1] = (99 % i21);
                                Test.iFld = (-201 / i15);
                            } catch (ArithmeticException a_e) {
                            }
                            i17 += i22;
                            by1 += (byte) (20629 + (i20 * i20));
                            f += (i20 * i20);
                            f -= i22;
                            f -= i19;
                        }
                    case 108:
                        i21 <<= -25079;
                        break;
                    case 123:
                        Test.iFld += (int) (f2 * i22);
                        break;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + Double.doubleToLongBits(d) + i5 + i6 + l + i7 + Float.floatToIntBits(f) + (b ? 1 : 0) + i15 + i16 + Float.floatToIntBits(f2) + i17 + Double.doubleToLongBits(d1) + i18 + by1 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i2) {
        int i23 = -3486, i24 = 34830, i25 = 133, i26 = 8, i27 = -6, i28 = -135, i29 = -53604, i30 = 14, i31 = 7, i32 = -649, i33 = -14, i34 = -62, i35 = 10, iArr2[] = new int[N];
        double d2 = -119.16223;
        float f3 = 1.907F;
        byte by2 = -36, byArr1[] = new byte[N];
        FuzzerUtils.init(iArr2, -175);
        FuzzerUtils.init(byArr1, (byte) -58);
        vMeth(i2, i2);
        Test.bFld = Test.bFld;
        for (i23 = 4; i23 < 142; i23++) {
            i25 = 4;
            {
                java.io.PrintStream ax$5 = System.out;
                java.io.PrintStream ax$6 = System.err;
                java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$7);
                System.setErr(ax$7);
                {
                    boolean ax$17 = false;
                    for (int ax$16 = -1067; ax$16 < 8482; ax$16 += 7) {
                        if (!ax$17) {
                            ax$17 = true;
                            {
                                System.setOut(ax$5);
                                System.setErr(ax$6);
                                do {
                                    i24 -= Test.iFld;
                                } while (--i25 > 0);
                                System.setOut(ax$7);
                                System.setErr(ax$7);
                            }
                        }
                        int ax$14 = i31;
                        try {
                            java.util.Random ax$9 = new Random(69);
                            long[] ax$13 = { // Long-range values
                            // Long-range values
                            // Long-range values
                            // Long-range values
                            // Long-range values
                            0L, // Long-range values
                            1L, // Long-range values
                            2L, // Long-range values
                            3L, // Long-range values
                            99999L, // Long-range values
                            100000L, // Long-range values
                            999999L, // Long-range values
                            100000L, // Long-range values
                            999999999L, // Long-range values
                            1000000000L, // Long-range values
                            0x1234_5678L, // Long-range values
                            0x8000_0000L, // Long-range values
                            0x8000_0001L, // Long-range values
                            0x8000_0002L, 0x8000_0003L, 0x8765_4321L, 0xFFFF_FFFEL, 0xFFFF_FFFFL, 999_999_999_999L, 1_000_000_000_000L, 999_999_999_999_999_999L, 1_000_000_000_000_000_000L, 0xFFFF_FFFF_FFFF_FFFEL, 0xFFFF_FFFF_FFFF_FFFFL };
                            boolean[] ax$10 = new boolean[1];
                            long[] ax$8 = { -1L, 0L, 1L };
                            long ax$12 = ax$9.nextLong();
                            for (int ax$11 = 0; ax$11 < 64; ax$11++) {
                                ax$10[i31 * 64 + ax$11] = (ax$12 & (1L << ax$11)) != 0;
                            }
                            ax$13[i31] = 0;
                            ax$8[i31] = ax$12;
                        } catch (Throwable ax$15) {
                        } finally {
                            i31 = ax$14;
                        }
                    }
                }
                System.setOut(ax$5);
                System.setErr(ax$6);
            }
            i2 += (i23 * i23);
            for (i26 = 1; i26 < 4; ++i26) {
                Test.iFld <<= (int) Test.instanceCount;
                i27 = (int) Test.instanceCount;
                for (i28 = 1; i28 < 2; i28++) {
                    i29 = i28;
                    if (Test.bFld)
                        break;
                    Test.iFld = 1;
                    i2 >>= i23;
                    i27 = 1;
                    Test.sFld = (short) i25;
                    d2 = i25;
                    i27 *= i23;
                    Test.instanceCount += i28;
                }
                iArr2[i23 - 1] -= (int) d2;
                f3 += Test.sFld;
                for (i30 = 1; i30 < 2; ++i30) {
                    i24 += (int) -6434241920759732183L;
                    iArr2[i23 - 1] = (int) Test.instanceCount;
                    d2 = i25;
                    f3 -= i24;
                }
            }
            i31 += i23;
            Test.dArrFld[i23][(Test.iFld >>> 1) % N] = f3;
        }
        for (i32 = 6; i32 < 108; ++i32) {
            for (i34 = 1; i34 < 5; ++i34) {
                Test.instanceCount >>= Test.sFld;
                byArr1[i32 - 1] = (byte) i28;
                i33 = by2;
                Test.instanceCount = i34;
                i2 += i23;
                i31 += i24;
            }
            if (Test.bFld)
                continue;
        }
        long meth_res = i2 + i23 + i24 + i25 + i26 + i27 + i28 + i29 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f3) + i30 + i31 + i32 + i33 + i34 + i35 + by2 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -42987, i1 = 24, i36 = 62491, i37 = 10, i38 = -3, i39 = 38850, i40 = -6, i41 = 0, i42 = -7, i43 = -49934;
        float f4 = -1.575F;
        double d3 = -91.92628;
        byte by3 = 114, byArr2[] = new byte[N];
        long[] lArr1 = new long[N];
        short[] sArr1 = new short[N];
        FuzzerUtils.init(lArr1, 11L);
        FuzzerUtils.init(sArr1, (short) -30058);
        FuzzerUtils.init(byArr2, (byte) 39);
        for (i = 9; i < 248; i++) {
            if ((Math.min(iMeth(i), i1) - 3873) >= f4)
                break;
            for (i36 = 1; i36 < 21; i36++) {
                i37 -= i1;
            }
            i38 = 1;
            while (++i38 < 21) {
                Test.iArrFld[i38] >>= (int) Test.instanceCount;
                if (true)
                    break;
                Test.iFld += (i38 * i38);
                Test.instanceCount >>= i36;
            }
            for (i39 = 1; i39 < 21; ++i39) {
                i37 += (((i39 * i) + i1) - Test.instanceCount);
                if (Test.bFld) {
                    Test.iArrFld = Test.iArrFld;
                    i1 += (-13 + (i39 * i39));
                    for (i41 = 1; i41 < 2; ++i41) {
                        i42 *= (int) Test.instanceCount;
                        f4 = (float) d3;
                        lArr1[(-12 >>> 1) % N] *= (long) f4;
                        Test.iArrFld[i41] += (int) f4;
                        Test.fArrFld[i41] -= i42;
                        if (Test.bFld) {
                            if (Test.bFld) {
                                if (Test.bFld)
                                    break;
                                Test.dArrFld[i39 + 1][i39 + 1] -= i37;
                                if (Test.bFld) {
                                    Test.iFld -= i37;
                                    Test.instanceCount = Test.instanceCount;
                                    Test.instanceCount += i41;
                                    i1 += (i41 * i41);
                                    i43 += i1;
                                    f4 -= by3;
                                    Test.iFld += (i41 * i41);
                                    Test.sFld = (short) i41;
                                    d3 = f4;
                                    i43 = i36;
                                    i37 &= (int) Test.instanceCount;
                                    sArr1[i + 1] -= (short) i41;
                                    Test.instanceCount += (((i41 * i40) + Test.instanceCount) - i);
                                }
                                i37 -= i;
                                Test.iArrFld[i39] -= i38;
                                by3 = (byte) Test.instanceCount;
                                i1 = 16;
                                Test.instanceCount = i43;
                            }
                            Test.iFld = i41;
                            i42 += -125;
                            lArr1[i41 - 1] += Test.sFld;
                            Test.iFld -= i39;
                            Test.iArrFld[i39 + 1] = i38;
                            i37 += (((i41 * i40) + f4) - Test.instanceCount);
                            Test.instanceCount = i39;
                        } else {
                            Test.instanceCount = Test.instanceCount;
                            Test.bFld = Test.bFld;
                            if (Test.bFld)
                                continue;
                            Test.iArrFld[i41 - 1] += Test.iFld;
                            Test.instanceCount += (((i41 * i38) + i1) - i43);
                            Test.iFld = 44523;
                            if (Test.bFld)
                                continue;
                            Test.iFld = i37;
                            i40 = i40;
                            i1 += (int) Test.instanceCount;
                            Test.instanceCount = i37;
                            Test.iFld = (int) Test.instanceCount;
                        }
                        Test.instanceCount += (((i41 * Test.instanceCount) + by3) - f4);
                        Test.iArrFld[i39 + 1] = i36;
                        byArr2[i - 1] &= (byte) Test.instanceCount;
                        Test.instanceCount = i40;
                        i37 -= (int) Test.instanceCount;
                        i1 >>= -13;
                        f4 *= i1;
                        Test.iArrFld[i39] = i41;
                        if (Test.bFld)
                            continue;
                    }
                    f4 *= Test.instanceCount;
                    d3 = f4;
                }
                i1 = (int) Test.instanceCount;
                Test.bFld = true;
            }
        }
        FuzzerUtils.out.println("i i1 f4 = " + i + "," + i1 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i36 i37 i38 = " + i36 + "," + i37 + "," + i38);
        FuzzerUtils.out.println("i39 i40 i41 = " + i39 + "," + i40 + "," + i41);
        FuzzerUtils.out.println("i42 d3 i43 = " + i42 + "," + Double.doubleToLongBits(d3) + "," + i43);
        FuzzerUtils.out.println("by3 lArr1 sArr1 = " + by3 + "," + FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(sArr1));
        FuzzerUtils.out.println("byArr2 = " + FuzzerUtils.checkSum(byArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.sFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld Test.dArrFld Test.iArrFld = " + Test.iFld + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
        {
            java.io.PrintStream ax$22 = System.out;
            java.io.PrintStream ax$23 = System.err;
            java.io.PrintStream ax$24 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$24);
            System.setErr(ax$24);
            try {
                for (int ax$20 = -3341; ax$20 < 4035; ax$20 += 1) {
                    int ax$18 = iFld;
                    try {
                        iFld++;
                    } catch (Throwable ax$19) {
                    } finally {
                        iFld = ax$18;
                    }
                }
            } catch (Throwable ax$21) {
            }
            System.setOut(ax$22);
            System.setErr(ax$23);
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
