// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -26505L;

    public static short sFld = 22185;

    public static int iFld = -25993;

    public static boolean bFld = false;

    public volatile long lFld = -1386589463L;

    public static int[] iArrFld = new int[N];

    public static boolean[] bArrFld = new boolean[N];

    public static byte[] byArrFld = new byte[N];

    public static volatile short[][] sArrFld = new short[N][N];

    public float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -55934);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.byArrFld, (byte) -52);
        FuzzerUtils.init(Test.sArrFld, (short) 14502);
    }

    public static long bMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth1_check_sum = 0;

    public static long lMeth1() {
        if (ax$8) {
            int ax$12 = iFld;
            try {
                double[] ax$9 = { 0.0, 1.0, 2.0, 3.0 };
                double ax$10 = 23.0;
                double[] ax$11 = { 0.0, 1.0, 2.0, 3.0 };
                ax$11[iFld] = (ax$9[iFld] * ax$10);
            } catch (Throwable ax$13) {
            } finally {
                iFld = ax$12;
            }
            return -2624491261057430398L;
        }
        int i6 = -20398, i7 = 207, i8 = -37098, i9 = -16;
        long l2 = 10L, lArr[] = new long[N];
        boolean b1 = true;
        float f = 55.866F, fArr[] = new float[N];
        byte by = 42;
        FuzzerUtils.init(lArr, 54847L);
        FuzzerUtils.init(fArr, 2.514F);
        Test.instanceCount -= -29097;
        for (i6 = 240; i6 > 7; i6--) {
            l2 = 1;
            do {
                i7 += (int) -37.472F;
                for (i8 = 1; i8 < 1; i8++) {
                    double d1 = -1.94017;
                    i9 |= i8;
                    if (b1)
                        break;
                    if (b1) {
                        Test.iArrFld[i6] -= (int) l2;
                        i9 -= i9;
                        i7 *= i6;
                        lArr = lArr;
                        f -= i8;
                        lArr[i8 - 1] |= i8;
                        i9 += (i8 * i8);
                    } else if (b1) {
                        switch(((i8 >>> 1) % 2) + 100) {
                            case 100:
                                i9 += (i8 - by);
                                i9 = (int) d1;
                                Test.bArrFld[(int) (l2 + 1)] = b1;
                                Test.instanceCount += (long) f;
                                Test.instanceCount -= (long) d1;
                                Test.instanceCount = i8;
                                switch((int) (((l2 % 6) * 5) + 40)) {
                                    case 59:
                                        Test.iArrFld = FuzzerUtils.int1array(N, (int) 241);
                                        Test.instanceCount += (i8 * i8);
                                        f += (7744597138687481775L + (i8 * i8));
                                        f += i6;
                                        i7 >>= 88;
                                        i7 = i9;
                                        Test.iArrFld[(int) (l2)] = i8;
                                        if (b1) {
                                            Test.instanceCount &= Test.instanceCount;
                                        }
                                        lArr[(int) (l2 + 1)] *= (long) f;
                                        i7 += (int) l2;
                                        b1 = b1;
                                        Test.sFld = (short) i9;
                                        Test.instanceCount += i8;
                                    case 66:
                                        if (b1)
                                            continue;
                                        break;
                                    case 55:
                                        Test.instanceCount += (((i8 * i8) + f) - i8);
                                        break;
                                    case 60:
                                        if (false)
                                            continue;
                                        break;
                                    case 48:
                                        fArr[(int) (l2 + 1)] -= 12;
                                        break;
                                    case 63:
                                        Test.byArrFld[(int) (l2 + 1)] >>>= (byte) i7;
                                }
                                break;
                            case 101:
                                i9 <<= i8;
                        }
                    } else {
                        i9 += (i8 * i8);
                    }
                }
            } while (++l2 < 3);
        }
        long meth_res = i6 + i7 + l2 + i8 + i9 + (b1 ? 1 : 0) + Float.floatToIntBits(f) + by + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth1_check_sum += meth_res;
        return (long) meth_res;
    }

    public long lMeth(int i3, boolean b, long l1) {
        int i4 = 14, i5 = -120, i10 = 11, i11 = -11, i12 = 43123, i13 = 5, i14 = 5;
        byte by1 = 14;
        float f1 = -1.10F;
        double[][] dArr = new double[N][N];
        long[][] lArr1 = new long[N][N];
        FuzzerUtils.init(dArr, 2.70106);
        FuzzerUtils.init(lArr1, 5L);
        for (i4 = 3; 236 > i4; ++i4) {
            dArr[i4 + 1][i4 + 1] = lMeth1();
            for (i10 = 1; i10 < 3; ++i10) {
                Test.instanceCount += Test.sFld;
                i5 >>= i3;
                l1 = (long) 91.108909;
                Test.instanceCount <<= 21396L;
            }
            i5 *= (int) 1.47476;
            Test.bArrFld[i4] = true;
            Test.sArrFld[i4 + 1][i4 - 1] = (short) i10;
            Test.instanceCount = -126;
            i11 -= i10;
            for (i12 = 1; i12 < 3; i12++) {
                lArr1[i12 - 1][i4] *= i10;
                i13 += (i12 * l1);
                Test.sFld = (short) i10;
                fArrFld[i12 + 1] += Test.instanceCount;
                Test.iArrFld[i4 - 1] += i13;
                l1 += i10;
                i14 = 1;
                do {
                    Test.instanceCount = i10;
                    l1 += (i14 * l1);
                    i3 -= i14;
                    switch(((i14 % 9) * 5) + 7) {
                        case 20:
                            i13 *= i12;
                            i11 = i3;
                            i13 = i12;
                            by1 *= (byte) i3;
                            Test.instanceCount += i11;
                            i3 += 9571;
                            i13 = i13;
                            dArr[i14 + 1][i12 + 1] *= Test.instanceCount;
                            break;
                        case 48:
                            i11 += i14;
                            Test.instanceCount *= i14;
                            i13 = (int) f1;
                            if (b)
                                break;
                            i3 += (i14 * i14);
                            break;
                        case 42:
                            i13 *= Test.iFld;
                            break;
                        case 11:
                            i13 += (int) Test.instanceCount;
                            break;
                        case 50:
                            f1 -= i12;
                            break;
                        case 28:
                            Test.bFld = Test.bFld;
                            break;
                        case 52:
                            Test.iFld += (i14 - i14);
                            break;
                        case 30:
                            i11 -= (int) 2796419143L;
                            break;
                        case 9:
                            i3 += i14;
                            break;
                    }
                } while (++i14 < 2);
            }
        }
        long meth_res = i3 + (b ? 1 : 0) + l1 + i4 + i5 + i10 + i11 + i12 + i13 + i14 + by1 + Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public boolean bMeth(long l) {
        double d = 19.101127;
        int i15 = 5, i16 = -20, i17 = -54180, i18 = 12, i19 = -44004, i20 = 127, i21 = -47611, i22 = 144;
        long l3 = 19475L, lArr2[][] = new long[N][N];
        byte by2 = 105;
        float f2 = 92.501F;
        FuzzerUtils.init(lArr2, -6413122271148945323L);
        for (int i2 : Test.iArrFld) {
            try {
                i2 = (54399 % i2);
                i2 = (i2 % -24034);
                i2 = (i2 % 243);
            } catch (ArithmeticException a_e) {
            }
            l = (long) (d + lMeth(i2, Test.bFld, l));
            for (i15 = 1; i15 < 2; i15++) {
                d *= i15;
                i16 *= (int) l;
                if (Test.bFld)
                    break;
                Test.iFld -= i2;
                for (l3 = i15; l3 < 2; l3++) {
                    Test.bArrFld[i15 - 1] = true;
                }
                fArrFld[i15] = Test.iFld;
                Test.instanceCount += (((i15 * i16) + i17) - Test.instanceCount);
                i2 = 6;
                l = i17;
                i18 = 1;
                while (++i18 < 2) {
                    Test.iFld += i16;
                    i16 += (i18 - Test.instanceCount);
                    Test.iFld -= i17;
                    lArr2[i18 + 1] = lArr2[i18];
                    i2 += i18;
                    l = i15;
                    i17 -= by2;
                }
                i2 = i2;
                if (i15 != 0) {
                    return ((int) (l + Double.doubleToLongBits(d) + i15 + i16 + l3 + i17 + i18 + by2 + i19 + i20 + Float.floatToIntBits(f2) + i21 + i22 + FuzzerUtils.checkSum(lArr2))) % 2 > 0;
                }
            }
            Test.iArrFld[(i16 >>> 1) % N] = i2;
            Test.bFld = Test.bFld;
            l -= -67;
            for (i19 = 1; i19 < 2; i19++) {
                i2 %= (int) (l3 | 1);
                Test.instanceCount -= (long) f2;
                f2 += (i19 * i19);
                Test.iFld += (i19 ^ i19);
                for (i21 = 1; i21 < 2; ++i21) {
                    Test.instanceCount += (i21 * i21);
                    Test.instanceCount -= i15;
                }
                Test.bFld = Test.bFld;
                i16 += i19;
            }
        }
        long meth_res = l + Double.doubleToLongBits(d) + i15 + i16 + l3 + i17 + i18 + by2 + i19 + i20 + Float.floatToIntBits(f2) + i21 + i22 + FuzzerUtils.checkSum(lArr2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {
        int i = -223, i1 = -6, i23 = -6, i24 = 55465, i25 = -12, i26 = 94, iArr[] = new int[N];
        float f3 = -41.414F, f4 = 55.470F, fArr1[] = new float[N];
        double d2 = -2.66263, dArr1[] = new double[N];
        long l4 = -1364625152L, lArr3[] = new long[N];
        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(dArr1, -2.100769);
        FuzzerUtils.init(lArr3, -4L);
        FuzzerUtils.init(fArr1, -2.211F);
        Test.instanceCount = Test.instanceCount;
        i = 1;
        do {
            i1 = (i1++);
            iArr = (iArr = FuzzerUtils.int1array(N, (int) -11));
            bMeth(Test.instanceCount);
            f3 *= 199;
            switch((i % 2) + 87) {
                case 87:
                    Test.instanceCount >>>= 8610;
                    i23 = 1;
                    do {
                        for (i24 = 1; i24 < 3; ++i24) {
                            byte by3 = -74;
                            if (false) {
                                Test.iFld = Test.iFld;
                                Test.iFld = (int) Test.instanceCount;
                                iArr[(i >>> 1) % N] = (int) 88.92263;
                                i25 += -194;
                                Test.iFld += i24;
                                switch((((i23 >>> 1) % 9) * 5) + 23) {
                                    case 31:
                                        Test.iFld += (((i24 * f3) + i23) - i24);
                                        i1 += (i24 ^ i25);
                                        break;
                                    case 39:
                                        i25 |= -41074;
                                        i25 -= i25;
                                        switch((i % 10) + 2) {
                                            case 2:
                                                Test.instanceCount <<= i24;
                                                i25 += i24;
                                                Test.iFld >>= (int) Test.instanceCount;
                                                Test.bArrFld = FuzzerUtils.boolean1array(N, (boolean) false);
                                                by3 += (byte) (((i24 * i) + Test.instanceCount) - i25);
                                                Test.iFld >>= (int) Test.instanceCount;
                                                i1 += (int) Test.instanceCount;
                                                i25 -= (int) f3;
                                                Test.instanceCount += (i24 * Test.instanceCount);
                                                f3 += (i24 * i25);
                                                switch(((i >>> 1) % 3) + 8) {
                                                    case 8:
                                                        i1 -= (int) f3;
                                                        dArr1[i + 1] = 0;
                                                        d2 += i23;
                                                        i25 -= i1;
                                                        i1 += 205;
                                                        break;
                                                    case 9:
                                                        i1 -= (int) Test.instanceCount;
                                                        i25 += (((i24 * Test.iFld) + Test.iFld) - i1);
                                                        break;
                                                    case 10:
                                                        f4 = i23;
                                                        i1 += -7;
                                                        Test.iFld = (int) f3;
                                                        i1 -= (int) d2;
                                                        Test.sFld = (short) i1;
                                                        f3 *= i;
                                                        d2 = i1;
                                                        Test.sFld += (short) (i24 * i24);
                                                        f4 *= i24;
                                                        Test.instanceCount += (((i24 * i23) + f4) - by3);
                                                        break;
                                                }
                                                l4 += (((i24 * i24) + i23) - i25);
                                                i25 /= (int) (Test.iFld | 1);
                                                f3 += by3;
                                                Test.instanceCount *= -33;
                                                break;
                                            case 3:
                                                l4 >>>= 3;
                                                f3 *= (float) d2;
                                                Test.instanceCount %= (i24 | 1);
                                                Test.sFld = (short) i24;
                                                break;
                                            case 4:
                                                f4 = i24;
                                                lArr3[i23 - 1] = Test.iFld;
                                                i25 += i24;
                                                switch(((Test.iFld >>> 1) % 8) + 33) {
                                                    case 33:
                                                        Test.sFld = (short) i1;
                                                        i1 += i24;
                                                        switch(((Test.iFld >>> 1) % 4) + 102) {
                                                            case 102:
                                                                i25 = i1;
                                                                break;
                                                            case 103:
                                                                try {
                                                                    i1 = (i23 / Test.iFld);
                                                                    i1 = (30 % i25);
                                                                    i1 = (137 / Test.iFld);
                                                                } catch (ArithmeticException a_e) {
                                                                }
                                                                l4 = -35;
                                                                Test.iFld -= Test.sFld;
                                                                Test.iFld += (i24 * i24);
                                                                f3 += l4;
                                                                Test.sFld >>= (short) l4;
                                                                dArr1[i + 1] = Test.instanceCount;
                                                                d2 = 11L;
                                                                break;
                                                            case 104:
                                                                Test.instanceCount += l4;
                                                                break;
                                                            case 105:
                                                                by3 = (byte) i23;
                                                                break;
                                                            default:
                                                                if (Test.bFld)
                                                                    break;
                                                        }
                                                        break;
                                                    case 34:
                                                        Test.iFld *= (int) f3;
                                                        break;
                                                    case 35:
                                                        f3 = Test.iFld;
                                                        break;
                                                    case 36:
                                                        Test.iFld += (-14 + (i24 * i24));
                                                        break;
                                                    case 37:
                                                        i1 = Test.iFld;
                                                    case 38:
                                                        Test.instanceCount = 0L;
                                                        break;
                                                    case 39:
                                                        l4 += (1005657052L + (i24 * i24));
                                                        break;
                                                    case 40:
                                                        i25 = i;
                                                    default:
                                                        try {
                                                            iArr[i + 1] = (Test.iFld % Test.iFld);
                                                            Test.iArrFld[i] = (i1 / -198);
                                                            iArr[i24 + 1] = (-2102738769 / Test.iArrFld[i24 + 1]);
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                }
                                                break;
                                            case 5:
                                                Test.iFld += (int) l4;
                                                break;
                                            case 6:
                                                iArr[i23 + 1] *= i25;
                                            case 7:
                                                i25 += (12 + (i24 * i24));
                                            case 8:
                                                lArr3[i24 - 1] *= l4;
                                                break;
                                            case 9:
                                                f3 = Test.sFld;
                                                break;
                                            case 10:
                                                l4 -= i26;
                                            case 11:
                                                fArr1[i23 - 1] = i25;
                                                break;
                                            default:
                                                Test.instanceCount += (41271 + (i24 * i24));
                                        }
                                        break;
                                    case 65:
                                        Test.instanceCount += i24;
                                    case 26:
                                        Test.iFld -= -13;
                                        break;
                                    case 61:
                                        iArr[i24] = i23;
                                        break;
                                    case 57:
                                        lFld += -5;
                                        break;
                                    case 51:
                                        try {
                                            i1 = (i23 / -13);
                                            i26 = (-6 / Test.iFld);
                                            i26 = (iArr[i24 + 1] % -154);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        break;
                                    case 55:
                                        i25 -= i24;
                                        break;
                                    case 52:
                                        i1 = 10;
                                }
                            } else {
                                Test.byArrFld = FuzzerUtils.byte1array(N, (byte) 50);
                            }
                        }
                    } while ((i23 += 3) < 54);
                case 88:
                    i25 -= i24;
                    break;
            }
        } while (++i < 94);
        FuzzerUtils.out.println("i i1 f3 = " + i + "," + i1 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("d2 f4 l4 = " + Double.doubleToLongBits(d2) + "," + Float.floatToIntBits(f4) + "," + l4);
        FuzzerUtils.out.println("i26 iArr dArr1 = " + i26 + "," + FuzzerUtils.checkSum(iArr) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println("lArr3 fArr1 = " + FuzzerUtils.checkSum(lArr3) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.iFld = " + Test.instanceCount + "," + Test.sFld + "," + Test.iFld);
        FuzzerUtils.out.println("Test.bFld lFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," + lFld + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.bArrFld Test.byArrFld Test.sArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + "," + FuzzerUtils.checkSum(Test.byArrFld) + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            {
                java.io.PrintStream ax$0 = System.out;
                java.io.PrintStream ax$1 = System.err;
                java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$2);
                System.setErr(ax$2);
                {
                    boolean ax$7 = false;
                    for (int ax$6 = -4799; ax$6 < 2112; ax$6 += 2) {
                        if (!ax$7) {
                            ax$7 = true;
                            {
                                System.setOut(ax$0);
                                System.setErr(ax$1);
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                                System.setOut(ax$2);
                                System.setErr(ax$2);
                            }
                        }
                        boolean ax$4 = bFld;
                        try {
                            boolean ax$3 = /*timing=*/
                            false;
                            if (ax$3) {
                            }
                            bFld = true;
                        } catch (Throwable ax$5) {
                        } finally {
                            bFld = ax$4;
                        }
                    }
                }
                System.setOut(ax$0);
                System.setErr(ax$1);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$8 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  bMeth ->  bMeth mainTest
// DEBUG  lMeth ->  lMeth bMeth mainTest
// DEBUG  lMeth1 ->  lMeth1 lMeth bMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
