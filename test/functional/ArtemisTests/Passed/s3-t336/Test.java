// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.net.NetworkInterface;
import java.net.InetSocketAddress;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -742923285L;

    public static volatile int iFld = 20;

    public static byte byFld = -12;

    public static double dFld = 39.53104;

    public static volatile byte byFld1 = 115;

    public static short sFld = -30647;

    public static volatile float fFld = -92.80F;

    public int iFld1 = 2;

    public static int iFld2 = -223;

    public static short[] sArrFld = new short[N];

    public static volatile int[] iArrFld = new int[N];

    public static long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short) -15840);
        FuzzerUtils.init(Test.iArrFld, -184);
        FuzzerUtils.init(Test.lArrFld, -640938764121419350L);
    }

    public static long lMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i3, int i4) {
        int i5 = 69, i6 = 11509, i7 = 0, i8 = -8, i9 = 16546, i10 = -11, iArr1[] = new int[N];
        boolean b = true;
        short s = -24566;
        float f1 = 14.750F, fArr1[][] = new float[N][N];
        long[] lArr = new long[N];
        FuzzerUtils.init(iArr1, -123);
        FuzzerUtils.init(lArr, 158L);
        FuzzerUtils.init(fArr1, 0.808F);
        for (i5 = 3; i5 < 164; ++i5) {
            i4 |= i3;
            switch(((i5 % 10) * 5) + 25) {
                case 59:
                    for (i7 = 1; i7 < 4; i7++) {
                        i9 = 1;
                        while (++i9 < 2) {
                            if (b)
                                continue;
                            switch(((i5 % 3) * 5) + 63) {
                                case 65:
                                    Test.instanceCount &= 46;
                                    switch(((i8 >>> 1) % 6) + 73) {
                                        case 73:
                                            s += (short) 2.494F;
                                            Test.sArrFld[i5 + 1] = (short) Test.dFld;
                                            iArr1[i7 - 1] = 10461;
                                            if (b)
                                                break;
                                            Test.instanceCount = i9;
                                            Test.dFld *= i6;
                                            lArr[i9 + 1] = i3;
                                            Test.sArrFld[i7] <<= (short) i7;
                                        case 74:
                                            if (b) {
                                                fArr1[i9][i9] -= i4;
                                                Test.byFld1 += (byte) (((i9 * f1) + Test.byFld1) - i8);
                                            } else {
                                                i6 *= (int) Test.instanceCount;
                                                switch((i7 % 6) + 27) {
                                                    case 27:
                                                        i4 += i9;
                                                        Test.instanceCount += (i9 * i3);
                                                        i3 += (i9 * i9);
                                                        Test.instanceCount -= s;
                                                        iArr1[i9 - 1] += i7;
                                                        if (b)
                                                            continue;
                                                        try {
                                                            iArr1[(i9 >>> 1) % N] = (iArr1[i9 + 1] / 66);
                                                            iArr1[i7 - 1] = (225 % i3);
                                                            i3 = (i3 / i5);
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                        if (true) {
                                                            switch((i9 % 10) + 55) {
                                                                case 55:
                                                                    Test.instanceCount += (((i9 * Test.iFld) + i3) - Test.byFld);
                                                                    i6 += (i9 + Test.instanceCount);
                                                                    s += (short) (((i9 * Test.instanceCount) + i9) - i6);
                                                                    f1 -= (float) Test.dFld;
                                                                    Test.dFld -= f1;
                                                                    Test.iFld -= i3;
                                                                case 56:
                                                                    i6 *= (int) 2179228493239126972L;
                                                                    break;
                                                                case 57:
                                                                case 58:
                                                                    Test.iFld += i4;
                                                                    break;
                                                                case 59:
                                                                    Test.instanceCount >>= -28545;
                                                                    break;
                                                                case 60:
                                                                    Test.iFld *= (int) f1;
                                                                    break;
                                                                case 61:
                                                                    Test.instanceCount = i6;
                                                                    break;
                                                                case 62:
                                                                    i4 = (int) Test.instanceCount;
                                                                    break;
                                                                case 63:
                                                                    Test.iFld &= (int) -211L;
                                                                    break;
                                                                case 64:
                                                                    if (b)
                                                                        break;
                                                                    break;
                                                                default:
                                                                    Test.instanceCount = Test.byFld1;
                                                            }
                                                        } else {
                                                            Test.dFld *= i9;
                                                        }
                                                        break;
                                                    case 28:
                                                        Test.iFld = i10;
                                                        break;
                                                    case 29:
                                                    case 30:
                                                        i3 -= (int) Test.instanceCount;
                                                    case 31:
                                                    case 32:
                                                        Test.iFld = i8;
                                                }
                                            }
                                            break;
                                        case 75:
                                            f1 = -7;
                                        case 76:
                                            i8 <<= i4;
                                        case 77:
                                            i4 += (((i9 * i8) + Test.instanceCount) - Test.instanceCount);
                                            break;
                                        case 78:
                                            iArr1[i9] <<= (int) Test.instanceCount;
                                            break;
                                    }
                                    break;
                                case 64:
                                    Test.iFld += (int) f1;
                                    break;
                                case 73:
                                    i10 += (i9 | (long) f1);
                                default:
                                    try {
                                        i8 = (i3 % -1683506411);
                                        Test.iFld = (12781 / i5);
                                        i6 = (1759242367 / i7);
                                    } catch (ArithmeticException a_e) {
                                    }
                            }
                        }
                    }
                    break;
                case 57:
                    iArr1[i5 + 1] &= (int) Test.instanceCount;
                    break;
                case 58:
                    Test.instanceCount *= i10;
                    break;
                case 50:
                    i3 -= (int) 1.92190;
                    break;
                case 43:
                case 54:
                    Test.byFld -= (byte) Test.dFld;
                    break;
                case 65:
                    lArr[i5 - 1] += i7;
                    break;
                case 66:
                    if (false)
                        break;
                    break;
                case 49:
                    b = b;
                case 46:
                    s = (short) 2584495405748619031L;
                    break;
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + (b ? 1 : 0) + s + Float.floatToIntBits(f1) + i10 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        byMeth_check_sum += meth_res;
        return (byte) meth_res;
    }

    public static void vMeth() {
        double d = -115.72223, d1 = -8.15089;
        int i1 = 160, i2 = 17415, i11 = -33030, i12 = 128, i13 = -47541, i14 = -4, iArr[] = new int[N];
        float f = 2.546F, f2 = 13.994F;
        byte[] byArr = new byte[N];
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(byArr, (byte) -32);
        FuzzerUtils.init(lArr1, 136L);
        iArr[(Test.iFld >>> 1) % N] *= (iArr[(Test.iFld >>> 1) % N] >>= (++Test.iFld));
        d = 150;
        while (--d > 0) {
            for (i1 = 1; 4 > i1; i1++) {
                Test.iFld += (-6 + (i1 * i1));
                i2 += (i1 - i2);
                i2 -= (int) f;
                f += (i1 - i2);
                i2 += (((i1 * i1) + Test.byFld) - Test.instanceCount);
            }
            Test.instanceCount /= (i2 | 1);
            i2 = (byMeth(7, Test.iFld) * Test.iFld);
            iArr[(int) (d)] = i1;
            Test.iFld = i1;
            i2 = Test.sFld;
            Test.instanceCount >>= Test.instanceCount;
            for (f2 = 1; f2 < 4; f2++) {
                d1 = 1;
                do {
                    i11 -= (int) Test.instanceCount;
                    Test.iFld += (int) (d1 * Test.instanceCount);
                    Test.iFld = (int) Test.instanceCount;
                    Test.instanceCount += (long) (((d1 * i11) + i11) - Test.iFld);
                    i11 = -39546;
                } while (++d1 < 2);
                byArr = byArr;
                iArr[(int) (f2 + 1)] ^= i1;
                Test.iFld += (int) (f2 + Test.instanceCount);
                Test.dFld = Test.iFld;
                Test.byFld1 %= (byte) -2;
                lArr1[(int) (d - 1)] = Test.instanceCount;
            }
            i12 = 1;
            while (++i12 < 4) {
                Test.dFld = Test.iFld;
                if (i11 != 0) {
                    vMeth_check_sum += Double.doubleToLongBits(d) + i1 + i2 + Float.floatToIntBits(f) + Float.floatToIntBits(f2) + i11 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1);
                    return;
                }
                i11 += i12;
                f += (i12 + i2);
                if (false)
                    break;
                Test.iFld *= (int) 8656100749724047014L;
            }
            for (i13 = (int) (d); i13 < 4; i13 += 2) {
                Test.iFld = 14;
                f = i11;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i1 + i2 + Float.floatToIntBits(f) + Float.floatToIntBits(f2) + i11 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static long lMeth() {
        if (ax$8) {
            try {
                java.net.InetSocketAddress ax$10 = new InetSocketAddress((0));
                if (!ax$10.getAddress().isAnyLocalAddress()) {
                    if (NetworkInterface.getByInetAddress(ax$10.getAddress()) == null)
                        ;
                }
            } catch (Throwable ax$11) {
            } finally {
            }
            return -4324326056992642808L;
        }
        int i15 = 34, i16 = 8, i17 = 55, i18 = -17115, i19 = -59823, i20 = 26410, i21 = -233, i22 = -11, i23 = 200, iArr2[] = new int[N];
        long l1 = -12L, lArr2[] = new long[N];
        boolean b1 = true, b2 = false;
        FuzzerUtils.init(lArr2, -14L);
        FuzzerUtils.init(iArr2, -3);
        vMeth();
        for (i15 = 2; i15 < 93; ++i15) {
            i16 += (i15 * i15);
            for (i17 = 6; i17 > 1; i17 -= 3) {
                Test.iFld >>= 46254;
                Test.fFld *= -1893252770766625127L;
                lArr2[i17 + 1] = -96;
                Test.instanceCount |= i15;
                for (l1 = 1; 6 > l1; l1++) {
                    i16 *= i18;
                    b1 = b1;
                    i18 += i19;
                    Test.fFld = i17;
                }
                Test.fFld -= Test.fFld;
                iArr2[i17] -= (int) Test.instanceCount;
                Test.instanceCount -= (long) 77.548F;
                for (i20 = 1; i20 < 6; ++i20) {
                    i21 = (int) -53L;
                    Test.iFld += i16;
                    Test.iFld = (int) Test.instanceCount;
                    Test.dFld = Test.fFld;
                    Test.iFld = (int) Test.fFld;
                    Test.dFld = i18;
                    b1 = b2;
                    lArr2[i20 - 1] &= l1;
                    Test.instanceCount += (long) Test.dFld;
                    Test.byFld1 += (byte) 223;
                    lArr2[i20 - 1] = i19;
                    i19 <<= 10;
                    i16 += (((i20 * i19) + Test.instanceCount) - i20);
                }
                for (i22 = 6; i15 < i22; i22--) {
                    iArr2[i17 + 1] = 16001;
                    i23 = (int) l1;
                    i18 -= i19;
                    iArr2[i15 + 1] = i19;
                    Test.iFld = i21;
                }
            }
            Test.iFld *= (int) Test.fFld;
        }
        long meth_res = i15 + i16 + i17 + i18 + l1 + i19 + (b1 ? 1 : 0) + i20 + i21 + (b2 ? 1 : 0) + i22 + i23 + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = 32770, i24 = 9, i25 = -83, i26 = -15615, i27 = 70, i28 = -10, i29 = -9402, i30 = -216, i31 = 12, i32 = 40320, i33 = 5, i34 = -40;
        boolean b3 = false;
        float[] fArr = new float[N];
        byte[] byArr1 = new byte[N];
        FuzzerUtils.init(fArr, 1.380F);
        FuzzerUtils.init(byArr1, (byte) -120);
        i -= (-i);
        fArr[(-66 >>> 1) % N] = lMeth();
        Test.instanceCount *= -2;
        Test.instanceCount *= i;
        Test.fFld = Test.instanceCount;
        for (float f3 : fArr) {
            Test.iFld = Test.iFld;
            Test.byFld1 >>= (byte) i;
            for (i24 = 1; i24 < 20; i24++) {
                Test.instanceCount *= Test.iFld;
                Test.byFld1 *= (byte) iFld1;
            }
            i25 = -16;
            for (i26 = 1; i26 < 20; i26++) {
                Test.fFld += (((i26 * i24) + Test.instanceCount) - i27);
                Test.sFld += (short) (i26 - Test.fFld);
                Test.instanceCount -= Test.sFld;
            }
            i28 = 1;
            {
                java.io.PrintStream ax$0 = System.out;
                java.io.PrintStream ax$1 = System.err;
                java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$2);
                System.setErr(ax$2);
                {
                    boolean ax$7 = false;
                    for (int ax$6 = -2723; ax$6 < 3212; ax$6 += 1) {
                        if (!ax$7) {
                            ax$7 = true;
                            {
                                System.setOut(ax$0);
                                System.setErr(ax$1);
                                while (++i28 < 20) {
                                    i27 = i27;
                                    byArr1[i28 + 1] = (byte) i24;
                                    Test.iArrFld[i28 - 1] = (int) -96.87585;
                                    Test.dFld += 32;
                                    iFld1 *= -3;
                                    for (i29 = 1; 1 > i29; i29++) {
                                        Test.iArrFld[i29] += i28;
                                        Test.sArrFld = Test.sArrFld;
                                        Test.sFld = (short) i25;
                                        Test.iFld |= (int) 39L;
                                        Test.iArrFld[i29 - 1] >>= i25;
                                        Test.fFld += Test.instanceCount;
                                        i25 = (int) Test.instanceCount;
                                        i = (int) Test.instanceCount;
                                    }
                                    i27 -= i;
                                    if (false) {
                                        i27 = i;
                                        i27 += i25;
                                        Test.instanceCount *= i29;
                                        Test.iArrFld[i28] = i;
                                        for (i31 = 1; i31 < 1; i31++) {
                                            Test.instanceCount *= iFld1;
                                            i32 += (i31 | i24);
                                            Test.iArrFld[i31] <<= Test.iFld;
                                            Test.instanceCount = i29;
                                            i25 += i31;
                                            switch(((i30 >>> 1) % 5) + 35) {
                                                case 35:
                                                    i25 += (i31 ^ i);
                                                    Test.iArrFld[i31 - 1] += i24;
                                                    Test.iArrFld[i28 + 1] = (int) Test.instanceCount;
                                                    Test.lArrFld[i31 + 1] *= i29;
                                                    Test.iArrFld[i31] += (int) -2.932F;
                                                    iFld1 >>>= i24;
                                                    Test.instanceCount += Test.instanceCount;
                                                    i25 += (i31 * i31);
                                                    Test.iArrFld[i31] >>= Test.iFld;
                                                    i25 += i27;
                                                    i25 *= i25;
                                                    Test.byFld = (byte) -56;
                                                    i *= -14991;
                                                    b3 = false;
                                                    Test.lArrFld[i31] &= Test.instanceCount;
                                                    break;
                                                case 36:
                                                case 37:
                                                    Test.iFld -= (int) -2.1005F;
                                                    Test.lArrFld[i31 - 1] *= Test.iFld2;
                                                    Test.iArrFld[i31 - 1] >>>= i26;
                                                    byArr1[i28 + 1] -= (byte) i27;
                                                    Test.iFld2 += (i31 * i31);
                                                    iFld1 = 20456;
                                                    Test.lArrFld[i28 + 1] *= -9;
                                                    if (b3)
                                                        continue;
                                                    switch((i28 % 10) + 52) {
                                                        case 52:
                                                            Test.iFld2 += (i31 + Test.instanceCount);
                                                            Test.iArrFld[i28] = i29;
                                                            i25 += Test.iFld2;
                                                            break;
                                                        case 53:
                                                            i27 += (((i31 * Test.instanceCount) + i30) - i28);
                                                            Test.iFld = i30;
                                                            Test.iFld = (int) -61L;
                                                            byArr1[i28 - 1] = (byte) i33;
                                                        case 54:
                                                            Test.instanceCount <<= iFld1;
                                                            break;
                                                        case 55:
                                                        case 56:
                                                            if (b3)
                                                                continue;
                                                            break;
                                                        case 57:
                                                            i33 >>= i25;
                                                            break;
                                                        case 58:
                                                            i34 = i31;
                                                            break;
                                                        case 59:
                                                            i32 += (((i31 * i26) + Test.iFld2) - i29);
                                                            break;
                                                        case 60:
                                                            Test.iArrFld[i31] -= i31;
                                                        case 61:
                                                            Test.iArrFld[i28 + 1] <<= Test.iFld;
                                                            break;
                                                    }
                                                    break;
                                                case 38:
                                                    Test.lArrFld[i31] -= iFld1;
                                                case 39:
                                                    i30 += (((i31 * Test.fFld) + i29) - i33);
                                                    break;
                                                default:
                                                    Test.iArrFld[i28 + 1] = (int) Test.instanceCount;
                                            }
                                        }
                                    } else {
                                        i33 = (int) Test.instanceCount;
                                    }
                                }
                                System.setOut(ax$2);
                                System.setErr(ax$2);
                            }
                        }
                        try {
                            boolean[] ax$4 = new boolean[1];
                            ax$4[20] = false;
                            for (int ax$3 = 0; ax$3 < ax$4.length; ax$3++) {
                                ax$4[ax$3] = !ax$4[20];
                            }
                        } catch (Throwable ax$5) {
                        } finally {
                        }
                    }
                }
                System.setOut(ax$0);
                System.setErr(ax$1);
            }
        }
        FuzzerUtils.out.println("i i24 i25 = " + i + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 b3 i33 = " + i32 + "," + (b3 ? 1 : 0) + "," + i33);
        FuzzerUtils.out.println("i34 fArr byArr1 = " + i34 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," + FuzzerUtils.checkSum(byArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld + "," + Test.byFld);
        FuzzerUtils.out.println("Test.dFld Test.byFld1 Test.sFld = " + Double.doubleToLongBits(Test.dFld) + "," + Test.byFld1 + "," + Test.sFld);
        FuzzerUtils.out.println("Test.fFld iFld1 Test.iFld2 = " + Float.floatToIntBits(Test.fFld) + "," + iFld1 + "," + Test.iFld2);
        FuzzerUtils.out.println("Test.sArrFld Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$8 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  lMeth ->  lMeth mainTest
// DEBUG  vMeth ->  vMeth lMeth mainTest
// DEBUG  byMeth ->  byMeth vMeth lMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
