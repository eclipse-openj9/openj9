// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -39249L;

    public static short sFld = 20562;

    public static double dFld = -110.34447;

    public static int iFld = -10465;

    public static volatile boolean bFld = true;

    public static int iFld1 = 6710;

    public static long[] lArrFld = new long[N];

    public static int[] iArrFld = new int[N];

    public static volatile float[] fArrFld = new float[N];

    public static double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 16836L);
        FuzzerUtils.init(Test.iArrFld, -233);
        FuzzerUtils.init(Test.fArrFld, 2.841F);
        FuzzerUtils.init(Test.dArrFld, 2.71939);
    }

    public static long lMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3) {
        int i4 = -1, i5 = -25002, i6 = -17527, i7 = 48214, i8 = 33, i9 = -10;
        float f = 25.962F;
        double d1 = -97.35570, dArr[][] = new double[N][N];
        byte by = -46;
        FuzzerUtils.init(dArr, 1.84759);
        Test.iArrFld[(64575 >>> 1) % N] = i3;
        i4 = 1;
        while (++i4 < 159) {
            for (i5 = 1; 4 > i5; i5++) {
                Test.instanceCount = i5;
                i6 += i5;
                for (i7 = 1; i7 < 2; ++i7) {
                    Test.lArrFld[i5] += i5;
                    f += 140;
                    i3 >>= i7;
                    i3 |= (int) Test.instanceCount;
                    Test.instanceCount += i9;
                    i6 *= (int) f;
                    i3 += (((i7 * i5) + f) - i5);
                    i3 *= (int) f;
                    switch((i7 % 1) + 11) {
                        case 11:
                            Test.sFld = (short) f;
                            Test.lArrFld[i7] -= i3;
                            i6 /= (int) (i3 | 1);
                            d1 *= i7;
                            Test.instanceCount += (i7 ^ i7);
                            i9 /= (int) (by | 1);
                            i3 += i8;
                            dArr[i7][i5 - 1] -= Test.sFld;
                            i8 = i4;
                            i9 >>= (int) Test.instanceCount;
                            by += (byte) f;
                            i6 = i5;
                            Test.instanceCount >>>= 60;
                            Test.iArrFld[i4 + 1] >>= i6;
                            d1 += i5;
                            break;
                        default:
                            i3 += (9695 + (i7 * i7));
                            i6 -= (int) d1;
                            i8 <<= i6;
                            i8 += (i7 + i4);
                            i8 ^= -193;
                            Test.iArrFld = FuzzerUtils.int1array(N, (int) 20839);
                            i8 += (i7 + i5);
                    }
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + i9 + Double.doubleToLongBits(d1) + by + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i2) {
        int i10 = 22410, i11 = 51, i12 = 222, i13 = 171, i14 = 1, i15 = 37058, i16 = 36048, i17 = 12697;
        float f1 = 103.123F;
        boolean b = false, bArr[] = new boolean[N];
        byte by1 = -21, byArr[] = new byte[N];
        double[] dArr1 = new double[N];
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(byArr, (byte) 61);
        FuzzerUtils.init(dArr1, -2.38585);
        vMeth1(i2);
        i2 = i2;
        {
            java.io.PrintStream ax$0 = System.out;
            java.io.PrintStream ax$1 = System.err;
            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$2);
            System.setErr(ax$2);
            {
                boolean ax$4 = false;
                for (int ax$3 = -4825; ax$3 < 623; ax$3 += 6) {
                    if (!ax$4) {
                        ax$4 = true;
                        {
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                            for (i10 = 1; i10 < 139; ++i10) {
                                Test.iArrFld[i10] += (int) f1;
                                for (i12 = 4; i12 > 1; i12 -= 2) {
                                    Test.instanceCount = Test.instanceCount;
                                }
                                Test.lArrFld[i10] += i13;
                                Test.iArrFld[i10] -= i11;
                                f1 += (i10 * Test.instanceCount);
                                Test.iArrFld[i10] += i13;
                                f1 = i2;
                                if (true)
                                    break;
                                Test.dFld -= Test.dFld;
                                if (b)
                                    break;
                                i14 = 1;
                                while (++i14 < 4) {
                                    Test.iArrFld[i14] |= i10;
                                    i13 -= i14;
                                    switch((i10 % 6) + 43) {
                                        case 43:
                                            bArr = FuzzerUtils.boolean1array(N, (boolean) true);
                                            bArr[i10 - 1] = b;
                                            if (b)
                                                break;
                                            Test.lArrFld[i10 + 1] = 363;
                                            i11 += (int) Test.dFld;
                                            for (i15 = 1; i15 < 1; i15++) {
                                                by1 += (byte) i12;
                                                i11 -= (int) Test.instanceCount;
                                                if (true)
                                                    continue;
                                                switch(((i16 >>> 1) % 7) + 41) {
                                                    case 41:
                                                        byArr[i10] = (byte) 1;
                                                        break;
                                                    case 42:
                                                        i11 += (((i15 * i14) + i16) - i12);
                                                        if (b)
                                                            continue;
                                                        f1 = (float) Test.dFld;
                                                        i11 = i12;
                                                        Test.instanceCount <<= Test.sFld;
                                                    case 43:
                                                        Test.iArrFld[i15] += i16;
                                                        Test.instanceCount += i14;
                                                        Test.fArrFld[i10] = 42520;
                                                    case 44:
                                                        Test.instanceCount += i15;
                                                    case 45:
                                                        Test.instanceCount = i17;
                                                        break;
                                                    case 46:
                                                        Test.iFld |= i11;
                                                        break;
                                                    case 47:
                                                        Test.instanceCount <<= by1;
                                                }
                                            }
                                        case 44:
                                            Test.instanceCount = 5;
                                            break;
                                        case 45:
                                        case 46:
                                            i2 = i13;
                                            break;
                                        case 47:
                                            dArr1[i14] = i13;
                                            break;
                                        case 48:
                                            i2 = i2;
                                            break;
                                        default:
                                            Test.iArrFld[i10] = i15;
                                    }
                                }
                            }
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                        }
                    }
                }
            }
            System.setOut(ax$0);
            System.setErr(ax$1);
        }
        vMeth_check_sum += i2 + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 + (b ? 1 : 0) + i14 + i15 + i16 + by1 + i17 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static long lMeth() {
        if (ax$13) {
            int ax$16 = iFld1;
            int ax$17 = iFld;
            try {
                int[][] ax$14 = new int[10][];
                int ax$15 = 0xff80;
                for (iFld = 0; iFld < ax$15; iFld++) {
                    ax$14[iFld1][iFld] = (int) ((float) (iFld1 + 1) / (float) (iFld + 1));
                }
            } catch (Throwable ax$18) {
            } finally {
                iFld1 = ax$16;
                iFld = ax$17;
            }
            return -1095736531202604959L;
        }
        int i1 = -48599, i18 = 42754, i19 = -19264, i20 = 9, i21 = -30, i22 = 69, i23 = -57507, i24 = -1, i25 = -51265, iArr1[] = new int[N];
        float f2 = 42.285F;
        byte by2 = -126, byArr1[] = new byte[N];
        FuzzerUtils.init(iArr1, -162);
        FuzzerUtils.init(byArr1, (byte) -65);
        Test.lArrFld[(i1 >>> 1) % N] += (--i1);
        Test.instanceCount = Test.iArrFld[(i1 >>> 1) % N];
        vMeth(Test.iFld);
        iArr1[(-38855 >>> 1) % N] -= Test.iFld;
        i18 = 247;
        while ((i18 -= 2) > 0) {
            i1 += (i18 * i18);
            iArr1 = iArr1;
            i19 = 1;
            do {
                for (i20 = i18; i20 < 1; i20++) {
                    i1 = -83;
                    Test.instanceCount = -201;
                }
                Test.instanceCount -= 10;
                f2 += Test.instanceCount;
                Test.bFld = Test.bFld;
                iArr1[i18] -= (int) f2;
                Test.iFld = Test.sFld;
                i1 *= -127;
                for (i22 = i18; i22 < 1; i22++) {
                    byArr1[i18] = (byte) Test.instanceCount;
                    Test.iFld = Test.iFld;
                    Test.iFld += (int) f2;
                    Test.iFld = i20;
                    if (i22 != 0) {
                    }
                }
                for (i24 = 1; i24 < 1; ++i24) {
                    Test.bFld = Test.bFld;
                    i23 = i1;
                    Test.iFld -= i19;
                    Test.lArrFld[i18 + 1] = i1;
                    by2 = (byte) i24;
                    i23 *= i18;
                    i23 = (int) Test.instanceCount;
                    switch(((i24 % 2) * 5) + 31) {
                        case 37:
                            switch(((i19 >>> 1) % 7) + 72) {
                                case 72:
                                    f2 = -99;
                                    f2 += Test.instanceCount;
                                    Test.iFld = i23;
                                    break;
                                case 73:
                                    Test.sFld += (short) (((i24 * i1) + i24) - Test.instanceCount);
                                    break;
                                case 74:
                                    i23 += (((i24 * i22) + Test.iFld) - i21);
                                    break;
                                case 75:
                                    Test.iArrFld[i19] = i23;
                                    break;
                                case 76:
                                    i21 += 32984;
                                    break;
                                case 77:
                                    Test.dFld = Test.instanceCount;
                                case 78:
                                    Test.instanceCount = (long) -41.1567;
                                    break;
                            }
                            break;
                        case 36:
                            Test.instanceCount ^= 13L;
                    }
                }
            } while (++i19 < 5);
        }
        long meth_res = i1 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f2) + i22 + i23 + i24 + i25 + by2 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr1);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {
        double d = 0.44909, d2 = 120.29986, d3 = 2.1129;
        int i = -11, i26 = 51922, i27 = 0, i28 = 10896, i29 = 11, i30 = 32766, i31 = 51683, i32 = -9, i33 = -8, iArr[] = new int[N];
        byte by3 = -45;
        float f3 = 2.552F, f4 = 2.253F;
        FuzzerUtils.init(iArr, -21470);
        for (d = 8; d < 149; ++d) {
            iArr[(int) (d)] = (int) ((i = (int) (-d)) - Double.longBitsToDouble(197L));
            {
                java.io.PrintStream ax$21 = System.out;
                java.io.PrintStream ax$22 = System.err;
                java.io.PrintStream ax$23 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$23);
                System.setErr(ax$23);
                try {
                    ax$13 = true;
                    for (int ax$19 = 0; ax$19 < 8520; ax$19 += 1) lMeth();
                } catch (java.lang.Throwable ax$20) {
                } finally {
                    ax$13 = false;
                }
                System.setOut(ax$21);
                System.setErr(ax$22);
            }
            lMeth();
        }
        if (Test.bFld) {
            for (d2 = 8; 133 > d2; d2++) {
                i26 <<= (int) Test.instanceCount;
                Test.dArrFld[(int) (d2 + 1)] = i;
                Test.instanceCount -= (long) d2;
            }
            try {
                i26 -= i;
                Test.iFld += (int) Test.instanceCount;
                for (i27 = 4; i27 < 254; i27 += 2) {
                    by3 *= (byte) -52014;
                    f3 = 41;
                    while (--f3 > 0) {
                        Test.dFld += i;
                        i28 = i28;
                        Test.instanceCount *= -42L;
                        switch((i27 % 1) + 85) {
                            case 85:
                                i29 = 1;
                                do {
                                    Test.instanceCount += (i29 - f3);
                                    Test.iFld += (((i29 * i26) + by3) - i28);
                                    iArr[i29] /= (int) ((long) (f3) | 1);
                                    i26 *= i29;
                                    try {
                                        Test.iArrFld[i27 - 1] = (-23855 % Test.iFld);
                                        Test.iFld = (-56699 / i29);
                                        i28 = (i30 / i30);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    Test.iFld = 79;
                                    i28 >>= i30;
                                    f4 *= (float) 51.36069;
                                    f4 -= i;
                                    i |= i29;
                                } while ((i29 += 3) < 1);
                                Test.iFld = (int) d;
                                for (i31 = 1; i31 < 1; ++i31) {
                                    switch(((i27 % 1) * 5) + 12) {
                                        case 15:
                                            f4 = i26;
                                            Test.iArrFld = FuzzerUtils.int1array(N, (int) 16);
                                            break;
                                    }
                                    Test.iFld = i30;
                                    i26 >>= Test.iFld;
                                    by3 = by3;
                                    i28 += (((i31 * i31) + Test.instanceCount) - f4);
                                    Test.sFld >>= (short) i31;
                                    i30 += (i31 - i32);
                                    if (Test.bFld)
                                        break;
                                }
                                i32 += (int) (((f3 * Test.iFld) + i31) - Test.instanceCount);
                                Test.bFld = Test.bFld;
                                Test.iFld = 220;
                                i33 = 1;
                                while (++i33 < 1) {
                                    iArr[i33] -= i31;
                                    i26 += (int) (1.17F + (i33 * i33));
                                    try {
                                        iArr[i27] = (223 % i31);
                                        Test.iArrFld[(int) (f3)] = (-52890 / Test.iFld1);
                                        i30 = (Test.iArrFld[(int) (f3 + 1)] / i);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    Test.instanceCount |= 136;
                                    i -= i26;
                                    if (Test.bFld)
                                        continue;
                                    i32 <<= i28;
                                    i32 = (int) Test.instanceCount;
                                    i26 = i26;
                                    i26 += (((i33 * Test.instanceCount) + i26) - i32);
                                }
                                Test.iFld = Test.iFld1;
                                break;
                            default:
                                d3 = 1;
                                do {
                                    Test.iFld = i;
                                    i26 += i29;
                                    if (Test.bFld) {
                                        i30 = (int) d3;
                                        Test.instanceCount += (long) d3;
                                        i32 += i31;
                                        f4 = Test.iFld;
                                        switch(((i26 >>> 1) % 1) + 54) {
                                            case 54:
                                                Test.iFld1 = i26;
                                                i26 *= 13;
                                                i28 = Test.sFld;
                                                Test.instanceCount = 41;
                                                Test.instanceCount += (long) (((d3 * Test.sFld) + Test.instanceCount) - i28);
                                                i30 >>>= i33;
                                                i28 <<= (int) Test.instanceCount;
                                                Test.iFld = -23466;
                                                i28 -= Test.iFld1;
                                                i *= i;
                                                break;
                                        }
                                    } else if (Test.bFld) {
                                        Test.instanceCount += (-249 + (d3 * d3));
                                    } else if (Test.bFld) {
                                        i28 /= (int) ((long) (d) | 1);
                                    }
                                } while (++d3 < 1);
                        }
                    }
                }
            } catch (NegativeArraySizeException exc2) {
                Test.instanceCount >>= -14;
            }
        }
        FuzzerUtils.out.println("d i d2 = " + Double.doubleToLongBits(d) + "," + i + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("by3 f3 i29 = " + by3 + "," + Float.floatToIntBits(f3) + "," + i29);
        FuzzerUtils.out.println("i30 f4 i31 = " + i30 + "," + Float.floatToIntBits(f4) + "," + i31);
        FuzzerUtils.out.println("i32 i33 d3 = " + i32 + "," + i33 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iFld Test.bFld Test.iFld1 = " + Test.iFld + "," + (Test.bFld ? 1 : 0) + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        {
            java.io.PrintStream ax$5 = System.out;
            java.io.PrintStream ax$6 = System.err;
            java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$7);
            System.setErr(ax$7);
            {
                boolean ax$12 = false;
                for (int ax$11 = -3656; ax$11 < 3424; ax$11 += 1) {
                    if (!ax$12) {
                        ax$12 = true;
                        {
                            System.setOut(ax$5);
                            System.setErr(ax$6);
                            try {
                                Test _instance = new Test();
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                            } catch (Exception ex) {
                                FuzzerUtils.out.println(ex.getClass().getCanonicalName());
                            }
                            System.setOut(ax$7);
                            System.setErr(ax$7);
                        }
                    }
                    try {
                        int ax$9 = 6 * 4;
                        int ax$8 = 24576;
                        ax$8++;
                        if (ax$8 > ax$9) {
                        }
                    } catch (Throwable ax$10) {
                    } finally {
                    }
                }
            }
            System.setOut(ax$5);
            System.setErr(ax$6);
        }
    }

    private static Boolean ax$13 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  lMeth ->  lMeth mainTest
// DEBUG  vMeth ->  vMeth lMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
