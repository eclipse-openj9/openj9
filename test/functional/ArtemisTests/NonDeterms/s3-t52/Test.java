// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.math.BigDecimal;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 4L;

    public static volatile double dFld = -1.29302;

    public static int iFld = -5901;

    public static long lFld = 3983974685L;

    public static short sFld = -30308;

    public static byte byFld = -69;

    public boolean bFld = false;

    public static long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 1897099114L);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, int i5, int i6) {
        float f1 = 0.877F;
        int i7 = -7, i8 = 193, i9 = 3, i10 = -60124, i11 = 14, i12 = -9, i13 = 4711, i14 = 42094, i15 = -30, iArr[] = new int[N];
        short s = 15064;
        byte by = 0;
        long l2 = -3769469462974609384L, lArr[] = new long[N];
        double d = 65.64506;
        boolean b1 = false;
        FuzzerUtils.init(iArr, 7);
        FuzzerUtils.init(lArr, 4114497127L);
        Test.dFld += Test.instanceCount;
        i5 -= -3;
        i6 = (int) f1;
        for (i7 = 14; 228 > i7; i7++) {
            for (i9 = 1; i9 < 3; ++i9) {
                for (i11 = 1; i11 < 2; ++i11) {
                    s -= (short) Test.instanceCount;
                    f1 = Test.instanceCount;
                    i12 = by;
                    i5 -= Test.iFld;
                }
                i12 += (i9 | i8);
                switch((i9 % 1) + 79) {
                    case 79:
                        try {
                            i6 = (Test.iFld % i7);
                            i8 = (-135 / iArr[i7 + 1]);
                            i4 = (i8 % i11);
                        } catch (ArithmeticException a_e) {
                        }
                        {
                            java.io.PrintStream ax$0 = System.out;
                            java.io.PrintStream ax$1 = System.err;
                            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                            {
                                boolean ax$7 = false;
                                for (int ax$6 = -4469; ax$6 < 3579; ax$6 += 9) {
                                    if (!ax$7) {
                                        ax$7 = true;
                                        {
                                            System.setOut(ax$0);
                                            System.setErr(ax$1);
                                            for (i13 = 2; i13 > 1; i13 -= 2) {
                                                Test.instanceCount = Test.lFld;
                                                i6 >>= (int) Test.instanceCount;
                                                Test.iFld += 6;
                                                iArr[i13 + 1] = (int) Test.instanceCount;
                                                i14 <<= (int) Test.lFld;
                                                l2 -= (long) d;
                                            }
                                            System.setOut(ax$2);
                                            System.setErr(ax$2);
                                        }
                                    }
                                    try {
                                        float[] ax$3 = new float[16];
                                        for (int ax$4 = 1; ax$4 < 127; ax$4++) ax$3[ax$4] += 11;
                                    } catch (Throwable ax$5) {
                                    } finally {
                                    }
                                }
                            }
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                        }
                        i15 = 2;
                        do {
                            Test.dFld += -8;
                            f1 -= s;
                            i4 -= 10981;
                            Test.lFld >>= i10;
                            switch((i15 % 4) + 18) {
                                case 18:
                                    lArr[i7] = i10;
                                    break;
                                case 19:
                                    l2 = i14;
                                    i5 = i11;
                                    i10 <<= i11;
                                    i5 += -42393;
                                    if (false)
                                        continue;
                                    i8 = (int) l2;
                                    break;
                                case 20:
                                    if (i15 != 0) {
                                        vMeth1_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11 + i12 + s + by + i13 + i14 + l2 + Double.doubleToLongBits(d) + i15 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
                                        return;
                                    }
                                    iArr[i7 - 1] = i5;
                                    b1 = b1;
                                    l2 = (long) 1.596F;
                                    break;
                                case 21:
                                    b1 = b1;
                                    break;
                            }
                        } while ((i15 -= 2) > 0);
                        break;
                    default:
                        i6 = s;
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 + i11 + i12 + s + by + i13 + i14 + l2 + Double.doubleToLongBits(d) + i15 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(long l, boolean b, long l1) {
        if (ax$241) {
            try {
                int ax$245 = 18675309;
                int ax$246 = 0x00000000ffffffff;
                java.math.BigDecimal ax$244 = new BigDecimal("11095869503027587258");
                java.math.BigDecimal ax$247 = new BigDecimal("+0e42");
                if (ax$244.scale() != ax$245 || ax$244.compareTo(ax$247) != 0) {
                    ax$246++;
                }
            } catch (Throwable ax$248) {
            } finally {
            }
            return -1549519693;
        }
        int i16 = 25418, i17 = -248, i18 = 9426, i19 = -60330, i20 = 102, i21 = -9, i22 = -63, iArr1[] = new int[N];
        float f2 = 5.248F, f3 = 0.648F, fArr[] = new float[N];
        long l3 = -111L, l4 = -8525365690946718283L;
        byte by1 = 53;
        double[] dArr = new double[N];
        FuzzerUtils.init(fArr, -2.788F);
        FuzzerUtils.init(iArr1, 3);
        FuzzerUtils.init(dArr, 29.101834);
        vMeth1(Test.iFld, Test.iFld, Test.iFld);
        for (i16 = 80; i16 > 2; i16--) {
            fArr[i16 + 1] = (float) Test.dFld;
            Test.iFld += (int) 1.436F;
            for (i18 = 1; i18 < 7; ++i18) {
                i19 = (int) f2;
                switch(((i16 >>> 1) % 6) + 34) {
                    case 34:
                    case 35:
                        for (i20 = 1; i20 < 2; i20++) {
                            f2 += f2;
                            if (b)
                                continue;
                            b = b;
                            f2 += i20;
                            b = b;
                            f2 = f2;
                        }
                        iArr1[i16 + 1] >>= i21;
                        i19 = -56504;
                        for (l3 = 1; l3 < 2; l3++) {
                            Test.dFld -= 60;
                            Test.instanceCount += 8675466122922149582L;
                            i17 = i18;
                            iArr1[i16 + 1] *= (int) f2;
                            f3 += (((l3 * l) + Test.lFld) - i21);
                            i21 += Test.sFld;
                            i22 = i20;
                            Test.dFld -= -5;
                            Test.instanceCount = i17;
                            l1 = Test.sFld;
                            l1 -= i22;
                            if (b)
                                continue;
                            Test.dFld /= (Test.instanceCount | 1);
                            i17 = i20;
                        }
                        i19 -= i21;
                        i21 = Test.sFld;
                    case 36:
                        if (true) {
                            dArr[i16] = Test.lFld;
                            Test.instanceCount = i17;
                            i22 = by1;
                        } else {
                            i19 += (-3132 + (i18 * i18));
                        }
                        break;
                    case 37:
                        l4 -= 103;
                    case 38:
                        Test.instanceCount -= i19;
                        break;
                    case 39:
                        Test.dFld *= i18;
                        break;
                    default:
                        i21 += (int) l1;
                }
            }
        }
        long meth_res = l + (b ? 1 : 0) + l1 + i16 + i17 + i18 + i19 + Float.floatToIntBits(f2) + i20 + i21 + l3 + i22 + Float.floatToIntBits(f3) + by1 + l4 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(int i3) {
        int i23 = 11, i24 = -11, i25 = -24758, i26 = 199, i27 = 222, i30 = 33022, i31 = -9635, iArr2[] = new int[N];
        float f4 = -2.506F;
        long l5 = 30692L;
        double[] dArr1 = new double[N];
        FuzzerUtils.init(iArr2, 1565);
        FuzzerUtils.init(dArr1, 0.103034);
        i3 = iMeth(Test.lFld, true, Test.lFld);
        i23 = 1;
        do {
            Test.lArrFld[i23] *= i3;
            Test.instanceCount -= (long) f4;
            try {
                i3 = (Test.iFld % -1886326506);
                Test.iFld = (Test.iFld / -1144362849);
                i3 = (Test.iFld % Test.iFld);
            } catch (ArithmeticException a_e) {
            }
            Test.iFld = i23;
        } while (++i23 < 127);
        for (i24 = 1; i24 < 249; i24++) {
            i25 *= i23;
            i25 = Test.sFld;
            {
                java.io.PrintStream ax$8 = System.out;
                java.io.PrintStream ax$9 = System.err;
                java.io.PrintStream ax$10 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$10);
                System.setErr(ax$10);
                {
                    boolean ax$240 = false;
                    for (int ax$239 = -4466; ax$239 < 5064; ax$239 += 2) {
                        if (!ax$240) {
                            ax$240 = true;
                            {
                                System.setOut(ax$8);
                                System.setErr(ax$9);
                                Test.iFld += 20;
                                System.setOut(ax$10);
                                System.setErr(ax$10);
                            }
                        }
                        int ax$237 = i31;
                        try {
                            if (i31 > 0) {
                            }
                        } catch (Throwable ax$238) {
                        } finally {
                            i31 = ax$237;
                        }
                    }
                }
                System.setOut(ax$8);
                System.setErr(ax$9);
            }
            i3 = i24;
            Test.instanceCount += i24;
            i3 *= i24;
        }
        f4 = i25;
        for (i26 = 117; i26 > 7; i26 -= 3) {
            int i28 = -24634;
            l5 = 1;
            do {
                Test.iFld = (int) -7083L;
                i3 *= i26;
                i25 -= i23;
                Test.sFld += (short) l5;
            } while (++l5 < 14);
            iArr2[i26 + 1] *= (int) Test.instanceCount;
            Test.lFld = Test.iFld;
            f4 += (((i26 * Test.lFld) + i26) - f4);
            dArr1[i26] = i25;
            i25 -= Test.sFld;
            i27 -= i25;
            i25 += i26;
            Test.dFld = i28;
            i28 += (int) -1.77279;
        }
        for (int i29 : iArr2) {
            for (i30 = 1; i30 < 2; ++i30) {
                i25 = (int) f4;
                Test.sFld += (short) -43894L;
            }
            if (true)
                break;
            Test.byFld >>>= (byte) i3;
            if (i3 != 0) {
                vMeth_check_sum += i3 + i23 + Float.floatToIntBits(f4) + i24 + i25 + i26 + i27 + l5 + i30 + i31 + FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
                return;
            }
            Test.lArrFld[(i24 >>> 1) % N] += Test.instanceCount;
        }
        vMeth_check_sum += i3 + i23 + Float.floatToIntBits(f4) + i24 + i25 + i26 + i27 + l5 + i30 + i31 + FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {
        int i = 200, i1 = 26427, i2 = 37174, i32 = 2337, i33 = -10, i34 = 3, i35 = -40832, i36 = 146, iArr3[] = new int[N];
        float f = -2.252F, fArr1[] = new float[N];
        double[][] dArr2 = new double[N][N];
        short[] sArr = new short[N];
        FuzzerUtils.init(fArr1, -40.724F);
        FuzzerUtils.init(iArr3, -33399);
        FuzzerUtils.init(dArr2, -1.123973);
        FuzzerUtils.init(sArr, (short) -11960);
        i = (int) f;
        for (i1 = 2; i1 < 100; ++i1) {
            vMeth(i2);
            i2 &= (int) -1L;
            i32 = 1;
            while (++i32 < 52) {
                i *= i32;
                Test.sFld += (short) (((i32 * i2) + i32) - Test.instanceCount);
                Test.lArrFld[i1 - 1] = Test.lFld;
                for (i33 = 1; i33 < 1; i33++) {
                    switch((i1 % 6) + 23) {
                        case 23:
                            f += i2;
                            break;
                        case 24:
                            f = 0;
                            if (bFld) {
                                f *= Test.byFld;
                                i2 += (((i33 * Test.sFld) + i) - f);
                                i2 -= Test.sFld;
                                i34 += (((i33 * Test.lFld) + f) - Test.instanceCount);
                                i34 = i2;
                                i2 = i33;
                                Test.byFld *= (byte) i1;
                                fArr1[i1] = i34;
                                i35 >>= i;
                                i += i32;
                                Test.dFld += f;
                                i34 -= 2;
                                Test.instanceCount = 46290;
                            }
                            try {
                                i34 = (i1 / iArr3[i33]);
                                i34 = (i35 % 9976);
                                i34 = (365728853 / iArr3[i32 - 1]);
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        case 25:
                            Test.instanceCount = i34;
                            iArr3[i1] = 34;
                            i2 -= (int) Test.instanceCount;
                            i2 += (((i33 * i33) + Test.byFld) - i33);
                            dArr2[i32 - 1][i33] = Test.sFld;
                            switch(((i32 >>> 1) % 10) + 49) {
                                case 49:
                                    iArr3[i1] -= (int) Test.dFld;
                                    i34 *= (int) Test.lFld;
                                    iArr3[i1 + 1] = (int) f;
                                    switch(((i1 % 3) * 5) + 81) {
                                        case 91:
                                            Test.instanceCount = (long) f;
                                            f = -86.667F;
                                            iArr3 = iArr3;
                                            i35 += (((i33 * Test.sFld) + Test.lFld) - Test.lFld);
                                            f += i1;
                                            bFld = bFld;
                                            Test.lFld += (long) Test.dFld;
                                            i34 = 231;
                                            switch(((-178 >>> 1) % 7) + 37) {
                                                case 37:
                                                    i2 += i33;
                                                    iArr3 = iArr3;
                                                    switch((((i >>> 1) % 9) * 5) + 121) {
                                                        case 162:
                                                            i34 -= -63152;
                                                            iArr3[i33 - 1] >>>= (int) Test.lFld;
                                                            Test.lFld = Test.lFld;
                                                            i35 ^= -12;
                                                            Test.iFld += (i33 + i34);
                                                            Test.iFld >>= -6;
                                                            Test.iFld += (((i33 * i33) + i33) - Test.lFld);
                                                        case 132:
                                                            i35 = i34;
                                                            Test.lFld = (long) f;
                                                            Test.lFld = i35;
                                                            Test.iFld = (int) Test.lFld;
                                                            i35 = i33;
                                                            Test.instanceCount += i32;
                                                            break;
                                                        case 147:
                                                            Test.dFld = i36;
                                                            i35 = i36;
                                                            Test.lArrFld = Test.lArrFld;
                                                            if (bFld)
                                                                break;
                                                            if (bFld) {
                                                                i35 = i35;
                                                                i35 = (int) Test.lFld;
                                                                if (bFld)
                                                                    break;
                                                                try {
                                                                    i = (-202 % iArr3[i1 + 1]);
                                                                    i35 = (i35 % i2);
                                                                    i2 = (-211 / Test.iFld);
                                                                } catch (ArithmeticException a_e) {
                                                                }
                                                                f -= Test.lFld;
                                                                i += i33;
                                                                Test.dFld -= f;
                                                                i35 += (((i33 * i) + Test.sFld) - i35);
                                                            } else if (bFld) {
                                                                i36 *= i36;
                                                            }
                                                        case 163:
                                                            f += (float) Test.dFld;
                                                            break;
                                                        case 123:
                                                            i34 >>= i32;
                                                            break;
                                                        case 157:
                                                            i += (((i33 * f) + Test.sFld) - i32);
                                                            break;
                                                        case 149:
                                                            Test.iFld -= (int) Test.instanceCount;
                                                        case 148:
                                                            i34 &= (int) Test.instanceCount;
                                                            break;
                                                        case 151:
                                                            Test.dFld = Test.iFld;
                                                            break;
                                                    }
                                                    break;
                                                case 38:
                                                    Test.iFld >>= (int) Test.lFld;
                                                    break;
                                                case 39:
                                                case 40:
                                                    i2 += i35;
                                                    break;
                                                case 41:
                                                    Test.iFld = -51697;
                                                    break;
                                                case 42:
                                                    Test.lArrFld[i32 - 1] += (long) f;
                                                case 43:
                                                    Test.instanceCount <<= i1;
                                                    break;
                                                default:
                                                    i34 += i33;
                                            }
                                            break;
                                        case 92:
                                            i += i36;
                                            break;
                                        case 88:
                                            fArr1[i33 + 1] -= 5;
                                            break;
                                        default:
                                            f += i;
                                    }
                                case 50:
                                    Test.sFld <<= (short) 6412460347122525421L;
                                    break;
                                case 51:
                                    iArr3[i1] += i36;
                                    break;
                                case 52:
                                    Test.lArrFld[i33 - 1] /= (Test.lFld | 1);
                                    break;
                                case 53:
                                    Test.dFld = i2;
                                    break;
                                case 54:
                                    i = i1;
                                    break;
                                case 55:
                                    Test.lArrFld[i32] = -131;
                                    break;
                                case 56:
                                    iArr3[i1] -= Test.iFld;
                                    break;
                                case 57:
                                    sArr[i33 + 1] *= (short) f;
                                    break;
                                case 58:
                                    Test.lArrFld = FuzzerUtils.long1array(N, (long) 141L);
                                    break;
                                default:
                                    Test.lFld = (long) f;
                            }
                            break;
                        case 26:
                            Test.lFld = i32;
                            break;
                        case 27:
                        case 28:
                            i35 = (int) f;
                            break;
                        default:
                            try {
                                iArr3[i33 + 1] = (i36 % i32);
                                i34 = (i32 / 1743962823);
                                Test.iFld = (Test.iFld / 11314);
                            } catch (ArithmeticException a_e) {
                            }
                    }
                }
            }
        }
        FuzzerUtils.out.println("i f i1 = " + i + "," + Float.floatToIntBits(f) + "," + i1);
        FuzzerUtils.out.println("i2 i32 i33 = " + i2 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("fArr1 iArr3 dArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," + FuzzerUtils.checkSum(iArr3) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.lFld Test.sFld Test.byFld = " + Test.lFld + "," + Test.sFld + "," + Test.byFld);
        FuzzerUtils.out.println("bFld Test.lArrFld = " + (bFld ? 1 : 0) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$241 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
