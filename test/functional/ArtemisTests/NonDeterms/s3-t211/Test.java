// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.Locale;
import java.util.Map;
import java.util.HashMap;
import java.util.zip.ZipInputStream;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 1495434521L;

    public static int iFld = 7;

    public static volatile double dFld = 31.83201;

    public static byte byFld = 21;

    public static int iFld1 = -43235;

    public static boolean bFld = false;

    public static float fFld = 9.260F;

    public static volatile long lFld = 3099362694375353969L;

    public static short sFld = 10290;

    public int iFld2 = 85;

    public static byte[] byArrFld = new byte[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte) 35);
    }

    public static long dMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, long l2, int i4) {
        if (ax$22) {
            int ax$24 = i3;
            int ax$25 = iFld1;
            int ax$26 = i4;
            try {
                int[] ax$23 = new int[8];
                iFld1 += ax$23[i3];
                i3 += i4;
            } catch (Throwable ax$27) {
            } finally {
                i3 = ax$24;
                iFld1 = ax$25;
                i4 = ax$26;
            }
            return;
        }
        byte by = -20;
        int i5 = -228, i6 = -6, i7 = 48158, i8 = -254, i9 = -5, i10 = -14, i11 = -1781, i12 = -3967, i13 = 14685, iArr1[] = new int[N];
        float f = 0.989F, fArr[] = new float[N];
        boolean b = false;
        long[] lArr = new long[N], lArr1 = new long[N];
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr1, -28216);
        FuzzerUtils.init(lArr, 7L);
        FuzzerUtils.init(dArr, 2.47336);
        FuzzerUtils.init(lArr1, 0L);
        FuzzerUtils.init(fArr, 2.464F);
        by *= (byte) i4;
        l2 = l2;
        for (i5 = 5; i5 < 115; ++i5) {
            switch((((i6 >>> 1) % 8) * 5) + 86) {
                case 114:
                    i6 = i5;
                    iArr1[i5 + 1] = (int) l2;
                    i3 += i5;
                    Test.dFld *= i6;
                    i3 += by;
                    i7 = 5;
                    do {
                        for (i8 = 1; i8 < 3; ++i8) {
                            lArr = lArr;
                            Test.instanceCount = i9;
                            i6 += (i8 | i8);
                            Test.iFld -= i9;
                            iArr1[i5] = (int) -53L;
                            f += i8;
                            Test.iFld += (((i8 * Test.instanceCount) + i6) - i8);
                            Test.instanceCount += (185L + (i8 * i8));
                            i4 += i8;
                            i3 += (i8 | i10);
                            i9 /= (int) (i4 | 1);
                        }
                        i11 = 1;
                        while (++i11 < 3) {
                            i3 += i10;
                            l2 += (i11 ^ i8);
                            Test.instanceCount = i10;
                            dArr[i7] = -4379;
                            Test.instanceCount += (i11 ^ l2);
                            i10 += i3;
                        }
                        if (b)
                            break;
                        i10 -= i5;
                        for (i12 = 1; 3 > i12; ++i12) {
                            i10 = (int) l2;
                            switch((i12 % 6) + 14) {
                                case 14:
                                    iArr1[i7 + 1] = i9;
                                    i9 += (int) f;
                                    Test.dFld += -49.329F;
                                case 15:
                                    f += (((i12 * Test.instanceCount) + Test.iFld) - l2);
                                    break;
                                case 16:
                                    lArr1[i12] -= i3;
                                case 17:
                                    Test.instanceCount >>= i3;
                                    break;
                                case 18:
                                    if (i8 != 0) {
                                        vMeth1_check_sum += i3 + l2 + i4 + by + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + i10 + i11 + (b ? 1 : 0) + i12 + i13 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                        return;
                                    }
                                case 19:
                                    Test.iFld = i9;
                                    break;
                                default:
                                    i4 += (i12 ^ l2);
                            }
                        }
                    } while ((i7 -= 3) > 0);
                    break;
                case 117:
                    fArr[(Test.iFld >>> 1) % N] += i3;
                case 118:
                    dArr[i5 - 1] += -7L;
                    break;
                case 99:
                    f = -2437;
                    break;
                case 90:
                case 111:
                    i6 += (int) f;
                    break;
                case 93:
                    i9 *= by;
                    break;
                case 96:
                    Test.byArrFld[i5 + 1] <<= (byte) i10;
                    break;
                default:
                    Test.dFld /= (i4 | 1);
            }
        }
        vMeth1_check_sum += i3 + l2 + i4 + by + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + i10 + i11 + (b ? 1 : 0) + i12 + i13 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(long l, long l1, int i2) {
        {
            java.io.PrintStream ax$30 = System.out;
            java.io.PrintStream ax$31 = System.err;
            java.io.PrintStream ax$32 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$32);
            System.setErr(ax$32);
            try {
                ax$22 = true;
                for (int ax$28 = 0; ax$28 < 7105; ax$28 += 1) vMeth1(413822766, 5204793721958130840L, -2020097599);
            } catch (java.lang.Throwable ax$29) {
            } finally {
                ax$22 = false;
            }
            System.setOut(ax$30);
            System.setErr(ax$31);
        }
        vMeth1(-5, -129L, 3);
        vMeth_check_sum += l + l1 + i2;
        {
            java.io.PrintStream ax$12 = System.out;
            java.io.PrintStream ax$13 = System.err;
            java.io.PrintStream ax$14 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$14);
            System.setErr(ax$14);
            try {
                for (int ax$10 = -4253; ax$10 < 2334; ax$10 += 1) {
                    try {
                        Locale[] ax$1 = Locale.getAvailableLocales();
                        int ax$2 = Integer.MAX_VALUE;
                        int ax$3 = Integer.MIN_VALUE;
                        Map ax$7 = new HashMap(ax$1.length);
                        int ax$5 = 0;
                        for (int ax$4 = 0; ax$4 < ax$1.length; ax$4++) {
                            Locale ax$0 = ax$1[ax$4];
                            int ax$6 = ax$0.hashCode();
                            ax$2 = Math.min(ax$6, ax$2);
                            ax$3 = Math.max(ax$6, ax$3);
                            Integer ax$8 = new Integer(ax$6);
                            if (ax$7.containsKey(ax$8)) {
                                ax$5++;
                            } else {
                                ax$7.put(ax$8, ax$0);
                            }
                        }
                        if (ax$5 >= (ax$1.length / 10)) {
                        }
                    } catch (Throwable ax$9) {
                    } finally {
                    }
                }
            } catch (Throwable ax$11) {
            }
            System.setOut(ax$12);
            System.setErr(ax$13);
        }
    }

    public static double dMeth(int i, int i1, double d) {
        long l3 = 33L, l4 = 1992655204L, l5 = -3L;
        int i14 = 3, i15 = -134, i16 = 51276, i17 = 141, i18 = 9, i19 = 11, i20 = -38076, iArr[] = new int[N];
        short s = -27216;
        float f1 = 2.211F;
        boolean b1 = true;
        FuzzerUtils.init(iArr, 40743);
        Test.instanceCount ^= iArr[(i >>> 1) % N];
        vMeth(l3, Test.instanceCount, Test.iFld);
        Test.iFld = i1;
        for (i14 = 2; 122 > i14; ++i14) {
            for (i16 = 1; i16 < 5; ++i16) {
                s += (short) i14;
                if (true) {
                    if (b1) {
                        i18 = 1;
                        {
                            java.io.PrintStream ax$15 = System.out;
                            java.io.PrintStream ax$16 = System.err;
                            java.io.PrintStream ax$17 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$17);
                            System.setErr(ax$17);
                            {
                                boolean ax$21 = false;
                                for (int ax$20 = -4830; ax$20 < 563; ax$20 += 7) {
                                    if (!ax$21) {
                                        ax$21 = true;
                                        {
                                            System.setOut(ax$15);
                                            System.setErr(ax$16);
                                            while (++i18 < 2) {
                                                i1 += (((i18 * Test.iFld) + Test.iFld) - Test.iFld);
                                                l4 = i15;
                                                iArr[i14] >>= Test.byFld;
                                                Test.instanceCount += i18;
                                                iArr = iArr;
                                                Test.iFld *= i14;
                                                switch((((Test.iFld >>> 1) % 8) * 5) + 22) {
                                                    case 60:
                                                        d -= i15;
                                                        l4 = i15;
                                                        i15 += (-3 + (i18 * i18));
                                                        switch((i16 % 10) + 32) {
                                                            case 32:
                                                            case 33:
                                                                switch((i14 % 2) + 9) {
                                                                    case 9:
                                                                        l4 = Test.byFld;
                                                                        i17 <<= i15;
                                                                        l3 += Test.byFld;
                                                                        i += (int) 51040629L;
                                                                        iArr[i18 + 1] = i14;
                                                                        f1 -= i19;
                                                                        l3 += (i18 - i17);
                                                                        f1 += i18;
                                                                        d *= i19;
                                                                        Test.instanceCount += (i18 * i18);
                                                                        i20 *= i17;
                                                                        break;
                                                                    case 10:
                                                                        Test.iFld = s;
                                                                        i20 += (i18 * i18);
                                                                        i17 = (int) 62209L;
                                                                        iArr[i14 + 1] -= -1;
                                                                        i20 = Test.iFld1;
                                                                        break;
                                                                }
                                                                break;
                                                            case 34:
                                                                l4 -= (long) Test.dFld;
                                                                break;
                                                            case 35:
                                                                i1 *= (int) Test.dFld;
                                                                break;
                                                            case 36:
                                                                Test.iFld += Test.byFld;
                                                                break;
                                                            case 37:
                                                                i15 <<= (int) 76L;
                                                                break;
                                                            case 38:
                                                                l4 += (((i18 * l3) + Test.byFld) - l4);
                                                                break;
                                                            case 39:
                                                            case 40:
                                                                i15 += i18;
                                                                break;
                                                            case 41:
                                                                s += (short) (43 + (i18 * i18));
                                                                break;
                                                            default:
                                                                l3 += (((i18 * l4) + f1) - f1);
                                                        }
                                                    case 32:
                                                        iArr = iArr;
                                                        break;
                                                    case 59:
                                                    case 39:
                                                        b1 = false;
                                                        break;
                                                    case 62:
                                                        Test.instanceCount -= Test.iFld1;
                                                        break;
                                                    case 47:
                                                        b1 = b1;
                                                        break;
                                                    case 24:
                                                        Test.dFld = i14;
                                                    case 42:
                                                        iArr[i18 + 1] = -41676;
                                                        break;
                                                    default:
                                                        i *= (int) l5;
                                                }
                                            }
                                            System.setOut(ax$17);
                                            System.setErr(ax$17);
                                        }
                                    }
                                    try {
                                        ZipInputStream ax$18 = new ZipInputStream(System.in);
                                        try {
                                            ax$18.skip(-1);
                                        } catch (IllegalArgumentException e) {
                                        }
                                    } catch (Throwable ax$19) {
                                    } finally {
                                    }
                                }
                            }
                            System.setOut(ax$15);
                            System.setErr(ax$16);
                        }
                    }
                }
            }
        }
        long meth_res = i + i1 + Double.doubleToLongBits(d) + l3 + i14 + i15 + i16 + i17 + s + i18 + l4 + Float.floatToIntBits(f1) + i19 + i20 + (b1 ? 1 : 0) + l5 + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i21 = -7, i22 = 45434, i23 = 35, i24 = 13, i25 = -29549, i26 = -10, i27 = 6, i28 = -32338, i29 = -2, i30 = 50296, i31 = 11, iArr2[] = new int[N];
        long l6 = -255557576L, lArr2[][] = new long[N][N];
        float f2 = -2.792F, fArr1[] = new float[N];
        boolean b2 = true, bArr[] = new boolean[N];
        double[] dArr1 = new double[N];
        short[] sArr = new short[N];
        FuzzerUtils.init(fArr1, -11.526F);
        FuzzerUtils.init(iArr2, 14);
        FuzzerUtils.init(dArr1, -2.35650);
        FuzzerUtils.init(lArr2, 1511425313L);
        FuzzerUtils.init(sArr, (short) 3836);
        FuzzerUtils.init(bArr, false);
        Test.iFld = (int) dMeth(Test.iFld, Test.iFld, Test.dFld);
        for (i21 = 193; i21 > 3; i21--) {
            for (i23 = 1; i23 < 27; i23++) {
                for (l6 = 1; l6 < 2; ++l6) {
                    Test.byFld = (byte) i22;
                    i25 &= Test.iFld;
                    Test.instanceCount *= i25;
                }
                Test.bFld = Test.bFld;
                fArr1[i21 - 1] = 2867822814357409528L;
                i25 = i22;
                for (f2 = 1; f2 < 2; f2++) {
                    i25 += (int) f2;
                    iArr2[i23 - 1] = i21;
                    dArr1[(int) (f2 + 1)] += Test.instanceCount;
                    Test.fFld *= 6334;
                    Test.instanceCount *= i24;
                    lArr2[i21 - 1][(int) (f2)] -= (long) f2;
                    Test.instanceCount = (long) Test.fFld;
                    try {
                        iArr2[(int) (f2 - 1)] = (i26 / 181);
                        Test.iFld = (-21722 % Test.iFld1);
                        i26 = (112 % i21);
                    } catch (ArithmeticException a_e) {
                    }
                    Test.iFld1 &= 124;
                    i22 -= (int) Test.instanceCount;
                    sArr[i23 - 1] = (short) 8758;
                    Test.byFld -= (byte) i24;
                    i26 = (int) l6;
                }
                Test.instanceCount *= Test.lFld;
                Test.iFld += i23;
            }
            lArr2[i21] = lArr2[i21];
            for (i27 = 1; i27 < 27; ++i27) {
                i29 = 2;
                do {
                    Test.iFld = (int) Test.fFld;
                    Test.iFld = i26;
                    i24 += (((i29 * Test.lFld) + i21) - i23);
                    Test.dFld = -57.116739;
                    try {
                        iArr2[i27] = (i25 / 24022);
                        i28 = (i28 / i25);
                        i26 = (i25 % i28);
                    } catch (ArithmeticException a_e) {
                    }
                    i24 |= (int) l6;
                } while (--i29 > 0);
                lArr2[i21 - 1][i27] = i26;
                bArr[i27 + 1] = true;
                if (Test.bFld) {
                    switch(((-8970 >>> 1) % 8) + 43) {
                        case 43:
                            Test.iFld = (int) Test.instanceCount;
                            Test.byFld = (byte) f2;
                            i30 = 1;
                            do {
                                switch((i30 % 4) + 103) {
                                    case 103:
                                        i26 -= i25;
                                        i26 *= i25;
                                        i28 *= i30;
                                        switch((((i24 >>> 1) % 2) * 5) + 21) {
                                            case 28:
                                                Test.instanceCount -= i24;
                                                Test.sFld += (short) Test.dFld;
                                                Test.fFld += Test.lFld;
                                                iFld2 = (int) -215L;
                                                if (true) {
                                                    iArr2[i27] = Test.sFld;
                                                    Test.iFld1 += i30;
                                                    i28 = i27;
                                                    i24 += Test.byFld;
                                                    Test.fFld = i23;
                                                    iArr2[i27 + 1] = (int) f2;
                                                } else if (true) {
                                                    Test.fFld += ((long) i30 | (long) i24);
                                                    i28 = Test.iFld;
                                                    Test.byFld += (byte) (i30 * i30);
                                                    i25 += i30;
                                                    i22 = i23;
                                                    Test.instanceCount += (long) Test.fFld;
                                                    lArr2[i27 - 1] = lArr2[i30];
                                                    Test.lFld += Test.lFld;
                                                    i25 |= i25;
                                                } else {
                                                    switch(((i21 % 1) * 5) + 16) {
                                                        case 20:
                                                            iArr2[i21] *= i27;
                                                            i26 += i28;
                                                            Test.fFld = Test.iFld;
                                                            iArr2 = FuzzerUtils.int1array(N, (int) -3840);
                                                            iArr2[i30 + 1] -= 254;
                                                            i28 += (i30 * i30);
                                                            Test.lFld *= i27;
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 30:
                                                iArr2[i30] -= (int) -45611L;
                                                break;
                                        }
                                    case 104:
                                        i22 += (((i30 * i21) + Test.lFld) - i26);
                                        break;
                                    case 105:
                                        if (b2)
                                            break;
                                    case 106:
                                        Test.instanceCount <<= Test.iFld1;
                                        break;
                                }
                            } while (++i30 < 2);
                        case 44:
                            i26 *= i31;
                            break;
                        case 45:
                            Test.iFld1 += (int) Test.lFld;
                            break;
                        case 46:
                            Test.iFld += (i27 * Test.fFld);
                            break;
                        case 47:
                            i22 |= i24;
                            break;
                        case 48:
                            i28 -= (int) Test.lFld;
                            break;
                        case 49:
                            Test.lFld += (((i27 * i31) + Test.sFld) - i21);
                            break;
                        case 50:
                            i25 += (((i27 * iFld2) + i22) - i29);
                        default:
                            i28 -= i26;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 l6 i25 = " + i24 + "," + l6 + "," + i25);
        FuzzerUtils.out.println("f2 i26 i27 = " + Float.floatToIntBits(f2) + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("b2 i31 fArr1 = " + (b2 ? 1 : 0) + "," + i31 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("iArr2 dArr1 lArr2 = " + FuzzerUtils.checkSum(iArr2) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + "," + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("sArr bArr = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.byFld Test.iFld1 Test.bFld = " + Test.byFld + "," + Test.iFld1 + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld Test.lFld Test.sFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.lFld + "," + Test.sFld);
        FuzzerUtils.out.println("iFld2 Test.byArrFld = " + iFld2 + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$22 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  dMeth ->  dMeth mainTest
// DEBUG  vMeth ->  vMeth dMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
