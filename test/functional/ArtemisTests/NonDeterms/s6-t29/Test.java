// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.math.BigDecimal;
import java.nio.charset.CharsetEncoder;
import java.util.Random;

public class Test {
    public static final int N = 256;

    public static volatile long instanceCount = 3254932356L;

    public static byte byFld = 84;

    public static float fFld = 2.25F;

    public static volatile int iFld = 38362;

    public static boolean bFld = true;

    public static int iArrFld[] = new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10894);
    }

    public static long vMeth_check_sum = 0;

    public static long sMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i1, float f1) {
        int i2 = -15208;
        int i3 = -24217;
        int i4 = 14164;
        int i5 = -5;
        int i6 = 113;
        int iArr[] = new int[N];
        int iArr1[][] = new int[N][N];
        short s1 = -20103;
        double d = 54.97776;
        long l1 = -14L;
        long l2 = 27490L;
        long lArr[][] = new long[N][N];
        float f2 = 77.58F;
        float fArr1[] = new float[N];
        FuzzerUtils.init(iArr, 48198);
        FuzzerUtils.init(iArr1, 4);
        FuzzerUtils.init(fArr1, -1.523F);
        FuzzerUtils.init(lArr, -156L);
        for (i2 = 2; i2 < 247; i2++) {
            i1 = 17;
            s1 %= ((short) (Test.byFld | 1));
            iArr[i2] += ((int) (d));
            i1 -= i2;
            iArr1 = iArr1;
        }
        i3 += ((int) (f1));
        iArr1[(7 >>> 1) % N][(i2 >>> 1) % N] -= ((int) (Test.instanceCount));
        i3 -= ((int) (Test.instanceCount));
        fArr1[(i2 >>> 1) % N] *= Test.instanceCount;
        Test.byFld ^= ((byte) (i2));
        f1 += i1;
        Test.instanceCount = i2;
        f1 *= 14;
        for (i4 = 9; i4 < 192; ++i4) {
            boolean b1 = true;
            b1 = b1;
            Test.instanceCount += i4 * i4;
            Test.instanceCount += ((i4 * i4) + i4) - i1;
            {
                final boolean ax$44 = Test.bFld;
                final int ax$45 = i6;
                try {
                    for (int ax$40 = -759; ax$40 < (-759 + 2074); ax$40 += 1) {
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            if (i6 == 7777) {
                            } else {
                                bFld = true;
                            }
                        } catch (Throwable ax$43) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                    }
                } finally {
                    Test.bFld = ax$44;
                    i6 = ax$45;
                }
            }
            d /= i2 | 1;
            l1 += i4;
            iArr1[i4 + 1][i4 - 1] *= i3;
            for (l2 = 1; l2 < 3; l2++) {
                f2 = 1;
                do {
                    i1 -= ((int) (Test.instanceCount));
                    iArr = iArr1[i4 - 1];
                    iArr1[((int) (l2 - 1))][((int) (f2 + 1))] -= -54;
                    b1 = true;
                } while ((++f2) < 2 );
                lArr[((int) (l2))][i4 - 1] = Test.byFld;
                try {
                    i5 = (-41) % i2;
                    iArr1[i4 - 1][((int) (l2))] = i4 / 141;
                    i5 = 26 / i2;
                } catch (ArithmeticException a_e) {
                }
                iArr1[((int) (l2))][i4] %= ((int) (i3 | 1));
                iArr1[i4 - 1][((int) (l2))] >>= i5;
                i5 = i5;
                if (i6 != 0) {
                    vMeth1_check_sum += ((((((((((((((i1 + Float.floatToIntBits(f1)) + i2) + i3) + s1) + Double.doubleToLongBits(d)) + i4) + i5) + l1) + l2) + i6) + Float.floatToIntBits(f2)) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(iArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(lArr);
                    return;
                }
                i1 = i3;
            }
            i1 += i4;
            f1 -= i6;
            s1 = ((short) (i2));
        }
        vMeth1_check_sum += ((((((((((((((i1 + Float.floatToIntBits(f1)) + i2) + i3) + s1) + Double.doubleToLongBits(d)) + i4) + i5) + l1) + l2) + i6) + Float.floatToIntBits(f2)) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(iArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(lArr);
    }

    public static short sMeth() {
        if (Test.ax$7) {
            final int ax$18 = Test.iFld;
            char[] ax$8 = new char[100];
            byte[] ax$9 = new byte[]{ ((byte) (-63)), ((byte) (-128)), ((byte) (-6)), ((byte) (-92)), ((byte) (-72)), ((byte) (55)) };
            byte[] ax$10 = new byte[]{ ((byte) (32)) };
            char[] ax$11 = new char[]{ '별', '똪' };
            Random ax$13 = new Random(69);
            CharsetEncoder ax$14 = null;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                char ax$16 = ((char) (ax$13.nextInt(iFld)));
                if (!ax$14.canEncode(ax$16)) {
                }
                ax$8[iFld] = ax$16;
                ax$10[iFld] = ((byte) (ax$16));
                ax$11[iFld] = ((char) (-1));
                ax$9[iFld] = ((byte) (-1));
            } catch (Throwable ax$17) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iFld = ax$18;
            return ((short) (31173));
        }
        int i7 = -7;
        int i8 = -216;
        int i9 = -8;
        int i10 = -149;
        int i11 = 146;
        int i12 = -237;
        int i13 = 88;
        int i14 = -14;
        int i15 = -14;
        int iArr2[][] = new int[N][N];
        int iArr3[][] = new int[N][N];
        long l3 = 2501022474L;
        long l4 = -46423L;
        long lArr1[] = new long[N];
        boolean b2 = true;
        double d1 = 117.97802;
        float fArr2[] = new float[N];
        FuzzerUtils.init(iArr2, -126);
        FuzzerUtils.init(lArr1, -7103591180485878615L);
        FuzzerUtils.init(iArr3, -129);
        FuzzerUtils.init(fArr2, 0.144F);
        vMeth1(i7, Test.fFld);
        i8 = 128;
        while ((--i8) > 0) {
            switch (((i7 >>> 1) % 1) + 85) {
                case 85 :
                    i7 = Test.byFld;
                    iArr2[i8 - 1][i8 + 1] <<= ((int) (Test.instanceCount));
                    for (i9 = 1; i9 < 4; i9++) {
                        for (l3 = 1; l3 < 2; ++l3) {
                            i11 = ((int) (Test.fFld));
                            i11 += ((int) (l3 + l3));
                            lArr1[i8] |= i10;
                            iArr3 = iArr2;
                            Test.byFld = ((byte) (i9));
                            i11 = i9;
                            Test.instanceCount = i10;
                        }
                        fArr2[i9] = -21028L;
                        b2 = b2;
                    }
                    Test.instanceCount -= -2L;
                    for (l4 = 1; 4 > l4; ++l4) {
                        i11 -= ((int) (Test.fFld));
                        Test.instanceCount *= i7;
                        d1 = l4;
                        Test.instanceCount = 3L;
                        switch (((int) ((l4 % 8) + 90))) {
                            case 90 :
                                lArr1[((int) (l4))] *= i10;
                                i13 = 1;
                                while ((++i13) < 2) {
                                    Test.byFld >>>= ((byte) (i9));
                                    if (true)
                                        continue;

                                    fArr2[((int) (l4 + 1))] -= Test.fFld;
                                }
                                for (i14 = 1; i14 < 2; i14++) {
                                    Test.instanceCount = ((long) (Test.fFld));
                                    if (b2)
                                        break;

                                    Test.instanceCount >>= 28251;
                                    if (i7 != 0) {
                                    }
                                    switch ((i8 % 4) + 40) {
                                        case 40 :
                                            i10 -= i7;
                                            i11 += ((int) (l4));
                                            iArr3[(i13 >>> 1) % N][i14] >>= i11;
                                            break;
                                        case 41 :
                                            i12 += i14 * i14;
                                            break;
                                        case 42 :
                                            i10 += i7;
                                            break;
                                        case 43 :
                                            Test.instanceCount += i14 | i14;
                                            break;
                                        default :
                                            Test.byFld = ((byte) (l3));
                                    }
                                }
                            case 91 :
                                i15 = i9;
                                break;
                            case 92 :
                                i15 = 31735;
                                break;
                            case 93 :
                                iArr2[((int) (l4))][((int) (l4 - 1))] >>= i9;
                                break;
                            case 94 :
                                lArr1[i8 - 1] += Test.instanceCount;
                                break;
                            case 95 :
                                Test.instanceCount &= l4;
                                break;
                            case 96 :
                            case 97 :
                                i11 += i9;
                        }
                    }
                default :
                    i7 = ((int) (Test.instanceCount));
            }
        }
        long meth_res = (((((((((((((((i7 + i8) + i9) + i10) + l3) + i11) + (b2 ? 1 : 0)) + l4) + i12) + Double.doubleToLongBits(d1)) + i13) + i14) + i15) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(lArr1)) + FuzzerUtils.checkSum(iArr3)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
        sMeth_check_sum += meth_res;
        return ((short) (meth_res));
    }

    public static void vMeth(int i, long l) {
        float f = 0.43F;
        float fArr[] = new float[N];
        short s = -23696;
        boolean b = true;
        boolean bArr[][] = new boolean[N][N];
        double d2 = -54.49881;
        int i16 = -4;
        int i17 = -57729;
        int i18 = -59;
        int i19 = -35;
        long lArr2[] = new long[N];
        FuzzerUtils.init(fArr, -1.713F);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr2, -3L);
        f = i + (i--);
        fArr[(i >>> 1) % N] = (i--) + Short.reverseBytes(s);
        b = bArr[((-199) >>> 1) % N][(i >>> 1) % N] = i > Integer.reverseBytes(i);
        {
            final long ax$27 = Test.vMeth_check_sum;
            final int ax$28 = i19;
            final int ax$29 = i16;
            try {
                BigDecimal ax$23 = new BigDecimal("8987654321");
                BigDecimal ax$25 = null;
                for (int ax$19 = -742; ax$19 < (-742 + 16005); ax$19 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (vMeth_check_sum != (-1L));
                    } catch (Throwable ax$21) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$7 = true;
                    sMeth();
                    Test.ax$7 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if ((ax$23.scale() != i19) || (ax$23.compareTo(ax$25) != 0)) {
                            i16++;
                        }
                    } catch (Throwable ax$26) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                Test.vMeth_check_sum = ax$27;
                i19 = ax$28;
                i16 = ax$29;
            }
        }
        i = ((int) (sMeth() - Test.fFld));
        i -= ((int) (f));
        i *= i;
        i += ((int) (-37.57F));
        switch ((((29 >>> 1) % 1) * 5) + 84) {
            case 88 :
                f += ((float) (d2));
                f *= Test.fFld;
                i = ((int) (l));
                l /= 61980;
                Test.byFld = ((byte) (i));
                i = -9;
                i = ((int) (-3416846136L));
                for (i16 = 254; i16 > 2; --i16) {
                    for (i18 = 2; i18 > 1; i18--) {
                        if (false) {
                            i19 |= i19;
                            Test.byFld = ((byte) (i));
                            i19 ^= -19497;
                            Test.instanceCount -= Test.byFld;
                            switch ((i17 >>> 1) % 3) {
                                case 0 :
                                    i17 += i18;
                                    i17 -= i19;
                                    i -= i16;
                                    i19 ^= i17;
                                    Test.iArrFld = Test.iArrFld;
                                    Test.iArrFld[i16 + 1] <<= ((int) (l));
                                    Test.fFld *= i16;
                                    i19 += ((int) (Test.instanceCount));
                                    i >>= i;
                                    lArr2 = lArr2;
                                    lArr2[i18] += ((long) (f));
                                    break;
                                case 1 :
                                    d2 += 72.244F;
                                    d2 -= Test.byFld;
                                    {
                                        final int ax$36 = i19;
                                        final int ax$37 = Test.iFld;
                                        final int ax$38 = i;
                                        final long ax$39 = l;
                                        try {
                                            for (int ax$30 = -679; ax$30 < (-679 + 17675); ax$30 += 1) {
                                                Test.AxOutputRedirectionHelper.redirect();
                                                try {
                                                    if (i != iFld) {
                                                        i19++;
                                                    }
                                                } catch (Throwable ax$35) {
                                                } finally {
                                                }
                                                Test.AxOutputRedirectionHelper.recover();
                                            }
                                        } finally {
                                            i19 = ax$36;
                                            Test.iFld = ax$37;
                                            i = ax$38;
                                            l = ax$39;
                                        }
                                    }
                                    i17 = i16;
                                case 2 :
                                    i17 += ((i18 * i16) + i16) - i;
                                    break;
                                default :
                                    Test.iArrFld[i16] = i17;
                            }
                        }
                    }
                }
                break;
        }
        vMeth_check_sum += (((((((((((i + l) + Float.floatToIntBits(f)) + s) + (b ? 1 : 0)) + Double.doubleToLongBits(d2)) + i16) + i17) + i18) + i19) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(bArr)) + FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {
        int i20 = 30760;
        int i21 = -14;
        int i22 = 109;
        int i23 = 37253;
        int i24 = 13;
        int i25 = 8;
        int i26 = 68;
        int i27 = -11;
        short s2 = 32155;
        short sArr[] = new short[N];
        double d3 = 0.41676;
        double d4 = -2.82396;
        long l5 = 2590789856L;
        long lArr3[] = new long[N];
        FuzzerUtils.init(lArr3, -47699L);
        FuzzerUtils.init(sArr, ((short) (-8146)));
        vMeth(Test.iFld, Test.instanceCount);
        i20 = 1;
        while ((++i20) < 162) {
            Test.iFld += i20;
            i21 = 1;
            do {
                Test.iFld += i21;
                for (i22 = i20; i22 < 1; i22++) {
                    Test.iFld &= i20;
                    Test.iFld *= s2;
                    Test.instanceCount &= -1048;
                    lArr3[i20 - 1] -= Test.instanceCount;
                    Test.instanceCount <<= i21;
                    Test.iFld += ((int) (d3));
                    if (Test.bFld)
                        continue;

                }
                Test.instanceCount <<= Test.instanceCount;
                d4 = 1;
                do {
                    Test.iArrFld[(1 >>> 1) % N] -= i22;
                    Test.iFld >>>= i21;
                    Test.instanceCount *= Test.instanceCount;
                    Test.iArrFld = Test.iArrFld;
                    i23 *= i21;
                    Test.instanceCount -= ((long) (d4));
                    Test.byFld += ((byte) (d4));
                    Test.instanceCount += (-4L) + (d4 * d4);
                } while ((++d4) < 1 );
                if (true)
                    continue;

                Test.instanceCount += ((i21 * Test.iFld) + Test.instanceCount) - i23;
                if (Test.bFld) {
                    for (i24 = 1; 1 > i24; i24++) {
                        i23 += ((i24 * Test.instanceCount) + Test.instanceCount) - i20;
                        i25 >>= i20;
                        Test.bFld = Test.bFld;
                        Test.fFld = s2;
                        Test.instanceCount += s2;
                        i23 |= Test.iFld;
                        Test.iArrFld[i20 + 1] = ((int) (d3));
                        Test.instanceCount = i25;
                        i25 -= i25;
                        Test.instanceCount <<= i24;
                    }
                    l5 = 1;
                    do {
                        if (Test.bFld) {
                            Test.instanceCount = Test.iFld;
                            i25 = ((int) (794206752911573299L));
                            i23 = -6322;
                            try {
                                Test.iFld = Test.iFld / i21;
                                i25 = (-38079) / i20;
                                i23 = (-35726) / i24;
                            } catch (ArithmeticException a_e) {
                            }
                            i23 >>>= -38;
                        }
                    } while ((++l5) < 1 );
                    for (i26 = 1; 1 > i26; i26++) {
                        sArr = sArr;
                        Test.iFld = -22639;
                        Test.iArrFld[i21] *= i21;
                        Test.instanceCount += 213 + (i26 * i26);
                        Test.instanceCount += i26;
                        i25 -= i22;
                        i25 = ((int) (l5));
                        i25 += 180;
                        i27 <<= ((int) (Test.instanceCount));
                        if (true)
                            break;

                        i23 += ((int) (0.267F + (i26 * i26)));
                        switch ((i21 % 8) + 11) {
                            case 11 :
                                i27 <<= i24;
                                i23 = i24;
                                Test.iArrFld[i26] = ((int) (l5));
                                Test.iFld += 1;
                                Test.fFld += Test.iFld;
                                Test.instanceCount = i24;
                                i25 = i27;
                                i23 = i20;
                            case 12 :
                                Test.iArrFld = Test.iArrFld;
                                Test.instanceCount <<= -35562;
                                i25 = ((int) (-71.12443));
                                i25 = i23;
                                i23 >>= i22;
                                d3 -= i24;
                                Test.iFld += ((int) (Test.instanceCount));
                                Test.iFld += i20;
                                Test.iFld += i26 * i26;
                                Test.fFld *= i27;
                                {
                                    final int ax$6 = i27;
                                    try {
                                        char[] ax$1 = new char[100];
                                        short[] ax$2 = new short[]{ ((short) (22582)), ((short) (-17588)), ((short) (-13334)), ((short) (25126)), ((short) (-14945)), ((short) (16253)), ((short) (18077)), ((short) (-12019)), ((short) (24413)) };
                                        char[] ax$4 = new char[]{ '', '䋧', '觓', '捃', '瘐' };
                                        for (int ax$0 = -774; ax$0 < (-774 + 17532); ax$0 += 1) {
                                            Test.AxOutputRedirectionHelper.redirect();
                                            try {
                                                ax$4[i27] = ((char) (ax$1[i27] / ax$2[i27]));
                                            } catch (Throwable ax$5) {
                                            } finally {
                                            }
                                            Test.AxOutputRedirectionHelper.recover();
                                        }
                                    } finally {
                                        i27 = ax$6;
                                    }
                                }
                                break;
                            case 13 :
                                Test.iFld += i26;
                                break;
                            case 14 :
                                i27 -= ((int) (Test.instanceCount));
                                break;
                            case 15 :
                                Test.instanceCount = Test.instanceCount;
                                break;
                            case 16 :
                                Test.iArrFld[i21 + 1] *= i25;
                                break;
                            case 17 :
                                Test.instanceCount += i25;
                                break;
                            case 18 :
                                Test.iFld += i26 ^ i23;
                                break;
                            default :
                                Test.iFld += i26;
                        }
                    }
                } else if (false)
                    continue;

            } while ((++i21) < 31 );
        }
        FuzzerUtils.out.println((((("i20 i21 i22 = " + i20) + ",") + i21) + ",") + i22);
        FuzzerUtils.out.println((((("i23 s2 d3 = " + i23) + ",") + s2) + ",") + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println((((("d4 i24 i25 = " + Double.doubleToLongBits(d4)) + ",") + i24) + ",") + i25);
        FuzzerUtils.out.println((((("l5 i26 i27 = " + l5) + ",") + i26) + ",") + i27);
        FuzzerUtils.out.println((("lArr3 sArr = " + FuzzerUtils.checkSum(lArr3)) + ",") + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println((((("Test.instanceCount Test.byFld Test.fFld = " + Test.instanceCount) + ",") + Test.byFld) + ",") + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println((((("Test.iFld Test.bFld Test.iArrFld = " + Test.iFld) + ",") + (Test.bFld ? 1 : 0)) + ",") + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$7 = false;
}