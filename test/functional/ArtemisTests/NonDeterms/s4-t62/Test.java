// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.List;
import java.util.ArrayList;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 14434L;

    public static short sFld = -5719;

    public static float fFld = 0.725F;

    public double dFld = 0.76648;

    public int[] iArrFld = new int[N];

    public double[] dArrFld = new double[N];

    public float[] fArrFld = new float[N];

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7, double d, int i8) {
        float f2 = 71.215F, f3 = 16.220F, f4 = 2.479F, f5 = -126.897F, fArr[] = new float[N];
        int i9 = 78, i10 = -10, i11 = -12939, i12 = 5, i13 = -116, iArr1[] = new int[N];
        byte by1 = 80;
        boolean b = false;
        short s = 30130;
        long[] lArr = new long[N];
        FuzzerUtils.init(iArr1, 51644);
        FuzzerUtils.init(lArr, 3L);
        FuzzerUtils.init(fArr, 2.820F);
        for (f2 = 132; f2 > 8; --f2) {
            for (f3 = 1; f3 < 5; f3++) {
                by1 -= (byte) i9;
                f4 += (-59L + (f3 * f3));
                iArr1[(int) (f3 - 1)] = i9;
                f5 = 1;
                {
                    java.io.PrintStream ax$0 = System.out;
                    java.io.PrintStream ax$1 = System.err;
                    java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$2);
                    System.setErr(ax$2);
                    {
                        boolean ax$9 = false;
                        for (int ax$8 = -937; ax$8 < 5235; ax$8 += 2) {
                            if (!ax$9) {
                                ax$9 = true;
                                {
                                    System.setOut(ax$0);
                                    System.setErr(ax$1);
                                    while (++f5 < 2) {
                                        Test.instanceCount += (-11L + (f5 * f5));
                                        if (b)
                                            break;
                                    }
                                    System.setOut(ax$2);
                                    System.setErr(ax$2);
                                }
                            }
                            int ax$6 = i9;
                            try {
                                char[] ax$5 = new char[] { (char) 0xF3F4 };
                                char[] ax$3 = new char[] { 40000, 40001, 40002, 40003, 40004 };
                                for (int ax$4 = 0; ax$4 < ax$5.length; ax$4 += 1) {
                                    ax$5[ax$4] = (char) (ax$3[ax$4] * i9);
                                }
                            } catch (Throwable ax$7) {
                            } finally {
                                i9 = ax$6;
                            }
                        }
                    }
                    System.setOut(ax$0);
                    System.setErr(ax$1);
                }
                Test.instanceCount += (long) ((long) f3 | by1);
            }
            i8 = 9;
        }
        i7 = i9;
        for (long l2 : lArr) {
            i11 = 1;
            while (++i11 < 2) {
                switch((i11 % 1) + 1) {
                    case 1:
                        for (i12 = 1; i12 > 1; i12--) {
                            by1 *= (byte) i8;
                            i7 >>= i8;
                            i13 = (int) l2;
                            iArr1[i12] -= (int) l2;
                            b = b;
                            switch(((i12 % 5) * 5) + 127) {
                                case 138:
                                    switch(((i12 >>> 1) % 2) + 14) {
                                        case 14:
                                            d = i9;
                                            if (b)
                                                break;
                                            iArr1[i11] = (int) l2;
                                            i9 += s;
                                            fArr[i11] = i9;
                                            i10 &= (int) Test.instanceCount;
                                            i9 *= i9;
                                            break;
                                        case 15:
                                            l2 >>>= i7;
                                            b = b;
                                            i10 -= i10;
                                            i13 |= (int) l2;
                                            Test.instanceCount = Test.instanceCount;
                                            i13 += i12;
                                            Test.instanceCount += 7;
                                            i13 = (int) Test.instanceCount;
                                            break;
                                    }
                                case 129:
                                    i9 -= i8;
                                case 132:
                                    i10 += (i12 * i9);
                                case 136:
                                    f4 *= i10;
                                    break;
                                case 147:
                                    i9 += (i12 * f2);
                                    break;
                            }
                        }
                        break;
                    default:
                }
            }
        }
        vMeth_check_sum += i7 + Double.doubleToLongBits(d) + i8 + Float.floatToIntBits(f2) + i9 + Float.floatToIntBits(f3) + i10 + by1 + Float.floatToIntBits(f4) + Float.floatToIntBits(f5) + (b ? 1 : 0) + i11 + i12 + i13 + s + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth1(float f1, int i4, long l) {
        if (ax$10) {
            try {
                java.util.List<java.lang.Thread> ax$12 = new ArrayList<Thread>();
                for (Thread ax$11 : ax$12) ax$11.start();
            } catch (Throwable ax$13) {
            } finally {
            }
            return -649686452;
        }
        int i5 = 108, i6 = 214, i14 = 12440, i15 = 112, i16 = -41, i17 = 189, i18 = 109, i19 = 134, iArr2[] = new int[N];
        long l1 = -29L;
        byte by = 97;
        boolean b1 = true;
        short s1 = 10279;
        double d1 = 0.119586;
        float[] fArr1 = new float[N];
        FuzzerUtils.init(iArr2, 164);
        FuzzerUtils.init(fArr1, 2.135F);
        for (i5 = 2; i5 < 199; ++i5) {
            try {
                i6 = (i6 % 213);
                i4 = (i4 / -247);
                i6 = (-86 % i5);
            } catch (ArithmeticException a_e) {
            }
            i4 += (i5 - l);
            l1 += i5;
            if (((by++) + ((Test.instanceCount + -6) * (i4 >>> i6))) < (Math.max(++l1, (long) (f1 * i5)) - l))
                break;
            vMeth(-26817, 0.127413, i6);
            if (b1)
                break;
            i4 >>= i4;
            i6 = i4;
            i4 = (int) l;
            Test.instanceCount = i6;
            for (i14 = 1; 3 > i14; ++i14) {
                for (i16 = 1; i16 < 2; i16++) {
                    i15 = i5;
                    i15 += i4;
                    try {
                        i15 = (26998 / i15);
                        i4 = (i6 / iArr2[i14 - 1]);
                        iArr2[i16] = (i14 % -189);
                    } catch (ArithmeticException a_e) {
                    }
                    l += (i16 * i16);
                    fArr1[i16 + 1] -= i16;
                    i4 += (((i16 * i15) + i6) - i14);
                    l1 = l;
                    Test.instanceCount -= i15;
                    l1 *= i15;
                    i6 = i5;
                    try {
                        i17 = (i17 % i15);
                        i6 = (-570955381 / i5);
                        i6 = (i14 / i15);
                    } catch (ArithmeticException a_e) {
                    }
                }
            }
            i15 *= (int) Test.instanceCount;
            i18 = 3;
            do {
                i4 += i18;
                i6 %= (int) (s1 | 1);
                b1 = b1;
                i19 = 1;
                do {
                    Test.instanceCount |= i14;
                    i15 = (int) d1;
                } while (++i19 < 1);
                f1 = f1;
                i15 -= i17;
            } while (--i18 > 0);
            i17 -= -75;
        }
        f1 -= l1;
        fArr1[(i15 >>> 1) % N] = i6;
        long meth_res = Float.floatToIntBits(f1) + i4 + l + i5 + i6 + l1 + by + (b1 ? 1 : 0) + i14 + i15 + i16 + i17 + i18 + s1 + i19 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(int i2, float f) {
        int i3 = 46562, i20 = 42121, i21 = -6, i22 = -7, i23 = 3497, i24 = -2, i25 = -167, i26 = 2283, i27 = -5, i28 = -10, i29 = 0, iArr[] = new int[N];
        boolean b2 = true;
        double d2 = 2.87020, d3 = 2.55797;
        byte by2 = 66;
        long[][] lArr1 = new long[N][N];
        FuzzerUtils.init(iArr, -16561);
        FuzzerUtils.init(lArr1, 7142366008642935270L);
        iArr[(i3 >>> 1) % N] += (int) f;
        {
            java.io.PrintStream ax$16 = System.out;
            java.io.PrintStream ax$17 = System.err;
            java.io.PrintStream ax$18 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$18);
            System.setErr(ax$18);
            try {
                ax$10 = true;
                for (int ax$14 = 0; ax$14 < 7705; ax$14 += 1) iMeth1((float) 0.9682393264270494, -1672754837, 4495084671396532063L);
            } catch (java.lang.Throwable ax$15) {
            } finally {
                ax$10 = false;
            }
            System.setOut(ax$16);
            System.setErr(ax$17);
        }
        iMeth1(f, i2, Test.instanceCount);
        for (i20 = 5; i20 < 93; ++i20) {
            for (i22 = 1; 6 > i22; ++i22) {
                lArr1[i20 + 1][i22 + 1] <<= i22;
                try {
                    i23 = (i3 / i22);
                    i2 = (i3 / -47238);
                    i3 = (i21 % -6859);
                } catch (ArithmeticException a_e) {
                }
                b2 = b2;
                switch((i22 % 4) + 37) {
                    case 37:
                        if (b2)
                            break;
                        switch((i22 % 5) + 84) {
                            case 84:
                                Test.sFld += Test.sFld;
                                Test.instanceCount += -219;
                                for (i24 = i20; i24 < 2; i24++) {
                                    i21 += (((i24 * i20) + f) - i23);
                                }
                                for (d2 = 1; 2 > d2; ++d2) {
                                    i3 += (int) (d2 - i2);
                                    Test.instanceCount -= Test.instanceCount;
                                    i3 = (int) Test.instanceCount;
                                    i26 = (int) f;
                                }
                                i23 = (int) f;
                                Test.sFld = (short) f;
                                i3 = 96;
                                switch((i22 % 3) + 26) {
                                    case 26:
                                        d3 -= i23;
                                        b2 = b2;
                                        lArr1[i22][i20 - 1] *= i22;
                                        f = 2;
                                        break;
                                    case 27:
                                    case 28:
                                        iArr[i20] >>= by2;
                                        Test.instanceCount += i22;
                                        for (i27 = 2; i27 > 1; i27--) {
                                            f -= i24;
                                            i21 += i27;
                                            if (b2) {
                                                i29 = i2;
                                                iArr[i20 + 1] -= (int) Test.instanceCount;
                                                i26 += (i27 ^ by2);
                                                Test.instanceCount = Test.instanceCount;
                                            } else if (b2) {
                                                d3 = i20;
                                            } else if (false) {
                                                d3 *= i22;
                                            }
                                        }
                                        break;
                                    default:
                                        f -= Test.instanceCount;
                                }
                                break;
                            case 85:
                                if (i27 != 0) {
                                }
                                break;
                            case 86:
                                f += Test.instanceCount;
                                break;
                            case 87:
                                i28 >>= (int) Test.instanceCount;
                            case 88:
                                Test.sFld -= (short) i21;
                                break;
                            default:
                                try {
                                    i28 = (i29 / 65261);
                                    i23 = (i28 / -4254);
                                    i29 = (iArr[i20 + 1] / -21);
                                } catch (ArithmeticException a_e) {
                                }
                        }
                        break;
                    case 38:
                        i28 = -7;
                        break;
                    case 39:
                        f += i22;
                        break;
                    case 40:
                        by2 += (byte) i20;
                        break;
                }
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f) + i3 + i20 + i21 + i22 + i23 + (b2 ? 1 : 0) + i24 + i25 + Double.doubleToLongBits(d2) + i26 + Double.doubleToLongBits(d3) + by2 + i27 + i28 + i29 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -7, i1 = 51739, i30 = 4, i31 = 4, i32 = 9, i33 = 40061, i34 = -51716, iArr3[][] = new int[N][N], iArr4[] = new int[N];
        long l3 = -18797L, lArr2[][] = new long[N][N];
        boolean b3 = true, bArr[] = new boolean[N];
        byte by3 = -68, byArr[] = new byte[N];
        FuzzerUtils.init(iArr3, 0);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr2, 171L);
        FuzzerUtils.init(iArr4, -62651);
        FuzzerUtils.init(byArr, (byte) 62);
        for (i = 4; i < 192; ++i) {
            Test.instanceCount -= (~iMeth(i1, Test.fFld));
            i1 *= (int) Test.fFld;
            i1 += (int) Test.fFld;
            for (i30 = 1; i30 < 27; ++i30) {
                Test.instanceCount += i1;
                i31 *= (int) Test.instanceCount;
                iArrFld[i30 + 1] *= 10;
                l3 = 1;
                do {
                    dArrFld[i - 1] *= dFld;
                    i1 &= i1;
                    iArr3 = iArr3;
                    Test.instanceCount >>= i30;
                    i1 -= i31;
                    i32 = (int) l3;
                    Test.instanceCount *= i32;
                    Test.instanceCount -= Test.instanceCount;
                    iArr3[i30][i - 1] = i32;
                } while (++l3 < 2);
                for (i33 = 1; i33 < 2; i33++) {
                    int i35 = -63518;
                    i1 = 9;
                    i1 &= i34;
                    i1 = i;
                    Test.instanceCount <<= -34417L;
                    switch((i33 % 2) + 81) {
                        case 81:
                            Test.fFld = i31;
                            i31 += i1;
                            bArr[i + 1] = b3;
                            lArr2[i30 - 1][i] = Test.instanceCount;
                            b3 = b3;
                            i31 |= i31;
                            Test.instanceCount += i33;
                            iArrFld[i33 - 1] = i;
                            Test.fFld = i32;
                            if (b3)
                                continue;
                            dFld = i30;
                            dFld *= -163;
                            iArrFld[i33 + 1] >>= i33;
                        case 82:
                            b3 = false;
                            i1 -= (int) l3;
                            iArrFld[i33 + 1] = i30;
                            switch(((i32 >>> 1) % 1) + 78) {
                                case 78:
                                    Test.instanceCount = Test.instanceCount;
                                    Test.instanceCount += (i33 - i34);
                                    Test.instanceCount = by3;
                                    Test.instanceCount -= i34;
                                    by3 += (byte) i1;
                                    iArrFld[i33 - 1] = (int) Test.instanceCount;
                                    i32 += (i33 | Test.sFld);
                                default:
                                    i32 += Test.sFld;
                                    fArrFld[i30 + 1] -= (float) dFld;
                                    Test.fFld += -72;
                                    Test.instanceCount = l3;
                                    iArr4[i] >>= (int) l3;
                                    i34 += (i33 | i31);
                                    Test.fFld = (float) dFld;
                                    i34 += (int) l3;
                                    Test.fFld += i33;
                                    i34 += (int) Test.fFld;
                                    iArrFld[i33 - 1] = (int) l3;
                                    Test.instanceCount = i35;
                                    byArr = byArr;
                                    i31 >>= i30;
                                    if (b3) {
                                        i1 <<= i30;
                                        dFld -= Test.instanceCount;
                                        Test.instanceCount = -34369;
                                        Test.instanceCount = by3;
                                        iArr3[i30 - 1][i + 1] -= i35;
                                        i35 += (int) l3;
                                    } else {
                                        dFld += Test.fFld;
                                    }
                            }
                            i34 += i35;
                            i35 = by3;
                            break;
                    }
                    i32 += (i33 * i33);
                    i1 += (i33 ^ i1);
                    Test.instanceCount /= (i1 | 1);
                }
            }
        }
        FuzzerUtils.out.println("i i1 i30 = " + i + "," + i1 + "," + i30);
        FuzzerUtils.out.println("i31 l3 i32 = " + i31 + "," + l3 + "," + i32);
        FuzzerUtils.out.println("i33 i34 b3 = " + i33 + "," + i34 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("by3 iArr3 bArr = " + by3 + "," + FuzzerUtils.checkSum(iArr3) + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("lArr2 iArr4 byArr = " + FuzzerUtils.checkSum(lArr2) + "," + FuzzerUtils.checkSum(iArr4) + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("dFld iArrFld dArrFld = " + Double.doubleToLongBits(dFld) + "," + FuzzerUtils.checkSum(iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$10 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
