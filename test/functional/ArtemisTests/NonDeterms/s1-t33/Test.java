// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.Hashtable;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 4L;

    public static float fFld = -2.552F;

    public static int iFld = -147;

    public static byte byFld = -113;

    public double dFld = 7.21398;

    public static int iFld1 = -30413;

    public static boolean bFld = true;

    public static volatile float fFld1 = -1.487F;

    public static int[] iArrFld = new int[N];

    public static byte[] byArrFld = new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 52);
        FuzzerUtils.init(Test.byArrFld, (byte) 55);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b1, int i6, double d1) {
        long l1 = 3L, lArr[] = new long[N];
        int i7 = -14, i8 = 31222, i9 = -114, i10 = -55011, i11 = 5, i12 = -10, i13 = -42023, i14 = -4, i15 = 8, i16 = -3, i17 = -1812;
        float f = 101.930F, fArr[] = new float[N];
        short s = -8658;
        byte by1 = -44;
        double[] dArr1 = new double[N];
        FuzzerUtils.init(lArr, 82L);
        FuzzerUtils.init(fArr, -113.561F);
        FuzzerUtils.init(dArr1, 0.103855);
        for (l1 = 12; 239 > l1; ++l1) {
            Test.instanceCount += i6;
        }
        i6 += (int) Test.instanceCount;
        for (i8 = 181; 2 < i8; --i8) {
            f = 1;
            while (++f < 3) {
                lArr[i8] += 202;
                Test.instanceCount += i6;
                fArr[(int) (f - 1)] *= (float) 124.35583;
                i7 = i7;
                for (i10 = 1; i10 < 1; i10++) {
                    lArr = lArr;
                    Test.iArrFld[i10] >>= i11;
                    b1 = b1;
                    Test.iArrFld[i10] -= i6;
                    i6 += (int) Test.fFld;
                    Test.instanceCount >>>= i7;
                }
                Test.fFld += f;
                i6 += i8;
            }
            i11 += i11;
            for (i12 = 1; i12 < 3; ++i12) {
                Test.instanceCount += i12;
                i6 += (int) l1;
                i13 <<= (int) Test.instanceCount;
                Test.instanceCount = s;
                dArr1[i8 + 1] = Test.instanceCount;
                for (i14 = 2; i14 > i12; i14--) {
                    Test.iArrFld = Test.iArrFld;
                    i9 = i11;
                    i15 <<= i14;
                }
                s += (short) i12;
                i7 -= (int) Test.instanceCount;
                for (i16 = 1; i16 < 2; ++i16) {
                    i9 = i8;
                }
                by1 += (byte) (((i12 * l1) + i15) - i14);
                i13 -= i12;
                Test.iArrFld[i8] <<= i17;
            }
            i17 += i12;
        }
        vMeth2_check_sum += (b1 ? 1 : 0) + i6 + Double.doubleToLongBits(d1) + l1 + i7 + i8 + i9 + Float.floatToIntBits(f) + i10 + i11 + i12 + i13 + s + i14 + i15 + i16 + i17 + by1 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static void vMeth1(int i2, long l) {
        int i3 = 192, i4 = -228, i18 = 92, i19 = -37432, i20 = -81;
        byte by = 31;
        double d = -2.26415, dArr[] = new double[N];
        boolean b = true;
        float f1 = 93.328F;
        long l2 = 979L;
        short[] sArr = new short[N];
        FuzzerUtils.init(dArr, -71.88836);
        FuzzerUtils.init(sArr, (short) 26465);
        for (i3 = 208; i3 > 12; --i3) {
            by <<= (byte) (((l + i3) - d) * (d - (Test.fFld--)));
            i4 += (int) l;
            Test.iArrFld[i3 - 1] = (int) (++Test.fFld);
            b = (dArr[i3 + 1] != (i4--));
            i2 += (int) d;
            vMeth2(b, i3, 85.98266);
            f1 = 1;
            do {
                i4 %= (int) (i2 | 1);
                d = -13083;
            } while (++f1 < 3);
            b = b;
            i2 ^= i3;
            Test.iArrFld = Test.iArrFld;
            i4 = i4;
            switch((((10 >>> 1) % 10) * 5) + 76) {
                case 111:
                    Test.instanceCount = -14L;
                    i2 += (29639 + (i3 * i3));
                    Test.instanceCount *= (long) Test.fFld;
                    break;
                case 101:
                    i2 %= (int) (i3 | 1);
                    i18 = 1;
                    do {
                        switch(((-173 >>> 1) % 2) + 121) {
                            case 121:
                                Test.iArrFld[(i2 >>> 1) % N] = i18;
                                i19 = 1;
                                while (++i19 < 1) {
                                    switch(((i18 % 2) * 5) + 107) {
                                        case 112:
                                            Test.iArrFld[i18 + 1] += (int) -203L;
                                            i2 = (int) Test.fFld;
                                            l -= (long) d;
                                            Test.instanceCount >>= i4;
                                            i4 ^= i2;
                                            i4 = i18;
                                            i20 = i4;
                                            i4 += (i19 * i19);
                                        case 113:
                                            if (b)
                                                break;
                                            Test.instanceCount -= i19;
                                            break;
                                    }
                                    Test.iArrFld[i18] *= (int) l2;
                                    i4 = (int) 4256801770L;
                                    i20 += 23861;
                                }
                                break;
                            case 122:
                                i4 *= (int) Test.fFld;
                                break;
                        }
                    } while (++i18 < 3);
                    break;
                case 112:
                    i20 -= i20;
                    break;
                case 120:
                    i4 = (int) l2;
                    break;
                case 84:
                    Test.iArrFld[i3 - 1] += -15632;
                    break;
                case 118:
                    if (b)
                        continue;
                case 98:
                    i2 = 1;
                case 80:
                    Test.iArrFld[i3 - 1] += i3;
                    break;
                case 88:
                    Test.iArrFld[i3] += i20;
                    break;
                case 82:
                    try {
                        i2 = (i2 % i3);
                        i2 = (i4 / 54149);
                        i20 = (i3 / i4);
                    } catch (ArithmeticException a_e) {
                    }
                    break;
                default:
                    i2 -= Test.iFld;
            }
        }
        vMeth1_check_sum += i2 + l + i3 + i4 + by + Double.doubleToLongBits(d) + (b ? 1 : 0) + Float.floatToIntBits(f1) + i18 + i19 + i20 + l2 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i1) {
        int i21 = 171, i22 = 17576, i23 = 24, i24 = 2, i25 = 244, i26 = -3, i27 = -179, i28 = -27959;
        long l3 = -236L;
        byte by2 = 86;
        double d3 = 2.114249;
        boolean b2 = true;
        short s2 = 21997;
        vMeth1(i1, Test.instanceCount);
        Test.fFld -= -23142;
        Test.iArrFld[(16 >>> 1) % N] -= (int) Test.instanceCount;
        for (i21 = 164; 1 < i21; i21--) {
            Test.iArrFld[i21] -= (int) 137L;
            i1 = i1;
            for (l3 = i21; 4 > l3; ++l3) {
                for (i24 = 1; i24 < 1; ++i24) {
                    double d2 = 0.76455;
                    Test.instanceCount += (i24 ^ Test.instanceCount);
                    Test.instanceCount = (long) Test.fFld;
                    try {
                        Test.iFld = (i26 % i1);
                        i25 = (-56108 % i23);
                        i23 = (Test.iArrFld[(int) (l3)] / i22);
                    } catch (ArithmeticException a_e) {
                    }
                    i26 -= i21;
                    try {
                        i26 = (i24 % Test.iFld);
                        Test.iArrFld[i24] = (i22 % i24);
                        i1 = (47 % i21);
                    } catch (ArithmeticException a_e) {
                    }
                    by2 += (byte) i24;
                    if (true)
                        break;
                    i22 = -4;
                    i1 += (i24 * i24);
                    d2 = i24;
                    Test.instanceCount = l3;
                }
                Test.byArrFld[(int) (l3 + 1)] += (byte) i25;
                switch((int) (((l3 % 2) * 5) + 15)) {
                    case 24:
                        i22 = Test.iFld;
                        Test.iArrFld[i21 + 1] = 65194;
                        Test.iArrFld[i21 + 1] = i1;
                        Test.iFld += (int) l3;
                        d3 = i22;
                        b2 = false;
                        i26 = -21038;
                        switch((i21 % 2) + 51) {
                            case 51:
                                switch((i21 % 2) + 96) {
                                    case 96:
                                        for (i27 = 1; i27 < 1; ++i27) {
                                            Test.instanceCount = i27;
                                            i26 -= i28;
                                            i22 += -11;
                                            i28 <<= i23;
                                            i1 += (((i27 * i24) + i24) - i22);
                                            by2 = (byte) i28;
                                        }
                                        break;
                                    case 97:
                                        i28 = (int) d3;
                                        break;
                                    default:
                                        s2 += (short) i21;
                                }
                                break;
                            case 52:
                                i26 = i25;
                        }
                        break;
                    case 18:
                        Test.iArrFld[i21] += (int) l3;
                        break;
                }
            }
        }
        vMeth_check_sum += i1 + i21 + i22 + l3 + i23 + i24 + i25 + i26 + by2 + Double.doubleToLongBits(d3) + (b2 ? 1 : 0) + i27 + i28 + s2;
    }

    public void mainTest(String[] strArr1) {
        if (ax$0) {
            boolean ax$1 = bFld;
            try {
                try {
                    // this should generate an IllegalArgumentException
                    Hashtable bad1 = new Hashtable(100, Float.NaN);
                } catch (IllegalArgumentException e1) {
                    bFld = true;
                }
            } catch (Throwable ax$2) {
            } finally {
                bFld = ax$1;
            }
            return;
        }
        int i = -6987, i30 = -14, i31 = 247, i32 = 9, i33 = -1, i34 = -61103, i35 = 204;
        short s3 = -6029;
        double d4 = -58.78975;
        long l5 = -6L, lArr1[] = new long[N];
        boolean[] bArr = new boolean[N];
        float[] fArr1 = new float[N];
        FuzzerUtils.init(lArr1, -3811702166L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr1, -106.205F);
        i = 1;
        do {
            vMeth(i);
            Test.byFld *= (byte) -1681334246562078447L;
            lArr1[i - 1] -= (long) Test.fFld;
            try {
                Test.iFld = (i / Test.iFld);
                Test.iFld = (Test.iArrFld[i + 1] / Test.iArrFld[i + 1]);
                Test.iFld = (i / Test.iArrFld[i]);
            } catch (ArithmeticException a_e) {
            }
            Test.iArrFld[i] = s3;
            dFld *= -2;
            try {
                Test.iFld = (-63338 % i);
                Test.iArrFld[i + 1] = (i % -5604);
                Test.iFld = (Test.iFld % -68);
            } catch (ArithmeticException a_e) {
            }
            Test.iFld = Test.byFld;
            dFld -= Test.iFld1;
        } while (++i < 148);
        Test.iArrFld[(Test.iFld >>> 1) % N] <<= (int) 103L;
        for (i30 = 11; i30 < 227; i30++) {
            Test.instanceCount *= (long) dFld;
            Test.iFld1 -= Test.iFld;
            for (i32 = 1; i32 < 24; ++i32) {
                if (Test.bFld)
                    continue;
                if (Test.bFld)
                    break;
                i31 >>= i32;
                Test.instanceCount += (4808 + (i32 * i32));
                i34 = 1;
                do {
                    Test.iArrFld[i34] >>= i34;
                    Test.instanceCount -= i34;
                    i31 *= i33;
                    Test.iFld1 += (((i34 * i30) + Test.iFld1) - Test.instanceCount);
                    Test.bFld = Test.bFld;
                    if (Test.bFld) {
                        try {
                            i33 = (i30 % 49866);
                            i33 = (-215 % i33);
                            Test.iFld1 = (Test.iArrFld[i30] % 230);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.iArrFld[i34 - 1] >>= i31;
                        i33 *= i;
                        Test.instanceCount += Test.instanceCount;
                        Test.byFld = (byte) i30;
                        i31 = i30;
                        Test.instanceCount -= (long) d4;
                        Test.iArrFld[i30] = Test.iFld1;
                        Test.instanceCount = (long) Test.fFld;
                        Test.iFld1 *= i33;
                        i33 += i34;
                        i31 <<= (int) Test.instanceCount;
                        i31 += (((i34 * Test.iFld) + i34) - Test.instanceCount);
                        i33 -= (int) Test.fFld;
                    } else if (Test.bFld) {
                        Test.fFld += (i34 - i33);
                        switch((i30 % 8) + 117) {
                            case 117:
                                Test.fFld += (i34 * i34);
                                i33 = Test.iFld1;
                                Test.fFld = l5;
                                Test.fFld += i34;
                                break;
                            case 118:
                                l5 += i34;
                                d4 %= (i30 | 1);
                                Test.iFld1 >>= i32;
                                Test.fFld += (i34 + i33);
                                Test.instanceCount += (((i34 * Test.iFld) + Test.instanceCount) - i32);
                                break;
                            case 119:
                                s3 -= s3;
                                i33 += (((i34 * Test.fFld) + i30) - i32);
                            case 120:
                                if (Test.bFld)
                                    break;
                                Test.fFld = 0.176F;
                                Test.iFld += i30;
                                i33 = i34;
                                Test.iFld += i34;
                                i31 -= s3;
                                i33 += (i34 - Test.fFld1);
                                if (false) {
                                    Test.iArrFld[i32] -= i;
                                    Test.bFld = Test.bFld;
                                    if (Test.bFld)
                                        break;
                                    i33 += i32;
                                    d4 += Test.instanceCount;
                                    i33 *= -64632;
                                    i31 = i34;
                                    bArr[i34 - 1] = false;
                                    i31 += 56067;
                                } else if (false) {
                                    switch((i32 % 6) + 19) {
                                        case 19:
                                            i33 += (i34 * i34);
                                            Test.iArrFld[i30 + 1] *= -239;
                                            Test.iFld1 = -78;
                                            bArr = bArr;
                                            break;
                                        case 20:
                                            Test.iFld1 = i34;
                                            break;
                                        case 21:
                                            i31 *= i;
                                            break;
                                        case 22:
                                            Test.instanceCount -= -9;
                                        case 23:
                                            Test.fFld = Test.iFld;
                                            break;
                                        case 24:
                                            fArr1[i34] -= -231;
                                        default:
                                            s3 += (short) (((i34 * Test.byFld) + i30) - Test.instanceCount);
                                    }
                                } else if (false) {
                                    l5 += i34;
                                } else {
                                    if (Test.bFld)
                                        break;
                                }
                                break;
                            case 121:
                                i35 += (((i34 * i31) + i30) - l5);
                                break;
                            case 122:
                                i31 %= (int) (Test.instanceCount | 1);
                            case 123:
                                i31 += i34;
                                break;
                            case 124:
                                Test.instanceCount = l5;
                            default:
                                i35 *= (int) Test.instanceCount;
                        }
                    } else if (Test.bFld) {
                        i33 -= (int) -8.88438;
                    } else {
                        Test.fFld1 *= Test.iFld;
                    }
                } while (++i34 < 2);
            }
        }
        FuzzerUtils.out.println("i s3 i30 = " + i + "," + s3 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 d4 l5 = " + i34 + "," + Double.doubleToLongBits(d4) + "," + l5);
        FuzzerUtils.out.println("i35 lArr1 bArr = " + i35 + "," + FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld dFld Test.iFld1 = " + Test.byFld + "," + Double.doubleToLongBits(dFld) + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.bFld Test.fFld1 Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," + Float.floatToIntBits(Test.fFld1) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.byArrFld = " + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
