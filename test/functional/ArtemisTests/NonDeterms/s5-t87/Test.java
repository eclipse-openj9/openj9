// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.InetAddress;
import java.util.SortedSet;
import java.util.TreeSet;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 196L;

    public static volatile boolean bFld = false;

    public int iFld = 201;

    public static volatile double dFld = -2.47151;

    public static int iArrFld[] = new int[N];

    public static double dArrFld[] = new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 66);
        FuzzerUtils.init(Test.dArrFld, -101.65211);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, short s) {
        int i6 = -7;
        int i7 = 229;
        int i8 = -8;
        int i9 = -87;
        int i10 = 199;
        int i11 = 2081;
        int i12 = -60985;
        int iArr[][] = new int[N][N];
        byte by = -106;
        double d1 = 2.113813;
        double dArr[] = new double[N];
        float f = 4.921F;
        long lArr[] = new long[N];
        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(lArr, -5959867730697883933L);
        FuzzerUtils.init(dArr, -2.42747);
        for (i6 = 1; i6 < 78; ++i6) {
            l >>>= i6;
            i7 = by;
            for (i8 = 1; i8 < 7; ++i8) {
                Test.instanceCount *= Test.instanceCount;
                for (i10 = 1; i10 < 2; i10++) {
                    i11 -= ((int) (d1));
                    switch (((i8 % 10) * 5) + 108) {
                        case 147 :
                            f = i7;
                            i11 -= ((int) (f));
                            i9 += ((i10 * i11) + l) - f;
                            d1 = i8;
                            if (Test.bFld)
                                continue;

                            i7 *= ((int) (Test.instanceCount));
                            i9 += i11;
                            i7 = i6;
                            i12 = 10197;
                            Test.instanceCount <<= i11;
                            if (Test.bFld)
                                continue;

                            l += i6;
                            d1 = i8;
                            break;
                        case 120 :
                            l += i10 * i10;
                            iArr[i8 + 1] = FuzzerUtils.int1array(N, ((int) (0)));
                            Test.bFld = Test.bFld;
                            Test.instanceCount += ((i10 * i10) + i7) - Test.instanceCount;
                            i11 = ((int) (48661L));
                            switch ((i8 % 2) + 118) {
                                case 118 :
                                    iArr[i10 + 1][i10 - 1] = ((int) (d1));
                                    by <<= ((byte) (-1313401228L));
                                    Test.instanceCount += ((i10 * i9) + i11) - i8;
                                    lArr[i8 - 1] += i6;
                                case 119 :
                                    dArr = dArr;
                                    Test.instanceCount += ((long) (24.58744));
                                    if (i10 != 0) {
                                        vMeth2_check_sum += (((((((((((((l + s) + i6) + i7) + by) + i8) + i9) + i10) + i11) + Double.doubleToLongBits(d1)) + Float.floatToIntBits(f)) + i12) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                                        return;
                                    }
                                    i12 += ((i10 * i6) + i6) - Test.instanceCount;
                                    i12 ^= 188;
                                    Test.instanceCount += i10 * i6;
                            }
                            break;
                        case 149 :
                            lArr[i8] ^= 8181540524653923365L;
                            break;
                        case 127 :
                        case 125 :
                            d1 -= i11;
                            break;
                        case 133 :
                            i12 += i10;
                            break;
                        case 110 :
                            i9 += i10 + l;
                            break;
                        case 132 :
                            i12 += i10;
                            break;
                        case 145 :
                            i7 /= ((int) (i7 | 1));
                            break;
                        case 135 :
                            iArr[i6 + 1][i10] *= ((int) (Test.instanceCount));
                    }
                }
            }
        }
        vMeth2_check_sum += (((((((((((((l + s) + i6) + i7) + by) + i8) + i9) + i10) + i11) + Double.doubleToLongBits(d1)) + Float.floatToIntBits(f)) + i12) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(int i3) {
        int i4 = 242;
        int i5 = -16998;
        int i13 = -2420;
        int i14 = 5;
        int i15 = -179;
        int i16 = -53519;
        int i17 = 243;
        int i18 = -1;
        int i19 = -87;
        int i20 = -7;
        int iArr1[] = new int[N];
        double d = 1.96835;
        short s1 = -8689;
        float f1 = -83.387F;
        float f2 = -99.128F;
        byte by1 = 20;
        boolean bArr[] = new boolean[N];
        FuzzerUtils.init(iArr1, 103);
        FuzzerUtils.init(bArr, false);
        for (i4 = 6; i4 < 160; ++i4) {
            Test.instanceCount >>= ((long) ((Math.max(i4, i3) * (i5 + d)) - (--i5)));
            i3 += ((int) ((-2.972F) + (i4 * i4)));
            if (Test.bFld) {
                i5 = -8527;
                Test.instanceCount = ((long) (((Test.instanceCount -= i4) + i5) + (i4 - (d + Test.instanceCount))));
                vMeth2(Test.instanceCount, s1);
                iArr1[i4] = ((int) (f1));
            } else if (Test.bFld) {
                by1 += ((byte) (((i4 * i4) + s1) - i3));
                if (Test.bFld) {
                    i5 *= i4;
                    for (i13 = 1; 4 > i13; ++i13) {
                        for (i15 = 1; 2 > i15; i15++) {
                            i14 *= ((int) (Test.instanceCount));
                        }
                        i16 += i13;
                    }
                    Test.instanceCount <<= i5;
                    by1 += ((byte) (-20327));
                    i5 += ((int) (8838938694619442011L + (i4 * i4)));
                    i3 ^= i16;
                    d += Test.instanceCount;
                    f1 -= Test.instanceCount;
                    Test.instanceCount = i5;
                    for (i17 = 1; i17 < 4; i17++) {
                        bArr[i4] = Test.bFld;
                        i5 *= -47085;
                        i16 = i15;
                        switch (((i17 % 2) * 5) + 121) {
                            case 125 :
                                if (Test.bFld) {
                                    Test.instanceCount = i16;
                                    Test.instanceCount += i17;
                                    Test.instanceCount = i16;
                                    Test.instanceCount = i3;
                                    iArr1[i17 - 1] -= ((int) (f1));
                                    for (i19 = 1; i19 < 2; ++i19) {
                                        if (i16 != 0) {
                                            vMeth1_check_sum += ((((((((((((((((i3 + i4) + i5) + Double.doubleToLongBits(d)) + s1) + Float.floatToIntBits(f1)) + by1) + i13) + i14) + i15) + i16) + i17) + i18) + i19) + i20) + Float.floatToIntBits(f2)) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(bArr);
                                            return;
                                        }
                                    }
                                    f1 += i16;
                                    iArr1[i4] = ((int) (Test.instanceCount));
                                } else if (true) {
                                    i18 -= i15;
                                }
                                break;
                            case 123 :
                                {
                                    final int ax$45 = i19;
                                    try {
                                        String ax$34 = "15398241676457.85";
                                        boolean ax$32 = false;
                                        for (int ax$31 = -208; ax$31 < (-208 + 9899); ax$31 += 1) {
                                            Test.AxOutputRedirectionHelper.redirect();
                                            try {
                                                try {
                                                    int ax$35 = Integer.parseUnsignedInt(ax$34);
                                                    i19++;
                                                } catch (NumberFormatException ax$36) {

                                                }
                                            } catch (Throwable ax$37) {
                                            } finally {
                                            }
                                            Test.AxOutputRedirectionHelper.recover();
                                            if (!ax$32) {
                                                f2 += ((i17 * i20) + i17) - f1;
                                                ax$32 = true;
                                            }
                                            Test.AxOutputRedirectionHelper.redirect();
                                            try {
                                                StringBuffer ax$38 = new StringBuffer("");
                                                StringBuffer ax$39 = new StringBuffer("Some test StringBuffer");
                                                try {
                                                    ax$38.insert(0, new char[5], 1, Integer.MAX_VALUE);
                                                } catch (StringIndexOutOfBoundsException ax$40) {

                                                } catch (OutOfMemoryError ax$41) {
                                                }
                                                try {
                                                    ax$39.insert(2, new char[25], 5, Integer.MAX_VALUE);
                                                } catch (StringIndexOutOfBoundsException ax$42) {

                                                } catch (ArrayIndexOutOfBoundsException ax$43) {
                                                }
                                            } catch (Throwable ax$44) {
                                            } finally {
                                            }
                                            Test.AxOutputRedirectionHelper.recover();
                                        }
                                    } finally {
                                        i19 = ax$45;
                                    }
                                }
                                break;
                            default :
                        }
                    }
                } else if (Test.bFld) {
                    by1 += ((byte) (i4));
                } else {
                    i16 %= ((int) (i14 | 1));
                }
            }
        }
        vMeth1_check_sum += ((((((((((((((((i3 + i4) + i5) + Double.doubleToLongBits(d)) + s1) + Float.floatToIntBits(f1)) + by1) + i13) + i14) + i15) + i16) + i17) + i18) + i19) + i20) + Float.floatToIntBits(f2)) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(int i, int i1, int i2) {
        int i21 = -13;
        int i22 = 4;
        int i23 = 29111;
        int i24 = 26779;
        int i25 = -46096;
        int i26 = 14;
        int i27 = -58999;
        int i28 = -21082;
        int i29 = -150;
        int i30 = -40030;
        double d2 = 2.126263;
        byte by2 = 81;
        float f3 = 52.382F;
        short s2 = -23990;
        boolean bArr1[][] = new boolean[N][N];
        long lArr1[] = new long[N];
        FuzzerUtils.init(bArr1, false);
        FuzzerUtils.init(lArr1, 9182114628141218594L);
        vMeth1(i1);
        {
            final boolean ax$29 = Test.bFld;
            final int ax$30 = i27;
            try {
                double[] ax$24 = new double[]{ 0.0, 1.0, 2.0, 3.0 };
                double[] ax$25 = new double[]{ 0.9971236421634455, 0.9046190901582496, 0.9162109786970496, 0.07319815978568955, 0.29243628435445435, 0.2363150506205699 };
                double[] ax$27 = new double[]{ 0.18532191119531194, 0.6323770022322591, 0.24014792842889765 };
                boolean ax$21 = false;
                for (int ax$20 = -304; ax$20 < (-304 + 12645); ax$20 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        bFld = true;
                    } catch (Throwable ax$23) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    if (!ax$21) {
                        Test.instanceCount = i1;
                        ax$21 = true;
                    }
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$27[i27] = ax$24[i27] * ax$25[i27];
                    } catch (Throwable ax$28) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                Test.bFld = ax$29;
                i27 = ax$30;
            }
        }
        for (i21 = 100; i21 > 2; i21 -= 2) {
            Test.instanceCount = ((long) (d2));
            for (i23 = 11; 1 < i23; i23 -= 3) {
                i -= 1;
                for (i25 = 4; i25 > 1; i25 -= 3) {
                    long l1 = 155L;
                    Test.instanceCount += i25 * i26;
                    bArr1 = FuzzerUtils.boolean2array(N, ((boolean) (true)));
                    l1 += Test.instanceCount;
                    i26 <<= by2;
                    l1 += Test.instanceCount;
                }
                i %= ((int) (i2 | 1));
                for (i27 = 1; i27 < 4; ++i27) {
                    Test.instanceCount >>= i;
                    Test.instanceCount <<= -14;
                    i = ((int) (d2));
                    i = i1;
                    i26 = i28;
                    i ^= i28;
                    Test.instanceCount *= i1;
                    Test.iArrFld[i27] >>>= i1;
                    i1 = ((int) (Test.instanceCount));
                    Test.instanceCount += ((i27 * i23) + i1) - i23;
                    d2 = 52450;
                    Test.instanceCount = Test.instanceCount;
                    i22 = 45963;
                    lArr1[i23] >>= Test.instanceCount;
                }
                for (i29 = 1; i29 < 4; ++i29) {
                    lArr1[i23 + 1] -= ((long) (1.875F));
                    i28 -= i29;
                    if (Test.bFld)
                        break;

                    Test.iArrFld[i29 - 1] = ((int) (f3));
                    lArr1[i21 + 1] -= -48475;
                    s2 *= ((short) (i22));
                }
                Test.iArrFld[i23 + 1] = ((int) (Test.instanceCount));
                Test.iArrFld[i21 - 1] -= 64;
            }
        }
        vMeth_check_sum += (((((((((((((((((i + i1) + i2) + i21) + i22) + Double.doubleToLongBits(d2)) + i23) + i24) + i25) + i26) + by2) + i27) + i28) + i29) + i30) + Float.floatToIntBits(f3)) + s2) + FuzzerUtils.checkSum(bArr1)) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {
        if (Test.ax$3) {
            final int ax$8 = this.iFld;
            short[] ax$5 = new short[]{ ((short) (-7188)), ((short) (17845)) };
            short[] ax$6 = new short[]{ 20, 10, 0, -10, -20 };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$5[iFld] = ((short) ((ax$6[iFld] + 0x7fff) >>> 1));
            } catch (Throwable ax$7) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            this.iFld = ax$8;
            return;
        }
        int i31 = 56065;
        int i32 = 44858;
        int i33 = -14;
        int i34 = -41626;
        int i35 = 11964;
        int i36 = 13036;
        int i37 = -95;
        int i38 = -99;
        int i39 = 177;
        int i40 = 4;
        int i41 = 3;
        int iArr2[] = new int[N];
        float f4 = -32.273F;
        float fArr[] = new float[N];
        byte by3 = -59;
        byte byArr[][] = new byte[N][N];
        long l2 = 4411222801633804348L;
        long lArr2[] = new long[N];
        short s3 = 3355;
        short sArr[] = new short[N];
        boolean bArr2[] = new boolean[N];
        FuzzerUtils.init(lArr2, -228L);
        FuzzerUtils.init(bArr2, false);
        FuzzerUtils.init(fArr, 2.509F);
        FuzzerUtils.init(sArr, ((short) (16751)));
        FuzzerUtils.init(byArr, ((byte) (-97)));
        FuzzerUtils.init(iArr2, 8);
        vMeth(iFld, iFld, 24272);
        for (i31 = 193; i31 > 2; i31 -= 3) {
            for (i33 = 5; i33 < 80; i33++) {
                for (i35 = 2; i35 > 1; i35--) {
                    f4 *= i34;
                    Test.instanceCount = Test.instanceCount;
                    i34 += i35 + i35;
                    lArr2[i35 + 1] -= i34;
                    bArr2 = bArr2;
                    Test.instanceCount += i35;
                }
                lArr2[i33] = -9L;
            }
        }
        by3 <<= ((byte) (i32));
        i37 >>= ((int) (-39101L));
        i34 -= i31;
        i38 = 1;
        do {
            fArr[i38 + 1] = 2.898F;
            i32 += ((int) (157L + (i38 * i38)));
            lArr2[i38 + 1] -= i37;
            i32 = i38;
            fArr[i38] = ((float) (Test.dFld));
            for (l2 = i38; l2 < 62; l2++) {
                for (i40 = 1; i40 < 1; i40++) {
                    i41 -= ((int) (l2));
                    Test.instanceCount &= i39;
                    i37 = by3;
                    by3 ^= ((byte) (i34));
                    f4 += iFld;
                    switch ((((50 >>> 1) % 2) * 5) + 71) {
                        case 80 :
                            s3 <<= ((short) (Test.instanceCount));
                            i41 *= ((int) (f4));
                            Test.dArrFld[i38 - 1] = i40;
                            Test.instanceCount *= 12;
                            i41 -= i38;
                            i41 >>>= ((int) (l2));
                            i39 = i41;
                            sArr[i40] &= ((short) (i39));
                            switch (((i38 >>> 1) % 5) + 59) {
                                case 59 :
                                    fArr[((-41484) >>> 1) % N] += ((float) (20.46324));
                                    switch ((((68 >>> 1) % 8) * 5) + 102) {
                                        case 129 :
                                            i36 = i36;
                                            Test.instanceCount += ((long) (f4));
                                            break;
                                        case 117 :
                                            i39 += by3;
                                            byArr[i38][i38 + 1] &= ((byte) (i32));
                                            if (Test.bFld) {
                                                i36 *= iFld;
                                                switch (((int) ((l2 % 2) + 10))) {
                                                    case 10 :
                                                        Test.dFld -= Test.dFld;
                                                        iFld = i39;
                                                        Test.iArrFld[i38] += ((int) (f4));
                                                        i37 += i35;
                                                        s3 += ((short) (-506795223L));
                                                        i34 += i35;
                                                        break;
                                                    case 11 :
                                                        i37 += i40 | by3;
                                                        by3 = ((byte) (i36));
                                                        i37 -= iFld;
                                                        by3 += ((byte) (i34));
                                                        Test.instanceCount = i41;
                                                        i36 -= ((int) (Test.dFld));
                                                        i32 -= ((int) (1894111207L));
                                                        i32 = i31;
                                                        i36 += ((i40 * i34) + i38) - Test.instanceCount;
                                                        Test.instanceCount -= i39;
                                                        i39 = iFld;
                                                        lArr2[i40] = s3;
                                                        break;
                                                }
                                            } else if (Test.bFld) {
                                                i34 >>= i41;
                                                switch ((i38 % 4) + 114) {
                                                    case 114 :
                                                        i34 <<= 56798;
                                                        Test.dFld = l2;
                                                        i37 = by3;
                                                        i37 += ((i40 * i32) + i37) - i39;
                                                        Test.bFld = Test.bFld;
                                                        switch ((i38 % 5) + 60) {
                                                            case 60 :
                                                                by3 += ((byte) (i35));
                                                                iArr2 = iArr2;
                                                                i36 += i40 + i40;
                                                                break;
                                                            case 61 :
                                                                i39 |= i39;
                                                                break;
                                                            case 62 :
                                                            case 63 :
                                                            case 64 :
                                                                Test.instanceCount -= l2;
                                                                break;
                                                        }
                                                        break;
                                                    case 115 :
                                                        i36 *= i40;
                                                    case 116 :
                                                        lArr2 = lArr2;
                                                        break;
                                                    case 117 :
                                                        f4 += i40 * i40;
                                                        break;
                                                }
                                            } else if (Test.bFld) {
                                                i39 += 8 + (i40 * i40);
                                            }
                                            break;
                                        case 120 :
                                            try {
                                                Test.iArrFld[i38] = 31794 / iArr2[i40];
                                                i32 = i32 / i32;
                                                i34 = 9738 % i32;
                                            } catch (ArithmeticException a_e) {
                                            }
                                            break;
                                        case 140 :
                                            i39 <<= i33;
                                            break;
                                        case 115 :
                                            iFld = i36;
                                            break;
                                        case 106 :
                                            Test.instanceCount += ((i40 * i37) + i33) - i39;
                                            break;
                                        case 121 :
                                            by3 += ((byte) (2));
                                        case 131 :
                                            if (Test.bFld)
                                                break;

                                            break;
                                    }
                                case 60 :
                                    byArr[i40] = byArr[i38 - 1];
                                    break;
                                case 61 :
                                    sArr[((int) (l2))] *= ((short) (i39));
                                    break;
                                case 62 :
                                    i36 += i33;
                                    break;
                                case 63 :
                                    i34 = i38;
                                    break;
                            }
                            break;
                        case 79 :
                            i41 -= ((int) (1.207F));
                        default :
                            f4 += ((long) (i40)) | ((long) (i34));
                    }
                }
            }
        } while ((++i38) < 81 );
        FuzzerUtils.out.println((((("i31 i32 i33 = " + i31) + ",") + i32) + ",") + i33);
        FuzzerUtils.out.println((((("i34 i35 i36 = " + i34) + ",") + i35) + ",") + i36);
        FuzzerUtils.out.println((((("f4 by3 i37 = " + Float.floatToIntBits(f4)) + ",") + by3) + ",") + i37);
        FuzzerUtils.out.println((((("i38 l2 i39 = " + i38) + ",") + l2) + ",") + i39);
        FuzzerUtils.out.println((((("i40 i41 s3 = " + i40) + ",") + i41) + ",") + s3);
        FuzzerUtils.out.println((((("lArr2 bArr2 fArr = " + FuzzerUtils.checkSum(lArr2)) + ",") + FuzzerUtils.checkSum(bArr2)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println((((("sArr byArr iArr2 = " + FuzzerUtils.checkSum(sArr)) + ",") + FuzzerUtils.checkSum(byArr)) + ",") + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println((((("Test.instanceCount Test.bFld iFld = " + Test.instanceCount) + ",") + (Test.bFld ? 1 : 0)) + ",") + iFld);
        FuzzerUtils.out.println((((("Test.dFld Test.iArrFld Test.dArrFld = " + Double.doubleToLongBits(Test.dFld)) + ",") + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        {
            try {
                InetAddress ax$1 = null;
                for (int ax$0 = -662; ax$0 < (-662 + 1766); ax$0 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (ax$1.isLinkLocalAddress()) {
                        }
                    } catch (Throwable ax$2) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                {
                    final int ax$19 = i;
                    try {
                        int[] ax$10 = new int[]{ -161966591, -481247125 };
                        for (int ax$9 = -972; ax$9 < (-972 + 1171); ax$9 += 1) {
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                for (int ax$12 : ax$10) {
                                    long ax$13 = Integer.toUnsignedLong(ax$12);
                                    if ((ax$13 & 0xffffffff00000000L) != 0L) {
                                        i++;
                                    }
                                    int ax$14 = ((int) (ax$13 & 0xffffffffL));
                                    if (ax$14 != ax$12) {
                                        i++;
                                    }
                                }
                            } catch (Throwable ax$15) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                            Test.ax$3 = true;
                            _instance.mainTest(new String[]{ "s", "s", "s", "s" });
                            Test.ax$3 = false;
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                try {
                                    SortedSet ax$16 = new TreeSet(String.CASE_INSENSITIVE_ORDER);
                                    ax$16.tailSet(new Integer(0));
                                } catch (ClassCastException ax$17) {
                                }
                            } catch (Throwable ax$18) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                        }
                    } finally {
                        i = ax$19;
                    }
                }
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$3 = false;
}