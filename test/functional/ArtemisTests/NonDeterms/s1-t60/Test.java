// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 11L;

    public static volatile double dFld = -94.90979;

    public static float fFld = 0.717F;

    public static int iFld = 234;

    public static volatile short sFld = 10912;

    public static boolean bFld = false;

    public static double dFld1 = 0.11609;

    public static int iFld1 = 95;

    public static long[][] lArrFld = new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2544340543L);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i4, long l, int i5) {
        int i6 = 42508, i7 = 7, i8 = 182, i9 = 228, i10 = -23, i11 = 64, i12 = -40148, iArr[][] = new int[N][N];
        double d = 126.111240;
        float f = -48.863F, f1 = -69.915F;
        FuzzerUtils.init(iArr, 9);
        iArr = iArr;
        iArr[(i5 >>> 1) % N][(i4 >>> 1) % N] >>= (int) Test.instanceCount;
        if (Test.bFld) {
            iArr[(i5 >>> 1) % N][(i4 >>> 1) % N] = 4;
            for (i6 = 5; 96 > i6; i6++) {
                iArr[i6 + 1][i6 - 1] = -135;
                iArr[i6 - 1][i6 + 1] = 6;
                for (d = 1; d < 6; ++d) {
                    i8 += Test.iFld;
                    iArr[i6 - 1][i6 - 1] -= Test.iFld;
                    l = i4;
                    f = 1;
                    do {
                        i4 >>= i6;
                        Test.dFld = i7;
                    } while (++f < 2);
                    iArr[(int) (d)][i6] -= i6;
                    for (i9 = 2; i9 > d; i9 -= 3) {
                        Test.instanceCount -= i6;
                        Test.iFld = i9;
                        Test.bFld = true;
                        i5 += (((i9 * i6) + i6) - Test.iFld);
                    }
                    for (f1 = 1; f1 < 2; ++f1) {
                        Test.sFld += (short) f1;
                        i7 *= (int) Test.instanceCount;
                        Test.instanceCount >>= i6;
                        switch((int) (((f1 % 6) * 5) + 100)) {
                            case 116:
                                i4 -= i4;
                                i7 -= i5;
                                Test.iFld <<= 2273;
                                break;
                            case 130:
                                i5 += (int) l;
                                i10 = 10;
                                l += 106631323904986196L;
                                if (Test.bFld)
                                    break;
                                i8 -= i12;
                                i12 -= (int) Test.instanceCount;
                                iArr[i6 + 1][(int) (f1)] -= i4;
                                Test.fFld += i6;
                                Test.sFld *= (short) i8;
                                break;
                            case 128:
                                if (Test.bFld)
                                    break;
                                break;
                            case 126:
                                Test.iFld <<= Test.iFld;
                                break;
                            case 107:
                                Test.fFld = i9;
                                break;
                            case 106:
                                Test.instanceCount >>= i8;
                                break;
                            default:
                                iArr[i6 - 1][(int) (f1 - 1)] += (int) Test.instanceCount;
                        }
                    }
                }
            }
        }
        long meth_res = i4 + l + i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + Float.floatToIntBits(f) + i9 + i10 + Float.floatToIntBits(f1) + i11 + i12 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth() {
        int i2 = 142, i3 = -37599, i13 = 0, i14 = 143, i15 = -22033, i16 = 134, i17 = -138, i18 = -1, i19 = -19182, iArr1[] = new int[N];
        byte by1 = 12;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, -7585355052858576957L);
        FuzzerUtils.init(iArr1, -19062);
        for (i2 = 9; i2 < 158; ++i2) {
            Test.sFld += (short) i2;
            Test.instanceCount += i2;
            Test.iFld -= Math.abs(Integer.reverseBytes(231) - (Test.sFld--));
            i3 ^= (i3 >>= iMeth1(i2, Test.instanceCount, Test.iFld));
        }
        for (long l1 : lArr) {
            for (i13 = 1; i13 < 2; i13 += 2) {
                i14 ^= i14;
                l1 += (((i13 * i13) + i2) - i14);
                if (Test.bFld)
                    break;
            }
            for (i15 = 1; i15 < 2; i15++) {
                if (i13 != 0) {
                }
                Test.instanceCount *= Test.instanceCount;
                i17 *= (int) Test.fFld;
                Test.iFld = (int) l1;
                i16 = (int) l1;
                i18 = 1;
                do {
                    switch(((i15 % 6) * 5) + 19) {
                        case 41:
                            Test.iFld = (int) Test.instanceCount;
                            iArr1[i18] >>>= i14;
                            switch(((-13797 >>> 1) % 7) + 71) {
                                case 71:
                                    Test.fFld *= by1;
                                    if (i14 != 0) {
                                    }
                                    i14 -= i13;
                                    switch((i15 % 2) + 17) {
                                        case 17:
                                            iArr1[i18 + 1] = i2;
                                            i17 += (i18 ^ i16);
                                            iArr1[i18] *= (int) Test.instanceCount;
                                            switch(((i18 % 1) * 5) + 93) {
                                                case 94:
                                                    i17 += (i18 * i18);
                                                    Test.iFld += (i18 | i15);
                                                    Test.bFld = Test.bFld;
                                                    i16 += (int) Test.dFld;
                                                    i14 -= (int) Test.fFld;
                                                    Test.dFld += i19;
                                                    try {
                                                        Test.iFld = (i16 % -44707);
                                                        i14 = (i3 % 82);
                                                        i16 = (29618 / i18);
                                                    } catch (ArithmeticException a_e) {
                                                    }
                                                    by1 = (byte) 60145;
                                                    break;
                                                default:
                                                    Test.instanceCount = -151L;
                                            }
                                            break;
                                        case 18:
                                            l1 = Test.instanceCount;
                                            break;
                                        default:
                                            Test.iFld = 6;
                                    }
                                    break;
                                case 72:
                                    lArr[i15] += i15;
                                    break;
                                case 73:
                                    iArr1[i15 - 1] /= (int) (i14 | 1);
                                    break;
                                case 74:
                                    i16 = i19;
                                case 75:
                                    Test.dFld = i3;
                                    break;
                                case 76:
                                    i14 &= i19;
                                    break;
                                case 77:
                            }
                            break;
                        case 20:
                            i16 *= 10;
                            break;
                        case 39:
                            Test.instanceCount += (((i18 * Test.sFld) + l1) - Test.instanceCount);
                            break;
                        case 23:
                            Test.instanceCount &= i2;
                        case 28:
                            i19 = i3;
                            break;
                        case 46:
                            Test.sFld += (short) i18;
                            break;
                        default:
                            by1 += (byte) (81 + (i18 * i18));
                    }
                } while (++i18 < 2);
            }
        }
        long meth_res = i2 + i3 + i13 + i14 + i15 + i16 + i17 + i18 + by1 + i19 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth() {
        int i = -12307, i1 = -125, i20 = -6, i21 = 39037, i22 = -42697, i23 = -5, i24 = 17984, i25 = -195, i26 = 217, i27 = -3, i28 = -199, i29 = 7, iArr2[] = new int[N];
        short s = -3430;
        byte by = -28;
        float f2 = -2.428F;
        long l2 = -4181354914L;
        FuzzerUtils.init(iArr2, 120);
        for (i = 9; i < 252; i++) {
            i1 += ((--i1) - (Math.min(i, i) + (s - -7875)));
            Test.dFld *= ((s--) + by);
        }
        Test.fFld = (((Test.iFld - i) - iMeth()) - i1);
        for (i20 = 3; i20 < 156; i20++) {
            i21 = Test.iFld;
            for (i22 = 4; i22 > i20; i22 -= 2) {
                i21 += (i22 * i22);
                Test.fFld = i22;
            }
            f2 = 1;
            while (++f2 < 4) {
                Test.fFld += (float) Test.dFld;
            }
            for (i24 = 4; i24 > i20; --i24) {
                i21 >>= i21;
                for (i26 = 1; i26 > 1; --i26) {
                    i25 >>= (int) Test.instanceCount;
                    i21 |= Test.iFld;
                    try {
                        Test.iFld = (61218 % i23);
                        i21 = (i20 % 61);
                        i27 = (iArr2[i26 + 1] % -23);
                    } catch (ArithmeticException a_e) {
                    }
                    l2 <<= i22;
                    iArr2[i26] ^= i20;
                    l2 -= (long) 1.414F;
                    i27 *= -21;
                    try {
                        i23 = (Test.iFld / 29319);
                        i1 = (i / -17937);
                        iArr2[i20 + 1] = (i20 % 58234);
                    } catch (ArithmeticException a_e) {
                    }
                    Test.instanceCount = -58153;
                    Test.iFld += 14;
                }
                switch((i20 % 1) + 93) {
                    case 93:
                        Test.lArrFld[i24][i20] >>= Test.instanceCount;
                        Test.fFld += i21;
                        by += (byte) i24;
                        for (i28 = 1; 1 > i28; ++i28) {
                            try {
                                Test.iFld = (i / iArr2[i28 - 1]);
                                i25 = (11713 % i27);
                                Test.iFld = (iArr2[i20] % i21);
                            } catch (ArithmeticException a_e) {
                            }
                            l2 *= -76;
                            Test.iFld = Test.iFld;
                            Test.instanceCount *= 36664L;
                            i21 = i;
                            try {
                                i25 = (243 % i1);
                                i27 = (i / -25805);
                                i29 = (248 % i22);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.lArrFld[i28][i24 - 1] >>>= i25;
                            Test.instanceCount >>>= 114;
                        }
                        break;
                }
            }
        }
        vMeth_check_sum += i + i1 + s + by + i20 + i21 + i22 + i23 + Float.floatToIntBits(f2) + i24 + i25 + i26 + i27 + l2 + i28 + i29 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {
        int i30 = 45168, i31 = 13, i32 = 11, i33 = -1, i34 = 11, i35 = -34856, i36 = 3805, i37 = 5, i38 = -8, iArr3[] = new int[N];
        byte by2 = -39;
        float[][] fArr = new float[N][N];
        boolean[] bArr = new boolean[N];
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr3, -13);
        FuzzerUtils.init(fArr, 2.829F);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(dArr, 106.97414);
        vMeth();
        for (i30 = 5; i30 < 226; ++i30) {
            i31 = -22420;
            Test.fFld = i31;
            if (Test.bFld)
                continue;
            Test.fFld = i30;
            i31 /= (int) (i31 | 1);
            i32 = 1;
            while (++i32 < 23) {
                Test.iFld += (int) Test.instanceCount;
                Test.instanceCount += i32;
            }
            for (i33 = i30; i33 < 23; ++i33) {
                switch(((i32 >>> 1) % 10) + 76) {
                    case 76:
                        i34 += i33;
                        Test.fFld = -5;
                        if (Test.bFld)
                            break;
                        for (i35 = 1; i35 < 1; ++i35) {
                            i34 += i35;
                            iArr3[i35 + 1] -= (int) 0L;
                            Test.dFld += i33;
                            Test.bFld = true;
                            Test.instanceCount += (((i35 * Test.instanceCount) + i31) - i30);
                            try {
                                iArr3[i35 - 1] = (i34 % -357596045);
                                iArr3[i30] = (-31488 % iArr3[i33 + 1]);
                                iArr3[i33 - 1] = (i30 % i36);
                            } catch (ArithmeticException a_e) {
                            }
                            Test.fFld += i35;
                            by2 -= (byte) i31;
                            if (Test.bFld)
                                continue;
                            iArr3[i33] += (int) Test.fFld;
                            i36 += (i35 * i35);
                            i34 += i34;
                            Test.fFld = i33;
                        }
                        Test.instanceCount += i33;
                        iArr3[i30 + 1] = 43283;
                        iArr3[i30 - 1] += i34;
                        break;
                    case 77:
                        i37 = 1;
                        do {
                            i31 = Test.sFld;
                            Test.instanceCount = i31;
                            Test.dFld = i37;
                            if (Test.bFld)
                                continue;
                            Test.iFld = 76;
                            switch((i30 % 4) + 77) {
                                case 77:
                                    i31 = (int) Test.fFld;
                                    if (Test.bFld)
                                        break;
                                case 78:
                                    Test.iFld >>= i37;
                                    if (false)
                                        break;
                                    Test.iFld += (i37 * i37);
                                    i36 -= i34;
                                    try {
                                        Test.iFld = (493616617 / iArr3[i37]);
                                        i36 = (2011 % i30);
                                        i31 = (i35 / iArr3[i33 - 1]);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    Test.bFld = Test.bFld;
                                    try {
                                        i34 = (i32 % 40090);
                                        i36 = (i35 / 24);
                                        i36 = (i35 / 229);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    fArr[i30][i33] = i34;
                                    iArr3 = FuzzerUtils.int1array(N, (int) -1);
                                case 79:
                                    i34 -= (int) Test.instanceCount;
                                    i36 += (i37 + i32);
                                    Test.fFld *= -8902;
                                    Test.instanceCount += i31;
                                    switch((((-234 >>> 1) % 3) * 5) + 36) {
                                        case 39:
                                            i34 += (((i37 * Test.instanceCount) + Test.sFld) - i35);
                                            Test.instanceCount -= (long) Test.fFld;
                                            Test.iFld = (int) Test.instanceCount;
                                            Test.instanceCount += (i37 - i35);
                                            Test.iFld *= (int) Test.instanceCount;
                                            iArr3 = FuzzerUtils.int1array(N, (int) 0);
                                            Test.fFld += by2;
                                            i31 = i32;
                                            switch((i30 % 5) + 119) {
                                                case 119:
                                                    iArr3[i37 - 1] = (int) Test.dFld;
                                                    if (Test.bFld)
                                                        break;
                                                    i34 = (int) Test.instanceCount;
                                                    bArr[i30 + 1] = Test.bFld;
                                                    i36 += (int) Test.dFld1;
                                                    i31 *= (int) -88.993F;
                                                    break;
                                                case 120:
                                                    Test.iFld += (int) Test.instanceCount;
                                                    i38 = i33;
                                                    dArr[i30] = i33;
                                                    Test.instanceCount = Test.iFld;
                                                    Test.fFld = Test.iFld;
                                                    break;
                                                case 121:
                                                    Test.lArrFld[i30 - 1][i33] >>= by2;
                                                    break;
                                                case 122:
                                                case 123:
                                                    i31 |= Test.iFld1;
                                                    break;
                                            }
                                        case 40:
                                            i36 += (i37 + i31);
                                            break;
                                        case 37:
                                            i31 += (((i37 * i34) + i33) - Test.iFld);
                                            break;
                                        default:
                                            Test.fFld = Test.iFld;
                                    }
                                    break;
                                case 80:
                                    i38 += (i37 + i31);
                                    break;
                                default:
                                    Test.instanceCount = i38;
                            }
                        } while (++i37 < 1);
                        break;
                    case 78:
                    case 79:
                        Test.instanceCount = Test.sFld;
                        break;
                    case 80:
                        Test.iFld1 += (i33 * i37);
                        break;
                    case 81:
                        iArr3[i33 - 1] *= i30;
                        break;
                    case 82:
                        iArr3[i33] = (int) 6945602826300237744L;
                    case 83:
                        Test.iFld1 -= Test.iFld;
                        break;
                    case 84:
                        try {
                            Test.iFld = (Test.iFld / -7);
                            i38 = (64331 % iArr3[(Test.iFld >>> 1) % N]);
                            i31 = (i31 / -247);
                        } catch (ArithmeticException a_e) {
                        }
                    case 85:
                        iArr3[(-25 >>> 1) % N] *= (int) Test.fFld;
                }
            }
            {
                java.io.PrintStream ax$6 = System.out;
                java.io.PrintStream ax$7 = System.err;
                java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$8);
                System.setErr(ax$8);
                try {
                    for (int ax$4 = -534; ax$4 < 7318; ax$4 += 1) {
                        int ax$2 = i31;
                        try {
                            short[] ax$1 = new short[] { 20, 10, 0, -10, -20 };
                            short[] ax$0 = new short[] { 20, 10, 0, -10, -20 };
                            ax$1[i31 + 0] = (short) (ax$0[i31 + 0] << 0);
                            ax$1[i31 + 1] = (short) (ax$0[i31 + 1] << 1);
                            ax$1[i31 + 2] = (short) (ax$0[i31 + 2] << 2);
                            ax$1[i31 + 3] = (short) (ax$0[i31 + 3] << 3);
                        } catch (Throwable ax$3) {
                        } finally {
                            i31 = ax$2;
                        }
                    }
                } catch (Throwable ax$5) {
                }
                System.setOut(ax$6);
                System.setErr(ax$7);
            }
        }
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 by2 i37 = " + i36 + "," + by2 + "," + i37);
        FuzzerUtils.out.println("i38 iArr3 fArr = " + i38 + "," + FuzzerUtils.checkSum(iArr3) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("bArr dArr = " + FuzzerUtils.checkSum(bArr) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld Test.sFld Test.bFld = " + Test.iFld + "," + Test.sFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld1 Test.iFld1 Test.lArrFld = " + Double.doubleToLongBits(Test.dFld1) + "," + Test.iFld1 + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
