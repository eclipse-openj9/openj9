// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.RandomAccessFile;
import java.math.BigInteger;
import java.net.ServerSocket;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousChannelGroup;
import java.nio.channels.AsynchronousCloseException;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.CompletionHandler;
import java.security.cert.CertificateException;
import java.security.spec.ECFieldFp;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -9L;

    public static int iFld = -2;

    public static short sFld = -3801;

    public static int iFld1 = -148;

    public static byte byFld = 5;

    public static int iFld2 = -184;

    public double dFld = 104.15625;

    public static float fFld = 2.544F;

    public static float fArrFld[] = new float[N];

    public static int iArrFld[] = new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -112.89F);
        FuzzerUtils.init(Test.iArrFld, -27);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i1, long l) {
        if (Test.ax$0) {
            Map<Object, Object> ax$1 = null;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$1.clear();
            } catch (Throwable ax$2) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return -1171455071;
        }
        int i2 = -73;
        int i3 = -97;
        int i4 = -4;
        int i5 = -26573;
        int i6 = -24;
        int i7 = 253;
        int i8 = -96;
        int i9 = -37112;
        int iArr[] = new int[N];
        int iArr1[] = new int[N];
        double d = 0.832;
        float f1 = -101.468F;
        long lArr1[] = new long[N];
        boolean bArr[] = new boolean[N];
        FuzzerUtils.init(iArr, -184);
        FuzzerUtils.init(iArr1, -33962);
        FuzzerUtils.init(lArr1, -10597L);
        FuzzerUtils.init(bArr, true);
        for (i2 = 1; i2 < 146; ++i2) {
            switch ((((i1 >>> 1) % 7) * 5) + 117) {
                case 136 :
                    for (i4 = 1; 4 > i4; ++i4) {
                        iArr = FuzzerUtils.int1array(N, ((int) (-11)));
                    }
                    i5 = 91;
                    i5 %= ((int) (Test.iFld | 1));
                    if (i3 != 0) {
                    }
                    Test.iFld = ((int) (l));
                    iArr1[i2 - 1] >>>= i1;
                    break;
                case 122 :
                    lArr1[i2 + 1] = 14;
                    iArr1[i2] /= ((int) (i1 | 1));
                    d = i5;
                    for (i6 = 1; 4 > i6; i6 += 3) {
                        iArr1 = FuzzerUtils.int1array(N, ((int) (-37852)));
                        i3 <<= i5;
                        if (Test.iFld1 != 0) {
                        }
                        for (i8 = 1; i8 < 4; ++i8) {
                            boolean b2 = true;
                            i1 -= 1;
                            i1 = Test.iFld1;
                            i9 <<= i6;
                            Test.iFld = Test.sFld;
                            if (b2)
                                break;

                            d -= 0.70489;
                            Test.iFld1 = -6;
                            i9 += Test.byFld;
                            if (b2) {
                                Test.sFld = ((short) (f1));
                            } else if (b2) {
                                i1 += 8;
                            } else {
                                Test.byFld <<= ((byte) (-23246));
                                i7 |= Test.iFld2;
                                i1 -= i9;
                                switch (((i8 % 2) * 5) + 36) {
                                    case 44 :
                                        l = Test.iFld;
                                        i1 += -2;
                                        bArr[i2] = false;
                                        i1 <<= i1;
                                        f1 += f1;
                                        break;
                                    case 43 :
                                        if (b2)
                                            continue;

                                }
                            }
                        }
                    }
                case 134 :
                    Test.iFld -= ((int) (f1));
                    break;
                case 123 :
                    i7 = ((int) (f1));
                    break;
                case 130 :
                    Test.iFld2 >>= Test.iFld1;
                    break;
                case 126 :
                    Test.iFld2 = ((int) (f1));
                case 127 :
                    iArr[i2 + 1] = ((int) (Test.instanceCount));
                    break;
                default :
                    l <<= i7;
            }
        }
        long meth_res = ((((((((((((((i1 + l) + i2) + i3) + i4) + i5) + Double.doubleToLongBits(d)) + i6) + i7) + i8) + i9) + Float.floatToIntBits(f1)) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(lArr1)) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static void vMeth1(float f, boolean b1) {
        if (Test.ax$41) {
            BigInteger ax$42 = new BigInteger("00");
            ECFieldFp ax$43 = null;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                if (ax$42.equals(ax$43.getP()) == false) {
                }
            } catch (Throwable ax$44) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return;
        }
        double d1 = -2.44142;
        int i10 = -34;
        int i11 = -9;
        int i12 = -54;
        int i13 = 61;
        int i14 = -3;
        int i15 = 11;
        int i16 = -228;
        int i17 = 44817;
        int i18 = 58134;
        int i19 = 8;
        int iArr2[] = new int[N];
        int iArr3[] = new int[N];
        long l1 = 412656075L;
        long lArr[] = new long[N];
        float fArr[] = new float[N];
        FuzzerUtils.init(lArr, -1102453186942576462L);
        FuzzerUtils.init(fArr, 0.312F);
        FuzzerUtils.init(iArr2, 5);
        FuzzerUtils.init(iArr3, 22816);
        Test.iFld *= ((int) (lArr[(Test.iFld >>> 1) % N] - Test.instanceCount));
        Test.iFld *= Test.iFld;
        Test.sFld *= ((short) (Math.min(((int) ((-23704566L) + (Test.instanceCount * f))), Math.abs(Test.iFld)) * ((f = Test.iFld) * (Test.instanceCount >>> (-11)))));
        {
            final int ax$11 = i19;
            final float ax$12 = Test.fFld;
            try {
                int[] ax$4 = new int[]{ -1526777058, 786325166, -261945326, 727354210, 971629028, -731830750 };
                float[] ax$6 = new float[]{ 0.42933643F, 0.06987262F, 0.6272022F };
                float[] ax$9 = new float[16];
                for (int ax$3 = -460; ax$3 < (-460 + 9300); ax$3 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$4[0] = 3;
                    } catch (Throwable ax$5) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    iMeth(-259319160, -910093891684782308L);
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$9[i19] = ax$6[i19] * fFld;
                    } catch (Throwable ax$10) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i19 = ax$11;
                Test.fFld = ax$12;
            }
        }
        Test.instanceCount |= ((-iMeth(Test.iFld, Test.instanceCount)) - Test.instanceCount) * Test.iFld;
        Test.iFld2 = 18;
        d1 = 82;
        while ((d1 -= 3) > 0) {
            Test.iFld = Test.iFld2;
            Test.iFld = Test.iFld2;
            if (b1)
                break;

            Test.iFld += ((int) (f));
            fArr[((int) (d1))] += Test.instanceCount;
            Test.iFld = ((int) (f));
            Test.iFld += ((int) (((d1 * Test.iFld) + Test.iFld) - Test.iFld2));
            iArr2 = iArr3;
            Test.iFld1 += Test.iFld2;
            for (i10 = 1; 18 > i10; i10++) {
                lArr[i10] -= i10;
                Test.iFld2 += i10 * Test.instanceCount;
                iArr3[((int) (d1 + 1))] -= Test.byFld;
            }
        }
        for (i12 = 221; 4 < i12; i12 -= 2) {
            iArr2[i12 - 1] -= ((int) (f));
            for (i14 = 1; 5 > i14; ++i14) {
                Test.sFld = ((short) (i13));
                switch ((i14 % 2) + 77) {
                    case 77 :
                        for (i16 = 1; 2 > i16; i16++) {
                            Test.iFld2 += 61164;
                            Test.iFld1 += Test.byFld;
                        }
                        for (i18 = 1; i18 < 2; ++i18) {
                            i13 += i19;
                            iArr2[i14] += Test.iFld1;
                            switch ((i14 % 9) + 20) {
                                case 20 :
                                    Test.iFld1 -= ((int) (d1));
                                    break;
                                case 21 :
                                    Test.iFld ^= -46;
                                    i17 += ((i18 * Test.instanceCount) + f) - i19;
                                    i15 += i11;
                                    iArr3[i12] += ((int) (l1));
                                    f += i18;
                                    break;
                                case 22 :
                                    i17 += ((int) (l1));
                                case 23 :
                                    if (i16 != 0) {
                                        vMeth1_check_sum += ((((((((((((((((Float.floatToIntBits(f) + (b1 ? 1 : 0)) + Double.doubleToLongBits(d1)) + i10) + i11) + i12) + i13) + i14) + i15) + i16) + i17) + i18) + i19) + l1) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(iArr3);
                                        return;
                                    }
                                    break;
                                case 24 :
                                    i19 >>= Test.iFld2;
                                case 25 :
                                    iArr3[i18 - 1] = i15;
                                case 26 :
                                    Test.sFld += ((short) (i18 * i18));
                                    break;
                                case 27 :
                                    Test.iFld += -217;
                                    break;
                                case 28 :
                                    i11 += ((int) (115.48F));
                                default :
                                    Test.iFld >>>= i11;
                            }
                        }
                    case 78 :
                    default :
                        l1 = Test.iFld;
                }
            }
        }
        vMeth1_check_sum += ((((((((((((((((Float.floatToIntBits(f) + (b1 ? 1 : 0)) + Double.doubleToLongBits(d1)) + i10) + i11) + i12) + i13) + i14) + i15) + i16) + i17) + i18) + i19) + l1) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(iArr3);
    }

    public static void vMeth(int i) {
        if (Test.ax$24) {
            final int ax$30 = Test.iFld2;
            int[] ax$25 = new int[]{ -270970941, 716870952, 2045139182, -320616264, 1442462190, 1784070288 };
            int[] ax$26 = new int[]{ 1909465937 };
            int[] ax$28 = new int[]{ 1592513367, 557273207, 1263338569, -211010969, -801840110, 1915935837, -768447374, 1409655385 };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$28[iFld2] = ((int) (ax$25[iFld2] + ax$26[iFld2]));
            } catch (Throwable ax$29) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iFld2 = ax$30;
            return;
        }
        boolean b = false;
        short s = 13238;
        float f2 = 0.936F;
        float f3 = 2.761F;
        int i20 = 173;
        int i21 = -9;
        int i22 = 14;
        int i23 = 4678;
        int i24 = 29006;
        int i25 = 252;
        int iArr4[][] = new int[N][N];
        double d2 = -30.36599;
        FuzzerUtils.init(iArr4, -8);
        b = b = true;
        i -= (i -= s % (i | 1)) * (--i);
        {
            final boolean ax$57 = b;
            try {
                CountDownLatch ax$47 = new CountDownLatch(1000);
                AsynchronousSocketChannel ax$49 = null;
                AsynchronousChannelGroup ax$50 = null;
                File ax$54 = null;
                RandomAccessFile ax$55 = null;
                for (int ax$45 = -29; ax$45 < (-29 + 14386); ax$45 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ByteBuffer ax$51 = ByteBuffer.allocate(100);
                        ax$49.read(ax$51, ((Void) (null)), new CompletionHandler<Integer, Void>() {
                            public void completed(Integer bytesRead, Void att) {
                            }

                            public void failed(Throwable exc, Void att) {
                                if (!(exc instanceof AsynchronousCloseException));
                                ax$47.countDown();
                            }
                        });
                        try {
                            if (b) {
                                ax$49.close();
                            }
                            if (b) {
                                ax$50.shutdownNow();
                            }
                            ax$47.countDown();
                        } catch (IOException ax$52) {
                        }
                    } catch (Throwable ax$53) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$41 = true;
                    vMeth1(0.8642772F, false);
                    Test.ax$41 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$55 = new RandomAccessFile(ax$54, "r");
                    } catch (Throwable ax$56) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                b = ax$57;
            }
        }
        vMeth1(-2.377F, false);
        Test.instanceCount = Test.iFld1;
        f2 = 1;
        while ((++f2) < 228) {
            Test.iFld1 += ((int) (Test.instanceCount));
            if (Test.iFld != 0) {
                vMeth_check_sum += (((((((((((i + (b ? 1 : 0)) + s) + Float.floatToIntBits(f2)) + i20) + i21) + i22) + i23) + i24) + i25) + Double.doubleToLongBits(d2)) + Float.floatToIntBits(f3)) + FuzzerUtils.checkSum(iArr4);
                return;
            }
            Test.iFld = Test.iFld2;
            Test.iFld2 *= Test.iFld;
            if (true) {
                for (i20 = 1; i20 < 3; i20++) {
                    Test.iFld1 = Test.iFld1;
                    iArr4[i20 + 1][((int) (f2 + 1))] = ((int) (Test.instanceCount));
                    Test.iFld += -61;
                    for (i22 = 2; i22 > 1; i22 -= 2) {
                        if (b)
                            break;

                        Test.iFld2 *= i20;
                        Test.byFld = ((byte) (f2));
                        iArr4[i22 + 1][i20 + 1] = ((int) (Test.instanceCount));
                    }
                    for (i24 = 1; i24 < 2; ++i24) {
                        d2 = Test.iFld2;
                        i21 += i24 * i24;
                        Test.iFld2 = ((int) (d2));
                        if (Test.iFld2 != 0) {
                            vMeth_check_sum += (((((((((((i + (b ? 1 : 0)) + s) + Float.floatToIntBits(f2)) + i20) + i21) + i22) + i23) + i24) + i25) + Double.doubleToLongBits(d2)) + Float.floatToIntBits(f3)) + FuzzerUtils.checkSum(iArr4);
                            return;
                        }
                        Test.iFld1 = ((int) (Test.instanceCount));
                        Test.iFld1 = 3;
                        if (b)
                            break;

                        Test.iFld1 = i24;
                        Test.instanceCount = i20;
                        f3 -= Test.iFld;
                        Test.fArrFld[((int) (f2))] = i20;
                        Test.iFld1 = ((int) (d2));
                    }
                    Test.instanceCount <<= Test.instanceCount;
                    Test.iFld2 = 35;
                    iArr4[i20] = FuzzerUtils.int1array(N, ((int) (-152)));
                    Test.instanceCount = i23;
                }
            } else if (b) {
                i23 += ((int) (f2 - Test.sFld));
            }
        }
        vMeth_check_sum += (((((((((((i + (b ? 1 : 0)) + s) + Float.floatToIntBits(f2)) + i20) + i21) + i22) + i23) + i24) + i25) + Double.doubleToLongBits(d2)) + Float.floatToIntBits(f3)) + FuzzerUtils.checkSum(iArr4);
    }

    public void mainTest(String[] strArr1) {
        double d3 = 2.122515;
        double d4 = 59.49047;
        int i26 = -53609;
        int i27 = -84;
        int i28 = -25579;
        int i29 = -251;
        int i30 = 34852;
        int i31 = -90;
        boolean b3 = false;
        float f4 = -78.991F;
        long lArr2[] = new long[N];
        FuzzerUtils.init(lArr2, 201L);
        {
            final int ax$39 = i30;
            final int ax$40 = i26;
            try {
                int[] ax$33 = new int[]{ 5, 4, 1, 9, 10, 2, 7, 6, 3, 8 };
                ServerSocket ax$37 = null;
                for (int ax$31 = -100; ax$31 < (-100 + 14939); ax$31 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$35 = 0; ax$35 < ax$33.length; ax$35++) {
                            i30 += ax$33[i26];
                            i26 = ax$35;
                        }
                    } catch (Throwable ax$36) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$24 = true;
                    vMeth(1444200115);
                    Test.ax$24 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$37.setSoTimeout(2);
                        ax$37.accept();
                    } catch (Throwable ax$38) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i30 = ax$39;
                i26 = ax$40;
            }
        }
        vMeth(Test.iFld);
        for (d3 = 9; d3 < 222; d3++) {
            dFld /= Test.iFld | 1;
            Test.iFld1 -= i26;
            for (i27 = ((int) (d3)); i27 < 24; i27++) {
                if (b3)
                    break;

                for (i29 = 1; i29 < 1; i29++) {
                    i30 *= ((int) (dFld));
                    Test.fFld *= i28;
                    Test.iFld2 = Test.iFld1;
                    Test.iFld2 -= i29;
                    Test.instanceCount += i29;
                    Test.fFld = i26;
                    Test.iFld2 += -2;
                    Test.iFld += ((int) (Test.instanceCount));
                    switch (((int) ((d3 % 8) + 1))) {
                        case 1 :
                            Test.instanceCount = i30;
                            i28 = Test.iFld2;
                            Test.fFld %= ((long) (d3)) | 1;
                            i26 += ((int) (3.337F + (i29 * i29)));
                            Test.fFld = Test.instanceCount;
                            Test.fFld = Test.byFld;
                            Test.iArrFld[(i29 >>> 1) % N] <<= Test.iFld2;
                            i28 >>= Test.iFld;
                            Test.iFld2 = i28;
                            Test.iFld = Test.iFld1;
                            Test.iFld += i29;
                            Test.fFld += Test.fFld;
                            Test.iFld2 *= i31;
                            break;
                        case 2 :
                            Test.fArrFld[((int) (d3))] *= -22;
                            Test.iFld += ((int) (54148L + (i29 * i29)));
                            Test.instanceCount += i29 ^ i31;
                            i26 -= Test.iFld1;
                            lArr2[i27] >>= -775;
                            i26 = i27;
                            i31 = 58097;
                            i30 = Test.iFld2;
                            i28 -= Test.iFld1;
                            Test.instanceCount += Test.iFld2;
                            i26 %= ((int) (Test.instanceCount | 1));
                            i28 = -9;
                            break;
                        case 3 :
                            i28 >>= 158;
                            if (b3)
                                continue;

                            Test.instanceCount += i29 ^ Test.instanceCount;
                            switch ((i29 % 8) + 14) {
                                case 14 :
                                    Test.instanceCount *= -42958;
                                    try {
                                        i31 = Test.iArrFld[i29 + 1] % Test.iFld2;
                                        Test.iArrFld[i29 + 1] = Test.iFld1 % Test.iFld1;
                                        Test.iArrFld[i27] = 190 % i31;
                                    } catch (ArithmeticException a_e) {
                                    }
                                    break;
                                case 15 :
                                    i30 = ((int) (Test.instanceCount));
                                case 16 :
                                    Test.instanceCount += i29 * Test.instanceCount;
                                    Test.instanceCount *= 74;
                                    break;
                                case 17 :
                                case 18 :
                                    Test.fFld = ((float) (dFld));
                                    break;
                                case 19 :
                                    i30 -= ((int) (6115960628463159978L));
                                    if (b3)
                                        break;

                                    switch (((int) ((d3 % 2) + 107))) {
                                        case 107 :
                                            try {
                                                i30 = 141 / i28;
                                                Test.iFld2 = Test.iArrFld[i27] / Test.iFld;
                                                Test.iFld2 = (-796) / Test.iFld1;
                                            } catch (ArithmeticException a_e) {
                                            }
                                            Test.iFld1 = i26;
                                            Test.iFld2 -= -82;
                                            break;
                                        case 108 :
                                            Test.iArrFld = Test.iArrFld;
                                            break;
                                    }
                                    Test.iArrFld[i27] -= 15729;
                                    Test.byFld = ((byte) (Test.instanceCount));
                                    Test.byFld *= ((byte) (-195));
                                    Test.iFld1 -= Test.sFld;
                                    if (b3) {
                                        i30 = 27;
                                        Test.instanceCount += 5L + (i29 * i29);
                                    } else if (false) {
                                        Test.instanceCount += i29 * i29;
                                        switch (((int) ((d3 % 3) + 51))) {
                                            case 51 :
                                                i31 -= i30;
                                                {
                                                    final boolean ax$22 = b3;
                                                    final long ax$23 = Test.instanceCount;
                                                    try {
                                                        Exception ax$19 = new Exception();
                                                        CertificateException ax$20 = new CertificateException();
                                                        boolean ax$14 = false;
                                                        for (int ax$13 = -13; ax$13 < (-13 + 2620); ax$13 += 1) {
                                                            Test.AxOutputRedirectionHelper.redirect();
                                                            try {
                                                                if (instanceCount != instanceCount) {
                                                                    b3 = true;
                                                                }
                                                            } catch (Throwable ax$18) {
                                                            } finally {
                                                            }
                                                            Test.AxOutputRedirectionHelper.recover();
                                                            if (!ax$14) {
                                                                i28 = Test.iFld;
                                                                ax$14 = true;
                                                            }
                                                            Test.AxOutputRedirectionHelper.redirect();
                                                            try {
                                                                if (!ax$20.getCause().equals(ax$19)) {
                                                                }
                                                            } catch (Throwable ax$21) {
                                                            } finally {
                                                            }
                                                            Test.AxOutputRedirectionHelper.recover();
                                                        }
                                                    } finally {
                                                        b3 = ax$22;
                                                        Test.instanceCount = ax$23;
                                                    }
                                                }
                                                Test.fFld = -38.516F;
                                                i30 += ((int) (Test.instanceCount));
                                                b3 = b3;
                                                Test.instanceCount >>= 17;
                                                if (b3)
                                                    continue;

                                                i26 &= ((int) (Test.instanceCount));
                                                break;
                                            case 52 :
                                                lArr2[((int) (d3))] -= -7;
                                                break;
                                            case 53 :
                                                i30 <<= i30;
                                                break;
                                            default :
                                                f4 *= Test.iFld2;
                                        }
                                    } else {
                                        dFld *= i29;
                                    }
                                    break;
                                case 20 :
                                    if (b3)
                                        break;

                                    break;
                                case 21 :
                                    Test.iArrFld[((int) (d3))] = i29;
                            }
                            break;
                        case 4 :
                            Test.byFld = ((byte) (d4));
                        case 5 :
                            i30 = ((int) (Test.fFld));
                            break;
                        case 6 :
                            Test.iFld += ((int) (Test.instanceCount));
                            break;
                        case 7 :
                            i30 += ((i29 * Test.iFld1) + f4) - Test.iFld2;
                            break;
                        case 8 :
                            Test.iFld1 = Test.byFld;
                            break;
                    }
                }
            }
        }
        FuzzerUtils.out.println((((("d3 i26 i27 = " + Double.doubleToLongBits(d3)) + ",") + i26) + ",") + i27);
        FuzzerUtils.out.println((((("i28 b3 i29 = " + i28) + ",") + (b3 ? 1 : 0)) + ",") + i29);
        FuzzerUtils.out.println((((("i30 i31 f4 = " + i30) + ",") + i31) + ",") + Float.floatToIntBits(f4));
        FuzzerUtils.out.println((("d4 lArr2 = " + Double.doubleToLongBits(d4)) + ",") + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println((((("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount) + ",") + Test.iFld) + ",") + Test.sFld);
        FuzzerUtils.out.println((((("Test.iFld1 Test.byFld Test.iFld2 = " + Test.iFld1) + ",") + Test.byFld) + ",") + Test.iFld2);
        FuzzerUtils.out.println((((("dFld Test.fFld Test.fArrFld = " + Double.doubleToLongBits(dFld)) + ",") + Float.floatToIntBits(Test.fFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$24 = false;

    static Boolean ax$41 = false;
}