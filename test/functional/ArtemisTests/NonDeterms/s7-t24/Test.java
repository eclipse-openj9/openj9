// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -2921556207443435444L;

    public static float fFld = -18.785F;

    public int iFld = 0;

    public double dFld = -1.6078;

    public byte byFld = 54;

    public boolean bFld = true;

    public static volatile float fFld1 = 0.645F;

    public static volatile double dArrFld[] = new double[N];

    public short sArrFld[] = new short[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 114.117769);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i1, int i2) {
        int i3 = -6;
        int i4 = -112;
        int i5 = -105;
        int i6 = 170;
        int i7 = -2;
        int i8 = 110;
        int i9 = 1;
        int i10 = -203;
        int i11 = -89;
        int iArr[] = new int[N];
        float f1 = 95.39F;
        float fArr[] = new float[N];
        short s = -15570;
        double d1 = 0.62637;
        byte by = -108;
        boolean b = true;
        long lArr[] = new long[N];
        FuzzerUtils.init(iArr, 166);
        FuzzerUtils.init(lArr, 54217L);
        {
            try {
                Double ax$6 = 0.285743535881247;
                Double ax$7 = 6.5;
                for (int ax$5 = -608; ax$5 < (-608 + 9855); ax$5 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$8 = 0; ax$8 < 1000; ax$8++) {
                            if ((ax$8 & 1) == 0) {
                                ax$7 = new Double(ax$7 + 1.0);
                            } else {
                                ax$6 = ax$6 + 2.0;
                            }
                        }
                    } catch (Throwable ax$9) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        FuzzerUtils.init(fArr, -53.78F);
        i3 = 1;
        do {
            Test.instanceCount += i3 * i3;
        } while ((++i3) < 236 );
        f1 -= s;
        for (i4 = 3; i4 < 190; i4 += 3) {
            for (i6 = 9; i6 > 1; i6 -= 3) {
                iArr[i4 - 1] >>= i6;
                for (i8 = 1; i8 < 5; i8++) {
                    i5 = ((int) (Test.instanceCount));
                    i1 >>= i4;
                    i5 -= ((int) (f1));
                    d1 += i5;
                    lArr = FuzzerUtils.long1array(N, ((long) (3819255780910203941L)));
                    Test.instanceCount = ((long) (f1));
                    try {
                        i2 = i7 % iArr[i8];
                        i1 = (-9) / i6;
                        i7 = i7 / i8;
                    } catch (ArithmeticException a_e) {
                    }
                    s += ((short) (f1));
                    iArr[i6 + 1] *= i1;
                    iArr[i8] = i3;
                    fArr[i4] += i5;
                    fArr[i4] -= i3;
                }
            }
            if (b) {
                if (b) {
                    i5 = i1;
                    i10 = 1;
                    do {
                        i1 += i9;
                        switch (((i4 % 2) * 5) + 48) {
                            case 49 :
                                f1 -= s;
                                by = ((byte) (i10));
                                if (b)
                                    continue;

                                i1 -= i9;
                                i11 = 1;
                                while ((++i11) < 1) {
                                    s = by;
                                }
                                i1 += i8;
                                i1 += i11;
                                i5 = i1;
                                break;
                            case 57 :
                                i9 <<= -2;
                                i9 += -98;
                                f1 = i6;
                                break;
                            default :
                                iArr[i10 - 1] = ((int) (Test.instanceCount));
                        }
                    } while ((++i10) < 9 );
                    vMeth2_check_sum += (((((((((((((((((i1 + i2) + i3) + Float.floatToIntBits(f1)) + s) + i4) + i5) + i6) + i7) + i8) + i9) + Double.doubleToLongBits(d1)) + i10) + by) + (b ? 1 : 0)) + i11) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
            } else {
                i5 += i4;
            }
        }
        vMeth2_check_sum += (((((((((((((((((i1 + i2) + i3) + Float.floatToIntBits(f1)) + s) + i4) + i5) + i6) + i7) + i8) + i9) + Double.doubleToLongBits(d1)) + i10) + by) + (b ? 1 : 0)) + i11) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(long l) {
        int i12 = -131;
        int i13 = 58833;
        int i14 = -85;
        int i15 = 6;
        int i16 = -4;
        int i17 = -165;
        int i18 = 39885;
        int i19 = -46964;
        int i20 = 166;
        int i21 = 60;
        int i22 = -6;
        int iArr1[] = new int[N];
        float f2 = 0.932F;
        short s1 = -17979;
        boolean b2 = false;
        double dArr[] = new double[N];
        long lArr1[] = new long[N];
        FuzzerUtils.init(iArr1, 48714);
        FuzzerUtils.init(dArr, 0.119353);
        FuzzerUtils.init(lArr1, 2016611540912740013L);
        vMeth2(i12, 84);
        i12 >>= i12;
        for (i13 = 6; i13 < 180; i13++) {
            for (i15 = 3; i15 > 1; i15--) {
                boolean b1 = true;
                i16 += i15 | i13;
                iArr1[i13 + 1] = i14;
                if (b1)
                    break;

                iArr1[i15] = -4601;
                i12 += i15 ^ i16;
                l = ((long) (f2));
                Test.instanceCount = 3L;
                iArr1[i15 + 1] ^= 24333;
                i17 = 1;
                do {
                    dArr = dArr;
                } while ((++i17) < 2 );
                Test.instanceCount ^= i14;
                iArr1[i15] -= i16;
                lArr1[i15 + 1] *= ((long) (f2));
                Test.instanceCount *= i18;
                l -= s1;
            }
            for (i19 = 3; i19 > 1; i19--) {
                f2 += l;
                for (i21 = 2; i21 > 1; --i21) {
                    lArr1[i21] *= i13;
                    f2 += ((i21 * i16) + i19) - i19;
                    i14 = ((int) (Test.instanceCount));
                    i18 = i15;
                    i18 = i13;
                }
                if (b2)
                    continue;

                if (b2)
                    break;

                i18 += i19;
            }
            iArr1[i13 + 1] -= i17;
            Test.instanceCount += i13;
            s1 += ((short) (i13 ^ i19));
            s1 += ((short) (((i13 * i20) + i19) - i19));
            {
                final boolean ax$4 = b2;
                try {
                    int[] ax$1 = new int[]{ -1550466064, -1413868438, 2090190187, -739238568, 1490655605, 606922879, 1936403655 };
                    for (int ax$0 = -506; ax$0 < (-506 + 4155); ax$0 += 1) {
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            if (b2) {
                                ax$1[0] = 1;
                            } else {
                                ax$1[0] = 2;
                            }
                        } catch (Throwable ax$3) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                    }
                } finally {
                    b2 = ax$4;
                }
            }
            i22 += ((i13 * f2) + i21) - f2;
            i14 -= ((int) (l));
            i14 = -251;
        }
        vMeth1_check_sum += ((((((((((((((((l + i12) + i13) + i14) + i15) + i16) + Float.floatToIntBits(f2)) + i17) + i18) + s1) + i19) + i20) + i21) + i22) + (b2 ? 1 : 0)) + FuzzerUtils.checkSum(iArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(float f, int i, double d) {
        int i23 = -48;
        int i24 = 4;
        int i25 = -54190;
        int i26 = -93;
        int i27 = 128;
        int iArr2[] = new int[N];
        int iArr3[][] = new int[N][N];
        byte by1 = -24;
        boolean b3 = true;
        boolean bArr[] = new boolean[N];
        float fArr1[] = new float[N];
        FuzzerUtils.init(iArr2, -53987);
        FuzzerUtils.init(iArr3, -50489);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr1, 0.74F);
        vMeth1(Test.instanceCount);
        i23 = 1;
        do {
            for (i24 = 3; i24 > 1; i24 -= 3) {
                for (i26 = i23; 3 > i26; ++i26) {
                    i *= ((int) (Test.instanceCount));
                    iArr2[i23 - 1] = i24;
                    iArr3 = iArr3;
                    switch ((((i24 >>> 1) % 2) * 5) + 17) {
                        case 23 :
                            iArr3[i24][i24 + 1] = -14;
                            i += i23;
                            i25 += ((int) (f));
                            i27 >>= i27;
                            if (b3) {
                                Test.instanceCount *= i;
                                switch (((i26 % 2) * 5) + 73) {
                                    case 79 :
                                        iArr2[i26] |= i26;
                                        iArr3 = iArr3;
                                        i27 += i;
                                        i27 *= i23;
                                        Test.instanceCount += i26;
                                        i27 = ((int) (Test.instanceCount));
                                        i25 = ((int) (Test.instanceCount));
                                        i -= i23;
                                        Test.instanceCount += ((i26 * i26) + i24) - Test.fFld;
                                        Test.instanceCount += -69;
                                        i25 += 123 + (i26 * i26);
                                        i25 += ((int) (Test.instanceCount));
                                        bArr[i23] = false;
                                        i25 -= ((int) (Test.fFld));
                                        break;
                                    case 82 :
                                        i += i26;
                                        iArr3[i26 + 1][i24] *= ((int) (d));
                                        break;
                                    default :
                                        Test.dArrFld[i24 - 1] *= -23;
                                        i25 += ((i26 * i23) + Test.instanceCount) - by1;
                                        i <<= i23;
                                        f = 108.134F;
                                        i27 = ((int) (f));
                                        i27 = i25;
                                }
                            } else {
                                fArr1[(i26 >>> 1) % N] = i24;
                            }
                            break;
                        case 19 :
                            fArr1 = fArr1;
                            break;
                    }
                }
            }
        } while ((++i23) < 217 );
        vMeth_check_sum += ((((((((((((Float.floatToIntBits(f) + i) + Double.doubleToLongBits(d)) + i23) + i24) + i25) + i26) + i27) + by1) + (b3 ? 1 : 0)) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(iArr3)) + FuzzerUtils.checkSum(bArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {
        int i28 = 115;
        int i29 = -161;
        int i30 = 19333;
        int i31 = -92;
        int i32 = 1323;
        int i33 = -19130;
        int i34 = -163;
        int iArr4[] = new int[N];
        short s2 = 16230;
        byte by2 = 96;
        long l1 = -2L;
        long lArr2[] = new long[N];
        float f3 = 2.637F;
        float fArr2[] = new float[N];
        boolean b4 = false;
        FuzzerUtils.init(lArr2, -79L);
        FuzzerUtils.init(iArr4, 198);
        FuzzerUtils.init(fArr2, 0.651F);
        vMeth(Test.fFld, iFld, dFld);
        for (i28 = 5; i28 < 162; ++i28) {
            for (i30 = 32; i30 > 1; i30 -= 3) {
                for (i32 = i30; i32 < 4; i32++) {
                    long l2 = 2922748101L;
                    lArr2[i28] &= s2;
                    i33 <<= i31;
                    switch (((i30 % 2) * 5) + 75) {
                        case 79 :
                            iFld += ((int) (41.386F + (i32 * i32)));
                            byFld -= ((byte) (iFld));
                            s2 += ((short) (Test.instanceCount));
                            Test.instanceCount += i32 ^ Test.instanceCount;
                            Test.fFld += i29;
                            i29 = ((int) (6823907505807915473L));
                            Test.instanceCount -= Test.instanceCount;
                            Test.fFld -= Test.fFld;
                            switch ((i28 % 2) + 62) {
                                case 62 :
                                    iArr4[i28] = byFld;
                                    iFld += ((i32 * Test.instanceCount) + i29) - i33;
                                    i29 = i32;
                                    iArr4[i30 - 1] %= ((int) (i31 | 1));
                                    iFld += i32 * i32;
                                    i33 = ((int) (dFld));
                                    Test.fFld += i32;
                                    fArr2[i28 - 1] = i32;
                                    Test.fFld += (-91) + (i32 * i32);
                                    break;
                                case 63 :
                                    Test.instanceCount = i29;
                                    if (bFld)
                                        continue;

                                    Test.instanceCount >>= -42228;
                            }
                            Test.instanceCount ^= i29;
                            break;
                        case 78 :
                            i31 += iFld;
                            iArr4[i30 - 1] = i29;
                            dFld = i32;
                            s2 = ((short) (29222));
                            if (bFld)
                                continue;

                            iArr4[i32 - 1] = -6847;
                            Test.instanceCount += ((i32 * by2) + i33) - i34;
                            Test.instanceCount -= i32;
                            l1 += 739549097616536220L;
                            i31 = i34;
                            Test.fFld *= Test.fFld;
                            break;
                    }
                    switch ((i32 % 2) + 38) {
                        case 38 :
                            iArr4[i32] = ((int) (f3));
                            f3 += Test.instanceCount;
                            iFld += i32 ^ ((long) (Test.fFld));
                            if (bFld)
                                break;

                            i34 = ((int) (-11L));
                            iFld *= 181;
                            f3 += l2;
                            break;
                        case 39 :
                            lArr2[i28 - 1] = -9;
                            iFld -= ((int) (l2));
                            switch ((i32 % 10) + 96) {
                                case 96 :
                                    l1 += i32;
                                    if (bFld)
                                        continue;

                                    i31 += 2;
                                    l1 >>= i32;
                                    i33 += ((int) (l2));
                                    dFld *= i30;
                                    i33 = ((int) (Test.instanceCount));
                                case 97 :
                                    iFld += ((i32 * l1) + i34) - by2;
                                    iArr4[i32 - 1] >>>= ((int) (l2));
                                    sArrFld = sArrFld;
                                    fArr2 = fArr2;
                                    iFld += i32 | i34;
                                    l2 = -183210295L;
                                    i34 = i29;
                                    if (bFld) {
                                        i31 = ((int) (l2));
                                        i33 += i30;
                                        i34 /= ((int) (i34 | 1));
                                        iArr4[i32 + 1] += i33;
                                        i29 *= ((int) (-2.91079));
                                        try {
                                            i34 = i32 / (-1325201485);
                                            i33 = iArr4[i30] % i28;
                                            i34 = 45785 / i30;
                                        } catch (ArithmeticException a_e) {
                                        }
                                    } else if (b4) {
                                        iFld = ((int) (Test.fFld1));
                                        i31 <<= ((int) (l1));
                                        iFld += byFld;
                                    } else if (b4) {
                                        i31 -= -54613;
                                    } else {
                                        dFld = i34;
                                    }
                                    break;
                                case 98 :
                                    iFld -= i32;
                                    break;
                                case 99 :
                                    iArr4[i28] = i34;
                                    break;
                                case 100 :
                                    i29 += ((int) (Test.instanceCount));
                                case 101 :
                                    i29 = i28;
                                case 102 :
                                    try {
                                        i29 = (-2888) / i32;
                                        i31 = i29 / i30;
                                        i29 = iFld / (-27020);
                                    } catch (ArithmeticException a_e) {
                                    }
                                case 103 :
                                    i33 += i32 * i32;
                                    break;
                                case 104 :
                                    iFld += ((int) (4641405105526234109L));
                                case 105 :
                                    i31 += i33;
                                    break;
                                default :
                                    i33 += i32;
                            }
                            break;
                    }
                }
            }
        }
        FuzzerUtils.out.println((((("i28 i29 i30 = " + i28) + ",") + i29) + ",") + i30);
        FuzzerUtils.out.println((((("i31 i32 i33 = " + i31) + ",") + i32) + ",") + i33);
        FuzzerUtils.out.println((((("s2 by2 i34 = " + s2) + ",") + by2) + ",") + i34);
        FuzzerUtils.out.println((((("l1 f3 b4 = " + l1) + ",") + Float.floatToIntBits(f3)) + ",") + (b4 ? 1 : 0));
        FuzzerUtils.out.println((((("lArr2 iArr4 fArr2 = " + FuzzerUtils.checkSum(lArr2)) + ",") + FuzzerUtils.checkSum(iArr4)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.fFld iFld = " + Test.instanceCount) + ",") + Float.floatToIntBits(Test.fFld)) + ",") + iFld);
        FuzzerUtils.out.println((((("dFld byFld bFld = " + Double.doubleToLongBits(dFld)) + ",") + byFld) + ",") + (bFld ? 1 : 0));
        FuzzerUtils.out.println((((("Test.fFld1 Test.dArrFld sArrFld = " + Float.floatToIntBits(Test.fFld1)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld))) + ",") + FuzzerUtils.checkSum(sArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}