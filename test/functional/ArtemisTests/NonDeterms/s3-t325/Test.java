// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.BitSet;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -52636L;

    public static short sFld = 22772;

    public static byte byFld = -17;

    public static double dFld = 103.117341;

    public static int iFld = 19706;

    public static int iFld1 = 13;

    public static int iFld2 = 1;

    public static double[] dArrFld = new double[N];

    public static int[] iArrFld = new int[N];

    public static long[] lArrFld = new long[N];

    public byte[] byArrFld = new byte[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.122395);
        FuzzerUtils.init(Test.iArrFld, 0);
        FuzzerUtils.init(Test.lArrFld, 10L);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4) {
        if (ax$16) {
            int ax$18 = i4;
            int ax$19 = iFld2;
            int ax$20 = iFld1;
            try {
                int[][] ax$17 = new int[10][];
                for (iFld2 = 0; iFld2 < iFld1; iFld2++) {
                    ax$17[i4][iFld2] = (int) ((float) (i4 + 1) / (float) (iFld2 + 1));
                }
            } catch (Throwable ax$21) {
            } finally {
                i4 = ax$18;
                iFld2 = ax$19;
                iFld1 = ax$20;
            }
            return;
        }
        int i5 = 14, i6 = -223, i7 = 138, i8 = 216, iArr[] = new int[N], iArr1[][] = new int[N][N];
        byte by = 92;
        boolean b2 = true;
        double d = -1.100580, d1 = 2.43600;
        float[] fArr = new float[N];
        long[] lArr = new long[N];
        FuzzerUtils.init(iArr, -13);
        FuzzerUtils.init(fArr, -53.284F);
        FuzzerUtils.init(iArr1, -13);
        FuzzerUtils.init(lArr, -1771591336929733100L);
        iArr = iArr;
        for (i5 = 4; 84 > i5; ++i5) {
            float f2 = 1.15F;
            Test.instanceCount += i5;
            by >>= (byte) i6;
            f2 += Test.sFld;
            i4 += (i5 | i5);
            f2 *= i5;
            b2 = b2;
            d = 7;
            while (--d > 0) {
                if (i4 != 0) {
                    vMeth1_check_sum += i4 + i5 + i6 + by + (b2 ? 1 : 0) + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i7 + i8 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
                    return;
                }
                f2 -= Test.instanceCount;
                f2 += i4;
                switch((int) ((d % 9) + 13)) {
                    case 13:
                        i6 += (int) -48.29583;
                        i6 = i5;
                        Test.instanceCount += (long) (d - Test.sFld);
                        switch(((i5 % 8) * 5) + 47) {
                            case 85:
                                i6 -= 6;
                                i6 += (int) (d - i5);
                                f2 += (float) d;
                                d1 += i5;
                                i4 += (33951 + (d * d));
                                break;
                            case 56:
                                i6 -= (int) Test.instanceCount;
                                switch((i5 % 1) + 71) {
                                    case 71:
                                        Test.instanceCount >>>= i5;
                                        i4 += (int) -7L;
                                        for (i7 = 1; i7 < 1; i7++) {
                                            f2 += i7;
                                            Test.instanceCount -= -151;
                                            fArr[(int) (d + 1)] += i8;
                                            iArr[(int) (d - 1)] += i7;
                                            Test.dArrFld[i5 + 1] = Test.instanceCount;
                                            d1 += i6;
                                            i4 += i7;
                                        }
                                        Test.instanceCount -= i4;
                                        Test.instanceCount = i4;
                                        d1 += i6;
                                        break;
                                    default:
                                        Test.instanceCount = Test.instanceCount;
                                }
                                break;
                            case 49:
                                i6 += (int) (((d * Test.instanceCount) + i4) - i7);
                            case 62:
                                fArr[i5] += i6;
                            case 54:
                                Test.instanceCount = i4;
                            case 78:
                                f2 -= Test.instanceCount;
                                break;
                            case 55:
                                d1 = i7;
                                break;
                            case 61:
                                i4 = i5;
                                break;
                            default:
                                i8 -= -3;
                        }
                        break;
                    case 14:
                        Test.instanceCount += i7;
                    case 15:
                        f2 += (float) (d - i4);
                        break;
                    case 16:
                        iArr1 = iArr1;
                        break;
                    case 17:
                        Test.instanceCount += 12;
                        break;
                    case 18:
                        by ^= (byte) i7;
                        break;
                    case 19:
                        f2 *= (float) d1;
                        break;
                    case 20:
                        i6 += (int) (((d * i8) + f2) - Test.instanceCount);
                    case 21:
                        lArr[(int) (d)] *= i7;
                        break;
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + by + (b2 ? 1 : 0) + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i7 + i8 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(boolean b1) {
        if (ax$27) {
            try {
                java.lang.String ax$29 = "7.924932204624348E-19";
                char ax$28 = '\u00c7';
                for (int ax$30 = 0; ax$30 < 10; ax$30++) {
                    // The charAt may be licm'ed, but it has to be licm'ed with its
                    // bounds check.
                    ax$28 = ax$29.charAt(10000000);
                }
            } catch (Throwable ax$31) {
            } finally {
            }
            return;
        }
        int i2 = 56082, i3 = 0, i9 = -52505, i10 = -2, i11 = 13, i12 = 131, i13 = 11, i14 = 83, i15 = -21, i16 = 197, i17 = 3, i18 = -78, i19 = 61892, i20 = -56826;
        float f3 = -24.160F;
        double d2 = 75.30470;
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(bArr, false);
        for (i2 = 5; 87 > i2; ++i2) {
            {
                java.io.PrintStream ax$24 = System.out;
                java.io.PrintStream ax$25 = System.err;
                java.io.PrintStream ax$26 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$26);
                System.setErr(ax$26);
                try {
                    ax$16 = true;
                    for (int ax$22 = 0; ax$22 < 8491; ax$22 += 1) vMeth1(-1637413754);
                } catch (java.lang.Throwable ax$23) {
                } finally {
                    ax$16 = false;
                }
                System.setOut(ax$24);
                System.setErr(ax$25);
            }
            vMeth1(-9);
        }
        Test.iArrFld[(i2 >>> 1) % N] >>= i2;
        for (i9 = 7; i9 < 125; i9++) {
            for (i11 = 1; i11 < 5; i11++) {
                i12 <<= i11;
                i10 = (int) Test.instanceCount;
                i3 += (((i11 * Test.byFld) + Test.instanceCount) - i10);
                f3 -= Test.instanceCount;
                f3 -= f3;
                i3 = i12;
            }
            i13 = 1;
            while (++i13 < 5) {
                i12 = 10967;
                i10 *= i10;
                i12 >>= -5;
                b1 = b1;
                f3 = Test.instanceCount;
                i3 <<= i3;
                Test.sFld = (short) -20775;
                Test.byFld += (byte) -114;
                i10 += i13;
                bArr[i13] = b1;
            }
            Test.byFld += (byte) i9;
        }
        for (d2 = 8; d2 < 158; d2++) {
            try {
                i14 = (-61 % i13);
                Test.iArrFld[(int) (d2)] = (19 % i2);
                i10 = (i11 / i9);
            } catch (ArithmeticException a_e) {
            }
        }
        f3 *= -2.145F;
        for (i15 = 3; i15 < 85; ++i15) {
            for (i17 = 7; i17 > 1; i17--) {
                switch((i15 % 2) + 100) {
                    case 100:
                    case 101:
                        Test.iArrFld[i15 + 1] += i13;
                        i10 = 6;
                        f3 += (((i17 * i10) + i2) - f3);
                        i3 = (int) Test.instanceCount;
                        for (i19 = 1; i19 < 2; i19++) {
                            i3 += (int) Test.instanceCount;
                            i14 = i13;
                            Test.instanceCount = 44821;
                        }
                        break;
                    default:
                        i12 >>= (int) Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += (b1 ? 1 : 0) + i2 + i3 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f3) + i13 + Double.doubleToLongBits(d2) + i14 + i15 + i16 + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth(int i1) {
        if (ax$37) {
            try {
                BitSet ax$38 = new BitSet();
                BitSet ax$39 = new BitSet();
                ax$38.set(0);
                ax$38.set(70);
                ax$39.set(40);
                ax$38.and(ax$39);
                if (ax$38.length() != 0)
                    ;
            } catch (Throwable ax$40) {
            } finally {
            }
            return -594933873;
        }
        float f1 = -5.564F, f4 = 116.484F, fArr1[] = new float[N];
        boolean b = false;
        int i21 = 9, i22 = 53963, i23 = -10, i24 = -21, i25 = 6569, i26 = 6, i27 = -203;
        long l = -33036L, lArr1[] = new long[N];
        FuzzerUtils.init(lArr1, 196195467579631968L);
        FuzzerUtils.init(fArr1, 8.366F);
        f1 = -12;
        b = ((Test.instanceCount * (i1 - 0.421F)) != (--i1));
        {
            java.io.PrintStream ax$34 = System.out;
            java.io.PrintStream ax$35 = System.err;
            java.io.PrintStream ax$36 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$36);
            System.setErr(ax$36);
            try {
                ax$27 = true;
                for (int ax$32 = 0; ax$32 < 7968; ax$32 += 1) vMeth(true);
            } catch (java.lang.Throwable ax$33) {
            } finally {
                ax$27 = false;
            }
            System.setOut(ax$34);
            System.setErr(ax$35);
        }
        vMeth(b);
        lArr1[(-11 >>> 1) % N] = Test.instanceCount;
        for (i21 = 10; i21 < 187; ++i21) {
            i22 *= 38;
            f1 = 86;
            i1 = i22;
            fArr1[i21] = i21;
            i22 += i21;
            i22 = (int) Test.dFld;
            i1 -= (int) Test.instanceCount;
            Test.instanceCount += i21;
        }
        for (f4 = 7; f4 < 230; ++f4) {
            i23 = (int) Test.instanceCount;
            i22 += (int) Test.dFld;
            i22 = -14;
            for (i24 = 1; 3 > i24; i24++) {
                i1 >>= i21;
                i26 = 1;
                do {
                    i22 += (int) Test.instanceCount;
                    Test.iArrFld[i24 + 1] = i22;
                } while (++i26 < 2);
                i25 -= (int) 2.106739;
                Test.iArrFld = Test.iArrFld;
                try {
                    i23 = (Test.iArrFld[i24] % 312);
                    i1 = (Test.iArrFld[i24 + 1] % 176);
                    i23 = (i24 % i24);
                } catch (ArithmeticException a_e) {
                }
            }
            if (b) {
                if (false) {
                    for (l = 1; l < 3; ++l) {
                        if (b) {
                            b = b;
                            f1 += i1;
                            lArr1[(int) (l + 1)] += 0;
                            try {
                                i22 = (i24 % -204);
                                i22 = (i25 % i21);
                                i27 = (Test.iArrFld[(int) (f4)] % i23);
                            } catch (ArithmeticException a_e) {
                            }
                        } else if (b) {
                            i23 <<= i27;
                            i25 &= i25;
                            i23 <<= i21;
                            Test.iFld += i21;
                        } else {
                            Test.byFld += (byte) (((l * i21) + l) - i24);
                        }
                    }
                } else {
                    f1 = (float) Test.dFld;
                }
            }
        }
        long meth_res = i1 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i21 + i22 + Float.floatToIntBits(f4) + i23 + i24 + i25 + i26 + l + i27 + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -240, i28 = -2, i29 = -39213, i30 = -53, i31 = 38277, i32 = -14, i33 = 12, i34 = 208, i35 = 6, i36 = 144;
        float f = 0.818F, fArr2[] = new float[N];
        boolean b3 = false, bArr1[] = new boolean[N];
        double d3 = -105.72916;
        long l1 = 8L, l2 = 6L;
        short[] sArr = new short[N];
        FuzzerUtils.init(sArr, (short) 26137);
        FuzzerUtils.init(fArr2, -14.672F);
        FuzzerUtils.init(bArr1, true);
        i += (int) f;
        {
            java.io.PrintStream ax$43 = System.out;
            java.io.PrintStream ax$44 = System.err;
            java.io.PrintStream ax$45 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$45);
            System.setErr(ax$45);
            try {
                ax$37 = true;
                for (int ax$41 = 0; ax$41 < 6056; ax$41 += 1) iMeth(-112585786);
            } catch (java.lang.Throwable ax$42) {
            } finally {
                ax$37 = false;
            }
            System.setOut(ax$43);
            System.setErr(ax$44);
        }
        iMeth(Test.iFld);
        if (false) {
            b3 = b3;
            for (i28 = 10; i28 < 161; ++i28) {
                i29 = 38468;
                Test.iArrFld[i28 + 1] *= -109;
                Test.lArrFld = Test.lArrFld;
                Test.instanceCount = Test.iFld1;
                switch((i28 % 7) + 42) {
                    case 42:
                        Test.instanceCount += (((i28 * Test.instanceCount) + i28) - Test.instanceCount);
                        Test.dFld = i28;
                        break;
                    case 43:
                    case 44:
                        i29 = -221;
                        Test.iFld += 18026;
                        for (d3 = 2; d3 < 34; d3++) {
                            byArrFld[i28 - 1] += (byte) 14;
                            switch((13 >>> 1) % 8) {
                                case 0:
                                    for (i31 = 1; i31 < 2; ++i31) {
                                        i29 += (int) f;
                                        i29 += i31;
                                        if (b3)
                                            break;
                                        Test.iArrFld[i31] = -11064;
                                    }
                                    f += (float) d3;
                                    break;
                                case 1:
                                    {
                                        java.io.PrintStream ax$0 = System.out;
                                        java.io.PrintStream ax$1 = System.err;
                                        java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                            @Override
                                            public void write(int b) throws java.io.IOException {
                                                // DO NOTHING: DISCARD ALL OUTPUTS
                                            }
                                        });
                                        System.setOut(ax$2);
                                        System.setErr(ax$2);
                                        {
                                            boolean ax$4 = false;
                                            for (int ax$3 = -4926; ax$3 < 146; ax$3 += 7) {
                                                if (!ax$4) {
                                                    ax$4 = true;
                                                    {
                                                        System.setOut(ax$0);
                                                        System.setErr(ax$1);
                                                        for (l1 = 2; l1 > 1; --l1) {
                                                            i29 <<= i33;
                                                            Test.iArrFld[i28] = i31;
                                                            i29 = (int) f;
                                                            f = i33;
                                                            Test.instanceCount *= i33;
                                                            i += Test.iFld2;
                                                            Test.iFld2 += -158;
                                                            Test.dFld *= i32;
                                                            f += i31;
                                                        }
                                                        System.setOut(ax$2);
                                                        System.setErr(ax$2);
                                                    }
                                                }
                                            }
                                        }
                                        System.setOut(ax$0);
                                        System.setErr(ax$1);
                                    }
                                    fArr2[(int) (d3 + 1)] -= -49;
                                    Test.iArrFld[(int) (d3 + 1)] = Test.iFld1;
                                    f = i28;
                                    i32 *= i29;
                                    Test.iArrFld[i28 + 1] = i32;
                                    Test.lArrFld[(int) (d3 + 1)] <<= Test.sFld;
                                    for (i34 = 1; i34 < 2; i34++) {
                                        i32 += (-35 + (i34 * i34));
                                        i += Test.byFld;
                                        Test.iFld += (((i34 * i31) + l1) - Test.iFld2);
                                        Test.dArrFld[i28] -= i29;
                                        f *= f;
                                        Test.instanceCount = l1;
                                        bArr1[i34 + 1] = false;
                                        Test.iFld += i34;
                                        Test.iFld = Test.iFld;
                                        i35 *= Test.iFld;
                                        i32 += (((i34 * Test.iFld2) + i29) - Test.iFld2);
                                        Test.sFld += (short) i34;
                                        switch((int) ((d3 % 2) + 111)) {
                                            case 111:
                                                Test.iArrFld[(int) (d3)] ^= (int) -4397251662176304149L;
                                                switch((i28 % 2) + 116) {
                                                    case 116:
                                                        i33 += i;
                                                        f = Test.instanceCount;
                                                        switch(((i35 >>> 1) % 10) + 10) {
                                                            case 10:
                                                                Test.sFld -= (short) i29;
                                                                Test.lArrFld[(int) (d3 - 1)] += -100L;
                                                            case 11:
                                                            case 12:
                                                                b3 = false;
                                                                Test.iFld *= (int) l2;
                                                                i33 += (((i34 * i28) + l2) - i);
                                                                f += i34;
                                                                Test.iFld1 -= (int) f;
                                                                break;
                                                            case 13:
                                                                Test.lArrFld[i28 + 1] = i30;
                                                                if (b3)
                                                                    break;
                                                                Test.byFld = (byte) l1;
                                                                Test.iArrFld[i28] += -10;
                                                                break;
                                                            case 14:
                                                                i29 += (((i34 * i31) + i34) - f);
                                                                switch((i34 % 1) + 63) {
                                                                    case 63:
                                                                        Test.iFld1 %= (int) (i29 | 1);
                                                                        Test.sFld -= (short) 9;
                                                                        f += (i34 * i34);
                                                                        Test.iArrFld[i34 - 1] = -2;
                                                                        break;
                                                                    default:
                                                                        i29 *= i33;
                                                                }
                                                                break;
                                                            case 15:
                                                                i <<= i32;
                                                                break;
                                                            case 16:
                                                                Test.instanceCount *= 10L;
                                                            case 17:
                                                                Test.iFld1 -= i31;
                                                                break;
                                                            case 18:
                                                                Test.dFld -= i36;
                                                                break;
                                                            case 19:
                                                                Test.lArrFld[i34] = l2;
                                                            default:
                                                                l2 <<= i31;
                                                        }
                                                        break;
                                                    case 117:
                                                        Test.lArrFld[(int) (d3)] *= -558;
                                                        break;
                                                }
                                            case 112:
                                                Test.dFld -= Test.instanceCount;
                                                break;
                                        }
                                    }
                                    break;
                                case 2:
                                    i35 = i33;
                                    break;
                                case 3:
                                    i30 += (int) d3;
                                    break;
                                case 4:
                                    l2 += (long) (d3 * d3);
                                case 5:
                                    Test.instanceCount <<= Test.iFld2;
                                case 6:
                                    Test.iArrFld = Test.iArrFld;
                                case 7:
                                    Test.iFld1 = (int) f;
                                    break;
                            }
                        }
                        break;
                    case 45:
                        Test.dArrFld[i28] = -194;
                        break;
                    case 46:
                        Test.sFld -= (short) f;
                        break;
                    case 47:
                        f += i30;
                        break;
                    case 48:
                        Test.sFld *= (short) i32;
                    default:
                        f += i33;
                }
            }
        }
        FuzzerUtils.out.println("i f b3 = " + i + "," + Float.floatToIntBits(f) + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("i28 i29 d3 = " + i28 + "," + i29 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("l1 i33 i34 = " + l1 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 l2 i36 = " + i35 + "," + l2 + "," + i36);
        FuzzerUtils.out.println("sArr fArr2 bArr1 = " + FuzzerUtils.checkSum(sArr) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + "," + FuzzerUtils.checkSum(bArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.byFld = " + Test.instanceCount + "," + Test.sFld + "," + Test.byFld);
        FuzzerUtils.out.println("Test.dFld Test.iFld Test.iFld1 = " + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.iFld2 Test.dArrFld Test.iArrFld = " + Test.iFld2 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld byArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(byArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            {
                java.io.PrintStream ax$5 = System.out;
                java.io.PrintStream ax$6 = System.err;
                java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$7);
                System.setErr(ax$7);
                {
                    boolean ax$15 = false;
                    for (int ax$14 = -166; ax$14 < 9322; ax$14 += 7) {
                        if (!ax$15) {
                            ax$15 = true;
                            {
                                System.setOut(ax$5);
                                System.setErr(ax$6);
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                                System.setOut(ax$7);
                                System.setErr(ax$7);
                            }
                        }
                        int ax$11 = iFld1;
                        int ax$12 = iFld2;
                        try {
                            short[] ax$10 = new short[] { 20, 10, 0, -10, -20 };
                            short[] ax$8 = new short[] { 20, 10, 0, -10, -20 };
                            for (int ax$9 = 0; ax$9 < ax$10.length; ax$9 += 1) {
                                ax$10[ax$9] = (short) ((ax$8[ax$9] + iFld1) >> iFld2);
                            }
                        } catch (Throwable ax$13) {
                        } finally {
                            iFld1 = ax$11;
                            iFld2 = ax$12;
                        }
                    }
                }
                System.setOut(ax$5);
                System.setErr(ax$6);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$16 = false;

    private static Boolean ax$27 = false;

    private static Boolean ax$37 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
