// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -2739357053L;

    public static byte byFld = -79;

    public static short sFld = 8081;

    public static double dFld = 0.45279;

    public static int iFld = 31270;

    public static long lFld = 28441L;

    public volatile boolean bFld = true;

    public static int iFld1 = 41319;

    public static long lArrFld[] = new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 20L);
    }

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1, byte by, int i2) {
        double d = 2.60116;
        int i3 = -13;
        int i4 = -145;
        int i5 = -117;
        int i6 = 46917;
        int i7 = -5;
        int i8 = -6;
        int iArr[] = new int[N];
        float f1 = -2.968F;
        float fArr[] = new float[N];
        long lArr[] = new long[N];
        FuzzerUtils.init(lArr, 4033891254L);
        FuzzerUtils.init(iArr, -254);
        FuzzerUtils.init(fArr, -75.23F);
        d = Test.instanceCount;
        for (i3 = 10; i3 < 215; ++i3) {
            i4 = ((int) (Test.instanceCount));
            Test.byFld += ((byte) (i3));
            for (i5 = 1; i5 < 3; i5++) {
                i4 *= i6;
                i7 = 1;
                while ((++i7) < 2) {
                    boolean b1 = false;
                    l1 += ((i7 * i7) + Test.instanceCount) - i7;
                    lArr[i7] -= i6;
                    i6 = i2;
                    Test.instanceCount = i5;
                    b1 = b1;
                    iArr[i3] -= i6;
                    iArr[i7] >>= i6;
                    b1 = b1;
                    i4 -= i4;
                    i6 = i4;
                    switch ((i3 % 10) + 7) {
                        case 7 :
                            lArr[i3] = i6;
                            i6 = i7;
                            break;
                        case 8 :
                            switch (((i3 % 1) * 5) + 102) {
                                case 106 :
                                    i4 = by;
                                    i6 += i7;
                                    if (b1) {
                                        iArr = iArr;
                                        l1 += ((i7 * Test.instanceCount) + i5) - i5;
                                        i4 >>>= ((int) (l1));
                                        if (b1)
                                            break;

                                        i2 *= i7;
                                        d = i3;
                                        i2 += i3;
                                        iArr = iArr;
                                        fArr[i7] += f1;
                                        switch (((i3 % 9) * 5) + 47) {
                                            case 58 :
                                                i4 *= i4;
                                                Test.instanceCount -= i5;
                                                i6 /= ((int) (-3019583258L));
                                                break;
                                            case 71 :
                                                i6 += ((int) (-2952736762685930316L));
                                                break;
                                            case 86 :
                                                i4 = ((int) (l1));
                                            case 76 :
                                                iArr[i7 + 1] -= Test.sFld;
                                                break;
                                            case 81 :
                                                iArr[i3] = ((int) (Test.instanceCount));
                                                break;
                                            case 72 :
                                                i4 += i7 + i4;
                                                break;
                                            case 78 :
                                                Test.instanceCount -= i7;
                                                break;
                                            case 73 :
                                                f1 += Test.sFld;
                                            case 79 :
                                                lArr[i7 - 1] += i5;
                                                break;
                                        }
                                    } else {
                                        Test.instanceCount -= i6;
                                    }
                            }
                        case 9 :
                        case 10 :
                            i4 += i7;
                        case 11 :
                            i6 <<= i2;
                            break;
                        case 12 :
                            iArr[i7 + 1] >>= ((int) (Test.instanceCount));
                        case 13 :
                            d *= -13;
                            break;
                        case 14 :
                            iArr[i7 - 1] = i3;
                            break;
                        case 15 :
                            l1 = i5;
                        case 16 :
                            i8 = ((int) (Test.instanceCount));
                        default :
                            iArr[i3] = i4;
                    }
                }
            }
        }
        vMeth_check_sum += ((((((((((((l1 + by) + i2) + Double.doubleToLongBits(d)) + i3) + i4) + i5) + i6) + i7) + Float.floatToIntBits(f1)) + i8) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(iArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth1(int i, int i1) {
        float f2 = 2.217F;
        float fArr1[] = new float[N];
        int i9 = 20723;
        int i10 = 0;
        int i11 = 10070;
        int i12 = 103;
        int i13 = 5;
        int i14 = -36435;
        int i15 = -13641;
        int iArr1[] = new int[N];
        double d1 = 0.82929;
        double dArr[] = new double[N];
        short sArr[] = new short[N];
        FuzzerUtils.init(iArr1, 12);
        FuzzerUtils.init(sArr, ((short) (-20805)));
        FuzzerUtils.init(dArr, -2.93879);
        FuzzerUtils.init(fArr1, -1.689F);
        vMeth(Test.instanceCount, Test.byFld, i);
        f2 *= i1;
        i9 = 1;
        do {
            Test.dFld += -61912L;
            i = ((int) (1.552F));
            i1 += i9;
        } while ((++i9) < 234 );
        {
            try {
                Thread[] ax$7 = new Thread[]{ new Thread() };
                for (int ax$6 = -943; ax$6 < (-943 + 5289); ax$6 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$8 = 0; ax$8 < ax$7.length; ++ax$8) {
                            ax$7[ax$8].join();
                        }
                    } catch (Throwable ax$9) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        i1 += i;
        for (i10 = 9; i10 < 233; ++i10) {
            for (i12 = 3; i12 > 1; i12--) {
                Test.instanceCount += ((i12 * i13) + i1) - i13;
                i11 = ((int) (1.3495));
                i11 = -11;
                i13 &= 104;
                i += ((int) (Test.instanceCount));
                i1 = 53236;
                Test.instanceCount -= 14;
                Test.instanceCount += ((i12 * i11) + Test.instanceCount) - i1;
                iArr1[i10] = i9;
                for (i14 = 2; i14 > 1; i14 -= 2) {
                    i13 += i1;
                    i11 <<= 36;
                    i1 = 0;
                    i = ((int) (Test.instanceCount));
                    Test.byFld <<= ((byte) (Test.instanceCount));
                    Test.instanceCount = Test.sFld;
                    i15 += i14;
                    switch ((i10 % 7) + 118) {
                        case 118 :
                            Test.instanceCount += i14 * i14;
                            Test.instanceCount += i9;
                            i1 += (-13) + (i14 * i14);
                            switch (((i14 % 1) * 5) + 43) {
                                case 47 :
                                    if (i9 != 0) {
                                    }
                                    Test.instanceCount += i9;
                                    i11 = ((int) (d1));
                                    sArr[i10] += ((short) (Test.instanceCount));
                                    dArr[i10 + 1] = Test.dFld;
                                    iArr1[i12] = i10;
                            }
                            break;
                        case 119 :
                            i15 -= Test.sFld;
                        case 120 :
                            i15 += i12;
                            break;
                        case 121 :
                            Test.instanceCount += 2 + (i14 * i14);
                        case 122 :
                            fArr1[i12 - 1] = i;
                            break;
                        case 123 :
                            iArr1[i12] >>= i9;
                        case 124 :
                            iArr1[i12] += -18386;
                    }
                }
            }
        }
        long meth_res = (((((((((((((i + i1) + Float.floatToIntBits(f2)) + i9) + i10) + i11) + i12) + i13) + i14) + i15) + Double.doubleToLongBits(d1)) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(sArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth1_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static int iMeth(boolean b, float f, long l) {
        int i16 = 60243;
        int i17 = -26;
        int i18 = -42439;
        int i19 = 8;
        int i20 = 2;
        int i21 = -14;
        int i22 = 1;
        {
            final int ax$4 = i18;
            final int ax$5 = i20;
            try {
                for (int ax$0 = -415; ax$0 < (-415 + 10471); ax$0 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        i18 = i20;
                    } catch (Throwable ax$3) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i18 = ax$4;
                i20 = ax$5;
            }
        }
        int i23 = 12655;
        int i24 = -4;
        int i25 = 9;
        long lArr1[][] = new long[N][N];
        FuzzerUtils.init(lArr1, 3L);
        Test.byFld += ((byte) (iMeth1(-12, Test.iFld)));
        Test.iFld >>>= 32485;
        lArr1[(Test.iFld >>> 1) % N][((-51275) >>> 1) % N] &= Test.sFld;
        for (i16 = 1; i16 < 121; i16++) {
            for (i18 = 1; i18 < 5; ++i18) {
                Test.sFld += ((short) (((i18 * l) + i19) - i20));
                Test.iFld += i20;
            }
            for (i21 = 1; i21 < 5; ++i21) {
                i22 >>= Test.iFld;
                Test.iFld += ((int) (Test.instanceCount));
                Test.instanceCount += i16;
                Test.dFld += Test.dFld;
                i20 = i17;
                i20 += i22;
                i22 %= -246;
                i17 *= 0;
                for (i23 = 1; i23 < 2; ++i23) {
                    i17 *= i23;
                    i17 = i24;
                    i24 += ((int) (-2.12228));
                    f = ((float) (Test.dFld));
                    i25 = i19;
                    Test.sFld += ((short) (i24));
                    Test.iFld <<= i19;
                    if (b) {
                        i24 >>= i24;
                        i25 >>>= Test.byFld;
                        l = Test.byFld;
                    }
                    i24 -= ((int) (Test.dFld));
                    i22 *= -9;
                    Test.instanceCount = -14668;
                }
                if (false) {
                    if (i23 != 0) {
                    }
                    i20 = 12;
                    i20 = -30789;
                    i25 -= 37391;
                    i24 += ((int) (Test.lFld));
                }
            }
        }
        long meth_res = (((((((((((((b ? 1 : 0) + Float.floatToIntBits(f)) + l) + i16) + i17) + i18) + i19) + i20) + i21) + i22) + i23) + i24) + i25) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public void mainTest(String[] strArr1) {
        float f3 = -1.57F;
        float f4 = 1.774F;
        float fArr2[][] = new float[N][N];
        int i26 = -185;
        int i27 = 11;
        int i28 = 104;
        int i29 = -4;
        int i30 = -7;
        int i31 = -2;
        int i32 = -28654;
        int i33 = 11;
        int i34 = -39639;
        int i35 = -11;
        int i36 = 51383;
        int i37 = 59448;
        int i38 = -231;
        int i39 = 2;
        int i41 = 7;
        int i42 = 213;
        int i43 = -11;
        int i44 = -238;
        int i45 = -30218;
        int i46 = -55769;
        int i47 = -37947;
        int iArr2[] = new int[N];
        double d2 = -85.113835;
        FuzzerUtils.init(iArr2, 226);
        FuzzerUtils.init(fArr2, -19.885F);
        iMeth(bFld, f3, -10L);
        Test.lArrFld[(Test.iFld >>> 1) % N] &= Test.iFld;
        for (i26 = 8; i26 < 192; i26++) {
            {
                final int ax$15 = i47;
                try {
                    long[] ax$12 = new long[]{ 2025591059656775754L, 4419607494836078229L, 1561730549798888692L, -19892818750240162L, -1081418332628031601L };
                    for (int ax$10 = -817; ax$10 < (-817 + 3448); ax$10 += 1) {
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            for (int ax$13 = 0; ax$13 < i47; ax$13++) {
                                ax$12[ax$13] += 219;
                            }
                        } catch (Throwable ax$14) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                    }
                } finally {
                    i47 = ax$15;
                }
            }
            Test.sFld *= ((short) (i26));
        }
        iArr2[(i26 >>> 1) % N] *= i26;
        for (d2 = 9; d2 < 229; ++d2) {
            iArr2[((int) (d2 - 1))] -= ((int) (f3));
            for (i29 = 1; i29 < 23; i29++) {
                i30 += Test.sFld;
                Test.lFld %= Test.lFld | 1;
                Test.instanceCount = 14;
                if (false)
                    break;

            }
            Test.sFld = ((short) (7));
            Test.lFld += ((long) (d2 * Test.byFld));
            i30 += ((int) (80.38792));
            bFld = false;
            f3 += ((float) (Test.dFld));
            Test.iFld += i26;
            i31 = 1;
            while ((++i31) < 23) {
                iArr2[i31] = i28;
                iArr2 = iArr2;
                f3 = -25203;
                Test.sFld *= ((short) (Test.iFld1));
                i27 += ((int) (d2));
                i27 += ((i31 * Test.iFld1) + f3) - Test.lFld;
                i28 += ((int) (f3));
                Test.iFld += ((i31 * Test.iFld) + Test.iFld1) - Test.iFld;
                Test.lArrFld[((int) (d2 - 1))] = ((long) (Test.dFld));
            }
            i30 = ((int) (10691L));
            for (i32 = 1; i32 < 23; ++i32) {
                Test.lFld += -6169;
            }
            i30 = Test.byFld;
            Test.lFld |= i33;
            iArr2[((int) (d2 + 1))] -= i34;
        }
        i33 = i34;
        i35 = 1;
        while ((++i35) < 104) {
            i30 = Test.iFld1;
            for (i36 = 2; 49 > i36; ++i36) {
                Test.iFld1 ^= Test.iFld;
                Test.instanceCount = i31;
                i28 <<= 14;
                f3 += i26;
                Test.dFld *= i30;
                for (i38 = 1; 2 > i38; i38++) {
                    Test.iFld1 = ((int) (f3));
                }
                Test.instanceCount -= Test.iFld;
                i30 += i36;
                f3 = f3;
            }
            for (i41 = 1; i41 < 49; i41++) {
                Test.instanceCount += Test.lFld;
                for (i43 = 1; i43 < 2; ++i43) {
                    i33 -= i27;
                    iArr2 = iArr2;
                    i45 += ((int) (Test.lFld));
                    f3 *= i41;
                    i37 += -28;
                    Test.instanceCount <<= i30;
                    iArr2 = iArr2;
                    fArr2[i43 - 1][i35] *= i42;
                    Test.instanceCount -= i43;
                }
                f4 = 1;
                do {
                    i34 <<= ((int) (Test.lFld));
                    bFld = bFld;
                } while ((++f4) < 2 );
                Test.instanceCount = i44;
                for (i46 = i35; i46 < 2; ++i46) {
                    if (true) {
                        i37 = i31;
                    } else {
                        i34 += i33;
                        i47 += ((i46 * i33) + i26) - f3;
                        i42 = Test.byFld;
                        Test.dFld = f3;
                        Test.instanceCount = Test.instanceCount;
                        Test.dFld += i27;
                        i37 |= i47;
                    }
                    Test.sFld *= ((short) (Test.dFld));
                }
            }
        }
        FuzzerUtils.out.println((((("f3 i26 i27 = " + Float.floatToIntBits(f3)) + ",") + i26) + ",") + i27);
        FuzzerUtils.out.println((((("d2 i28 i29 = " + Double.doubleToLongBits(d2)) + ",") + i28) + ",") + i29);
        FuzzerUtils.out.println((((("i30 i31 i32 = " + i30) + ",") + i31) + ",") + i32);
        FuzzerUtils.out.println((((("i33 i34 i35 = " + i33) + ",") + i34) + ",") + i35);
        FuzzerUtils.out.println((((("i36 i37 i38 = " + i36) + ",") + i37) + ",") + i38);
        FuzzerUtils.out.println((((("i39 i41 i42 = " + i39) + ",") + i41) + ",") + i42);
        FuzzerUtils.out.println((((("i43 i44 i45 = " + i43) + ",") + i44) + ",") + i45);
        FuzzerUtils.out.println((((("f4 i46 i47 = " + Float.floatToIntBits(f4)) + ",") + i46) + ",") + i47);
        FuzzerUtils.out.println((("iArr2 fArr2 = " + FuzzerUtils.checkSum(iArr2)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.byFld Test.sFld = " + Test.instanceCount) + ",") + Test.byFld) + ",") + Test.sFld);
        FuzzerUtils.out.println((((("Test.dFld Test.iFld Test.lFld = " + Double.doubleToLongBits(Test.dFld)) + ",") + Test.iFld) + ",") + Test.lFld);
        FuzzerUtils.out.println((((("bFld Test.iFld1 Test.lArrFld = " + (bFld ? 1 : 0)) + ",") + Test.iFld1) + ",") + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}