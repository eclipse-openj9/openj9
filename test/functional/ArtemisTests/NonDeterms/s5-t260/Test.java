// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.channels.SelectableChannel;
import java.util.Arrays;
import java.util.List;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -6957223690411487025L;

    public static double dFld = -53.91637;

    public static short sFld = -13148;

    public static double dFld1 = -1.83386;

    public static byte byFld = 30;

    public float fFld = -3.353F;

    public static boolean bFld = false;

    public int iFld = 6;

    public static int iArrFld[] = new int[N];

    public static int iArrFld1[] = new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
        FuzzerUtils.init(Test.iArrFld1, 10);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth() {
        int i3 = -27722;
        int i4 = 4;
        int i5 = 5172;
        int i7 = -4780;
        int i8 = -4;
        int i9 = 14;
        int i10 = 3885;
        int i11 = -13;
        int i12 = 29;
        int i13 = 15;
        int iArr[] = new int[N];
        float f = 125.139F;
        boolean b = true;
        long l1 = 5974212819915215605L;
        long lArr[] = new long[N];
        long lArr1[] = new long[N];
        FuzzerUtils.init(iArr, 33);
        FuzzerUtils.init(lArr, -47203L);
        FuzzerUtils.init(lArr1, 10L);
        iArr[(14 >>> 1) % N] -= i3;
        Test.instanceCount += ((long) (f));
        i3 >>= i3;
        for (i4 = 231; i4 > 11; i4--) {
            Test.instanceCount = i3;
            i3 *= ((int) (Test.dFld));
            for (i7 = 1; i7 < 3; i7++) {
                i5 = ((int) (f));
                Test.dFld /= i7 | 1;
                lArr[i7] -= Test.sFld;
                i8 = i3;
                i5 -= 114;
                Test.instanceCount *= i7;
                for (i9 = 1; i9 < 2; i9++) {
                    try {
                        iArr[i4] = (-1709327069) / i4;
                        iArr[i4 - 1] = i5 % 144;
                        iArr[i4 + 1] = (-62) % i5;
                    } catch (ArithmeticException a_e) {
                    }
                }
                i3 = i3;
                i5 = ((int) (Test.instanceCount));
                Test.instanceCount = i10;
                b = true;
            }
            f = i3;
            i10 += i4 * i4;
            for (l1 = i4; l1 < 3; ++l1) {
                i10 = i11;
                lArr = lArr1;
                f = i3;
                i12 -= ((int) (f));
                Test.instanceCount -= ((long) (f));
            }
            iArr[i4 + 1] -= ((int) (Test.instanceCount));
        }
        iArr = iArr;
        i8 /= 125;
        i13 = 1;
        do {
            i11 = 225;
            i12 -= 27478;
            iArr[i13] += 55;
            i3 = i4;
            Test.instanceCount = i5;
            iArr[i13 + 1] = i10;
        } while ((++i13) < 186 );
        long meth_res = ((((((((((((((i3 + Float.floatToIntBits(f)) + i4) + i5) + i7) + i8) + i9) + i10) + (b ? 1 : 0)) + l1) + i11) + i12) + i13) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return ((long) (meth_res));
    }

    public static int iMeth(long l, double d) {
        if (Test.ax$0) {
            int ax$1 = 1392798431;
            double[] ax$2 = new double[]{ 0.0, 1.0, 2.0, 3.0 };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$2[ax$1] = (ax$2.length - ax$1) - 1;
            } catch (Throwable ax$3) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return 2074301650;
        }
        int i1 = 14;
        int i2 = -1225;
        int i14 = 5;
        int i15 = 5;
        int i16 = 238;
        int i17 = -10;
        int i18 = 8;
        int i19 = -54962;
        int iArr1[] = new int[N];
        float f1 = 1.579F;
        float f2 = -2.113F;
        boolean b1 = false;
        byte by1 = -97;
        byte byArr[] = new byte[N];
        double dArr[] = new double[N];
        long lArr2[] = new long[N];
        FuzzerUtils.init(iArr1, -15686);
        FuzzerUtils.init(dArr, -107.9171);
        FuzzerUtils.init(byArr, ((byte) (34)));
        FuzzerUtils.init(lArr2, -1417942025361795283L);
        for (i1 = 199; i1 > 4; i1--) {
            i2 += i1 ^ l;
            l = lMeth();
            i14 = 1;
            do {
                if (false)
                    break;

                for (i15 = 1; i15 < 1; i15++) {
                    iArr1[i15 + 1] = ((int) (-8L));
                    i16 = ((int) (f1));
                    if (i16 != 0) {
                    }
                    i2 = i15;
                    f1 = i16;
                    iArr1[i1 + 1] = ((int) (f1));
                    b1 = b1;
                }
                i16 += (-61717) + (i14 * i14);
                Test.instanceCount = i15;
                i17 = 1;
                do {
                    by1 += ((byte) (i17 | i15));
                    Test.dFld += i17;
                    Test.instanceCount = i2;
                    dArr[i14 - 1] = f1;
                    l = i16;
                    byArr[i1] += ((byte) (7345));
                    iArr1[i1] = i17;
                } while ((++i17) < 1 );
                i16 = i17;
                dArr[i1 - 1] += i1;
                iArr1 = FuzzerUtils.int1array(N, ((int) (9)));
                i2 = i14;
                f2 += i14 * i14;
                i16 >>= -7642;
                i16 = Test.sFld;
                if (b1)
                    break;

                i18 = 1;
                do {
                    f1 += ((i18 * i16) + i14) - i16;
                    switch ((((30578 >>> 1) % 8) * 5) + 16) {
                        case 20 :
                            i16 += i18 - Test.instanceCount;
                            l = i1;
                            lArr2[i18 + 1] = i15;
                            break;
                        case 42 :
                            i2 >>= ((int) (l));
                            break;
                        case 53 :
                            i16 >>>= i1;
                        case 37 :
                            i16 += ((i18 * i15) + Test.instanceCount) - Test.sFld;
                            break;
                        case 48 :
                            i2 += i18;
                            break;
                        case 26 :
                            l *= i19;
                            break;
                        case 27 :
                            l = i17;
                            break;
                        case 28 :
                            dArr[i1 + 1] = i1;
                            break;
                    }
                } while ((++i18) < 1 );
            } while ((++i14) < 3 );
        }
        long meth_res = ((((((((((((((((l + Double.doubleToLongBits(d)) + i1) + i2) + i14) + i15) + i16) + Float.floatToIntBits(f1)) + (b1 ? 1 : 0)) + i17) + by1) + Float.floatToIntBits(f2)) + i18) + i19) + FuzzerUtils.checkSum(iArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(byArr)) + FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static void vMeth(int i, byte by) {
        int i20 = -137;
        int i21 = -1;
        int i22 = 10;
        int i23 = 18780;
        int i24 = 4;
        int i25 = 81;
        float f3 = -7.527F;
        float fArr[] = new float[N];
        boolean b2 = true;
        short sArr[] = new short[N];
        FuzzerUtils.init(fArr, -2.171F);
        FuzzerUtils.init(sArr, ((short) (-22311)));
        i *= --i;
        {
            final int ax$15 = i;
            try {
                List ax$5 = null;
                byte[] ax$7 = new byte[]{ ((byte) (-83)), ((byte) (51)), ((byte) (29)), ((byte) (-20)) };
                int[] ax$9 = new int[]{ -223148913 };
                for (int ax$4 = -960; ax$4 < (-960 + 7488); ax$4 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (!ax$5.equals(Arrays.asList(new String[]{ "f", "o", "o", "b", "a", "r" })));
                    } catch (Throwable ax$6) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    iMeth(-7783232798268790485L, 0.020241915843326796);
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        int ax$10 = ((int) (ax$7[(i * 4) + 0]));
                        int ax$11 = ((int) (ax$7[(i * 4) + 1]));
                        int ax$12 = ((int) (ax$7[(i * 4) + 2]));
                        int ax$13 = ((int) (ax$7[(i * 4) + 3]));
                        ax$9[i] = (((ax$13 & 0xff) | ((ax$12 & 0xff) << 8)) | ((ax$11 & 0xff) << 16)) | ((ax$10 & 0xff) << 24);
                    } catch (Throwable ax$14) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i = ax$15;
            }
        }
        i *= (iMeth(Test.instanceCount, Test.dFld1) + i) - i;
        Test.instanceCount = Test.instanceCount;
        by &= ((byte) (-51L));
        for (i20 = 78; i20 > 1; --i20) {
            for (i22 = i20; i22 < 7; i22++) {
                switch ((i20 % 10) + 102) {
                    case 102 :
                        fArr[i22] -= Test.instanceCount;
                        Test.instanceCount += i22;
                        i21 += i22 + i22;
                        fArr[i22] = -147L;
                        Test.iArrFld[i20] = ((int) (Test.instanceCount));
                        i21 >>= i22;
                        for (i24 = i22; i24 < 1; i24++) {
                            i23 = i24;
                            f3 -= i23;
                            i = ((int) (Test.instanceCount));
                            Test.instanceCount = i25;
                            if (b2)
                                break;

                            if (b2)
                                continue;

                            {
                                final long ax$23 = Test.lMeth_check_sum;
                                final long ax$24 = Test.iMeth_check_sum;
                                try {
                                    SelectableChannel ax$21 = null;
                                    boolean ax$17 = false;
                                    for (int ax$16 = -596; ax$16 < (-596 + 16964); ax$16 += 1) {
                                        Test.AxOutputRedirectionHelper.redirect();
                                        try {
                                            if (iMeth_check_sum > lMeth_check_sum) {
                                            }
                                        } catch (Throwable ax$20) {
                                        } finally {
                                        }
                                        Test.AxOutputRedirectionHelper.recover();
                                        if (!ax$17) {
                                            i25 = ((int) (-57.71683));
                                            ax$17 = true;
                                        }
                                        Test.AxOutputRedirectionHelper.redirect();
                                        try {
                                            ax$21.configureBlocking(true);
                                        } catch (Throwable ax$22) {
                                        } finally {
                                        }
                                        Test.AxOutputRedirectionHelper.recover();
                                    }
                                } finally {
                                    Test.lMeth_check_sum = ax$23;
                                    Test.iMeth_check_sum = ax$24;
                                }
                            }
                            Test.iArrFld = Test.iArrFld;
                            sArr[i24 + 1] += ((short) (i20));
                            Test.instanceCount <<= Test.instanceCount;
                            Test.instanceCount /= ((long) (f3)) | 1;
                            if (b2)
                                break;

                            i21 <<= i24;
                            if (b2)
                                break;

                        }
                        break;
                    case 103 :
                        f3 *= f3;
                        i += i22;
                        i21 = 183;
                        Test.instanceCount >>= i25;
                        Test.instanceCount = i21;
                        f3 -= i20;
                        Test.iArrFld[i20 - 1] *= i20;
                        break;
                    case 104 :
                        fArr[i20 + 1] -= ((float) (-2.127253));
                        i23 += i22;
                    case 105 :
                        i25 = -149;
                        break;
                    case 106 :
                        i23 *= -14;
                        break;
                    case 107 :
                        i23 -= -4;
                        break;
                    case 108 :
                        fArr[i22 - 1] += i21;
                        break;
                    case 109 :
                    case 110 :
                        i23 = ((int) (Test.dFld1));
                    case 111 :
                        i = ((int) (Test.instanceCount));
                        break;
                }
            }
        }
        vMeth_check_sum += ((((((((((i + by) + i20) + i21) + i22) + i23) + i24) + i25) + Float.floatToIntBits(f3)) + (b2 ? 1 : 0)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {
        int i26 = -40586;
        int i27 = 10;
        int i28 = 40;
        int i29 = -7;
        int i30 = 183;
        int i31 = 1;
        long l2 = -7L;
        double dArr1[][] = new double[N][N];
        boolean bArr[] = new boolean[N];
        float fArr1[] = new float[N];
        FuzzerUtils.init(dArr1, -1.72079);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr1, 1.785F);
        vMeth(i26, ((byte) (90)));
        Test.byFld = ((byte) (Test.dFld));
        fFld += i26;
        i27 = 1;
        do {
            for (i28 = 49; i28 > 3; --i28) {
                for (i30 = 1; i30 < 2; ++i30) {
                    i26 = i29;
                    switch ((((-124) >>> 1) % 1) + 126) {
                        case 126 :
                            i26 -= i28;
                            i31 += i30 - Test.byFld;
                            i31 = ((int) (-8L));
                            i26 = i30;
                            if (Test.bFld)
                                continue;

                            i29 = 125;
                            switch (((i30 % 2) * 5) + 62) {
                                case 71 :
                                    i29 <<= i26;
                                    break;
                                case 67 :
                                default :
                                    i31 = ((int) (Test.instanceCount));
                            }
                            Test.instanceCount /= i26 | 1;
                            Test.instanceCount += ((long) (fFld));
                            Test.iArrFld = Test.iArrFld;
                            break;
                        default :
                            if (Test.bFld) {
                                i26 <<= i31;
                            } else if (Test.bFld) {
                                Test.instanceCount += i30;
                                if (Test.bFld) {
                                    Test.sFld += ((short) (((i30 * Test.instanceCount) + i26) - i30));
                                    try {
                                        i29 = Test.iArrFld[i27 - 1] % 104;
                                        i26 = i27 % (-50068);
                                        i29 = 43 % Test.iArrFld[i30 + 1];
                                    } catch (ArithmeticException a_e) {
                                    }
                                    switch ((((43843 >>> 1) % 10) * 5) + 90) {
                                        case 99 :
                                            Test.dFld1 = i27;
                                            i31 >>= i27;
                                            Test.iArrFld[i27 - 1] *= ((int) (fFld));
                                            Test.bFld = Test.bFld;
                                            switch (((i26 >>> 1) % 2) + 30) {
                                                case 30 :
                                                    i29 += i30;
                                                    i29 += i27;
                                                    i29 *= ((int) (Test.instanceCount));
                                                    switch (((i27 % 4) * 5) + 74) {
                                                        case 77 :
                                                            Test.iArrFld[i28 + 1] <<= i26;
                                                            i29 %= ((int) (i27 | 1));
                                                            i31 -= ((int) (l2));
                                                            i31 *= i26;
                                                            l2 += i30 * i29;
                                                            if (Test.bFld)
                                                                continue;

                                                            i31 += i30;
                                                            i31 += i28;
                                                            iFld += i30;
                                                            Test.dFld1 *= i26;
                                                            break;
                                                        case 90 :
                                                            dArr1[i27][i27 + 1] *= l2;
                                                            i31 += i30 ^ iFld;
                                                        case 80 :
                                                            l2 -= i30;
                                                            fFld += 21806 + (i30 * i30);
                                                            Test.instanceCount -= l2;
                                                            bArr[i28] = Test.bFld;
                                                            i29 -= ((int) (Test.instanceCount));
                                                            fFld = i30;
                                                            Test.instanceCount = ((long) (Test.dFld));
                                                            break;
                                                        case 83 :
                                                            l2 = i29;
                                                            i29 = -10;
                                                            Test.iArrFld[i30 + 1] = iFld;
                                                            Test.instanceCount += 11 + (i30 * i30);
                                                    }
                                                    i26 >>= 0;
                                                    l2 = 8L;
                                                    if (Test.bFld)
                                                        break;

                                                    iFld >>= 31130;
                                                    i29 += i30 * i30;
                                                    Test.sFld = ((short) (l2));
                                                    i29 = i28;
                                                    switch (((i30 % 1) * 5) + 6) {
                                                        case 7 :
                                                            i26 = i27;
                                                            Test.iArrFld[i28 - 1] = ((int) (l2));
                                                    }
                                                    if (Test.bFld) {
                                                        Test.dFld -= i27;
                                                        switch (((i29 >>> 1) % 5) + 57) {
                                                            case 57 :
                                                            case 58 :
                                                                i31 *= i28;
                                                                l2 += l2;
                                                                if (Test.bFld)
                                                                    continue;

                                                            case 59 :
                                                                i26 += i27;
                                                                break;
                                                            case 60 :
                                                                fFld %= Test.sFld | 1;
                                                                break;
                                                            case 61 :
                                                            default :
                                                                if (Test.bFld)
                                                                    continue;

                                                        }
                                                    } else if (false) {
                                                        i29 *= i30;
                                                    } else {
                                                        Test.dFld1 += 14;
                                                    }
                                                    break;
                                                case 31 :
                                                    iFld = i27;
                                                    break;
                                            }
                                            break;
                                        case 93 :
                                            l2 += i30 + i29;
                                        case 123 :
                                            try {
                                                i31 = i30 % (-87);
                                                i31 = i28 % i27;
                                                iFld = i28 / (-51941);
                                            } catch (ArithmeticException a_e) {
                                            }
                                        case 97 :
                                            dArr1[i27 + 1][i30 + 1] = i28;
                                            break;
                                        case 105 :
                                            Test.bFld = Test.bFld;
                                            break;
                                        case 129 :
                                            fFld = i27;
                                            break;
                                        case 137 :
                                            Test.iArrFld[i27 + 1] = ((int) (Test.instanceCount));
                                            break;
                                        case 109 :
                                            i29 |= ((int) (Test.instanceCount));
                                            break;
                                        case 112 :
                                            Test.instanceCount >>= iFld;
                                        case 121 :
                                            try {
                                                Test.iArrFld[i28] = Test.iArrFld[i27] % Test.iArrFld[i27 + 1];
                                                Test.iArrFld1[i27 + 1] = Test.iArrFld1[i30 + 1] / 63841;
                                                Test.iArrFld1[i30 + 1] = (-27686) % Test.iArrFld[i30 - 1];
                                            } catch (ArithmeticException a_e) {
                                            }
                                            break;
                                        default :
                                            fArr1[i27 - 1] += l2;
                                    }
                                } else {
                                    i29 += i30 * i30;
                                }
                            } else {
                                Test.byFld <<= ((byte) (i29));
                            }
                    }
                }
            }
        } while ((++i27) < 104 );
        FuzzerUtils.out.println((((("i26 i27 i28 = " + i26) + ",") + i27) + ",") + i28);
        FuzzerUtils.out.println((((("i29 i30 i31 = " + i29) + ",") + i30) + ",") + i31);
        FuzzerUtils.out.println((((("l2 dArr1 bArr = " + l2) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1))) + ",") + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount) + ",") + Double.doubleToLongBits(Test.dFld)) + ",") + Test.sFld);
        FuzzerUtils.out.println((((("Test.dFld1 Test.byFld fFld = " + Double.doubleToLongBits(Test.dFld1)) + ",") + Test.byFld) + ",") + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println((((("Test.bFld iFld Test.iArrFld = " + (Test.bFld ? 1 : 0)) + ",") + iFld) + ",") + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld1));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}