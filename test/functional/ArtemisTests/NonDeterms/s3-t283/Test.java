// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.Random;
import java.util.UUID;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 4640L;

    public static int iFld = 4;

    public static volatile boolean bFld = false;

    public static int iFld1 = -21465;

    public float fFld = -1.91F;

    public static int[][] iArrFld = new int[N][N];

    public static float[][] fArrFld = new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 128);
        FuzzerUtils.init(Test.fArrFld, 106.657F);
    }

    public static long lMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(byte by) {
        int i6 = -253, i7 = -9, i8 = -51378, i9 = 6, i10 = -1, i11 = -39, i12 = 229;
        short s = 31142;
        double d1 = 0.58097;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, -4042566587485241633L);
        Test.iFld = (int) -6L;
        for (i6 = 7; 210 > i6; i6++) {
            for (i8 = 1; 3 > i8; ++i8) {
                Test.iArrFld[i6 - 1][i6] += (int) Test.instanceCount;
            }
            by += (byte) (((i6 * i8) + Test.iFld) - by);
            Test.instanceCount += Test.iFld;
            i10 = 1;
            while (++i10 < 3) {
                i9 += i10;
                i7 <<= by;
                for (i11 = 1; i11 < 1; i11++) {
                    float f = 0.14F;
                    i7 = (int) 21.212F;
                    Test.instanceCount = Test.iFld;
                    i9 <<= 18580;
                    Test.iFld = i11;
                    Test.iArrFld[i11 - 1][i10 - 1] = i9;
                    Test.iArrFld[i6][i6] -= (int) -7L;
                    s /= (short) (i12 | 1);
                    Test.bFld = Test.bFld;
                    Test.instanceCount += 134;
                    switch(((i10 % 7) * 5) + 48) {
                        case 74:
                            Test.instanceCount = i12;
                            Test.iFld *= -12;
                            Test.iFld -= i8;
                            i9 = i8;
                            d1 -= i8;
                            Test.instanceCount = Test.instanceCount;
                            Test.iFld = 38912;
                            Test.instanceCount = (long) 56.87950;
                            lArr[i6 - 1] = Test.iFld;
                            i12 -= i9;
                            d1 = Test.instanceCount;
                            Test.iArrFld[i10][i11 + 1] = (int) Test.instanceCount;
                            i9 = 9;
                            lArr = lArr;
                        case 76:
                        case 64:
                            i7 += Test.iFld;
                            i12 *= i10;
                            f = f;
                            break;
                        case 49:
                            lArr[i11] -= -106;
                            break;
                        case 67:
                            Test.instanceCount -= (long) f;
                        case 53:
                        case 78:
                            Test.iFld >>= (int) -8414632976614228316L;
                            break;
                    }
                }
            }
        }
        long meth_res = by + i6 + i7 + i8 + i9 + i10 + i11 + i12 + s + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(int i4, int i5) {
        if (ax$13) {
            int ax$16 = i5;
            try {
                float[] ax$14 = { -16777215.5f, -16777215.0f, -0.49999998f, -0.4999999701976776123046875f, 0.4999999701976776123046875f, 0.49999998f, 16777215.0f, 16777215.5f };
                float[] ax$15 = { -0.0f, -0.0f, 0.0f, -0.0f };
                for (; i5 < ax$15.length - 4; i5 += 4) {
                    ax$15[i5 + 0] = ax$14[i5 + 0] + 0.f;
                    ax$15[i5 + 1] = ax$14[i5 + 1] + 1.f;
                    ax$15[i5 + 2] = ax$14[i5 + 2] + 2.f;
                    ax$15[i5 + 3] = ax$14[i5 + 3] + 3.f;
                }
            } catch (Throwable ax$17) {
            } finally {
                i5 = ax$16;
            }
            return;
        }
        byte by1 = -70;
        int i13 = 62693, i14 = 2, i15 = 44008, i16 = 10, i17 = -14, i18 = -153, i19 = 23285, i20 = 44657, i21 = -36574;
        double d2 = 1.71340, dArr[] = new double[N];
        float f1 = -2.885F, fArr[] = new float[N];
        boolean b = false;
        long l1 = 3L, lArr1[] = new long[N];
        FuzzerUtils.init(fArr, 0.951F);
        FuzzerUtils.init(dArr, -75.127932);
        FuzzerUtils.init(lArr1, -2702790695L);
        fArr[(i4 >>> 1) % N] -= ((iMeth(by1) - 178) - Test.iFld);
        i13 = 1;
        while (++i13 < 171) {
            i5 = i13;
            dArr[i13] = i4;
            for (i14 = 1; i14 < 3; i14++) {
                i4 >>= i4;
                d2 = Test.instanceCount;
                i4 *= (int) -105L;
            }
            i4 = i15;
            for (i16 = 3; 1 < i16; i16 -= 2) {
                Test.iArrFld[i13][i16 + 1] = i16;
                i5 = i17;
                i15 += Test.iFld;
                Test.iFld *= (int) d2;
                Test.instanceCount += 11;
            }
            i18 = 1;
            while (++i18 < 3) {
                Test.iFld += (((i18 * i17) + Test.iFld1) - i17);
                lArr1[i18] += Test.iFld1;
                Test.iArrFld[i18 + 1][i13 + 1] *= (int) d2;
                Test.instanceCount -= (long) f1;
                i15 += i16;
                Test.bFld = b;
                i15 += (int) Test.instanceCount;
                i4 += i18;
                i15 = 226;
            }
            if (b) {
                i17 = (int) 2.1022F;
                for (l1 = 1; l1 < 3; l1++) {
                    lArr1[i13 + 1] = Test.iFld1;
                    f1 -= i16;
                    i20 = 1;
                    while (++i20 < 2) {
                        lArr1[i13] += Test.iFld1;
                        i4 = (int) Test.instanceCount;
                        i15 += i4;
                    }
                }
                i21 = 1;
                do {
                    if (b)
                        break;
                    i17 += (((i21 * Test.iFld) + f1) - Test.instanceCount);
                } while (++i21 < 3);
                vMeth_check_sum += i4 + i5 + by1 + i13 + i14 + i15 + Double.doubleToLongBits(d2) + i16 + i17 + i18 + Float.floatToIntBits(f1) + (b ? 1 : 0) + l1 + i19 + i20 + i21 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
                return;
            } else if (b) {
                i19 += i13;
            } else if (false) {
                if (i15 != 0) {
                    vMeth_check_sum += i4 + i5 + by1 + i13 + i14 + i15 + Double.doubleToLongBits(d2) + i16 + i17 + i18 + Float.floatToIntBits(f1) + (b ? 1 : 0) + l1 + i19 + i20 + i21 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
                    return;
                }
                vMeth_check_sum += i4 + i5 + by1 + i13 + i14 + i15 + Double.doubleToLongBits(d2) + i16 + i17 + i18 + Float.floatToIntBits(f1) + (b ? 1 : 0) + l1 + i19 + i20 + i21 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
                return;
            }
        }
        vMeth_check_sum += i4 + i5 + by1 + i13 + i14 + i15 + Double.doubleToLongBits(d2) + i16 + i17 + i18 + Float.floatToIntBits(f1) + (b ? 1 : 0) + l1 + i19 + i20 + i21 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public static long lMeth(int i2, long l, int i3) {
        if (ax$23) {
            try {
                byte[] ax$24 = new byte[1 << 14];
                byte[] ax$27 = new byte[0];
                byte[] ax$28 = new byte[1 << 14];
                int ax$25 = 10 * 65120;
                for (int ax$26 = 0; ax$26 < ax$25; ax$26++) {
                    ax$27[ax$26] = (byte) ((ax$28[ax$26] + ax$24[ax$26] + 1) >>> 1);
                }
            } catch (Throwable ax$29) {
            } finally {
            }
            return -1763642237799736034L;
        }
        double d = -1.107782;
        int i23 = -7, i24 = 100, i25 = -11, i26 = 3, i27 = -158, iArr[] = new int[N];
        byte by2 = -125;
        short s1 = 14369;
        float f3 = -6.846F, f4 = 2.85F, fArr1[] = new float[N];
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(iArr, 3);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr1, -1.772F);
        i3 <<= (int) (((i2 * Test.instanceCount) - 1.58F) - i2);
        i2 -= (int) (--d);
        {
            java.io.PrintStream ax$20 = System.out;
            java.io.PrintStream ax$21 = System.err;
            java.io.PrintStream ax$22 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$22);
            System.setErr(ax$22);
            try {
                ax$13 = true;
                for (int ax$18 = 0; ax$18 < 5459; ax$18 += 1) vMeth(-274181423, -1536297635);
            } catch (java.lang.Throwable ax$19) {
            } finally {
                ax$13 = false;
            }
            System.setOut(ax$20);
            System.setErr(ax$21);
        }
        vMeth(Test.iFld, i2);
        i3 = Test.iFld;
        for (int i22 : iArr) {
            i23 = 2;
            while (--i23 > 0) {
                float f2 = 1.983F;
                Test.iFld1 += (((i23 * by2) + f2) - Test.iFld1);
                Test.iArrFld[i23] = iArr;
                iArr[i23 - 1] *= s1;
                iArr[i23 + 1] = (int) -10L;
                s1 = (short) Test.iFld1;
                i3 += (i23 + Test.iFld);
            }
            i2 = i3;
            for (i24 = 1; 2 > i24; i24++) {
                iArr[i24 + 1] -= Test.iFld1;
                i25 -= -14;
                if (Test.bFld)
                    continue;
                i25 += 47537;
                l += l;
                switch(((i24 % 10) * 5) + 67) {
                    case 110:
                        Test.instanceCount += i2;
                        break;
                    case 114:
                        Test.iArrFld[i24 + 1][i24 + 1] += (int) d;
                        break;
                    case 104:
                        for (i26 = 1; 2 > i26; ++i26) {
                            int i28 = 56356;
                            i28 -= i23;
                            i2 *= Test.iFld;
                            Test.iFld -= i22;
                            Test.iArrFld[i26 + 1][i24] ^= (int) Test.instanceCount;
                            iArr[i24] = i27;
                            Test.iFld += (i26 | i26);
                            d += 3861419907L;
                            i2 += (((i26 * i28) + l) - i3);
                            bArr[i26] = true;
                            f3 = (float) d;
                            fArr1[i24 + 1] *= i24;
                            if (Test.bFld)
                                continue;
                        }
                        Test.instanceCount >>= i26;
                        try {
                            i22 = (i22 / i25);
                            i22 = (i2 / 28972);
                            i27 = (210 / i3);
                        } catch (ArithmeticException a_e) {
                        }
                        break;
                    case 80:
                        Test.instanceCount -= Test.iFld;
                        break;
                    case 71:
                        s1 >>= (short) l;
                        break;
                    case 79:
                        s1 = (short) -2;
                    case 111:
                        i2 += i24;
                        break;
                    case 108:
                        f4 += i24;
                        break;
                    case 109:
                        i2 -= i3;
                        break;
                    case 106:
                        i25 >>= (int) l;
                        break;
                    default:
                        if (Test.bFld)
                            continue;
                }
            }
        }
        long meth_res = i2 + l + i3 + Double.doubleToLongBits(d) + i23 + by2 + s1 + i24 + i25 + i26 + i27 + Float.floatToIntBits(f3) + Float.floatToIntBits(f4) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -47, i1 = -10, i29 = -53434, i30 = 0, i31 = -53, i32 = -11, i33 = -20573, i34 = 2, iArr1[] = new int[N];
        byte by3 = -67;
        double d3 = 91.125940, dArr1[] = new double[N];
        short s2 = 31136;
        long[] lArr2 = new long[N];
        FuzzerUtils.init(dArr1, 0.19993);
        FuzzerUtils.init(lArr2, -28075L);
        FuzzerUtils.init(iArr1, 200);
        for (i = 4; i < 89; i++) {
            {
                java.io.PrintStream ax$32 = System.out;
                java.io.PrintStream ax$33 = System.err;
                java.io.PrintStream ax$34 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$34);
                System.setErr(ax$34);
                try {
                    ax$23 = true;
                    for (int ax$30 = 0; ax$30 < 6063; ax$30 += 1) lMeth(1860729851, 4485089026944670926L, -1325904401);
                } catch (java.lang.Throwable ax$31) {
                } finally {
                    ax$23 = false;
                }
                System.setOut(ax$32);
                System.setErr(ax$33);
            }
            lMeth(i, Test.instanceCount, i1);
            Test.iArrFld[i - 1][i - 1] = (int) Test.instanceCount;
            Test.instanceCount = 5L;
            fFld = 0.161F;
            Test.iFld -= i1;
            for (i29 = 1; 59 > i29; i29++) {
                switch(((i29 % 4) * 5) + 65) {
                    case 83:
                        Test.iFld1 += (i29 * i29);
                        break;
                    case 72:
                        Test.iFld1 += i29;
                        by3 += (byte) (i29 * i);
                        for (i31 = 1; i31 < 2; ++i31) {
                            try {
                                i1 = (i / Test.iArrFld[i29 + 1][i29]);
                                Test.iFld = (-1242056310 % i29);
                                Test.iFld1 = (Test.iArrFld[i][i29 - 1] % -222);
                            } catch (ArithmeticException a_e) {
                            }
                            i1 -= (int) -3797369171629336229L;
                            Test.instanceCount += (i31 | i32);
                            Test.instanceCount = i;
                            if (Test.bFld) {
                                fFld += i29;
                                d3 += Test.instanceCount;
                                Test.iArrFld[i29 + 1][i29] >>= -212;
                                Test.iFld1 += i31;
                                i30 += (i31 * i31);
                                if (Test.bFld)
                                    break;
                                {
                                    java.io.PrintStream ax$10 = System.out;
                                    java.io.PrintStream ax$11 = System.err;
                                    java.io.PrintStream ax$12 = new java.io.PrintStream(new java.io.OutputStream() {

                                        @Override
                                        public void write(int b) throws java.io.IOException {
                                            // DO NOTHING: DISCARD ALL OUTPUTS
                                        }
                                    });
                                    System.setOut(ax$12);
                                    System.setErr(ax$12);
                                    try {
                                        for (int ax$8 = -3565; ax$8 < 2995; ax$8 += 1) {
                                            try {
                                                java.util.Random ax$2 = new Random(69);
                                                // Test equality of UUIDs with tampered bits
                                                for (int ax$1 = 0; ax$1 < 1000; ax$1++) {
                                                    long ax$4 = ax$2.nextLong();
                                                    long ax$0 = ax$2.nextLong();
                                                    int ax$3 = ax$2.nextInt(64);
                                                    UUID ax$5 = new UUID(ax$4, ax$0);
                                                    ax$4 = ax$4 ^ (1L << ax$3);
                                                    UUID ax$6 = new UUID(ax$4, ax$0);
                                                    if (ax$5.equals(ax$6))
                                                        ;
                                                }
                                            } catch (Throwable ax$7) {
                                            } finally {
                                            }
                                        }
                                    } catch (Throwable ax$9) {
                                    }
                                    System.setOut(ax$10);
                                    System.setErr(ax$11);
                                }
                                i33 -= s2;
                                dArr1[i - 1] = i34;
                                if (Test.bFld)
                                    break;
                                d3 = i31;
                            } else if (Test.bFld) {
                                Test.iArrFld[i29 - 1][i31 - 1] *= i1;
                                try {
                                    i30 = (1141835684 / i33);
                                    Test.iFld1 = (Test.iArrFld[i][i31 + 1] / -18220);
                                    i32 = (i34 % 21515);
                                } catch (ArithmeticException a_e) {
                                }
                                if (Test.bFld) {
                                } else if (Test.bFld) {
                                    i33 = Test.iFld;
                                    dArr1[i - 1] *= i31;
                                    i33 += (int) fFld;
                                    switch((i29 % 1) + 40) {
                                        case 40:
                                            Test.instanceCount -= (long) fFld;
                                            break;
                                    }
                                    switch((i31 % 4) + 81) {
                                        case 81:
                                            lArr2[i - 1] += Test.instanceCount;
                                            Test.fArrFld = Test.fArrFld;
                                            Test.iFld1 = (int) Test.instanceCount;
                                            switch((i29 % 2) + 86) {
                                                case 86:
                                                    i34 += (i31 | i33);
                                                    fFld += i31;
                                                    Test.iArrFld[i31 + 1][i + 1] = i30;
                                                    break;
                                                case 87:
                                                    i30 = i32;
                                                    i33 = -73;
                                                    Test.fArrFld[i31][i - 1] -= fFld;
                                                    Test.instanceCount = i34;
                                                    i34 >>>= Test.iFld1;
                                            }
                                            break;
                                        case 82:
                                            Test.iFld1 += (i31 * i31);
                                            Test.instanceCount += (i31 | i34);
                                            i32 -= i;
                                            if (true)
                                                break;
                                            d3 = i31;
                                            i33 = (int) Test.instanceCount;
                                            Test.instanceCount ^= i34;
                                            i1 *= (int) Test.instanceCount;
                                            Test.instanceCount += (((i31 * Test.iFld) + i31) - Test.instanceCount);
                                            i30 = (int) Test.instanceCount;
                                            Test.instanceCount += i31;
                                            Test.iArrFld[i31][i] -= Test.iFld1;
                                        case 83:
                                            fFld += i1;
                                            i30 >>= -49739;
                                            Test.iArrFld[i29 - 1] = iArr1;
                                            i32 -= (int) Test.instanceCount;
                                            Test.iFld = i30;
                                            d3 -= 164L;
                                            i30 = i30;
                                            s2 |= (short) Test.instanceCount;
                                            i30 = i33;
                                            i34 <<= i33;
                                            i33 += i31;
                                            Test.instanceCount -= i34;
                                            by3 *= (byte) s2;
                                            i33 = i;
                                            break;
                                        case 84:
                                            fFld += Test.instanceCount;
                                            break;
                                    }
                                } else {
                                    i32 /= (int) (Test.iFld1 | 1);
                                }
                            } else {
                                Test.instanceCount -= i33;
                            }
                        }
                        break;
                    case 73:
                        fFld += ((long) i29 ^ (long) fFld);
                        break;
                    case 75:
                        Test.instanceCount += (long) d3;
                }
            }
        }
        FuzzerUtils.out.println("i i1 i29 = " + i + "," + i1 + "," + i29);
        FuzzerUtils.out.println("i30 by3 i31 = " + i30 + "," + by3 + "," + i31);
        FuzzerUtils.out.println("i32 d3 i33 = " + i32 + "," + Double.doubleToLongBits(d3) + "," + i33);
        FuzzerUtils.out.println("s2 i34 dArr1 = " + s2 + "," + i34 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println("lArr2 iArr1 = " + FuzzerUtils.checkSum(lArr2) + "," + FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld1 fFld Test.iArrFld = " + Test.iFld1 + "," + Float.floatToIntBits(fFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$13 = false;

    private static Boolean ax$23 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  lMeth ->  lMeth mainTest
// DEBUG  vMeth ->  vMeth lMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
