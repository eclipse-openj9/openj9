// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.net.DatagramPacket;
import java.util.zip.CRC32;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -2L;

    public static byte byFld = -117;

    public static volatile int iFld = 10;

    public static float fFld = -1.801F;

    public static double dFld = 25.10886;

    public static int iFld1 = 47849;

    public static boolean bFld = true;

    public volatile int iFld2 = 78;

    public int[] iArrFld = new int[N];

    public float[] fArrFld = new float[N];

    public static long[] lArrFld = new long[N];

    public static volatile boolean[] bArrFld = new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -1188435740574682240L);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, long l, short s) {
        if (ax$9) {
            try {
                byte[] ax$13 = new byte[10];
                int ax$14 = 0x00000000ffffffff;
                int ax$15 = 2146724623;
                try {
                    (new CRC32()).update(ax$13, ax$14, ax$15);
                } catch (ArrayIndexOutOfBoundsException aioobe) {
                    // Correct result
                }
            } catch (Throwable ax$16) {
            } finally {
            }
            return;
        }
        boolean b = false;
        int i4 = -27908, i5 = -184, i6 = -14, i7 = 204, i8 = 159, i9 = 59308, i10 = 13, i11 = 45, i12 = -121, iArr[] = new int[N];
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr, -9480);
        FuzzerUtils.init(dArr, -101.8748);
        b = b;
        i3 -= i3;
        for (i4 = 2; i4 < 123; ++i4) {
            Test.byFld = (byte) i4;
            i3 -= (int) Test.instanceCount;
            l = i5;
            switch((i4 % 9) + 33) {
                case 33:
                    for (i6 = 1; 5 > i6; i6++) {
                        for (i8 = 1; i8 < 2; i8++) {
                            Test.fFld += (192480163L + (i8 * i8));
                            iArr[i4 - 1] >>>= -6;
                            Test.iFld -= Test.byFld;
                            i5 += i6;
                            i9 += Test.iFld;
                            Test.instanceCount += (-35062 + (i8 * i8));
                            Test.fFld += Test.instanceCount;
                            Test.iFld += (i8 * i8);
                            Test.dFld -= Test.instanceCount;
                            dArr[i4 + 1] = i8;
                            Test.instanceCount >>>= i8;
                            i9 -= -11940;
                            i3 += i9;
                        }
                        Test.byFld <<= (byte) 62477;
                        i10 = 1;
                        do {
                            l *= (long) Test.fFld;
                            Test.fFld -= Test.instanceCount;
                            Test.instanceCount += i8;
                            i9 -= (int) Test.fFld;
                        } while (++i10 < 2);
                        i3 += 12;
                    }
                    Test.fFld += Test.fFld;
                    dArr[i4] -= i8;
                    switch(((i4 % 6) * 5) + 109) {
                        case 125:
                            l -= (long) Test.fFld;
                            for (i11 = 1; 5 > i11; ++i11) {
                                Test.instanceCount = 24;
                                i7 >>>= -7;
                                iArr[i11] = 2;
                            }
                            break;
                        case 135:
                            Test.iFld += (i4 * Test.fFld);
                        case 121:
                            b = b;
                        case 116:
                            if (i7 != 0) {
                                vMeth1_check_sum += i3 + l + s + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                                return;
                            }
                        case 115:
                            i3 <<= i8;
                        case 130:
                            Test.dFld = 34762L;
                            break;
                    }
                case 34:
                    Test.byFld += (byte) (i4 * i4);
                    break;
                case 35:
                    s -= (short) Test.fFld;
                case 36:
                    iArr[i4 - 1] = (int) l;
                case 37:
                    Test.dFld -= i8;
                    break;
                case 38:
                    i5 -= Test.iFld;
                    break;
                case 39:
                    try {
                        iArr[i4 - 1] = (i12 / i9);
                        iArr[i4 + 1] = (227 / Test.iFld);
                        i3 = (i12 % i11);
                    } catch (ArithmeticException a_e) {
                    }
                case 40:
                    iArr[i4 + 1] <<= Test.iFld1;
                    break;
                case 41:
                    i3 *= i4;
                    break;
            }
        }
        vMeth1_check_sum += i3 + l + s + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth(float f1, int i2) {
        if (ax$22) {
            int ax$23 = i2;
            try {
                i2 = 40;
            } catch (Throwable ax$24) {
            } finally {
                i2 = ax$23;
            }
            return -6311392212835149441L;
        }
        short s1 = -17424;
        int i13 = 16086, i14 = 110, i15 = -36611, i16 = 36120, i17 = -52435, i18 = 142, iArr1[] = new int[N], iArr2[][] = new int[N][N];
        boolean b1 = true;
        long l1 = -4510100955744086723L, lArr1[] = new long[N];
        FuzzerUtils.init(iArr1, 14162);
        FuzzerUtils.init(iArr2, 15146);
        FuzzerUtils.init(lArr1, 6860628022074392117L);
        {
            java.io.PrintStream ax$19 = System.out;
            java.io.PrintStream ax$20 = System.err;
            java.io.PrintStream ax$21 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$21);
            System.setErr(ax$21);
            try {
                ax$9 = true;
                for (int ax$17 = 0; ax$17 < 7380; ax$17 += 1) vMeth1(-2100698043, -3714944481198382936L, (short) -364513672);
            } catch (java.lang.Throwable ax$18) {
            } finally {
                ax$9 = false;
            }
            System.setOut(ax$19);
            System.setErr(ax$20);
        }
        vMeth1(Test.iFld1, -790257941L, s1);
        iArr1[(Test.iFld1 >>> 1) % N] = -5;
        Test.iFld = -10;
        for (i13 = 5; 195 > i13; ++i13) {
            Test.iFld1 >>= i2;
            Test.dFld = i2;
            i15 = 3;
            while ((i15 -= 3) > 0) {
                if (b1)
                    continue;
                Test.iFld *= i14;
                Test.byFld %= (byte) -11;
                b1 = b1;
                i14 += i13;
                if (true)
                    continue;
                b1 = b1;
                i14 = (int) Test.dFld;
                for (l1 = 1; l1 < 3; l1++) {
                    i16 = Test.iFld;
                    Test.instanceCount = i2;
                    i2 >>= Test.iFld1;
                    iArr2 = iArr2;
                    Test.byFld += (byte) (l1 * l1);
                    iArr2[(int) (l1)][(int) (l1)] -= i14;
                    i14 += (int) l1;
                    Test.iFld <<= i15;
                }
                i2 >>>= i16;
                i2 += (int) (-3047267824042818125L + (i15 * i15));
                Test.iFld1 += i15;
                i16 = Test.iFld;
                b1 = b1;
                lArr1 = lArr1;
            }
            Test.instanceCount -= Test.iFld1;
        }
        i17 = 1;
        do {
            if (b1) {
                iArr1[i17] = (int) 2154506905L;
                i18 = 1;
                do {
                    i14 >>= i18;
                    i14 += i18;
                } while ((i18 += 3) < 3);
            } else if (b1) {
                Test.iFld1 = 0;
            } else if (b1) {
                if (b1)
                    break;
            } else {
                iArr1[i17 - 1] >>>= (int) Test.instanceCount;
            }
        } while (++i17 < 232);
        long meth_res = Float.floatToIntBits(f1) + i2 + s1 + i13 + i14 + i15 + (b1 ? 1 : 0) + l1 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth(byte by, byte by1) {
        if (ax$30) {
            try {
                java.lang.StringBuffer ax$31 = new StringBuffer("FOOBAR");
                try {
                    ax$31.insert(2, new char[25], 5, Integer.MAX_VALUE);
                } catch (StringIndexOutOfBoundsException sobe) {
                    // Test passed
                } catch (ArrayIndexOutOfBoundsException aioe) {
                }
            } catch (Throwable ax$32) {
            } finally {
            }
            return;
        }
        int i19 = -30425, i20 = 51885, i21 = 5043, i22 = 28108, i23 = 61007, i24 = 51398, i25 = 31090, i26 = 126, i27 = -195, iArr3[] = new int[N];
        long l2 = 140L, lArr[] = new long[N];
        byte[] byArr = new byte[N];
        float[] fArr = new float[N];
        FuzzerUtils.init(lArr, 16381L);
        FuzzerUtils.init(byArr, (byte) -7);
        FuzzerUtils.init(fArr, -17.1013F);
        FuzzerUtils.init(iArr3, 0);
        Test.iFld += (int) ((++Test.iFld) - Math.max(lArr[(Test.iFld >>> 1) % N], lMeth(Test.fFld, Test.iFld)));
        for (i19 = 7; i19 < 173; i19++) {
            switch(((Test.iFld1 >>> 1) % 2) + 91) {
                case 91:
                    Test.iFld1 -= Test.iFld;
                    for (l2 = 4; l2 > 1; l2--) {
                        switch((int) ((l2 % 8) + 24)) {
                            case 24:
                                Test.instanceCount *= (long) Test.dFld;
                                Test.iFld = 2;
                                if (Test.bFld) {
                                    i22 = 1;
                                    while (++i22 < 2) {
                                        if (Test.bFld)
                                            continue;
                                    }
                                    for (i23 = 1; i23 < 2; i23++) {
                                        Test.fFld = Test.fFld;
                                    }
                                    for (i25 = 2; i25 > 1; i25--) {
                                        if (Test.bFld)
                                            continue;
                                        Test.fFld += i20;
                                        Test.iFld += i22;
                                        byArr = byArr;
                                        Test.iFld1 = (int) l2;
                                        if (Test.bFld) {
                                            Test.fFld += (i25 * i19);
                                            Test.instanceCount -= i24;
                                            if (Test.bFld)
                                                continue;
                                            i26 += (((i25 * by1) + Test.instanceCount) - Test.fFld);
                                            i26 >>= i23;
                                            i24 = (int) Test.dFld;
                                            i26 += (i25 * i25);
                                            fArr[i25 + 1] = i25;
                                            Test.iFld -= (int) Test.fFld;
                                            by = (byte) i21;
                                            i26 += (((i25 * Test.instanceCount) + l2) - Test.iFld);
                                            Test.instanceCount >>>= i21;
                                            i24 += (((i25 * i20) + i26) - Test.iFld1);
                                            i24 += 189;
                                        }
                                        iArr3[i25] += i25;
                                        Test.instanceCount = l2;
                                        i24 = i20;
                                    }
                                } else {
                                    i21 = i26;
                                }
                                break;
                            case 25:
                                Test.dFld = i27;
                                break;
                            case 26:
                                lArr[i19] = (long) Test.fFld;
                                break;
                            case 27:
                                iArr3[i19] += (int) Test.instanceCount;
                            case 28:
                                iArr3 = iArr3;
                                break;
                            case 29:
                                i26 <<= (int) -5L;
                                break;
                            case 30:
                                iArr3[i19 + 1] >>>= Test.iFld1;
                                break;
                            case 31:
                                Test.fFld -= (float) Test.dFld;
                                break;
                        }
                    }
                    break;
                case 92:
                    Test.iFld1 += (i19 * i19);
                    break;
                default:
                    i20 *= i20;
            }
        }
        vMeth_check_sum += by + by1 + i19 + i20 + l2 + i21 + i22 + i23 + i24 + i25 + i26 + i27 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {
        if (ax$38) {
            long ax$39 = vMeth1_check_sum;
            try {
                vMeth1_check_sum = System.nanoTime();
            } catch (Throwable ax$40) {
            } finally {
                vMeth1_check_sum = ax$39;
            }
            return;
        }
        int i = 8, i1 = -62482, i28 = 1, i29 = 22, i30 = -42500, i31 = -35005, i32 = -29061, i33 = 52929, i34 = -161, i35 = 6, i36 = 13, i37 = 33303;
        float f = -2.340F;
        short s2 = -6501, sArr[][] = new short[N][N];
        double[] dArr1 = new double[N];
        byte[][] byArr1 = new byte[N][N];
        FuzzerUtils.init(dArr1, 0.127544);
        FuzzerUtils.init(sArr, (short) -20636);
        FuzzerUtils.init(byArr1, (byte) 92);
        for (i = 2; 118 > i; i += 2) {
            Test.byFld += (byte) (((i * i) + f) - i1);
            {
                java.io.PrintStream ax$35 = System.out;
                java.io.PrintStream ax$36 = System.err;
                java.io.PrintStream ax$37 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$37);
                System.setErr(ax$37);
                try {
                    ax$30 = true;
                    for (int ax$33 = 0; ax$33 < 7737; ax$33 += 1) vMeth((byte) -470605434, (byte) 174100621);
                } catch (java.lang.Throwable ax$34) {
                } finally {
                    ax$30 = false;
                }
                System.setOut(ax$35);
                System.setErr(ax$36);
            }
            vMeth((byte) (30), Test.byFld);
            Test.iFld1 = i1;
            dArr1 = dArr1;
            i1 += (i + i);
            i28 = 1;
            do {
                i1 >>= i;
                iArrFld[i + 1] = Test.iFld;
                Test.instanceCount = i1;
                iArrFld[i28 + 1] = -52615;
                fArrFld[i - 1] += i1;
                Test.fFld = Test.iFld1;
                Test.instanceCount += (long) Test.fFld;
            } while (++i28 < 87);
            Test.iFld1 >>>= (int) Test.instanceCount;
        }
        switch((((i >>> 1) % 10) * 5) + 76) {
            case 101:
                for (i29 = 2; i29 < 130; ++i29) {
                    Test.instanceCount >>= i29;
                    for (i31 = 2; i31 < 40; ++i31) {
                        fArrFld[i31 + 1] = -2055863192L;
                        iArrFld[i29] = Test.iFld;
                        Test.iFld1 = i32;
                        i30 += (int) (-2.338F + (i31 * i31));
                        Test.iFld1 -= i28;
                    }
                    Test.instanceCount += i29;
                    switch((i29 % 2) + 8) {
                        case 8:
                            Test.instanceCount += (((i29 * i30) + Test.fFld) - Test.iFld);
                            i32 -= i29;
                            iArrFld = iArrFld;
                            Test.dFld = i32;
                            break;
                        case 9:
                            i33 = 1;
                            while (++i33 < 40) {
                                iArrFld[i33 + 1] >>= 237;
                                switch(((i29 % 4) * 5) + 7) {
                                    case 21:
                                        Test.lArrFld[i33] &= 161;
                                        i1 = i;
                                    case 14:
                                        try {
                                            Test.iFld1 = (iArrFld[i29] % i1);
                                            i30 = (Test.iFld % 1469);
                                            i1 = (-24 % iArrFld[i33 + 1]);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        for (i34 = 1; i34 < 1; ++i34) {
                                            Test.iFld1 += (i34 ^ i34);
                                            if (true) {
                                                i32 = (int) Test.fFld;
                                                iArrFld[i34] -= i31;
                                            } else if (Test.bFld) {
                                                Test.fFld += (-48332L + (i34 * i34));
                                                i1 *= Test.iFld;
                                                i1 = Test.byFld;
                                            }
                                            i30 += (((i34 * i33) + Test.iFld1) - Test.instanceCount);
                                            Test.iFld1 -= Test.iFld;
                                            Test.bArrFld[i33 + 1] = Test.bFld;
                                            i35 += i34;
                                            i1 += (((i34 * Test.instanceCount) + i33) - i32);
                                            i32 ^= (int) Test.instanceCount;
                                            Test.iFld1 = i31;
                                            if (Test.bFld)
                                                continue;
                                            i1 -= i34;
                                        }
                                        for (i36 = 1; 1 > i36; i36++) {
                                            i35 -= i34;
                                            i32 -= i28;
                                            if (Test.bFld) {
                                                i30 += i35;
                                                iArrFld[i33] = i37;
                                                Test.instanceCount /= (i34 | 1);
                                                Test.fFld += 130;
                                                i1 = i;
                                                Test.iFld += i36;
                                                f -= iFld2;
                                                switch((i29 % 9) + 16) {
                                                    case 16:
                                                        i30 = Test.byFld;
                                                        if (Test.bFld) {
                                                            Test.fFld += Test.fFld;
                                                            i35 += i36;
                                                            i37 = (int) 7125303852032983820L;
                                                            Test.instanceCount = -211;
                                                            iArrFld[i36] = iFld2;
                                                            Test.iFld = i31;
                                                            i35 += (((i36 * i36) + s2) - i30);
                                                            i32 += i1;
                                                        } else if (Test.bFld) {
                                                            Test.instanceCount -= -41420L;
                                                        }
                                                    case 17:
                                                        Test.lArrFld[i29] += i28;
                                                        break;
                                                    case 18:
                                                        Test.iFld1 += (-37140 + (i36 * i36));
                                                        break;
                                                    case 19:
                                                        sArr = FuzzerUtils.short2array(N, (short) 7545);
                                                        break;
                                                    case 20:
                                                        Test.instanceCount = i;
                                                    case 21:
                                                        iArrFld[i36 + 1] = i29;
                                                    case 22:
                                                        iArrFld[i29] += (int) 28272L;
                                                    case 23:
                                                        iArrFld = iArrFld;
                                                        break;
                                                    case 24:
                                                        iFld2 = (int) Test.dFld;
                                                        break;
                                                    default:
                                                        Test.bFld = Test.bFld;
                                                }
                                            }
                                        }
                                        break;
                                    case 18:
                                        Test.dFld = i28;
                                    case 27:
                                        i1 += (i33 * i33);
                                        break;
                                }
                            }
                            break;
                        default:
                            fArrFld[i29 - 1] -= 50;
                    }
                }
                break;
            case 109:
                i32 -= Test.byFld;
                break;
            case 119:
                iFld2 ^= i35;
                break;
            case 85:
                Test.byFld = (byte) Test.instanceCount;
                break;
            case 94:
                s2 >>= (short) i37;
                break;
            case 90:
                Test.instanceCount = Test.instanceCount;
                break;
            case 112:
                iArrFld[(i28 >>> 1) % N] -= (int) Test.instanceCount;
                break;
            case 107:
                i30 += i36;
                break;
            case 104:
                Test.fFld = Test.fFld;
            case 114:
                byArr1[(Test.iFld1 >>> 1) % N][(-9 >>> 1) % N] = (byte) i;
            default:
                Test.dFld *= i;
        }
        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 s2 dArr1 = " + i37 + "," + s2 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println("sArr byArr1 = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(byArr1));
        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.iFld = " + Test.instanceCount + "," + Test.byFld + "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld Test.dFld Test.iFld1 = " + Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.bFld iFld2 iArrFld = " + (Test.bFld ? 1 : 0) + "," + iFld2 + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("fArrFld Test.lArrFld Test.bArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
        {
            java.io.PrintStream ax$6 = System.out;
            java.io.PrintStream ax$7 = System.err;
            java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$8);
            System.setErr(ax$8);
            try {
                for (int ax$4 = -3238; ax$4 < 5269; ax$4 += 1) {
                    try {
                        java.net.DatagramPacket ax$2 = new DatagramPacket(new byte[64], 64);
                        int ax$1 = 0x80018001;
                        java.lang.String[] ax$0 = { "com..net", "com..", ".com", ".com." };
                        if (!ax$0[ax$1].equals(new String(ax$2.getData(), ax$2.getOffset(), ax$2.getLength()))) {
                        }
                    } catch (Throwable ax$3) {
                    } finally {
                    }
                }
            } catch (Throwable ax$5) {
            }
            System.setOut(ax$6);
            System.setErr(ax$7);
        }
    }

    private static Boolean ax$9 = false;

    private static Boolean ax$22 = false;

    private static Boolean ax$30 = false;

    private static Boolean ax$38 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  lMeth ->  lMeth vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
