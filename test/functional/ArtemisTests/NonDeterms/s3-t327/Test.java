// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 578768699284363944L;

    public static int iFld = -235;

    public static float fFld = 2.811F;

    public static volatile float fFld1 = 0.145F;

    public static volatile byte byFld = 54;

    public boolean bFld = true;

    public static long[] lArrFld = new long[N];

    public static int[] iArrFld = new int[N];

    public static boolean[] bArrFld = new boolean[N];

    public volatile short[] sArrFld = new short[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -10L);
        FuzzerUtils.init(Test.iArrFld, 80);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, short s, int i4) {
        Test.instanceCount = i4;
        {
            java.io.PrintStream ax$0 = System.out;
            java.io.PrintStream ax$1 = System.err;
            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$2);
            System.setErr(ax$2);
            {
                boolean ax$9 = false;
                for (int ax$8 = -468; ax$8 < 7047; ax$8 += 7) {
                    if (!ax$9) {
                        ax$9 = true;
                        {
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                            vMeth2_check_sum += l + s + i4;
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                        }
                    }
                    try {
                        int[] ax$6 = new int[] { 71994000, 71994000, 12000, 71994000, 71994000, 144000000, 144000000, 72018000, 144000000, 144000000, 71994000, 71994000, 12000, 71994000, 71994000, 72000000, 72000000, 36006000, 72000000, 72000000, 144012000, 144012000, 72030000, 144012000, 144012000, 72000000, 72000000, 36006000, 72000000, 72000000, 499501, 499501, 499501, 499501, 499501, 1000002, 1000002, 1000002, 1000002, 1000002, 499501, 499501, 499501, 499501, 499501, 1001, 1001, 1001, 1001, 1001, 3002, 3002, 3002, 3002, 3002, 1001, 1001, 1001, 1001, 1001, 501, 501, 501, 501, 501, 1502, 1502, 1502, 1502, 1502 };
                        int ax$5 = 0xFFFFC000;
                        int[] ax$3 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
                        for (int ax$4 = 0; ax$4 < ax$6.length; ax$4 += 1) {
                            ax$6[ax$4] = (int) (ax$3[ax$4] * (-ax$5));
                        }
                    } catch (Throwable ax$7) {
                    } finally {
                    }
                }
            }
            System.setOut(ax$0);
            System.setErr(ax$1);
        }
    }

    public static void vMeth1() {
        if (ax$20) {
            try {
                java.lang.String ax$21 = "2836.011979005927";
                // Note that it's ART specific to emit the index.
                if (ax$21.contains("index")) {
                    if (!ax$21.contains("index=2")) {
                    }
                }
            } catch (Throwable ax$22) {
            } finally {
            }
            return;
        }
        boolean b = false;
        int i3 = -168, i5 = -2085, i6 = 18, i7 = -96, i8 = -56402, iArr[] = new int[N];
        float f = 28.348F, fArr[] = new float[N];
        short s1 = 17688;
        double d = -95.33266, d1 = 1.99263;
        byte by = 106;
        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(fArr, 1.903F);
        b = ((--i3) > (f--));
        i3 = (iArr[(i3 >>> 1) % N]++);
        vMeth2(Test.instanceCount, s1, i3);
        i5 = 1;
        while (++i5 < 102) {
            for (d = 5; 1 < d; d--) {
                i3 = i3;
                for (i7 = 1; i7 < 2; i7++) {
                    try {
                        i3 = (i8 % i3);
                        iArr[i5 - 1] = (i6 / i8);
                        i8 = (iArr[i5 + 1] % iArr[i7]);
                    } catch (ArithmeticException a_e) {
                    }
                    switch((int) ((d % 8) + 65)) {
                        case 65:
                            iArr[i5 - 1] += s1;
                            if (b) {
                                s1 = (short) Test.instanceCount;
                                f = (float) -2.10403;
                                i8 &= i7;
                                i6 *= -198;
                                i6 <<= by;
                                f -= 142;
                                Test.instanceCount = Test.instanceCount;
                                by = (byte) Test.instanceCount;
                                Test.lArrFld[i5 - 1] = Test.iFld;
                            } else {
                                Test.instanceCount += -40783;
                                f += (187 + (i7 * i7));
                                d1 += i6;
                                try {
                                    i6 = (1350952018 / iArr[i5]);
                                    i3 = (-45846 % i6);
                                    Test.iFld = (i8 % -56495);
                                } catch (ArithmeticException a_e) {
                                }
                                i3 += (39582 + (i7 * i7));
                                if (i7 != 0) {
                                    vMeth1_check_sum += (b ? 1 : 0) + i3 + Float.floatToIntBits(f) + s1 + i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + by + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                    return;
                                }
                                i3 -= i7;
                                iArr[i5 - 1] -= (int) Test.instanceCount;
                            }
                            fArr[i5 + 1] = i5;
                            i6 = i6;
                            break;
                        case 66:
                            i8 -= i5;
                            break;
                        case 67:
                            Test.iFld += i6;
                            i6 -= (int) 2.66547;
                            iArr[(int) (d - 1)] += i6;
                            break;
                        case 68:
                            fArr = FuzzerUtils.float1array(N, (float) -89.149F);
                            Test.iFld *= s1;
                            if (i5 != 0) {
                                vMeth1_check_sum += (b ? 1 : 0) + i3 + Float.floatToIntBits(f) + s1 + i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + by + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                return;
                            }
                            break;
                        case 69:
                            if (b)
                                break;
                            break;
                        case 70:
                            if (b)
                                break;
                            break;
                        case 71:
                            i3 += i6;
                            break;
                        case 72:
                            Test.instanceCount -= (long) f;
                            break;
                    }
                }
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + i3 + Float.floatToIntBits(f) + s1 + i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + by + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i1, int i2) {
        if (ax$28) {
            int ax$33 = i2;
            int ax$34 = i1;
            try {
                if (i1 < 0)
                    i1 += i2;
            } catch (Throwable ax$35) {
            } finally {
                i2 = ax$33;
                i1 = ax$34;
            }
            return;
        }
        int i9 = 58971, i10 = -38203, i11 = -63334, i12 = -145, i13 = 9, i14 = 124, i15 = 225, i16 = 19093, i17 = -8, i18 = 59261, iArr1[] = new int[N];
        float f1 = 105.218F, fArr1[] = new float[N];
        boolean b1 = true, bArr[] = new boolean[N];
        double d2 = 27.68162, d3 = -116.80244;
        byte by1 = 56;
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr1, 0.169F);
        FuzzerUtils.init(iArr1, 4);
        {
            java.io.PrintStream ax$25 = System.out;
            java.io.PrintStream ax$26 = System.err;
            java.io.PrintStream ax$27 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$27);
            System.setErr(ax$27);
            try {
                ax$20 = true;
                for (int ax$23 = 0; ax$23 < 6991; ax$23 += 1) vMeth1();
            } catch (java.lang.Throwable ax$24) {
            } finally {
                ax$20 = false;
            }
            System.setOut(ax$25);
            System.setErr(ax$26);
        }
        vMeth1();
        Test.iFld += 108;
        Test.instanceCount *= i1;
        for (i9 = 6; i9 < 219; i9++) {
            f1 += i9;
            i10 += i10;
            i1 *= i9;
            bArr[i9] = b1;
            i11 += (i9 + i9);
            Test.iFld ^= i2;
            fArr1[i9 - 1] = (float) d2;
        }
        Test.iFld = i2;
        Test.instanceCount = Test.instanceCount;
        iArr1[(Test.iFld >>> 1) % N] = (int) Test.fFld;
        i11 >>= i9;
        for (d3 = 8; d3 < 233; d3++) {
            try {
                iArr1[(int) (d3 - 1)] = (i12 % iArr1[(int) (d3)]);
                i2 = (i2 / i9);
                i1 = (iArr1[(int) (d3)] / 220);
            } catch (ArithmeticException a_e) {
            }
        }
        Test.instanceCount = i10;
        i12 += (int) d2;
        for (i13 = 15; i13 < 251; ++i13) {
            Test.fFld1 += (((i13 * i1) + i13) - Test.instanceCount);
            for (i15 = i13; 3 > i15; i15++) {
                short s2 = -24404;
                Test.fFld += 10;
                s2 -= (short) Test.instanceCount;
                Test.lArrFld[i15] >>= -4;
                for (i17 = 1; 1 > i17; i17++) {
                    Test.fFld1 = Test.fFld;
                    i11 += Test.iFld;
                    iArr1[i17 - 1] -= i18;
                    i16 -= i16;
                    iArr1[i13 - 1] = i16;
                    i1 = i2;
                    Test.iFld >>= Test.iFld;
                    iArr1[i15 + 1] -= -7;
                }
                by1 = (byte) 65295;
            }
            if (b1)
                continue;
            by1 = (byte) Test.iFld;
        }
        vMeth_check_sum += i1 + i2 + i9 + i10 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + i11 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i12 + i13 + i14 + i15 + i16 + i17 + i18 + by1 + FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {
        int i = -99, i19 = 44769, i20 = -219, i21 = 42848, i22 = 12530, i23 = 11, i24 = 8, i25 = -16035, i26 = -57114, i27 = 0, i28 = -29, i29 = -234, i31 = -25, i32 = -23, i33 = 206, i34 = -36389, i35 = 14;
        long l2 = -10L;
        double d4 = -60.32464, dArr[] = new double[N];
        boolean b2 = false;
        short s4 = 5843;
        float f2 = -1.640F;
        FuzzerUtils.init(dArr, 2.4139);
        i = 1;
        while (++i < 170) {
            int i30 = -6;
            {
                java.io.PrintStream ax$38 = System.out;
                java.io.PrintStream ax$39 = System.err;
                java.io.PrintStream ax$40 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$40);
                System.setErr(ax$40);
                try {
                    ax$28 = true;
                    for (int ax$36 = 0; ax$36 < 7754; ax$36 += 1) vMeth(-1215644002, 574988487);
                } catch (java.lang.Throwable ax$37) {
                } finally {
                    ax$28 = false;
                }
                System.setOut(ax$38);
                System.setErr(ax$39);
            }
            vMeth(-18, i);
            switch((i % 3) + 51) {
                case 51:
                    Test.iArrFld = Test.iArrFld;
                    Test.iFld += i;
                    Test.fFld += ((long) i ^ (long) i);
                    Test.iFld <<= 0;
                    break;
                case 52:
                case 53:
                    for (i19 = 1; 30 > i19; ++i19) {
                        short s3 = -3185;
                        i20 *= -215;
                        s3 += (short) 2968453499L;
                        Test.iArrFld[i19 - 1] += -44995;
                        for (i21 = 1; i21 < 2; i21++) {
                            i20 -= i22;
                            Test.instanceCount >>= i;
                            Test.instanceCount = Test.iFld;
                            i22 = (int) Test.instanceCount;
                            i22 <<= i19;
                        }
                        i20 >>>= Test.byFld;
                        i20 = Test.iFld;
                        for (l2 = 2; l2 > 1; --l2) {
                            i23 = i19;
                            Test.iArrFld[(int) (l2)] -= (int) d4;
                        }
                        i23 += (-34689 + (i19 * i19));
                        Test.instanceCount *= i20;
                        for (i24 = 1; 2 > i24; ++i24) {
                            d4 = d4;
                            Test.iFld <<= (int) Test.instanceCount;
                            if (false) {
                                i22 += (((i24 * i21) + Test.iFld) - Test.byFld);
                                Test.lArrFld[i + 1] >>= 62946;
                            }
                            i22 += s3;
                            i22 >>>= i24;
                            dArr[i + 1] = 1.46F;
                            Test.instanceCount += (i24 * i24);
                            bFld = bFld;
                            i20 += i24;
                        }
                    }
                    Test.fFld += l2;
                    bFld = b2;
                    d4 += Test.fFld;
                    for (i26 = 30; i26 > 1; i26--) {
                        d4 %= (i25 | 1);
                    }
                    Test.instanceCount = l2;
                    s4 *= (short) l2;
                    Test.instanceCount += (((i * i25) + l2) - l2);
                    Test.fFld += (11896 + (i * i));
                    Test.byFld = (byte) i19;
                    for (i28 = 1; 30 > i28; i28++) {
                        i25 += 210;
                        try {
                            i25 = (i27 % i21);
                            i25 = (i22 / -185);
                            i20 = (236 / i24);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.iArrFld[i] *= -152;
                        i22 = (int) Test.instanceCount;
                        i23 = (int) 4217039398L;
                        Test.bArrFld[i28] = b2;
                        Test.fFld -= i21;
                        Test.instanceCount += i20;
                    }
                    i30 += (int) Test.instanceCount;
                    break;
            }
            s4 += (short) (((i * f2) + i23) - i27);
            if (b2)
                break;
            {
                java.io.PrintStream ax$17 = System.out;
                java.io.PrintStream ax$18 = System.err;
                java.io.PrintStream ax$19 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$19);
                System.setErr(ax$19);
                try {
                    for (int ax$15 = -1375; ax$15 < 6137; ax$15 += 1) {
                        int ax$12 = i30;
                        int ax$13 = i20;
                        try {
                            int[] ax$10 = new int[] { 0xF1F2F3F4 };
                            for (int ax$11 = i30 + 1; ax$11 < i20; ax$11++) {
                                ax$10[ax$11] += 1;
                            }
                        } catch (Throwable ax$14) {
                        } finally {
                            i30 = ax$12;
                            i20 = ax$13;
                        }
                    }
                } catch (Throwable ax$16) {
                }
                System.setOut(ax$17);
                System.setErr(ax$18);
            }
            Test.byFld = (byte) i25;
            Test.iFld = i26;
            Test.lArrFld[i + 1] = i31;
            i32 = 1;
            do {
                Test.iArrFld[i32] = (int) Test.instanceCount;
                for (i33 = 1; 1 > i33; i33 += 2) {
                    i35 = (int) l2;
                    i22 += i33;
                    i25 = (int) Test.instanceCount;
                    i22 = (int) d4;
                    Test.iFld = i30;
                    i27 *= (int) d4;
                    sArrFld[i33 - 1] -= Test.byFld;
                    i34 = i21;
                }
                Test.instanceCount -= 24992;
                Test.fFld1 *= i34;
                i29 += (i32 ^ i32);
            } while (++i32 < 30);
        }
        FuzzerUtils.out.println("i i19 i20 = " + i + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 l2 = " + i21 + "," + i22 + "," + l2);
        FuzzerUtils.out.println("i23 d4 i24 = " + i23 + "," + Double.doubleToLongBits(d4) + "," + i24);
        FuzzerUtils.out.println("i25 b2 i26 = " + i25 + "," + (b2 ? 1 : 0) + "," + i26);
        FuzzerUtils.out.println("i27 s4 i28 = " + i27 + "," + s4 + "," + i28);
        FuzzerUtils.out.println("i29 f2 i31 = " + i29 + "," + Float.floatToIntBits(f2) + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 dArr = " + i35 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.fFld1 Test.byFld bFld = " + Float.floatToIntBits(Test.fFld1) + "," + Test.byFld + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld Test.bArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("sArrFld = " + FuzzerUtils.checkSum(sArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        if (ax$41) {
            int ax$43 = iFld;
            try {
                int[] ax$42 = { 5, 4, 1, 9, 10, 2, 7, 6, 3, 8 };
                ax$42[iFld] = iFld;
                iFld = (byte) (iFld + 1);
            } catch (Throwable ax$44) {
            } finally {
                iFld = ax$43;
            }
            return;
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$20 = false;

    private static Boolean ax$28 = false;

    private static Boolean ax$41 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
