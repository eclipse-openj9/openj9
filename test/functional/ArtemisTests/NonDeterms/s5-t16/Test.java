// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Map;
import java.util.concurrent.atomic.AtomicIntegerArray;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -2169929647L;

    public int iFld = -3;

    public static double dFld = -87.94511;

    public static volatile boolean bFld = true;

    public static int iArrFld[] = new int[N];

    public static float fArrFld[] = new float[N];

    public int iArrFld1[][] = new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3677);
        FuzzerUtils.init(Test.fArrFld, 1.662F);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth(int i8, int i9, float f2) {
        double d1 = -1.82411;
        double d2 = -1.9821;
        int i10 = 7;
        int i11 = 53932;
        {
            final int ax$29 = i9;
            final int ax$30 = i10;
            try {
                AtomicIntegerArray ax$24 = null;
                AtomicIntegerArray ax$26 = null;
                for (int ax$22 = -475; ax$22 < (-475 + 8900); ax$22 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$27 = 0; ax$27 < (i10 - i9); ax$27 += 1) {
                            ax$24.compareAndSet(ax$27 + i9, 123, -123);
                            ax$26.compareAndSet(ax$27 + i9, 123, -103);
                        }
                    } catch (Throwable ax$28) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i9 = ax$29;
                i10 = ax$30;
            }
        }
        int i12 = 23099;
        int i13 = 194;
        int i14 = 10742;
        int i15 = -7900;
        int i16 = -9;
        short s = -1249;
        short sArr[] = new short[N];
        long l1 = 3487991667L;
        long lArr2[] = new long[N];
        byte by1 = -19;
        byte byArr[] = new byte[N];
        boolean b = true;
        FuzzerUtils.init(lArr2, -3088248773L);
        FuzzerUtils.init(byArr, ((byte) (61)));
        FuzzerUtils.init(sArr, ((short) (24938)));
        lArr2[((-7623) >>> 1) % N] = ((long) (d1));
        for (i10 = 9; i10 < 188; i10++) {
            i9 -= i9;
            i8 = i8;
            Test.instanceCount = s;
            i9 /= ((int) (Test.instanceCount | 1));
            f2 -= Test.instanceCount;
            i9 = ((int) (35L));
            if (i11 != 0) {
            }
            i11 = ((int) (-17106L));
            for (i12 = 1; i12 < 3; ++i12) {
                i11 -= i8;
            }
        }
        Test.instanceCount = Test.instanceCount;
        l1 = 1;
        do {
            switch (((int) (((l1 % 10) * 5) + 58))) {
                case 93 :
                    for (i14 = 1; i14 < 4; i14++) {
                        Test.instanceCount = i15;
                        i15 = i8;
                        for (d2 = 1; d2 < 2; d2++) {
                            i11 = i13;
                            i15 = i12;
                            lArr2[((int) (l1 - 1))] <<= i11;
                            s = ((short) (l1));
                            i13 += ((int) (2.864F));
                            Test.instanceCount = l1;
                            Test.instanceCount *= Test.instanceCount;
                            i8 <<= by1;
                            byArr = FuzzerUtils.byte1array(N, ((byte) (-6)));
                        }
                        Test.instanceCount -= i9;
                        if (b) {
                            by1 += ((byte) (i8));
                            if (i13 != 0) {
                            }
                            Test.instanceCount += 1617071026L + (i14 * i14);
                            i13 -= ((int) (Test.instanceCount));
                            i11 *= i10;
                            i15 -= i9;
                            i11 += ((int) (d1));
                        } else if (b) {
                        }
                    }
                    break;
                case 107 :
                    Test.iArrFld[((int) (l1))] = ((int) (l1));
                    break;
                case 102 :
                    d1 -= s;
                    break;
                case 82 :
                    if (b)
                        break;

                    break;
                case 71 :
                    Test.iArrFld[((int) (l1))] -= i14;
                case 91 :
                    i13 |= i10;
                    break;
                case 60 :
                    i11 = ((int) (f2));
                case 80 :
                    d1 = l1;
                    break;
                case 73 :
                case 66 :
                    byArr[((int) (l1))] = ((byte) (3328344274L));
                default :
            }
        } while ((++l1) < 131 );
        long meth_res = (((((((((((((((((i8 + i9) + Float.floatToIntBits(f2)) + Double.doubleToLongBits(d1)) + i10) + i11) + s) + i12) + i13) + l1) + i14) + i15) + Double.doubleToLongBits(d2)) + i16) + by1) + (b ? 1 : 0)) + FuzzerUtils.checkSum(lArr2)) + FuzzerUtils.checkSum(byArr)) + FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return ((long) (meth_res));
    }

    public static void vMeth(byte by, long l) {
        if (Test.ax$31) {
            final long ax$36 = Test.vMeth_check_sum;
            long[] ax$32 = new long[]{ 7L, 7L, 5L, 5L, 7L, 7L, 7L, 5L, 5L };
            int ax$33 = -1648468561;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                vMeth_check_sum += ax$32[ax$33];
            } catch (Throwable ax$35) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.vMeth_check_sum = ax$36;
            return;
        }
        int i7 = 26;
        int i17 = 3;
        int i18 = -7;
        int i19 = 6062;
        int i20 = -35258;
        int i21 = 170;
        int i22 = -23609;
        int i23 = -1;
        float f3 = -104.249F;
        float fArr[] = new float[N];
        double d3 = -96.53377;
        boolean b1 = true;
        short s2 = 22897;
        long lArr1[] = new long[N];
        FuzzerUtils.init(lArr1, 36754L);
        FuzzerUtils.init(fArr, -2.612F);
        lArr1[(i7 >>> 1) % N] -= lMeth(i7, i7, f3);
        for (d3 = 3; d3 < 81; d3++) {
            b1 = b1;
            l = l;
            i7 *= ((int) (Test.instanceCount));
            f3 += ((float) (d3 * d3));
            if (i17 != 0) {
                vMeth_check_sum += ((((((((((((((by + l) + i7) + Float.floatToIntBits(f3)) + Double.doubleToLongBits(d3)) + i17) + (b1 ? 1 : 0)) + i18) + i19) + i20) + i21) + i22) + i23) + s2) + FuzzerUtils.checkSum(lArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            }
            i17 = i17;
        }
        for (i18 = 11; 177 > i18; i18++) {
            for (i20 = 1; i20 < 4; i20++) {
                i7 *= i17;
                try {
                    Test.iArrFld[i18 - 1] = i7 / Test.iArrFld[i20];
                    Test.iArrFld[i18] = 545733693 % i21;
                    i7 = i18 % (-7);
                } catch (ArithmeticException a_e) {
                }
                i19 = i19;
                i22 = 1;
                while ((++i22) < 2) {
                    i19 += ((i22 * i21) + i22) - f3;
                }
                i23 = 1;
                do {
                    i17 -= i17;
                    lArr1[i20 + 1] += i23;
                    switch ((i23 % 2) + 126) {
                        case 126 :
                            i19 = ((int) (-110.55F));
                            f3 += i7;
                            i21 -= i19;
                            i21 *= s2;
                            Test.instanceCount -= 26448;
                            by += ((byte) (i23));
                            i21 += i23 ^ Test.instanceCount;
                            s2 += ((short) (((i23 * i18) + i22) - l));
                            switch ((((i23 >>> 1) % 2) * 5) + 66) {
                                case 75 :
                                    fArr[i23] += 5400213589822658504L;
                                    if (true)
                                        continue;

                                    Test.instanceCount += i23 * i23;
                                    f3 = 3707300114L;
                                    break;
                                case 68 :
                                    i7 += i23 - i23;
                                    l = i22;
                                    i21 += 91 + (i23 * i23);
                                    i17 = i22;
                                    break;
                            }
                            f3 -= Test.instanceCount;
                            break;
                        case 127 :
                    }
                } while ((++i23) < 2 );
            }
        }
        vMeth_check_sum += ((((((((((((((by + l) + i7) + Float.floatToIntBits(f3)) + Double.doubleToLongBits(d3)) + i17) + (b1 ? 1 : 0)) + i18) + i19) + i20) + i21) + i22) + i23) + s2) + FuzzerUtils.checkSum(lArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i5, int i6) {
        if (Test.ax$0) {
            final int ax$6 = i6;
            short[] ax$2 = new short[]{ ((short) (-24645)), ((short) (-5549)), ((short) (1410)), ((short) (-15683)), ((short) (-2458)) };
            short[] ax$3 = new short[]{ ((short) (5649)), ((short) (-2130)), ((short) (-11475)), ((short) (-3724)), ((short) (-6172)), ((short) (-15010)), ((short) (31960)), ((short) (8714)) };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                for (int ax$4 = 0; ax$4 < i6; ax$4++) {
                    ax$2[ax$4] = ((short) ((ax$3[ax$4] + 0x7fff) >>> 1));
                }
            } catch (Throwable ax$5) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            i6 = ax$6;
            return 1402704873;
        }
        float f1 = -15.377F;
        float fArr1[] = new float[N];
        byte by2 = -14;
        double d4 = 0.111465;
        double d5 = 0.6031;
        int i24 = 2;
        int i25 = -1;
        int i26 = 6;
        short s3 = 7518;
        long l2 = -5008860604286678695L;
        long lArr3[] = new long[N];
        boolean bArr[] = new boolean[N];
        FuzzerUtils.init(lArr3, 4254862145L);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr1, 0.207F);
        i6 -= ((int) ((f1--) + (--i6)));
        {
            final long ax$47 = Test.lMeth_check_sum;
            final int ax$48 = i5;
            try {
                Map ax$39 = null;
                long[] ax$42 = new long[]{ 4696527132163941132L, 314339034539598306L, -4148916303982740840L, 5080120627611388065L, 3122964672335438247L, 347830926650759519L, -7042112319816158038L, -6509752953687184415L };
                long[] ax$44 = new long[10];
                for (int ax$37 = -918; ax$37 < (-918 + 18756); ax$37 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$39.put(i5, i5);
                    } catch (Throwable ax$41) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$31 = true;
                    vMeth(((byte) (-17)), -6314341906695545660L);
                    Test.ax$31 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$45 = 0; ax$45 < ax$44.length; ax$45 += 1) {
                            ax$44[ax$45] = ((long) (ax$42[ax$45] & lMeth_check_sum));
                        }
                    } catch (Throwable ax$46) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                Test.lMeth_check_sum = ax$47;
                i5 = ax$48;
            }
        }
        vMeth(by2, Test.instanceCount);
        Test.dFld -= i6;
        d4 = 1;
        do {
            for (d5 = d4; d5 < 3; ++d5) {
                for (i25 = 1; 1 > i25; i25++) {
                    if (i25 != 0) {
                    }
                    i5 >>>= i5;
                    i6 = 5;
                    i6 += i5;
                    lArr3[((int) (d4))] -= ((long) (49.92F));
                    i24 = -9;
                    i24 = ((int) (d5));
                    switch (((int) ((d5 % 1) + 37))) {
                        case 37 :
                            Test.instanceCount = i24;
                            i26 += i25;
                            i5 = i24;
                            Test.instanceCount += i25 * i25;
                            Test.iArrFld[i25 + 1] ^= -52510;
                            i5 >>>= i26;
                            bArr[((int) (d4))] = Test.bFld;
                            Test.instanceCount = Test.instanceCount;
                            fArr1[((int) (d4 + 1))] = s3;
                            i26 >>= ((int) (Test.instanceCount));
                            break;
                        default :
                            i24 ^= i6;
                            Test.iArrFld[((int) (d5 - 1))] = i24;
                            by2 >>= ((byte) (i5));
                            l2 *= ((long) (d4));
                            by2 += ((byte) (((i25 * s3) + l2) - i6));
                            i26 = i24;
                            i5 += i25 | i25;
                            i24 *= i6;
                            i5 += -64134;
                            i6 = s3;
                            s3 <<= ((short) (Test.instanceCount));
                            l2 += ((i25 * i6) + l2) - i25;
                            i24 = i26;
                    }
                }
            }
        } while ((++d4) < 230 );
        long meth_res = ((((((((((((i5 + i6) + Float.floatToIntBits(f1)) + by2) + Double.doubleToLongBits(d4)) + Double.doubleToLongBits(d5)) + i24) + i25) + i26) + s3) + l2) + FuzzerUtils.checkSum(lArr3)) + FuzzerUtils.checkSum(bArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public void mainTest(String[] strArr1) {
        float f = 91.73F;
        float f4 = -2.957F;
        int i = 44363;
        int i1 = 11;
        int i2 = -121;
        int i3 = 6;
        int i4 = 39696;
        int i27 = 18433;
        int i28 = -155;
        int i29 = 6;
        int i30 = 48006;
        int i31 = 215;
        int iArr[][] = new int[N][N];
        double d = -2.114343;
        double dArr[] = new double[N];
        short s4 = -5113;
        long lArr[] = new long[N];
        FuzzerUtils.init(iArr, 3);
        FuzzerUtils.init(lArr, -9206535251022929825L);
        FuzzerUtils.init(dArr, -75.27232);
        Test.instanceCount -= ((long) (-((0 * (f - Test.instanceCount)) * (iFld++))));
        i = 1;
        do {
            i1 = 1;
            do {
                iFld <<= ((int) (Test.instanceCount++));
                for (i2 = 1; i2 < 1; i2++) {
                    i3 = (i3++) - iArr[i2 + 1][i - 1];
                    i3 *= ((int) (((d + i) - (iFld + Test.instanceCount)) * (lArr[i2 + 1] * (i1 * Test.instanceCount))));
                }
                Test.instanceCount += i1;
                i3 += --i3;
                iFld /= ((int) (Integer.reverseBytes(i1) | 1));
            } while ((++i1) < 33 );
        } while ((++i) < 155 );
        iArr[(i4 >>> 1) % N][(i2 >>> 1) % N] |= ((int) (++Test.instanceCount));
        f = ((float) (d));
        {
            final int ax$18 = i29;
            final int ax$19 = this.iFld;
            final int ax$20 = i30;
            final int ax$21 = i2;
            try {
                byte[] ax$8 = new byte[]{ ((byte) (38)), ((byte) (35)), ((byte) (21)), ((byte) (73)), ((byte) (122)), ((byte) (-70)), ((byte) (51)), ((byte) (-105)) };
                byte[] ax$10 = new byte[]{ ((byte) (39)), ((byte) (42)), ((byte) (20)), ((byte) (59)), ((byte) (-93)), ((byte) (-29)) };
                AtomicIntegerArray ax$13 = null;
                for (int ax$7 = -311; ax$7 < (-311 + 1825); ax$7 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$11 = 0; ax$11 < ax$10.length; ax$11 += 1) {
                            ax$10[ax$11] = ((byte) (ax$8[ax$11] >> (-i2)));
                        }
                    } catch (Throwable ax$12) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    iMeth(-1282174246, -788437231);
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$13.compareAndSet(iFld * i29, i30, -123);
                    } catch (Throwable ax$17) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i29 = ax$18;
                this.iFld = ax$19;
                i30 = ax$20;
                i2 = ax$21;
            }
        }
        i4 = ((int) (((++Test.instanceCount) + iMeth(i3, i)) + i));
        iFld = ((int) (2208943362563294663L));
        i27 = 1;
        while ((++i27) < 211) {
            iFld >>= iFld;
            Test.instanceCount = i4;
            i28 = 1;
            while ((++i28) < 24) {
                if (Test.bFld)
                    break;

            }
            Test.dFld = i27;
            i29 = 1;
            do {
                i3 = 13793;
                switch ((i27 % 1) + 67) {
                    case 67 :
                        Test.iArrFld[i27 + 1] *= iFld;
                        i4 = i29;
                        iFld = ((int) (Test.instanceCount));
                        i3 += ((int) (d));
                        Test.instanceCount *= s4;
                        f += i1;
                        break;
                    default :
                        Test.dFld -= i;
                        Test.dFld = Test.instanceCount;
                        Test.instanceCount += i29 | i3;
                }
                i4 <<= i4;
                i4 += i27;
            } while ((++i29) < 24 );
            f4 = 1;
            while ((++f4) < 24) {
                for (i30 = 1; i30 < 1; ++i30) {
                    byte by3 = 51;
                    i3 <<= i30;
                    Test.instanceCount = Test.instanceCount;
                    i31 = ((int) (Test.instanceCount));
                    dArr[i27] += -3;
                    iArr = FuzzerUtils.int2array(N, ((int) (60022)));
                    Test.instanceCount %= Test.instanceCount | 1;
                    i3 += i30 * i30;
                    i3 += i30;
                    switch (((i2 >>> 1) % 5) + 110) {
                        case 110 :
                            i3 += i;
                            iArr[((int) (f4 - 1))][i30 - 1] >>= i27;
                            switch ((((57438 >>> 1) % 7) * 5) + 67) {
                                case 71 :
                                    f += (-37861) + (i30 * i30);
                                    i31 -= i29;
                                    i31 -= i31;
                                    switch (((int) ((f4 % 4) + 29))) {
                                        case 29 :
                                            Test.iArrFld[i27 - 1] >>= ((int) (Test.instanceCount));
                                            d = -2.836F;
                                            Test.instanceCount = -8;
                                            if (Test.bFld)
                                                break;

                                            Test.fArrFld = Test.fArrFld;
                                            Test.iArrFld[i27 + 1] *= i4;
                                            i31 *= ((int) (d));
                                            i31 = i;
                                            i3 = i28;
                                            Test.dFld *= 121;
                                            iFld += i28;
                                            i4 += i30 * i30;
                                            by3 *= ((byte) (i2));
                                            i3 = ((int) (Test.instanceCount));
                                            Test.instanceCount = -4;
                                            break;
                                        case 30 :
                                            iFld |= 91;
                                            iArr[i27][((int) (f4 - 1))] += ((int) (96.111397));
                                            iFld += ((int) (Test.dFld));
                                            lArr[i30 + 1] = i2;
                                            f += i30;
                                            i3 = i2;
                                            f = i1;
                                            i3 &= i30;
                                            break;
                                        case 31 :
                                            i3 |= ((int) (Test.instanceCount));
                                        case 32 :
                                            iArrFld1[((int) (f4))][i30] <<= i2;
                                            break;
                                    }
                                    break;
                                case 91 :
                                    iFld += i30;
                                    break;
                                case 75 :
                                    i3 ^= ((int) (Test.instanceCount));
                                    break;
                                case 72 :
                                case 76 :
                                    i31 -= -12;
                                    break;
                                case 93 :
                                    iFld += ((i30 * i3) + i1) - Test.instanceCount;
                                    break;
                                case 94 :
                                    i4 = i28;
                                    break;
                                default :
                                    Test.instanceCount += i3;
                            }
                            break;
                        case 111 :
                            Test.instanceCount = 7L;
                            break;
                        case 112 :
                            f += -22035;
                            break;
                        case 113 :
                        case 114 :
                            i4 = i28;
                            break;
                        default :
                            i3 *= ((int) (Test.instanceCount));
                    }
                }
            }
        }
        FuzzerUtils.out.println((((("f i i1 = " + Float.floatToIntBits(f)) + ",") + i) + ",") + i1);
        FuzzerUtils.out.println((((("i2 i3 d = " + i2) + ",") + i3) + ",") + Double.doubleToLongBits(d));
        FuzzerUtils.out.println((((("i4 i27 i28 = " + i4) + ",") + i27) + ",") + i28);
        FuzzerUtils.out.println((((("i29 s4 f4 = " + i29) + ",") + s4) + ",") + Float.floatToIntBits(f4));
        FuzzerUtils.out.println((((("i30 i31 iArr = " + i30) + ",") + i31) + ",") + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println((("lArr dArr = " + FuzzerUtils.checkSum(lArr)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println((((("Test.instanceCount iFld Test.dFld = " + Test.instanceCount) + ",") + iFld) + ",") + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println((((("Test.bFld Test.iArrFld Test.fArrFld = " + (Test.bFld ? 1 : 0)) + ",") + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iArrFld1 = " + FuzzerUtils.checkSum(iArrFld1));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$31 = false;
}