// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.InetSocketAddress;

public class Test {
    public static final int N = 256;

    public static volatile long instanceCount = 1087597635985022114L;

    public static double dFld = 0.122058;

    public static int iFld1 = -200;

    public float fFld1 = 1.965F;

    public static short sFld = 16738;

    public static boolean bArrFld[] = new boolean[N];

    public static int iArrFld[] = new int[N];

    public double dArrFld[] = new double[N];

    public long lArrFld[] = new long[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.iArrFld, 86);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i3) {
        int i4 = -154;
        int i5 = -36344;
        int i8 = -157;
        int i9 = 20651;
        int i10 = -9;
        int i11 = 6;
        int iArr[] = new int[N];
        short s = 31453;
        float f = -1.87F;
        byte by2 = -83;
        byte byArr[] = new byte[N];
        long lArr[] = new long[N];
        FuzzerUtils.init(iArr, 4);
        FuzzerUtils.init(lArr, 147L);
        FuzzerUtils.init(byArr, ((byte) (-47)));
        for (i4 = 2; 105 > i4; i4 += 3) {
            boolean b = false;
            iArr[i4] += i4;
            i3 = i3;
            Test.instanceCount <<= i4;
            if (b)
                continue;

            i5 = i5;
            i8 = 1;
            do {
                s -= ((short) (i5));
            } while ((++i8) < 15 );
            i9 = 1;
            do {
                b = b;
                i3 += i5;
                lArr[i9] += ((long) (f));
                byArr = byArr;
                i3 += i9 * i4;
                Test.bArrFld[i9] = false;
                for (i10 = 1; i10 < 1; ++i10) {
                    i5 = i5;
                    i5 >>= s;
                    i3 = i3;
                    Test.instanceCount -= Test.instanceCount;
                    Test.instanceCount = i5;
                    {
                        final int ax$16 = i11;
                        try {
                            byte[] ax$7 = new byte[0];
                            byte[] ax$9 = new byte[0];
                            InputStream ax$11 = null;
                            String ax$12 = "Math.max(+1.0d, -1.0d)";
                            boolean ax$6 = false;
                            for (int ax$5 = -318; ax$5 < (-318 + 2970); ax$5 += 1) {
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    for (; i11 < ax$9.length; i11++) {
                                        ax$9[i11] = ((byte) (ax$7[i11] << (i11 & 3)));
                                    }
                                } catch (Throwable ax$10) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                                if (!ax$6) {
                                    i5 <<= s;
                                    ax$6 = true;
                                }
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    for (int ax$13 = 0; ax$13 < ax$12.length(); ax$13++) {
                                        int ax$14 = ax$11.read();
                                        if (ax$14 != ((int) (ax$12.charAt(ax$13)))) {
                                        }
                                    }
                                } catch (Throwable ax$15) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                            }
                        } finally {
                            i11 = ax$16;
                        }
                    }
                    Test.instanceCount = i5;
                    Test.instanceCount -= i3;
                    switch (((i9 % 2) * 5) + 7) {
                        case 15 :
                            Test.instanceCount += i10 + i3;
                            i11 = 7;
                            i11 += ((i10 * i10) + f) - i9;
                            iArr = iArr;
                            if (b) {
                                i3 = i4;
                                by2 += ((byte) (i10 + i5));
                                iArr[i4 + 1] >>= i9;
                                Test.instanceCount += i8;
                                i11 = s;
                                Test.instanceCount *= ((long) (Test.dFld));
                                if (true)
                                    continue;

                            } else {
                                i5 += ((i10 * s) + i3) - by2;
                            }
                        case 9 :
                            iArr[i9] += ((int) (Test.instanceCount));
                            break;
                    }
                }
            } while ((++i9) < 15 );
        }
        long meth_res = (((((((((((i3 + i4) + i5) + i8) + s) + i9) + Float.floatToIntBits(f)) + i10) + i11) + by2) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(byArr);
        iMeth1_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static int iMeth(int i1, int i2) {
        iMeth1(102);
        long meth_res = i1 + i2;
        iMeth_check_sum += meth_res;
        {
            final int ax$4 = Test.iFld1;
            try {
                byte ax$2 = -5;
                for (int ax$0 = -708; ax$0 < (-708 + 6251); ax$0 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (iFld1 == 10) {
                            ax$2++;
                        }
                    } catch (Throwable ax$3) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                Test.iFld1 = ax$4;
            }
        }
        return ((int) (meth_res));
    }

    public static void vMeth(byte by, byte by1, int i) {
        int i12 = 80;
        int i13 = -44;
        int i14 = 0;
        int i15 = -9;
        int i16 = -3;
        int i17 = -10818;
        long l = 2087150249L;
        long lArr1[] = new long[N];
        boolean b1 = true;
        short s1 = 1314;
        short sArr[] = new short[N];
        float fArr[] = new float[N];
        FuzzerUtils.init(fArr, 34.901F);
        FuzzerUtils.init(lArr1, 778900440L);
        FuzzerUtils.init(sArr, ((short) (-26726)));
        Test.dFld -= -1.120371;
        {
            try {
                InetSocketAddress ax$19 = new InetSocketAddress(0);
                DatagramPacket ax$20 = new DatagramPacket(new byte[64], 64);
                boolean ax$18 = false;
                for (int ax$17 = -827; ax$17 < (-827 + 16384); ax$17 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (!ax$20.getSocketAddress().equals(ax$19));
                    } catch (Throwable ax$21) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    if (!ax$18) {
                        i = ((int) (Test.dFld));
                        ax$18 = true;
                    }
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        InetAddress ax$22 = InetAddress.getByName(":");
                    } catch (Throwable ax$23) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        iMeth(i, i);
        Test.iFld1 -= Test.iFld1;
        for (float f1 : fArr) {
            for (i12 = 1; 2 > i12; ++i12) {
                Test.dFld += 1;
                Test.iFld1 *= ((int) (f1));
                Test.instanceCount = Test.instanceCount;
                Test.iFld1 = ((int) (f1));
                i14 = 1;
                while ((++i14) < 2) {
                    try {
                        Test.iFld1 = (-57) / i15;
                        i13 = i12 / (-22327);
                        Test.iFld1 = 34572 % i14;
                    } catch (ArithmeticException a_e) {
                    }
                    i16 >>= i15;
                    Test.iFld1 += i14 * i14;
                    i16 *= i;
                    Test.iArrFld[i12] = Test.iFld1;
                    i16 -= i14;
                    i15 += 3507 + (i14 * i14);
                    i -= Test.iFld1;
                    i13 += (-172) + (i14 * i14);
                    Test.iArrFld[i14] >>= i;
                    i16 = Test.iFld1;
                    Test.instanceCount = i15;
                    Test.iArrFld[i14] = ((int) (f1));
                    i -= i13;
                }
            }
            Test.instanceCount = 436451243L;
            for (l = 1; l < 2; l++) {
                i += ((int) (l * l));
                by = ((byte) (l));
                i17 += ((int) (l));
                i13 += ((int) (((l * i15) + i13) - f1));
                i16 = Test.iFld1;
                b1 = b1;
                switch (((int) ((l % 9) + 126))) {
                    case 126 :
                        i17 *= i16;
                        i13 += ((int) (((l * i15) + i17) - i17));
                        fArr[((int) (l))] += i16;
                        break;
                    case 127 :
                        i13 >>= i16;
                    case 128 :
                        f1 += ((l * i13) + l) - i13;
                    case 129 :
                        lArr1[((int) (l - 1))] = i17;
                    case 130 :
                        sArr[((int) (l + 1))] = ((short) (Test.dFld));
                        break;
                    case 131 :
                        f1 *= l;
                        break;
                    case 132 :
                        s1 += ((short) (l * l));
                    case 133 :
                        Test.iArrFld[((int) (l + 1))] += -118;
                    case 134 :
                        Test.dFld *= l;
                }
            }
        }
        vMeth_check_sum += (((((((((((((by + by1) + i) + i12) + i13) + i14) + i15) + i16) + l) + i17) + (b1 ? 1 : 0)) + s1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(lArr1)) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr3) {
        byte by3 = -114;
        byte byArr1[] = new byte[N];
        int i18 = 679;
        int i19 = -31925;
        int i20 = 14;
        int i21 = -3185;
        int i22 = -172;
        boolean b2 = true;
        long l1 = 6117511546525632678L;
        float fArr1[] = new float[N];
        FuzzerUtils.init(fArr1, -1.352F);
        FuzzerUtils.init(byArr1, ((byte) (50)));
        vMeth(((byte) (-67)), by3, Test.iFld1);
        try {
            for (i18 = 133; i18 > 8; i18 -= 2) {
                if (b2)
                    continue;

                i20 = 1;
                while ((++i20) < 81) {
                    fFld1 *= fFld1;
                    for (i21 = 1; i21 < 1; i21++) {
                        fFld1 *= ((float) (Test.dFld));
                        Test.instanceCount -= -7;
                        Test.instanceCount += i21 + i22;
                        fFld1 -= i18;
                        b2 = b2;
                        i19 = by3;
                        i22 = i20;
                        switch ((i18 % 7) + 9) {
                            case 9 :
                                switch (((i18 % 1) * 5) + 28) {
                                    case 32 :
                                        Test.iArrFld[i20 + 1] -= i20;
                                        i22 += ((int) (fFld1));
                                        b2 = b2;
                                        i22 *= 4;
                                        fArr1 = FuzzerUtils.float1array(N, ((float) (2.142F)));
                                        Test.iArrFld[i18 - 1] = 133;
                                        Test.instanceCount -= Test.iFld1;
                                        Test.instanceCount *= Test.sFld;
                                        Test.instanceCount -= i20;
                                        Test.iArrFld = Test.iArrFld;
                                        Test.iFld1 += i21;
                                        break;
                                    default :
                                        Test.iFld1 = i22;
                                        Test.instanceCount += -15284;
                                        Test.instanceCount -= Test.instanceCount;
                                        Test.instanceCount += i21 ^ Test.instanceCount;
                                        i19 += i21 | ((long) (fFld1));
                                        i22 <<= Test.iFld1;
                                        i19 -= i20;
                                        Test.instanceCount *= 28089;
                                        i22 += i21 * i21;
                                        if (b2)
                                            continue;

                                }
                                if (b2)
                                    continue;

                                Test.iFld1 -= i21;
                                Test.instanceCount += ((i21 * i21) + Test.iFld1) - Test.iFld1;
                                Test.dFld -= Test.sFld;
                                i19 <<= ((int) (Test.instanceCount));
                                if (b2) {
                                    by3 += ((byte) (i21 * i21));
                                    Test.iFld1 += 1206;
                                    dArrFld[i20] *= i22;
                                    Test.instanceCount = i21;
                                    fFld1 *= -61144;
                                    i22 += ((i21 * Test.sFld) + i22) - i22;
                                    Test.dFld *= Test.instanceCount;
                                    Test.iArrFld[i21 + 1] -= i19;
                                    i22 += ((i21 * Test.iFld1) + i22) - Test.instanceCount;
                                    Test.dFld += 12;
                                } else {
                                    fFld1 = by3;
                                }
                                Test.dFld = i21;
                            case 10 :
                                fFld1 = i19;
                                fFld1 += ((i21 * i21) + l1) - i19;
                                byArr1[i18] <<= ((byte) (i20));
                                try {
                                    i19 = (-64966) % i22;
                                    i22 = (-31503) % i21;
                                    Test.iArrFld[i18 + 1] = i21 % i20;
                                } catch (ArithmeticException a_e) {
                                }
                                Test.iFld1 = i20;
                                Test.dFld -= 7848;
                                Test.iFld1 += ((int) (fFld1));
                                break;
                            case 11 :
                                Test.iArrFld[i21 - 1] /= ((int) (15843L));
                                i19 += ((int) (fFld1));
                                Test.iArrFld = FuzzerUtils.int1array(N, ((int) (136)));
                                l1 <<= 93;
                                break;
                            case 12 :
                                dArrFld[i18 - 1] = i19;
                                by3 += ((byte) (i21 * i21));
                                i22 *= i21;
                            case 13 :
                                fFld1 += i22;
                                break;
                            case 14 :
                                Test.instanceCount = i22;
                                i19 = Test.iFld1;
                                break;
                            case 15 :
                                lArrFld[i21 - 1] -= 154;
                                Test.dFld *= i19;
                                Test.dFld -= Test.dFld;
                                break;
                        }
                    }
                }
            }
        } catch (UserDefinedExceptionTest exc1) {
            Test.iArrFld[(i19 >>> 1) % N] <<= ((int) (Test.instanceCount));
        }
        FuzzerUtils.out.println((((("by3 i18 i19 = " + by3) + ",") + i18) + ",") + i19);
        FuzzerUtils.out.println((((("b2 i20 i21 = " + (b2 ? 1 : 0)) + ",") + i20) + ",") + i21);
        FuzzerUtils.out.println((((("i22 l1 fArr1 = " + i22) + ",") + l1) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("byArr1 = " + FuzzerUtils.checkSum(byArr1));
        FuzzerUtils.out.println((((("Test.instanceCount Test.dFld Test.iFld1 = " + Test.instanceCount) + ",") + Double.doubleToLongBits(Test.dFld)) + ",") + Test.iFld1);
        FuzzerUtils.out.println((((("fFld1 Test.sFld Test.bArrFld = " + Float.floatToIntBits(fFld1)) + ",") + Test.sFld) + ",") + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println((((("Test.iArrFld dArrFld lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld))) + ",") + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr2) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr2);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}