// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 13029L;

    public int iFld = -14;

    public static float fFld = -29.677F;

    public static short sFld = -32158;

    public static boolean bFld = false;

    public long lArrFld[] = new long[N];

    public volatile double dArrFld[] = new double[N];

    public static long lMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3, int i4) {
        int i5 = 15673;
        int i6 = 10621;
        int i7 = -228;
        int i8 = -179;
        int i9 = 17625;
        int i10 = 44;
        int i11 = -3;
        int i12 = 56319;
        int iArr1[] = new int[N];
        boolean b = true;
        boolean bArr[] = new boolean[N];
        double d = 108.67007;
        FuzzerUtils.init(iArr1, -1);
        FuzzerUtils.init(bArr, true);
        i3 = i3;
        for (i5 = 3; i5 < 170; i5++) {
            for (i7 = 1; i7 < 3; i7++) {
                byte by2 = -61;
                switch (((i7 % 9) * 5) + 48) {
                    case 49 :
                        Test.instanceCount += i7 ^ ((long) (Test.fFld));
                        b = true;
                        Test.fFld -= ((float) (d));
                        i8 <<= i3;
                        by2 += ((byte) (i7));
                        Test.instanceCount += i7 * i7;
                        i6 += i6;
                        break;
                    case 66 :
                        if (b)
                            continue;

                        i8 = ((int) (Test.fFld));
                        for (i9 = 1; i9 < 2; i9++) {
                            i3 += ((i9 * i7) + i5) - Test.instanceCount;
                            Test.instanceCount += i9;
                            d *= -177;
                            d -= i10;
                            try {
                                i4 = i4 / i5;
                                i6 = i9 % (-166);
                                i4 = i3 % (-646722813);
                            } catch (ArithmeticException a_e) {
                            }
                            try {
                                i3 = iArr1[i5 + 1] / (-111);
                                iArr1[i5 + 1] = i3 % (-59562);
                                i3 = 167 % i5;
                            } catch (ArithmeticException a_e) {
                            }
                            Test.instanceCount += i9 + i5;
                            bArr = bArr;
                            by2 *= ((byte) (i7));
                            Test.fFld += i7;
                            iArr1[i5 - 1] -= ((int) (-105.90765));
                            i4 = ((int) (Test.instanceCount));
                            iArr1[i9 + 1] += ((int) (Test.fFld));
                        }
                        i4 += i7;
                        i8 += i7;
                        i4 >>= i6;
                        for (i11 = 1; 2 > i11; i11++) {
                            Test.fFld = Test.fFld;
                            i8 += i12;
                            iArr1[i5] -= ((int) (Test.instanceCount));
                            Test.fFld -= -63784;
                            i4 += ((i11 * i4) + Test.instanceCount) - i6;
                            i3 = i11;
                        }
                    case 52 :
                    case 73 :
                        bArr[i7] = b;
                    case 85 :
                        i4 += ((int) (47.135F));
                        break;
                    case 91 :
                        Test.fFld *= i10;
                        break;
                    case 71 :
                        Test.instanceCount -= i5;
                        break;
                    case 76 :
                        Test.instanceCount = Test.instanceCount;
                    case 63 :
                        iArr1[i5] >>= ((int) (Test.instanceCount));
                        break;
                    default :
                        Test.instanceCount = i5;
                }
            }
        }
        vMeth_check_sum += ((((((((((((i3 + i4) + i5) + i6) + i7) + i8) + (b ? 1 : 0)) + Double.doubleToLongBits(d)) + i9) + i10) + i11) + i12) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth(float f, int i1, int i2) {
        if (Test.ax$0) {
            final long ax$4 = Test.iMeth_check_sum;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                if (iMeth_check_sum == (iMeth_check_sum / 2)) {
                } else {
                }
            } catch (Throwable ax$3) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iMeth_check_sum = ax$4;
            return 428247966;
        }
        int i13 = 1;
        int i14 = 13;
        int i15 = 5296;
        int i16 = -6;
        int i17 = 9;
        int i18 = 8193;
        int i19 = -63231;
        int i20 = 14;
        int i21 = 240;
        int i22 = -44750;
        int iArr2[][] = new int[N][N];
        double d1 = -1.10208;
        byte by3 = 24;
        long lArr[][] = new long[N][N];
        float fArr[] = new float[N];
        FuzzerUtils.init(lArr, 1L);
        FuzzerUtils.init(fArr, 1.1009F);
        FuzzerUtils.init(iArr2, 48162);
        vMeth(i2, i2);
        i1 += i1;
        i2 -= ((int) (Test.fFld));
        i13 = 1;
        while ((++i13) < 233) {
            i14 = 1;
            while ((++i14) < 3) {
                Test.fFld += i1;
                Test.sFld += ((short) (i1));
                Test.fFld = 111;
            }
            i1 <<= i1;
            Test.sFld = ((short) (Test.instanceCount));
            i2 -= i1;
            i1 = i14;
            Test.fFld += i13;
            for (i15 = 1; i15 < 3; i15 += 3) {
                i1 += i15;
                Test.bFld = Test.bFld;
                Test.fFld = -179310148L;
            }
            i1 = ((int) (26928L));
        }
        for (i17 = 4; i17 < 125; i17++) {
            i2 -= ((int) (d1));
            by3 += ((byte) (8 + (i17 * i17)));
            for (i19 = 1; 5 > i19; ++i19) {
                f = i13;
                lArr = FuzzerUtils.long2array(N, ((long) (21L)));
                i2 = i20;
                i1 += i19 * i19;
                for (i21 = i19; i21 < 2; ++i21) {
                    switch ((i17 % 1) + 80) {
                        case 80 :
                            i2 += i1;
                            i18 ^= i17;
                            i20 >>>= i13;
                            switch ((((i19 >>> 1) % 6) * 5) + 12) {
                                case 14 :
                                    i18 *= ((int) (Test.instanceCount));
                                    fArr[i19 - 1] = i14;
                                    i18 <<= i17;
                                    i1 -= by3;
                                    i22 = 0;
                                    break;
                                case 27 :
                                    iArr2[i21][i19 + 1] = -3;
                                    break;
                                case 16 :
                                    i16 = ((int) (1.35F));
                                case 30 :
                                    d1 += i18;
                                    break;
                                case 21 :
                                    if (Test.bFld)
                                        break;

                                    break;
                                case 35 :
                                    if (i17 != 0) {
                                    }
                                default :
                                    fArr[i21 + 1] -= i2;
                            }
                            break;
                    }
                }
            }
        }
        long meth_res = ((((((((((((((((Float.floatToIntBits(f) + i1) + i2) + i13) + i14) + i15) + i16) + i17) + i18) + Double.doubleToLongBits(d1)) + by3) + i19) + i20) + i21) + i22) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static long lMeth(byte by1) {
        int i = -24;
        {
            try {
                Thread ax$17 = new Thread();
                for (int ax$16 = -810; ax$16 < (-810 + 11613); ax$16 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$17 = Thread.currentThread();
                    } catch (Throwable ax$18) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        int iArr[] = new int[N];
        FuzzerUtils.init(iArr, 147);
        iArr[(i >>> 1) % N] -= iArr[((-108) >>> 1) % N]++;
        {
            final long ax$15 = Test.instanceCount;
            try {
                long[] ax$6 = new long[64];
                int ax$8 = 1675962871;
                int[] ax$11 = new int[]{ 618607165, -1451592712, -350551435, -528621073, 1819354725, -694715396, 873717996 };
                for (int ax$5 = -130; ax$5 < (-130 + 15471); ax$5 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$9 = 1; ax$9 <= ax$8; ax$9++) {
                            instanceCount += ax$6[ax$9 - 1];
                        }
                    } catch (Throwable ax$10) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    iMeth(0.49047333F, -1868098651, 1287013063);
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$12 = 0; ax$12 <= 3; ax$12++) {
                            for (int ax$13 = 0; ax$13 <= 3; ax$13++) {
                                ax$11[ax$12 * ax$13] += 1;
                            }
                        }
                    } catch (Throwable ax$14) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                Test.instanceCount = ax$15;
            }
        }
        i -= ((int) ((((-86) - Test.instanceCount) - (i * Test.instanceCount)) * iMeth(Test.fFld, -3955, i)));
        long meth_res = (by1 + i) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return ((long) (meth_res));
    }

    public void mainTest(String[] strArr1) {
        byte by = -12;
        byte byArr[] = new byte[N];
        int i23 = 240;
        int i24 = -145;
        int i25 = 11;
        int i26 = 97;
        int i27 = -23553;
        int i28 = 11733;
        int i29 = 55;
        int i30 = 59;
        int i31 = 184;
        int i32 = 14;
        int iArr3[][] = new int[N][N];
        double d2 = -91.82296;
        float f1 = -14.774F;
        long l = -2157436410L;
        short sArr[] = new short[N];
        FuzzerUtils.init(iArr3, -133);
        FuzzerUtils.init(sArr, ((short) (32627)));
        FuzzerUtils.init(byArr, ((byte) (70)));
        iFld &= ((int) (by + lMeth(by)));
        iFld >>= iFld;
        for (i23 = 3; i23 < 243; i23++) {
            i25 = 1;
            while ((++i25) < 21) {
                i24 = iFld;
                iArr3[i23][i23] = ((int) (Test.instanceCount));
                i24 -= by;
                switch ((i23 % 1) + 42) {
                    case 42 :
                        d2 += i24;
                        i24 *= i25;
                        break;
                }
                iArr3[i23 + 1][i25] *= ((int) (Test.instanceCount));
                switch (((i25 % 9) * 5) + 99) {
                    case 144 :
                        switch ((i25 % 4) + 26) {
                            case 26 :
                                Test.fFld *= i24;
                                Test.instanceCount += 39;
                                i24 >>>= ((int) (Test.instanceCount));
                                iFld += ((int) ((-2818399184672101004L) + (i25 * i25)));
                                iFld &= -176;
                                Test.instanceCount >>= iFld;
                                for (f1 = i23; f1 < 1; f1++) {
                                    i24 = i23;
                                    i24 <<= ((int) (223152600L));
                                    i24 -= 29490;
                                    i26 += ((int) (f1 * f1));
                                    iFld >>= i23;
                                    iArr3[((int) (f1))][i25 - 1] = iFld;
                                    Test.instanceCount -= ((long) (f1));
                                    Test.instanceCount = iFld;
                                }
                                iFld = ((int) (-1L));
                                i26 += -52;
                            case 27 :
                            case 28 :
                                i27 = 1;
                                while ((++i27) < 1) {
                                    if (Test.bFld)
                                        continue;

                                    try {
                                        iArr3[i23][i27 - 1] = i24 / 7728;
                                        iFld = i25 / iArr3[i23 + 1][i25 + 1];
                                        iFld = (-33367) % iFld;
                                    } catch (ArithmeticException a_e) {
                                    }
                                }
                                break;
                            case 29 :
                                d2 = -145;
                                iArr3[i23 - 1] = iArr3[i23 + 1];
                                if (Test.bFld)
                                    break;

                                lArrFld[i23 - 1] *= by;
                                iArr3[i23 - 1][i25 + 1] = i23;
                                sArr[i23] += ((short) (-138));
                                Test.fFld += 22621;
                                break;
                        }
                        for (l = 1; l > 1; l--) {
                            i26 *= i26;
                            iArr3[i25 + 1] = iArr3[((int) (l + 1))];
                            iArr3[i25][i23] = i25;
                            Test.fFld += 9 + (l * l);
                            i28 += iFld;
                            Test.instanceCount *= ((long) (1.904F));
                        }
                        for (i29 = 1; i29 < 1; ++i29) {
                            lArrFld[i29 - 1] = 96;
                            i24 = ((int) (l));
                            byArr[i25 + 1] >>= ((byte) (iFld));
                            iArr3[i23 + 1][i25 - 1] %= 144;
                            iFld = iFld;
                        }
                        i28 *= ((int) (l));
                        dArrFld = dArrFld;
                        byArr[i25 - 1] *= ((byte) (100));
                        for (i31 = 1; i31 > i25; --i31) {
                            i30 >>= by;
                            i32 = ((int) (l));
                            i28 += i31;
                            if (Test.bFld) {
                                switch ((((-120) >>> 1) % 3) + 47) {
                                    case 47 :
                                        iArr3[i23][i31] = ((int) (Test.instanceCount));
                                        i32 += ((i31 * iFld) + f1) - by;
                                        Test.bFld = Test.bFld;
                                        break;
                                    case 48 :
                                        i30 ^= Test.sFld;
                                        i30 = i24;
                                        i28 += i31 + i27;
                                        Test.instanceCount = Test.instanceCount;
                                        i30 >>= ((int) (Test.instanceCount));
                                        i24 -= -23014;
                                        Test.instanceCount *= Test.instanceCount;
                                        i28 = i29;
                                        if (Test.bFld)
                                            break;

                                        Test.fFld *= f1;
                                        break;
                                    case 49 :
                                        i30 = i31;
                                        break;
                                    default :
                                        Test.instanceCount = Test.sFld;
                                }
                            } else if (Test.bFld) {
                                iFld = iFld;
                            }
                        }
                        break;
                    case 105 :
                        if (Test.bFld)
                            break;

                        break;
                    case 135 :
                        Test.instanceCount += i25;
                        break;
                    case 142 :
                    case 109 :
                        Test.instanceCount *= ((long) (d2));
                    case 103 :
                        by = ((byte) (i28));
                        break;
                    case 102 :
                        i28 %= -43761;
                        break;
                    case 140 :
                        iArr3[i23][i23] >>= iFld;
                    case 120 :
                }
            }
        }
        FuzzerUtils.out.println((((("by i23 i24 = " + by) + ",") + i23) + ",") + i24);
        FuzzerUtils.out.println((((("i25 d2 f1 = " + i25) + ",") + Double.doubleToLongBits(d2)) + ",") + Float.floatToIntBits(f1));
        FuzzerUtils.out.println((((("i26 i27 l = " + i26) + ",") + i27) + ",") + l);
        FuzzerUtils.out.println((((("i28 i29 i30 = " + i28) + ",") + i29) + ",") + i30);
        FuzzerUtils.out.println((((("i31 i32 iArr3 = " + i31) + ",") + i32) + ",") + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println((("sArr byArr = " + FuzzerUtils.checkSum(sArr)) + ",") + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println((((("Test.instanceCount iFld Test.fFld = " + Test.instanceCount) + ",") + iFld) + ",") + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println((((("Test.sFld Test.bFld lArrFld = " + Test.sFld) + ",") + (Test.bFld ? 1 : 0)) + ",") + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}