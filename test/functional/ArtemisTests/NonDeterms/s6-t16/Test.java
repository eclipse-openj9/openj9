// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.text.NumberFormat;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.util.GregorianCalendar;
import java.util.concurrent.atomic.AtomicInteger;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -4L;

    public static short sFld = -1912;

    public int iFld = 31786;

    public double dFld = 121.81637;

    public float fFld = 20.425F;

    public static boolean bFld = false;

    public byte byFld = 56;

    public int iArrFld[] = new int[N];

    public long lArrFld[] = new long[N];

    public static float fArrFld[] = new float[N];

    public double dArrFld[] = new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.269F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public void vMeth2(int i4, double d) {
        int i5 = 160;
        int i6 = 5;
        int i7 = 76;
        int i8 = 12;
        int i9 = 242;
        int i10 = 117;
        int i11 = -21276;
        int i12 = -7208;
        int i13 = 43370;
        int i14 = -178;
        int iArr[] = new int[N];
        int iArr1[] = new int[N];
        float f = 1.983F;
        byte by = -64;
        boolean b = true;
        long lArr2[] = new long[N];
        double dArr[] = new double[N];
        FuzzerUtils.init(lArr2, 7238140788966682190L);
        FuzzerUtils.init(dArr, -1.114525);
        FuzzerUtils.init(iArr, -49);
        FuzzerUtils.init(iArr1, -123);
        i5 = 192;
        do {
            Test.sFld <<= ((short) (Test.instanceCount));
        } while ((--i5) > 0 );
        try {
            lArr2[((-35064) >>> 1) % N] ^= -227;
            for (i6 = 2; i6 < 145; ++i6) {
                iArrFld[i6] *= i5;
                for (i8 = 1; i8 < 4; i8++) {
                    if (i6 != 0) {
                        vMeth2_check_sum += (((((((((((((((((i4 + Double.doubleToLongBits(d)) + i5) + i6) + i7) + i8) + i9) + i10) + i11) + Float.floatToIntBits(f)) + by) + i12) + i13) + i14) + (b ? 1 : 0)) + FuzzerUtils.checkSum(lArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    i4 = i8;
                    for (i10 = 1; i10 < 2; ++i10) {
                        i11 = i7;
                        f = i9;
                        i4 = 2;
                        iArrFld = iArrFld;
                        try {
                            iArrFld[i10 - 1] = 244 / iArrFld[i10 + 1];
                            iArrFld[i10 + 1] = iArrFld[i10] / 238;
                            i9 = (-149) / iArrFld[i6];
                        } catch (ArithmeticException a_e) {
                        }
                        iArrFld[i10] += ((int) (f));
                        Test.instanceCount += by;
                        switch (((i8 % 1) * 5) + 91) {
                            case 95 :
                                i9 += i10 + Test.instanceCount;
                                break;
                            default :
                                Test.instanceCount += i10;
                                i11 *= 5563;
                        }
                        f = i9;
                    }
                }
                Test.instanceCount = -61139;
                for (i12 = i6; 4 > i12; ++i12) {
                    dArr[i12] -= Test.instanceCount;
                    i9 = ((int) (Test.instanceCount));
                    i14 = 1;
                    while ((++i14) < 1) {
                        iArr = iArrFld;
                        if (b)
                            break;

                        i7 += ((i14 * i11) + i13) - i10;
                        switch ((i12 % 8) + 1) {
                            case 1 :
                                i13 += ((int) (f));
                                i13 = i9;
                                iArrFld[i12] -= i10;
                                Test.instanceCount *= i7;
                                iArr1[i6 - 1] %= by;
                                b = b;
                                break;
                            case 2 :
                                f *= i6;
                                break;
                            case 3 :
                                i11 += ((int) (f));
                                break;
                            case 4 :
                                i11 >>>= 1;
                                break;
                            case 5 :
                                i7 += i7;
                                break;
                            case 6 :
                                i9 = i11;
                            case 7 :
                                iArr1[i6] -= ((int) (Test.instanceCount));
                                break;
                            case 8 :
                                f = Test.instanceCount;
                                break;
                        }
                    }
                }
            }
        } catch (ArithmeticException exc1) {
            i11 >>= i7;
        }
        vMeth2_check_sum += (((((((((((((((((i4 + Double.doubleToLongBits(d)) + i5) + i6) + i7) + i8) + i9) + i10) + i11) + Float.floatToIntBits(f)) + by) + i12) + i13) + i14) + (b ? 1 : 0)) + FuzzerUtils.checkSum(lArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth1(int i3) {
        if (Test.ax$0) {
            NumberFormat ax$1 = null;
            int[] ax$2 = new int[]{ 0x11, 0x22, 0x33, 0x44, 0x88, 0x99, 0xaa, 0xbb };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                for (int ax$3 = 0; ax$3 < ax$2.length; ax$3++) {
                    String ax$4 = ax$1.format(new Integer(ax$2[ax$3]));
                    String ax$5 = ax$1.format(new AtomicInteger(ax$2[ax$3]));
                    if (!ax$4.equals(ax$5)) {
                    }
                }
            } catch (Throwable ax$6) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return;
        }
        boolean b1 = true;
        int i15 = -9;
        int i16 = 34872;
        int i17 = -2179;
        int i18 = -14;
        int i19 = -1203;
        long l1 = 157L;
        byte by1 = -45;
        float f1 = 3.98F;
        float fArr[] = new float[N];
        FuzzerUtils.init(fArr, 9.29F);
        i3 = --i3;
        vMeth2(i3, -1.117554);
        b1 = b1;
        i15 = 1;
        do {
            l1 = 1;
            do {
                i3 += ((int) (l1));
                iArrFld[i15 + 1] -= -27223;
                lArrFld[i15 + 1] >>= i15;
                Test.sFld = ((short) (l1));
            } while ((++l1) < 3 );
            i3 = ((int) (l1));
            i3 = i3;
            i3 = ((int) (Test.instanceCount));
            i3 -= -14127;
            i3 -= -2145;
            if (true) {
                for (i16 = i15; i16 < 3; ++i16) {
                    for (i18 = 1; i18 < 1; ++i18) {
                        if (b1) {
                            if (i17 != 0) {
                                vMeth1_check_sum += (((((((((i3 + (b1 ? 1 : 0)) + i15) + l1) + i16) + i17) + i18) + i19) + by1) + Float.floatToIntBits(f1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                return;
                            }
                            lArrFld[i15 + 1] = i15;
                            i17 = by1;
                            i17 += i15;
                            Test.sFld = ((short) (-18553));
                            iFld >>= i15;
                            dFld %= ((long) (f1)) | 1;
                            Test.instanceCount *= l1;
                            try {
                                i3 = i17 % i19;
                                i19 = (-24624) / i18;
                                i3 = (-182) / iFld;
                            } catch (ArithmeticException a_e) {
                            }
                        } else if (b1) {
                            Test.instanceCount += i18 | i15;
                            i19 -= i19;
                            Test.instanceCount = by1;
                            i3 = i19;
                            b1 = b1;
                            if (b1)
                                continue;

                            if (i16 != 0) {
                                vMeth1_check_sum += (((((((((i3 + (b1 ? 1 : 0)) + i15) + l1) + i16) + i17) + i18) + i19) + by1) + Float.floatToIntBits(f1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                return;
                            }
                            i19 += i18 * i15;
                            fArr[i18] -= f1;
                            Test.instanceCount += i18 * i18;
                            vMeth1_check_sum += (((((((((i3 + (b1 ? 1 : 0)) + i15) + l1) + i16) + i17) + i18) + i19) + by1) + Float.floatToIntBits(f1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        } else {
                            Test.instanceCount += 29599;
                        }
                    }
                }
            } else {
                i17 += i19;
            }
        } while ((++i15) < 246 );
        vMeth1_check_sum += (((((((((i3 + (b1 ? 1 : 0)) + i15) + l1) + i16) + i17) + i18) + i19) + by1) + Float.floatToIntBits(f1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth(long l, int i1, int i2) {
        int i20 = 9;
        int i21 = 230;
        int i22 = -63381;
        int i23 = -242;
        int i24 = -8;
        int i25 = 8643;
        int i26 = -222;
        int i27 = -192;
        int i28 = -60795;
        int i29 = 0;
        int i30 = -7;
        int i31 = -68;
        double d1 = 119.27638;
        double dArr1[] = new double[N];
        FuzzerUtils.init(dArr1, -2.56101);
        i1 -= -(++i1);
        {
            final long ax$19 = Test.vMeth_check_sum;
            final int ax$20 = i20;
            final int ax$21 = i31;
            final int ax$22 = i27;
            try {
                LocalDateTime ax$10 = null;
                ZonedDateTime ax$11 = null;
                GregorianCalendar ax$12 = new GregorianCalendar();
                short[] ax$14 = new short[]{ ((short) (-2049)), ((short) (-26353)), ((short) (6701)), ((short) (14705)), ((short) (11581)), ((short) (11603)), ((short) (-12598)) };
                short[] ax$17 = new short[]{ 20, 10, 0, -10, -20 };
                for (int ax$7 = -757; ax$7 < (-757 + 9961); ax$7 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if ((ax$12.getTimeInMillis() != ax$11.toInstant().toEpochMilli()) || (!ax$12.equals(GregorianCalendar.from(ax$11)))) {
                        }
                    } catch (Throwable ax$13) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    vMeth1(-1331141134);
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$17[i20] = ((short) (ax$14[i20] / i31));
                    } catch (Throwable ax$18) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                Test.vMeth_check_sum = ax$19;
                i20 = ax$20;
                i31 = ax$21;
                i27 = ax$22;
            }
        }
        vMeth1(-41);
        iArrFld[(i2 >>> 1) % N] -= iFld;
        for (i20 = 6; i20 < 197; ++i20) {
            i1 += iFld;
            i22 = 1;
            do {
                for (i23 = 1; i23 < 1; ++i23) {
                    iFld -= i1;
                }
                i21 += i21;
                fFld -= iFld;
                iFld -= ((int) (l));
                lArrFld[i22] = i24;
                iFld *= ((int) (l));
                if (Test.bFld)
                    continue;

                iArrFld[i20] = ((int) (Test.instanceCount));
                i21 <<= i24;
            } while ((++i22) < 3 );
        }
        i24 = iFld;
        i21 += i22;
        for (i25 = 7; 168 > i25; i25++) {
            i2 >>= ((int) (Test.instanceCount));
            fFld -= 39261;
            i2 += ((int) ((-1.991F) + (i25 * i25)));
        }
        i26 >>= Test.sFld;
        for (d1 = 1; d1 < 252; d1++) {
            Test.fArrFld[((int) (d1))] = ((float) (dFld));
            iArrFld[((int) (d1))] += i1;
            for (i28 = 1; i28 < 2; ++i28) {
                switch (((i28 % 2) * 5) + 85) {
                    case 94 :
                        iFld += ((i28 * l) + i20) - i1;
                        for (i30 = 1; i30 < 2; i30++) {
                            iArrFld[i28 - 1] %= -10;
                            i27 *= ((int) (-4019L));
                            i27 += 63051;
                            iArrFld = FuzzerUtils.int1array(N, ((int) (-8)));
                            iArrFld[((int) (d1 - 1))] = Test.sFld;
                            dArr1[i28] -= Test.instanceCount;
                            i21 = ((int) (-1.15634));
                        }
                    case 89 :
                        dFld -= i28;
                        break;
                }
            }
        }
        vMeth_check_sum += (((((((((((((((l + i1) + i2) + i20) + i21) + i22) + i23) + i24) + i25) + i26) + Double.doubleToLongBits(d1)) + i27) + i28) + i29) + i30) + i31) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {
        int i = 64514;
        int i32 = -169;
        int i33 = 6;
        int i34 = -172;
        int i35 = 99;
        int i36 = 54235;
        int i37 = 5;
        int i38 = -52536;
        int i40 = -2;
        int i41 = -11825;
        int i42 = 12;
        int i43 = -150;
        float f2 = -39.174F;
        long lArr[] = new long[N];
        long lArr1[][] = new long[N][N];
        short sArr[] = new short[N];
        byte byArr[] = new byte[N];
        FuzzerUtils.init(lArr, 127L);
        FuzzerUtils.init(lArr1, -119L);
        FuzzerUtils.init(sArr, ((short) (-2543)));
        FuzzerUtils.init(byArr, ((byte) (-114)));
        lArr[(i >>> 1) % N] -= iArrFld[((-11) >>> 1) % N];
        lArr1 = lArr1 = lArr1 = lArr1;
        vMeth(Test.instanceCount, 3, iFld);
        i32 = 1;
        while ((++i32) < 87) {
            i += i32 | i;
            lArr1[i32 - 1][i32 - 1] -= i;
            i += ((int) (Test.instanceCount));
            for (i33 = 58; i33 > 3; i33--) {
                i34 = i35;
                for (i36 = 2; i36 > 1; --i36) {
                    iArrFld[i32] >>= byFld;
                    Test.instanceCount = i35;
                    i35 -= ((int) (-1353443325L));
                    i34 += Test.sFld;
                }
                Test.instanceCount += ((long) (fFld));
                Test.instanceCount >>>= i33;
                Test.instanceCount -= Test.sFld;
                iFld = 236;
                fFld += i;
                i35 >>= -211;
                i37 = ((int) (Test.instanceCount));
                try {
                    iArrFld[i32 - 1] = i / 22;
                    i37 = i36 / i36;
                    i = iFld % 14332;
                } catch (ArithmeticException a_e) {
                }
                i35 >>= i33;
                dFld = Test.instanceCount;
            }
            sArr[i32 + 1] = ((short) (i34));
            i += i38;
            Test.instanceCount <<= i37;
            i <<= i32;
            Test.sFld = ((short) (i));
            i35 >>>= ((int) (Test.instanceCount));
            i38 += i32;
            i >>= i33;
            iFld *= 0;
            i40 = 1;
            while ((i40 += 2) < 58) {
                switch (((i33 >>> 1) % 7) + 59) {
                    case 59 :
                        i = i38;
                        iFld -= ((int) (fFld));
                        switch (((i32 % 2) * 5) + 59) {
                            case 62 :
                                Test.instanceCount -= -6L;
                                for (i41 = 1; i41 < 2; ++i41) {
                                    fFld += ((i41 * i36) + i36) - i33;
                                    i34 += i41 * Test.instanceCount;
                                    Test.instanceCount = i42;
                                    sArr[i41 + 1] += ((short) (-128));
                                    i += i41 * i41;
                                    sArr[i41] -= ((short) (-7));
                                    fFld -= ((float) (dFld));
                                    iFld *= i40;
                                    switch (((i >>> 1) % 6) + 43) {
                                        case 43 :
                                            iFld %= ((int) (i38 | 1));
                                            try {
                                                i37 = i32 / (-44229);
                                                iFld = iFld / 180;
                                                iFld = i41 / i34;
                                            } catch (ArithmeticException a_e) {
                                            }
                                            i38 += i41 | i42;
                                            try {
                                                i38 = i34 / iArrFld[i40];
                                                iArrFld[i41] = (-203) / iArrFld[i41 - 1];
                                                i = i35 % 16088;
                                            } catch (ArithmeticException a_e) {
                                            }
                                            fFld += i42;
                                            iArrFld[i41] = Test.sFld;
                                            dArrFld[i32 - 1] = i42;
                                            iArrFld[i41 - 1] -= i38;
                                            i += (-26772) + (i41 * i41);
                                            dFld += dFld;
                                            break;
                                        case 44 :
                                            Test.instanceCount = i;
                                            switch ((i40 % 5) + 6) {
                                                case 6 :
                                                    switch (((40 >>> 1) % 10) + 87) {
                                                        case 87 :
                                                            i35 %= ((int) (11.108967));
                                                            break;
                                                        case 88 :
                                                            switch ((i40 % 2) + 42) {
                                                                case 42 :
                                                                    byFld += ((byte) (i41 * i41));
                                                                case 43 :
                                                                    f2 *= f2;
                                                                    i38 += ((i41 * Test.instanceCount) + Test.instanceCount) - i41;
                                                                    i34 *= i37;
                                                                    i35 = ((int) (Test.instanceCount));
                                                                    Test.instanceCount -= i42;
                                                                    fFld *= i34;
                                                                    i43 += ((int) (dFld));
                                                                    byFld = ((byte) (f2));
                                                                    dFld += -3;
                                                                    i42 <<= i42;
                                                                    break;
                                                                default :
                                                                    Test.instanceCount -= 210L;
                                                            }
                                                            break;
                                                        case 89 :
                                                            Test.instanceCount -= ((long) (f2));
                                                            break;
                                                        case 90 :
                                                            i34 += (-199) + (i41 * i41);
                                                            break;
                                                        case 91 :
                                                            Test.instanceCount += ((i41 * Test.instanceCount) + i) - i34;
                                                            break;
                                                        case 92 :
                                                            f2 = Test.instanceCount;
                                                        case 93 :
                                                            iFld ^= i32;
                                                            break;
                                                        case 94 :
                                                            i37 = i42;
                                                            break;
                                                        case 95 :
                                                            try {
                                                                iArrFld[i40] = i35 % 55164;
                                                                i = iArrFld[i32 + 1] / 178;
                                                                i43 = 63006 % iFld;
                                                            } catch (ArithmeticException a_e) {
                                                            }
                                                            break;
                                                        case 96 :
                                                            f2 += fFld;
                                                    }
                                                    break;
                                                case 7 :
                                                    fFld += 245;
                                                case 8 :
                                                case 9 :
                                                    i43 += i41;
                                                    break;
                                                case 10 :
                                                    i37 += i41 - f2;
                                                    break;
                                                default :
                                                    i38 -= i37;
                                            }
                                        case 45 :
                                            f2 *= iFld;
                                        case 46 :
                                            i43 &= ((int) (Test.instanceCount));
                                            break;
                                        case 47 :
                                            i34 = ((int) (Test.instanceCount));
                                        case 48 :
                                            i34 -= -4;
                                            break;
                                        default :
                                            dFld = dFld;
                                    }
                                }
                                break;
                            case 63 :
                                i <<= ((int) (11L));
                                break;
                        }
                        break;
                    case 60 :
                        iFld = i38;
                        break;
                    case 61 :
                        byArr[i32] = byFld;
                        break;
                    case 62 :
                        Test.instanceCount = i38;
                        break;
                    case 63 :
                        iArrFld[i40 - 1] -= 11;
                        break;
                    case 64 :
                        i42 += i40 | Test.instanceCount;
                        break;
                    case 65 :
                        f2 = i42;
                        break;
                }
            }
        }
        FuzzerUtils.out.println((((("i i32 i33 = " + i) + ",") + i32) + ",") + i33);
        FuzzerUtils.out.println((((("i34 i35 i36 = " + i34) + ",") + i35) + ",") + i36);
        FuzzerUtils.out.println((((("i37 i38 i40 = " + i37) + ",") + i38) + ",") + i40);
        FuzzerUtils.out.println((((("i41 i42 f2 = " + i41) + ",") + i42) + ",") + Float.floatToIntBits(f2));
        FuzzerUtils.out.println((((("i43 lArr lArr1 = " + i43) + ",") + FuzzerUtils.checkSum(lArr)) + ",") + FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println((("sArr byArr = " + FuzzerUtils.checkSum(sArr)) + ",") + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println((((("Test.instanceCount Test.sFld iFld = " + Test.instanceCount) + ",") + Test.sFld) + ",") + iFld);
        FuzzerUtils.out.println((((("dFld fFld Test.bFld = " + Double.doubleToLongBits(dFld)) + ",") + Float.floatToIntBits(fFld)) + ",") + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println((((("byFld iArrFld lArrFld = " + byFld) + ",") + FuzzerUtils.checkSum(iArrFld)) + ",") + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println((("Test.fArrFld dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld))) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}