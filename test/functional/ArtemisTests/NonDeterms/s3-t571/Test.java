// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.util.Locale;
import java.text.SimpleDateFormat;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 3322869061L;

    public static int iFld = 38226;

    public static volatile int iFld1 = -41;

    public static double dFld = 54.61803;

    public volatile int iFld2 = 235;

    public static short sFld = 11539;

    public static boolean bFld = false;

    public int iFld3 = 47087;

    public int iFld4 = 146;

    public int iFld5 = -13465;

    public int[] iArrFld = new int[N];

    public double[] dArrFld = new double[N];

    public static long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -2785184224L);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth(int i2) {
        if (ax$9) {
            int ax$13 = i2;
            try {
                short[] ax$12 = new short[] { 20, 10, 0, -10, -20 };
                int[] ax$10 = { 0, 1, 2, 3, 0x1234_5678, 0x8000_0000, 0x8000_0001, 0x8000_0002, 0x8000_0003, 0x8765_4321, 0xFFFF_FFFE, 0xFFFF_FFFF };
                int ax$11 = ax$10[i2];
                ax$12[i2 * 2 + 0] = (short) (ax$11 & 0xFFFF);
                ax$12[i2 * 2 + 1] = (short) (ax$11 >> 16);
            } catch (Throwable ax$14) {
            } finally {
                i2 = ax$13;
            }
            return -8070227437139730243L;
        }
        int i3 = -126, i4 = 150, i5 = 90, i6 = 86, i7 = 77, i8 = 92, i9 = -690, iArr[][] = new int[N][N];
        float f = 2.277F, fArr[] = new float[N];
        short s = -23743;
        long l1 = -3949220640L, lArr[] = new long[N];
        boolean b = true;
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr, 9);
        FuzzerUtils.init(fArr, 0.431F);
        FuzzerUtils.init(dArr, -12.17618);
        FuzzerUtils.init(lArr, -2L);
        for (i3 = 7; 234 > i3; i3++) {
            iArr[i3][i3 - 1] *= (int) f;
            for (i5 = 1; i5 < 3; i5++) {
                i7 = 1;
                while (++i7 < 2) {
                    i4 = (int) Test.instanceCount;
                    Test.instanceCount += i6;
                    i2 += s;
                    i4 += i7;
                    f = Test.instanceCount;
                }
                Test.iFld1 *= Test.iFld;
                for (i8 = 2; i8 > 1; i8--) {
                    if (i4 != 0) {
                    }
                    iArr[i5] = iArr[i8];
                    switch((i8 % 5) + 50) {
                        case 50:
                            try {
                                i2 = (iArr[i8 + 1][i3] / -157);
                                Test.iFld1 = (iArr[i5 - 1][i3 - 1] % Test.iFld);
                                iArr[i5 - 1][i8] = (iArr[i5 - 1][i5] % -35172);
                            } catch (ArithmeticException a_e) {
                            }
                            l1 = i6;
                            Test.instanceCount *= i2;
                            switch(((i8 % 6) * 5) + 59) {
                                case 88:
                                    Test.instanceCount += (8906L + (i8 * i8));
                                    i4 *= i6;
                                    switch((i5 % 1) + 60) {
                                        case 60:
                                            fArr[i5] -= i3;
                                            Test.instanceCount <<= Test.instanceCount;
                                            if (i5 != 0) {
                                            }
                                            switch(((i9 >>> 1) % 2) + 59) {
                                                case 59:
                                                    if (b) {
                                                        Test.instanceCount = -4;
                                                        f = l1;
                                                        i4 = Test.iFld;
                                                        iArr[i5 + 1][i5 - 1] *= 190;
                                                        iArr[i3] = iArr[(i6 >>> 1) % N];
                                                        i9 %= (int) 1.5F;
                                                        if (b)
                                                            continue;
                                                        f += i8;
                                                        i9 += (i8 - i4);
                                                        iArr[i5][i8] = (int) 1471419092952994684L;
                                                        dArr[i5 - 1] = i4;
                                                    } else {
                                                        iArr[i3 + 1][i5 + 1] <<= (int) l1;
                                                    }
                                                    break;
                                                case 60:
                                                    lArr[i5 - 1] -= Test.iFld1;
                                                default:
                                                    l1 += (i8 | i6);
                                            }
                                            break;
                                    }
                                case 83:
                                    iArr[i3 - 1][i5 + 1] += (int) l1;
                                    break;
                                case 67:
                                    l1 = i6;
                                    break;
                                case 82:
                                    iArr[i3] = iArr[i3];
                                    break;
                                case 78:
                                    i4 >>= i8;
                                    break;
                                case 74:
                                    Test.dFld += Test.instanceCount;
                                    break;
                                default:
                                    l1 *= l1;
                            }
                            break;
                        case 51:
                            i9 = -162;
                            break;
                        case 52:
                            Test.instanceCount += Test.instanceCount;
                            break;
                        case 53:
                            iArr[i3 + 1][i3 + 1] >>= s;
                            break;
                        case 54:
                            l1 -= Test.iFld1;
                            break;
                        default:
                            iArr[i8 + 1][i8 + 1] >>= (int) l1;
                    }
                }
            }
        }
        long meth_res = i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + s + i8 + i9 + l1 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth1() {
        byte by1 = -65;
        float f1 = -76.104F;
        int i10 = 14, i11 = 44902, i12 = -57265, i13 = 2, i14 = 192, i15 = 131, i16 = 232, i17 = -61, i18 = -40015, i19 = -12, iArr1[] = new int[N];
        boolean b1 = false;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(iArr1, 4);
        FuzzerUtils.init(lArr1, -3435394691468421801L);
        by1 += (byte) (((++Test.instanceCount) ^ (Test.iFld >> Test.instanceCount)) & lMeth(Test.iFld1));
        Test.iFld = (int) f1;
        for (i10 = 3; 106 > i10; ++i10) {
            Test.dFld = 15561L;
            i12 = 1;
            {
                java.io.PrintStream ax$0 = System.out;
                java.io.PrintStream ax$1 = System.err;
                java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$2);
                System.setErr(ax$2);
                {
                    boolean ax$8 = false;
                    for (int ax$7 = -1036; ax$7 < 6802; ax$7 += 6) {
                        if (!ax$8) {
                            ax$8 = true;
                            {
                                System.setOut(ax$0);
                                System.setErr(ax$1);
                                while (++i12 < 5) {
                                    Test.iFld1 = (int) Test.instanceCount;
                                    Test.instanceCount = Test.iFld;
                                    Test.dFld /= (Test.iFld | 1);
                                    Test.instanceCount -= (long) f1;
                                    Test.iFld1 = i11;
                                    i13 = 1;
                                    while (++i13 < 1) {
                                        iArr1 = iArr1;
                                    }
                                    Test.instanceCount <<= 212;
                                    Test.instanceCount += (i12 + f1);
                                    i11 = -8;
                                }
                                System.setOut(ax$2);
                                System.setErr(ax$2);
                            }
                        }
                        try {
                            short ax$5 = (short) 0xFFFFFFFF;
                            char ax$4 = 't';
                            int ax$3 = 0xf8000000;
                            if (ax$4 < ax$5)
                                ax$3 = -1;
                            else if (ax$4 > ax$5)
                                ax$3 = 1;
                        } catch (Throwable ax$6) {
                        } finally {
                        }
                    }
                }
                System.setOut(ax$0);
                System.setErr(ax$1);
            }
            i11 += (((i10 * i11) + Test.instanceCount) - Test.iFld);
            lArr1[i10 - 1] = Test.instanceCount;
            if (b1)
                break;
            f1 += -1597729446L;
            Test.instanceCount += (i10 * i10);
            Test.iFld = (int) Test.instanceCount;
        }
        Test.iFld1 += by1;
        for (i14 = 5; 94 > i14; i14++) {
            by1 += (byte) (i14 * i14);
            i15 = i11;
            for (i16 = 1; i16 < 6; i16++) {
                Test.iFld1 += (i16 * i16);
                i15 ^= (int) Test.instanceCount;
                i11 += (12314 + (i16 * i16));
                if (b1)
                    break;
                f1 = -12;
            }
            Test.dFld -= i12;
            iArr1[i14 - 1] >>= i15;
            Test.iFld1 += (-97 + (i14 * i14));
            for (i18 = 1; i18 < 6; ++i18) {
                if (b1)
                    continue;
                Test.instanceCount = -8;
            }
        }
        vMeth1_check_sum += by1 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + (b1 ? 1 : 0) + i14 + i15 + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth(int i1, long l, byte by) {
        if (ax$20) {
            try {
                try {
                    new SimpleDateFormat("yy", (Locale) null);
                } catch (NullPointerException e) {
                }
            } catch (Throwable ax$24) {
            } finally {
            }
            return;
        }
        int i20 = -141, i21 = -14, i22 = 235, i23 = -12, i24 = -45132, i25 = 42871, i26 = 190, i27 = -46764;
        short s1 = 28946;
        float f3 = -56.421F, fArr1[] = new float[N];
        long[] lArr2 = new long[N];
        FuzzerUtils.init(lArr2, 35102L);
        FuzzerUtils.init(fArr1, -56.1012F);
        vMeth1();
        switch(((9 >>> 1) % 10) + 47) {
            case 47:
                iArrFld = iArrFld;
                i20 = 1;
                while (++i20 < 195) {
                    float f2 = 0.423F;
                    f2 -= l;
                    i1 += i20;
                    for (i21 = i20; i21 < 3; ++i21) {
                        l = i20;
                        i22 += i21;
                        Test.instanceCount = i1;
                        l += (((i21 * i21) + i20) - i22);
                        i1 += i21;
                        switch((i21 % 10) + 103) {
                            case 103:
                                for (i23 = 1; i23 < 1; ++i23) {
                                    Test.dFld = i22;
                                    Test.instanceCount *= i22;
                                    i1 = 31964;
                                    f2 = i23;
                                }
                                i25 = 1;
                                while (++i25 < 1) {
                                    i22 += i25;
                                    i22 = (int) Test.dFld;
                                    f2 += (i25 * i25);
                                    Test.dFld *= -35.496F;
                                    i24 += (int) -35775L;
                                    try {
                                        Test.iFld1 = (i22 % i25);
                                        i24 = (35 % iFld2);
                                        iArrFld[i21 + 1] = (i24 % iArrFld[i20]);
                                    } catch (ArithmeticException a_e) {
                                    }
                                }
                                for (i26 = 1; i26 < 1; ++i26) {
                                    iArrFld[i21] = i27;
                                    Test.sFld += (short) (i26 + i25);
                                    l <<= i21;
                                    i27 = i26;
                                    iFld2 -= (int) f2;
                                    l |= Test.sFld;
                                    switch(((i26 % 3) * 5) + 85) {
                                        case 89:
                                            dArrFld[i21] -= f2;
                                            lArr2[i26] *= 12;
                                            Test.bFld = true;
                                            iFld2 -= (int) Test.instanceCount;
                                        case 100:
                                            f2 += (((i26 * iFld2) + Test.iFld1) - l);
                                        case 97:
                                            i22 += i26;
                                    }
                                }
                                break;
                            case 104:
                                l += i25;
                                break;
                            case 105:
                                Test.instanceCount *= 111;
                            case 106:
                                fArr1[i20] /= (i22 | 1);
                                break;
                            case 107:
                                l = (long) Test.dFld;
                                break;
                            case 108:
                                s1 = (short) 7;
                                break;
                            case 109:
                                Test.dFld -= i27;
                                break;
                            case 110:
                                fArr1[i21] = i22;
                                break;
                            case 111:
                                Test.iFld1 += (i21 * i26);
                                break;
                            case 112:
                                Test.dFld += l;
                                break;
                            default:
                                try {
                                    i1 = (-25 % iArrFld[i21 + 1]);
                                    Test.iFld1 = (-176 / i24);
                                    Test.iFld1 = (-62726 % iArrFld[i20]);
                                } catch (ArithmeticException a_e) {
                                }
                        }
                    }
                }
            case 48:
            case 49:
                s1 = (short) Test.iFld;
                break;
            case 50:
                Test.iFld1 += (int) f3;
                break;
            case 51:
                iFld3 = (int) f3;
                break;
            case 52:
                iArrFld[(iFld2 >>> 1) % N] = 22165;
            case 53:
                iArrFld[(64 >>> 1) % N] += (int) Test.dFld;
                break;
            case 54:
                l = l;
                break;
            case 55:
            case 56:
                i24 <<= i26;
                break;
            default:
                i27 += i23;
        }
        vMeth_check_sum += i1 + l + by + i20 + i21 + i22 + i23 + i24 + i25 + i26 + i27 + s1 + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(lArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {
        if (ax$30) {
            int ax$33 = iFld1;
            try {
                byte[] ax$31 = new byte[] { 0, -1, -2, -3, -4 };
                for (int ax$32 = 0; ax$32 < ax$31.length; ax$32 += ((0x7fffffff >> 1) + 1)) {
                    iFld1 += ax$31[ax$32];
                }
            } catch (Throwable ax$34) {
            } finally {
                iFld1 = ax$33;
            }
            return;
        }
        int i = 2443, i28 = 163, i29 = 46094, i30 = 5, i31 = 57428, i32 = 14, i33 = 7, i34 = 63242, i35 = -214;
        byte by2 = -67, byArr[] = new byte[N];
        float f4 = -50.944F;
        double d = -2.104551;
        short[] sArr = new short[N];
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(byArr, (byte) 103);
        FuzzerUtils.init(sArr, (short) -10328);
        FuzzerUtils.init(bArr, false);
        i = 1;
        do {
            {
                java.io.PrintStream ax$27 = System.out;
                java.io.PrintStream ax$28 = System.err;
                java.io.PrintStream ax$29 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$29);
                System.setErr(ax$29);
                try {
                    ax$20 = true;
                    for (int ax$25 = 0; ax$25 < 8971; ax$25 += 1) vMeth(-308091788, -850621510959485287L, (byte) 988212160);
                } catch (java.lang.Throwable ax$26) {
                } finally {
                    ax$20 = false;
                }
                System.setOut(ax$27);
                System.setErr(ax$28);
            }
            vMeth(iFld2, Test.instanceCount, by2);
            i28 = 1;
            while (++i28 < 63) {
                try {
                    iFld4 = (-732862073 / i);
                    iArrFld[i + 1] = (9163 % iArrFld[i]);
                    iFld2 = (iFld2 / Test.iFld);
                } catch (ArithmeticException a_e) {
                }
            }
            Test.sFld += (short) 243L;
            iFld3 -= i;
            Test.instanceCount = iFld3;
            Test.sFld += (short) (i * i);
            iFld4 += i;
            f4 -= Test.sFld;
            dArrFld[i] = Test.dFld;
            iFld2 = (int) Test.instanceCount;
            Test.bFld = Test.bFld;
            for (i29 = 3; i29 < 63; ++i29) {
                if (false)
                    break;
                if (Test.bFld)
                    break;
                Test.lArrFld[(iFld4 >>> 1) % N] *= Test.instanceCount;
                iFld3 *= Test.sFld;
                Test.iFld &= Test.iFld;
                i31 = 2;
                do {
                    by2 -= (byte) i29;
                    Test.dFld -= Test.iFld1;
                    by2 = (byte) Test.instanceCount;
                    try {
                        iFld2 = (i29 / 398540566);
                        Test.iFld = (i31 / 4685);
                        Test.iFld1 = (iFld4 / -1198983713);
                    } catch (ArithmeticException a_e) {
                    }
                    iArrFld[i] = i;
                    Test.dFld -= iFld3;
                    iArrFld[i29 + 1] <<= iFld4;
                } while (--i31 > 0);
                Test.instanceCount *= i31;
                for (i32 = 2; i32 > 1; i32--) {
                    boolean b2 = true;
                    Test.instanceCount = Test.instanceCount;
                    i30 = i29;
                    switch(((Test.iFld >>> 1) % 3) + 17) {
                        case 17:
                            Test.iFld = i28;
                            i33 = iFld5;
                            if (Test.bFld) {
                                Test.sFld += (short) (i32 - Test.instanceCount);
                            }
                            Test.iFld += (i32 ^ Test.iFld);
                            iFld5 += iFld4;
                            switch((i % 2) + 85) {
                                case 85:
                                    Test.sFld += (short) (i32 ^ Test.iFld);
                                    Test.iFld += (i32 * i32);
                                    iArrFld[i32 + 1] *= -21714;
                                    i33 &= by2;
                                    f4 *= i33;
                                    if (Test.bFld)
                                        continue;
                                    Test.instanceCount += i;
                                    Test.lArrFld = Test.lArrFld;
                                    iFld5 += 191;
                                    break;
                                case 86:
                                    try {
                                        Test.iFld = (32184 % i33);
                                        iFld5 = (Test.iFld % 30422);
                                        Test.iFld1 = (iFld5 / iArrFld[i]);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    break;
                                default:
                                    iFld5 += (((i32 * i) + Test.instanceCount) - i32);
                                    Test.instanceCount += (((i32 * iFld2) + f4) - Test.instanceCount);
                                    Test.instanceCount += (long) f4;
                                    byArr = byArr;
                                    Test.iFld >>>= -26278;
                                    iArrFld[i32 + 1] -= (int) f4;
                                    Test.iFld1 += i32;
                                    iFld2 -= (int) Test.dFld;
                            }
                            if (Test.bFld) {
                                Test.iFld1 += i;
                                sArr[i32 + 1] = (short) i34;
                                try {
                                    i33 = (-759839813 % i35);
                                    iArrFld[i29] = (48508 % iFld4);
                                    i35 = (i28 / i29);
                                } catch (ArithmeticException a_e) {
                                }
                                iFld4 = i35;
                                Test.iFld1 = 23694;
                                bArr[i32 - 1] = Test.bFld;
                                d = i29;
                                iFld2 += (((i32 * i35) + i31) - i32);
                                iArrFld[i - 1] = (int) Test.instanceCount;
                                iFld4 += (i32 * Test.instanceCount);
                            } else if (b2) {
                                iArrFld[i32 + 1] *= -137;
                                Test.instanceCount = Test.instanceCount;
                                iFld4 <<= (int) 4104543639L;
                                f4 *= Test.instanceCount;
                                iArrFld[i] = -206;
                                iFld3 >>= i34;
                                Test.instanceCount = Test.instanceCount;
                            } else {
                                if (b2)
                                    continue;
                            }
                            break;
                        case 18:
                            iFld4 += (4 + (i32 * i32));
                            break;
                        case 19:
                            i35 *= i33;
                        default:
                            iArrFld[i29] -= i30;
                    }
                }
            }
        } while ((i += 3) < 241);
        FuzzerUtils.out.println("i by2 i28 = " + i + "," + by2 + "," + i28);
        FuzzerUtils.out.println("f4 i29 i30 = " + Float.floatToIntBits(f4) + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 d = " + i34 + "," + i35 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("byArr sArr bArr = " + FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.iFld1 = " + Test.instanceCount + "," + Test.iFld + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.dFld iFld2 Test.sFld = " + Double.doubleToLongBits(Test.dFld) + "," + iFld2 + "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld iFld3 iFld4 = " + (Test.bFld ? 1 : 0) + "," + iFld3 + "," + iFld4);
        FuzzerUtils.out.println("iFld5 iArrFld dArrFld = " + iFld5 + "," + FuzzerUtils.checkSum(iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$9 = false;

    private static Boolean ax$20 = false;

    private static Boolean ax$30 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
