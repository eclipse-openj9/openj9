// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -4678037310330867833L;

    public float fFld = -36.566F;

    public static int iFld = -97;

    public static long lFld = 3896676517L;

    public static boolean bFld = false;

    public int iFld1 = 141;

    public int iArrFld[] = new int[N];

    public static short sArrFld[] = new short[N];

    public static int iArrFld1[] = new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, ((short) (1914)));
        FuzzerUtils.init(Test.iArrFld1, 2);
    }

    public static long vSmallMeth_check_sum = 0;

    public static long sMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vMeth() {
        float f1 = 1.208F;
        float fArr[] = new float[N];
        int i1 = 4503;
        int i2 = 33208;
        int i3 = 6;
        int i4 = -8;
        int i5 = 14;
        int i6 = 21951;
        int iArr[][] = new int[N][N];
        short s = -26022;
        long lArr1[] = new long[N];
        FuzzerUtils.init(fArr, 58.993F);
        FuzzerUtils.init(lArr1, -108L);
        FuzzerUtils.init(iArr, 75);
        f1 = 0.499F;
        i1 = 88;
        while ((i1 -= 2) > 0) {
            fArr[i1] = Test.instanceCount;
            for (i2 = 1; i2 < 12; i2 += 2) {
                i3 += ((i2 * f1) + i1) - i2;
                f1 += i2 - Test.instanceCount;
                Test.instanceCount += ((long) (-2.537F));
                for (i4 = 1; i4 < 3; ++i4) {
                    if (false)
                        break;

                    i5 = i2;
                    Test.instanceCount += 116 + (i4 * i4);
                    Test.iFld = i2;
                    lArr1[i4 + 1] = ((long) (f1));
                    Test.instanceCount += i2;
                    f1 += i2;
                    i5 += ((i4 * Test.instanceCount) + i3) - i2;
                    i3 += (-36398) + (i4 * i4);
                    Test.iFld += i4 * i4;
                }
                i6 = 1;
                while ((++i6) < 3) {
                    iArr[i1 - 1][i2 + 1] *= 210;
                    Test.iFld = Test.iFld;
                    switch (((i1 >>> 1) % 1) + 63) {
                        case 63 :
                            i5 = i3;
                            switch ((i6 % 4) + 82) {
                                case 82 :
                                    Test.sArrFld[i6] -= ((short) (Test.instanceCount));
                                    i5 += s;
                                    i3 += i1;
                                    {
                                        final long ax$14 = Test.sMeth_check_sum;
                                        final int ax$15 = i1;
                                        final int ax$16 = i3;
                                        try {
                                            int[] ax$2 = new int[]{ 10, 20, 45, 38, 88 };
                                            byte[] ax$3 = new byte[0];
                                            short[] ax$4 = new short[]{ ((short) (26165)), ((short) (1646)), ((short) (26810)), ((short) (23914)), ((short) (26550)), ((short) (-14998)), ((short) (-18297)), ((short) (-9021)), ((short) (-10939)) };
                                            char[] ax$5 = new char[100];
                                            double[] ax$6 = new double[]{ 0.0, 1.0, 2.0, 3.0 };
                                            float[] ax$7 = new float[10];
                                            long[] ax$10 = new long[]{ 5877037020517846784L, -2770685066029904922L, 8418850729104537505L };
                                            boolean ax$1 = false;
                                            for (int ax$0 = -727; ax$0 < (-727 + 14462); ax$0 += 1) {
                                                Test.AxOutputRedirectionHelper.redirect();
                                                try {
                                                    i1 += (((((ax$3[i3] + ax$4[i3]) + ax$5[i3]) + ax$2[i3]) + ax$10[i3]) + ax$7[i3]) + ax$6[i3];
                                                } catch (Throwable ax$11) {
                                                } finally {
                                                }
                                                Test.AxOutputRedirectionHelper.recover();
                                                if (!ax$1) {
                                                    Test.instanceCount += Test.instanceCount;
                                                    ax$1 = true;
                                                }
                                                Test.AxOutputRedirectionHelper.redirect();
                                                try {
                                                    sMeth_check_sum /= ((long) (Math.nextDown(-1.5196E9F)));
                                                    sMeth_check_sum <<= Math.round(1.237681786E9);
                                                } catch (Throwable ax$13) {
                                                } finally {
                                                }
                                                Test.AxOutputRedirectionHelper.recover();
                                            }
                                        } finally {
                                            Test.sMeth_check_sum = ax$14;
                                            i1 = ax$15;
                                            i3 = ax$16;
                                        }
                                    }
                                    iArr[i1 + 1] = iArr[i2 + 1];
                                    f1 = i2;
                                    Test.iFld -= i2;
                                    f1 += i6;
                                    Test.iFld += ((int) (6377440843348029144L + (i6 * i6)));
                                    iArr[i6 + 1][i6 - 1] &= Test.iFld;
                                    Test.iFld += ((i6 * i2) + Test.lFld) - i4;
                                    Test.lFld <<= Test.instanceCount;
                                    break;
                                case 83 :
                                    i3 += ((int) (-14L));
                                case 84 :
                                    i5 ^= i5;
                                case 85 :
                                    iArr[i6 + 1][i6 - 1] = -56727;
                            }
                    }
                }
            }
        }
        vMeth_check_sum += (((((((((Float.floatToIntBits(f1) + i1) + i2) + i3) + i4) + i5) + i6) + s) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(lArr1)) + FuzzerUtils.checkSum(iArr);
    }

    public static short sMeth(float f, long l1) {
        double d = -2.96195;
        double dArr1[] = new double[N];
        int i7 = -5401;
        int i8 = 9;
        int i9 = 4;
        int i10 = 146;
        int i11 = 127;
        int i12 = -165;
        int i13 = -240;
        int i14 = 13129;
        boolean b = true;
        float f2 = -1.303F;
        float fArr1[] = new float[N];
        FuzzerUtils.init(dArr1, 2.93959);
        FuzzerUtils.init(fArr1, 2.13F);
        vMeth();
        f = Test.instanceCount;
        switch (((Test.iFld >>> 1) % 10) + 11) {
            case 11 :
                f = ((float) (d));
            case 12 :
                for (i7 = 6; i7 < 119; i7++) {
                    Test.instanceCount *= -1L;
                    for (i9 = i7; 5 > i9; i9++) {
                        if (true) {
                            i8 *= ((int) (d));
                            i10 -= ((int) (-2L));
                        }
                        l1 = i7;
                        Test.instanceCount += i9 ^ Test.iFld;
                        l1 <<= i8;
                        b = b;
                        Test.iFld += i9;
                        i10 >>= i9;
                        i8 += ((i9 * i7) + i8) - f;
                        f2 *= i7;
                        Test.iFld += ((int) (Test.lFld));
                        Test.iArrFld1 = Test.iArrFld1;
                        d *= i10;
                        l1 += i9 + i7;
                        i10 = Test.iFld;
                        Test.iFld += Test.iFld;
                    }
                    Test.iArrFld1[i7] = i9;
                    i8 += i7;
                    Test.lFld += i7 * i7;
                    if (b)
                        continue;

                    i10 *= i10;
                    Test.lFld ^= Test.iFld;
                    if (b) {
                        for (i11 = 1; i11 < 5; ++i11) {
                            for (i13 = 1; i13 < 2; ++i13) {
                                i8 *= i12;
                                i10 = 56;
                                i8 >>= Test.iFld;
                            }
                            i14 >>= ((int) (-14L));
                        }
                    } else if (true) {
                        Test.iArrFld1[i7 + 1] += ((int) (f2));
                    } else if (b) {
                        i10 /= ((int) (i14 | 1));
                    } else {
                        i12 *= ((int) (Test.instanceCount));
                    }
                }
                break;
            case 13 :
                i12 = i10;
                break;
            case 14 :
                Test.iFld <<= ((int) (Test.instanceCount));
                break;
            case 15 :
                dArr1[(i13 >>> 1) % N] -= i7;
            case 16 :
                dArr1[(22 >>> 1) % N] = i9;
                break;
            case 17 :
                l1 = i13;
                break;
            case 18 :
                Test.sArrFld[(i11 >>> 1) % N] = ((short) (i13));
                break;
            case 19 :
                f -= -54;
                break;
            case 20 :
                fArr1 = fArr1;
            default :
                i8 >>>= i8;
        }
        long meth_res = (((((((((((((Float.floatToIntBits(f) + l1) + Double.doubleToLongBits(d)) + i7) + i8) + i9) + i10) + (b ? 1 : 0)) + Float.floatToIntBits(f2)) + i11) + i12) + i13) + i14) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1))) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        sMeth_check_sum += meth_res;
        return ((short) (meth_res));
    }

    public static void vSmallMeth(int i, long l) {
        float f3 = 66.248F;
        long l2 = 43036L;
        sMeth(f3, l2);
        vSmallMeth_check_sum += ((i + l) + Float.floatToIntBits(f3)) + l2;
    }

    public void mainTest(String[] strArr1) {
        int i16 = -7;
        int i17 = -188;
        int i18 = -53578;
        int i19 = 84;
        int i20 = -5;
        int i21 = -13;
        int i22 = 0;
        int i23 = -23700;
        int i24 = 5;
        int i25 = 134;
        int i26 = -3586;
        int i27 = 3;
        int i28 = 53;
        double d2 = -1.17495;
        double d3 = 35.51783;
        double dArr[] = new double[N];
        long lArr[] = new long[N];
        float fArr2[] = new float[N];
        byte byArr[] = new byte[N];
        FuzzerUtils.init(lArr, -20723L);
        FuzzerUtils.init(dArr, -1.72491);
        FuzzerUtils.init(fArr2, -91.635F);
        FuzzerUtils.init(byArr, ((byte) (0)));
        fFld -= ((-(++iArrFld[(Test.iFld >>> 1) % N])) * (Test.iFld + Test.iFld)) + (lArr[(55286 >>> 1) % N]++);
        dArr[((-109) >>> 1) % N] += 227;
        for (int smallinvoc = 0; smallinvoc < 879; smallinvoc++)
            vSmallMeth(Test.iFld, Test.lFld);

        for (i16 = 8; i16 < 201; ++i16) {
            i17 <<= Test.iFld;
        }
        for (i18 = 4; i18 < 173; ++i18) {
            double d1 = 2.101007;
            d1 = -209;
            for (i20 = 1; i20 < 30; ++i20) {
                Test.lFld -= 13;
            }
            for (i22 = 30; i22 > 1; i22 -= 3) {
                if (Test.bFld)
                    break;

                Test.instanceCount += ((i22 * fFld) + Test.iFld) - i22;
                Test.instanceCount += i22 * i22;
                i19 += i22 * i22;
                for (d2 = 1; d2 < 4; ++d2) {
                    i17 *= ((int) (Test.lFld));
                    d1 -= i24;
                    Test.instanceCount += ((long) (((d2 * i19) + i24) - i21));
                    fFld = Test.instanceCount;
                    fArr2[((int) (d2 + 1))] += i18;
                    d1 += i24;
                }
                byArr = byArr;
                Test.bFld = Test.bFld;
                fFld += i22;
            }
            Test.lFld += i20;
            i25 = 1;
            while ((++i25) < 30) {
                Test.lFld += ((i25 * i23) + i18) - i16;
                for (i26 = 1; 1 > i26; i26++) {
                    fFld -= ((float) (1.838));
                }
                Test.lFld = i24;
                for (d3 = 1; d3 < 1; d3++) {
                    byte by = -1;
                    Test.lFld = i28;
                    if (Test.bFld) {
                        i21 = ((int) (97.464F));
                        iArrFld[((int) (d3 + 1))] += 10362;
                        i21 = i27;
                        fFld -= fFld;
                        if (Test.bFld)
                            break;

                        i21 *= i26;
                        i19 >>>= i16;
                        Test.iArrFld1[((int) (d3 + 1))] -= i27;
                        i23 = i27;
                        i21 += ((int) (-50L));
                        by += ((byte) (d3));
                        Test.iFld = i21;
                        i27 = -42637;
                        by *= ((byte) (i17));
                        iFld1 += by;
                    } else if (Test.bFld) {
                        Test.instanceCount += ((long) (((d3 * i16) + Test.lFld) - i25));
                        if (true)
                            break;

                        fFld -= i23;
                        iFld1 = ((int) (-1.738F));
                    } else {
                        i27 += ((int) (((d3 * by) + Test.instanceCount) - i16));
                        d1 -= -15.589F;
                        iArrFld[i25] = ((int) (Test.lFld));
                        fFld += ((float) (d3));
                        if (Test.bFld) {
                            Test.iArrFld1[i18 + 1] = i19;
                            Test.iArrFld1[i25] = i24;
                            i28 += ((int) (Test.instanceCount));
                            iArrFld[i18 - 1] = i25;
                            i19 = Test.iFld;
                            i23 = i16;
                            iArrFld[i18] = iFld1;
                            i23 = i26;
                        }
                        iArrFld[i18 - 1] -= i23;
                        i23 = i28;
                        i19 += i21;
                    }
                    iFld1 += ((int) (Test.lFld));
                    i17 += ((int) (d3 * d3));
                    Test.instanceCount = Test.instanceCount;
                }
            }
            d1 += 62;
            Test.instanceCount = i18;
            i24 += i18 * i18;
            Test.lFld = i18;
        }
        FuzzerUtils.out.println((((("i16 i17 i18 = " + i16) + ",") + i17) + ",") + i18);
        FuzzerUtils.out.println((((("i19 i20 i21 = " + i19) + ",") + i20) + ",") + i21);
        FuzzerUtils.out.println((((("i22 i23 d2 = " + i22) + ",") + i23) + ",") + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println((((("i24 i25 i26 = " + i24) + ",") + i25) + ",") + i26);
        FuzzerUtils.out.println((((("i27 d3 i28 = " + i27) + ",") + Double.doubleToLongBits(d3)) + ",") + i28);
        FuzzerUtils.out.println((((("lArr dArr fArr2 = " + FuzzerUtils.checkSum(lArr)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println((((("Test.instanceCount fFld Test.iFld = " + Test.instanceCount) + ",") + Float.floatToIntBits(fFld)) + ",") + Test.iFld);
        FuzzerUtils.out.println((((("Test.lFld Test.bFld iFld1 = " + Test.lFld) + ",") + (Test.bFld ? 1 : 0)) + ",") + iFld1);
        FuzzerUtils.out.println((((("iArrFld Test.sArrFld Test.iArrFld1 = " + FuzzerUtils.checkSum(iArrFld)) + ",") + FuzzerUtils.checkSum(Test.sArrFld)) + ",") + FuzzerUtils.checkSum(Test.iArrFld1));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}