// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Method;
import java.util.Iterator;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -7L;

    public float fFld = -2.645F;

    public static double dFld = 55.114859;

    public static byte byFld = -19;

    public static float fFld1 = 106.608F;

    public static short sFld = -29868;

    public static long lFld = 8585773373856492217L;

    public static float fFld2 = 113.453F;

    public static int iFld = -113;

    public float fFld3 = 83.187F;

    public static int iFld1 = -14;

    public int iFld2 = 8;

    public static int iArrFld[] = new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth() {
        if (Test.ax$0) {
            Iterator<Integer> ax$1 = null;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                if ((ax$1.next().intValue() & 1) == 1) {
                    ax$1.remove();
                }
            } catch (Throwable ax$2) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return -740719838;
        }
        int i3 = 40580;
        int i4 = 8;
        int i5 = 25597;
        int i6 = -53872;
        int i7 = -34374;
        int i8 = -59348;
        int i9 = -4;
        int i10 = -14;
        int i11 = 26857;
        int i12 = 24719;
        int i13 = 4;
        int iArr1[] = new int[N];
        short s1 = -27913;
        boolean b1 = false;
        long l = 117L;
        long lArr[] = new long[N];
        float f = -2.707F;
        float fArr[] = new float[N];
        byte byArr[][] = new byte[N][N];
        double dArr1[] = new double[N];
        FuzzerUtils.init(iArr1, 3);
        FuzzerUtils.init(byArr, ((byte) (37)));
        FuzzerUtils.init(lArr, 1226698833973912864L);
        FuzzerUtils.init(dArr1, 117.28809);
        FuzzerUtils.init(fArr, -15.78F);
        i3 = ((int) (Test.instanceCount));
        for (i4 = 5; i4 < 143; i4++) {
            Test.instanceCount += i4;
            i6 = 1;
            do {
                i5 += ((i6 * i7) + Test.instanceCount) - i6;
                i7 = i3;
                iArr1[i4 + 1] = i5;
                i3 = 14;
                i7 += 62500;
                Test.instanceCount = ((long) (Test.dFld));
            } while ((++i6) < 4 );
            iArr1[i4 + 1] <<= i6;
            iArr1[i4] += i3;
            for (i8 = i4; i8 < 4; i8++) {
                s1 = ((short) (i5));
                byArr[i8][i8 - 1] = ((byte) (Test.dFld));
                for (i10 = 1; 1 > i10; i10++) {
                    iArr1[i4] -= i12;
                    i7 += i4;
                    i12 += ((int) (Test.instanceCount));
                    i5 = -45;
                    if (b1)
                        break;

                    i9 = i4;
                    Test.instanceCount = i12;
                    i12 += i10 * i10;
                    Test.instanceCount += i10 * Test.instanceCount;
                    Test.byFld *= ((byte) (i9));
                    i9 += i10;
                }
                for (l = 1; l < 1; ++l) {
                    i12 = i13;
                    lArr[((int) (l - 1))] = ((long) (f));
                    switch (((i4 % 4) * 5) + 46) {
                        case 64 :
                            if (b1)
                                break;

                            dArr1[((int) (l - 1))] += i5;
                            break;
                        case 52 :
                            switch ((i4 % 3) + 11) {
                                case 11 :
                                    try {
                                        iArr1[i8 + 1] = i6 / 165;
                                        i3 = iArr1[i4 + 1] % iArr1[i8];
                                        iArr1[i4 - 1] = iArr1[((int) (l))] % (-61653);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i11 += i8;
                                    if (b1)
                                        break;

                                    break;
                                case 12 :
                                    if (b1)
                                        continue;

                                    break;
                                case 13 :
                                    fArr[i8 - 1] = i13;
                                    break;
                                default :
                                    fArr[i4 + 1] = i10;
                            }
                            break;
                        case 57 :
                            Test.instanceCount += ((l * f) + i7) - l;
                            break;
                        case 58 :
                            i9 += i5;
                            break;
                        default :
                            i7 += ((int) (11L));
                    }
                }
            }
        }
        long meth_res = ((((((((((((((((((i3 + i4) + i5) + i6) + i7) + i8) + i9) + s1) + i10) + i11) + i12) + (b1 ? 1 : 0)) + l) + i13) + Float.floatToIntBits(f)) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(byArr)) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1))) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static void vMeth1(boolean b, int i2) {
        int i14 = -3;
        int i15 = 25786;
        int i16 = 79;
        int i17 = 9;
        int i18 = 44581;
        int i19 = 0;
        int i20 = -1;
        int iArr2[] = new int[N];
        long l1 = 0L;
        long lArr1[] = new long[N];
        double dArr[] = new double[N];
        FuzzerUtils.init(dArr, -32.89717);
        FuzzerUtils.init(iArr2, 397);
        FuzzerUtils.init(lArr1, -2L);
        i2 *= i2;
        {
            try {
                char ax$4 = 'N';
                long[] ax$6 = new long[]{ -3940511858935808776L, -1450039647862914740L, 5842208246741738956L, 3989785012973412623L, -443217772103704758L, 542510286442351151L, 2203762940916506793L, 2537130105275407336L };
                for (int ax$3 = -381; ax$3 < (-381 + 8756); ax$3 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$4 = 0;
                    } catch (Throwable ax$5) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    iMeth();
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if ((ax$6[0] != 123) || (ax$6[1] != 0x1122334455667788L)) {
                        }
                    } catch (Throwable ax$7) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        dArr[(i2 >>> 1) % N] = ((++i2) + iMeth()) % (i2 | 1);
        for (i14 = 2; i14 < 217; i14++) {
            b = b;
            if (b) {
                if (b) {
                    Test.instanceCount >>= Test.byFld;
                    i2 = i15;
                    i15 *= ((int) (Test.instanceCount));
                    Test.instanceCount += i15;
                    Test.fFld1 -= i14;
                    iArr2[i14 + 1] += ((int) (Test.instanceCount));
                    try {
                        iArr2[i14 + 1] = i15 % (-2040732357);
                        i15 = i2 % (-30641);
                        iArr2[i14 - 1] = (-161) / i15;
                    } catch (ArithmeticException a_e) {
                    }
                    Test.instanceCount += -7853;
                    i15 += 47983 + (i14 * i14);
                    i15 = ((int) (Test.instanceCount));
                    iArr2[i14 - 1] = i15;
                    switch ((i14 % 3) + 13) {
                        case 13 :
                            if (b)
                                continue;

                            i15 = ((int) (Test.instanceCount));
                            Test.instanceCount <<= i14;
                            for (i16 = 1; i16 < 3; i16++) {
                                iArr2[i16 + 1] >>= ((int) (-2881733818L));
                                Test.byFld = ((byte) (Test.sFld));
                                i15 += i16;
                                i18 = 1;
                                do {
                                    Test.fFld1 = -238;
                                    l1 += ((i18 * i16) + i2) - i15;
                                    l1 += i14;
                                    l1 += i16;
                                    i2 -= i18;
                                } while ((++i18) < 2 );
                                b = true;
                                l1 = i16;
                                for (i19 = 1; i19 < 2; ++i19) {
                                    Test.instanceCount += -3;
                                    i17 = ((int) (Test.instanceCount));
                                    i15 = ((int) (Test.dFld));
                                }
                            }
                            break;
                        case 14 :
                            iArr2 = iArr2;
                        case 15 :
                            i17 = ((int) (2.12377));
                            break;
                        default :
                            i2 <<= -6;
                    }
                } else {
                    lArr1[i14 + 1] *= i14;
                }
            } else {
                iArr2[i14 + 1] -= i17;
            }
        }
        vMeth1_check_sum += ((((((((((((b ? 1 : 0) + i2) + i14) + i15) + i16) + i17) + i18) + l1) + i19) + i20) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(short s, int i1, double d) {
        int i21 = -144;
        int i22 = -19102;
        int i23 = -12;
        int i24 = -2;
        int i25 = -36004;
        int i26 = 32600;
        int i27 = 34166;
        double d1 = 9.71236;
        boolean b2 = true;
        long lArr2[] = new long[N];
        FuzzerUtils.init(lArr2, 34109451L);
        vMeth1(true, -11297);
        Test.dFld = Test.sFld;
        Test.instanceCount <<= i1;
        i21 = 1;
        while ((i21 += 2) < 231) {
            i1 *= i21;
            for (i22 = 1; i22 < 5; ++i22) {
                try {
                    i23 = i21 % (-1167347615);
                    i23 = 217 % i1;
                    i1 = i21 % 111;
                } catch (ArithmeticException a_e) {
                }
                i1 += ((int) (Test.fFld1));
                Test.iArrFld[i21] *= ((int) (Test.instanceCount));
                Test.byFld -= ((byte) (-13992));
                switch ((((i21 >>> 1) % 2) * 5) + 43) {
                    case 50 :
                    case 45 :
                        Test.iArrFld[i21] = i22;
                        i24 = 1;
                        do {
                            Test.instanceCount *= i24;
                            Test.fFld1 = i23;
                            Test.lFld *= Test.instanceCount;
                            Test.fFld1 += i24 * i24;
                            i23 = i1;
                            try {
                                Test.iArrFld[i22] = i1 % Test.iArrFld[i21 + 1];
                                Test.iArrFld[i24 + 1] = Test.iArrFld[i22 + 1] / (-104);
                                i23 = i24 / i24;
                            } catch (ArithmeticException a_e) {
                            }
                            i23 = i1;
                            Test.instanceCount -= ((long) (Test.fFld1));
                            i23 = ((int) (Test.lFld));
                            Test.fFld1 += 2;
                        } while ((++i24) < 2 );
                        i1 += i22 + i1;
                        break;
                }
            }
            try {
                i23 = 29467 / i23;
                i23 = i24 % i1;
                Test.iArrFld[i21] = i24 / (-41715);
            } catch (ArithmeticException a_e) {
            }
            if (i24 != 0) {
                vMeth_check_sum += (((((((((((s + i1) + Double.doubleToLongBits(d)) + i21) + i22) + i23) + i24) + i25) + i26) + Double.doubleToLongBits(d1)) + i27) + (b2 ? 1 : 0)) + FuzzerUtils.checkSum(lArr2);
                return;
            }
            i1 -= i23;
        }
        i25 = 1;
        do {
            i26 = 1;
            while ((++i26) < 4) {
                Test.iArrFld[i26] -= i26;
                d1 -= i26;
                i27 = 1;
                do {
                    Test.iArrFld[i25 + 1] = 145;
                    if (b2)
                        continue;

                    i1 += i27 * i26;
                    lArr2[i27 - 1] = Test.lFld;
                    i23 |= -17;
                } while ((i27 -= 2) > 0 );
            }
        } while ((++i25) < 151 );
        vMeth_check_sum += (((((((((((s + i1) + Double.doubleToLongBits(d)) + i21) + i22) + i23) + i24) + i25) + i26) + Double.doubleToLongBits(d1)) + i27) + (b2 ? 1 : 0)) + FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {
        if (Test.ax$8) {
            final int ax$15 = Test.iFld;
            final long ax$14 = Test.lFld;
            boolean ax$9 = false;
            String ax$11 = "1.475796350959623E-10";
            Test.AxOutputRedirectionHelper.redirect();
            try {
                if (ax$9);
            } catch (Throwable ax$13) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.lFld = ax$14;
            Test.iFld = ax$15;
            return;
        }
        int i = -3;
        int i28 = 49463;
        int i29 = 105;
        int i30 = 244;
        int i31 = -150;
        int i32 = 166;
        int i33 = 34191;
        int i34 = -60;
        int i35 = -21334;
        int i36 = 8;
        int iArr[] = new int[N];
        short s2 = -10753;
        short sArr[][] = new short[N][N];
        double d2 = 120.103425;
        double dArr2[] = new double[N];
        boolean b3 = false;
        float fArr1[] = new float[N];
        long lArr3[] = new long[N];
        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(fArr1, 0.687F);
        FuzzerUtils.init(sArr, ((short) (29047)));
        FuzzerUtils.init(lArr3, -718488383L);
        FuzzerUtils.init(dArr2, -106.12805);
        i = ((int) ((++fFld) - ((Test.instanceCount - fFld) + iArr[(i >>> 1) % N])));
        vMeth(s2, i, Test.dFld);
        Test.instanceCount = i;
        Test.iArrFld[(i >>> 1) % N] = 234;
        i28 = 1;
        do {
            i = i;
            i <<= -24112;
            if (b3) {
                iArr[i28] = ((int) (d2));
                for (i29 = 3; i29 < 97; i29 += 2) {
                    fArr1[i29] += Test.fFld1;
                    i += 48190;
                    i31 = 1;
                    do {
                        Test.dFld = Test.instanceCount;
                        i30 -= ((int) (Test.fFld1));
                        i30 = ((int) (-33079L));
                        i = ((int) (Test.fFld1));
                        i30 = i31;
                        i *= i31;
                        i30 += i31 ^ i31;
                        i30 = i;
                        sArr[i28 + 1][i28 - 1] = ((short) (6));
                        i30 = -60267;
                        fFld += ((i31 * i29) + i30) - Test.lFld;
                        Test.fFld1 += i30;
                        Test.fFld2 = 44524;
                        try {
                            i30 = (-69) / i;
                            i30 = i31 % 62667;
                            Test.iFld = i % i30;
                        } catch (ArithmeticException a_e) {
                        }
                    } while ((++i31) < 3 );
                }
                for (i32 = 1; i32 < 97; ++i32) {
                    Test.instanceCount = Test.instanceCount;
                    fArr1[i32 - 1] -= i;
                    Test.instanceCount = ((long) (fFld));
                    iArr[i32] = i32;
                    if (b3)
                        break;

                    for (i34 = 1; i34 < 2; ++i34) {
                        Test.iFld = ((int) (fFld3));
                        Test.instanceCount -= i31;
                        if (b3)
                            break;

                        Test.byFld += ((byte) (i33));
                        Test.iFld *= i33;
                        i30 >>= ((int) (-7231L));
                        Test.iArrFld = Test.iArrFld;
                        i = i30;
                        Test.iFld += i34;
                        i33 = i35;
                        switch (((i28 % 4) * 5) + 65) {
                            case 67 :
                                if (b3) {
                                    i |= i30;
                                    i -= 19712;
                                    switch (((i34 % 8) * 5) + 21) {
                                        case 47 :
                                            i30 >>>= 24823;
                                            Test.dFld = Test.dFld;
                                            Test.instanceCount >>= Test.iFld;
                                            i33 |= ((int) (Test.instanceCount));
                                            i36 *= i;
                                            fFld3 += i34;
                                            break;
                                        case 24 :
                                            if (true)
                                                continue;

                                            i33 += Test.iFld;
                                            Test.lFld &= Test.instanceCount;
                                            i30 = i35;
                                            i35 += i34;
                                            fFld3 *= i31;
                                            i30 -= ((int) (Test.lFld));
                                            Test.iArrFld[i28] = ((int) (fFld3));
                                            switch (((i34 % 10) * 5) + 4) {
                                                case 22 :
                                                case 41 :
                                                    Test.instanceCount = i28;
                                                    break;
                                                case 19 :
                                                    Test.iFld >>= ((int) (Test.instanceCount));
                                                    Test.lFld -= i32;
                                                    switch (((i31 >>> 1) % 4) + 78) {
                                                        case 78 :
                                                            switch (((i29 >>> 1) % 3) + 49) {
                                                                case 49 :
                                                                    i33 += ((int) (Test.instanceCount));
                                                                    sArr[i32][i34] -= ((short) (i));
                                                                    i33 = i29;
                                                                    i35 *= i;
                                                                    Test.iFld += i30;
                                                                    lArr3[i32 - 1] ^= 6;
                                                                    break;
                                                                case 50 :
                                                                    i30 >>>= i29;
                                                                    break;
                                                                case 51 :
                                                                    i = ((int) (Test.instanceCount));
                                                                    break;
                                                                default :
                                                                    Test.iArrFld[i32 + 1] += ((int) (Test.fFld1));
                                                            }
                                                            break;
                                                        case 79 :
                                                            lArr3[i32 + 1] *= ((long) (fFld));
                                                            break;
                                                        case 80 :
                                                            Test.dFld += Test.lFld;
                                                            break;
                                                        case 81 :
                                                            i36 += i33;
                                                            break;
                                                    }
                                                    break;
                                                case 30 :
                                                    Test.iArrFld[i32] -= ((int) (Test.lFld));
                                                    break;
                                                case 27 :
                                                    i33 += ((i34 * i29) + i28) - s2;
                                                    break;
                                                case 46 :
                                                    Test.iFld <<= i33;
                                                    break;
                                                case 39 :
                                                    fArr1[i34 - 1] -= -498501865L;
                                                case 48 :
                                                    i >>= Test.byFld;
                                                    break;
                                                case 8 :
                                                    dArr2[i34] += i31;
                                                    break;
                                                case 54 :
                                                    b3 = b3;
                                            }
                                            break;
                                        case 49 :
                                            fArr1[i28 - 1] += i36;
                                            break;
                                        case 57 :
                                            Test.byFld += ((byte) (i34 - Test.instanceCount));
                                        case 35 :
                                            i36 = i;
                                            break;
                                        case 39 :
                                            b3 = true;
                                            break;
                                        case 33 :
                                            Test.iArrFld[i28] &= ((int) (-13L));
                                            break;
                                        case 43 :
                                            Test.lFld = Test.iFld;
                                            break;
                                    }
                                } else if (b3) {
                                    i33 += (-49) + (i34 * i34);
                                }
                                break;
                            case 77 :
                                Test.lFld >>= i;
                                break;
                            case 68 :
                                iArr[i34 - 1] *= Test.iFld1;
                                break;
                            case 83 :
                                Test.instanceCount = Test.lFld;
                                break;
                            default :
                                i30 += ((i34 * i33) + Test.lFld) - Test.instanceCount;
                        }
                    }
                }
            } else if (b3) {
                Test.fFld2 -= Test.iFld;
            } else if (b3) {
                i35 += iFld2;
            } else {
                i30 -= 5775;
            }
        } while ((i28 += 3) < 157 );
        FuzzerUtils.out.println((((("i s2 i28 = " + i) + ",") + s2) + ",") + i28);
        FuzzerUtils.out.println((((("d2 i29 i30 = " + Double.doubleToLongBits(d2)) + ",") + i29) + ",") + i30);
        FuzzerUtils.out.println((((("i31 i32 i33 = " + i31) + ",") + i32) + ",") + i33);
        FuzzerUtils.out.println((((("b3 i34 i35 = " + (b3 ? 1 : 0)) + ",") + i34) + ",") + i35);
        FuzzerUtils.out.println((((("i36 iArr fArr1 = " + i36) + ",") + FuzzerUtils.checkSum(iArr)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println((((("sArr lArr3 dArr2 = " + FuzzerUtils.checkSum(sArr)) + ",") + FuzzerUtils.checkSum(lArr3)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)));
        FuzzerUtils.out.println((((("Test.instanceCount fFld Test.dFld = " + Test.instanceCount) + ",") + Float.floatToIntBits(fFld)) + ",") + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println((((("Test.byFld Test.fFld1 Test.sFld = " + Test.byFld) + ",") + Float.floatToIntBits(Test.fFld1)) + ",") + Test.sFld);
        FuzzerUtils.out.println((((("Test.lFld Test.fFld2 Test.iFld = " + Test.lFld) + ",") + Float.floatToIntBits(Test.fFld2)) + ",") + Test.iFld);
        FuzzerUtils.out.println((((("fFld3 Test.iFld1 iFld2 = " + Float.floatToIntBits(fFld3)) + ",") + Test.iFld1) + ",") + iFld2);
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                {
                    try {
                        Method ax$17 = null;
                        for (int ax$16 = -525; ax$16 < (-525 + 19756); ax$16 += 1) {
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                ax$17.invoke(null);
                            } catch (Throwable ax$18) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                            Test.ax$8 = true;
                            _instance.mainTest(new String[]{ "s", "s", "s" });
                            Test.ax$8 = false;
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                try {
                                    Long.decode(null);
                                } catch (NullPointerException ax$19) {

                                }
                            } catch (Throwable ax$20) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                        }
                    } finally {
                    }
                }
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$8 = false;
}