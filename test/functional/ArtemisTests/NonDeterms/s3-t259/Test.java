// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.lang.reflect.Array;

public class Test {

    public static final int N = 256;

    public static long instanceCount = -159L;

    public static float fFld = 108.922F;

    public static double dFld = -18.96400;

    public static long[] lArrFld = new long[N];

    public static float[] fArrFld = new float[N];

    public static byte[] byArrFld = new byte[N];

    public static double[][] dArrFld = new double[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4L);
        FuzzerUtils.init(Test.fArrFld, 12.593F);
        FuzzerUtils.init(Test.byArrFld, (byte) 18);
        FuzzerUtils.init(Test.dArrFld, 0.90959);
    }

    public static long vMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i5) {
        if (ax$15) {
            int ax$16 = i5;
            try {
                i5++;
            } catch (Throwable ax$17) {
            } finally {
                i5 = ax$16;
            }
            return -2041292336;
        }
        int i6 = -58826, i7 = 11, i8 = -58686, i9 = 28675, i10 = 14, i11 = -3, i12 = -104, iArr2[] = new int[N], iArr3[][] = new int[N][N];
        short s = -16397;
        double d1 = 34.4380;
        byte by1 = -109;
        boolean[][] bArr = new boolean[N][N];
        float[] fArr = new float[N];
        FuzzerUtils.init(iArr2, 43496);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr3, -2);
        FuzzerUtils.init(fArr, -2.90F);
        Test.instanceCount = i5;
        for (i6 = 1; i6 < 92; i6++) {
            boolean b = false;
            Test.instanceCount -= -38;
            i5 = (int) 1.71876;
            Test.lArrFld[i6 + 1] <<= i5;
            if (b)
                break;
            Test.instanceCount -= -20095;
            iArr2[i6] = (int) Test.instanceCount;
            i5 = i5;
            for (i8 = i6; 6 > i8; ++i8) {
                switch(((i8 % 2) * 5) + 122) {
                    case 125:
                        bArr[i6][i6 - 1] = false;
                        i5 += 46882;
                        i9 = i6;
                        for (i10 = 1; i10 < 1; i10++) {
                            s <<= (short) Test.instanceCount;
                            if (b) {
                                iArr3 = iArr3;
                                Test.lArrFld[i8] += Test.instanceCount;
                            } else if (b) {
                                i7 >>= i5;
                                i9 >>>= i7;
                                Test.fFld /= (i10 | 1);
                                fArr[i8] = i11;
                                d1 = s;
                            }
                            by1 += (byte) (i10 | Test.instanceCount);
                            i11 += (int) Test.fFld;
                            s += (short) (i10 * s);
                            i9 = 13;
                            Test.lArrFld[i8 + 1] -= i6;
                        }
                        i5 += (((i8 * i6) + Test.instanceCount) - i8);
                        i12 = 1;
                        while (++i12 < 1) {
                            by1 += (byte) i8;
                            i5 -= (int) Test.fFld;
                            Test.instanceCount ^= Test.instanceCount;
                            fArr[i12] = i10;
                        }
                        Test.instanceCount += i6;
                        Test.lArrFld[i8] <<= i11;
                        break;
                    case 128:
                        iArr2[i6] = 13;
                        break;
                    default:
                        if (true)
                            break;
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + i11 + s + Double.doubleToLongBits(d1) + by1 + i12 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr3) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static long lMeth(int i1, int i2, int i3) {
        int i4 = 55205, i13 = 1, i14 = 47, i15 = 63, i16 = -12, i17 = -41264, i18 = -6, i19 = 51635, i20 = 18283, iArr1[][] = new int[N][N];
        byte by2 = 43, byArr[] = new byte[N];
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr1, 138);
        FuzzerUtils.init(byArr, (byte) 25);
        FuzzerUtils.init(dArr, 8.17042);
        Test.instanceCount = i4;
        iArr1[(-175 >>> 1) % N][(i2 >>> 1) % N] <<= iMeth(i3);
        i13 = 1;
        while (++i13 < 173) {
            boolean b1 = false;
            i2 = -155;
            i3 += (((i13 * i4) + i2) - i3);
            Test.instanceCount = by2;
            Test.instanceCount += (i13 * i13);
            iArr1[i13 + 1][i13 + 1] &= i3;
            for (i14 = 1; i14 < 3; ++i14) {
                Test.instanceCount += (-6 + (i14 * i14));
                iArr1[i13][i13 - 1] += i1;
                i2 = (int) Test.fFld;
                Test.instanceCount >>= -40418L;
                i2 = (int) Test.instanceCount;
                i3 *= (int) Test.instanceCount;
                i2 -= i2;
            }
            Test.lArrFld = Test.lArrFld;
            if (b1) {
                for (i16 = 3; i16 > 1; --i16) {
                    Test.dFld = i13;
                    for (i18 = i16; i18 < 2; ++i18) {
                        i1 = (int) -2L;
                        Test.lArrFld[i18 - 1] -= i17;
                        i1 = (int) Test.instanceCount;
                    }
                    i3 += i16;
                    iArr1[i16 - 1][i16 + 1] = (int) -8L;
                    iArr1[i13 + 1] = iArr1[i13];
                    try {
                        i17 = (i15 % -704137703);
                        i15 = (i14 / i4);
                        i2 = (-2413 % i3);
                    } catch (ArithmeticException a_e) {
                    }
                    {
                        java.io.PrintStream ax$5 = System.out;
                        java.io.PrintStream ax$6 = System.err;
                        java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$7);
                        System.setErr(ax$7);
                        try {
                            for (int ax$3 = -3972; ax$3 < 5258; ax$3 += 1) {
                                try {
                                    int[] ax$1 = new int[51];
                                    for (int ax$0 = 0; ax$0 < ax$1.length; ax$0 += 1) {
                                        ax$1[ax$0] = (ax$0 & 3);
                                    }
                                } catch (Throwable ax$2) {
                                } finally {
                                }
                            }
                        } catch (Throwable ax$4) {
                        }
                        System.setOut(ax$5);
                        System.setErr(ax$6);
                    }
                    i20 = 1;
                    while (++i20 < 2) {
                        byArr[i13 + 1] -= (byte) i4;
                        i4 = i13;
                        i2 += (((i20 * i18) + i13) - Test.instanceCount);
                        i15 += (i20 ^ i2);
                        i19 = i4;
                        try {
                            i3 = (-29574 / i14);
                            i17 = (iArr1[i13][i20 - 1] / i13);
                            i17 = (i13 % 23616);
                        } catch (ArithmeticException a_e) {
                        }
                        i15 |= i19;
                    }
                    i4 = (int) Test.dFld;
                }
            } else if (b1) {
                i19 = i14;
            } else {
                dArr[i13] -= i18;
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i13 + by2 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth(int i) {
        float f = 72.1013F;
        byte by = 116;
        double d = 0.47081, dArr1[] = new double[N];
        short s1 = 9121;
        int i21 = 13, i22 = 6669, i23 = 28561, i24 = -10, i25 = 16001, i26 = -9, i27 = -43727, iArr[] = new int[N];
        boolean b2 = false;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, 187395792207845680L);
        FuzzerUtils.init(iArr, -1833);
        FuzzerUtils.init(dArr1, 41.86794);
        f = (lArr[(i >>> 1) % N] >>> (lArr[(0 >>> 1) % N]--));
        iArr[(i >>> 1) % N] = by;
        d *= ((-i) - (i--));
        f -= (-125.483F + lMeth(i, i, i));
        iArr[(i >>> 1) % N] = i;
        i = -32002;
        s1 -= (short) Test.instanceCount;
        i = (int) Test.instanceCount;
        for (i21 = 6; i21 < 184; i21++) {
            for (i23 = 3; i23 > 1; i23--) {
                i24 >>= i23;
            }
            Test.instanceCount += i21;
            i += (i21 | i24);
            {
                java.io.PrintStream ax$8 = System.out;
                java.io.PrintStream ax$9 = System.err;
                java.io.PrintStream ax$10 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$10);
                System.setErr(ax$10);
                {
                    boolean ax$14 = false;
                    for (int ax$13 = -1828; ax$13 < 3363; ax$13 += 1) {
                        if (!ax$14) {
                            ax$14 = true;
                            {
                                System.setOut(ax$8);
                                System.setErr(ax$9);
                                for (i25 = 1; 3 > i25; ++i25) {
                                    i24 += (i25 * i25);
                                    switch(((i21 % 10) * 5) + 92) {
                                        case 123:
                                            Test.instanceCount -= (long) d;
                                            i27 = 1;
                                            do {
                                                i26 += (int) -18L;
                                                by |= (byte) i21;
                                                i24 >>= i22;
                                                switch((i25 % 3) + 102) {
                                                    case 102:
                                                        i24 &= i;
                                                        d = i23;
                                                        d -= i22;
                                                        Test.instanceCount <<= Test.instanceCount;
                                                        if (b2)
                                                            break;
                                                        i26 >>= i24;
                                                        Test.instanceCount = i22;
                                                        i >>= i;
                                                        by += (byte) i22;
                                                        i += (i27 + i24);
                                                        i22 ^= by;
                                                        f %= -8;
                                                        Test.instanceCount = i23;
                                                        dArr1[i21 - 1] = Test.dFld;
                                                        break;
                                                    case 103:
                                                        iArr[i25] += s1;
                                                        break;
                                                    case 104:
                                                        f = i26;
                                                        break;
                                                    default:
                                                        f = i21;
                                                }
                                            } while (++i27 < 2);
                                            break;
                                        case 132:
                                            Test.instanceCount *= by;
                                            break;
                                        case 97:
                                            i24 *= i27;
                                        case 95:
                                            f = -52.449F;
                                            break;
                                        case 113:
                                            i &= i22;
                                            break;
                                        case 128:
                                            Test.lArrFld[i25 + 1] <<= i;
                                            break;
                                        case 118:
                                            if (b2)
                                                continue;
                                            break;
                                        case 94:
                                            Test.fFld -= i24;
                                        case 101:
                                            Test.dFld = 21.842F;
                                            break;
                                        case 111:
                                            Test.fArrFld[i25] += Test.instanceCount;
                                            break;
                                        default:
                                            i26 += (i25 * i25);
                                    }
                                }
                                System.setOut(ax$10);
                                System.setErr(ax$10);
                            }
                        }
                        try {
                            java.lang.Object ax$11 = "41.90335840753915";
                            if (Array.getInt(ax$11, 0) != -1) {
                            }
                        } catch (Throwable ax$12) {
                        } finally {
                        }
                    }
                }
                System.setOut(ax$8);
                System.setErr(ax$9);
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + by + Double.doubleToLongBits(d) + s1 + i21 + i22 + i23 + i24 + i25 + i26 + i27 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {
        int i28 = -29173, i29 = 0, i30 = -188, i31 = 9, i32 = 200, i33 = -202, i34 = -161, i35 = 169, i36 = 30245, i37 = -3, i38 = -2143, i39 = -54185, i40 = -117, i41 = -228, i42 = -135, i43 = 10, i44 = -64, iArr4[] = new int[N], iArr5[] = new int[N];
        float f1 = -83.974F;
        double d2 = 30.86306, d3 = -76.92843;
        byte by3 = 114;
        short s2 = -27607;
        boolean b3 = false, b4 = true;
        FuzzerUtils.init(iArr4, 50673);
        FuzzerUtils.init(iArr5, 168);
        vMeth(i28);
        iArr4[(40 >>> 1) % N] += i28;
        for (f1 = 193; f1 > 4; f1--) {
            Test.byArrFld[(int) (f1 + 1)] = (byte) i29;
            iArr4[(int) (f1 + 1)] = i28;
            i30 = 27;
            while ((i30 -= 2) > 0) {
                i28 += i28;
                Test.instanceCount -= i30;
                Test.instanceCount += i30;
                for (i31 = 1; i31 < 2; ++i31) {
                    Test.instanceCount -= Test.instanceCount;
                    i29 *= i28;
                    i29 += (int) Test.instanceCount;
                    iArr4[i30] = i30;
                    Test.dArrFld[i31 + 1] = Test.dArrFld[(int) (f1)];
                    i28 = (int) Test.instanceCount;
                    Test.dFld = i28;
                    Test.instanceCount -= Test.instanceCount;
                }
                Test.lArrFld[i30 - 1] = -3981948594L;
                for (d2 = 1; 2 > d2; ++d2) {
                    i33 &= i33;
                    iArr4[(int) (f1 - 1)] = (int) Test.dFld;
                }
                i33 -= (int) 87.69494;
            }
            switch((int) (((f1 % 7) * 5) + 15)) {
                case 34:
                    if (b3) {
                        for (i34 = 1; i34 < 27; i34 += 3) {
                            switch((int) (((f1 % 6) * 5) + 37)) {
                                case 51:
                                    i36 = 1;
                                    while (++i36 < 4) {
                                        iArr4[i34 + 1] += i35;
                                        i33 <<= by3;
                                        by3 *= by3;
                                        i28 += (i36 * i36);
                                    }
                                    s2 += (short) -80;
                                    iArr4[i34 - 1] -= i35;
                                    i29 = by3;
                                    switch((int) ((f1 % 8) + 49)) {
                                        case 49:
                                            if (true)
                                                break;
                                            by3 += (byte) i34;
                                            for (i37 = 4; i37 > f1; i37--) {
                                                Test.instanceCount += (((i37 * i29) + s2) - i35);
                                                if (b3)
                                                    break;
                                                Test.instanceCount += (i37 ^ i34);
                                                i32 *= -1;
                                            }
                                            iArr4[(int) (f1)] -= i38;
                                            Test.lArrFld[i34] = Test.instanceCount;
                                            i32 = (int) -14L;
                                            for (d3 = 1; d3 < 4; ++d3) {
                                                Test.fFld = i30;
                                                by3 += (byte) ((long) d3 ^ i28);
                                                Test.instanceCount = i31;
                                                i33 += (int) d3;
                                                Test.lArrFld[(int) (f1)] += s2;
                                                i33 += 11;
                                                i38 >>= by3;
                                                i35 = by3;
                                                b3 = b3;
                                                iArr4[(int) (f1 + 1)] *= (int) Test.instanceCount;
                                            }
                                            for (i40 = 1; i40 < 4; i40++) {
                                                i32 = i36;
                                                try {
                                                    i33 = (i40 % i41);
                                                    iArr4[i40 + 1] = (i32 / 16597);
                                                    i39 = (-16205 % iArr5[i40 - 1]);
                                                } catch (ArithmeticException a_e) {
                                                }
                                                i35 += (int) Test.instanceCount;
                                                iArr5[i34] += i28;
                                                i29 = (int) 1978975473L;
                                                iArr4[i34] = i40;
                                                s2 += (short) (-2.426F + (i40 * i40));
                                                Test.fFld -= i42;
                                            }
                                            iArr5 = iArr4;
                                            break;
                                        case 50:
                                        case 51:
                                            for (i43 = 1; i43 < 4; i43++) {
                                                if (false)
                                                    break;
                                                if (b3)
                                                    continue;
                                                i39 += i29;
                                                i41 += (42 + (i43 * i43));
                                                Test.lArrFld[(int) (f1 + 1)] = s2;
                                                Test.instanceCount -= i34;
                                                i41 &= i35;
                                            }
                                            break;
                                        case 52:
                                            i28 -= -51525;
                                            break;
                                        case 53:
                                            i42 = (int) Test.instanceCount;
                                            break;
                                        case 54:
                                            Test.dFld = i35;
                                            break;
                                        case 55:
                                            i39 = i44;
                                            break;
                                        case 56:
                                            i35 >>= i40;
                                            break;
                                        default:
                                            i33 |= (int) Test.instanceCount;
                                    }
                                case 65:
                                case 40:
                                    iArr4[(int) (f1 + 1)] = i41;
                                    break;
                                case 44:
                                    i38 = s2;
                                    break;
                                case 48:
                                    iArr4[(int) (f1)] += i30;
                                    break;
                                case 38:
                                    i44 = by3;
                                    break;
                                default:
                                    i35 += (9 + (i34 * i34));
                            }
                        }
                    } else if (b4) {
                    } else {
                        i28 *= i37;
                    }
                    break;
                case 26:
                    Test.instanceCount = (long) Test.fFld;
                    break;
                case 45:
                    if (b3)
                        break;
                    break;
                case 29:
                    Test.instanceCount += i31;
                    break;
                case 40:
                    i41 *= (int) -1.985F;
                    break;
                case 20:
                    i38 += (int) f1;
                case 36:
                default:
                    iArr4[(int) (f1 - 1)] -= (int) Test.instanceCount;
            }
        }
        FuzzerUtils.out.println("i28 f1 i29 = " + i28 + "," + Float.floatToIntBits(f1) + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("d2 i33 i34 = " + Double.doubleToLongBits(d2) + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 by3 = " + i35 + "," + i36 + "," + by3);
        FuzzerUtils.out.println("s2 i37 i38 = " + s2 + "," + i37 + "," + i38);
        FuzzerUtils.out.println("b3 d3 i39 = " + (b3 ? 1 : 0) + "," + Double.doubleToLongBits(d3) + "," + i39);
        FuzzerUtils.out.println("i40 i41 i42 = " + i40 + "," + i41 + "," + i42);
        FuzzerUtils.out.println("i43 i44 b4 = " + i43 + "," + i44 + "," + (b4 ? 1 : 0));
        FuzzerUtils.out.println("iArr4 iArr5 = " + FuzzerUtils.checkSum(iArr4) + "," + FuzzerUtils.checkSum(iArr5));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.lArrFld Test.fArrFld Test.byArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$15 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  lMeth ->  lMeth vMeth mainTest
// DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
