// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 3853L;

    public static volatile int iFld = 13;

    public static double dFld = 2.90718;

    public static short sFld = -13537;

    public static boolean bFld = true;

    public static byte byFld = 119;

    public static float[][] fArrFld = new float[N][N];

    public static int[] iArrFld = new int[N];

    public static byte[] byArrFld = new byte[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.990F);
        FuzzerUtils.init(Test.iArrFld, 24128);
        FuzzerUtils.init(Test.byArrFld, (byte) 16);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i11) {
        int i12 = -190, i13 = 67, i14 = 54, i15 = 39506, i16 = 120, i17 = -33130;
        byte by = -107;
        float f1 = 104.910F;
        boolean b = true;
        long l = 475644820587503302L, lArr[] = new long[N];
        FuzzerUtils.init(lArr, 15L);
        Test.fArrFld[(i11 >>> 1) % N][(i11 >>> 1) % N] = Test.instanceCount;
        Test.iFld >>= i11;
        for (i12 = 7; i12 < 207; i12++) {
            i13 -= (int) Test.instanceCount;
            for (i14 = 1; i14 < 3; ++i14) {
                Test.instanceCount = 197;
                for (i16 = 1; i16 < 2; ++i16) {
                    if (i14 != 0) {
                        vMeth2_check_sum += i11 + i12 + i13 + i14 + i15 + i16 + i17 + by + Float.floatToIntBits(f1) + (b ? 1 : 0) + l + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    i17 /= 32487;
                    by *= by;
                    Test.iArrFld[i14] -= 2685;
                    i17 += i16;
                    Test.iFld += (i16 * i16);
                    i13 |= i12;
                    switch(((Test.iFld >>> 1) % 5) + 78) {
                        case 78:
                            Test.instanceCount *= Test.instanceCount;
                            if (b) {
                                f1 += 11;
                            } else {
                                Test.dFld -= 35999;
                                Test.iFld &= (int) 33706L;
                                Test.iArrFld[i16 - 1] += i16;
                                Test.dFld -= Test.dFld;
                            }
                            Test.iArrFld[i14 - 1] >>= i17;
                            Test.iFld += (((i16 * i17) + i13) - Test.instanceCount);
                            Test.instanceCount = by;
                            Test.iArrFld[i16] -= (int) -1.9F;
                            Test.instanceCount += i14;
                            break;
                        case 79:
                            Test.instanceCount += (i16 * i16);
                            i15 += (int) (-6832041600744346708L + (i16 * i16));
                            i11 = (int) f1;
                            i17 += i11;
                            Test.instanceCount >>= i14;
                            switch((i16 % 2) + 52) {
                                case 52:
                                    lArr[i16 - 1] = -12;
                                    Test.iFld >>= Test.sFld;
                                    Test.fArrFld[i16][i16] = Test.instanceCount;
                                    f1 += Test.iFld;
                                    break;
                                case 53:
                                    i17 = -59;
                                default:
                                    i13 = 14;
                            }
                            break;
                        case 80:
                            Test.iArrFld[i14 + 1] = (int) l;
                            break;
                        case 81:
                            i11 -= i16;
                            break;
                        case 82:
                            Test.fArrFld[i12 - 1][i14 + 1] += Test.iFld;
                            break;
                        default:
                            i11 = (int) f1;
                    }
                }
            }
        }
        vMeth2_check_sum += i11 + i12 + i13 + i14 + i15 + i16 + i17 + by + Float.floatToIntBits(f1) + (b ? 1 : 0) + l + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i7) {
        float f = 2.985F;
        int i8 = 126, i9 = 44, i18 = 15429, i19 = -81, i20 = -8, i21 = 166, i22 = 30617, i23 = 7, iArr1[] = new int[N];
        double d1 = -63.30038, dArr[] = new double[N];
        boolean b1 = true;
        FuzzerUtils.init(iArr1, 179);
        FuzzerUtils.init(dArr, -58.100020);
        iArr1[(i7 >>> 1) % N] = (int) ((f--) * f);
        for (i8 = 2; 121 > i8; i8++) {
            i7 += (int) d1;
            if (i9 != 0) {
                vMeth1_check_sum += i7 + Float.floatToIntBits(f) + i8 + i9 + Double.doubleToLongBits(d1) + i18 + i19 + i20 + i21 + i22 + i23 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            }
            vMeth2(Test.iFld);
            for (i18 = 5; i18 > 1; --i18) {
                for (i20 = 1; i20 < 2; ++i20) {
                    i21 += i20;
                    i7 += (int) Test.instanceCount;
                    f += i18;
                    Test.instanceCount = 54;
                    Test.instanceCount = i7;
                }
                for (i22 = 1; 2 > i22; i22++) {
                    Test.instanceCount = -10;
                    {
                        java.io.PrintStream ax$0 = System.out;
                        java.io.PrintStream ax$1 = System.err;
                        java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$2);
                        System.setErr(ax$2);
                        {
                            boolean ax$6 = false;
                            for (int ax$5 = -3145; ax$5 < 6335; ax$5 += 9) {
                                if (!ax$6) {
                                    ax$6 = true;
                                    {
                                        System.setOut(ax$0);
                                        System.setErr(ax$1);
                                        switch(((i8 % 1) * 5) + 74) {
                                            case 77:
                                                i23 = i18;
                                                dArr[i22 + 1] -= Test.instanceCount;
                                                i21 += Test.iFld;
                                                Test.instanceCount += i22;
                                                break;
                                        }
                                        System.setOut(ax$2);
                                        System.setErr(ax$2);
                                    }
                                }
                                try {
                                    char ax$3 = '+';
                                    ax$3 = '\0';
                                } catch (Throwable ax$4) {
                                } finally {
                                }
                            }
                        }
                        System.setOut(ax$0);
                        System.setErr(ax$1);
                    }
                    Test.instanceCount = Test.iFld;
                    Test.instanceCount &= i23;
                    Test.instanceCount &= i9;
                    i21 = (int) Test.instanceCount;
                    i21 = i22;
                    dArr = dArr;
                    Test.instanceCount = i18;
                    Test.dFld = i7;
                    Test.instanceCount += i19;
                    Test.instanceCount += Test.instanceCount;
                    Test.iFld <<= Test.sFld;
                    switch((i8 % 2) + 1) {
                        case 1:
                            if (b1) {
                                Test.instanceCount += (i22 - i23);
                                i19 += (((i22 * i21) + i21) - Test.sFld);
                                f += i7;
                                i7 >>>= i8;
                                b1 = b1;
                            } else {
                                if (i8 != 0) {
                                    vMeth1_check_sum += i7 + Float.floatToIntBits(f) + i8 + i9 + Double.doubleToLongBits(d1) + i18 + i19 + i20 + i21 + i22 + i23 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                                    return;
                                }
                            }
                            break;
                        case 2:
                            i23 = (int) f;
                            break;
                        default:
                            dArr = dArr;
                    }
                }
            }
        }
        vMeth1_check_sum += i7 + Float.floatToIntBits(f) + i8 + i9 + Double.doubleToLongBits(d1) + i18 + i19 + i20 + i21 + i22 + i23 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i4, double d) {
        if (ax$7) {
            try {
                java.lang.String ax$8 = "2.518570098812429E-28";
                // Other classes may also get loaded, ignore those.
                if (ax$8.equals("LoadedByMyClassLoader") || ax$8.equals("FirstSeenByMyClassLoader")) {
                }
            } catch (Throwable ax$9) {
            } finally {
            }
            return;
        }
        int i5 = 13, i24 = 2467, i25 = -139, i26 = 9, i27 = -14, iArr[] = new int[N];
        float f2 = 0.957F;
        byte by1 = -4, byArr[][] = new byte[N][N];
        double d2 = 0.9198;
        boolean[] bArr = new boolean[N];
        FuzzerUtils.init(byArr, (byte) 47);
        FuzzerUtils.init(iArr, -116);
        FuzzerUtils.init(bArr, true);
        i5 = 1;
        while (++i5 < 229) {
            byArr = byArr;
            vMeth1(i5);
            i4 -= -101;
            Test.instanceCount += Test.instanceCount;
            i4 -= (int) Test.instanceCount;
            Test.iArrFld = iArr;
            i4 <<= i4;
            for (i24 = i5; i24 < 3; ++i24) {
                iArr[i5 - 1] = i5;
                if (Test.bFld)
                    break;
                for (i26 = i24; i26 < 1; ++i26) {
                    bArr[i26] = Test.bFld;
                    i25 -= (int) Test.instanceCount;
                    i4 = -122;
                    f2 = Test.instanceCount;
                    i27 += i25;
                    Test.iArrFld[i26] += Test.iFld;
                    i4 += -11824;
                    i25 |= i24;
                    Test.instanceCount ^= i27;
                    Test.iFld += (((i26 * f2) + i27) - i25);
                    Test.iArrFld[i24 + 1] = (int) f2;
                    Test.iFld >>= i24;
                    Test.instanceCount += (i26 * i26);
                    i25 = (int) Test.instanceCount;
                    i25 = 56945;
                }
                Test.iFld = i27;
                iArr[i24] = by1;
                i25 += -75;
                d2 += by1;
            }
            Test.iArrFld[i5] += (int) f2;
            Test.instanceCount = Test.iFld;
            i27 = Test.byFld;
            Test.instanceCount -= i24;
            Test.instanceCount = Test.byFld;
            Test.instanceCount += i24;
        }
        vMeth_check_sum += i4 + Double.doubleToLongBits(d) + i5 + i24 + i25 + i26 + i27 + Float.floatToIntBits(f2) + by1 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {
        int i = 11, i1 = -8, i2 = 35, i3 = -49723, i28 = -2594, i29 = 0, i30 = -9, i31 = 12, i32 = 33, iArr2[] = new int[N];
        float f3 = 18.667F;
        long l1 = -7156938947689205825L, lArr1[] = new long[N];
        short s = 19102;
        double[] dArr1 = new double[N];
        FuzzerUtils.init(lArr1, -31177L);
        FuzzerUtils.init(dArr1, -1.41931);
        FuzzerUtils.init(iArr2, 8);
        for (i = 5; 163 > i; i++) {
            for (i2 = 1; i2 < 32; ++i2) {
                switch((i % 5) + 85) {
                    case 85:
                        {
                            java.io.PrintStream ax$12 = System.out;
                            java.io.PrintStream ax$13 = System.err;
                            java.io.PrintStream ax$14 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$14);
                            System.setErr(ax$14);
                            try {
                                ax$7 = true;
                                for (int ax$10 = 0; ax$10 < 9055; ax$10 += 1) vMeth(-506008574, 0.9900601210001215);
                            } catch (java.lang.Throwable ax$11) {
                            } finally {
                                ax$7 = false;
                            }
                            System.setOut(ax$12);
                            System.setErr(ax$13);
                        }
                        vMeth(i, Test.dFld);
                        Test.instanceCount -= (long) Test.dFld;
                        Test.iFld *= i3;
                        Test.iFld += (((i2 * i) + Test.sFld) - Test.iFld);
                        Test.iArrFld[i] = Test.sFld;
                        try {
                            Test.iArrFld[i - 1] = (Test.iFld % i2);
                            Test.iFld = (i1 % Test.iFld);
                            Test.iArrFld[i2] = (192 / i2);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.iFld >>= i;
                        i3 = i;
                        if (false)
                            break;
                        switch((i % 4) + 67) {
                            case 67:
                                i3 += (i2 - i2);
                                i1 -= i3;
                                for (i28 = 1; i28 < 2; i28 += 3) {
                                    Test.instanceCount <<= Test.iFld;
                                    lArr1[i28] += i2;
                                    Test.iArrFld[i2] = (int) Test.instanceCount;
                                    Test.instanceCount += (((i28 * Test.instanceCount) + i2) - i);
                                    Test.iFld += i;
                                    if (Test.bFld)
                                        continue;
                                }
                                f3 -= i3;
                                dArr1[i2] -= Test.dFld;
                                Test.instanceCount += (i2 | i3);
                                Test.iFld <<= i29;
                                i1 = i29;
                                for (i30 = 1; 2 > i30; ++i30) {
                                    i29 += (int) Test.dFld;
                                    f3 += Test.instanceCount;
                                    i3 += (i30 - Test.instanceCount);
                                    i31 -= i31;
                                    i1 = i3;
                                    i3 *= (int) Test.instanceCount;
                                    Test.dFld -= i3;
                                    switch((i30 % 8) + 32) {
                                        case 32:
                                            i3 += i3;
                                            i32 += (-24305 + (i30 * i30));
                                            Test.byFld = (byte) Test.instanceCount;
                                            f3 += (i30 * i29);
                                            break;
                                        case 33:
                                            iArr2[i30 - 1] -= i2;
                                            i1 = (int) f3;
                                            Test.instanceCount -= Test.instanceCount;
                                            Test.iFld = (int) Test.instanceCount;
                                            switch((i2 % 6) + 124) {
                                                case 124:
                                                    Test.bFld = Test.bFld;
                                                    Test.iArrFld[i2] *= (int) Test.instanceCount;
                                                    lArr1[i30] <<= i29;
                                                    Test.fArrFld[i30][i30] -= Test.byFld;
                                                    break;
                                                case 125:
                                                    dArr1[i + 1] += i31;
                                                    i32 = (int) Test.dFld;
                                                    Test.instanceCount = i31;
                                                    lArr1[i + 1] >>= Test.instanceCount;
                                                    i31 += (i30 ^ Test.instanceCount);
                                                    Test.iArrFld[i30 + 1] = (int) f3;
                                                    Test.iArrFld[i2 - 1] >>= i28;
                                                    i3 = (int) 169L;
                                                    if (Test.bFld) {
                                                        Test.iArrFld[i] <<= (int) Test.instanceCount;
                                                        f3 += i2;
                                                        i32 = -4;
                                                        iArr2[i2 + 1] = i3;
                                                        i1 += (-213 + (i30 * i30));
                                                        Test.sFld >>= Test.byFld;
                                                        i1 += (int) Test.instanceCount;
                                                        Test.byArrFld[i - 1] |= (byte) -1;
                                                        i32 = (int) f3;
                                                    }
                                                    break;
                                                case 126:
                                                    f3 -= i1;
                                                    f3 = -4522839567343658085L;
                                                    Test.sFld = (short) i28;
                                                    i1 >>= i2;
                                                    i31 ^= (int) Test.instanceCount;
                                                    lArr1[i - 1] = Test.iFld;
                                                    f3 += (i30 * i30);
                                                case 127:
                                                    Test.instanceCount += i28;
                                                    break;
                                                case 128:
                                                    Test.dFld -= i31;
                                                    break;
                                                case 129:
                                                    i29 -= (int) Test.instanceCount;
                                            }
                                        case 34:
                                        case 35:
                                            l1 = i30;
                                            break;
                                        case 36:
                                            f3 -= i2;
                                        case 37:
                                            if (Test.bFld)
                                                break;
                                            break;
                                        case 38:
                                            i32 = 16374;
                                        case 39:
                                            l1 += l1;
                                        default:
                                            i1 -= i3;
                                    }
                                }
                            case 68:
                                try {
                                    i32 = (-61955 / i2);
                                    i29 = (i32 / -172);
                                    Test.iFld = (i30 % i30);
                                } catch (ArithmeticException a_e) {
                                }
                                break;
                            case 69:
                                i1 += i31;
                            case 70:
                                i3 += (int) f3;
                        }
                        break;
                    case 86:
                        Test.sFld = (short) i31;
                        break;
                    case 87:
                        s = (short) Test.instanceCount;
                        break;
                    case 88:
                        Test.iFld += i2;
                    case 89:
                        i29 = (int) Test.dFld;
                        break;
                }
            }
        }
        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i28 i29 = " + i3 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("f3 i30 i31 = " + Float.floatToIntBits(f3) + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 l1 s = " + i32 + "," + l1 + "," + s);
        FuzzerUtils.out.println("lArr1 dArr1 iArr2 = " + FuzzerUtils.checkSum(lArr1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + "," + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld Test.bFld Test.byFld = " + Test.sFld + "," + (Test.bFld ? 1 : 0) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.fArrFld Test.iArrFld Test.byArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$7 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
