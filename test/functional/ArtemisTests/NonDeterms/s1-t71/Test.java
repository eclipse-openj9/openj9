// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -1L;

    public static int iFld = 70;

    public static boolean bFld = false;

    public static short sFld = -28240;

    public double dFld = 2.119587;

    public static float[] fArrFld = new float[N];

    public volatile int[] iArrFld = new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -114.125F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(long l1, float f) {
        if (ax$17) {
            try {
                int ax$21 = 555550;
                int ax$22 = 0x1111;
                int[] ax$18 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
                int[] ax$19 = { 10, 20, 45, 38, 88 };
                for (int ax$20 = 0; ax$20 < ax$18.length; ax$20++) {
                    ax$18[ax$20] = ax$19[2 * ax$20] + 4;
                    // Increment value of dead cycle may throw exception. Dynamic
                    // BCE takes care of the bounds check though, which enables
                    // removing the ArrayGet after removing the dead cycle.
                    ax$21 += ax$18[ax$22];
                }
            } catch (Throwable ax$23) {
            } finally {
            }
            return 1124830167;
        }
        short s = 3187, sArr[][] = new short[N][N];
        int i4 = 12, i5 = -101, i6 = 176, i7 = 38347, i8 = -1, i9 = -4, i10 = -201, i11 = 23381, i12 = 13670, i13 = 139, i14 = 32668, iArr[] = new int[N];
        boolean b = false;
        long l2 = 24132L;
        double[] dArr = new double[N];
        FuzzerUtils.init(dArr, 0.13382);
        FuzzerUtils.init(iArr, -251);
        FuzzerUtils.init(sArr, (short) 2286);
        f = Test.iFld;
        dArr[(Test.iFld >>> 1) % N] -= s;
        for (i4 = 121; 1 < i4; i4--) {
            Test.iFld += (((i4 * l1) + i5) - Test.instanceCount);
            Test.iFld >>= i5;
        }
        for (i6 = 7; i6 < 201; ++i6) {
            Test.iFld = i4;
            b = b;
            l1 *= Test.instanceCount;
            Test.iFld = i5;
            Test.iFld = i5;
            iArr[i6 - 1] *= -2;
            for (i8 = 1; 3 > i8; ++i8) {
                iArr[i6] = i10;
                i5 |= (int) l1;
                for (i11 = 1; i11 < 2; ++i11) {
                    double d = -1.6097;
                    Test.iFld ^= -60753;
                    i12 = 80;
                    switch(((i5 >>> 1) % 2) + 39) {
                        case 39:
                            Test.iFld -= s;
                            i13 += -29742;
                            i12 -= (int) 6740033399327436609L;
                            i12 += i11;
                            s += (short) i4;
                            switch((i8 % 7) + 57) {
                                case 57:
                                    l1 >>>= i5;
                                    iArr[i8] = i5;
                                    d = l2;
                                    i5 >>= (int) l1;
                                    l2 = s;
                                    i5 = (int) l2;
                                    break;
                                case 58:
                                    i5 >>>= i5;
                                    break;
                                case 59:
                                    b = b;
                                    iArr[i11] += (int) 33625L;
                                    i10 *= -12;
                                    i10 ^= i9;
                                    break;
                                case 60:
                                    i12 += (((i11 * i9) + i13) - l1);
                                    break;
                                case 61:
                                    sArr[i11 - 1][i11] -= (short) -48737;
                                    break;
                                case 62:
                                    f -= i8;
                                    break;
                                case 63:
                                    b = b;
                                    break;
                                default:
                                    try {
                                        i9 = (iArr[i8 - 1] / 31294);
                                        i10 = (iArr[i8] / i12);
                                        i7 = (i12 % -234);
                                    } catch (ArithmeticException a_e) {
                                    }
                            }
                        case 40:
                            i13 = i14;
                    }
                }
            }
        }
        long meth_res = l1 + Float.floatToIntBits(f) + s + i4 + i5 + i6 + i7 + (b ? 1 : 0) + i8 + i9 + i10 + i11 + i12 + i13 + l2 + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(int i1) {
        if (ax$29) {
            try {
                short[] ax$33 = new short[] { 20, 10, 0, -10, -20 };
                int[] ax$30 = { 5, 4, 1, 9, 10, 2, 7, 6, 3, 8 };
                int ax$31 = Math.min(ax$33.length, ax$30.length);
                for (int ax$32 = 0; ax$32 < ax$31; ax$32++) {
                    ax$33[ax$32] = (short) (ax$30[ax$32] >> 1);
                }
            } catch (Throwable ax$34) {
            } finally {
            }
            return;
        }
        int i2 = -4327, i3 = 14796, i15 = 14268, i16 = 0, i17 = 131, iArr1[][] = new int[N][N];
        float f1 = 92.675F;
        double d1 = -37.30471;
        boolean[] bArr = new boolean[N];
        long[] lArr = new long[N];
        short[] sArr1 = new short[N];
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, -5);
        FuzzerUtils.init(lArr, 6552L);
        FuzzerUtils.init(sArr1, (short) -19938);
        i2 = 1;
        do {
            switch((i2 % 2) + 114) {
                case 114:
                    i1 += (i2 * i2);
                    i3 = 1;
                    do {
                        Test.iFld += (i3 | i1);
                        i1 <<= iMeth(Test.instanceCount, f1);
                        Test.iFld = i2;
                        Test.instanceCount = (long) f1;
                        Test.instanceCount = Test.instanceCount;
                        i1 = i1;
                        i1 = i3;
                        Test.iFld = (int) Test.instanceCount;
                        for (d1 = 1; d1 < 1; d1++) {
                            Test.instanceCount -= -32831;
                            Test.iFld = i1;
                            i1 = 6;
                            Test.iFld = Test.iFld;
                            i15 = (int) -6425837446007316533L;
                            i15 >>= 29628;
                            Test.instanceCount *= Test.instanceCount;
                            i1 = Test.iFld;
                        }
                        f1 += (((i3 * i3) + i1) - i1);
                        Test.instanceCount *= 3;
                        bArr[i2] = Test.bFld;
                        i1 += (i3 * Test.instanceCount);
                        i15 >>= i2;
                    } while (++i3 < 4);
                    i1 += -9864;
                    break;
                case 115:
                    iArr1[i2][i2] -= i2;
                    f1 -= 18;
                    f1 = i15;
                    if (Test.bFld) {
                        i15 = (int) Test.instanceCount;
                        vMeth1_check_sum += i1 + i2 + i3 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i15 + i16 + i17 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr1);
                        return;
                    } else if (Test.bFld) {
                        Test.fArrFld[i2 + 1] *= i15;
                        Test.iFld = (int) Test.instanceCount;
                        for (i16 = 4; i16 > 1; i16 -= 3) {
                            i15 -= (int) d1;
                            i1 = i3;
                        }
                    } else {
                        bArr[i2 + 1] = Test.bFld;
                    }
                    break;
            }
        } while (++i2 < 143);
        vMeth1_check_sum += i1 + i2 + i3 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i15 + i16 + i17 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr1);
    }

    public static void vMeth(long l) {
        double d2 = 0.22115;
        byte by1 = 108;
        int i18 = 38913, i19 = 237, i20 = 0, i21 = 64, i22 = 5613, i23 = 13, i24 = -12, iArr2[] = new int[N];
        float f2 = 123.548F, fArr[] = new float[N];
        long[] lArr1 = new long[N];
        FuzzerUtils.init(fArr, 0.901F);
        FuzzerUtils.init(iArr2, -4);
        FuzzerUtils.init(lArr1, -61532L);
        fArr[(Test.iFld >>> 1) % N] = Test.iFld;
        {
            java.io.PrintStream ax$37 = System.out;
            java.io.PrintStream ax$38 = System.err;
            java.io.PrintStream ax$39 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$39);
            System.setErr(ax$39);
            try {
                ax$29 = true;
                for (int ax$35 = 0; ax$35 < 8109; ax$35 += 1) vMeth1(-1000214817);
            } catch (java.lang.Throwable ax$36) {
            } finally {
                ax$29 = false;
            }
            System.setOut(ax$37);
            System.setErr(ax$38);
        }
        vMeth1(Test.iFld);
        d2 = Test.iFld;
        Test.iFld <<= Test.iFld;
        by1 += (byte) 49905;
        iArr2[(Test.iFld >>> 1) % N] *= (int) l;
        for (i18 = 195; i18 > 7; i18--) {
            if (Test.bFld)
                break;
            lArr1[i18] >>= l;
            Test.iFld += i19;
            switch((i18 % 4) + 123) {
                case 123:
                    Test.fArrFld[i18] = f2;
                    i20 = 1;
                    do {
                        Test.iFld = (int) l;
                        if (Test.bFld)
                            continue;
                        Test.iFld += (int) l;
                        Test.iFld += Test.iFld;
                    } while (++i20 < 3);
                    for (i21 = 1; i21 < 3; i21++) {
                        Test.iFld = i19;
                        for (i23 = 2; i23 > 1; i23 -= 2) {
                            switch((i23 % 9) + 11) {
                                case 11:
                                    f2 *= i23;
                                    i19 += i23;
                                    Test.iFld = Test.iFld;
                                    i22 -= i18;
                                    f2 = i24;
                                    i19 -= i22;
                                    break;
                                case 12:
                                    f2 *= (float) d2;
                                    d2 = l;
                                    iArr2[i23] &= i24;
                                    d2 *= i18;
                                    switch((i18 % 2) + 76) {
                                        case 76:
                                            i19 = i20;
                                            Test.iFld *= (int) Test.instanceCount;
                                            i19 = i21;
                                            Test.instanceCount = l;
                                            l -= (long) f2;
                                            break;
                                        case 77:
                                            i19 += (i23 * i23);
                                            break;
                                    }
                                case 13:
                                    iArr2[i18] *= i24;
                                case 14:
                                    i22 = Test.sFld;
                                    break;
                                case 15:
                                    d2 *= 49724;
                                case 16:
                                    Test.iFld += (i23 ^ i22);
                                case 17:
                                    Test.sFld += (short) (i23 + i18);
                                    break;
                                case 18:
                                    iArr2[i18 - 1] += i22;
                                    break;
                                case 19:
                                    l += (((i23 * i23) + i19) - i24);
                            }
                        }
                    }
                    break;
                case 124:
                    Test.instanceCount -= (long) d2;
                case 125:
                    l -= 3809766128560210259L;
                    break;
                case 126:
                    i22 += (((i18 * i22) + l) - Test.sFld);
                    break;
                default:
                    l += (long) d2;
            }
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d2) + by1 + i18 + i19 + Float.floatToIntBits(f2) + i20 + i21 + i22 + i23 + i24 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {
        int i = -11831, i25 = 11, i26 = -150, i27 = 62987, i28 = 0, i29 = -13, i30 = 23510, i31 = -14, i32 = 7, i33 = 19795, i34 = 3, i35 = 4;
        byte by = 124;
        float f3 = 80.932F;
        long[] lArr2 = new long[N];
        FuzzerUtils.init(lArr2, -9L);
        i = (int) (Math.abs(i + i) * Test.instanceCount);
        i = (((-(i * by)) * Math.min(i, i)) + (--i));
        vMeth(Test.instanceCount);
        Test.instanceCount = -29825;
        for (i25 = 7; i25 < 128; i25++) {
            switch(((i25 >>> 1) % 6) + 31) {
                case 31:
                    for (i27 = 1; i27 < 42; i27++) {
                        Test.fArrFld[i25 + 1] -= Test.instanceCount;
                    }
                    for (i29 = 2; i29 < 42; ++i29) {
                        i31 = 1;
                        while (++i31 < 2) {
                            i30 = (int) f3;
                            Test.iFld = (int) dFld;
                            if (Test.bFld)
                                break;
                            iArrFld[i25] = (int) 109L;
                            Test.instanceCount += (i31 * i31);
                            Test.instanceCount >>= Test.instanceCount;
                            Test.bFld = Test.bFld;
                            dFld = by;
                        }
                        f3 += (i29 + i26);
                    }
                    i32 = 1;
                    while (++i32 < 42) {
                        switch((i25 % 2) + 23) {
                            case 23:
                                Test.instanceCount = Test.instanceCount;
                                i30 += i;
                                iArrFld[i25 - 1] = (int) -10595L;
                                i26 += i32;
                                for (i33 = 1; 1 > i33; ++i33) {
                                    i34 += i34;
                                    dFld -= Test.instanceCount;
                                    i28 *= i29;
                                    Test.iFld += i32;
                                    f3 += (223L + (i33 * i33));
                                    i26 += i35;
                                    i28 -= i25;
                                    switch((i32 % 9) + 67) {
                                        case 67:
                                            Test.instanceCount -= -29867;
                                            iArrFld[i33 + 1] += -13;
                                            Test.iFld += (-3 + (i33 * i33));
                                            i26 -= (int) 1.71097;
                                            i = i25;
                                            Test.sFld = (short) i27;
                                            lArr2[i25 + 1] = i26;
                                            i30 += (int) Test.instanceCount;
                                            f3 = i25;
                                            break;
                                        case 68:
                                        case 69:
                                            try {
                                                iArrFld[i25 - 1] = (i28 % 53956);
                                                i28 = (i31 / i34);
                                                i28 = (i32 / 87);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            iArrFld[i32] += i;
                                            i35 >>= i29;
                                            i <<= -10886;
                                            Test.bFld = Test.bFld;
                                            i28 -= 120;
                                            Test.sFld = (short) i30;
                                            f3 -= -36860;
                                            iArrFld[i25] += i29;
                                            by = (byte) Test.instanceCount;
                                            iArrFld[i33] *= (int) f3;
                                            if (Test.bFld) {
                                                Test.instanceCount += Test.instanceCount;
                                                dFld += i29;
                                                i30 <<= i35;
                                                if (Test.bFld)
                                                    break;
                                                i = i;
                                                Test.instanceCount *= (long) f3;
                                                iArrFld[i32] = -8;
                                                Test.instanceCount += (i33 * f3);
                                                if (false)
                                                    continue;
                                                i30 *= i28;
                                                dFld = Test.iFld;
                                                i26 += i33;
                                                iArrFld[i32 - 1] += i35;
                                                iArrFld[i25 + 1] = i27;
                                            }
                                            by = (byte) i35;
                                            Test.iFld += i31;
                                            break;
                                        case 70:
                                            Test.instanceCount &= i31;
                                            i28 += (int) Test.instanceCount;
                                            f3 -= i34;
                                            f3 += i29;
                                            break;
                                        case 71:
                                            i28 = i;
                                            break;
                                        case 72:
                                            f3 += (i33 - Test.iFld);
                                            break;
                                        case 73:
                                            Test.instanceCount = Test.iFld;
                                            break;
                                        case 74:
                                        case 75:
                                            lArr2[i33] &= 1;
                                    }
                                }
                                break;
                            case 24:
                                i *= i35;
                                break;
                            default:
                                Test.iFld += i32;
                        }
                    }
                    {
                        java.io.PrintStream ax$5 = System.out;
                        java.io.PrintStream ax$6 = System.err;
                        java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$7);
                        System.setErr(ax$7);
                        try {
                            for (int ax$3 = -2201; ax$3 < 7174; ax$3 += 1) {
                                try {
                                    int[] ax$0 = { 2, 5, 9, -1, -3, 10, 8, 4 };
                                    for (int ax$1 = 0; ax$1 < 128; ax$1++) {
                                        ax$0[ax$1] = ax$1;
                                    }
                                } catch (Throwable ax$2) {
                                } finally {
                                }
                            }
                        } catch (Throwable ax$4) {
                        }
                        System.setOut(ax$5);
                        System.setErr(ax$6);
                    }
                    break;
                case 32:
                    Test.instanceCount >>>= Test.iFld;
                    break;
                case 33:
                    i28 = by;
                    break;
                case 34:
                    dFld = i28;
                    break;
                case 35:
                    lArr2[i25 - 1] <<= i31;
                    break;
                case 36:
                    Test.bFld = Test.bFld;
                    break;
            }
        }
        FuzzerUtils.out.println("i by i25 = " + i + "," + by + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("f3 i32 i33 = " + Float.floatToIntBits(f3) + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 lArr2 = " + i34 + "," + i35 + "," + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld dFld Test.fArrFld = " + Test.sFld + "," + Double.doubleToLongBits(dFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
            {
                java.io.PrintStream ax$14 = System.out;
                java.io.PrintStream ax$15 = System.err;
                java.io.PrintStream ax$16 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$16);
                System.setErr(ax$16);
                try {
                    for (int ax$12 = -3593; ax$12 < 2529; ax$12 += 1) {
                        int ax$10 = iFld;
                        try {
                            float[] ax$9 = new float[10];
                            float[] ax$8 = { -0.0f, -0.0f, 0.0f, -0.0f };
                            ax$8[iFld] = 0.0f;
                            ax$9[iFld] = 2.0f;
                        } catch (Throwable ax$11) {
                        } finally {
                            iFld = ax$10;
                        }
                    }
                } catch (Throwable ax$13) {
                }
                System.setOut(ax$14);
                System.setErr(ax$15);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$17 = false;

    private static Boolean ax$29 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
