// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Test {
    public static final int N = 256;

    public static volatile long instanceCount = 234L;

    public static boolean bFld = true;

    public static boolean bFld1 = true;

    public static short sFld = -6562;

    public static volatile int iFld = 180;

    public static int iFld1 = 210;

    public volatile long lFld = -337050077L;

    public static int iArrFld[] = new int[N];

    public static int iArrFld1[] = new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 1);
        FuzzerUtils.init(Test.iArrFld1, 7910);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth() {
        if (Test.ax$0) {
            final int ax$6 = Test.iFld1;
            byte[] ax$1 = new byte[5];
            byte[] ax$3 = new byte[]{ 0, -1, -2, -3, -4 };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                for (int ax$4 = 0; ax$4 < ax$3.length; ax$4 += 1) {
                    ax$3[ax$4] = ((byte) (ax$1[ax$4] << iFld1));
                }
            } catch (Throwable ax$5) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iFld1 = ax$6;
            return 97432639;
        }
        short s = 14743;
        short s1 = -22740;
        int i8 = -49461;
        int i9 = 5548;
        int i10 = 31106;
        int i11 = -125;
        int i12 = -34720;
        int i13 = -5;
        int i14 = 18545;
        int i15 = 5;
        int i16 = -7;
        int i17 = -12652;
        float f = 0.77F;
        float fArr[] = new float[N];
        double d = 2.33456;
        byte by = 18;
        FuzzerUtils.init(fArr, 34.59F);
        for (int i7 : Test.iArrFld) {
            s -= ((short) (i7));
        }
        Test.iArrFld[(i8 >>> 1) % N] *= i8;
        i8 -= i8;
        for (i9 = 2; i9 < 83; i9++) {
            i10 *= i8;
            Test.iArrFld[i9] -= i9;
            i11 = 1;
            do {
                i10 = ((int) (-31371L));
                Test.iArrFld[i11] = ((int) (Test.instanceCount));
                f = i10;
                for (i12 = i11; i12 < 1; ++i12) {
                    Test.instanceCount += ((long) (f));
                }
                i8 = s;
                Test.instanceCount += ((i11 * i8) + i9) - Test.instanceCount;
                s1 += ((short) (i11));
                i10 += ((i11 * f) + f) - Test.instanceCount;
                d = 1;
                while ((++d) < 1) {
                    i8 <<= i10;
                    i8 &= ((int) (Test.instanceCount));
                    i13 = by;
                }
                Test.instanceCount >>= -7;
                for (i14 = 1; i14 < 1; i14++) {
                    i13 += (-20378) + (i14 * i14);
                    i10 += ((i14 * i8) + f) - i12;
                    f += 0.779F + (i14 * i14);
                    Test.bFld = Test.bFld1;
                    by += ((byte) (i11));
                }
                switch (((((-11) >>> 1) % 7) * 5) + 42) {
                    case 45 :
                        f = f;
                        for (i16 = i11; i16 < 1; i16++) {
                            Test.iArrFld[i9] = -65;
                            i17 %= ((int) (i9 | 1));
                            if (Test.bFld) {
                                Test.instanceCount += 30334;
                                i17 = by;
                                fArr = fArr;
                            } else if (Test.bFld) {
                                i17 = ((int) (Test.instanceCount));
                            } else if (Test.bFld1) {
                                i15 = i13;
                            }
                        }
                        break;
                    case 47 :
                        f += i11 + i11;
                        break;
                    case 52 :
                    case 70 :
                        if (Test.bFld1)
                            break;

                    case 73 :
                        i15 >>>= i13;
                        break;
                    case 72 :
                        Test.iArrFld[i9] += ((int) (f));
                    case 68 :
                        i8 += i11;
                    default :
                        Test.iArrFld1[i9] = ((int) (Test.instanceCount));
                }
            } while ((++i11) < 7 );
        }
        long meth_res = ((((((((((((((s + i8) + i9) + i10) + i11) + Float.floatToIntBits(f)) + i12) + i13) + s1) + Double.doubleToLongBits(d)) + by) + i14) + i15) + i16) + i17) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static void vMeth1(int i5, int i6) {
        boolean b = true;
        boolean bArr[] = new boolean[N];
        int i18 = -212;
        int i19 = -166;
        int i20 = 23;
        int i21 = -243;
        int i22 = -1;
        int i23 = -5;
        int i24 = -1;
        int i25 = -11229;
        int i26 = -48;
        int i27 = 94;
        double d1 = 0.60757;
        float f1 = -1.157F;
        float fArr1[] = new float[N];
        byte by1 = -70;
        long lArr1[] = new long[N];
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr1, -89.804F);
        FuzzerUtils.init(lArr1, -3226888060L);
        i6 = Math.max(i5, --i5);
        {
            final int ax$18 = i20;
            final int ax$19 = i26;
            try {
                BigInteger ax$8 = null;
                BigInteger ax$9 = new BigInteger("00");
                Random ax$12 = new Random();
                List<Boolean> ax$13 = new ArrayList<Boolean>();
                for (int ax$7 = -510; ax$7 < (-510 + 15173); ax$7 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (ax$9.bitLength() != 4000001) {
                        } else if (ax$9.mod(ax$8).compareTo(BigInteger.valueOf(i26)) != 0) {
                        } else {
                        }
                    } catch (Throwable ax$11) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    iMeth();
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$15 = 0; ax$15 < 1000; ax$15++) {
                            boolean ax$16 = ax$12.nextBoolean();
                            if (!ax$16) {
                                i20++;
                            }
                            ax$13.add(ax$16);
                        }
                    } catch (Throwable ax$17) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i20 = ax$18;
                i26 = ax$19;
            }
        }
        b = bArr[(i6 >>> 1) % N] = iMeth() < i5;
        for (i18 = 6; i18 < 115; ++i18) {
            i5 += i18;
            for (i20 = 1; i20 < 5; ++i20) {
                try {
                    i21 = Test.iArrFld1[i20] % 6048;
                    i5 = i20 % (-52);
                    i21 = Test.iArrFld1[i18] / 105;
                } catch (ArithmeticException a_e) {
                }
                Test.instanceCount -= i6;
                d1 = 2;
                do {
                    Test.instanceCount >>= -148;
                    Test.instanceCount = ((long) (f1));
                    i6 += 49115 + (d1 * d1);
                } while ((--d1) > 0 );
                fArr1[i20] += i21;
                fArr1[i20 + 1] = -2.745F;
                i5 >>= i6;
                for (i22 = 1; 2 > i22; ++i22) {
                    i21 += i22;
                    Test.instanceCount >>= -5L;
                    if (i18 != 0) {
                        vMeth1_check_sum += (((((((((((((((((i5 + i6) + (b ? 1 : 0)) + i18) + i19) + i20) + i21) + Double.doubleToLongBits(d1)) + Float.floatToIntBits(f1)) + i22) + i23) + i24) + i25) + i26) + i27) + by1) + FuzzerUtils.checkSum(bArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    i23 = Test.sFld;
                }
                lArr1[i18 + 1] <<= Test.instanceCount;
                Test.iArrFld[i18] -= 11;
            }
            for (i24 = 1; i24 < 5; ++i24) {
                switch ((i18 % 9) + 94) {
                    case 94 :
                        Test.bFld1 = b;
                        fArr1[(i19 >>> 1) % N] = 77.43F;
                        i5 += ((int) (2.759F + (i24 * i24)));
                        lArr1 = lArr1;
                    case 95 :
                        if (Test.bFld1) {
                            try {
                                i19 = (-220434776) / i21;
                                i6 = i21 / 1274595193;
                                i21 = i22 / i22;
                            } catch (ArithmeticException a_e) {
                            }
                            if (Test.bFld1)
                                break;

                            i19 += i24;
                            if (i23 != 0) {
                                vMeth1_check_sum += (((((((((((((((((i5 + i6) + (b ? 1 : 0)) + i18) + i19) + i20) + i21) + Double.doubleToLongBits(d1)) + Float.floatToIntBits(f1)) + i22) + i23) + i24) + i25) + i26) + i27) + by1) + FuzzerUtils.checkSum(bArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(lArr1);
                                return;
                            }
                            i25 = -20563;
                            lArr1[i24] += 17569;
                            for (i26 = 1; i26 < 2; i26++) {
                                i23 += ((int) (Test.instanceCount));
                                Test.instanceCount -= i20;
                            }
                        } else if (true) {
                            Test.bFld = b;
                        } else {
                            i25 += i24 - f1;
                        }
                        break;
                    case 96 :
                        i5 += ((i24 * Test.instanceCount) + i27) - i25;
                        break;
                    case 97 :
                        i27 *= i25;
                        break;
                    case 98 :
                        i23 = i26;
                    case 99 :
                        i23 += ((int) (-14L));
                        break;
                    case 100 :
                        by1 *= ((byte) (Test.instanceCount));
                        break;
                    case 101 :
                        {
                            final boolean ax$51 = b;
                            try {
                                DecimalFormat ax$41 = new DecimalFormat();
                                String ax$43 = "s";
                                Number ax$44 = null;
                                String ax$45 = "1.498263252683064E+16";
                                Object ax$47 = new Object();
                                boolean ax$40 = false;
                                for (int ax$39 = -651; ax$39 < (-651 + 8037); ax$39 += 1) {
                                    Test.AxOutputRedirectionHelper.redirect();
                                    try {
                                        b = true;
                                    } catch (Throwable ax$46) {
                                    } finally {
                                    }
                                    Test.AxOutputRedirectionHelper.recover();
                                    if (!ax$40) {
                                        Test.instanceCount -= ((long) (d1));
                                        ax$40 = true;
                                    }
                                    Test.AxOutputRedirectionHelper.redirect();
                                    try {
                                        try {
                                            ax$47.wait(-500);
                                        } catch (IllegalArgumentException ax$48) {
                                        } catch (InterruptedException ax$49) {
                                        }
                                    } catch (Throwable ax$50) {
                                    } finally {
                                    }
                                    Test.AxOutputRedirectionHelper.recover();
                                }
                            } finally {
                                b = ax$51;
                            }
                        }
                        break;
                    case 102 :
                        Test.sFld = ((short) (i27));
                        break;
                    default :
                        i21 = i26;
                }
            }
        }
        vMeth1_check_sum += (((((((((((((((((i5 + i6) + (b ? 1 : 0)) + i18) + i19) + i20) + i21) + Double.doubleToLongBits(d1)) + Float.floatToIntBits(f1)) + i22) + i23) + i24) + i25) + i26) + i27) + by1) + FuzzerUtils.checkSum(bArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(int i, int i1, int i2) {
        if (Test.ax$20) {
            final int ax$27 = i2;
            final int ax$26 = Test.iFld;
            final int ax$25 = Test.iFld1;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                if (iFld1 < i2) {
                    iFld = -1;
                } else if (iFld1 > i2) {
                    iFld = 1;
                }
            } catch (Throwable ax$24) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iFld1 = ax$25;
            Test.iFld = ax$26;
            i2 = ax$27;
            return;
        }
        int i3 = -51294;
        int i4 = 10;
        int i28 = -18743;
        int i29 = -158;
        int i30 = -127;
        int i31 = 10;
        int i32 = 24830;
        float f2 = -59.431F;
        float fArr2[] = new float[N];
        double d2 = -11.979;
        double dArr[] = new double[N];
        byte by2 = -61;
        byte byArr[][] = new byte[N][N];
        long lArr[][] = new long[N][N];
        FuzzerUtils.init(lArr, 2298100332L);
        FuzzerUtils.init(fArr2, 54.749F);
        FuzzerUtils.init(dArr, -2.35872);
        FuzzerUtils.init(byArr, ((byte) (90)));
        lArr[(i >>> 1) % N] = lArr[(i2 >>> 1) % N] = lArr[((-185) >>> 1) % N] = lArr[(i1 >>> 1) % N];
        for (i3 = 216; i3 > 8; --i3) {
            vMeth1(i4, i3);
            for (i28 = 1; i28 < 3; ++i28) {
                Test.iArrFld1[i28 - 1] <<= i;
                fArr2[i28] -= i1;
                i29 -= ((int) (-5.436F));
                i1 >>= ((int) (Test.instanceCount));
                Test.instanceCount += i28 * i28;
                if (i2 != 0) {
                    vMeth_check_sum += (((((((((((((((i + i1) + i2) + i3) + i4) + i28) + i29) + i30) + i31) + i32) + Float.floatToIntBits(f2)) + Double.doubleToLongBits(d2)) + by2) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2))) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(byArr);
                    return;
                }
                Test.instanceCount = 7;
                lArr[i28 + 1][i3] -= i28;
                i2 += i28 ^ Test.iFld;
                i30 = 2;
                do {
                    i = ((int) (2.523F));
                    Test.iFld ^= -34;
                    Test.instanceCount *= ((long) (83.584F));
                    lArr[i28][i3 - 1] += i29;
                    try {
                        i2 = Test.iArrFld1[i3 - 1] / 13065;
                        Test.iArrFld1[i28] = i3 % Test.iFld;
                        i = 290517603 / i3;
                    } catch (ArithmeticException a_e) {
                    }
                    Test.instanceCount = i30;
                    i4 += i29;
                    i29 += i30 * i30;
                    i = -9;
                    Test.iFld *= -188;
                    Test.instanceCount = i2;
                    Test.instanceCount -= Test.instanceCount;
                    dArr[i28 - 1] = i2;
                    Test.bFld1 = Test.bFld1;
                } while ((--i30) > 0 );
                if (false) {
                    i += i28 * i28;
                    for (i31 = i28; i31 < 2; i31++) {
                        switch (((i32 >>> 1) % 9) + 67) {
                            case 67 :
                                i32 += ((i31 * f2) + i) - Test.iFld;
                                i32 = i28;
                                break;
                            case 68 :
                            case 69 :
                            case 70 :
                                fArr2[i28 - 1] = i1;
                                Test.instanceCount = i;
                                i4 = i1;
                                break;
                            case 71 :
                                i4 += i31;
                                break;
                            case 72 :
                                d2 *= i;
                            case 73 :
                                byArr[i3 + 1][i31 + 1] += ((byte) (f2));
                                break;
                            case 74 :
                                f2 += i31 * i31;
                            case 75 :
                                i29 += i31 - by2;
                                break;
                        }
                    }
                } else if (Test.bFld) {
                    i4 <<= i3;
                    vMeth_check_sum += (((((((((((((((i + i1) + i2) + i3) + i4) + i28) + i29) + i30) + i31) + i32) + Float.floatToIntBits(f2)) + Double.doubleToLongBits(d2)) + by2) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2))) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(byArr);
                    return;
                } else {
                    Test.iArrFld1 = FuzzerUtils.int1array(N, ((int) (0)));
                }
            }
        }
        vMeth_check_sum += (((((((((((((((i + i1) + i2) + i3) + i4) + i28) + i29) + i30) + i31) + i32) + Float.floatToIntBits(f2)) + Double.doubleToLongBits(d2)) + by2) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2))) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {
        int i33 = 41397;
        int i34 = 895;
        int i35 = 10;
        int i36 = -130;
        int i37 = 8;
        float f3 = -39.121F;
        float f4 = -53.52F;
        float fArr3[] = new float[N];
        byte by3 = -17;
        double d3 = -60.79292;
        long lArr2[][] = new long[N][N];
        short sArr[] = new short[N];
        FuzzerUtils.init(lArr2, 232L);
        FuzzerUtils.init(fArr3, -51.733F);
        FuzzerUtils.init(sArr, ((short) (24315)));
        {
            final int ax$37 = i33;
            final int ax$38 = i36;
            try {
                byte[] ax$29 = new byte[]{ ((byte) (52)), ((byte) (-67)), ((byte) (-117)), ((byte) (112)), ((byte) (118)), ((byte) (-67)) };
                byte[] ax$32 = new byte[]{ ((byte) (-128)), ((byte) (-68)), ((byte) (71)), ((byte) (33)), ((byte) (14)) };
                Integer ax$34 = -1097946081;
                Integer ax$35 = 1052059735;
                for (int ax$28 = -761; ax$28 < (-761 + 13595); ax$28 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$32[i36] = ((byte) (ax$29[i36] >> (-i33)));
                    } catch (Throwable ax$33) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$20 = true;
                    vMeth(1519293805, 1086163947, -1420565037);
                    Test.ax$20 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$34 = ax$34 + ax$35;
                    } catch (Throwable ax$36) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i33 = ax$37;
                i36 = ax$38;
            }
        }
        vMeth(Test.iFld, Test.iFld, Test.iFld);
        i33 = 1;
        do {
            for (i34 = 1; i34 < 32; ++i34) {
                for (f3 = 1; 2 > f3; f3++) {
                    f4 -= i35;
                    i35 *= 3;
                    lArr2[((int) (f3))][(i36 >>> 1) % N] >>= i35;
                    fArr3[i33 - 1] += by3;
                    i36 += i35;
                    switch (((int) (((f3 % 7) * 5) + 29))) {
                        case 37 :
                            i35 = i35;
                            Test.bFld1 = Test.bFld;
                        case 38 :
                            if (Test.bFld)
                                break;

                            Test.iFld *= -14;
                            Test.instanceCount = -7315;
                            d3 -= Test.instanceCount;
                            i35 += ((int) (f3));
                            Test.iArrFld[i34 + 1] = i35;
                            break;
                        case 41 :
                            Test.instanceCount += ((long) (f3));
                            i36 += ((int) (f3 * f3));
                            Test.iFld *= i34;
                            Test.iFld1 += ((int) (31603L + (f3 * f3)));
                            Test.iFld = i36;
                            Test.bFld1 = Test.bFld;
                            Test.instanceCount += ((long) (f3 * f3));
                            Test.instanceCount = ((long) (-123.942F));
                            i36 += ((int) (f3 - Test.instanceCount));
                            Test.iFld *= i34;
                            Test.iFld1 += ((int) (3788707811L));
                            Test.instanceCount -= 185;
                        case 55 :
                            d3 = i36;
                            i35 %= ((int) (i33 | 1));
                            break;
                        case 54 :
                            fArr3[((int) (f3 + 1))] = i35;
                            Test.iFld1 = i33;
                            i36 *= by3;
                            i36 += ((int) (Test.instanceCount));
                            Test.iArrFld1[((int) (f3 - 1))] <<= 176;
                            Test.iFld += i36;
                        case 60 :
                            i37 <<= i35;
                            switch (((i34 % 4) * 5) + 88) {
                                case 97 :
                                    Test.instanceCount <<= 19908;
                                    Test.iArrFld[i33] = i33;
                                    i35 *= ((int) (Test.instanceCount));
                                    Test.iArrFld[((int) (f3 - 1))] -= ((int) (Test.instanceCount));
                                    i35 = i37;
                                    if (Test.bFld1) {
                                        i35 *= Test.iFld1;
                                        Test.instanceCount += Test.iFld1;
                                        i35 >>= Test.iFld1;
                                    } else {
                                        Test.iArrFld1[i34 - 1] = i35;
                                        try {
                                            Test.iFld = i36 / 195;
                                            i37 = 108 / i34;
                                            i37 = i37 / (-46131);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        i36 += ((int) (f3 + i37));
                                        Test.instanceCount += i34;
                                        Test.iFld1 >>= by3;
                                        d3 += Test.instanceCount;
                                        Test.instanceCount >>= Test.instanceCount;
                                        i35 += Test.iFld;
                                    }
                                    Test.sFld += ((short) (i37));
                                    lArr2[i34][((int) (f3))] -= ((long) (-127.27074));
                                    i36 -= Test.iFld1;
                                    break;
                                case 93 :
                                    by3 = ((byte) (Test.instanceCount));
                                    if (Test.bFld1)
                                        continue;

                                    Test.sFld = ((short) (Test.iFld));
                                    fArr3[((int) (f3))] = i34;
                                    Test.instanceCount |= Test.iFld;
                                    lFld += ((long) (f3));
                                    Test.instanceCount = i35;
                                    Test.instanceCount += lFld;
                                    lFld += ((long) (((f3 * i34) + i37) - Test.iFld));
                                    break;
                                case 107 :
                                    lArr2[i33 - 1][i33] ^= Test.iFld1;
                                    sArr[((int) (f3 + 1))] = ((short) (-7493));
                                    i37 += ((int) (f3));
                                    lArr2[((int) (f3))][i33 + 1] -= Test.instanceCount;
                                    i35 <<= i35;
                                    f4 -= -57455;
                                    break;
                                case 103 :
                                default :
                                    lArr2[i34 + 1][i33] = i35;
                            }
                        case 59 :
                    }
                }
            }
        } while ((++i33) < 157 );
        FuzzerUtils.out.println((((("i33 i34 i35 = " + i33) + ",") + i34) + ",") + i35);
        FuzzerUtils.out.println((((("f3 i36 f4 = " + Float.floatToIntBits(f3)) + ",") + i36) + ",") + Float.floatToIntBits(f4));
        FuzzerUtils.out.println((((("by3 d3 i37 = " + by3) + ",") + Double.doubleToLongBits(d3)) + ",") + i37);
        FuzzerUtils.out.println((((("lArr2 fArr3 sArr = " + FuzzerUtils.checkSum(lArr2)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr3))) + ",") + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println((((("Test.instanceCount Test.bFld Test.bFld1 = " + Test.instanceCount) + ",") + (Test.bFld ? 1 : 0)) + ",") + (Test.bFld1 ? 1 : 0));
        FuzzerUtils.out.println((((("Test.sFld Test.iFld Test.iFld1 = " + Test.sFld) + ",") + Test.iFld) + ",") + Test.iFld1);
        FuzzerUtils.out.println((((("lFld Test.iArrFld Test.iArrFld1 = " + lFld) + ",") + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + FuzzerUtils.checkSum(Test.iArrFld1));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$20 = false;
}