// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -1167230622901948343L;

    public static short sFld = 25062;

    public static byte byFld = -90;

    public static boolean bFld = true;

    public static long lFld = 52706L;

    public static float fArrFld[] = new float[N];

    public static short sArrFld[][] = new short[N][N];

    public static double dArrFld[] = new double[N];

    public static long lArrFld[] = new long[N];

    public static int iArrFld[] = new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -57.53F);
        FuzzerUtils.init(Test.sArrFld, ((short) (-2369)));
        FuzzerUtils.init(Test.dArrFld, 41.26336);
        FuzzerUtils.init(Test.lArrFld, -62824L);
        FuzzerUtils.init(Test.iArrFld, 19244);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4) {
        double d1 = 0.7725;
        double dArr[] = new double[N];
        float f = 92.739F;
        int i5 = 21078;
        int i6 = -62125;
        int i7 = 32981;
        int i8 = 12;
        int i9 = -111;
        int i10 = 63448;
        int i11 = 221;
        int i12 = -40108;
        int i13 = -230;
        int i14 = -3;
        int i15 = -2;
        int i16 = -23213;
        int i17 = -20;
        int iArr[] = new int[N];
        boolean b = true;
        byte by = -10;
        FuzzerUtils.init(dArr, 7.129868);
        FuzzerUtils.init(iArr, 13458);
        dArr[(i4 >>> 1) % N] -= d1;
        f += 231;
        for (i5 = 4; i5 < 141; ++i5) {
            for (i7 = 1; i7 < 4; i7++) {
                if (b)
                    continue;

                i6 = i4;
                Test.instanceCount = Test.instanceCount;
                for (i9 = 1; 2 > i9; i9++) {
                    dArr[i5] -= f;
                    if (true)
                        continue;

                }
                by *= ((byte) (Test.instanceCount));
                Test.instanceCount >>= -169;
            }
            for (i11 = i5; i11 < 4; ++i11) {
                iArr[i5] = ((int) (Test.instanceCount));
                i8 = i12;
                i4 *= i6;
                Test.sArrFld = Test.sArrFld;
                i10 += ((i11 * i9) + i10) - Test.sFld;
                i13 = i12;
                i8 += i13;
            }
            f += ((i5 * i12) + f) - Test.instanceCount;
            Test.instanceCount <<= i10;
            for (i14 = i5; i14 < 4; ++i14) {
                for (i16 = 1; i16 < 1; i16++) {
                    i10 += i16 * i16;
                    try {
                        i17 = 64725 % i4;
                        iArr[i16] = iArr[i16 + 1] / i6;
                        iArr[i14 + 1] = 2540 % i11;
                    } catch (ArithmeticException a_e) {
                    }
                    i15 = ((int) (-204L));
                    if (b)
                        break;

                    i12 -= i8;
                    i8 += i16 * i4;
                }
                iArr = iArr;
                i17 += 0 + (i14 * i14);
                i10 += ((int) (668462482743933479L));
                try {
                    iArr[i5] = i7 % 1983652904;
                    i15 = (-3) % i13;
                    i10 = iArr[i5 + 1] % i12;
                } catch (ArithmeticException a_e) {
                }
                Test.instanceCount += i14 * i14;
                try {
                    i8 = i15 / 190;
                    i6 = i5 % (-220);
                    {
                        final int ax$3 = i7;
                        try {
                            for (int ax$0 = -965; ax$0 < (-965 + 12561); ax$0 += 1) {
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    if (i7 != 0);
                                } catch (Throwable ax$2) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                            }
                        } finally {
                            i7 = ax$3;
                        }
                    }
                    i8 = 29 / iArr[i5];
                } catch (ArithmeticException a_e) {
                }
            }
        }
        Test.instanceCount = 99L;
        long meth_res = ((((((((((((((((((i4 + Double.doubleToLongBits(d1)) + Float.floatToIntBits(f)) + i5) + i6) + i7) + i8) + (b ? 1 : 0)) + i9) + i10) + by) + i11) + i12) + i13) + i14) + i15) + i16) + i17) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static void vMeth1() {
        int i2 = -9;
        int i3 = -4266;
        int i18 = -3;
        int i19 = -12;
        int i20 = 0;
        int i21 = 46554;
        int i22 = -5;
        int iArr1[][] = new int[N][N];
        double d2 = -2.86741;
        float f1 = 0.922F;
        long lArr[] = new long[N];
        FuzzerUtils.init(lArr, 5542078434820287512L);
        FuzzerUtils.init(iArr1, -15265);
        switch ((((((int) (Test.instanceCount + (-17001))) >>> 1) % 1) * 5) + 14) {
            case 18 :
                for (i2 = 2; 104 > i2; i2++) {
                    i3 = iMeth(i3) + i2;
                    for (i18 = 1; i18 < 5; i18 += 3) {
                        byte by1 = -63;
                        Test.sFld = ((short) (Test.instanceCount));
                        i3 = i3;
                        Test.sFld *= ((short) (i2));
                        by1 = ((byte) (Test.instanceCount));
                        i19 = i18;
                        switch (((i2 % 10) * 5) + 26) {
                            case 31 :
                                Test.instanceCount >>= Test.instanceCount;
                                i3 -= ((int) (Test.instanceCount));
                                Test.instanceCount += i18;
                                i3 = i18;
                                d2 += -2084897349L;
                                break;
                            case 69 :
                                for (i20 = 1; i20 < 5; ++i20) {
                                    switch ((i20 % 3) + 43) {
                                        case 43 :
                                            lArr[i18] = -1;
                                            i21 += ((int) ((-6078530263085135765L) + (i20 * i20)));
                                            i21 += ((int) (Test.instanceCount));
                                            i19 = i21;
                                            i21 += i20;
                                            i3 *= ((int) (f1));
                                            Test.instanceCount <<= Test.instanceCount;
                                            Test.instanceCount += i20 * i20;
                                            i19 += ((i20 * Test.instanceCount) + i2) - i18;
                                            i3 = i21;
                                            switch ((i20 % 8) + 111) {
                                                case 111 :
                                                    i21 += i20 * i20;
                                                    i3 = i3;
                                                    Test.instanceCount = i3;
                                                    Test.dArrFld[i20 - 1] = i2;
                                                    iArr1[i18][i20] *= i19;
                                                    i21 = i19;
                                                    i21 += i20;
                                                    i19 += ((i20 * Test.instanceCount) + i2) - i19;
                                                    Test.instanceCount += ((i20 * i18) + i18) - by1;
                                                    break;
                                                case 112 :
                                                    iArr1[i18][i2 - 1] -= 8;
                                                    break;
                                                case 113 :
                                                case 114 :
                                                    i21 = i22;
                                                    break;
                                                case 115 :
                                                    iArr1[i18][i20 - 1] <<= i18;
                                                case 116 :
                                                    i19 *= i19;
                                                    break;
                                                case 117 :
                                                    if (i2 != 0) {
                                                        vMeth1_check_sum += (((((((((i2 + i3) + i18) + i19) + Double.doubleToLongBits(d2)) + i20) + i21) + Float.floatToIntBits(f1)) + i22) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(iArr1);
                                                        return;
                                                    }
                                                    break;
                                                case 118 :
                                                    Test.instanceCount = Test.instanceCount;
                                                    break;
                                                default :
                                                    Test.instanceCount >>= Test.instanceCount;
                                            }
                                            break;
                                        case 44 :
                                            if (true)
                                                continue;

                                        case 45 :
                                            iArr1[i20 + 1][i18 + 1] >>>= i19;
                                            break;
                                    }
                                }
                                break;
                            case 50 :
                                f1 += ((float) (d2));
                                break;
                            case 54 :
                                i21 = -26164;
                                break;
                            case 42 :
                                f1 += i18;
                                break;
                            case 29 :
                                f1 /= i2 | 1;
                                break;
                            case 63 :
                                iArr1[i18 - 1][i2 + 1] = i19;
                                break;
                            case 49 :
                                i22 += i18 * i18;
                                break;
                            case 43 :
                                f1 += ((i18 * i21) + i21) - f1;
                                break;
                            case 76 :
                                i3 *= ((int) (f1));
                                break;
                            default :
                                i22 = i18;
                        }
                    }
                }
        }
        vMeth1_check_sum += (((((((((i2 + i3) + i18) + i19) + Double.doubleToLongBits(d2)) + i20) + i21) + Float.floatToIntBits(f1)) + i22) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l, double d) {
        if (Test.ax$12) {
            byte[] ax$13 = new byte[]{ 0, -1, -2, -3, -4 };
            int ax$14 = 0x11111111;
            int ax$15 = 1 << 0;
            int ax$16 = 0x3;
            byte[] ax$17 = new byte[]{ 0, -1, -2, -3, -4 };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                for (int ax$18 = 0; ax$18 < ax$16; ax$18++) {
                    ax$17[ax$15] = ((byte) (ax$14));
                    ax$13[ax$15] = ((byte) (ax$18));
                    ax$15++;
                }
            } catch (Throwable ax$19) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return;
        }
        int i = 10;
        int i1 = -9;
        int i23 = 230;
        int i24 = 557;
        int i25 = 46429;
        int i26 = -65071;
        int i28 = -8;
        int i29 = -4450;
        int i30 = 3;
        int i31 = 76;
        int iArr2[] = new int[N];
        float f2 = 2.765F;
        boolean b1 = true;
        boolean bArr[] = new boolean[N];
        FuzzerUtils.init(iArr2, 30202);
        FuzzerUtils.init(bArr, true);
        for (i = 7; i < 180; i++) {
            Test.fArrFld[i] -= -223;
            vMeth1();
        }
        for (i23 = 7; i23 < 165; i23++) {
            i24 += i23 * i1;
            if (i24 != 0) {
                vMeth_check_sum += ((((((((((((((l + Double.doubleToLongBits(d)) + i) + i1) + i23) + i24) + i25) + i26) + Float.floatToIntBits(f2)) + (b1 ? 1 : 0)) + i28) + i29) + i30) + i31) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(bArr);
                return;
            }
            if (b1) {
                try {
                    iArr2[i23 - 1] = 204150727 / i23;
                    iArr2[i23] = i / i23;
                    i1 = i1 % 31415;
                } catch (ArithmeticException a_e) {
                }
                for (i25 = i23; i25 < 4; ++i25) {
                    l += i25 | i23;
                    iArr2[i23] += 8;
                    i1 *= ((int) (f2));
                    iArr2 = FuzzerUtils.int1array(N, ((int) (11)));
                    i24 += ((i25 * i25) + f2) - Test.byFld;
                }
                i26 -= i1;
                iArr2[i23] = ((int) (4122790096451193404L));
                switch ((i23 % 4) + 63) {
                    case 63 :
                        iArr2[i23 - 1] = ((int) (l));
                        i26 = -153;
                        f2 = i1;
                        bArr[i23 + 1] = b1;
                        Test.instanceCount += i26;
                        Test.instanceCount -= 34;
                        if (b1)
                            break;

                        for (i28 = 1; 4 > i28; i28++) {
                            i29 += ((int) (l));
                            iArr2[i23 + 1] *= i25;
                            i29 -= ((int) (1.606F));
                            Test.lArrFld = Test.lArrFld;
                            for (i30 = 2; i30 > i28; i30--) {
                                Test.fArrFld[i28 + 1] = Test.byFld;
                                i24 |= ((int) (l));
                                l -= Test.byFld;
                                i24 *= i29;
                            }
                            i1 *= ((int) (-86L));
                            iArr2 = iArr2;
                            i24 = i24;
                        }
                        break;
                    case 64 :
                        i26 = -32;
                        break;
                    case 65 :
                        i29 -= ((int) (Test.instanceCount));
                    case 66 :
                        Test.fArrFld[i23 - 1] %= i1 | 1;
                    default :
                        Test.instanceCount -= Test.instanceCount;
                }
            } else {
                i24 += i26;
            }
        }
        vMeth_check_sum += ((((((((((((((l + Double.doubleToLongBits(d)) + i) + i1) + i23) + i24) + i25) + i26) + Float.floatToIntBits(f2)) + (b1 ? 1 : 0)) + i28) + i29) + i30) + i31) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {
        int i32 = -227;
        int i33 = 14;
        int i34 = 102;
        int i35 = 51839;
        int i36 = -181;
        int i37 = -180;
        int i38 = -16452;
        int iArr3[] = new int[N];
        double d3 = -1.82097;
        float f3 = -69.505F;
        long l1 = -41L;
        FuzzerUtils.init(iArr3, 15572);
        {
            final int ax$32 = i34;
            final int ax$33 = i38;
            try {
                String ax$26 = "0.08991998187294129";
                for (int ax$20 = -358; ax$20 < (-358 + 12691); ax$20 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$23 = 0; ax$23 < i34; ax$23++) {
                            for (int ax$24 = 0; ax$24 < 23; ax$24++) {
                                i38 += 7;
                            }
                        }
                    } catch (Throwable ax$25) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$12 = true;
                    vMeth(4638375604372877603L, 0.6672438658795948);
                    Test.ax$12 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        try {
                            String ax$27 = ax$26;
                            ax$27.getClass();
                            char ax$28 = 0;
                            for (int ax$29 = 0; ax$29 < 10; ax$29++) {
                                ax$28 = ax$27.charAt(10000000);
                            }
                        } catch (StringIndexOutOfBoundsException ax$30) {

                        }
                    } catch (Throwable ax$31) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i34 = ax$32;
                i38 = ax$33;
            }
        }
        vMeth(47985L, 2.95521);
        Test.lArrFld[(11 >>> 1) % N] = Test.byFld;
        for (i32 = 4; i32 < 83; ++i32) {
            if (true) {
                i33 *= i32;
                for (i34 = i32; i34 < 64; ++i34) {
                    i33 = 13;
                    for (i36 = 1; i36 < 1; i36++) {
                        Test.instanceCount -= Test.byFld;
                        try {
                            i35 = i34 / (-9773);
                            i37 = i33 % (-38202);
                            i35 = i32 % i36;
                        } catch (ArithmeticException a_e) {
                        }
                        switch ((i32 % 1) + 51) {
                            case 51 :
                                i37 = 82;
                                switch (((i34 >>> 1) % 9) + 58) {
                                    case 58 :
                                        i37 <<= ((int) (Test.instanceCount));
                                        d3 += 89;
                                        Test.instanceCount -= 7;
                                        i35 <<= ((int) (Test.instanceCount));
                                        iArr3[i34 - 1] *= ((int) (Test.instanceCount));
                                        Test.fArrFld = Test.fArrFld;
                                        Test.lArrFld[i36] %= i36 | 1;
                                        Test.instanceCount = i37;
                                        iArr3[i32] = i37;
                                        i33 += i36;
                                        switch ((i32 % 6) + 61) {
                                            case 61 :
                                                Test.bFld = Test.bFld;
                                                i37 -= ((int) (f3));
                                                if (Test.bFld) {
                                                    iArr3[i32] -= ((int) (-4321319537538810438L));
                                                } else {
                                                    i33 += i36;
                                                    f3 *= i37;
                                                    i35 = 53;
                                                    switch (((i34 % 1) * 5) + 68) {
                                                        case 70 :
                                                            i33 = i34;
                                                            i37 &= i37;
                                                            Test.sFld = ((short) (i34));
                                                            i35 *= i34;
                                                            iArr3[(i32 >>> 1) % N] *= ((int) (Test.instanceCount));
                                                            i33 <<= ((int) (Test.instanceCount));
                                                            l1 -= i37;
                                                            break;
                                                        default :
                                                            iArr3[i34 - 1] += ((int) (f3));
                                                            i33 *= ((int) (d3));
                                                            i35 = i32;
                                                            Test.dArrFld[i36 - 1] = i34;
                                                    }
                                                    i37 += i36 - i35;
                                                    iArr3[i36 + 1] = -10833;
                                                    Test.instanceCount += i36 - l1;
                                                    if (Test.bFld) {
                                                        l1 = ((long) (1.11F));
                                                        i37 *= i36;
                                                        Test.instanceCount += ((i36 * i34) + i32) - i33;
                                                        i35 = i33;
                                                        if (Test.bFld) {
                                                            i33 += i36 * i34;
                                                        } else {
                                                            l1 = Test.instanceCount;
                                                            i33 = i34;
                                                        }
                                                        Test.fArrFld[i36 + 1] = 7;
                                                        i37 = ((int) (l1));
                                                        iArr3[i32 + 1] *= i35;
                                                    }
                                                    f3 *= i33;
                                                    iArr3[i36 - 1] = i38;
                                                }
                                            case 62 :
                                                {
                                                    final int ax$11 = i36;
                                                    try {
                                                        List<Thread> ax$6 = new ArrayList<Thread>();
                                                        boolean ax$5 = false;
                                                        for (int ax$4 = -475; ax$4 < (-475 + 18518); ax$4 += 1) {
                                                            Test.AxOutputRedirectionHelper.redirect();
                                                            try {
                                                                for (Thread ax$7 : ax$6) {
                                                                    ax$7.start();
                                                                }
                                                            } catch (Throwable ax$8) {
                                                            } finally {
                                                            }
                                                            Test.AxOutputRedirectionHelper.recover();
                                                            if (!ax$5) {
                                                                Test.iArrFld[i32 - 1] >>>= i38;
                                                                ax$5 = true;
                                                            }
                                                            Test.AxOutputRedirectionHelper.redirect();
                                                            try {
                                                                i36 = 5;
                                                            } catch (Throwable ax$10) {
                                                            } finally {
                                                            }
                                                            Test.AxOutputRedirectionHelper.recover();
                                                        }
                                                    } finally {
                                                        i36 = ax$11;
                                                    }
                                                }
                                                l1 += i36;
                                                f3 = i34;
                                                i33 += i36 * i36;
                                                f3 = f3;
                                                i37 = i33;
                                                Test.lFld += ((i36 * i35) + Test.sFld) - i32;
                                                if (Test.bFld) {
                                                    i38 -= 38353;
                                                    Test.instanceCount = i33;
                                                    if (Test.bFld)
                                                        continue;

                                                    l1 += 12;
                                                    l1 <<= i33;
                                                    if (Test.bFld)
                                                        break;

                                                    Test.bFld = Test.bFld;
                                                } else if (Test.bFld) {
                                                    Test.byFld += ((byte) (i36));
                                                } else if (false) {
                                                    i37 += i36 * i36;
                                                } else {
                                                    i35 += ((int) (l1));
                                                }
                                                break;
                                            case 63 :
                                                iArr3[i34 + 1] = ((int) (Test.lFld));
                                                break;
                                            case 64 :
                                                Test.iArrFld[i36] |= i32;
                                                break;
                                            case 65 :
                                                Test.lFld += i36 - Test.instanceCount;
                                                break;
                                            case 66 :
                                                i37 = i34;
                                                break;
                                            default :
                                                i38 += i36;
                                        }
                                        break;
                                    case 59 :
                                        iArr3[i34] ^= ((int) (Test.lFld));
                                        break;
                                    case 60 :
                                        iArr3[i32] = Test.byFld;
                                    case 61 :
                                        Test.bFld = Test.bFld;
                                        break;
                                    case 62 :
                                        Test.lFld += -149;
                                        break;
                                    case 63 :
                                        i35 += i36 | l1;
                                        break;
                                    case 64 :
                                        try {
                                            i37 = i33 / i33;
                                            i35 = i34 % 777613343;
                                            i38 = i35 / 84;
                                        } catch (ArithmeticException a_e) {
                                        }
                                        break;
                                    case 65 :
                                        d3 += i35;
                                        break;
                                    case 66 :
                                        Test.byFld = ((byte) (-2456));
                                }
                                break;
                            default :
                                Test.lFld += i36 | i33;
                        }
                    }
                }
            } else if (Test.bFld) {
                i35 += 1969;
            } else if (false) {
                Test.iArrFld[i32 - 1] += Test.byFld;
            }
        }
        FuzzerUtils.out.println((((("i32 i33 i34 = " + i32) + ",") + i33) + ",") + i34);
        FuzzerUtils.out.println((((("i35 i36 i37 = " + i35) + ",") + i36) + ",") + i37);
        FuzzerUtils.out.println((((("d3 f3 l1 = " + Double.doubleToLongBits(d3)) + ",") + Float.floatToIntBits(f3)) + ",") + l1);
        FuzzerUtils.out.println((("i38 iArr3 = " + i38) + ",") + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println((((("Test.instanceCount Test.sFld Test.byFld = " + Test.instanceCount) + ",") + Test.sFld) + ",") + Test.byFld);
        FuzzerUtils.out.println((((("Test.bFld Test.lFld Test.fArrFld = " + (Test.bFld ? 1 : 0)) + ",") + Test.lFld) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println((((("Test.sArrFld Test.dArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.sArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld))) + ",") + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$12 = false;
}