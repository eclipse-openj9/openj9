// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -50095L;

    public float fFld = -2.824F;

    public static int iFld = 52319;

    public static volatile byte byFld = -66;

    public static short sFld = 10246;

    public static volatile boolean bFld = false;

    public static double dFld = -2.115446;

    public long lFld = 52655L;

    public static volatile double[] dArrFld = new double[N];

    public static boolean[] bArrFld = new boolean[N];

    public static volatile long[] lArrFld = new long[N];

    public static volatile int[] iArrFld = new int[N];

    public static short[] sArrFld = new short[N];

    public volatile int[][] iArrFld1 = new int[N][N];

    static {
        FuzzerUtils.init(Test.dArrFld, -68.38638);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.lArrFld, 29204L);
        FuzzerUtils.init(Test.iArrFld, -9);
        FuzzerUtils.init(Test.sArrFld, (short) -1551);
    }

    public static long dMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long bMeth_check_sum = 0;

    public static boolean bMeth(int i7, int i8, float f2) {
        float f3 = 22.578F, fArr[] = new float[N];
        int i9 = -225, i10 = 56951, i11 = 42, i12 = -58212, i13 = -35, i14 = 22, i15 = -171, i16 = -204, iArr1[] = new int[N];
        double d1 = 2.8155, d2 = 0.88326;
        long[] lArr1 = new long[N];
        FuzzerUtils.init(lArr1, 2490215799L);
        FuzzerUtils.init(iArr1, -63879);
        FuzzerUtils.init(fArr, 84.259F);
        lArr1[(-17 >>> 1) % N] += Test.iFld;
        for (f3 = 1; f3 < 137; ++f3) {
            if (false) {
                for (i10 = 4; i10 > 1; --i10) {
                    switch(((i10 % 3) * 5) + 113) {
                        case 117:
                            i7 += (int) f3;
                            for (d1 = 1; d1 < 2; ++d1) {
                                iArr1[i10 - 1] = i11;
                                lArr1[(int) (f3 + 1)] = Test.instanceCount;
                                f2 += i11;
                                if (i10 != 0) {
                                    return ((int) (i7 + i8 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i9 + i10 + i11 + Double.doubleToLongBits(d1) + i12 + Double.doubleToLongBits(d2) + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)))) % 2 > 0;
                                }
                                i8 = i11;
                                i11 <<= i10;
                            }
                            Test.instanceCount += (i10 + i12);
                            i8 += (i10 - i7);
                            switch((i10 % 1) + 108) {
                                case 108:
                                    Test.iFld = (int) Test.instanceCount;
                                    d2 = Test.iFld;
                                    switch((int) ((f3 % 1) + 22)) {
                                        case 22:
                                            i8 -= i8;
                                            f2 -= Test.instanceCount;
                                            for (i13 = 1; 2 > i13; ++i13) {
                                                i7 = i12;
                                                f2 -= i12;
                                                f2 = -160;
                                            }
                                            iArr1[(int) (f3 - 1)] = (int) Test.instanceCount;
                                            Test.sFld *= (short) i8;
                                            break;
                                    }
                                    Test.instanceCount -= -45917;
                                    switch((i10 % 7) + 45) {
                                        case 45:
                                            Test.dArrFld[i10 + 1] += 25151;
                                            i8 += i8;
                                            for (i15 = 1; i15 < 2; ++i15) {
                                                i7 |= 159;
                                                i14 += (i15 * i15);
                                                fArr[i10 - 1] = i9;
                                                Test.instanceCount -= Test.instanceCount;
                                                Test.instanceCount = i9;
                                            }
                                            break;
                                        case 46:
                                            i16 = i8;
                                            break;
                                        case 47:
                                            i16 += Test.iFld;
                                            break;
                                        case 48:
                                            i12 -= i7;
                                            break;
                                        case 49:
                                            i16 += (((i10 * i7) + Test.instanceCount) - f3);
                                        case 50:
                                            Test.iFld <<= i11;
                                            break;
                                        case 51:
                                            d2 -= Test.byFld;
                                    }
                                default:
                                    Test.instanceCount = 31668;
                            }
                            break;
                        case 128:
                            Test.instanceCount += (((i10 * i10) + Test.instanceCount) - Test.instanceCount);
                            break;
                        case 125:
                            i16 = (int) Test.instanceCount;
                        default:
                            i12 >>= i16;
                    }
                }
            } else if (Test.bFld) {
                fArr[(int) (f3)] += Test.byFld;
            } else if (Test.bFld) {
                Test.iFld = (int) Test.instanceCount;
            } else {
                i16 -= (int) Test.instanceCount;
            }
        }
        long meth_res = i7 + i8 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i9 + i10 + i11 + Double.doubleToLongBits(d1) + i12 + Double.doubleToLongBits(d2) + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth() {
        int i5 = 2, i6 = -41216, i17 = 140, i18 = 144, i19 = 43, i20 = 215, i21 = 2, i22 = 59429, iArr[] = new int[N];
        float f1 = -2.510F, fArr1[] = new float[N];
        boolean b = true;
        long[][] lArr = new long[N][N];
        short[] sArr = new short[N];
        FuzzerUtils.init(lArr, -7838716628584856616L);
        FuzzerUtils.init(iArr, 140);
        FuzzerUtils.init(fArr1, 2.708F);
        FuzzerUtils.init(sArr, (short) 32030);
        Test.iFld *= (int) ((--Test.iFld) * lArr[(-12 >>> 1) % N][(Test.iFld >>> 1) % N]);
        for (int i4 : iArr) {
            i5 = 2;
            while ((i5 -= 2) > 0) {
                Test.iFld = (int) ((-(i6 % 3L)) + f1);
                if (b = (((Test.iFld - Test.instanceCount) * (Test.byFld - i5)) < 11))
                    break;
                if (b = bMeth(i5, i4, f1))
                    continue;
            }
            fArr1 = fArr1;
            sArr[(Test.iFld >>> 1) % N] /= (short) (Test.instanceCount | 1);
            Test.iFld <<= Test.byFld;
            for (i17 = 1; 2 > i17; ++i17) {
                Test.instanceCount = 12095;
                f1 = -57745;
                Test.instanceCount = i17;
                for (i19 = 1; i19 < 2; ++i19) {
                    i4 = (int) Test.instanceCount;
                }
                Test.instanceCount = i6;
                lArr[i17 - 1][i17 - 1] <<= 1514326493L;
                Test.instanceCount *= Test.instanceCount;
                i20 |= i20;
                Test.iFld ^= (int) Test.instanceCount;
                iArr = iArr;
                switch((i17 % 1) + 58) {
                    case 58:
                        if (i20 != 0) {
                        }
                        Test.dFld -= Test.instanceCount;
                        i6 = (int) Test.instanceCount;
                        Test.sFld -= (short) i18;
                        for (i21 = 1; i21 < 2; ++i21) {
                            switch((i21 % 3) + 109) {
                                case 109:
                                    fArr1[i17] = (float) -6.67768;
                                    i4 <<= i19;
                                    i22 += (((i21 * i18) + i19) - Test.instanceCount);
                                    iArr[i17] *= (int) -2427494838L;
                                    Test.iFld = 244;
                                    if (Test.bFld) {
                                        Test.dFld -= f1;
                                        f1 *= i17;
                                        i4 += i21;
                                    } else if (b) {
                                        iArr = iArr;
                                    }
                                    break;
                                case 110:
                                    i6 = 79;
                                    break;
                                case 111:
                                    f1 -= Test.instanceCount;
                                    break;
                            }
                        }
                }
            }
        }
        long meth_res = i5 + i6 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i17 + i18 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public double dMeth(byte by, float f) {
        if (ax$0) {
            int ax$4 = iFld;
            try {
                int ax$2 = 0xFFFFFFFF;
                java.lang.String[] ax$1 = { "6", "3", "2", "2", "1", "-1", "-2", "-2", "-3", "-6", "6", "-6", "6", "-6", "2", "-2", "5", "-5", "5", "-5" };
                java.lang.String ax$3 = "328036812399.9663";
                if (!ax$1[0].equals(ax$3.substring(0, ax$2))) {
                    if (iFld != 1) {
                    } else {
                        if (!ax$1[0].equals(ax$3.substring(0, 10))) {
                        }
                    }
                }
            } catch (Throwable ax$5) {
            } finally {
                iFld = ax$4;
            }
            return 0.246839084823409;
        }
        double d = 2.114470, d3 = 0.23777;
        int i1 = -14, i2 = 29498, i3 = 30696, i23 = 13, i24 = 41, i25 = 81, i26 = 238, i27 = 18824, i28 = 11, i29 = 2490, i30 = 47790, iArr2[] = new int[N];
        float f5 = 0.514F;
        FuzzerUtils.init(iArr2, 57);
        f = (float) (-((fFld * d) * (i1 / ((long) (d) | 1))));
        for (i2 = 3; i2 < 243; ++i2) {
            i1 -= Math.max(iMeth() + i1, -12);
            Test.iFld += (i2 * i2);
            i1 -= (int) Test.dFld;
            Test.iFld -= -18467;
            iArr2 = iArr2;
        }
        for (d3 = 6; d3 < 131; ++d3) {
            for (f5 = 5; f5 > 1; f5 -= 3) {
                Test.instanceCount -= 175;
                if (Test.bFld)
                    break;
                fFld *= 0.763F;
            }
            i25 = 1;
            do {
                iArr2[i25 - 1] = -197;
            } while (++i25 < 5);
            iArr2[(int) (d3)] = i2;
            i23 += (int) (d3 * d3);
            Test.instanceCount += i23;
            Test.sFld += (short) ((long) d3 ^ Test.iFld);
            Test.iFld -= 24625;
            i26 = 1;
            do {
                for (i27 = 1; 1 > i27; i27++) {
                    i1 = (int) f5;
                    if (Test.bFld)
                        continue;
                    Test.iFld *= i24;
                    i3 -= i23;
                    Test.instanceCount += (i27 | i23);
                    Test.instanceCount += (long) d3;
                    i23 += (((i27 * Test.instanceCount) + i3) - i2);
                    Test.bArrFld[i27] = false;
                    Test.instanceCount += Test.iFld;
                }
                i28 += (int) Test.instanceCount;
                iArr2[i26 + 1] += (int) f5;
                switch((i26 % 10) + 91) {
                    case 91:
                        i28 -= -65;
                        for (i29 = 1; i29 < 1; i29++) {
                            if (i23 != 0) {
                            }
                            i28 *= i26;
                        }
                        break;
                    case 92:
                        if (i28 != 0) {
                        }
                        break;
                    case 93:
                        fFld -= i3;
                    case 94:
                        i1 /= (int) ((long) (d3) | 1);
                    case 95:
                        Test.sFld = (short) i23;
                        break;
                    case 96:
                        i3 += 63977;
                        break;
                    case 97:
                        d -= i25;
                        break;
                    case 98:
                        iArr2[(int) (d3)] <<= (int) Test.instanceCount;
                        break;
                    case 99:
                        Test.instanceCount -= i30;
                        break;
                    case 100:
                        i3 += i26;
                        break;
                    default:
                        i1 = (int) Test.instanceCount;
                }
            } while (++i26 < 5);
        }
        long meth_res = by + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i1 + i2 + i3 + Double.doubleToLongBits(d3) + i23 + Float.floatToIntBits(f5) + i24 + i25 + i26 + i27 + i28 + i29 + i30 + FuzzerUtils.checkSum(iArr2);
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = 13802, i31 = -18286, i32 = -21918, i33 = 35526, i34 = -6897, i35 = -246, i36 = -8, i37 = 215;
        double d4 = -36.87356;
        boolean b1 = true;
        long l = 1L;
        fFld -= (float) (i + dMeth(Test.byFld, -1.475F));
        for (d4 = 3; d4 < 251; ++d4) {
            Test.lArrFld = Test.lArrFld;
            if (Test.bFld)
                continue;
            i31 += (int) ((long) d4 ^ Test.byFld);
            fFld += (-12.447F + (d4 * d4));
            Test.iFld -= i31;
            i += Test.sFld;
            i -= i31;
            i = -33968;
            for (i32 = 1; i32 < 21; i32++) {
                fFld = -2L;
                i33 += (i32 * i32);
                try {
                    Test.iArrFld[i32 + 1] = (-48243 / Test.iArrFld[i32 - 1]);
                    i = (18522 / i32);
                    i33 = (-1135953929 / i31);
                } catch (ArithmeticException a_e) {
                }
                i34 <<= Test.iFld;
                for (i35 = 1; i35 < 2; ++i35) {
                    Test.instanceCount >>>= 1357;
                    Test.instanceCount <<= -23;
                    i34 -= i34;
                    Test.instanceCount += (i35 * i35);
                    switch(((i35 % 6) * 5) + 19) {
                        case 21:
                            Test.iArrFld[i32 - 1] = (int) d4;
                            i -= -28176;
                            Test.iArrFld[i35 - 1] ^= (int) 5L;
                            Test.dFld -= i34;
                            switch(((i31 >>> 1) % 9) + 78) {
                                case 78:
                                    i34 = i31;
                                    Test.iArrFld[i32] *= (int) -6986898324690231463L;
                                    Test.sFld -= (short) Test.instanceCount;
                                    Test.bFld = b1;
                                    Test.instanceCount |= i32;
                                    if (Test.bFld)
                                        break;
                                    switch((int) ((d4 % 2) + 23)) {
                                        case 23:
                                            i36 += (int) 4201140395133909013L;
                                            i31 = i32;
                                            fFld += i35;
                                            Test.instanceCount = i33;
                                            i33 -= (int) Test.instanceCount;
                                            l = -62839;
                                            i31 -= 9;
                                            fFld -= (float) d4;
                                            i34 += (int) l;
                                            l += (((i35 * Test.iFld) + i36) - Test.iFld);
                                            Test.iArrFld[i32] = (int) fFld;
                                            Test.sFld = (short) l;
                                            l -= i36;
                                            i36 += (int) (-77L + (i35 * i35));
                                            break;
                                        case 24:
                                            Test.iFld += i35;
                                            Test.dFld += fFld;
                                            Test.iArrFld[i35] -= 870;
                                            lFld += (i35 ^ i33);
                                            break;
                                        default:
                                            fFld *= Test.iFld;
                                            try {
                                                i31 = (Test.iArrFld[(int) (d4 - 1)] / -51540);
                                                i37 = (Test.iArrFld[(int) (d4 + 1)] % 4);
                                                Test.iArrFld[i32 + 1] = (i36 % 29040);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            Test.sArrFld[i35 - 1] = (short) i;
                                            i36 += i32;
                                            lFld += (i35 | i31);
                                            Test.dFld -= i32;
                                            fFld -= Test.instanceCount;
                                            i34 >>= -19;
                                            Test.dFld -= -9;
                                            i36 -= i35;
                                            i += -22884;
                                            Test.iFld += (((i35 * Test.instanceCount) + i33) - i36);
                                    }
                                    Test.dFld -= fFld;
                                    l -= i33;
                                    Test.sFld ^= (short) l;
                                case 79:
                                    i31 = (int) Test.instanceCount;
                                    fFld += (((i35 * i35) + Test.byFld) - i37);
                                    lFld *= i31;
                                    fFld = Test.sFld;
                                    break;
                                case 80:
                                    Test.bArrFld[i32] = true;
                                    break;
                                case 81:
                                    i37 = -4;
                                    break;
                                case 82:
                                    i = (int) l;
                                    i34 -= i34;
                                    i36 = Test.iFld;
                                case 83:
                                    l += i35;
                                    break;
                                case 84:
                                case 85:
                                    Test.iArrFld[i32 + 1] = i;
                                    break;
                                case 86:
                                    fFld += (((i35 * Test.instanceCount) + lFld) - i37);
                                    break;
                            }
                            break;
                        case 48:
                            Test.iFld += (((i35 * Test.byFld) + i36) - fFld);
                            break;
                        case 41:
                            Test.lArrFld[i32 + 1] *= i31;
                            break;
                        case 47:
                            i34 += (i35 | i31);
                            break;
                        case 35:
                            l += l;
                            break;
                        case 31:
                            iArrFld1 = FuzzerUtils.int2array(N, (int) -12);
                            break;
                        default:
                            try {
                                Test.iFld = (Test.iFld / i31);
                                Test.iFld = (-44208 / i35);
                                i36 = (iArrFld1[i32 - 1][(int) (d4 - 1)] % 1554688451);
                            } catch (ArithmeticException a_e) {
                            }
                    }
                }
            }
        }
        FuzzerUtils.out.println("i d4 i31 = " + i + "," + Double.doubleToLongBits(d4) + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 b1 = " + i35 + "," + i36 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("l i37 = " + l + "," + i37);
        FuzzerUtils.out.println("Test.instanceCount fFld Test.iFld = " + Test.instanceCount + "," + Float.floatToIntBits(fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld Test.sFld Test.bFld = " + Test.byFld + "," + Test.sFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld lFld Test.dArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + lFld + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.bArrFld Test.lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.sArrFld iArrFld1 = " + FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(iArrFld1));
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$0 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  dMeth ->  dMeth mainTest
// DEBUG  iMeth ->  iMeth dMeth mainTest
// DEBUG  bMeth ->  bMeth iMeth dMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
