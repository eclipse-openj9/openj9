// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.CharsetEncoder;
import java.util.Arrays;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -23553L;

    public static double dFld = 61.45944;

    public static int iFld = -6;

    public static int iFld1 = 64059;

    public int iFld2 = -12;

    public static long lArrFld[] = new long[N];

    public static byte byArrFld[] = new byte[N];

    public volatile double dArrFld[] = new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2841388418866102046L);
        FuzzerUtils.init(Test.byArrFld, ((byte) (-28)));
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {
        if (Test.ax$27) {
            final long ax$37 = Test.vMeth2_check_sum;
            final int ax$36 = Test.iFld;
            final int ax$35 = Test.iFld1;
            final long ax$34 = Test.vMeth_check_sum;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                if (iFld1 != ((int) (vMeth_check_sum))) {
                    iFld++;
                }
            } catch (Throwable ax$33) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.vMeth_check_sum = ax$34;
            Test.iFld1 = ax$35;
            Test.iFld = ax$36;
            Test.vMeth2_check_sum = ax$37;
            return;
        }
        int i9 = 61902;
        int i10 = -11;
        int i11 = -195;
        int i12 = 60628;
        int i13 = -40743;
        int i14 = -12;
        int i15 = -2;
        int i16 = 47;
        int iArr1[] = new int[N];
        short s = 125;
        boolean b = true;
        long l = -8358964605313051208L;
        float f1 = 30.357F;
        float fArr[] = new float[N];
        double dArr[] = new double[N];
        FuzzerUtils.init(iArr1, -25355);
        FuzzerUtils.init(fArr, 121.4F);
        FuzzerUtils.init(dArr, 19.50694);
        i9 = 1;
        do {
            i10 <<= -106;
            i10 += ((int) (1.303F));
            for (i11 = 1; i11 < 6; i11 += 3) {
                i10 = i9;
                iArr1[i11] *= i11;
                switch ((((-186) >>> 1) % 4) + 84) {
                    case 84 :
                        for (i13 = 6; i11 < i13; i13--) {
                            s += ((short) (i13));
                            Test.instanceCount >>= i13;
                        }
                        for (i15 = 1; i15 < 6; ++i15) {
                            Test.dFld = Test.dFld;
                            if (b)
                                break;

                            i10 >>= i11;
                            switch ((i15 % 5) + 41) {
                                case 41 :
                                    l >>>= 5;
                                    i16 = -5;
                                    i16 = ((int) (Test.dFld));
                                    break;
                                case 42 :
                                    l += i15 + i11;
                                    iArr1[i15] += ((int) (Test.dFld));
                                    Test.instanceCount = i15;
                                    fArr[i15] = i12;
                                    i14 += i9;
                                    f1 = i11;
                                    dArr[i15 - 1] = 0L;
                                    i16 = i14;
                                    break;
                                case 43 :
                                case 44 :
                                    f1 += i15;
                                    switch (((i15 % 1) * 5) + 71) {
                                        case 74 :
                                            iArr1[i9] += i13;
                                            i12 *= ((int) (Test.dFld));
                                            i12 -= ((int) (Test.dFld));
                                            i14 |= i12;
                                            fArr[i15 + 1] += f1;
                                            iArr1[i11] += ((int) (Test.instanceCount));
                                            iArr1[i9] *= i10;
                                            i14 = ((int) (Test.instanceCount));
                                            i14 += i9;
                                            break;
                                        default :
                                            i16 += i12;
                                    }
                                case 45 :
                                    b = b;
                                    break;
                                default :
                                    i16 += (-2) + (i15 * i15);
                            }
                        }
                        break;
                    case 85 :
                        i12 += ((int) (107L + (i11 * i11)));
                        break;
                    case 86 :
                        b = b;
                    case 87 :
                        iArr1[i9] -= -42392;
                        break;
                }
            }
        } while ((i9 += 2) < 175 );
        vMeth2_check_sum += (((((((((((((i9 + i10) + i11) + i12) + i13) + i14) + s) + i15) + i16) + (b ? 1 : 0)) + l) + Float.floatToIntBits(f1)) + FuzzerUtils.checkSum(iArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(int i, int i1, int i2) {
        int i3 = 36643;
        int i4 = 12;
        int i5 = -8798;
        int i6 = 63877;
        int i7 = 3;
        int i8 = 152;
        int i17 = 11;
        int i18 = 11;
        int iArr[] = new int[N];
        float f = -1.317F;
        float f2 = 43.524F;
        float fArr1[] = new float[N];
        boolean b1 = true;
        boolean bArr[] = new boolean[N];
        byte by = -122;
        short s1 = -15023;
        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(fArr1, 0.684F);
        FuzzerUtils.init(bArr, true);
        for (i3 = 80; i3 > 2; i3--) {
            for (i5 = 1; i5 < 7; i5++) {
                Test.lArrFld[i3 - 1] *= ((long) (f * (Long.reverseBytes(39960L) - 197)));
                i6 -= -(--iArr[i3 + 1]);
                i += ++i;
            }
            for (i7 = 1; i7 < 7; i7++) {
                Test.instanceCount *= ((long) (Test.dFld + Test.instanceCount));
                i2 += ((i7 * i7) + f) - i5;
                {
                    final int ax$45 = i1;
                    final short ax$46 = s1;
                    try {
                        for (int ax$38 = -535; ax$38 < (-535 + 15135); ax$38 += 1) {
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                if (s1 != ((short) (0xf3f4)));
                            } catch (Throwable ax$40) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                            Test.ax$27 = true;
                            vMeth2();
                            Test.ax$27 = false;
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                try {
                                    int[] ax$42 = new int[-1];
                                    i1 += 1;
                                } catch (NegativeArraySizeException ax$43) {
                                    i1 += 2;
                                }
                            } catch (Throwable ax$44) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                        }
                    } finally {
                        i1 = ax$45;
                        s1 = ax$46;
                    }
                }
                vMeth2();
                i17 = 2;
                do {
                    f += i17;
                    i2 += i17 ^ i4;
                    Test.dFld -= -24340;
                    i2 >>= i8;
                    i2 = ((int) (208L));
                    if (i1 != 0) {
                        vMeth1_check_sum += (((((((((((((((((i + i1) + i2) + i3) + i4) + i5) + i6) + Float.floatToIntBits(f)) + i7) + i8) + i17) + Float.floatToIntBits(f2)) + i18) + (b1 ? 1 : 0)) + by) + s1) + FuzzerUtils.checkSum(iArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(bArr);
                        return;
                    }
                    i1 /= 863;
                    fArr1[i3 + 1] += i17;
                    {
                        final int ax$25 = i8;
                        final int ax$26 = i2;
                        try {
                            char[] ax$14 = new char[]{ 'ﲘ', '搖', '힘', 'ל', 'ꓱ', '坵', '杤', 'ᛂ', '硠' };
                            Object[] ax$22 = new Object[]{ new Object(), new Object(), new Object(), new Object(), new Object(), new Object(), new Object(), new Object() };
                            boolean ax$13 = false;
                            for (int ax$12 = -756; ax$12 < (-756 + 17163); ax$12 += 1) {
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    int ax$16 = i8 & 7;
                                    int ax$17 = ax$16 + ((i8 >> 4) & 7);
                                    char ax$18 = ((char) (i8));
                                    Arrays.fill(ax$14, ax$16, ax$17, ax$18);
                                    boolean ax$19 = false;
                                    for (int ax$20 = ax$16; ax$20 < ax$17; ax$20++) {
                                        if (ax$14[ax$20] != ax$18) {
                                            ax$19 = true;
                                        }
                                    }
                                    if (ax$19);
                                } catch (Throwable ax$21) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                                if (!ax$13) {
                                    Test.instanceCount ^= i17;
                                    ax$13 = true;
                                }
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    ax$22[i2] = ax$22[i2 + 1];
                                } catch (Throwable ax$24) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                            }
                        } finally {
                            i8 = ax$25;
                            i2 = ax$26;
                        }
                    }
                } while ((--i17) > 0 );
                i8 += ((int) (2254836681L + (i7 * i7)));
                iArr[i7] = ((int) (Test.instanceCount));
                i4 = ((int) (Test.instanceCount));
                for (f2 = 2; f2 > 1; f2--) {
                    Test.instanceCount += (-13) + (f2 * f2);
                    i6 = 44395;
                    bArr[i3 - 1] = b1;
                    if (b1)
                        break;

                    b1 = b1;
                    i1 += ((int) (f2));
                    switch (((i3 % 2) * 5) + 107) {
                        case 112 :
                            Test.instanceCount *= 0L;
                            iArr[i7] = i18;
                            Test.byArrFld[i3 + 1] += ((byte) (23.302F));
                            if (i != 0) {
                                vMeth1_check_sum += (((((((((((((((((i + i1) + i2) + i3) + i4) + i5) + i6) + Float.floatToIntBits(f)) + i7) + i8) + i17) + Float.floatToIntBits(f2)) + i18) + (b1 ? 1 : 0)) + by) + s1) + FuzzerUtils.checkSum(iArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(bArr);
                                return;
                            }
                            b1 = b1;
                            by *= ((byte) (Test.instanceCount));
                            i6 += ((int) (((f2 * i) + f) - Test.instanceCount));
                            break;
                        case 115 :
                            iArr[i7] = s1;
                            break;
                        default :
                            if (true)
                                continue;

                    }
                }
            }
        }
        vMeth1_check_sum += (((((((((((((((((i + i1) + i2) + i3) + i4) + i5) + i6) + Float.floatToIntBits(f)) + i7) + i8) + i17) + Float.floatToIntBits(f2)) + i18) + (b1 ? 1 : 0)) + by) + s1) + FuzzerUtils.checkSum(iArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth() {
        int i19 = -60;
        int i20 = -66;
        int i21 = 54688;
        int i22 = 5849;
        int i23 = 9;
        int iArr2[] = new int[N];
        byte by1 = 41;
        float f3 = -120.529F;
        float fArr2[][] = new float[N][N];
        short s2 = -30867;
        short sArr[] = new short[N];
        boolean b2 = false;
        FuzzerUtils.init(iArr2, 43);
        FuzzerUtils.init(fArr2, -95.908F);
        FuzzerUtils.init(sArr, ((short) (21644)));
        vMeth1(i19, i19, 54411);
        i19 += by1;
        i19 -= ((int) (f3));
        i20 = 1;
        while ((++i20) < 128) {
            for (i21 = 1; i21 < 4; ++i21) {
                Test.dFld += f3;
                Test.instanceCount += ((i21 * s2) + i21) - i19;
                switch (((i20 >>> 1) % 6) + 95) {
                    case 95 :
                        Test.instanceCount = Test.instanceCount;
                        i23 = 1;
                        do {
                            Test.instanceCount = 35454;
                            if (i20 != 0) {
                                vMeth_check_sum += ((((((((((i19 + by1) + Float.floatToIntBits(f3)) + i20) + i21) + i22) + s2) + i23) + (b2 ? 1 : 0)) + FuzzerUtils.checkSum(iArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2))) + FuzzerUtils.checkSum(sArr);
                                return;
                            }
                            switch ((((i22 >>> 1) % 4) * 5) + 94) {
                                case 111 :
                                    i19 -= ((int) (Test.instanceCount));
                                    break;
                                case 112 :
                                    iArr2[i23] = i20;
                                    try {
                                        i22 = i19 % i21;
                                        i19 = i21 / iArr2[i20 + 1];
                                        i19 = i22 / i20;
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i22 = i19;
                                    i22 /= ((int) (i21 | 1));
                                    switch (i20 + 51) {
                                        case 51 :
                                            i22 &= i19;
                                            Test.instanceCount += ((i23 * i19) + i22) - i20;
                                            i22 -= ((int) (Test.instanceCount));
                                            Test.lArrFld[i23] += s2;
                                            Test.instanceCount -= i21;
                                            i19 += ((i23 * i22) + i22) - i21;
                                            Test.instanceCount += i23;
                                            i19 *= i20;
                                            f3 -= Test.instanceCount;
                                            if (b2)
                                                continue;

                                            i19 ^= 320;
                                            break;
                                        case 52 :
                                        case 53 :
                                            i19 *= i23;
                                            i22 -= ((int) (Test.dFld));
                                            Test.instanceCount = i21;
                                            f3 = 6;
                                            i22 += i23 * i23;
                                            b2 = b2;
                                            if (b2)
                                                continue;

                                            break;
                                        case 54 :
                                            i22 *= i23;
                                            break;
                                        case 55 :
                                            i22 = ((int) (Test.instanceCount));
                                            break;
                                        case 56 :
                                            i22 *= i23;
                                            break;
                                        case 57 :
                                            i19 += i23 - i23;
                                            break;
                                        case 58 :
                                            Test.dFld -= i23;
                                            break;
                                        case 59 :
                                            i22 += i19;
                                            break;
                                        case 60 :
                                        case 61 :
                                            i19 += i23 | i19;
                                            break;
                                        case 62 :
                                            Test.dFld += Test.dFld;
                                            break;
                                        case 63 :
                                            i19 = ((int) (Test.instanceCount));
                                            break;
                                        case 64 :
                                            f3 = i19;
                                        case 65 :
                                            i19 = i23;
                                            break;
                                        case 66 :
                                            i19 += ((i23 * i20) + i22) - i23;
                                            break;
                                        case 67 :
                                            Test.dFld += Test.dFld;
                                            break;
                                        case 68 :
                                            f3 += i23;
                                        case 69 :
                                            i19 += i23 | Test.instanceCount;
                                            break;
                                        case 70 :
                                            iArr2[i20] &= ((int) (Test.instanceCount));
                                        case 71 :
                                            Test.instanceCount += i23;
                                        case 72 :
                                            Test.iFld = ((int) (-12L));
                                            break;
                                        case 73 :
                                            i22 = i21;
                                            break;
                                        case 74 :
                                            try {
                                                i22 = 36474 % i23;
                                                Test.iFld = i20 / i20;
                                                i22 = iArr2[i20] / 1;
                                            } catch (ArithmeticException a_e) {
                                            }
                                            break;
                                        case 75 :
                                            Test.instanceCount += Test.iFld;
                                            break;
                                        case 76 :
                                        case 77 :
                                            fArr2[i20 - 1][i23 - 1] -= Test.instanceCount;
                                            break;
                                        case 78 :
                                            f3 -= s2;
                                            break;
                                        case 79 :
                                            try {
                                                Test.iFld = i22 / Test.iFld;
                                                i22 = (-952971955) % i23;
                                                i22 = Test.iFld % 247587025;
                                            } catch (ArithmeticException a_e) {
                                            }
                                            break;
                                        case 80 :
                                            Test.instanceCount += i23 * Test.instanceCount;
                                            break;
                                        case 81 :
                                            Test.instanceCount *= ((long) (Test.dFld));
                                            break;
                                        case 82 :
                                            Test.instanceCount -= i19;
                                            break;
                                        case 83 :
                                            f3 -= 14;
                                            break;
                                        case 84 :
                                            Test.instanceCount -= -17133;
                                        case 85 :
                                            Test.iFld += i23 * i23;
                                            break;
                                        case 86 :
                                            i19 += i22;
                                            break;
                                        case 87 :
                                            Test.iFld += ((int) (Test.instanceCount));
                                            break;
                                        case 88 :
                                            i19 = ((int) (2827160617L));
                                            break;
                                        case 89 :
                                            by1 = ((byte) (52961));
                                            break;
                                        case 90 :
                                            Test.instanceCount >>= Test.instanceCount;
                                            break;
                                        case 91 :
                                            Test.byArrFld[i20 - 1] *= ((byte) (Test.instanceCount));
                                            break;
                                        case 92 :
                                            Test.instanceCount += i23;
                                            break;
                                        case 93 :
                                            f3 += i23;
                                            break;
                                        case 94 :
                                            Test.lArrFld[i20 - 1] = Test.instanceCount;
                                        case 95 :
                                            iArr2[i20] = -7;
                                        case 96 :
                                            i19 -= 141;
                                            break;
                                        case 97 :
                                            i22 >>= -105;
                                            break;
                                        case 98 :
                                            f3 = Test.instanceCount;
                                        case 99 :
                                            Test.instanceCount += 10577;
                                            break;
                                        case 100 :
                                            if (b2)
                                                break;

                                            break;
                                        case 101 :
                                            Test.instanceCount += 109;
                                            break;
                                        case 102 :
                                            iArr2[i20] += ((int) (Test.dFld));
                                        case 103 :
                                            i22 -= -20110;
                                            break;
                                        case 104 :
                                            iArr2[i21] -= Test.iFld1;
                                        case 105 :
                                            fArr2[i21][i20 - 1] = -8342264632607849132L;
                                            break;
                                        case 106 :
                                            iArr2[i23 + 1] = by1;
                                            break;
                                        case 107 :
                                            f3 += -1706;
                                            break;
                                        case 108 :
                                            Test.instanceCount = Test.iFld;
                                            break;
                                        case 109 :
                                            Test.iFld1 = Test.iFld;
                                            break;
                                        case 110 :
                                            i22 = -99;
                                            break;
                                        case 111 :
                                            i19 = i22;
                                            break;
                                        case 112 :
                                            Test.instanceCount = i21;
                                            break;
                                        case 113 :
                                            Test.iFld1 -= 3;
                                            break;
                                        case 114 :
                                            i22 <<= i23;
                                            break;
                                        case 115 :
                                            Test.lArrFld[i21] <<= i20;
                                            break;
                                        case 116 :
                                        case 117 :
                                            Test.iFld = 5;
                                            break;
                                        case 118 :
                                            Test.instanceCount = i19;
                                        case 119 :
                                            f3 += i23;
                                            break;
                                        case 120 :
                                            b2 = b2;
                                            break;
                                    }
                                    break;
                                case 110 :
                                    i19 = Test.iFld1;
                                    break;
                                case 100 :
                                    Test.instanceCount += i23;
                                    break;
                                default :
                                    Test.iFld1 = -173;
                            }
                        } while ((++i23) < 2 );
                    case 96 :
                        sArr[i21 - 1] = by1;
                    case 97 :
                        Test.instanceCount = Test.instanceCount;
                        break;
                    case 98 :
                        iArr2[i21] = -24;
                    case 99 :
                        Test.instanceCount >>= i21;
                        break;
                    case 100 :
                        i22 = i20;
                        break;
                    default :
                        if (true)
                            continue;

                }
            }
        }
        vMeth_check_sum += ((((((((((i19 + by1) + Float.floatToIntBits(f3)) + i20) + i21) + i22) + s2) + i23) + (b2 ? 1 : 0)) + FuzzerUtils.checkSum(iArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2))) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {
        float f4 = 77.125F;
        float fArr3[] = new float[N];
        int i24 = -12;
        int i25 = -94;
        int i26 = 157;
        int i27 = 46598;
        int i28 = 12;
        int i29 = -35624;
        int i30 = -155;
        int i31 = 27576;
        int i32 = -62887;
        int i33 = 55970;
        int i34 = -46;
        int i35 = 62513;
        int i36 = 110;
        int i37 = 238;
        int i38 = 12;
        int i39 = 13;
        int iArr3[] = new int[N];
        byte by2 = -39;
        double d = 2.58451;
        boolean b3 = false;
        short s3 = 22517;
        FuzzerUtils.init(iArr3, 173);
        FuzzerUtils.init(fArr3, 119.497F);
        vMeth();
        Test.instanceCount -= Test.iFld;
        f4 *= Test.instanceCount;
        for (i24 = 3; 203 > i24; i24++) {
            Test.iFld = Test.iFld1;
            Test.instanceCount *= ((long) (Test.dFld));
            if (b3) {
                Test.lArrFld[i24 + 1] -= by2;
                Test.lArrFld = Test.lArrFld;
                for (i26 = 26; i26 > 1; i26--) {
                    f4 -= Test.iFld1;
                }
                Test.dFld -= Test.instanceCount;
                i27 -= ((int) (23007L));
                for (d = 26; d > 1; d -= 3) {
                    Test.instanceCount += ((long) (Test.dFld));
                }
                Test.instanceCount %= Test.instanceCount | 1;
                Test.instanceCount = -10;
                for (i29 = 1; 26 > i29; ++i29) {
                    f4 += by2;
                    f4 += i29;
                    b3 = b3;
                    Test.instanceCount = i29;
                    i28 = Test.iFld;
                    Test.instanceCount += i29 * i29;
                    {
                        final boolean ax$10 = b3;
                        final double ax$11 = Test.dFld;
                        try {
                            ByteBuffer ax$2 = null;
                            CharsetEncoder ax$4 = null;
                            CharBuffer ax$5 = null;
                            boolean ax$1 = false;
                            for (int ax$0 = -550; ax$0 < (-550 + 10667); ax$0 += 1) {
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    for (int ax$6 = 0; ax$6 < 10000; ax$6++) {
                                        ax$5.clear();
                                        ax$2.clear();
                                        b3 = b3 && ax$4.encode(ax$5, ax$2, true).isUnderflow();
                                    }
                                } catch (Throwable ax$7) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                                if (!ax$1) {
                                    Test.iFld = ((int) (Test.instanceCount));
                                    ax$1 = true;
                                }
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    if (dFld != 529.0) {
                                    }
                                } catch (Throwable ax$9) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                            }
                        } finally {
                            b3 = ax$10;
                            Test.dFld = ax$11;
                        }
                    }
                    Test.iFld1 += (-46538) + (i29 * i29);
                    for (i31 = 2; 1 < i31; --i31) {
                        switch (((i31 % 2) * 5) + 57) {
                            case 65 :
                                if (b3)
                                    break;

                                dArrFld = dArrFld;
                                Test.iFld1 += ((i31 * by2) + f4) - i32;
                                break;
                            case 60 :
                                iArr3[i31 - 1] -= -102;
                                Test.instanceCount += 4 + (i31 * i31);
                                Test.lArrFld[i24] >>= Test.instanceCount;
                                i25 >>>= ((int) (Test.instanceCount));
                                Test.instanceCount = -126;
                                Test.instanceCount = 214;
                                fArr3[i29 - 1] += Test.instanceCount;
                        }
                        i28 += ((i31 * i32) + f4) - i28;
                        i33 = i27;
                        i28 += ((int) (Test.instanceCount));
                        dArrFld[i29 + 1] = Test.iFld1;
                        iArr3[i24 + 1] += ((int) (Test.instanceCount));
                        if (b3)
                            break;

                        Test.iFld += i31;
                        i33 *= ((int) (Test.instanceCount));
                        Test.lArrFld[i29 + 1] = ((long) (Test.dFld));
                    }
                    Test.dFld -= by2;
                    Test.dFld += -11562;
                    i33 = ((int) (f4));
                    Test.dFld += -456828554857388617L;
                }
                i32 >>>= i24;
                Test.instanceCount += i24 * i24;
                b3 = b3;
                i34 = 1;
                do {
                    if (b3)
                        continue;

                    for (i35 = i34; 1 > i35; ++i35) {
                        i33 %= ((int) (Test.instanceCount | 1));
                        if (b3)
                            continue;

                        Test.iFld1 += i35 * i37;
                        Test.dFld += i29;
                        Test.iFld >>= s3;
                        Test.instanceCount = -6;
                    }
                    by2 += ((byte) (((i34 * i37) + i26) - i31));
                    for (i38 = 1; i38 < 1; ++i38) {
                        iFld2 >>>= i33;
                        switch (((i34 % 8) * 5) + 104) {
                            case 119 :
                                Test.instanceCount ^= Test.instanceCount;
                                Test.iFld1 = -2;
                                f4 += -73;
                            case 130 :
                                fArr3 = FuzzerUtils.float1array(N, ((float) (1.757F)));
                                i30 >>>= i31;
                                Test.instanceCount += i38;
                                i37 <<= 59621;
                                i39 += i30;
                            case 137 :
                                Test.instanceCount += i24;
                                break;
                            case 110 :
                                if (b3)
                                    break;

                                break;
                            case 140 :
                                iArr3 = iArr3;
                                break;
                            case 116 :
                                i33 += ((int) (Test.instanceCount));
                                break;
                            case 106 :
                                f4 += ((i38 * f4) + Test.instanceCount) - i29;
                                break;
                            case 127 :
                                i32 = -9;
                                break;
                        }
                    }
                } while ((++i34) < 26 );
            }
        }
        FuzzerUtils.out.println((((("f4 i24 i25 = " + Float.floatToIntBits(f4)) + ",") + i24) + ",") + i25);
        FuzzerUtils.out.println((((("by2 i26 i27 = " + by2) + ",") + i26) + ",") + i27);
        FuzzerUtils.out.println((((("d i28 i29 = " + Double.doubleToLongBits(d)) + ",") + i28) + ",") + i29);
        FuzzerUtils.out.println((((("i30 b3 i31 = " + i30) + ",") + (b3 ? 1 : 0)) + ",") + i31);
        FuzzerUtils.out.println((((("i32 i33 i34 = " + i32) + ",") + i33) + ",") + i34);
        FuzzerUtils.out.println((((("i35 i36 i37 = " + i35) + ",") + i36) + ",") + i37);
        FuzzerUtils.out.println((((("s3 i38 i39 = " + s3) + ",") + i38) + ",") + i39);
        FuzzerUtils.out.println((("iArr3 fArr3 = " + FuzzerUtils.checkSum(iArr3)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr3)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount) + ",") + Double.doubleToLongBits(Test.dFld)) + ",") + Test.iFld);
        FuzzerUtils.out.println((((("Test.iFld1 iFld2 Test.lArrFld = " + Test.iFld1) + ",") + iFld2) + ",") + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println((("Test.byArrFld dArrFld = " + FuzzerUtils.checkSum(Test.byArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$27 = false;
}