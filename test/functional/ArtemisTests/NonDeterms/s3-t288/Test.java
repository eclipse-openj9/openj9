// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 0L;

    public static int iFld = 70;

    public short sFld = 7306;

    public static volatile short sFld1 = -24958;

    public static int iFld1 = -116;

    public volatile float fFld = -2.873F;

    public double dFld = 98.67368;

    public byte byFld = 41;

    public static boolean bFld = false;

    public volatile int iFld2 = -9;

    public static int[] iArrFld = new int[N];

    public static int[][] iArrFld1 = new int[N][N];

    public static long[] lArrFld = new long[N];

    public float[][] fArrFld = new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -29837);
        FuzzerUtils.init(Test.iArrFld1, -8);
        FuzzerUtils.init(Test.lArrFld, 803309035666697225L);
    }

    public static long vMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long dMeth_check_sum = 0;

    public static double dMeth(int i3, int i4) {
        double d = -1.14206, d1 = 36.22816, dArr[] = new double[N];
        int i5 = 17282, i6 = -46279, i7 = -130, i8 = -32425, i9 = 4, i10 = 11, i11 = 6, i12 = 14249, i13 = 130, i14 = 55537, iArr[] = new int[N], iArr1[] = new int[N];
        float f = -2.58F, f1 = 0.1001F, f2 = 4.827F;
        boolean b = false;
        FuzzerUtils.init(iArr, 26991);
        FuzzerUtils.init(iArr1, -34003);
        FuzzerUtils.init(dArr, -84.114870);
        Test.instanceCount -= i4;
        d += i4;
        for (i5 = 2; i5 < 99; ++i5) {
            d *= Test.sFld1;
            Test.iFld += (int) f;
            i6 <<= i3;
            if (b) {
                Test.sFld1 /= (short) ((long) (f) | 1);
                i4 -= i3;
                for (d1 = 1; d1 < 6; d1++) {
                    Test.instanceCount = Test.iFld;
                    iArr[i5 - 1] += (int) Test.instanceCount;
                    if (b)
                        break;
                    Test.iFld += (int) d1;
                }
                Test.iFld += i3;
                for (i8 = i5; 6 > i8; ++i8) {
                    i4 >>>= i8;
                }
                for (f1 = 1; f1 < 6; f1++) {
                    i11 = 1;
                    while (++i11 < 2) {
                        Test.instanceCount &= i3;
                        iArr[(int) (f1 - 1)] *= i5;
                        i9 = i8;
                        Test.instanceCount += i9;
                        Test.instanceCount *= i10;
                    }
                    Test.instanceCount -= i10;
                    Test.instanceCount += (long) (16.198F + (f1 * f1));
                }
                for (i12 = 1; i12 < 6; i12++) {
                    iArr1[i12] /= (int) (i11 | 1);
                    Test.instanceCount += (((i12 * Test.iFld) + i10) - i6);
                    iArr[i5 - 1] *= i10;
                    switch((((i4 >>> 1) % 5) * 5) + 85) {
                        case 102:
                            Test.sFld1 = (short) i13;
                            for (f2 = 1; 2 > f2; ++f2) {
                                i10 += (int) (((f2 * i11) + Test.instanceCount) - i13);
                                i14 += (int) ((long) f2 ^ i12);
                                i10 += (int) (((f2 * i13) + Test.instanceCount) - f2);
                                Test.iFld *= i11;
                            }
                        case 107:
                            if (b)
                                break;
                        case 89:
                            Test.iFld += i12;
                            break;
                        case 93:
                            f *= Test.iFld;
                            break;
                        case 91:
                            dArr[i5 + 1] = Test.instanceCount;
                            break;
                        default:
                            Test.instanceCount *= Test.iFld;
                    }
                }
            }
        }
        long meth_res = i3 + i4 + Double.doubleToLongBits(d) + i5 + i6 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i7 + (b ? 1 : 0) + i8 + i9 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + i14 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public long lMeth(int i2) {
        if (ax$21) {
            try {
                byte[] ax$23 = new byte[10];
                int ax$22 = 0xbbaa9988;
                for (; ax$22 < ax$23.length - 4; ax$22 += 4) {
                    ax$23[ax$22 + 0] = 0;
                    ax$23[ax$22 + 1] = 1;
                    ax$23[ax$22 + 2] = 2;
                    ax$23[ax$22 + 3] = 3;
                }
            } catch (Throwable ax$24) {
            } finally {
            }
            return -7335613799637286895L;
        }
        int i15 = 3, i16 = 14, i17 = -13, i18 = 14439, i19 = -6393, i20 = 5, i21 = -61, i22 = 54;
        double d2 = -36.42519;
        float[] fArr = new float[N];
        long[] lArr = new long[N];
        FuzzerUtils.init(fArr, -15.25F);
        FuzzerUtils.init(lArr, 50699L);
        sFld = (short) (-Math.sqrt(dMeth(i2, Test.iFld1)));
        fArr[(i2 >>> 1) % N] -= Test.iFld1;
        Test.iArrFld[(i2 >>> 1) % N] = Test.iFld;
        switch((((Test.iFld1 >>> 1) % 10) * 5) + 107) {
            case 140:
                Test.iFld *= Test.iFld;
                i2 = 17962;
                for (i15 = 103; i15 > 6; i15--) {
                    i17 = 1;
                    do {
                        Test.iArrFld[i15 - 1] += i15;
                        Test.instanceCount = Test.instanceCount;
                        Test.instanceCount = i16;
                        Test.instanceCount = -8754879586604516855L;
                        Test.instanceCount += i2;
                        d2 = 1;
                        do {
                            Test.iFld1 -= (int) d2;
                            fFld -= Test.iFld1;
                        } while (++d2 < 1);
                        Test.instanceCount >>= i2;
                        for (i18 = 1; i18 < 1; i18++) {
                            i19 += (int) d2;
                            Test.iArrFld1 = Test.iArrFld1;
                            i19 -= i16;
                            Test.iFld = 1;
                            i19 += i18;
                            sFld = (short) i15;
                        }
                    } while (++i17 < 6);
                    i19 |= (int) Test.instanceCount;
                    i2 = Test.iFld;
                    i20 = 1;
                    while (++i20 < 6) {
                        i21 = 1;
                        do {
                            i2 -= (int) fFld;
                            Test.iFld += (i21 * i2);
                            Test.iFld1 += (i21 * i21);
                            Test.iArrFld1[i15][i15] <<= i18;
                            lArr[i15 - 1] = Test.instanceCount;
                            i19 += (i21 * i21);
                        } while ((i21 += 2) < 1);
                        i19 -= i16;
                        Test.iFld1 = 6;
                        i22 += (int) Test.instanceCount;
                    }
                }
                break;
            case 148:
                Test.instanceCount = i20;
            case 135:
            case 154:
                i19 *= Test.iFld1;
                break;
            case 150:
                dFld += i15;
            case 128:
                Test.instanceCount *= i16;
                break;
            case 131:
                i16 = (int) fFld;
                break;
            case 149:
                byFld = (byte) fFld;
                break;
            case 112:
                i16 += (int) Test.instanceCount;
            case 152:
                lArr[(i17 >>> 1) % N] = Test.instanceCount;
            default:
                i2 /= (int) ((long) (d2) | 1);
        }
        long meth_res = i2 + i15 + i16 + i17 + Double.doubleToLongBits(d2) + i18 + i19 + i20 + i21 + i22 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void vMeth(long l) {
        if (ax$30) {
            int ax$33 = iFld1;
            boolean ax$34 = bFld;
            int ax$35 = iFld;
            try {
                byte[] ax$32 = new byte[0];
                byte[] ax$31 = new byte[16];
                if (ax$31[iFld] != ax$32[iFld1 + iFld - 1]) {
                    bFld = true;
                }
            } catch (Throwable ax$36) {
            } finally {
                iFld1 = ax$33;
                bFld = ax$34;
                iFld = ax$35;
            }
            return;
        }
        int i23 = -251, i24 = 39076, i25 = -161, i26 = -94, i27 = 55084, i28 = -10, i29 = 108, i30 = -5, i31 = 57604, i32 = -203, i33 = 14, i34 = 3;
        float[] fArr1 = new float[N];
        double[][] dArr1 = new double[N][N];
        FuzzerUtils.init(fArr1, 34.396F);
        FuzzerUtils.init(dArr1, -75.45324);
        if (Test.bFld) {
            Test.iFld += (int) ((lMeth(Test.iFld) + Test.iFld) | 9);
            Test.iArrFld1[(-17638 >>> 1) % N][(Test.iFld >>> 1) % N] += (int) dFld;
            Test.lArrFld[(10 >>> 1) % N] = Test.iFld;
            i23 = 1;
            do {
                switch((i23 % 2) + 42) {
                    case 42:
                        fArr1[i23 + 1] -= i23;
                        Test.iFld1 = Test.iFld;
                        Test.iFld -= (int) 1.118208;
                        fFld = Test.iFld;
                        break;
                    case 43:
                        Test.iFld1 += Test.iFld1;
                        for (i24 = 1; 4 > i24; ++i24) {
                            Test.bFld = false;
                            if (Test.bFld)
                                break;
                            if (Test.iFld != 0) {
                                vMeth_check_sum += l + i23 + i24 + i25 + i26 + i27 + i28 + i29 + i30 + i31 + i32 + i33 + i34 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
                                return;
                            }
                            Test.iFld1 += i24;
                        }
                        for (i26 = 1; i26 < 4; i26++) {
                            Test.lArrFld[i23] += 10;
                        }
                        sFld += (short) i26;
                        for (i28 = 1; i28 < 4; i28++) {
                            Test.iFld >>>= -61;
                        }
                        Test.iFld1 -= -47893;
                        i27 += (int) -20.81775;
                        for (i30 = i23; i30 < 4; i30++) {
                            switch((i30 % 10) + 45) {
                                case 45:
                                    fFld -= i29;
                                    for (i32 = 1; i32 < 1; ++i32) {
                                        i25 >>= (int) Test.instanceCount;
                                        Test.iArrFld1[i32][i32 + 1] += 20;
                                        l = 12;
                                        i33 <<= iFld2;
                                        Test.instanceCount = i31;
                                        Test.iFld = i30;
                                        Test.instanceCount -= 30278;
                                        Test.instanceCount += i34;
                                        dArr1[i32][i30] += i33;
                                    }
                                    Test.iFld1 += (((i30 * byFld) + Test.instanceCount) - l);
                                case 46:
                                    Test.instanceCount += (((i30 * Test.instanceCount) + iFld2) - sFld);
                                case 47:
                                    Test.iFld1 = (int) Test.instanceCount;
                                    break;
                                case 48:
                                    fArr1[i30 + 1] = Test.iFld1;
                                case 49:
                                    l *= i25;
                                    break;
                                case 50:
                                    Test.iArrFld = Test.iArrFld;
                                    break;
                                case 51:
                                    i29 = i29;
                                    break;
                                case 52:
                                    fArr1 = FuzzerUtils.float1array(N, (float) -55.1F);
                                    break;
                                case 53:
                                    i27 <<= i34;
                                    break;
                                case 54:
                                    byFld *= (byte) i32;
                                    break;
                                default:
                                    Test.instanceCount += (long) -1.649F;
                            }
                        }
                        break;
                }
            } while (++i23 < 164);
        } else if (Test.bFld) {
            i31 <<= i34;
        } else {
            iFld2 = i26;
            vMeth_check_sum += l + i23 + i24 + i25 + i26 + i27 + i28 + i29 + i30 + i31 + i32 + i33 + i34 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
            return;
        }
        vMeth_check_sum += l + i23 + i24 + i25 + i26 + i27 + i28 + i29 + i30 + i31 + i32 + i33 + i34 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {
        int i = -1, i1 = -29104, i35 = -65464, i36 = 91, i37 = 36, i38 = 5, i39 = 57723, i40 = -29514;
        float f3 = -126.677F, f4 = -51.307F;
        double[] dArr2 = new double[N], dArr3 = new double[N];
        FuzzerUtils.init(dArr2, 2.35900);
        FuzzerUtils.init(dArr3, -2.122194);
        for (i = 3; 193 > i; i += 2) {
            Test.instanceCount += (i1--);
            {
                java.io.PrintStream ax$39 = System.out;
                java.io.PrintStream ax$40 = System.err;
                java.io.PrintStream ax$41 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$41);
                System.setErr(ax$41);
                try {
                    ax$30 = true;
                    for (int ax$37 = 0; ax$37 < 6202; ax$37 += 1) vMeth(2639296026059518011L);
                } catch (java.lang.Throwable ax$38) {
                } finally {
                    ax$30 = false;
                }
                System.setOut(ax$39);
                System.setErr(ax$40);
            }
            vMeth(Test.instanceCount);
            i1 -= 13222;
            switch((i % 10) + 122) {
                case 122:
                case 123:
                    switch(((Test.iFld >>> 1) % 1) + 33) {
                        case 33:
                            Test.sFld1 *= (short) i;
                            i35 = 1;
                            do {
                                fFld = Test.instanceCount;
                                dFld -= Test.iFld1;
                                for (f3 = 1; f3 < 3; f3++) {
                                    Test.instanceCount &= i35;
                                    Test.iFld1 += (int) f3;
                                    Test.iArrFld1[i35][i35] >>= -19789;
                                    Test.lArrFld[(int) (f3)] *= -56052;
                                }
                                Test.instanceCount += (i35 + Test.instanceCount);
                            } while ((i35 += 2) < 53);
                            dArr2[i] -= Test.iFld1;
                            Test.iFld1 = sFld;
                            i36 += Test.iFld1;
                            fArrFld[i + 1][i] += i;
                            Test.instanceCount *= Test.instanceCount;
                            dArr2[i] -= 0;
                            iFld2 *= (int) Test.instanceCount;
                            break;
                        default:
                            Test.iFld += Test.iFld;
                            iFld2 >>= i1;
                            if (Test.bFld)
                                break;
                            i37 = 1;
                            do {
                                Test.instanceCount = i1;
                                Test.sFld1 = (short) i36;
                                fFld -= Test.instanceCount;
                                iFld2 -= i1;
                                Test.iArrFld[i37 + 1] += (int) 11L;
                            } while (++i37 < 53);
                    }
                    i38 = 1;
                    while (++i38 < 53) {
                        Test.iFld1 <<= (int) Test.instanceCount;
                        Test.bFld = Test.bFld;
                        fFld = i;
                        Test.instanceCount -= (long) 82.481F;
                        for (i39 = 1; i39 > 1; --i39) {
                            i1 += (0 + (i39 * i39));
                            i1 += (int) Test.instanceCount;
                            fFld += i;
                            iFld2 -= i1;
                            iFld2 += (((i39 * Test.iFld1) + Test.instanceCount) - i);
                            sFld = (short) -26906L;
                        }
                        f4 = 1;
                        while (++f4 < 1) {
                            Test.iFld1 = -10;
                            fFld -= i1;
                            switch(((i % 1) * 5) + 10) {
                                case 11:
                                    i36 = i1;
                                    i40 = -934;
                                    break;
                            }
                            sFld &= (short) -43;
                            dFld -= 62724L;
                            Test.instanceCount += (long) (f4 * i1);
                            Test.iFld ^= (int) Test.instanceCount;
                            dArr3[i + 1] *= dFld;
                            fFld = i39;
                            switch((int) ((f4 % 2) + 35)) {
                                case 35:
                                case 36:
                                    Test.instanceCount *= (long) f3;
                                    Test.iFld += (int) (f4 - Test.instanceCount);
                                    Test.instanceCount = -1443056097L;
                                    if (Test.bFld) {
                                        if (Test.bFld) {
                                            Test.iFld1 = 17433;
                                            if (Test.bFld)
                                                break;
                                            if (Test.bFld)
                                                break;
                                            i36 = i40;
                                            if (true)
                                                break;
                                            Test.instanceCount -= -6;
                                            dFld += i38;
                                            Test.instanceCount -= i38;
                                            fFld += (f4 + fFld);
                                            if (false)
                                                break;
                                            sFld += (short) ((long) f4 ^ i);
                                            Test.instanceCount = i1;
                                        } else if (Test.bFld) {
                                            sFld *= (short) i35;
                                        } else {
                                            Test.bFld = Test.bFld;
                                        }
                                    } else if (Test.bFld) {
                                        Test.iFld *= (int) Test.instanceCount;
                                    } else if (Test.bFld) {
                                        Test.iArrFld[i + 1] = Test.iFld;
                                    } else {
                                        i36 += (int) (f4 * f4);
                                    }
                                    break;
                            }
                        }
                    }
                    {
                        java.io.PrintStream ax$7 = System.out;
                        java.io.PrintStream ax$8 = System.err;
                        java.io.PrintStream ax$9 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$9);
                        System.setErr(ax$9);
                        try {
                            for (int ax$5 = -927; ax$5 < 4374; ax$5 += 1) {
                                int ax$3 = i40;
                                try {
                                    int[] ax$2 = { 0x11, 0x22, 0x33, 0x44, 0x88, 0x99, 0xaa, 0xbb };
                                    int[] ax$1 = new int[] { 0xF1F2F3F4 };
                                    int[] ax$0 = new int[] { 0xF1F2F3F4 };
                                    ax$2[i40] = (int) (ax$0[i40] & ax$1[i40]);
                                } catch (Throwable ax$4) {
                                } finally {
                                    i40 = ax$3;
                                }
                            }
                        } catch (Throwable ax$6) {
                        }
                        System.setOut(ax$7);
                        System.setErr(ax$8);
                    }
                    break;
                case 124:
                    Test.iFld1 -= 11;
                    break;
                case 125:
                    Test.iFld1 = (int) Test.instanceCount;
                    break;
                case 126:
                    sFld += (short) -55021;
                    break;
                case 127:
                    i1 += Test.iFld;
                    break;
                case 128:
                    if (false)
                        continue;
                    break;
                case 129:
                    Test.iArrFld1[i][i + 1] <<= i38;
                case 130:
                    i36 += (i ^ i1);
                    break;
                case 131:
                    iFld2 = sFld;
                    break;
                default:
                    if (Test.bFld)
                        break;
            }
        }
        FuzzerUtils.out.println("i i1 i35 = " + i + "," + i1 + "," + i35);
        FuzzerUtils.out.println("f3 i36 i37 = " + Float.floatToIntBits(f3) + "," + i36 + "," + i37);
        FuzzerUtils.out.println("i38 i39 i40 = " + i38 + "," + i39 + "," + i40);
        FuzzerUtils.out.println("f4 dArr2 dArr3 = " + Float.floatToIntBits(f4) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr3)));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld sFld = " + Test.instanceCount + "," + Test.iFld + "," + sFld);
        FuzzerUtils.out.println("Test.sFld1 Test.iFld1 fFld = " + Test.sFld1 + "," + Test.iFld1 + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("dFld byFld Test.bFld = " + Double.doubleToLongBits(dFld) + "," + byFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("iFld2 Test.iArrFld Test.iArrFld1 = " + iFld2 + "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld1));
        FuzzerUtils.out.println("Test.lArrFld fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
            {
                java.io.PrintStream ax$18 = System.out;
                java.io.PrintStream ax$19 = System.err;
                java.io.PrintStream ax$20 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$20);
                System.setErr(ax$20);
                try {
                    for (int ax$16 = -4277; ax$16 < 3950; ax$16 += 1) {
                        int ax$14 = iFld1;
                        try {
                            java.lang.Integer ax$13 = new Integer(99);
                            ax$13 = new Integer(iFld1 + 1);
                        } catch (Throwable ax$15) {
                        } finally {
                            iFld1 = ax$14;
                        }
                    }
                } catch (Throwable ax$17) {
                }
                System.setOut(ax$18);
                System.setErr(ax$19);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$21 = false;

    private static Boolean ax$30 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  lMeth ->  lMeth vMeth mainTest
// DEBUG  dMeth ->  dMeth lMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
