// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.text.Bidi;
import java.util.zip.ZipInputStream;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 8923013714618206970L;

    public static byte byFld = 36;

    public static double dFld = 1.85159;

    public static boolean bFld = true;

    public boolean bFld1 = true;

    public static long lArrFld[] = new long[N];

    public static volatile double dArrFld[] = new double[N];

    public float fArrFld[] = new float[N];

    public static boolean bArrFld[] = new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -5372683639880895734L);
        FuzzerUtils.init(Test.dArrFld, 41.28285);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i7, int i8) {
        float f2 = 1.579F;
        float f3 = 88.966F;
        int i9 = 9;
        int i10 = 10294;
        int i11 = -4740;
        int i12 = 1;
        int i13 = 63847;
        int i14 = -26;
        int i15 = 43158;
        int i16 = 48397;
        int iArr2[] = new int[N];
        int iArr3[][] = new int[N][N];
        boolean b = false;
        boolean bArr[] = new boolean[N];
        short s1 = 12422;
        short s2 = -20226;
        long lArr[] = new long[N];
        double dArr[] = new double[N];
        FuzzerUtils.init(iArr2, -7);
        FuzzerUtils.init(lArr, -4055098134L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr, -2.57146);
        FuzzerUtils.init(iArr3, -41);
        f2 = 1;
        do {
            Test.byFld += ((byte) (Test.instanceCount));
        } while ((++f2) < 84 );
        if (b) {
            for (i9 = 8; i9 < 230; i9++) {
                i8 >>= ((int) (Test.instanceCount));
                for (i11 = 1; i11 < 3; i11++) {
                    for (i13 = 2; i13 > 1; --i13) {
                        if (b)
                            break;

                        s1 += ((short) (i13));
                        f3 = f2;
                        i7 = i12;
                        try {
                            i10 = i12 / i7;
                            iArr2[i13 - 1] = i7 / 144;
                            i8 = i12 % 26851;
                        } catch (ArithmeticException a_e) {
                        }
                        lArr[i13] -= ((long) (f2));
                        switch ((i11 % 2) + 12) {
                            case 12 :
                                s1 = ((short) (105.703F));
                                iArr2[i11] += i13;
                                i7 = i8;
                                i7 -= ((int) (-55.745F));
                                bArr[i9 + 1] = b;
                                Test.instanceCount += i11;
                                i12 *= i12;
                                switch (((i12 >>> 1) % 8) + 111) {
                                    case 111 :
                                        i7 += i13 + i9;
                                        i7 = ((int) (Test.instanceCount));
                                        i7 = ((int) (Test.instanceCount));
                                        i7 = i12;
                                        i10 >>= i11;
                                        f3 = s1;
                                        if (b) {
                                            if (true) {
                                                i8 += ((i13 * i12) + Test.instanceCount) - i15;
                                                f3 -= 13L;
                                                i7 += i11;
                                                Test.byFld -= ((byte) (s1));
                                                i12 = ((int) (f3));
                                                i16 <<= s2;
                                                try {
                                                    i15 = i9 / iArr2[i11 - 1];
                                                    iArr2[i9 - 1] = (-255) / i14;
                                                    i15 = i7 % 19106;
                                                } catch (ArithmeticException a_e) {
                                                }
                                            } else if (true) {
                                                f3 *= i14;
                                            }
                                        } else if (true) {
                                            iArr2[i13 + 1] += i13;
                                        }
                                        break;
                                    case 112 :
                                        Test.dFld = Test.dFld;
                                    case 113 :
                                        dArr[i11] = Test.instanceCount;
                                        break;
                                    case 114 :
                                        dArr = dArr;
                                        break;
                                    case 115 :
                                        iArr3 = FuzzerUtils.int2array(N, ((int) (23898)));
                                        break;
                                    case 116 :
                                        i7 -= ((int) (Test.instanceCount));
                                    case 117 :
                                        i8 >>>= i16;
                                        break;
                                    case 118 :
                                        i7 = i12;
                                        break;
                                    default :
                                        if (i15 != 0) {
                                            vMeth2_check_sum += ((((((((((((((((((i7 + i8) + Float.floatToIntBits(f2)) + i9) + i10) + i11) + i12) + i13) + i14) + (b ? 1 : 0)) + s1) + Float.floatToIntBits(f3)) + i15) + i16) + s2) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(bArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(iArr3);
                                            return;
                                        }
                                }
                                break;
                            case 13 :
                                i8 = -52;
                                break;
                            default :
                        }
                    }
                }
            }
        } else {
            i8 = ((int) (Test.instanceCount));
        }
        vMeth2_check_sum += ((((((((((((((((((i7 + i8) + Float.floatToIntBits(f2)) + i9) + i10) + i11) + i12) + i13) + i14) + (b ? 1 : 0)) + s1) + Float.floatToIntBits(f3)) + i15) + i16) + s2) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(bArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(iArr3);
    }

    public static void vMeth1(long l, float f1) {
        int i5 = 195;
        int i6 = -9;
        int i17 = 0;
        int i18 = 60249;
        int i19 = 6;
        int i20 = -4178;
        int i21 = 20200;
        int iArr1[] = new int[N];
        double d = 52.98146;
        double dArr1[] = new double[N];
        short s3 = 15423;
        short sArr1[] = new short[N];
        float fArr[] = new float[N];
        byte byArr[] = new byte[N];
        FuzzerUtils.init(sArr1, ((short) (-26786)));
        FuzzerUtils.init(iArr1, 168);
        FuzzerUtils.init(fArr, 0.673F);
        FuzzerUtils.init(byArr, ((byte) (7)));
        FuzzerUtils.init(dArr1, 65.3544);
        i5 = ((int) (((++d) * (2.24F + (52284 - (Test.instanceCount = ((long) (-46.101999)))))) - d));
        sArr1[(i5 >>> 1) % N] = ((short) (15));
        i5 = ((int) ((f1--) + (i5 = i5++)));
        iArr1[(i5 >>> 1) % N] = ((int) (-(l++)));
        i6 = 1;
        while ((++i6) < 218) {
            vMeth2(i6, i5);
            i5 += ((int) (Test.instanceCount));
            for (i17 = i6; 3 > i17; i17 += 2) {
                if (Test.bFld)
                    break;

                iArr1[i6] = i17;
                Test.lArrFld[i17 - 1] *= ((long) (d));
                Test.dFld += 37248L;
                f1 -= i6;
            }
            i5 = i5;
            switch ((i6 % 3) + 21) {
                case 21 :
                    s3 = ((short) (i17));
                    fArr[i6 - 1] += i6;
                    f1 *= 243;
                    for (i19 = 3; i19 > 1; --i19) {
                        l ^= i5;
                        l += i19;
                        f1 += i5;
                        switch (((i6 % 2) * 5) + 40) {
                            case 49 :
                                iArr1[i19 - 1] = -7;
                                l += (-28) + (i19 * i19);
                                f1 -= -76;
                                f1 -= i20;
                                l += i19 - i18;
                                byArr[i6] = ((byte) (-41.839F));
                                Test.lArrFld[i6 + 1] += Test.instanceCount;
                                break;
                            case 45 :
                                l += i19 ^ Test.instanceCount;
                                i21 = 1;
                                do {
                                    f1 -= i5;
                                } while ((++i21) < 2 );
                                dArr1[i19 - 1] = d;
                                i20 += ((i19 * f1) + i5) - s3;
                                i20 = ((int) (d));
                                l += i19;
                                break;
                        }
                    }
                case 22 :
                    i20 -= i21;
                case 23 :
                    i18 >>>= s3;
                    break;
            }
        }
        vMeth1_check_sum += ((((((((((((((l + Float.floatToIntBits(f1)) + i5) + Double.doubleToLongBits(d)) + i6) + i17) + i18) + s3) + i19) + i20) + i21) + FuzzerUtils.checkSum(sArr1)) + FuzzerUtils.checkSum(iArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(byArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static void vMeth(int i, float f) {
        int i1 = 4788;
        int i2 = 31046;
        int i3 = 12;
        int i4 = -13;
        int i22 = 8;
        int i23 = -178;
        int i24 = -233;
        int i25 = 51;
        int i26 = 4;
        int i27 = 106;
        int i28 = -227;
        int iArr[][] = new int[N][N];
        short s = 26114;
        short sArr[] = new short[N];
        double d1 = -100.36239;
        float fArr1[] = new float[N];
        long lArr1[] = new long[N];
        FuzzerUtils.init(sArr, ((short) (10984)));
        FuzzerUtils.init(iArr, 241);
        FuzzerUtils.init(fArr1, 1.96F);
        FuzzerUtils.init(lArr1, 2L);
        for (i1 = 3; i1 < 197; i1++) {
            Test.instanceCount >>= Test.instanceCount;
            sArr[i1] = ((short) ((iArr[i1 + 1][i1 - 1] = i2) - ((Test.instanceCount++) << (s << i))));
        }
        i += ++i;
        for (i3 = 7; i3 < 165; ++i3) {
            vMeth1(Test.instanceCount, f);
            d1 = 1;
            do {
                i4 -= ((int) (d1));
                Test.instanceCount >>= i4;
                i4 = i4;
                for (i22 = 1; i22 < 1; ++i22) {
                    i23 += i4;
                }
                {
                    final int ax$40 = i1;
                    try {
                        int[] ax$22 = new int[]{ 0x11, 0x22, 0x33, 0x44, 0x88, 0x99, 0xaa, 0xbb };
                        byte[] ax$23 = new byte[]{ ((byte) (-80)), ((byte) (-90)) };
                        char[] ax$24 = new char[]{ '婋', '㞓', '៞', '뼂', '悶', '䫲' };
                        short[] ax$25 = new short[]{ ((short) (-20879)), ((short) (-20131)), ((short) (-11677)), ((short) (-4121)), ((short) (12427)), ((short) (-20277)) };
                        double[] ax$26 = new double[]{ 0.06603775197922379, 0.7971829799655555, 0.22486819660945134, 0.28820961186842253, 0.8274505415710846, 0.9950916829336889, 0.2594754031605556, 0.6830479795325136 };
                        float[] ax$27 = new float[]{ 0.2677223F, 0.34489572F, 0.25121754F, 0.33835715F, 0.3916338F, 0.718003F, 0.11321145F };
                        long[] ax$28 = new long[]{ 5897437323621526281L, -6778229400368563086L, 6486529715833451789L, 5964343016395515566L };
                        for (int ax$20 = -463; ax$20 < (-463 + 16700); ax$20 += 1) {
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                for (int ax$29 = 0; ax$29 < i1; ax$29++) {
                                    ax$23[ax$29] += 1;
                                }
                                for (int ax$30 = 0; ax$30 < i1; ax$30++) {
                                    ax$25[ax$30] += -128;
                                }
                                for (int ax$31 = 0; ax$31 < i1; ax$31++) {
                                    ax$24[ax$31] += 127;
                                }
                                for (int ax$32 = 0; ax$32 < i1; ax$32++) {
                                    ax$22[ax$32] += -219;
                                }
                                for (int ax$33 = 0; ax$33 < i1; ax$33++) {
                                    ax$22[ax$33] += 219;
                                }
                                for (int ax$34 = 0; ax$34 < i1; ax$34++) {
                                    ax$28[ax$34] += 219;
                                }
                                for (int ax$35 = 0; ax$35 < i1; ax$35++) {
                                    ax$27[ax$35] += 2.0F;
                                }
                                for (int ax$36 = 0; ax$36 < i1; ax$36++) {
                                    ax$27[ax$36] += 14.34F;
                                }
                                for (int ax$37 = 0; ax$37 < i1; ax$37++) {
                                    ax$26[ax$37] += 20.0;
                                }
                                for (int ax$38 = 0; ax$38 < i1; ax$38++) {
                                    ax$26[ax$38] += 0.0;
                                }
                            } catch (Throwable ax$39) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                        }
                    } finally {
                        i1 = ax$40;
                    }
                }
                Test.instanceCount += ((long) (((long) (d1)) | i3));
                for (i24 = 1; i24 < 1; ++i24) {
                    f = ((float) (d1));
                    f = i23;
                    Test.byFld = ((byte) (Test.instanceCount));
                    try {
                        i4 = i22 / i3;
                        i4 = (-23863) / i22;
                        i4 = i2 % (-2132580920);
                    } catch (ArithmeticException a_e) {
                    }
                    if (i2 != 0) {
                        vMeth_check_sum += (((((((((((((((((i + Float.floatToIntBits(f)) + i1) + i2) + s) + i3) + i4) + Double.doubleToLongBits(d1)) + i22) + i23) + i24) + i25) + i26) + i27) + i28) + FuzzerUtils.checkSum(sArr)) + FuzzerUtils.checkSum(iArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    i23 += i24;
                    i2 = i24;
                    Test.instanceCount = Test.instanceCount;
                    iArr[i24 + 1][((int) (d1 + 1))] -= 34420;
                    Test.instanceCount = i26;
                    fArr1[i3] -= i26;
                    Test.byFld = ((byte) (i22));
                    iArr[((int) (d1))][i3 - 1] <<= -48816;
                }
                for (i27 = i3; i27 < 1; i27++) {
                    i28 -= i;
                    s >>= ((short) (-10068));
                    Test.instanceCount ^= i;
                    Test.byFld <<= ((byte) (8));
                    lArr1[i27 - 1] -= i;
                    Test.dFld -= -61;
                    Test.instanceCount |= Test.instanceCount;
                }
                i23 *= i27;
            } while ((++d1) < 4 );
            if (i27 != 0) {
                vMeth_check_sum += (((((((((((((((((i + Float.floatToIntBits(f)) + i1) + i2) + s) + i3) + i4) + Double.doubleToLongBits(d1)) + i22) + i23) + i24) + i25) + i26) + i27) + i28) + FuzzerUtils.checkSum(sArr)) + FuzzerUtils.checkSum(iArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(lArr1);
                return;
            }
        }
        vMeth_check_sum += (((((((((((((((((i + Float.floatToIntBits(f)) + i1) + i2) + s) + i3) + i4) + Double.doubleToLongBits(d1)) + i22) + i23) + i24) + i25) + i26) + i27) + i28) + FuzzerUtils.checkSum(sArr)) + FuzzerUtils.checkSum(iArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {
        if (Test.ax$0) {
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ZipInputStream ax$1 = new ZipInputStream(null);
            } catch (Throwable ax$2) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return;
        }
        int i29 = 10;
        int i30 = -17;
        int i31 = -49135;
        int i32 = 162;
        int i33 = 43;
        int i34 = -13;
        int iArr4[] = new int[N];
        float f4 = 1.0F;
        long l1 = -78865616L;
        long l2 = -45716L;
        double d2 = -80.55189;
        double d3 = 84.45184;
        FuzzerUtils.init(iArr4, 240);
        vMeth(i29, f4);
        for (i30 = 1; i30 < 186; ++i30) {
            i29 = i30;
            Test.instanceCount += i30 * i30;
        }
        for (l1 = 6; l1 < 133; l1++) {
            short s4 = 25724;
            s4 = ((short) (i32));
            i33 = 1;
            while ((++i33) < 40) {
                i29 >>>= i32;
                if (Test.bFld)
                    break;

                f4 -= i33;
                switch (((i33 >>> 1) % 7) + 62) {
                    case 62 :
                        i34 = 1;
                        while ((++i34) < 1) {
                            if (Test.bFld) {
                                f4 -= -42139;
                                iArr4 = FuzzerUtils.int1array(N, ((int) (0)));
                                Test.instanceCount = i33;
                                iArr4[i33 - 1] -= 9;
                                Test.instanceCount += i31;
                                Test.byFld = ((byte) (i31));
                            } else {
                                Test.instanceCount -= ((long) (Test.dFld));
                                Test.lArrFld = FuzzerUtils.long1array(N, ((long) (-3004233030L)));
                                f4 = 121;
                                Test.dArrFld[((int) (l1 + 1))] = i34;
                                Test.dFld *= i29;
                                i29 -= 8;
                                Test.instanceCount = 62;
                                iArr4[((int) (l1))] = i31;
                                i32 = i34;
                                if (Test.bFld) {
                                    fArrFld[i34] *= i33;
                                    i29 = ((int) (l1));
                                    f4 += i34;
                                    Test.byFld += ((byte) (i34));
                                    iArr4 = iArr4;
                                    Test.instanceCount = ((long) (Test.dFld));
                                    i32 = i33;
                                    Test.instanceCount = Test.instanceCount;
                                    i29 += i34;
                                    i29 += i31;
                                    iArr4[i33] -= i33;
                                    i31 -= i34;
                                    i31 = i31;
                                    Test.instanceCount *= ((long) (d2));
                                } else if (Test.bFld) {
                                    f4 += i30;
                                    Test.bFld = Test.bFld;
                                    f4 -= l1;
                                    i31 |= i33;
                                    f4 += ((i34 * i30) + l2) - i30;
                                    i29 /= ((int) (Test.instanceCount | 1));
                                    i31 = ((int) (-37L));
                                    i32 = i34;
                                    Test.dFld = i32;
                                    Test.dFld *= i33;
                                    Test.instanceCount >>= i32;
                                    Test.lArrFld[i34] >>>= i34;
                                    if (Test.bFld)
                                        continue;

                                    i31 = -26;
                                } else {
                                    i31 = i32;
                                    l2 |= i33;
                                    i32 = i32;
                                    Test.lArrFld[i34] = i29;
                                    if (bFld1)
                                        continue;

                                    if (Test.bFld)
                                        break;

                                    switch (((i34 % 2) * 5) + 63) {
                                        case 72 :
                                            d3 /= Test.byFld | 1;
                                            i29 *= i32;
                                            f4 = i33;
                                            switch (((i32 >>> 1) % 2) + 61) {
                                                case 61 :
                                                    f4 -= l1;
                                                    break;
                                                case 62 :
                                                    l2 += i34 * i34;
                                                    iArr4[i34] += i32;
                                                    i32 -= i33;
                                                    Test.lArrFld[i33] += i34;
                                                    if (Test.bFld)
                                                        continue;

                                                    iArr4[((int) (l1))] = i33;
                                                    break;
                                                default :
                                                    i31 >>= ((int) (Test.instanceCount));
                                            }
                                        case 67 :
                                            bFld1 = bFld1;
                                            break;
                                        default :
                                            Test.bArrFld[((int) (l1))] = false;
                                    }
                                }
                            }
                        }
                        break;
                    case 63 :
                        i31 += i34;
                    case 64 :
                        i31 += i33 ^ i32;
                        break;
                    case 65 :
                        Test.bFld = Test.bFld;
                        break;
                    case 66 :
                    case 67 :
                        l2 -= i31;
                        break;
                    case 68 :
                        Test.byFld += ((byte) (2479 + (i33 * i33)));
                        break;
                }
            }
        }
        FuzzerUtils.out.println((((("i29 f4 i30 = " + i29) + ",") + Float.floatToIntBits(f4)) + ",") + i30);
        FuzzerUtils.out.println((((("i31 l1 i32 = " + i31) + ",") + l1) + ",") + i32);
        FuzzerUtils.out.println((((("i33 i34 d2 = " + i33) + ",") + i34) + ",") + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println((((("l2 d3 iArr4 = " + l2) + ",") + Double.doubleToLongBits(d3)) + ",") + FuzzerUtils.checkSum(iArr4));
        FuzzerUtils.out.println((((("Test.instanceCount Test.byFld Test.dFld = " + Test.instanceCount) + ",") + Test.byFld) + ",") + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println((((("Test.bFld bFld1 Test.lArrFld = " + (Test.bFld ? 1 : 0)) + ",") + (bFld1 ? 1 : 0)) + ",") + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println((((("Test.dArrFld fArrFld Test.bArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld))) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld))) + ",") + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                {
                    final boolean ax$18 = Test.bFld;
                    final int ax$19 = i;
                    try {
                        String ax$4 = "23516.92003563011";
                        Bidi ax$5 = null;
                        int[] ax$6 = new int[]{ -11 };
                        int[] ax$7 = new int[]{ 122758143, -875742882, 954172809, -1912573631, 1575133280 };
                        char[] ax$13 = new char[]{ '鳶', '׷', '', '휬', '瀏', 'ῄ' };
                        char ax$16 = '';
                        for (int ax$3 = -489; ax$3 < (-489 + 15300); ax$3 += 1) {
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                for (int ax$10 = 0; ax$10 < ax$4.length(); ax$10++) {
                                    int ax$11 = ax$5.getLevelAt(ax$10);
                                    if (ax$11 != ax$6[ax$10]) {
                                        bFld = true;
                                    }
                                }
                            } catch (Throwable ax$12) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                            Test.ax$0 = true;
                            _instance.mainTest(new String[]{ "s", "s", "s" });
                            Test.ax$0 = false;
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                bFld = true;
                            } catch (Throwable ax$17) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                        }
                    } finally {
                        Test.bFld = ax$18;
                        i = ax$19;
                    }
                }
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}