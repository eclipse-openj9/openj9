// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.concurrent.atomic.AtomicIntegerArray;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -14L;

    public static volatile short sFld = -1741;

    public static float fFld = -2.41F;

    public static double dFld = 0.114796;

    public static int iFld = -51;

    public byte byFld = 0;

    public volatile boolean bFld = true;

    public static double dArrFld[] = new double[N];

    public static float fArrFld[] = new float[N];

    public static int iArrFld[] = new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -90.14519);
        FuzzerUtils.init(Test.fArrFld, 74.343F);
        FuzzerUtils.init(Test.iArrFld, -2);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(boolean b) {
        int i5 = 247;
        int i6 = -13;
        int i7 = 10;
        int i8 = 51235;
        int i9 = -29256;
        int i10 = -203;
        int i11 = 156;
        int i12 = -33714;
        int iArr1[] = new int[N];
        byte by = 58;
        byte byArr[] = new byte[N];
        float fArr[] = new float[N];
        FuzzerUtils.init(byArr, ((byte) (0)));
        FuzzerUtils.init(iArr1, 230);
        FuzzerUtils.init(fArr, 0.662F);
        i5 -= ((int) (-91.25508));
        i6 = 160;
        do {
            i5 -= -34006;
            by = ((byte) (Test.sFld));
            if (b) {
                byArr[i6] *= ((byte) (Test.instanceCount));
                i5 >>= ((int) (Test.instanceCount));
                Test.fFld *= -188;
            } else {
                for (i7 = 1; i7 < 4; i7++) {
                    i8 += -164;
                }
                i8 *= i6;
                i8 = i5;
                for (i9 = i6; i9 < 4; i9++) {
                    Test.instanceCount >>= i8;
                    for (i11 = 1; i11 < 1; ++i11) {
                        i12 >>>= i6;
                        Test.dArrFld = Test.dArrFld;
                        Test.instanceCount = i7;
                        Test.dFld = by;
                        i5 = i5;
                        Test.fFld *= i8;
                        Test.fFld += 13 + (i11 * i11);
                        iArr1[i11] *= 2;
                        i5 = 39034;
                        switch (((i6 >>> 1) % 5) + 97) {
                            case 97 :
                            case 98 :
                                i8 = i6;
                                try {
                                    i8 = Test.iFld / iArr1[i6];
                                    iArr1[i11] = (-159) % iArr1[i11];
                                    iArr1[i11 - 1] = Test.iFld / iArr1[i9];
                                } catch (ArithmeticException a_e) {
                                }
                                fArr = fArr;
                                i8 = i7;
                                i5 *= ((int) (-2503515163L));
                                i8 >>= ((int) (131L));
                                i8 += ((int) (Test.instanceCount));
                                break;
                            case 99 :
                                Test.iFld = i7;
                                by = ((byte) (Test.fFld));
                                Test.instanceCount += (-126) + (i11 * i11);
                                iArr1[i11] = i7;
                                iArr1[i9 - 1] = i10;
                            case 100 :
                                i5 += 219;
                                break;
                            case 101 :
                                iArr1[i9] -= 43493;
                                break;
                            default :
                                Test.iFld >>>= ((int) (Test.instanceCount));
                        }
                    }
                }
            }
        } while ((--i6) > 0 );
        long meth_res = ((((((((((((b ? 1 : 0) + i5) + i6) + by) + i7) + i8) + i9) + i10) + i11) + i12) + FuzzerUtils.checkSum(byArr)) + FuzzerUtils.checkSum(iArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static void vMeth1(int i2, long l, int i3) {
        int i4 = -248;
        int i13 = 53472;
        int i14 = -44;
        int i15 = -41578;
        int i16 = -62573;
        int iArr[][] = new int[N][N];
        double d = 126.96623;
        float f = 80.285F;
        boolean b1 = false;
        byte by1 = 15;
        long lArr[] = new long[N];
        FuzzerUtils.init(iArr, -2);
        FuzzerUtils.init(lArr, 64878L);
        i4 = 1;
        while ((++i4) < 211) {
            iArr[i4][i4 - 1] = ((int) ((Integer.reverseBytes(201) + d) + (~((long) (f - i4)))));
            f = iMeth(b1);
            i2 >>= i3;
            Test.instanceCount -= ((long) (f));
            Test.dFld += Test.sFld;
            Test.fArrFld[i4 + 1] -= i2;
            i2 = i2;
            for (i13 = 3; i13 > 1; i13 -= 2) {
                i3 <<= i4;
                i14 += i13 + i14;
                Test.instanceCount |= i3;
                i3 %= ((int) (l | 1));
                lArr[i4] *= Test.sFld;
                l += i14;
                by1 |= ((byte) (i2));
                for (i15 = 1; i15 < 3; i15++) {
                    int i17 = -125;
                    f -= Test.instanceCount;
                    i16 -= i4;
                    if (b1) {
                        l += i15;
                        if (b1)
                            continue;

                        i14 = -57542;
                        Test.dArrFld[i4 - 1] = Test.instanceCount;
                        if (b1) {
                            iArr[i4][i4] >>= ((int) (Test.instanceCount));
                            i14 >>= ((int) (Test.instanceCount));
                            i14 = 188;
                            Test.iFld = i17;
                            iArr[i13][i15 - 1] %= ((int) (Test.iFld | 1));
                            iArr[(Test.iFld >>> 1) % N][i4 + 1] += Test.iFld;
                            i3 += ((i15 * i16) + i4) - l;
                            Test.instanceCount += (-1) + (i15 * i15);
                            if (b1)
                                continue;

                            i2 += 7 + (i15 * i15);
                            Test.iFld = i13;
                            by1 -= ((byte) (i15));
                        } else if (b1) {
                            i3 *= i3;
                            vMeth1_check_sum += ((((((((((((i2 + l) + i3) + i4) + Double.doubleToLongBits(d)) + Float.floatToIntBits(f)) + (b1 ? 1 : 0)) + i13) + i14) + by1) + i15) + i16) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr);
                            return;
                        } else if (b1) {
                            i17 -= ((int) (1.117612));
                        } else {
                            i3 = i14;
                        }
                    } else if (b1) {
                        i2 = ((int) (Test.instanceCount));
                    } else if (b1) {
                        try {
                            i17 = i17 % iArr[i4][i4 - 1];
                            i14 = i14 / i3;
                            i17 = 6 / i13;
                        } catch (ArithmeticException a_e) {
                        }
                    } else {
                        Test.iFld = Test.iFld;
                    }
                }
            }
        }
        vMeth1_check_sum += ((((((((((((i2 + l) + i3) + i4) + Double.doubleToLongBits(d)) + Float.floatToIntBits(f)) + (b1 ? 1 : 0)) + i13) + i14) + by1) + i15) + i16) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth() {
        int i18 = 123;
        int i19 = 2325;
        {
            final int ax$7 = i18;
            final int ax$8 = Test.iFld;
            try {
                AtomicIntegerArray ax$2 = null;
                for (int ax$0 = -621; ax$0 < (-621 + 1643); ax$0 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$5 = 0; ax$5 < (iFld - i18); ax$5 += 1) {
                            ax$2.compareAndSet(ax$5 + i18, iFld, -123);
                        }
                    } catch (Throwable ax$6) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i18 = ax$7;
                Test.iFld = ax$8;
            }
        }
        int i20 = 222;
        int i21 = -232;
        int i22 = -40334;
        int i23 = 0;
        float f1 = 0.805F;
        boolean b2 = true;
        long lArr1[] = new long[N];
        FuzzerUtils.init(lArr1, -154L);
        vMeth1(Test.iFld, Test.instanceCount, Test.iFld);
        Test.iFld *= ((int) (Test.instanceCount));
        Test.iFld = Test.iFld;
        for (i18 = 5; i18 < 92; i18++) {
            for (i20 = 1; i20 < 6; i20 += 3) {
                Test.fFld = byFld;
                i22 = 1;
                do {
                    i21 = i20;
                    Test.fFld = i18;
                    i21 = -46778;
                    byFld ^= ((byte) (i22));
                } while ((++i22) < 6 );
                i19 = i20;
                i19 = i22;
                Test.iArrFld[i20 + 1] *= 167;
                Test.iArrFld[i20 + 1] = -7;
                Test.sFld = ((short) (Test.iFld));
                i19 = -63926;
                i19 += ((i20 * Test.fFld) + i18) - i18;
            }
            i23 = 1;
            while ((++i23) < 6) {
                f1 = 1;
                while ((++f1) < 1) {
                    long l1 = -11390L;
                    i21 = i23;
                    Test.iArrFld[((int) (f1 - 1))] = i21;
                    if (b2) {
                        i21 = i18;
                        lArr1[((int) (f1 - 1))] |= Test.instanceCount;
                        Test.fFld += Test.instanceCount;
                    } else {
                        Test.iFld = ((int) (Test.instanceCount));
                        Test.iFld += (-8) + (f1 * f1);
                        Test.iFld += Test.iFld;
                        Test.fArrFld[i23 + 1] = i18;
                        Test.dFld += Test.instanceCount;
                        i21 = ((int) (l1));
                        try {
                            i21 = Test.iFld / Test.iArrFld[i23 + 1];
                            i19 = i21 % (-29783);
                            i19 = 64813 / Test.iArrFld[i18];
                        } catch (ArithmeticException a_e) {
                        }
                        Test.iFld += ((int) (((f1 * i23) + Test.fFld) - i21));
                    }
                    Test.instanceCount += i18;
                    i19 += ((int) (((f1 * i21) + i23) - i21));
                    lArr1[i23 - 1] -= i23;
                }
            }
        }
        vMeth_check_sum += (((((((i18 + i19) + i20) + i21) + i22) + i23) + Float.floatToIntBits(f1)) + (b2 ? 1 : 0)) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {
        int i = -32997;
        int i1 = -107;
        int i24 = -5;
        int i25 = 78;
        int i26 = 222;
        int i27 = -13;
        int i28 = 81;
        int i29 = 50570;
        int i30 = -131;
        int i31 = 23003;
        int i32 = 12522;
        long l2 = -9257L;
        long lArr2[] = new long[N];
        float f2 = 106.487F;
        FuzzerUtils.init(lArr2, -75L);
        for (i = 8; i < 179; i += 2) {
            vMeth();
            i24 += i + Test.iFld;
            if (bFld)
                continue;

            Test.iArrFld[(i1 >>> 1) % N] += i24;
            for (i25 = 2; i25 < 59; i25 += 3) {
                Test.iArrFld[i25] -= Test.iFld;
                for (i27 = i25; i27 < 4; i27++) {
                    Test.fFld += (-1L) + (i27 * i27);
                }
                Test.sFld ^= byFld;
                Test.fFld -= Test.fFld;
                Test.instanceCount += ((i25 * Test.fFld) + i27) - Test.instanceCount;
                if (bFld)
                    continue;

                for (i29 = 1; i29 < 4; i29++) {
                    switch ((i % 5) + 53) {
                        case 53 :
                            Test.dArrFld[i29 + 1] = Test.fFld;
                            Test.instanceCount <<= i29;
                            Test.instanceCount = i30;
                            Test.iFld += ((i29 * i28) + Test.instanceCount) - i24;
                            Test.dFld *= i26;
                            l2 = -172;
                            if (bFld)
                                continue;

                            i30 += 26162;
                            l2 = l2;
                            Test.iFld += i29;
                            if (bFld) {
                                Test.fArrFld[i25] = i27;
                                Test.sFld += ((short) (i29));
                                Test.instanceCount >>>= i30;
                                try {
                                    i30 = Test.iArrFld[i25 - 1] % i;
                                    i28 = i28 % (-954665699);
                                    Test.iArrFld[i] = i1 / 149;
                                } catch (ArithmeticException a_e) {
                                }
                                i30 = i24;
                                Test.fArrFld[i25] /= ((long) (Test.fFld)) | 1;
                                Test.dFld += l2;
                                switch (((i25 % 8) * 5) + 16) {
                                    case 41 :
                                        lArr2[i] = i26;
                                        l2 += ((i29 * Test.iFld) + i1) - i1;
                                        i28 += i28;
                                        Test.instanceCount *= ((long) (Test.fFld));
                                        switch (((i29 % 9) * 5) + 3) {
                                            case 36 :
                                            case 10 :
                                                i24 = 105;
                                                l2 -= 48807;
                                                Test.iArrFld[i] *= ((int) (48.5F));
                                                l2 = Test.instanceCount;
                                                byFld <<= ((byte) (i));
                                                Test.instanceCount -= Test.sFld;
                                                i26 += i31;
                                                Test.iArrFld[i + 1] = i26;
                                                Test.iArrFld[i29 + 1] = ((int) (Test.dFld));
                                                Test.iArrFld[i] += i;
                                                l2 += ((i29 * i32) + i1) - i24;
                                                try {
                                                    i31 = Test.iArrFld[i25 - 1] / (-1573616845);
                                                    i26 = (-19455) % i32;
                                                    Test.iFld = 12 % i;
                                                } catch (ArithmeticException a_e) {
                                                }
                                                byFld = ((byte) (Test.iFld));
                                                switch ((((i31 >>> 1) % 4) * 5) + 23) {
                                                    case 25 :
                                                        lArr2[i29] <<= i1;
                                                        i28 = i27;
                                                        Test.iFld += ((i29 * Test.iFld) + l2) - i1;
                                                        l2 *= -111;
                                                        Test.iFld += 25148 + (i29 * i29);
                                                        i30 = ((int) (112.1023F));
                                                        Test.fFld *= i29;
                                                        l2 += ((long) ((-67.933F) + (i29 * i29)));
                                                        Test.fFld += Test.instanceCount;
                                                        Test.fFld = 235;
                                                        Test.dArrFld[i25] = i26;
                                                    case 30 :
                                                        Test.fFld += i1;
                                                        i32 -= ((int) (Test.fFld));
                                                        Test.instanceCount <<= i29;
                                                        i26 += ((int) (Test.instanceCount));
                                                        Test.fFld *= Test.fFld;
                                                        i28 += ((int) (-27L));
                                                        l2 &= i24;
                                                        switch (((i29 % 10) * 5) + 59) {
                                                            case 105 :
                                                                i31 += i29 * i29;
                                                                Test.iFld += ((i29 * Test.iFld) + f2) - i27;
                                                                i30 <<= i30;
                                                                break;
                                                            case 99 :
                                                                l2 += i29;
                                                                break;
                                                            case 80 :
                                                                i31 = Test.sFld;
                                                                break;
                                                            case 79 :
                                                                Test.dFld -= i25;
                                                                break;
                                                            case 107 :
                                                                Test.iFld += ((i29 * i) + f2) - l2;
                                                                break;
                                                            case 74 :
                                                                l2 += 29473;
                                                                break;
                                                            case 81 :
                                                                try {
                                                                    Test.iArrFld[i29 + 1] = (-217) / Test.iFld;
                                                                    i31 = Test.iArrFld[i29] / (-42141);
                                                                    Test.iFld = (-54835) % i29;
                                                                } catch (ArithmeticException a_e) {
                                                                }
                                                                break;
                                                            case 70 :
                                                                Test.iFld -= ((int) (f2));
                                                                break;
                                                            case 85 :
                                                                i30 -= ((int) (Test.fFld));
                                                                break;
                                                            case 97 :
                                                                i31 -= -81;
                                                                break;
                                                        }
                                                        break;
                                                    case 42 :
                                                        Test.fFld -= 135;
                                                        break;
                                                    case 27 :
                                                        i30 -= i;
                                                        break;
                                                }
                                                break;
                                            case 45 :
                                                i26 = i1;
                                            case 18 :
                                                byFld = ((byte) (Test.sFld));
                                                break;
                                            case 31 :
                                                i1 -= i29;
                                                break;
                                            case 4 :
                                                i31 = ((int) (Test.instanceCount));
                                                break;
                                            case 5 :
                                                i32 += byFld;
                                                break;
                                            case 30 :
                                                bFld = bFld;
                                            case 47 :
                                                Test.dArrFld[i29 + 1] = i1;
                                                break;
                                            default :
                                                f2 += ((i29 * l2) + i32) - Test.iFld;
                                        }
                                        break;
                                    case 48 :
                                        i28 /= -1;
                                        break;
                                    case 20 :
                                    case 53 :
                                        lArr2[i] = i26;
                                        break;
                                    case 33 :
                                        i32 += i29;
                                        break;
                                    case 23 :
                                        i1 += i29 * i28;
                                        break;
                                    case 43 :
                                        byFld = ((byte) (l2));
                                        break;
                                    case 54 :
                                        i28 += ((i29 * i) + i26) - Test.instanceCount;
                                        break;
                                    default :
                                        Test.dFld += i1;
                                }
                            } else {
                                i26 = i28;
                            }
                            break;
                        case 54 :
                            Test.dArrFld[i] *= i29;
                            break;
                        case 55 :
                            i24 >>>= i27;
                            break;
                        case 56 :
                            i24 >>>= i24;
                            break;
                        case 57 :
                            Test.instanceCount += i29 ^ i30;
                    }
                }
            }
        }
        FuzzerUtils.out.println((((("i i1 i24 = " + i) + ",") + i1) + ",") + i24);
        FuzzerUtils.out.println((((("i25 i26 i27 = " + i25) + ",") + i26) + ",") + i27);
        FuzzerUtils.out.println((((("i28 i29 i30 = " + i28) + ",") + i29) + ",") + i30);
        FuzzerUtils.out.println((((("l2 i31 i32 = " + l2) + ",") + i31) + ",") + i32);
        FuzzerUtils.out.println((("f2 lArr2 = " + Float.floatToIntBits(f2)) + ",") + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println((((("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount) + ",") + Test.sFld) + ",") + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println((((("Test.dFld Test.iFld byFld = " + Double.doubleToLongBits(Test.dFld)) + ",") + Test.iFld) + ",") + byFld);
        FuzzerUtils.out.println((((("bFld Test.dArrFld Test.fArrFld = " + (bFld ? 1 : 0)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld))) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}