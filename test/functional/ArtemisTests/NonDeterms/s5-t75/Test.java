// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -13L;

    public static float fFld = 7.488F;

    public static int iFld = 13;

    public static volatile boolean bFld = false;

    public static double dFld = 2.86333;

    public static int iFld1 = 131;

    public static volatile float fFld1 = 2.177F;

    public static int iFld2 = -73;

    public static volatile long lFld = -146L;

    public static double dArrFld[] = new double[N];

    public static long lArrFld[] = new long[N];

    public static short sArrFld[] = new short[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.7138);
        FuzzerUtils.init(Test.lArrFld, 7626339974504045942L);
        FuzzerUtils.init(Test.sArrFld, ((short) (-21841)));
    }

    public static long vMeth_check_sum = 0;

    public static long fMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1, double d, long l) {
        int i2 = 13566;
        int i3 = 50041;
        int i4 = 226;
        int i5 = -12;
        int i6 = -218;
        int i7 = -49800;
        int i8 = -217;
        int i9 = 58610;
        int i10 = 11;
        int iArr[] = new int[N];
        float f2 = 0.354F;
        float f3 = 80.1016F;
        float fArr[] = new float[N];
        boolean bArr[] = new boolean[N];
        long lArr[] = new long[N];
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, -2051738688L);
        FuzzerUtils.init(fArr, -1.647F);
        FuzzerUtils.init(iArr, -11);
        if (true) {
            for (i2 = 2; i2 < 126; i2++) {
                for (f2 = 5; f2 > 1; --f2) {
                    i4 = i3;
                    switch (((i3 >>> 1) % 1) + 88) {
                        case 88 :
                            i5 = 2;
                            while ((--i5) > 0) {
                                if (Test.bFld)
                                    break;

                                Test.iFld >>= i3;
                                Test.instanceCount -= Test.iFld;
                                Test.bFld = Test.bFld;
                            }
                            switch (((i5 >>> 1) % 1) + 81) {
                                case 81 :
                            }
                            if (Test.bFld)
                                continue;

                            i4 <<= Test.iFld;
                            i6 = 2;
                            do {
                                bArr[((int) (f2))] = Test.bFld;
                                lArr[i6] -= ((long) (f1));
                                i4 = ((int) (Test.instanceCount));
                                Test.fFld += i6 * i6;
                                i4 *= -156;
                                i4 = i5;
                                if (false)
                                    continue;

                                fArr[((int) (f2 - 1))] = 2243;
                            } while ((--i6) > 0 );
                            l = i4;
                            f3 = 1;
                            do {
                                d *= d;
                            } while ((++f3) < 2 );
                            break;
                    }
                    i3 = -213;
                    switch ((((i4 >>> 1) % 4) * 5) + 8) {
                        case 21 :
                            for (i7 = 1; i7 < 2; i7 += 3) {
                                iArr[((int) (f2 - 1))] -= ((int) (l));
                                i8 += i7 * i8;
                                l <<= 53;
                            }
                            for (i9 = 1; 2 > i9; ++i9) {
                                Test.instanceCount += i9;
                                i4 = ((int) (l));
                                iArr[i9 - 1] = i5;
                                f1 = i8;
                                f1 = ((float) (d));
                            }
                            break;
                        case 11 :
                            Test.instanceCount -= l;
                        case 14 :
                            Test.fFld += ((f2 * i2) + i8) - Test.instanceCount;
                            break;
                        case 10 :
                            i3 -= ((int) (Test.fFld));
                            break;
                    }
                }
            }
        } else if (Test.bFld) {
            i8 = i7;
        } else {
            iArr[((-59598) >>> 1) % N] <<= ((int) (-60526L));
        }
        long meth_res = ((((((((((((((((Float.floatToIntBits(f1) + Double.doubleToLongBits(d)) + l) + i2) + i3) + Float.floatToIntBits(f2)) + i4) + i5) + i6) + Float.floatToIntBits(f3)) + i7) + i8) + i9) + i10) + FuzzerUtils.checkSum(bArr)) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static float fMeth(int i1, float f) {
        int i11 = 13;
        int i12 = -11;
        int i13 = 32508;
        int i14 = -207;
        int i15 = -230;
        int iArr1[] = new int[N];
        short s = -22616;
        short sArr[] = new short[N];
        double d1 = 47.36917;
        float fArr1[] = new float[N];
        FuzzerUtils.init(iArr1, 45497);
        FuzzerUtils.init(sArr, ((short) (16786)));
        FuzzerUtils.init(fArr1, -2.895F);
        iMeth(Test.fFld, Test.dFld, -12L);
        i11 = 216;
        do {
            iArr1[i11 - 1] *= i11;
            i1 = Test.iFld;
            Test.dArrFld[i11] -= -16060;
            for (i12 = i11; i12 < 3; ++i12) {
                Test.iFld |= ((int) (Test.instanceCount));
            }
            i13 += ((i11 * Test.iFld1) + s) - Test.iFld1;
            Test.iFld1 = i12;
            Test.bFld = Test.bFld;
            i13 = s;
            for (d1 = i11; d1 < 3; d1++) {
                sArr[i11 + 1] = ((short) (i12));
                iArr1 = FuzzerUtils.int1array(N, ((int) (71)));
                i14 |= ((int) (Test.instanceCount));
                i15 = 1;
                do {
                    Test.iFld += i15;
                    Test.iFld1 = ((int) (Test.instanceCount));
                    iArr1[((int) (d1 - 1))] -= -7;
                    s += ((short) (i15 * i15));
                    Test.iFld -= -14;
                    f += ((i15 * i14) + Test.instanceCount) - Test.fFld;
                    fArr1[i15 + 1] += Test.fFld;
                    Test.instanceCount = s;
                    Test.instanceCount -= i12;
                    i1 >>= i11;
                    i1 = -35841;
                    if (Test.bFld)
                        continue;

                    Test.instanceCount = Test.instanceCount;
                    i14 *= i14;
                    switch ((i15 % 2) * 5) {
                        case 2 :
                            i14 = ((int) (Test.instanceCount));
                            i14 -= i13;
                            iArr1[i15] = ((int) (Test.fFld));
                            Test.fFld1 *= i14;
                            s = ((short) (Test.instanceCount));
                            Test.lArrFld[i15 - 1] ^= s;
                            break;
                        case 6 :
                            Test.iFld1 = ((int) (Test.instanceCount));
                            break;
                        default :
                            f %= i12 | 1;
                    }
                } while ((++i15) < 1 );
            }
        } while ((--i11) > 0 );
        long meth_res = ((((((((((i1 + Float.floatToIntBits(f)) + i11) + i12) + i13) + s) + Double.doubleToLongBits(d1)) + i14) + i15) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(sArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        fMeth_check_sum += meth_res;
        return ((float) (meth_res));
    }

    public static void vMeth() {
        if (Test.ax$10) {
            final int ax$15 = Test.iFld1;
            final boolean ax$14 = Test.bFld;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                bFld = true;
            } catch (Throwable ax$13) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.bFld = ax$14;
            Test.iFld1 = ax$15;
            return;
        }
        int i16 = 36309;
        int i17 = -4954;
        int i18 = 54913;
        int i19 = 3;
        int i21 = 1860;
        int i22 = -12;
        int i23 = 242;
        int iArr2[] = new int[N];
        int iArr3[][] = new int[N][N];
        byte by = 42;
        byte byArr[] = new byte[N];
        float f4 = -6.165F;
        short s1 = -3392;
        FuzzerUtils.init(byArr, ((byte) (-72)));
        FuzzerUtils.init(iArr2, 9);
        FuzzerUtils.init(iArr3, -35);
        Test.fFld -= ((Test.iFld + (-22032)) - (++Test.instanceCount)) - (Integer.reverseBytes(Test.iFld) + (Test.iFld + Test.iFld));
        fMeth(21, Test.fFld);
        for (i16 = 5; i16 < 160; i16 += 3) {
            Test.instanceCount += i16 + by;
            Test.iFld1 *= Test.iFld;
            byArr = byArr;
            Test.iFld += ((i16 * i17) + Test.instanceCount) - i17;
            iArr2 = iArr3[i16 + 1];
            iArr2[i16 + 1] <<= 9;
            Test.instanceCount = Test.iFld1;
            if (Test.bFld)
                continue;

            i17 -= ((int) (-8172000574929532242L));
            for (i18 = 1; i18 < 10; i18++) {
                i17 >>= ((int) (Test.instanceCount));
            }
            i17 += i16 * i16;
        }
        Test.iFld1 = i16;
        for (int i20 : iArr2) {
            for (i21 = 1; 2 > i21; ++i21) {
                for (f4 = 2; f4 > i21; --f4) {
                    try {
                        iArr3[i21 + 1][i21] = i19 / Test.iFld1;
                        i22 = i21 / i19;
                        i23 = (-76) / iArr3[i21 - 1][i21 - 1];
                    } catch (ArithmeticException a_e) {
                    }
                    Test.lArrFld[i21 - 1] += 0;
                    i17 += ((int) (((f4 * f4) + i17) - i18));
                    switch (((int) ((f4 % 1) + 77))) {
                        case 77 :
                            i20 += ((int) (((f4 * Test.instanceCount) + i20) - i18));
                            i17 = Test.iFld2;
                            Test.instanceCount = Test.instanceCount;
                            iArr3[((int) (f4))] = iArr3[i21 + 1];
                            i23 *= Test.iFld2;
                            break;
                        default :
                            by = ((byte) (i18));
                            switch (((int) ((f4 % 1) + 37))) {
                                case 37 :
                                    Test.instanceCount = i16;
                                    s1 -= ((short) (i19));
                                    switch ((i21 % 5) + 78) {
                                        case 78 :
                                            switch (((i21 % 2) * 5) + 62) {
                                                case 72 :
                                                    Test.instanceCount += ((long) (f4 * f4));
                                                    Test.iFld1 *= ((int) (Test.fFld1));
                                                    i17 <<= i19;
                                                case 65 :
                                                    Test.instanceCount = ((long) (Test.dFld));
                                                    break;
                                            }
                                            break;
                                        case 79 :
                                        case 80 :
                                            i17 = Test.iFld;
                                            break;
                                        case 81 :
                                            Test.lFld -= Test.iFld;
                                            break;
                                        case 82 :
                                            Test.lFld = 44285;
                                            break;
                                        default :
                                            Test.fFld1 *= -9;
                                    }
                                    break;
                                default :
                                    iArr2[i21 - 1] |= s1;
                            }
                    }
                }
            }
        }
        vMeth_check_sum += (((((((((((i16 + i17) + by) + i18) + i19) + i21) + i22) + Float.floatToIntBits(f4)) + i23) + s1) + FuzzerUtils.checkSum(byArr)) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {
        int i = 37594;
        int i24 = 243;
        int i25 = -4390;
        int i26 = -136;
        int i27 = -98;
        int i28 = 52;
        int i29 = -8;
        int i30 = 1167;
        int i31 = 50736;
        int i32 = 120;
        int i33 = -2;
        int i34 = -1193;
        int i35 = -27;
        int iArr4[] = new int[N];
        byte by1 = -105;
        short s2 = 20804;
        double d2 = 0.120851;
        boolean b = true;
        float f5 = 0.489F;
        float fArr2[] = new float[N];
        FuzzerUtils.init(iArr4, 1);
        FuzzerUtils.init(fArr2, 48.588F);
        i = ((int) (i + (--Test.fFld)));
        i -= ++i;
        {
            final int ax$33 = i28;
            final int ax$34 = Test.iFld1;
            final int ax$35 = i30;
            final int ax$36 = Test.iFld;
            final int ax$37 = i26;
            try {
                double[] ax$17 = new double[]{ 0.9294289752786417, 0.11902996682955014 };
                double[] ax$18 = new double[1];
                double[] ax$20 = new double[1];
                short[] ax$22 = new short[]{ 20, 10, 0, -10, -20 };
                short[] ax$23 = new short[]{ 20, 10, 0, -10, -20 };
                short[] ax$24 = new short[]{ 20, 10, 0, -10, -20 };
                short[] ax$25 = new short[]{ 20, 10, 0, -10, -20 };
                for (int ax$16 = -722; ax$16 < (-722 + 8723); ax$16 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$20[i30] = ax$17[i30] + ax$18[i30];
                    } catch (Throwable ax$21) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$10 = true;
                    vMeth();
                    Test.ax$10 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        short ax$31 = ((short) (iFld + i28));
                        iFld1 += ax$31;
                        ax$22[i28] = ax$31;
                        ax$23[i28] = ((short) (i26));
                        ax$24[i28] = ((short) (-i26));
                        ax$25[i28] = ((short) (i28));
                    } catch (Throwable ax$32) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i28 = ax$33;
                Test.iFld1 = ax$34;
                i30 = ax$35;
                Test.iFld = ax$36;
                i26 = ax$37;
            }
        }
        vMeth();
        Test.iFld1 += ((int) (Test.lFld));
        {
            try {
                byte[] ax$2 = new byte[]{ 0, -1, -2, -3, -4 };
                byte[] ax$3 = new byte[]{ ((byte) (-12)) };
                int[][] ax$7 = new int[][]{ new int[]{ 426035256, 2039598665, -887013587 }, new int[]{ 554411466, -1689934141, 1717841904, 1396021980, -521183777, 534020002, 1887319311, -285372147 } };
                boolean ax$1 = false;
                for (int ax$0 = -159; ax$0 < (-159 + 16001); ax$0 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        boolean ax$4 = false;
                        for (int ax$5 = 0; ax$5 < ax$3.length; ax$5++) {
                            if (ax$3[ax$5] != ax$2[ax$5]) {
                                ax$4 = true;
                            }
                        }
                        if (!ax$4);
                    } catch (Throwable ax$6) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    if (!ax$1) {
                        Test.instanceCount = by1;
                        ax$1 = true;
                    }
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$8 = 0; ax$8 < 10; ++ax$8) {
                            ax$7[ax$8] = new int[(50000 * ax$8) + 20];
                            ax$7[ax$8][17] = 1;
                        }
                    } catch (Throwable ax$9) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        Test.iFld2 <<= 0;
        Test.bFld = Test.bFld;
        for (i24 = 102; 1 < i24; --i24) {
            for (i26 = 3; 50 > i26; ++i26) {
                iArr4[i26 + 1] *= s2;
                Test.iFld = Test.iFld1;
                Test.iFld1 &= ((int) (181L));
                Test.lFld += i26 * i26;
                Test.iFld1 -= i;
                switch (((i24 >>> 1) % 2) + 51) {
                    case 51 :
                        i27 = -42327;
                        Test.bFld = Test.bFld;
                        i25 -= i24;
                        Test.iFld1 = ((int) (4225657433L));
                        if (Test.bFld) {
                            Test.dFld -= -9;
                            i28 = 1;
                            while ((++i28) < 2) {
                                iArr4[i24] |= i25;
                            }
                            for (d2 = 1; d2 < 2; ++d2) {
                                Test.iFld1 = i25;
                                if (Test.bFld)
                                    continue;

                                i29 += ((int) (d2));
                                Test.bFld = Test.bFld;
                                Test.lFld = Test.iFld1;
                                Test.lFld = ((long) (Test.fFld1));
                                Test.lFld = Test.instanceCount;
                                Test.iFld1 -= ((int) (Test.dFld));
                                fArr2[((int) (d2 + 1))] = i26;
                            }
                            Test.fFld1 += i26 - s2;
                            try {
                                Test.iFld2 = (-30480) / i30;
                                iArr4[i26] = (-47) % Test.iFld2;
                                Test.iFld1 = Test.iFld2 % i26;
                            } catch (ArithmeticException a_e) {
                            }
                            if (false)
                                break;

                            i -= i31;
                            iArr4 = iArr4;
                            Test.lArrFld[i26 - 1] += i25;
                        } else {
                            if (b)
                                continue;

                            if (Test.bFld)
                                break;

                            Test.iFld1 |= ((int) (Test.instanceCount));
                            iArr4[i24] = i25;
                            Test.iFld2 += -77;
                            if (Test.bFld) {
                                Test.dFld = Test.iFld1;
                                Test.sArrFld = FuzzerUtils.short1array(N, ((short) (29657)));
                                if (b)
                                    break;

                                i30 <<= ((int) (3704373278835728356L));
                                i31 += i26;
                                i32 = 1;
                                while ((++i32) < 2) {
                                    Test.fFld1 -= i25;
                                    iArr4[i24 + 1] <<= ((int) (Test.lFld));
                                    Test.sArrFld[i24 - 1] *= ((short) (Test.instanceCount));
                                }
                                iArr4[i24 - 1] = Test.iFld;
                                for (i33 = 1; i33 < 2; ++i33) {
                                    iArr4[i24 + 1] = ((int) (Test.fFld1));
                                    i31 += i33 + i28;
                                    Test.lArrFld[i26 - 1] = i30;
                                    i30 >>= ((int) (11L));
                                    i27 -= i31;
                                    i27 -= i24;
                                    i31 = ((int) (Test.dFld));
                                    i31 += (-111) + (i33 * i33);
                                }
                                Test.iFld1 -= ((int) (Test.lFld));
                                fArr2[i24 + 1] = Test.fFld1;
                                s2 += ((short) (Test.iFld1));
                                for (f5 = 1; f5 < 2; ++f5) {
                                    Test.instanceCount = i26;
                                    Test.dFld -= by1;
                                    Test.iFld += ((int) (f5 + Test.fFld));
                                    Test.fFld1 += i30;
                                    i25 += i33;
                                    Test.lFld -= i34;
                                    i35 ^= i27;
                                }
                            }
                        }
                        break;
                    case 52 :
                    default :
                        Test.lFld >>= i28;
                }
            }
        }
        FuzzerUtils.out.println((((("i by1 i24 = " + i) + ",") + by1) + ",") + i24);
        FuzzerUtils.out.println((((("i25 i26 i27 = " + i25) + ",") + i26) + ",") + i27);
        FuzzerUtils.out.println((((("s2 i28 d2 = " + s2) + ",") + i28) + ",") + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println((((("i29 i30 i31 = " + i29) + ",") + i30) + ",") + i31);
        FuzzerUtils.out.println((((("b i32 i33 = " + (b ? 1 : 0)) + ",") + i32) + ",") + i33);
        FuzzerUtils.out.println((((("i34 f5 i35 = " + i34) + ",") + Float.floatToIntBits(f5)) + ",") + i35);
        FuzzerUtils.out.println((("iArr4 fArr2 = " + FuzzerUtils.checkSum(iArr4)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount) + ",") + Float.floatToIntBits(Test.fFld)) + ",") + Test.iFld);
        FuzzerUtils.out.println((((("Test.bFld Test.dFld Test.iFld1 = " + (Test.bFld ? 1 : 0)) + ",") + Double.doubleToLongBits(Test.dFld)) + ",") + Test.iFld1);
        FuzzerUtils.out.println((((("Test.fFld1 Test.iFld2 Test.lFld = " + Float.floatToIntBits(Test.fFld1)) + ",") + Test.iFld2) + ",") + Test.lFld);
        FuzzerUtils.out.println((((("Test.dArrFld Test.lArrFld Test.sArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld))) + ",") + FuzzerUtils.checkSum(Test.lArrFld)) + ",") + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$10 = false;
}