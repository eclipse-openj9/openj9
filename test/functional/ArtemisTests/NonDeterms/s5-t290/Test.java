// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.math.BigDecimal;
import java.net.InetAddress;
import java.nio.channels.SelectionKey;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 24174L;

    public static float fFld = 41.515F;

    public static boolean bFld = true;

    public static volatile byte byFld = 71;

    public short sFld = 30384;

    public static long lFld = 7927783575915367230L;

    public static int iArrFld[] = new int[N];

    public long lArrFld[][] = new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13102);
    }

    public static long lMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1) {
        if (Test.ax$28) {
            int ax$29 = 925297510;
            int ax$30 = 1232536873;
            int ax$31 = 1 << 31;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$29 = ax$29 & (~ax$31);
                ax$30 = ax$30 | ax$31;
            } catch (Throwable ax$32) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return;
        }
        int i3 = 37908;
        int i4 = -184;
        int i5 = -3;
        int i6 = -30060;
        int i7 = 10;
        int i8 = 241;
        int i9 = 250;
        int i10 = 6771;
        byte by = -104;
        short s = -29818;
        long lArr[] = new long[N];
        boolean bArr[] = new boolean[N];
        float fArr1[] = new float[N];
        FuzzerUtils.init(lArr, 7492978255828486473L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr1, -55.673F);
        i3 = 1;
        do {
            switch ((i3 % 2) + 122) {
                case 122 :
                case 123 :
                    for (i4 = 1; i4 < 4; ++i4) {
                        i5 += i5;
                        i5 += i4;
                        lArr = lArr;
                        i5 = 35875;
                        i5 -= ((int) (l1));
                        Test.fFld -= i4;
                    }
                    l1 += i3 * i3;
                    Test.fFld += i5;
                    if (Test.bFld)
                        break;

                    Test.instanceCount >>>= i5;
                    break;
                default :
                    i5 += (-101) + (i3 * i3);
                    bArr[i3 - 1] = Test.bFld;
                    try {
                        i5 = (-19) % i3;
                        i5 = 142 / i5;
                        i5 = i3 % i5;
                    } catch (ArithmeticException a_e) {
                    }
                    Test.fFld += i3 * i3;
                    i5 *= by;
                    i5 = i4;
                    for (i6 = 1; 4 > i6; i6++) {
                        for (i8 = 1; i8 < 2; i8++) {
                            i9 *= i6;
                            l1 = i9;
                            l1 += i8;
                            i9 *= -62478;
                            Test.fFld += ((i8 * Test.fFld) + i7) - i7;
                            i9 += i7;
                            i7 -= ((int) (l1));
                            i5 += i10;
                            fArr1[i6] = i10;
                            if (false) {
                                i5 = i5;
                                Test.fFld = i8;
                                switch (((i8 % 2) * 5) + 13) {
                                    case 23 :
                                        Test.fFld *= i9;
                                        i10 += ((int) (Test.instanceCount));
                                        s = ((short) (i8));
                                        break;
                                    case 17 :
                                        i7 <<= 3;
                                        break;
                                    default :
                                        if (i6 != 0) {
                                            vMeth_check_sum += ((((((((((((l1 + i3) + i4) + i5) + by) + i6) + i7) + i8) + i9) + i10) + s) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(bArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                                            return;
                                        }
                                }
                            } else {
                                Test.bFld = Test.bFld;
                                vMeth_check_sum += ((((((((((((l1 + i3) + i4) + i5) + by) + i6) + i7) + i8) + i9) + i10) + s) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(bArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                                return;
                            }
                        }
                    }
            }
        } while ((++i3) < 150 );
        vMeth_check_sum += ((((((((((((l1 + i3) + i4) + i5) + by) + i6) + i7) + i8) + i9) + i10) + s) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(bArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static int iMeth(int i2, long l) {
        int i12 = -41526;
        int i13 = -177;
        int i14 = -13;
        int i15 = -8;
        int i16 = 38;
        int i17 = 21939;
        int i18 = -5;
        int i19 = -11632;
        int iArr[] = new int[N];
        short s1 = 26947;
        double d = 0.18714;
        boolean bArr1[] = new boolean[N];
        long lArr1[] = new long[N];
        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(bArr1, false);
        FuzzerUtils.init(lArr1, 4060464866L);
        i2 += --i2;
        {
            final boolean ax$42 = Test.bFld;
            final int ax$43 = i12;
            final int ax$44 = i14;
            try {
                long[] ax$34 = new long[60];
                long[] ax$37 = new long[]{ 4257203805232848877L, -7698515772546458444L, 5988801241549819944L };
                String ax$39 = "s";
                for (int ax$33 = -745; ax$33 < (-745 + 12537); ax$33 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$37[i12] = ((long) (ax$34[i12] << i14));
                    } catch (Throwable ax$38) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$28 = true;
                    vMeth(6009227077465256474L);
                    Test.ax$28 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (bFld) {
                            ax$39 = "\\" + ax$39;
                        }
                    } catch (Throwable ax$41) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                Test.bFld = ax$42;
                i12 = ax$43;
                i14 = ax$44;
            }
        }
        vMeth(l);
        for (int i11 : iArr) {
            i11 >>= ((int) (Test.instanceCount));
            i11 = i11;
            i11 -= ((int) (Test.fFld));
            i2 *= i2;
            for (i12 = 2; i12 > 1; --i12) {
                i13 = s1;
                i2 += (-8) + (i12 * i12);
                if (i11 != 0) {
                }
            }
            for (i14 = 1; i14 < 2; i14++) {
                if (Test.bFld)
                    continue;

                i13 &= ((int) (l));
            }
            for (i16 = 1; i16 < 2; ++i16) {
                if (i16 != 0) {
                }
                bArr1[i16 + 1] = Test.bFld;
                switch ((i16 % 4) + 120) {
                    case 120 :
                        lArr1 = lArr1;
                        i2 += i16 ^ i13;
                        for (i18 = i16; i18 < 2; i18++) {
                            i11 += i18;
                        }
                        Test.fFld += i19;
                        iArr[i16] += i16;
                        i2 += i2;
                        iArr[i16] = ((int) (d));
                        i15 = s1;
                        bArr1[i16] = Test.bFld;
                        i19 = i15;
                        break;
                    case 121 :
                        iArr[i16 + 1] <<= i11;
                        i19 += ((i16 * i15) + i11) - i17;
                        Test.instanceCount += i16 * i16;
                        l = 49026;
                        break;
                    case 122 :
                        lArr1[i16 + 1] *= i18;
                        bArr1 = FuzzerUtils.boolean1array(N, ((boolean) (true)));
                        break;
                    case 123 :
                        {
                            final int ax$9 = i14;
                            try {
                                SelectionKey ax$3 = null;
                                boolean ax$1 = false;
                                for (int ax$0 = -669; ax$0 < (-669 + 8800); ax$0 += 1) {
                                    Test.AxOutputRedirectionHelper.redirect();
                                    try {
                                        if (ax$3.isWritable()) {
                                            i14++;
                                            if (i14 > 10);
                                            Thread.sleep(250);
                                        }
                                    } catch (Throwable ax$4) {
                                    } finally {
                                    }
                                    Test.AxOutputRedirectionHelper.recover();
                                    if (!ax$1) {
                                        i15 >>= -81;
                                        ax$1 = true;
                                    }
                                    Test.AxOutputRedirectionHelper.redirect();
                                    try {
                                        if (i14 <= 9) {
                                            i14 += (i14 ^ 15) + (i14 != 0 ? 0 : i14);
                                            i14 = i14;
                                        }
                                    } catch (Throwable ax$8) {
                                    } finally {
                                    }
                                    Test.AxOutputRedirectionHelper.recover();
                                }
                            } finally {
                                i14 = ax$9;
                            }
                        }
                        d *= i19;
                }
            }
        }
        long meth_res = (((((((((((((i2 + l) + i12) + i13) + s1) + i14) + i15) + i16) + i17) + i18) + i19) + Double.doubleToLongBits(d)) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(bArr1)) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static long lMeth() {
        int i1 = -13;
        int i20 = -59695;
        int i21 = 0;
        int i22 = -59453;
        int i23 = -112;
        int iArr1[] = new int[N];
        double d1 = 1.14519;
        double dArr[][] = new double[N][N];
        float f = -55.77F;
        float f1 = 1.258F;
        short s2 = 13633;
        FuzzerUtils.init(iArr1, 3);
        FuzzerUtils.init(dArr, -71.5507);
        i1 *= ((int) ((2.997F * iMeth(i1, Test.instanceCount)) * d1));
        for (i20 = 6; i20 < 118; i20++) {
            for (f = 5; f > 1; f--) {
                i1 >>= i22;
                for (f1 = 1; f1 < 2; ++f1) {
                    i22 = i20;
                    iArr1[((int) (f - 1))] = i1;
                    switch ((((i22 >>> 1) % 1) * 5) + 21) {
                        case 26 :
                            Test.instanceCount -= ((long) (f));
                            i23 = i1;
                            i1 += ((int) (f1));
                            Test.instanceCount += ((long) (((f1 * i1) + Test.instanceCount) - i1));
                            Test.byFld -= ((byte) (i22));
                            i1 ^= ((int) (3L));
                            d1 *= 101;
                            i21 >>= ((int) (Test.instanceCount));
                            i1 -= i22;
                            s2 += ((short) (((long) (f1)) ^ i23));
                            iArr1[((int) (f - 1))] += i21;
                        default :
                            i23 += 5;
                            iArr1[((int) (f - 1))] <<= i22;
                            Test.instanceCount += ((long) (((f1 * i23) + Test.instanceCount) - f1));
                            Test.bFld = Test.bFld;
                            i23 += ((int) (f));
                            i21 = i22;
                            dArr[((int) (f1))][((int) (f - 1))] = i23;
                            i23 = 17850;
                            i22 += ((int) (f1));
                            Test.instanceCount = i22;
                            if (i20 != 0) {
                            }
                            switch (((int) ((f1 % 8) + 118))) {
                                case 118 :
                                    i23 += ((int) (f1));
                                    {
                                        try {
                                            File ax$11 = new File(".\\StopCs.txt");
                                            for (int ax$10 = -282; ax$10 < (-282 + 2395); ax$10 += 1) {
                                                Test.AxOutputRedirectionHelper.redirect();
                                                try {
                                                    if (ax$11.length() == 0) {
                                                    }
                                                } catch (Throwable ax$12) {
                                                } finally {
                                                }
                                                Test.AxOutputRedirectionHelper.recover();
                                            }
                                        } finally {
                                        }
                                    }
                                    i22 = ((int) (Test.instanceCount));
                                case 119 :
                                    i21 += ((int) (((f1 * i1) + Test.instanceCount) - i20));
                                    iArr1[((int) (f))] = i20;
                                    Test.instanceCount += ((long) (f1));
                                    i1 -= ((int) (f));
                                case 120 :
                                    iArr1[((int) (f1))] -= i23;
                                case 121 :
                                    i21 <<= i21;
                                    break;
                                case 122 :
                                    i21 += ((int) (f1 - Test.instanceCount));
                                    break;
                                case 123 :
                                    i1 -= 7;
                                    break;
                                case 124 :
                                    if (i21 != 0) {
                                    }
                                case 125 :
                            }
                    }
                }
            }
        }
        long meth_res = (((((((((i1 + Double.doubleToLongBits(d1)) + i20) + i21) + Float.floatToIntBits(f)) + i22) + Float.floatToIntBits(f1)) + i23) + s2) + FuzzerUtils.checkSum(iArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return ((long) (meth_res));
    }

    public void mainTest(String[] strArr1) {
        int i = 97;
        int i24 = -251;
        int i25 = -26239;
        int i26 = 2;
        int i27 = 3;
        int i28 = 17422;
        int i29 = -48747;
        int i30 = 33186;
        double d2 = -69.14708;
        double dArr1[] = new double[N];
        float f2 = -2.513F;
        float f3 = -2.697F;
        float fArr[] = new float[N];
        long l2 = -8L;
        long lArr2[] = new long[N];
        short sArr[] = new short[N];
        FuzzerUtils.init(fArr, 46.347F);
        FuzzerUtils.init(lArr2, 46589L);
        FuzzerUtils.init(sArr, ((short) (10826)));
        FuzzerUtils.init(dArr1, 0.98285);
        i += ((int) (i - (-(-(i % 1.95F)))));
        Test.fFld = i--;
        fArr[(i >>> 1) % N] = ((float) (Double.longBitsToDouble(lMeth())));
        Test.iArrFld[((-137) >>> 1) % N] += i;
        Test.iArrFld[(i >>> 1) % N] = Test.byFld;
        Test.bFld = Test.bFld;
        {
            final int ax$27 = i24;
            try {
                String[] ax$20 = new String[]{ "6", "3", "2", "1", "1", "-1", "-1", "-2", "-3", "-6", "6", "-6", "6", "-6", "1", "-1", "5", "-5", "5", "-5" };
                String ax$24 = "s";
                BigDecimal ax$25 = null;
                boolean ax$19 = false;
                for (int ax$18 = -380; ax$18 < (-380 + 7878); ax$18 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        InetAddress ax$22 = InetAddress.getByName(ax$20[i24]);
                        if (!ax$22.isLinkLocalAddress()) {
                        } else {
                        }
                    } catch (Throwable ax$23) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    if (!ax$19) {
                        i = i;
                        ax$19 = true;
                    }
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (!ax$25.equals(new BigDecimal(ax$24)));
                    } catch (Throwable ax$26) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i24 = ax$27;
            }
        }
        Test.instanceCount -= -47676L;
        for (i24 = 9; i24 < 240; i24++) {
            i <<= i;
            for (i26 = i24; i26 < 22; i26++) {
                i27 -= ((int) (Test.fFld));
                for (i28 = 1; 1 > i28; i28++) {
                    d2 -= i26;
                    lArr2[i24 - 1] += ((long) (d2));
                    Test.iArrFld[i24 + 1] <<= Test.byFld;
                    lArrFld = lArrFld;
                }
                d2 -= -121L;
                Test.instanceCount += i26;
                f2 = 1;
                do {
                    if (false)
                        break;

                    i25 *= ((int) (Test.fFld));
                    i29 >>= ((int) (Test.instanceCount));
                    switch ((i24 % 10) + 39) {
                        case 39 :
                            Test.bFld = Test.bFld;
                            i27 = i29;
                            i29 >>= ((int) (Test.instanceCount));
                            i29 *= ((int) (Test.instanceCount));
                            sFld = ((short) (i25));
                            i25 = i27;
                            Test.byFld = ((byte) (i28));
                            i /= ((int) (i25 | 1));
                            i25 -= i27;
                            Test.instanceCount -= ((long) (d2));
                            Test.iArrFld[i24] *= ((int) (Test.instanceCount));
                            i27 -= 20499;
                        case 40 :
                            Test.iArrFld[i26 - 1] = ((int) (Test.instanceCount));
                            sArr[i26 - 1] -= ((short) (i));
                            d2 = -1.679F;
                            i29 >>>= i29;
                            i29 |= ((int) (Test.instanceCount));
                            Test.fFld += ((f2 * Test.fFld) + i26) - i25;
                            i27 += ((int) (f2));
                            i = ((int) (Test.instanceCount));
                            i27 = i;
                            lArrFld[i26][((int) (f2))] += i25;
                            switch (((i25 >>> 1) % 5) + 5) {
                                case 5 :
                                    i29 += ((int) (((f2 * i27) + Test.fFld) - i));
                                    Test.bFld = Test.bFld;
                                    dArr1[(i25 >>> 1) % N] += -3;
                                    break;
                                case 6 :
                                    i = ((int) (d2));
                                    lArr2[i26 - 1] += -209;
                                    Test.fFld += ((float) (d2));
                                    i27 = i26;
                                    if (Test.bFld)
                                        continue;

                                    i29 += ((int) (f3));
                                    fArr = fArr;
                                    Test.fFld -= 29472;
                                    Test.bFld = Test.bFld;
                                    i29 <<= ((int) (-34291L));
                                    break;
                                case 7 :
                                    f3 -= ((float) (-1.90203));
                                case 8 :
                                    i27 += ((int) (f2 * f2));
                                    if (Test.bFld)
                                        break;

                                    break;
                                case 9 :
                                    Test.instanceCount *= sFld;
                                    i27 <<= i;
                                    i = i28;
                                    i29 = 30500;
                                    if (Test.bFld) {
                                        sFld = ((short) (i27));
                                        Test.instanceCount += ((long) (((f2 * i25) + f3) - i24));
                                        d2 = i27;
                                    } else {
                                        i27 += ((int) (-3654876302L));
                                        Test.byFld += ((byte) (4));
                                        i30 >>= -9;
                                        i27 = i29;
                                    }
                                    break;
                            }
                            break;
                        case 41 :
                        case 42 :
                            if (false)
                                break;

                            break;
                        case 43 :
                            i30 *= 187;
                        case 44 :
                            i25 = 35477;
                            break;
                        case 45 :
                            fArr[i26] = f3;
                            break;
                        case 46 :
                            lArr2[i24 - 1] = l2;
                            break;
                        case 47 :
                            l2 <<= Test.lFld;
                            break;
                        case 48 :
                            Test.instanceCount -= Test.lFld;
                            break;
                    }
                } while ((f2 -= 3) > 0 );
            }
        }
        FuzzerUtils.out.println((((("i i24 i25 = " + i) + ",") + i24) + ",") + i25);
        FuzzerUtils.out.println((((("i26 i27 i28 = " + i26) + ",") + i27) + ",") + i28);
        FuzzerUtils.out.println((((("i29 d2 f2 = " + i29) + ",") + Double.doubleToLongBits(d2)) + ",") + Float.floatToIntBits(f2));
        FuzzerUtils.out.println((((("f3 i30 l2 = " + Float.floatToIntBits(f3)) + ",") + i30) + ",") + l2);
        FuzzerUtils.out.println((((("fArr lArr2 sArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + ",") + FuzzerUtils.checkSum(lArr2)) + ",") + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("dArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount) + ",") + Float.floatToIntBits(Test.fFld)) + ",") + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println((((("Test.byFld sFld Test.lFld = " + Test.byFld) + ",") + sFld) + ",") + Test.lFld);
        FuzzerUtils.out.println((("Test.iArrFld lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        {
            try {
                Long ax$14 = 200000000002L;
                Long ax$15 = 5033911657134450073L;
                Long ax$16 = 8642002046698149348L;
                for (int ax$13 = -780; ax$13 < (-780 + 4594); ax$13 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$16 += ax$14;
                        ax$15 += ax$14 + 1;
                    } catch (Throwable ax$17) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$28 = false;
}