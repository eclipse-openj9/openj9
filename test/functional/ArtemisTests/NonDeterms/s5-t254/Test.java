// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.net.InetAddress;
import java.net.Socket;
import java.nio.channels.AsynchronousChannelGroup;
import java.nio.channels.AsynchronousSocketChannel;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 13L;

    public static int iFld = 10;

    public static double dFld = -103.39043;

    public static boolean bFld = true;

    public static volatile short sFld = 13549;

    public static volatile byte byFld = 53;

    public int iFld1 = 2;

    public static byte byFld1 = 15;

    public static int iArrFld[] = new int[N];

    public static volatile float fArrFld[] = new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 61);
        FuzzerUtils.init(Test.fArrFld, 58.908F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i4, long l) {
        l += ((long) (39.101259));
        long meth_res = i4 + l;
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static void vMeth1(int i2, int i3) {
        if (Test.ax$16) {
            final double ax$22 = Test.dFld;
            final boolean ax$21 = Test.bFld;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                bFld = true;
            } catch (Throwable ax$20) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.bFld = ax$21;
            Test.dFld = ax$22;
            return;
        }
        int i5 = 13;
        int i6 = 2;
        int i7 = -2;
        int i8 = -54;
        int i9 = 207;
        int i10 = 14;
        short s = 9899;
        short sArr[] = new short[N];
        long l1 = 164L;
        long lArr[] = new long[N];
        float fArr1[] = new float[N];
        double dArr[] = new double[N];
        FuzzerUtils.init(sArr, ((short) (-9835)));
        FuzzerUtils.init(fArr1, -99.878F);
        FuzzerUtils.init(lArr, -15971L);
        FuzzerUtils.init(dArr, -24.43399);
        i2 = (Test.iArrFld[(i2 >>> 1) % N] -= i3) + (Test.iArrFld[((-6) >>> 1) % N] + (-iMeth(i2, Test.instanceCount)));
        for (i5 = 2; i5 < 134; ++i5) {
            Test.iFld &= ((int) (-100L));
            i6 += ((i5 * i5) + s) - Test.iFld;
            sArr[i5 - 1] = ((short) (Test.instanceCount));
            for (l1 = 1; l1 < 4; l1++) {
                i3 += ((int) (l1 + i2));
                Test.instanceCount -= -113;
                Test.instanceCount >>= l1;
                i2 += ((int) (l1));
                Test.dFld += i3;
                Test.instanceCount *= i6;
            }
            fArr1[i5 + 1] *= l1;
            i6 *= i7;
            for (i8 = 4; i8 > 1; i8 -= 3) {
                switch ((i8 % 4) + 35) {
                    case 35 :
                    case 36 :
                        Test.bFld = true;
                    case 37 :
                        i3 += i2;
                        Test.dFld += i9;
                        lArr[i5] *= i5;
                        i6 += (-9) + (i8 * i8);
                        i6 += i9;
                        Test.instanceCount = ((long) (Test.dFld));
                        Test.instanceCount += 106L;
                        Test.instanceCount += 0;
                        i10 <<= i9;
                        Test.instanceCount += 53;
                    case 38 :
                        i6 += i8 ^ l1;
                        Test.instanceCount += i7;
                        Test.iArrFld[i5 - 1] -= ((int) (l1));
                        Test.bFld = false;
                        i2 = Test.iFld;
                        i7 -= i7;
                        dArr[i5] = 40994;
                        i6 += ((int) ((-1196540398L) + (i8 * i8)));
                        i3 <<= i7;
                        break;
                }
                Test.dFld /= 19237;
            }
        }
        vMeth1_check_sum += ((((((((((((i2 + i3) + i5) + i6) + s) + l1) + i7) + i8) + i9) + i10) + FuzzerUtils.checkSum(sArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(boolean b) {
        int i1 = -29523;
        int i11 = -17;
        int i12 = -211;
        int i13 = 198;
        int i14 = 122;
        int i15 = -73;
        int i16 = -4;
        int i17 = 8;
        int i18 = 2;
        int i19 = -9;
        int i20 = 1;
        double d = 0.123084;
        byte by = -109;
        float f = -69.745F;
        float fArr[][] = new float[N][N];
        long lArr1[] = new long[N];
        FuzzerUtils.init(fArr, 1.368F);
        FuzzerUtils.init(lArr1, -204L);
        fArr[(38450 >>> 1) % N][(Test.iFld >>> 1) % N] += ((Test.instanceCount + 8.376F) + Test.iFld) + ((--fArr[((-10) >>> 1) % N][(Test.iFld >>> 1) % N]) - ((-8) - Math.min(Test.iFld, i1)));
        {
            final int ax$32 = i13;
            try {
                InetAddress ax$27 = null;
                for (int ax$23 = -656; ax$23 < (-656 + 2197); ax$23 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        Object ax$24 = Array.newInstance(Short.TYPE, 1);
                        Array.setShort(ax$24, 0, ((short) (-1)));
                        if (Array.getInt(ax$24, 0) != (-1)) {
                        }
                        Short ax$25 = ((Short) (Array.get(ax$24, 0)));
                    } catch (Throwable ax$26) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$16 = true;
                    vMeth1(-1954895241, -1166215601);
                    Test.ax$16 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        try {
                            Socket ax$29 = new Socket(ax$27, i13);
                        } catch (Exception ax$30) {
                        }
                    } catch (Throwable ax$31) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i13 = ax$32;
            }
        }
        vMeth1(i1, Test.iFld);
        i1 += ((int) (Test.instanceCount));
        if (b) {
            i1 -= Test.iFld;
            for (i11 = 10; i11 < 162; ++i11) {
                Test.iFld *= ((int) (Test.instanceCount));
                i12 = ((int) (2488L));
                i1 &= i1;
                d = 1;
                do {
                    i12 &= ((int) (Test.instanceCount));
                    i1 += ((int) (d));
                    Test.bFld = b;
                } while ((++d) < 4 );
                for (i13 = 1; i13 < 4; i13 += 2) {
                    Test.iFld += Test.sFld;
                    i12 *= i11;
                    Test.instanceCount %= i13 | 1;
                    i12 ^= i12;
                }
                Test.dFld = Test.instanceCount;
                Test.iFld >>= i11;
            }
            Test.iFld = Test.iFld;
            switch (((i1 >>> 1) % 2) + 127) {
                case 127 :
                    b = b;
                    Test.iArrFld = Test.iArrFld;
                    for (i15 = 9; 236 > i15; i15++) {
                        for (i17 = i15; i17 < 3; i17 += 2) {
                            Test.iArrFld[i15 - 1] = i17;
                            switch ((i17 % 10) + 69) {
                                case 69 :
                                    i1 *= 31660;
                                case 70 :
                                    for (i19 = i17; i19 < 1; ++i19) {
                                        i14 += ((int) (d));
                                        i12 = 90;
                                        Test.iFld = i12;
                                        i12 += by;
                                        i14 = ((int) (Test.instanceCount));
                                        Test.iArrFld[i19 - 1] += ((int) (f));
                                        i16 = i12;
                                    }
                                    break;
                                case 71 :
                                    if (b)
                                        break;

                                    break;
                                case 72 :
                                    Test.iFld |= i16;
                                    break;
                                case 73 :
                                    Test.instanceCount += i17 * i17;
                                    break;
                                case 74 :
                                    i20 -= i14;
                                    break;
                                case 75 :
                                    i18 >>= -36;
                                    break;
                                case 76 :
                                case 77 :
                                    Test.sFld += ((short) (i17));
                                    break;
                                case 78 :
                                    Test.bFld = Test.bFld;
                                    break;
                            }
                        }
                    }
                    break;
                case 128 :
                    Test.iArrFld[((-159) >>> 1) % N] = i16;
                default :
                    i16 -= -5;
            }
        } else if (Test.bFld) {
            Test.iFld -= i11;
        }
        vMeth_check_sum += ((((((((((((((((b ? 1 : 0) + i1) + i11) + i12) + Double.doubleToLongBits(d)) + i13) + i14) + i15) + i16) + i17) + i18) + i19) + i20) + by) + Float.floatToIntBits(f)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {
        int i = 65;
        int i21 = -86;
        int i22 = -1093;
        int i23 = -249;
        int i24 = 4;
        int i25 = -201;
        int i26 = 13194;
        int i27 = 129;
        float f1 = -12.263F;
        byte byArr[] = new byte[N];
        double dArr1[][] = new double[N][N];
        long lArr2[] = new long[N];
        FuzzerUtils.init(byArr, ((byte) (86)));
        FuzzerUtils.init(dArr1, 105.30135);
        FuzzerUtils.init(lArr2, 6L);
        i = 1;
        do {
            vMeth(true);
            byArr = byArr;
            Test.instanceCount += i - Test.iFld;
            Test.iFld = 1;
            Test.iFld = Test.iFld;
            i21 = 1;
            while ((++i21) < 37) {
                Test.instanceCount *= i21;
                for (i22 = i; i22 < 1; ++i22) {
                    dArr1[i22][i21 - 1] = i22;
                    Test.instanceCount += i22;
                    Test.iFld += i22;
                }
                for (i24 = i; 1 > i24; i24++) {
                    i23 -= ((int) (Test.instanceCount));
                    switch (((i % 6) * 5) + 124) {
                        case 154 :
                            Test.iFld *= 43652;
                            f1 += Test.instanceCount;
                            Test.instanceCount = i22;
                        case 148 :
                            lArr2[i21] >>>= Test.sFld;
                            Test.instanceCount += Test.byFld;
                            Test.instanceCount = i24;
                            i25 += -10;
                            Test.dFld -= -17386;
                            try {
                                Test.iArrFld[i24 - 1] = i25 / 62;
                                i23 = Test.iArrFld[i - 1] % i25;
                                i25 = i23 % i22;
                            } catch (ArithmeticException a_e) {
                            }
                            Test.instanceCount += i24;
                            Test.iArrFld[i + 1] += -63746;
                            Test.iFld += i24 - Test.instanceCount;
                            f1 = -104;
                            break;
                        case 144 :
                            i23 += i24;
                        case 135 :
                            Test.sFld = ((short) (i));
                            i25 >>= i25;
                            Test.instanceCount = i;
                            Test.iArrFld[i] -= i;
                            Test.bFld = Test.bFld;
                            Test.iFld = i25;
                            break;
                        case 140 :
                            if (Test.bFld)
                                break;

                            i25 = Test.sFld;
                            Test.instanceCount = -131L;
                            i23 ^= i21;
                            i26 = i;
                            Test.iFld *= ((int) (Test.dFld));
                            i23 += ((int) (f1));
                            switch ((i % 3) + 110) {
                                case 110 :
                                    switch (((i24 % 2) * 5) + 26) {
                                        case 34 :
                                            if (Test.bFld)
                                                break;

                                            i25 = i26;
                                            Test.iFld /= ((int) (iFld1 | 1));
                                            switch ((((i24 >>> 1) % 1) * 5) + 27) {
                                                case 31 :
                                                    Test.iArrFld[(i >>> 1) % N] <<= ((int) (Test.instanceCount));
                                                    i26 -= i;
                                                    Test.iFld += ((int) (5L));
                                                    i25 -= ((int) (Test.instanceCount));
                                                    i25 += ((i24 * iFld1) + i21) - Test.instanceCount;
                                                    Test.instanceCount += i24 ^ i21;
                                                    Test.fArrFld[i24 + 1] -= Test.instanceCount;
                                                    break;
                                            }
                                            i25 += ((int) (f1));
                                            iFld1 = i;
                                            f1 = 2;
                                            if (Test.bFld) {
                                                Test.iArrFld[i21 - 1] = iFld1;
                                                {
                                                    final int ax$11 = Test.iFld;
                                                    final long ax$12 = Test.instanceCount;
                                                    final int ax$13 = i21;
                                                    final int ax$14 = i;
                                                    final int ax$15 = i24;
                                                    try {
                                                        AsynchronousChannelGroup ax$2 = null;
                                                        boolean ax$1 = false;
                                                        for (int ax$0 = -730; ax$0 < (-730 + 8570); ax$0 += 1) {
                                                            Test.AxOutputRedirectionHelper.redirect();
                                                            try {
                                                                AsynchronousSocketChannel.open(ax$2);
                                                            } catch (Throwable ax$3) {
                                                            } finally {
                                                            }
                                                            Test.AxOutputRedirectionHelper.recover();
                                                            if (!ax$1) {
                                                                Test.byFld1 += ((byte) (-59511));
                                                                ax$1 = true;
                                                            }
                                                            Test.AxOutputRedirectionHelper.redirect();
                                                            try {
                                                                for (iFld = 11; iFld < 188; ++iFld) {
                                                                    for (iFld = 2; iFld > 1; iFld--) {
                                                                        i += iFld;
                                                                        instanceCount = i;
                                                                    }
                                                                    for (i21 = 1; i21 < 2; ++i21) {
                                                                        i24 += iFld;
                                                                    }
                                                                }
                                                            } catch (Throwable ax$10) {
                                                            } finally {
                                                            }
                                                            Test.AxOutputRedirectionHelper.recover();
                                                        }
                                                    } finally {
                                                        Test.iFld = ax$11;
                                                        Test.instanceCount = ax$12;
                                                        i21 = ax$13;
                                                        i = ax$14;
                                                        i24 = ax$15;
                                                    }
                                                }
                                                i25 = iFld1;
                                                Test.instanceCount >>= i;
                                                lArr2[i24] -= i25;
                                                i26 += i24 + i21;
                                                i26 >>= Test.sFld;
                                                Test.iArrFld[i] <<= i23;
                                                i23 *= 19;
                                                Test.instanceCount = i22;
                                                Test.dFld = i22;
                                                i25 -= i26;
                                                iFld1 += i24 * i22;
                                                dArr1[i24][i] *= Test.iFld;
                                            } else if (Test.bFld) {
                                                i25 += ((int) (Test.instanceCount));
                                                Test.iArrFld[i24 + 1] += 148;
                                            } else {
                                                Test.iFld &= i22;
                                            }
                                            break;
                                        case 29 :
                                            iFld1 += i24;
                                            break;
                                        default :
                                            Test.instanceCount += ((i24 * f1) + Test.instanceCount) - Test.instanceCount;
                                    }
                                    break;
                                case 111 :
                                    f1 /= Test.instanceCount | 1;
                                    break;
                                case 112 :
                                    Test.instanceCount -= i22;
                                    break;
                            }
                            break;
                        case 153 :
                            Test.bFld = false;
                        default :
                            i25 -= i27;
                    }
                }
            }
        } while ((++i) < 136 );
        FuzzerUtils.out.println((((("i i21 i22 = " + i) + ",") + i21) + ",") + i22);
        FuzzerUtils.out.println((((("i23 i24 i25 = " + i23) + ",") + i24) + ",") + i25);
        FuzzerUtils.out.println((((("f1 i26 i27 = " + Float.floatToIntBits(f1)) + ",") + i26) + ",") + i27);
        FuzzerUtils.out.println((((("byArr dArr1 lArr2 = " + FuzzerUtils.checkSum(byArr)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1))) + ",") + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println((((("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount) + ",") + Test.iFld) + ",") + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println((((("Test.bFld Test.sFld Test.byFld = " + (Test.bFld ? 1 : 0)) + ",") + Test.sFld) + ",") + Test.byFld);
        FuzzerUtils.out.println((((("iFld1 Test.byFld1 Test.iArrFld = " + iFld1) + ",") + Test.byFld1) + ",") + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$16 = false;
}