// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.concurrent.atomic.AtomicIntegerArray;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 2125040008L;

    public static volatile double dFld = 106.81285;

    public static volatile int iFld = 36;

    public short sFld = -13816;

    public static int iArrFld[] = new int[N];

    public short sArrFld[] = new short[N];

    public int iArrFld1[][] = new int[N][N];

    public static byte byArrFld[] = new byte[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 59113);
        FuzzerUtils.init(Test.byArrFld, ((byte) (-77)));
    }

    public static long lMeth_check_sum = 0;

    public static long lMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth() {
        byte by = 43;
        byte byArr[] = new byte[N];
        float f = 1.137F;
        float fArr[] = new float[N];
        int i6 = 0;
        int i7 = -67;
        int i8 = -136;
        int i9 = 16760;
        int i10 = -55393;
        int iArr[] = new int[N];
        long l1 = -130390930L;
        long lArr[] = new long[N];
        boolean b = true;
        short s = -11275;
        FuzzerUtils.init(fArr, 2.2F);
        FuzzerUtils.init(iArr, 13791);
        FuzzerUtils.init(lArr, -219L);
        FuzzerUtils.init(byArr, ((byte) (-94)));
        Test.instanceCount *= Test.instanceCount;
        by *= ((byte) (f));
        i6 <<= i6;
        for (l1 = 2; l1 < 118; ++l1) {
            for (i8 = 1; i8 < 5; i8++) {
                i10 = 2;
                do {
                    switch (((i8 % 2) * 5) + 22) {
                        case 31 :
                            i7 = i9;
                            i6 = i8;
                            i7 += by;
                            fArr[i10] = ((float) (Test.dFld));
                            i7 -= -5;
                            Test.instanceCount -= -98;
                            switch ((i8 % 7) + 115) {
                                case 115 :
                                    by >>= ((byte) (i10));
                                    fArr[i10 + 1] = -38922;
                                    i9 += i6;
                                    i6 += (-158) + (i10 * i10);
                                    iArr[((int) (l1 + 1))] -= i7;
                                    i9 -= i8;
                                    i6 += ((int) (f));
                                    if (b)
                                        break;

                                    Test.instanceCount = i8;
                                    i7 |= i9;
                                    Test.instanceCount = i9;
                                    break;
                                case 116 :
                                    iArr[i8] = i6;
                                    Test.instanceCount = 179L;
                                    f = i8;
                                    f += ((i10 * i6) + i8) - s;
                                    Test.instanceCount <<= i8;
                                    lArr = lArr;
                                    lArr[((int) (l1 + 1))] -= i9;
                                    iArr[i8] ^= i6;
                                    i9 >>= i9;
                                    byArr[((int) (l1))] ^= ((byte) (i10));
                                    f = i6;
                                    if (true)
                                        continue;

                                    break;
                                case 117 :
                                    i9 = i7;
                                    break;
                                case 118 :
                                    i7 += -16164;
                                    break;
                                case 119 :
                                    i9 *= ((int) (4042543993L));
                                case 120 :
                                    Test.instanceCount -= i10;
                                case 121 :
                                    i6 = i10;
                                    break;
                                default :
                                    by *= ((byte) (228));
                            }
                            break;
                        case 24 :
                            i9 += ((i10 * i8) + i10) - i8;
                            break;
                        default :
                            Test.dFld += l1;
                    }
                } while ((--i10) > 0 );
            }
        }
        long meth_res = ((((((((((((by + Float.floatToIntBits(f)) + i6) + l1) + i7) + i8) + i9) + i10) + (b ? 1 : 0)) + s) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static long lMeth1(long l, int i3, int i4) {
        int i5 = -230;
        int i11 = 39346;
        int i12 = -248;
        int i13 = -16259;
        int iArr1[] = new int[N];
        boolean b1 = true;
        float f1 = -46.126F;
        short s1 = -17704;
        short sArr[] = new short[N];
        byte by1 = 17;
        FuzzerUtils.init(sArr, ((short) (8580)));
        FuzzerUtils.init(iArr1, -15999);
        i5 = 1;
        do {
            i3 >>= iMeth();
            for (i11 = 3; i11 > 1; --i11) {
                i12 = ((int) (-13L));
                Test.instanceCount <<= l;
                if (true) {
                    i3 -= i5;
                    i12 = i4;
                    i3 |= ((int) (Test.instanceCount));
                    i13 = 1;
                    while ((++i13) < 2) {
                        if (b1)
                            continue;

                        i4 ^= ((int) (l));
                        i4 = ((int) (f1));
                        l += ((long) (-64.78F));
                        b1 = b1;
                        i3 -= 86;
                        i12 = i12;
                        i3 += i12;
                        i12 = i5;
                        l <<= s1;
                        b1 = b1;
                        sArr[i11 + 1] ^= ((short) (i3));
                        i12 += s1;
                        switch (((i13 % 2) * 5) + 24) {
                            case 26 :
                                f1 -= i5;
                                by1 -= ((byte) (5));
                                iArr1[i5 - 1] &= by1;
                                switch ((((i11 >>> 1) % 1) * 5) + 117) {
                                    case 119 :
                                        iArr1[i5 - 1] = i12;
                                        i3 -= by1;
                                        break;
                                    default :
                                        i12 *= ((int) (l));
                                        l += i13 * i13;
                                        iArr1[i11] >>= i11;
                                        i12 += i5;
                                        f1 += i13 + i3;
                                        i3 -= ((int) (f1));
                                        l -= i3;
                                }
                                break;
                            case 34 :
                                i12 <<= 11;
                                break;
                            default :
                                iArr1[i5 + 1] <<= i12;
                        }
                    }
                }
            }
        } while ((++i5) < 211 );
        long meth_res = (((((((((((l + i3) + i4) + i5) + i11) + i12) + i13) + (b1 ? 1 : 0)) + Float.floatToIntBits(f1)) + s1) + by1) + FuzzerUtils.checkSum(sArr)) + FuzzerUtils.checkSum(iArr1);
        lMeth1_check_sum += meth_res;
        return ((long) (meth_res));
    }

    public static long lMeth() {
        if (Test.ax$0) {
            int[] ax$1 = new int[]{ 7 };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$1[0] = 1;
                ax$1[1] = 1;
            } catch (Throwable ax$2) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return 4358642677114423792L;
        }
        int i = -167;
        int i1 = 23;
        int i2 = 26196;
        int i14 = 144;
        int i15 = 52636;
        int i16 = 2419;
        int i17 = 41648;
        int i18 = -56733;
        short s2 = -31815;
        float f2 = 0.933F;
        byte by2 = 126;
        byte byArr1[][] = new byte[N][N];
        long lArr1[] = new long[N];
        FuzzerUtils.init(byArr1, ((byte) (-34)));
        FuzzerUtils.init(lArr1, 923847152L);
        i = 1;
        while ((++i) < 186) {
            for (i1 = 1; i1 < 3; ++i1) {
                boolean b2 = true;
                i2 -= ((int) (lMeth1(Test.instanceCount, i, i1)));
                i2 >>= ((int) (Test.instanceCount));
                s2 = ((short) (i2));
                switch (((i1 >>> 1) % 8) + 58) {
                    case 58 :
                        b2 = b2;
                        try {
                            i2 = i / 97;
                            i2 = i2 / (-37421);
                            i2 = Test.iArrFld[i + 1] % (-225);
                        } catch (ArithmeticException a_e) {
                        }
                        i2 = i2;
                        Test.instanceCount -= i;
                        i2 -= i;
                        for (i14 = 1; 2 > i14; i14++) {
                            i2 -= ((int) (Test.instanceCount));
                            byArr1 = byArr1;
                            Test.instanceCount = i1;
                            i2 *= i15;
                            i15 += i14 - i15;
                            s2 = ((short) (i14));
                            Test.iArrFld = Test.iArrFld;
                            Test.dFld = i14;
                            Test.iArrFld = FuzzerUtils.int1array(N, ((int) (0)));
                            i2 = ((int) (Test.instanceCount));
                        }
                        i15 = ((int) (Test.instanceCount));
                        i2 = 10;
                        Test.dFld = i2;
                        i2 = i2;
                        for (i16 = 1; 2 > i16; i16++) {
                            Test.iArrFld[i + 1] &= i;
                            Test.iArrFld[i16 + 1] += i1;
                            if (false) {
                                i17 += i16;
                                switch (((i >>> 1) % 1) + 28) {
                                    case 28 :
                                        i2 += i16;
                                        lArr1[i16] <<= i1;
                                        s2 += ((short) (i16));
                                        f2 = Test.instanceCount;
                                        f2 = 20001L;
                                    default :
                                        i15 *= ((int) (f2));
                                }
                            }
                        }
                        break;
                    case 59 :
                        i15 -= ((int) (f2));
                        break;
                    case 60 :
                    case 61 :
                        f2 += i1 * i1;
                    case 62 :
                        by2 += ((byte) (i1 * i1));
                    case 63 :
                        Test.iArrFld[i1 - 1] &= i1;
                        break;
                    case 64 :
                        if (b2)
                            continue;

                        break;
                    case 65 :
                        i15 += i18;
                    default :
                        if (b2)
                            break;

                }
            }
        }
        long meth_res = (((((((((((i + i1) + i2) + s2) + i14) + i15) + i16) + i17) + Float.floatToIntBits(f2)) + by2) + i18) + FuzzerUtils.checkSum(byArr1)) + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return ((long) (meth_res));
    }

    public void mainTest(String[] strArr1) {
        int i20 = -78;
        int i21 = 1;
        int i22 = 0;
        int i23 = -3;
        int i24 = 9;
        int i25 = 215;
        int i26 = 9;
        int i27 = 11;
        int i28 = -48581;
        byte by3 = 80;
        boolean b3 = false;
        float f3 = 95.842F;
        float f4 = 0.831F;
        long lArr2[] = new long[N];
        double dArr[] = new double[N];
        FuzzerUtils.init(lArr2, -56016L);
        FuzzerUtils.init(dArr, -1.97846);
        {
            final int ax$12 = i24;
            try {
                double[] ax$4 = new double[1];
                AtomicIntegerArray ax$8 = null;
                AtomicIntegerArray ax$9 = null;
                for (int ax$3 = -622; ax$3 < (-622 + 19784); ax$3 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$5 = 0; ax$5 < ax$4.length; ax$5++) {
                            ax$4[ax$5] = ax$4[20] + 2;
                        }
                    } catch (Throwable ax$6) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    lMeth();
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$10 = 0; ax$10 < i24; ax$10 += 1) {
                            ax$8.set(ax$10, ax$9.get(ax$10));
                        }
                    } catch (Throwable ax$11) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i24 = ax$12;
            }
        }
        lMeth();
        for (int i19 : Test.iArrFld) {
            for (i20 = 1; i20 < 20; ++i20) {
                lArr2[i20 + 1] += Test.instanceCount;
                by3 >>= ((byte) (43));
                i19 <<= i21;
                for (i22 = 1; i22 < 2; ++i22) {
                    i21 |= i19;
                    lArr2[i22] -= Test.instanceCount;
                }
                Test.instanceCount <<= Test.instanceCount;
                i23 -= i19;
                i23 = -76;
                by3 = ((byte) (Test.instanceCount));
                Test.dFld = -5;
                i19 *= i20;
                Test.iArrFld[i20] *= i22;
                switch ((((i21 >>> 1) % 2) * 5) + 50) {
                    case 56 :
                        i23 += ((int) (1L));
                        sArrFld[i20 - 1] += ((short) (i19));
                        b3 = b3;
                        i19 = i22;
                        i19 -= ((int) (f3));
                        i24 = 1;
                        while ((++i24) < 2) {
                            try {
                                i23 = 149 % i22;
                                i23 = i24 / i24;
                                i21 = 2855 / i21;
                            } catch (ArithmeticException a_e) {
                            }
                        }
                        i23 += ((i20 * i22) + i24) - i22;
                        break;
                    case 58 :
                        Test.instanceCount += i20;
                        for (i25 = 1; i25 < 2; i25++) {
                            Test.dFld -= f3;
                            switch (((i25 % 9) * 5) + 5) {
                                case 34 :
                                    Test.dFld = 40080;
                                    Test.iFld += i19;
                                    Test.iArrFld[i20 - 1] -= i22;
                                    dArr[i20] = i25;
                                    i26 ^= Test.iFld;
                                    i26 %= ((int) (((long) (Test.dFld)) | 1));
                                    iArrFld1 = FuzzerUtils.int2array(N, ((int) (-11)));
                                    switch (((i20 % 1) * 5) + 93) {
                                        case 94 :
                                            Test.iFld = ((int) (Test.instanceCount));
                                            f4 = Test.instanceCount;
                                            i23 = by3;
                                            Test.iFld = i22;
                                            f3 = i20;
                                            i23 += i25;
                                            b3 = b3;
                                            Test.iFld += i25 * i25;
                                            break;
                                        default :
                                            i26 >>= ((int) (-4413105468546266690L));
                                            Test.iArrFld[i20] = Test.iFld;
                                            sFld -= ((short) (i22));
                                    }
                                    i21 += ((i25 * Test.iFld) + i26) - Test.instanceCount;
                                    if (b3) {
                                        Test.dFld -= Test.dFld;
                                        Test.iFld <<= i27;
                                        i27 = i23;
                                        Test.iFld -= i21;
                                        i21 += i25 | i22;
                                        i23 += -204;
                                        switch (((i24 >>> 1) % 4) + 92) {
                                            case 92 :
                                                b3 = b3;
                                                lArr2[i20 - 1] = i22;
                                                b3 = b3;
                                                i27 = ((int) (Test.instanceCount));
                                                i19 = i19;
                                                Test.byArrFld[i20] >>= ((byte) (4));
                                                iArrFld1[i25][i25] -= 10;
                                                i27 += i19;
                                                break;
                                            case 93 :
                                                i21 += ((i25 * i25) + i27) - i22;
                                                Test.instanceCount += i25 | by3;
                                                i23 += ((int) (137L));
                                                try {
                                                    iArrFld1[i20 + 1][i25 + 1] = i20 % (-28985);
                                                    i27 = (-145) % i27;
                                                    i27 = i27 / i20;
                                                } catch (ArithmeticException a_e) {
                                                }
                                                i19 >>>= 4;
                                                f3 += ((i25 * Test.instanceCount) + i24) - i27;
                                                Test.instanceCount += ((i25 * i23) + i26) - i23;
                                                i21 <<= i25;
                                                i26 <<= ((int) (Test.instanceCount));
                                                i21 -= i24;
                                                break;
                                            case 94 :
                                                i28 ^= i27;
                                                break;
                                            case 95 :
                                                i28 = i21;
                                                break;
                                        }
                                    }
                                    break;
                                case 7 :
                                case 46 :
                                    i28 += ((int) (47779L + (i25 * i25)));
                                    break;
                                case 23 :
                                case 45 :
                                    Test.instanceCount = i20;
                                    break;
                                case 20 :
                                    Test.instanceCount += i27;
                                    break;
                                case 33 :
                                    i28 += i28;
                                case 29 :
                                    if (b3)
                                        continue;

                                    break;
                                case 35 :
                                    i21 += ((i25 * i28) + f3) - Test.iFld;
                                default :
                                    Test.iFld -= ((int) (Test.instanceCount));
                            }
                        }
                    default :
                        Test.instanceCount -= sFld;
                }
            }
        }
        FuzzerUtils.out.println((((("i20 i21 by3 = " + i20) + ",") + i21) + ",") + by3);
        FuzzerUtils.out.println((((("i22 i23 b3 = " + i22) + ",") + i23) + ",") + (b3 ? 1 : 0));
        FuzzerUtils.out.println((((("f3 i24 i25 = " + Float.floatToIntBits(f3)) + ",") + i24) + ",") + i25);
        FuzzerUtils.out.println((((("i26 f4 i27 = " + i26) + ",") + Float.floatToIntBits(f4)) + ",") + i27);
        FuzzerUtils.out.println((((("i28 lArr2 dArr = " + i28) + ",") + FuzzerUtils.checkSum(lArr2)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount) + ",") + Double.doubleToLongBits(Test.dFld)) + ",") + Test.iFld);
        FuzzerUtils.out.println((((("sFld Test.iArrFld sArrFld = " + sFld) + ",") + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + FuzzerUtils.checkSum(sArrFld));
        FuzzerUtils.out.println((("iArrFld1 Test.byArrFld = " + FuzzerUtils.checkSum(iArrFld1)) + ",") + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}