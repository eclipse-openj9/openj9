// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -8493L;

    public static float fFld = -58.851F;

    public int iFld = -3;

    public static short sFld = 27164;

    public static byte byFld = 33;

    public static boolean bFld = true;

    public static int iFld1 = -32191;

    public int iFld2 = 14;

    public static volatile int iArrFld[] = new int[N];

    public static long lArrFld[] = new long[N];

    public static double dArrFld[] = new double[N];

    public static float fArrFld[] = new float[N];

    public static byte byArrFld[] = new byte[N];

    public boolean bArrFld[] = new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 12);
        FuzzerUtils.init(Test.lArrFld, 149L);
        FuzzerUtils.init(Test.dArrFld, 88.89329);
        FuzzerUtils.init(Test.fArrFld, 39.992F);
        FuzzerUtils.init(Test.byArrFld, ((byte) (-14)));
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth(int i1, int i2, int i3) {
        if (Test.ax$4) {
            Set ax$5 = null;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                if (new LinkedHashSet(ax$5).hashCode() != ax$5.hashCode());
            } catch (Throwable ax$6) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return 8031859060066227673L;
        }
        int i4 = 6;
        int i5 = 25;
        int i6 = 12;
        int i7 = 28578;
        int i8 = 3;
        int i10 = 15885;
        int i11 = 2;
        int i12 = -234;
        int i13 = 13;
        int i14 = -249;
        short s = 8514;
        double d = 86.30919;
        float fArr[][] = new float[N][N];
        FuzzerUtils.init(fArr, -1.88F);
        i1 >>= i3;
        for (i4 = 7; 121 > i4; i4++) {
            i1 += ((int) (2.24232));
            i2 = ((int) (-1528771568762434255L));
            Test.instanceCount = i6;
        }
        i5 -= ((int) (Test.fFld));
        s /= ((short) (((long) (Test.fFld)) | 1));
        for (i7 = 3; i7 < 80; i7++) {
            Test.iArrFld[i7 - 1] |= ((int) (Test.instanceCount));
            s *= ((short) (Test.instanceCount));
            i2 += ((i7 * Test.instanceCount) + i6) - i4;
            i1 *= i2;
            for (d = i7; 7 > d; ++d) {
                i10 = ((int) (Test.instanceCount));
                i2 -= i3;
            }
            for (i11 = i7; i11 < 7; ++i11) {
                Test.instanceCount <<= Test.instanceCount;
                Test.iArrFld[i7] = s;
                i12 = ((int) (Test.fFld));
                i6 >>>= ((int) (Test.instanceCount));
                for (i13 = i11; i13 < 1; i13++) {
                    switch (((i7 % 2) * 5) + 81) {
                        case 87 :
                            i12 >>= i1;
                            try {
                                i1 = i4 / i14;
                                Test.iArrFld[i11 - 1] = (-492664193) / i6;
                                i5 = 505139715 % i3;
                            } catch (ArithmeticException a_e) {
                            }
                            i3 += i13 - i3;
                            i14 = i10;
                            i5 += s;
                            i12 *= i5;
                            i3 += i13;
                            i6 = i11;
                            i8 *= i2;
                            Test.iArrFld[i13 - 1] >>= i14;
                            i12 += i13;
                            Test.iArrFld[i13 - 1] = i2;
                            Test.instanceCount = s;
                            fArr[i13 - 1] = FuzzerUtils.float1array(N, ((float) (-2.26F)));
                        case 90 :
                        default :
                            i10 -= i3;
                    }
                }
            }
        }
        long meth_res = ((((((((((((((i1 + i2) + i3) + i4) + i5) + i6) + s) + i7) + i8) + Double.doubleToLongBits(d)) + i10) + i11) + i12) + i13) + i14) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return ((long) (meth_res));
    }

    public static int iMeth(long l1, int i) {
        int i15 = 51;
        int i16 = 17344;
        int i17 = 70;
        int i18 = 216;
        int i19 = -243;
        boolean b = true;
        boolean bArr[] = new boolean[N];
        long l2 = 3732932865L;
        FuzzerUtils.init(bArr, true);
        Test.iArrFld[(i >>> 1) % N] -= ((int) (Test.instanceCount));
        Test.iArrFld[(i >>> 1) % N] = 0;
        Test.iArrFld = Test.iArrFld = Test.iArrFld = Test.iArrFld = Test.iArrFld;
        i &= ++i;
        {
            final int ax$15 = i17;
            final int ax$16 = i16;
            try {
                byte[] ax$8 = new byte[]{ 0, -1, -2, -3, -4 };
                char ax$11 = 'n';
                char[] ax$13 = new char[]{ '섿', 'ચ', '薕', '焩' };
                for (int ax$7 = -561; ax$7 < (-561 + 10135); ax$7 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$8[i17] = ((byte) (ax$8[20] + 2));
                    } catch (Throwable ax$10) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$4 = true;
                    lMeth(1262616619, -731822503, 1455512439);
                    Test.ax$4 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$13[i16] = ax$11;
                        if (i16 == 10) {
                            ax$11++;
                        }
                    } catch (Throwable ax$14) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i17 = ax$15;
                i16 = ax$16;
            }
        }
        Test.instanceCount = lMeth(i, i, i);
        i <<= i;
        i15 = 1;
        while ((++i15) < 166) {
            if (b)
                continue;

            {
                try {
                    float[] ax$1 = new float[]{ -1.6777216E7F, -1.6777215E7F, -0.49999997F, -0.49999997F, 0.49999997F, 0.49999997F, 1.6777215E7F, 1.6777216E7F };
                    for (int ax$0 = -123; ax$0 < (-123 + 17746); ax$0 += 1) {
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            for (int ax$2 = 0; ax$2 < ax$1.length; ax$2++) {
                                ax$1[ax$2] = ax$1[20] + 2;
                            }
                        } catch (Throwable ax$3) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                    }
                } finally {
                }
            }
            Test.instanceCount *= i15;
            for (i16 = 4; i16 > 1; i16 -= 3) {
                double d1 = -84.63873;
                l1 += i16 - Test.sFld;
                switch (((i18 >>> 1) % 10) + 126) {
                    case 126 :
                        d1 = i16;
                        bArr[i16 - 1] = b;
                        i18 += i16 - i15;
                        break;
                    case 127 :
                        i17 = ((int) (l1));
                        l1 -= ((long) (d1));
                        break;
                    case 128 :
                        for (l2 = 1; l2 < 4; l2++) {
                            Test.iArrFld[((int) (l2))] += Test.sFld;
                            i += i18;
                            l1 += ((l2 * Test.instanceCount) + Test.fFld) - l1;
                            Test.lArrFld[((int) (l2))] += Test.instanceCount;
                            switch (((i16 % 5) * 5) + 30) {
                                case 32 :
                                    Test.iArrFld[i15] = i18;
                                    break;
                                case 36 :
                                    Test.dArrFld[((int) (l2))] *= Test.fFld;
                                    i = i;
                                    i17 *= ((int) (l1));
                                    switch ((((i15 >>> 1) % 5) * 5) + 89) {
                                        case 92 :
                                            i = 37;
                                            Test.iArrFld[i16 - 1] %= ((int) (i18 | 1));
                                            i19 *= ((int) (Test.fFld));
                                            break;
                                        case 94 :
                                            i18 = ((int) (-1.90992));
                                            Test.instanceCount /= Test.byFld | 1;
                                            d1 = Test.byFld;
                                            i19 = i19;
                                            Test.fFld += Test.fFld;
                                            break;
                                        case 99 :
                                            i19 = ((int) (d1));
                                        case 102 :
                                            Test.instanceCount = i16;
                                            break;
                                        case 97 :
                                            Test.fArrFld[((int) (l2))] += i16;
                                            break;
                                    }
                                    break;
                                case 43 :
                                    Test.iArrFld[i15 + 1] = ((int) (13L));
                                case 41 :
                                    i18 = -4;
                                    break;
                                case 54 :
                                    Test.instanceCount /= 5;
                                    break;
                                default :
                                    i17 = i;
                            }
                        }
                        break;
                    case 129 :
                        i += i16 + i16;
                    case 130 :
                        i = i18;
                        break;
                    case 131 :
                        Test.iArrFld[i15] >>>= i15;
                        break;
                    case 132 :
                        i18 ^= i18;
                        break;
                    case 133 :
                        i17 = i;
                        break;
                    case 134 :
                        Test.dArrFld[i15 + 1] -= Test.byFld;
                    case 135 :
                        Test.instanceCount = Test.instanceCount;
                }
            }
        }
        long meth_res = ((((((((l1 + i) + i15) + (b ? 1 : 0)) + i16) + i17) + i18) + l2) + i19) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public void vMeth(long l) {
        double d2 = 76.40391;
        int i20 = 235;
        int i21 = -146;
        int i22 = 131;
        int i23 = 13;
        int i24 = 27;
        int i25 = -140;
        int i26 = 36705;
        int iArr[] = new int[N];
        long l3 = -1L;
        boolean b1 = true;
        FuzzerUtils.init(iArr, -141);
        Test.instanceCount *= ((long) ((Test.fFld -= --l) - ((Test.instanceCount >> iFld) + (67 % (iMeth(Test.instanceCount, 5) | 1)))));
        d2 -= l;
        iFld *= iFld;
        for (i20 = 7; 116 > i20; ++i20) {
            i21 = i21;
        }
        iFld = -151;
        l += i20;
        for (i22 = 1; i22 < 161; ++i22) {
            if (i22 != 0) {
                vMeth_check_sum += ((((((((((l + Double.doubleToLongBits(d2)) + i20) + i21) + i22) + i23) + l3) + i24) + i25) + i26) + (b1 ? 1 : 0)) + FuzzerUtils.checkSum(iArr);
                return;
            }
            switch (((i20 >>> 1) % 2) + 27) {
                case 27 :
                    i23 -= ((int) (d2));
                    for (l3 = i22; l3 < 4; ++l3) {
                        i21 += ((int) (l));
                        iFld <<= 7737;
                        switch ((((i22 >>> 1) % 2) * 5) + 84) {
                            case 85 :
                                i24 = ((int) (Test.fFld));
                                for (i25 = 1; i25 < 1; ++i25) {
                                    if (b1)
                                        break;

                                    i24 = i26;
                                    switch ((i22 % 7) + 29) {
                                        case 29 :
                                            iFld = i23;
                                            Test.byFld >>= ((byte) (-20458));
                                            d2 = l3;
                                            Test.fFld += ((i25 * i22) + iFld) - Test.fFld;
                                            b1 = b1;
                                            break;
                                        case 30 :
                                            if (b1)
                                                break;

                                            break;
                                        case 31 :
                                            Test.instanceCount >>= i24;
                                            Test.fArrFld[i25 + 1] += l3;
                                            i23 = iFld;
                                            iFld = ((int) (l3));
                                            try {
                                                iFld = 56794 / iArr[i25 - 1];
                                                i21 = (-51657) / i24;
                                                i24 = (-2136492553) % i20;
                                            } catch (ArithmeticException a_e) {
                                            }
                                            i23 -= ((int) (d2));
                                            i23 |= iFld;
                                            try {
                                                Test.iArrFld[i22] = i23 % (-29985);
                                                i21 = i26 % (-1386107517);
                                                iArr[((-2) >>> 1) % N] = i25 % (-251);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            i24 += ((int) (d2));
                                            i24 |= i21;
                                            Test.lArrFld[i25 - 1] -= Test.instanceCount;
                                            break;
                                        case 32 :
                                            i23 = ((int) (l3));
                                            break;
                                        case 33 :
                                            Test.lArrFld[i25] = i24;
                                            break;
                                        case 34 :
                                            Test.instanceCount -= ((long) (d2));
                                            break;
                                        case 35 :
                                            if (i26 != 0) {
                                                vMeth_check_sum += ((((((((((l + Double.doubleToLongBits(d2)) + i20) + i21) + i22) + i23) + l3) + i24) + i25) + i26) + (b1 ? 1 : 0)) + FuzzerUtils.checkSum(iArr);
                                                return;
                                            }
                                            break;
                                    }
                                }
                            case 86 :
                                iArr = iArr;
                            default :
                                i26 += ((int) (l3 * l3));
                        }
                    }
                    break;
                case 28 :
                    i21 = ((int) (Test.instanceCount));
                    break;
            }
        }
        vMeth_check_sum += ((((((((((l + Double.doubleToLongBits(d2)) + i20) + i21) + i22) + i23) + l3) + i24) + i25) + i26) + (b1 ? 1 : 0)) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {
        double d3 = -2.74558;
        double d4 = -2.75674;
        float f = 101.821F;
        int i27 = 23622;
        int i28 = -44820;
        int i29 = -12653;
        int i30 = -24247;
        int i31 = -167;
        int i32 = -23526;
        vMeth(Test.instanceCount);
        d3 = 1;
        while ((++d3) < 89) {
            for (f = 57; f > 2; --f) {
                Test.sFld >>= ((short) (i27));
                for (i28 = 1; i28 < 2; i28++) {
                    int i33 = 13;
                    if (Test.bFld) {
                        Test.lArrFld[((int) (d3 - 1))] >>= Test.instanceCount;
                        Test.lArrFld[i28] -= i28;
                        Test.byArrFld[i28 - 1] = ((byte) (Test.instanceCount));
                        switch (((i28 % 9) * 5) + 90) {
                            case 113 :
                                if (false)
                                    break;

                                if (Test.bFld)
                                    continue;

                                Test.instanceCount -= ((long) (-47.661F));
                                d4 -= i29;
                                Test.iArrFld[((int) (d3 - 1))] += Test.iFld1;
                                d4 += Test.instanceCount;
                                Test.iArrFld[i28 + 1] %= ((int) (Test.instanceCount | 1));
                                Test.dArrFld[((int) (f + 1))] = iFld;
                                Test.lArrFld = Test.lArrFld;
                                d4 = Test.iFld1;
                                break;
                            case 115 :
                                Test.byFld -= ((byte) (i30));
                                try {
                                    i29 = i27 % 1554209587;
                                    Test.iFld1 = 13216 / i29;
                                    Test.iArrFld[((int) (d3))] = Test.iFld1 / (-44);
                                } catch (ArithmeticException a_e) {
                                }
                                if (Test.bFld) {
                                    Test.instanceCount += ((long) (2.742F));
                                    {
                                        final int ax$26 = this.iFld;
                                        try {
                                            Iterator ax$19 = null;
                                            int[] ax$22 = new int[]{ 789959808, -1616082015 };
                                            boolean ax$18 = false;
                                            for (int ax$17 = -759; ax$17 < (-759 + 4743); ax$17 += 1) {
                                                Test.AxOutputRedirectionHelper.redirect();
                                                try {
                                                    Map.Entry ax$20 = ((Map.Entry) (ax$19.next()));
                                                } catch (Throwable ax$21) {
                                                } finally {
                                                }
                                                Test.AxOutputRedirectionHelper.recover();
                                                if (!ax$18) {
                                                    i29 += i28;
                                                    ax$18 = true;
                                                }
                                                Test.AxOutputRedirectionHelper.redirect();
                                                try {
                                                    for (int ax$24 : ax$22) {
                                                        if (Integer.parseUnsignedInt(Integer.toBinaryString(ax$24), 2) != ax$24) {
                                                            iFld++;
                                                        }
                                                        if (Integer.parseUnsignedInt(Integer.toOctalString(ax$24), 8) != ax$24) {
                                                            iFld++;
                                                        }
                                                        if (Integer.parseUnsignedInt(Integer.toHexString(ax$24), 16) != ax$24) {
                                                            iFld++;
                                                        }
                                                    }
                                                } catch (Throwable ax$25) {
                                                } finally {
                                                }
                                                Test.AxOutputRedirectionHelper.recover();
                                            }
                                        } finally {
                                            this.iFld = ax$26;
                                        }
                                    }
                                    i30 = i28;
                                    Test.bFld = Test.bFld;
                                    i27 = ((int) (f));
                                    Test.iFld1 *= i30;
                                    Test.fFld = iFld;
                                    d4 *= 9049562022121404282L;
                                }
                                Test.lArrFld[((int) (f))] >>= i30;
                                i30 += i29;
                                if (false) {
                                    if (Test.bFld)
                                        continue;

                                    switch (((int) ((d3 % 8) + 84))) {
                                        case 84 :
                                            Test.instanceCount += i28 * i28;
                                            iFld = 46;
                                            Test.fFld -= -24;
                                            i29 *= i30;
                                            Test.iArrFld[((int) (d3))] = -5;
                                            Test.sFld = ((short) (Test.iFld1));
                                            Test.iArrFld[((int) (d3 + 1))] >>= ((int) (Test.instanceCount));
                                            Test.fFld += i28;
                                            switch (((int) ((d3 % 10) * 5))) {
                                                case 42 :
                                                    Test.iArrFld[((int) (d3))] <<= ((int) (Test.instanceCount));
                                                    Test.fFld *= i27;
                                                    i30 = ((int) (Test.instanceCount));
                                                    Test.sFld = ((short) (-87));
                                                    Test.sFld += ((short) (i27));
                                                    iFld2 = Test.byFld;
                                                    Test.iArrFld = Test.iArrFld;
                                                    break;
                                                case 18 :
                                                    Test.iArrFld[i28 - 1] -= ((int) (d3));
                                                    i27 <<= 223;
                                                    if (Test.bFld) {
                                                        iFld = i29;
                                                        i30 = i29;
                                                        iFld2 -= i30;
                                                        i30 >>>= ((int) (Test.instanceCount));
                                                        Test.sFld = Test.sFld;
                                                        i31 = i30;
                                                        i27 += 26113;
                                                        iFld2 <<= i31;
                                                        Test.fArrFld[(239 >>> 1) % N] = Test.instanceCount;
                                                    } else if (Test.bFld) {
                                                        Test.iArrFld[i28 + 1] += ((int) (Test.instanceCount));
                                                        Test.iFld1 += ((int) (Test.instanceCount));
                                                        Test.sFld = ((short) (i32));
                                                        try {
                                                            iFld = i27 / 719820143;
                                                            i27 = 200 % i28;
                                                            i30 = Test.iFld1 % (-214);
                                                        } catch (ArithmeticException a_e) {
                                                        }
                                                        d4 -= Test.instanceCount;
                                                        Test.dArrFld[((int) (d3))] -= i27;
                                                        i27 *= ((int) (139L));
                                                        i31 *= iFld2;
                                                        Test.iFld1 <<= ((int) (Test.instanceCount));
                                                        i30 *= ((int) (Test.instanceCount));
                                                    } else if (Test.bFld) {
                                                        if (Test.bFld)
                                                            continue;

                                                    } else {
                                                        Test.instanceCount = i28;
                                                    }
                                                    break;
                                                case 10 :
                                                    d4 -= -65316;
                                                    break;
                                                case 25 :
                                                    Test.instanceCount += ((long) (0.396F + (i28 * i28)));
                                                    break;
                                                case 7 :
                                                    if (Test.bFld)
                                                        continue;

                                                    break;
                                                case 5 :
                                                case 17 :
                                                    Test.iArrFld[i28] <<= iFld;
                                                case 30 :
                                                    Test.iArrFld = Test.iArrFld;
                                                case 16 :
                                                    i30 -= ((int) (Test.fFld));
                                                    break;
                                                case 28 :
                                                    Test.fArrFld = FuzzerUtils.float1array(N, ((float) (-88.36F)));
                                                    break;
                                                default :
                                                    Test.instanceCount &= 5;
                                            }
                                            break;
                                        case 85 :
                                            Test.fFld -= i28;
                                        case 86 :
                                            i31 = ((int) (d3));
                                        case 87 :
                                            i27 -= Test.byFld;
                                            break;
                                        case 88 :
                                            Test.iArrFld[((int) (f - 1))] -= ((int) (Test.instanceCount));
                                            break;
                                        case 89 :
                                            i29 += i27;
                                        case 90 :
                                            d4 -= i30;
                                            break;
                                        case 91 :
                                            bArrFld[((int) (d3 + 1))] = true;
                                            break;
                                        default :
                                            Test.instanceCount += i28;
                                    }
                                } else {
                                    Test.iFld1 >>>= 12;
                                }
                                break;
                            case 116 :
                                Test.iArrFld[((int) (f - 1))] >>= i29;
                                break;
                            case 112 :
                                i31 >>= iFld2;
                                break;
                            case 98 :
                                Test.byFld -= ((byte) (i27));
                                break;
                            case 127 :
                                Test.iArrFld[i28 - 1] >>= ((int) (Test.instanceCount));
                            case 108 :
                                i32 += i28;
                                break;
                            case 124 :
                                Test.fFld += i28;
                                break;
                            case 95 :
                                i33 = ((int) (Test.instanceCount));
                                break;
                        }
                    } else {
                        Test.instanceCount = Test.instanceCount;
                    }
                }
            }
        }
        FuzzerUtils.out.println((((("d3 f i27 = " + Double.doubleToLongBits(d3)) + ",") + Float.floatToIntBits(f)) + ",") + i27);
        FuzzerUtils.out.println((((("i28 i29 d4 = " + i28) + ",") + i29) + ",") + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println((((("i30 i31 i32 = " + i30) + ",") + i31) + ",") + i32);
        FuzzerUtils.out.println((((("Test.instanceCount Test.fFld iFld = " + Test.instanceCount) + ",") + Float.floatToIntBits(Test.fFld)) + ",") + iFld);
        FuzzerUtils.out.println((((("Test.sFld Test.byFld Test.bFld = " + Test.sFld) + ",") + Test.byFld) + ",") + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println((((("Test.iFld1 iFld2 Test.iArrFld = " + Test.iFld1) + ",") + iFld2) + ",") + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println((((("Test.lArrFld Test.dArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld))) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println((("Test.byArrFld bArrFld = " + FuzzerUtils.checkSum(Test.byArrFld)) + ",") + FuzzerUtils.checkSum(bArrFld));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$4 = false;
}