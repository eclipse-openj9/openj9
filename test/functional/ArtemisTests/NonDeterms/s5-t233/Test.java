// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.security.cert.CertStore;
import java.security.cert.LDAPCertStoreParameters;
import java.util.BitSet;
import java.util.Random;
import java.util.concurrent.atomic.AtomicInteger;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 11L;

    public static double dFld = 0.37397;

    public byte byFld = -13;

    public float fFld = 33.791F;

    public static volatile double dFld1 = -2.101842;

    public static int iFld = -30505;

    public int iArrFld[] = new int[N];

    public static byte byArrFld[] = new byte[N];

    public static float fArrFld[] = new float[N];

    static {
        FuzzerUtils.init(Test.byArrFld, ((byte) (-90)));
        FuzzerUtils.init(Test.fArrFld, -1.222F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long fMeth_check_sum = 0;

    public static void vMeth1(int i2) {
        int iArr[] = new int[N];
        FuzzerUtils.init(iArr, 160);
        iArr = iArr = iArr = FuzzerUtils.int1array(N, ((int) (-151)));
        vMeth1_check_sum += i2 + FuzzerUtils.checkSum(iArr);
    }

    public static float fMeth(int i4, long l) {
        if (Test.ax$0) {
            final int ax$9 = i4;
            long[] ax$1 = new long[]{ -7903697188493963157L, -3016629192315403382L, -4154445148339171367L, 1347010525494009251L, -1247712272834947002L, -1783982772045304810L, -1697144796186888155L, -7999930860502670175L, -4163639710622752090L };
            Random ax$3 = new Random();
            long[] ax$4 = new long[]{ 4378276070171435688L, -1454816471192879786L, -8773813971474657025L, 3662969997079099510L, 3216547828410754090L, 5754499490156787812L, -471094257090293152L, -2736906027959612999L };
            boolean[] ax$5 = new boolean[]{ true, false, false, false, false, false, false };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                long ax$6 = ax$3.nextLong();
                for (int ax$7 = 0; ax$7 < 64; ax$7++) {
                    ax$5[(i4 * 64) + ax$7] = (ax$6 & (1L << ax$7)) != 0;
                }
                ax$4[i4] = 0;
                ax$1[i4] = ax$6;
            } catch (Throwable ax$8) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            i4 = ax$9;
            return 0.856614F;
        }
        Test.instanceCount <<= l;
        long meth_res = i4 + l;
        fMeth_check_sum += meth_res;
        return ((float) (meth_res));
    }

    public static int iMeth(int i3, float f) {
        double d = 2.33653;
        int i5 = 174;
        int i6 = -18812;
        int i7 = -8269;
        int i8 = -24958;
        int i9 = 5;
        int i10 = -5;
        int i11 = 57163;
        int i12 = -44;
        int i13 = -4;
        int iArr1[][] = new int[N][N];
        boolean b1 = true;
        boolean bArr[] = new boolean[N];
        long l1 = 119L;
        byte byArr[] = new byte[N];
        FuzzerUtils.init(iArr1, -1615);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(byArr, ((byte) (-33)));
        i3 |= ((int) (((i3 - i3) + (-(i3++))) + (i3 - Test.dFld)));
        {
            final int ax$17 = i10;
            final long ax$18 = Test.iMeth_check_sum;
            try {
                char[] ax$11 = new char[1];
                for (int ax$10 = -783; ax$10 < (-783 + 18142); ax$10 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (ax$11[i10 - 1] != 's') {
                            i10--;
                        }
                    } catch (Throwable ax$13) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    fMeth(392801997, -3065853254861518215L);
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        try {
                            iMeth_check_sum = Long.decode(System.getProperty("divisor"));
                        } catch (Throwable ax$15) {
                        }
                    } catch (Throwable ax$16) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i10 = ax$17;
                Test.iMeth_check_sum = ax$18;
            }
        }
        Test.instanceCount = ((long) (fMeth(i3, Test.instanceCount)));
        for (d = 160; d > 6; d -= 2) {
            i5 += i3;
            for (i6 = 1; 7 > i6; i6 += 2) {
                i3 -= i7;
                for (i8 = 1; i8 < 3; i8++) {
                    i7 = ((int) (Test.instanceCount));
                    i5 ^= ((int) (Test.instanceCount));
                    i5 -= ((int) (Test.instanceCount));
                    i7 >>>= i9;
                    i5 = -186;
                    Test.instanceCount += i6;
                    iArr1[i8 - 1] = iArr1[i6];
                    i7 += -10;
                    bArr[((int) (d))] = b1;
                    byArr[i8] |= ((byte) (Test.instanceCount));
                    if (b1)
                        break;

                    b1 = b1;
                    i3 = i6;
                }
                l1 = 1;
                while ((++l1) < 3) {
                    if (b1)
                        break;

                    f += i8;
                    f += l1;
                }
                for (i10 = 1; i10 < 3; i10++) {
                    i9 *= ((int) (Test.instanceCount));
                    Test.dFld = l1;
                    i5 += i3;
                    i5 += i10;
                    iArr1[i10] = iArr1[i6 + 1];
                }
                for (i12 = ((int) (d)); i12 < 3; ++i12) {
                    Test.instanceCount >>= l1;
                    if (false) {
                        Test.instanceCount -= Test.instanceCount;
                        i5 += i7;
                        b1 = b1;
                        i13 = ((int) (-1209578697L));
                    } else {
                        i9 *= ((int) (Test.instanceCount));
                    }
                }
            }
        }
        long meth_res = (((((((((((((((i3 + Float.floatToIntBits(f)) + Double.doubleToLongBits(d)) + i5) + i6) + i7) + i8) + i9) + (b1 ? 1 : 0)) + l1) + i10) + i11) + i12) + i13) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(bArr)) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static void vMeth(boolean b, int i, int i1) {
        float f1 = -38.154F;
        int i14 = -240;
        int i15 = -3;
        int i16 = 9;
        int i17 = 9194;
        int i18 = 17475;
        int i19 = 24046;
        int i20 = -1;
        int i21 = 0;
        int i22 = 9;
        int i23 = -48;
        int iArr2[] = new int[N];
        long lArr[] = new long[N];
        short sArr[] = new short[N];
        FuzzerUtils.init(lArr, 41L);
        FuzzerUtils.init(iArr2, 159);
        FuzzerUtils.init(sArr, ((short) (-24733)));
        vMeth1((-(i - i)) - iMeth(i, f1));
        Test.instanceCount -= i;
        Test.dFld += i1;
        for (i14 = 5; 153 > i14; ++i14) {
            if (i != 0) {
                vMeth_check_sum += ((((((((((((((((b ? 1 : 0) + i) + i1) + Float.floatToIntBits(f1)) + i14) + i15) + i16) + i17) + i18) + i19) + i20) + i21) + i22) + i23) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(sArr);
                return;
            }
            i1 -= i1;
            switch (((i1 >>> 1) % 5) + 66) {
                case 66 :
                case 67 :
                    for (i16 = i14; 4 > i16; i16++) {
                        lArr[i16] += i16;
                        Test.instanceCount += i16 * i18;
                        i = i16;
                        i15 ^= -126;
                        for (i19 = 1; i19 > 1; i19 -= 2) {
                            f1 = ((float) (Test.dFld));
                            i17 += 240;
                            i18 -= i17;
                            i17 = ((int) (Test.instanceCount));
                            i1 -= ((int) (Test.instanceCount));
                            i1 += ((i19 * Test.instanceCount) + Test.instanceCount) - i19;
                            i1 += ((int) ((-112562735L) + (i19 * i19)));
                            {
                                final int ax$36 = i1;
                                final int ax$37 = i;
                                final int ax$38 = i14;
                                final int ax$39 = i15;
                                try {
                                    BitSet ax$28 = new BitSet();
                                    long[] ax$33 = new long[]{ 8531973545685901322L, 8665862766198419779L, 3341482128663535466L, 5125959206082483750L, 3192140857928073528L, -6169189242378993697L };
                                    for (int ax$27 = -236; ax$27 < (-236 + 17963); ax$27 += 1) {
                                        Test.AxOutputRedirectionHelper.redirect();
                                        try {
                                            long ax$34 = 1L << (i14++);
                                            if ((ax$33[i] & ax$34) != 0) {
                                                ax$28.set(i15);
                                                i1++;
                                            }
                                            if (i14 == 64) {
                                                i++;
                                                i14 = 0;
                                            }
                                        } catch (Throwable ax$35) {
                                        } finally {
                                        }
                                        Test.AxOutputRedirectionHelper.recover();
                                    }
                                } finally {
                                    i1 = ax$36;
                                    i = ax$37;
                                    i14 = ax$38;
                                    i15 = ax$39;
                                }
                            }
                            Test.instanceCount += ((long) (-56.493F));
                            if (b)
                                continue;

                        }
                        for (i21 = 1; 1 > i21; ++i21) {
                            Test.instanceCount = i17;
                            if (b) {
                                i18 += i;
                                Test.instanceCount >>>= -50;
                                i18 += i18;
                                iArr2[i14] *= ((int) (Test.instanceCount));
                                i -= i23;
                                switch (((i19 >>> 1) % 3) + 67) {
                                    case 67 :
                                        i1 += ((int) ((-5802699011292821922L) + (i21 * i21)));
                                        try {
                                            i23 = i23 % (-194);
                                            i20 = i22 % (-312418402);
                                            iArr2[i14 + 1] = i22 % (-1005036334);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        i23 += i21 * Test.instanceCount;
                                        i23 -= ((int) (Test.instanceCount));
                                        i17 &= ((int) (Test.instanceCount));
                                        i22 += i21;
                                        break;
                                    case 68 :
                                        iArr2[i21] <<= ((int) (Test.instanceCount));
                                    case 69 :
                                        sArr[i14 + 1] -= ((short) (Test.instanceCount));
                                }
                                vMeth_check_sum += ((((((((((((((((b ? 1 : 0) + i) + i1) + Float.floatToIntBits(f1)) + i14) + i15) + i16) + i17) + i18) + i19) + i20) + i21) + i22) + i23) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(sArr);
                                return;
                            }
                        }
                    }
                    break;
                case 68 :
                    i23 -= i;
                    break;
                case 69 :
                    f1 = i23;
                    break;
                case 70 :
                    f1 = i17;
                    break;
                default :
                    if (i23 != 0) {
                        vMeth_check_sum += ((((((((((((((((b ? 1 : 0) + i) + i1) + Float.floatToIntBits(f1)) + i14) + i15) + i16) + i17) + i18) + i19) + i20) + i21) + i22) + i23) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(sArr);
                        return;
                    }
            }
        }
        vMeth_check_sum += ((((((((((((((((b ? 1 : 0) + i) + i1) + Float.floatToIntBits(f1)) + i14) + i15) + i16) + i17) + i18) + i19) + i20) + i21) + i22) + i23) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {
        int i24 = -119;
        int i25 = 31098;
        int i26 = -55150;
        int i27 = 24201;
        int i28 = 69;
        int i29 = 19;
        int i30 = 5;
        int i31 = -25024;
        int i32 = 252;
        short s = 15365;
        short sArr1[] = new short[N];
        long l2 = 2676244705L;
        long lArr1[] = new long[N];
        boolean b2 = false;
        FuzzerUtils.init(sArr1, ((short) (-27646)));
        FuzzerUtils.init(lArr1, 19L);
        vMeth(true, -33102, i24);
        i24 <<= i24;
        iArrFld[(i24 >>> 1) % N] = ((int) (Test.instanceCount));
        for (i25 = 2; i25 < 92; ++i25) {
            s = ((short) (-163));
            i26 -= 46247;
            for (i27 = 1; i27 < 56; i27++) {
                s <<= ((short) (i28));
                byFld = ((byte) (Test.instanceCount));
            }
        }
        iArrFld[(i28 >>> 1) % N] *= ((int) (Test.dFld));
        for (short s1 : sArr1) {
            Test.instanceCount &= Test.instanceCount;
            for (i29 = 1; i29 < 20; ++i29) {
                Test.instanceCount -= s1;
                i24 = -6;
                Test.instanceCount += i29;
            }
            iArrFld[(i26 >>> 1) % N] = i28;
            i28 >>= i30;
            for (l2 = 1; 20 > l2; ++l2) {
                i24 *= ((int) (Test.instanceCount));
                if (b2) {
                    if (b2)
                        continue;

                    i30 += ((int) (l2));
                    if (b2) {
                        {
                            final int ax$26 = i26;
                            try {
                                AtomicInteger[] ax$21 = new AtomicInteger[]{ new AtomicInteger(), new AtomicInteger(), new AtomicInteger(), new AtomicInteger(), new AtomicInteger() };
                                boolean ax$20 = false;
                                for (int ax$19 = -49; ax$19 < (-49 + 14241); ax$19 += 1) {
                                    Test.AxOutputRedirectionHelper.redirect();
                                    try {
                                        for (int ax$23 = 0; ax$23 < i26; ++ax$23) {
                                        }
                                    } catch (Throwable ax$24) {
                                    } finally {
                                    }
                                    Test.AxOutputRedirectionHelper.recover();
                                    if (!ax$20) {
                                        i32 = 1;
                                        ax$20 = true;
                                    }
                                    Test.AxOutputRedirectionHelper.redirect();
                                    try {
                                        CertStore.getInstance("LDAP", new LDAPCertStoreParameters());
                                    } catch (Throwable ax$25) {
                                    } finally {
                                    }
                                    Test.AxOutputRedirectionHelper.recover();
                                }
                            } finally {
                                i26 = ax$26;
                            }
                        }
                        while ((++i32) < 2) {
                            Test.byArrFld[i32] |= ((byte) (8L));
                            lArr1[i32] = -63861;
                            i30 += i32 * i32;
                            iArrFld[i32 + 1] *= i31;
                            if (false)
                                break;

                            Test.instanceCount -= i25;
                            b2 = b2;
                            i30 = i30;
                            i26 -= i25;
                            iArrFld[((int) (l2 - 1))] = i32;
                            if (b2) {
                                i26 = i30;
                                i24 = 41790;
                                i24 *= ((int) (l2));
                                switch ((i32 % 9) + 16) {
                                    case 16 :
                                        iArrFld[i32 + 1] |= -5;
                                    case 17 :
                                        Test.instanceCount += i32 - i29;
                                        i31 += i32;
                                        Test.instanceCount += i32 * i32;
                                        b2 = b2;
                                        i28 -= i32;
                                        if (b2)
                                            continue;

                                        iArrFld[((int) (l2))] += ((int) (980837998L));
                                        Test.instanceCount >>= i28;
                                        iArrFld[((int) (l2))] = ((int) (43L));
                                        fFld += i32;
                                        iArrFld[(i24 >>> 1) % N] *= i28;
                                        break;
                                    case 18 :
                                        i24 = ((int) (Test.instanceCount));
                                        i31 += ((int) (Test.instanceCount));
                                        Test.instanceCount = -1L;
                                        Test.instanceCount += i32;
                                        Test.dFld1 -= -2.84303;
                                        Test.instanceCount += (-12) + (i32 * i32);
                                        break;
                                    case 19 :
                                        s = ((short) (l2));
                                        byFld |= ((byte) (Test.instanceCount));
                                        if (b2)
                                            break;

                                        s *= ((short) (-10));
                                        fFld += i32 - i24;
                                        Test.instanceCount = ((long) (1.1543));
                                        fFld *= i24;
                                        Test.byArrFld[i32] = ((byte) (i31));
                                        i30 += i32;
                                        if (true)
                                            continue;

                                        switch (((i32 % 4) * 5) + 30) {
                                            case 37 :
                                                Test.fArrFld[((int) (l2))] += Test.instanceCount;
                                                s += s1;
                                                i24 = ((int) (l2));
                                                try {
                                                    i28 = i30 / i28;
                                                    Test.iFld = (-873061732) / iArrFld[((int) (l2))];
                                                    iArrFld[((int) (l2))] = i30 / i25;
                                                } catch (ArithmeticException a_e) {
                                                }
                                                fFld /= 1.227F;
                                                Test.iFld >>>= byFld;
                                            case 38 :
                                                i26 += i32;
                                                break;
                                            case 35 :
                                                i28 |= -36;
                                            case 42 :
                                                lArr1[i32] *= i25;
                                        }
                                        break;
                                    case 20 :
                                        i24 <<= ((int) (Test.instanceCount));
                                        break;
                                    case 21 :
                                        i24 -= 5;
                                    case 22 :
                                        i31 = i31;
                                        break;
                                    case 23 :
                                        Test.fArrFld[((int) (l2 - 1))] += -38.612F;
                                        break;
                                    case 24 :
                                }
                            }
                        }
                    }
                } else if (false) {
                    Test.iFld = i24;
                } else if (b2) {
                    lArr1 = lArr1;
                }
            }
        }
        FuzzerUtils.out.println((((("i24 i25 i26 = " + i24) + ",") + i25) + ",") + i26);
        FuzzerUtils.out.println((((("s i27 i28 = " + s) + ",") + i27) + ",") + i28);
        FuzzerUtils.out.println((((("i29 i30 l2 = " + i29) + ",") + i30) + ",") + l2);
        FuzzerUtils.out.println((((("i31 b2 i32 = " + i31) + ",") + (b2 ? 1 : 0)) + ",") + i32);
        FuzzerUtils.out.println((("sArr1 lArr1 = " + FuzzerUtils.checkSum(sArr1)) + ",") + FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println((((("Test.instanceCount Test.dFld byFld = " + Test.instanceCount) + ",") + Double.doubleToLongBits(Test.dFld)) + ",") + byFld);
        FuzzerUtils.out.println((((("fFld Test.dFld1 Test.iFld = " + Float.floatToIntBits(fFld)) + ",") + Double.doubleToLongBits(Test.dFld1)) + ",") + Test.iFld);
        FuzzerUtils.out.println((((("iArrFld Test.byArrFld Test.fArrFld = " + FuzzerUtils.checkSum(iArrFld)) + ",") + FuzzerUtils.checkSum(Test.byArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}