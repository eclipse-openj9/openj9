// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.BufferOverflowException;
import java.nio.ShortBuffer;
import java.util.concurrent.atomic.AtomicIntegerArray;

public class Test {
    public static final int N = 256;

    public static volatile long instanceCount = 2146415982025869169L;

    public static double dFld = 1.92742;

    public static float fFld = -88.992F;

    public static byte byFld = 30;

    public static int iFld = 76;

    public static int iFld1 = 44540;

    public static volatile int iFld2 = -105;

    public static int iFld3 = -5;

    public int iFld4 = 0;

    public static int iArrFld[] = new int[N];

    public static long lArrFld[] = new long[N];

    public static float fArrFld[] = new float[N];

    public static int iArrFld1[] = new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3948);
        FuzzerUtils.init(Test.lArrFld, 57328L);
        FuzzerUtils.init(Test.fArrFld, -2.68F);
        FuzzerUtils.init(Test.iArrFld1, 165);
    }

    public static long vMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {
        boolean b = false;
        int i4 = -229;
        int i5 = -4;
        int i6 = -2;
        int i7 = 4454;
        int i8 = 26255;
        int i9 = -9;
        int i10 = -6;
        int i11 = 6;
        int iArr[] = new int[N];
        short s1 = 22190;
        float f = 92.888F;
        byte by = 100;
        long lArr1[] = new long[N];
        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(lArr1, -5687L);
        b = b;
        iArr = iArr;
        {
            try {
                short[] ax$23 = new short[]{ ((short) (-11366)), ((short) (12299)), ((short) (-9151)), ((short) (28863)), ((short) (27836)), ((short) (1360)), ((short) (28899)) };
                ShortBuffer ax$24 = null;
                for (int ax$22 = -509; ax$22 < (-509 + 16609); ax$22 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        try {
                            ax$24.position(16);
                            ax$24.put(ax$23, 0, 17);
                        } catch (BufferOverflowException ax$25) {
                        }
                    } catch (Throwable ax$26) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        i4 *= ((int) (Test.instanceCount));
        i5 = 1;
        do {
            i4 -= s1;
            i6 = 1;
            do {
                i4 = i5;
            } while ((++i6) < 5 );
            i4 = -7;
            iArr[i5 - 1] = i4;
            i4 = ((int) (f));
            iArr[i5] = ((int) (1.116076));
        } while ((++i5) < 109 );
        i4 -= ((int) (Test.dFld));
        f *= i6;
        iArr[(i6 >>> 1) % N] <<= 62974;
        i7 = 1;
        while ((++i7) < 213) {
            for (i8 = 1; i8 < 3; i8 += 3) {
                i9 -= i9;
                iArr[i8 - 1] = 224;
                i9 -= ((int) (Test.instanceCount));
                switch (((i7 % 7) * 5) + 90) {
                    case 100 :
                        i4 += i8 * i5;
                        if (false) {
                            f += ((i8 * i5) + f) - i8;
                            i4 += i6;
                            i4 += ((i8 * i9) + i4) - Test.instanceCount;
                            i10 = 1;
                            while ((++i10) < 3) {
                                iArr = iArr;
                                by *= ((byte) (i5));
                                i9 >>>= i8;
                                i4 += i10 ^ i6;
                                Test.instanceCount ^= i4;
                                by = ((byte) (-52555));
                                Test.instanceCount ^= i8;
                            }
                            i9 -= i8;
                            s1 <<= ((short) (i5));
                            Test.instanceCount <<= -121;
                            Test.instanceCount += ((i8 * f) + i8) - i10;
                        } else if (true) {
                            Test.instanceCount *= ((long) (Test.dFld));
                        } else if (b) {
                            if (b)
                                continue;

                        }
                        break;
                    case 96 :
                    case 109 :
                        lArr1[i8 + 1] = Test.instanceCount;
                    case 123 :
                        i9 |= i9;
                        break;
                    case 94 :
                    case 113 :
                        Test.dFld = -14;
                        break;
                    case 108 :
                        Test.instanceCount -= i11;
                        break;
                    default :
                        Test.instanceCount += i6;
                }
            }
        }
        vMeth1_check_sum += (((((((((((((b ? 1 : 0) + i4) + i5) + s1) + i6) + Float.floatToIntBits(f)) + i7) + i8) + i9) + i10) + by) + i11) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public static long lMeth(int i1, int i2, int i3) {
        short s = -12048;
        short sArr[] = new short[N];
        int i12 = 10132;
        int i13 = -203;
        int i14 = 61061;
        int i15 = -41092;
        double d = -1.35824;
        double dArr[] = new double[N];
        long lArr[] = new long[N];
        FuzzerUtils.init(lArr, -2016959727702887467L);
        FuzzerUtils.init(dArr, 78.10667);
        FuzzerUtils.init(sArr, ((short) (-10685)));
        lArr[(i3 >>> 1) % N] += ((Test.instanceCount + i1) + (s & i2)) + ((-(s + i1)) * (s - i3));
        vMeth1();
        i12 = 1;
        do {
            i2 -= ((int) (Test.fFld));
            for (i13 = 1; i13 < 5; i13++) {
                dArr = dArr;
                try {
                    i3 = i3 / i1;
                    i14 = 14436 % Test.iArrFld[i13 + 1];
                    i14 = i1 / 30373;
                } catch (ArithmeticException a_e) {
                }
                i1 ^= ((int) (7295101284645582090L));
                i2 += i13;
                for (d = 1; d < 2; ++d) {
                    boolean b1 = true;
                    i14 = s;
                    Test.dFld -= i15;
                    sArr[i12 - 1] <<= ((short) (i14));
                    if (false) {
                        switch ((i12 % 7) + 10) {
                            case 10 :
                                i15 += i3;
                                Test.iArrFld[i13 - 1] = 8;
                                i14 ^= i2;
                                switch (((int) ((d % 1) + 119))) {
                                    case 119 :
                                }
                                i1 *= i15;
                                Test.iArrFld[((int) (d))] = ((int) (d));
                                i1 = i3;
                                break;
                            case 11 :
                                Test.iArrFld[i12] = i13;
                                Test.instanceCount |= Test.instanceCount;
                                Test.instanceCount = i2;
                                i3 += ((int) (d * d));
                                break;
                            case 12 :
                                Test.instanceCount += ((long) (d));
                                Test.iArrFld[(11 >>> 1) % N] *= 26018;
                                lArr[i13 + 1] <<= Test.instanceCount;
                                b1 = b1;
                                Test.dFld -= i1;
                                i3 -= i12;
                                break;
                            case 13 :
                                switch (((i12 % 2) * 5) + 107) {
                                    case 112 :
                                        lArr[i13 + 1] = i15;
                                        Test.fFld *= ((float) (31.111185));
                                        Test.instanceCount >>>= Test.instanceCount;
                                        Test.byFld += ((byte) (i1));
                                        break;
                                    case 114 :
                                        Test.fFld = i13;
                                }
                                break;
                            case 14 :
                                i2 = ((int) (0L));
                            case 15 :
                                Test.dFld += i12;
                            case 16 :
                                Test.instanceCount *= Test.byFld;
                                break;
                        }
                    } else {
                        i1 |= i2;
                    }
                }
            }
        } while ((++i12) < 101 );
        long meth_res = ((((((((((i1 + i2) + i3) + s) + i12) + i13) + i14) + Double.doubleToLongBits(d)) + i15) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return ((long) (meth_res));
    }

    public static void vMeth(int i) {
        int i16 = -6;
        int i17 = 4561;
        int i18 = -38;
        int i19 = -24;
        int i20 = -134;
        int i21 = -245;
        int i22 = -8;
        int i23 = -230;
        short s2 = -19776;
        long l = 77L;
        double d1 = 0.116234;
        double dArr1[] = new double[N];
        boolean b3 = true;
        boolean bArr[] = new boolean[N];
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr1, -1.43212);
        Test.instanceCount -= lMeth(-150, i, i) * 91;
        Test.instanceCount = i;
        Test.instanceCount *= i;
        i = Test.iFld;
        for (i16 = 6; i16 < 207; i16++) {
            Test.instanceCount -= i;
            Test.iFld = s2;
            for (l = 1; l < 3; ++l) {
                boolean b2 = false;
                Test.dFld += i18;
                s2 |= Test.byFld;
                Test.iFld -= i17;
                s2 -= ((short) (-11));
                b2 = b2;
            }
            Test.iArrFld[i16 + 1] *= ((int) (l));
            i18 = ((int) (Test.dFld));
            Test.instanceCount += i18;
            for (i19 = 1; i19 < 3; i19 += 3) {
                for (d1 = 1; 3 > d1; ++d1) {
                    Test.dFld += Test.instanceCount;
                }
                i17 += ((int) (l));
                if (true) {
                    bArr[i19] = b3;
                    i20 %= ((int) (Test.instanceCount | 1));
                    if (Test.iFld != 0) {
                        vMeth_check_sum += (((((((((((((i + i16) + i17) + s2) + l) + i18) + i19) + i20) + Double.doubleToLongBits(d1)) + i21) + (b3 ? 1 : 0)) + i22) + i23) + FuzzerUtils.checkSum(bArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
                        return;
                    }
                    i17 = ((int) (Test.instanceCount));
                    Test.lArrFld = Test.lArrFld;
                    for (i22 = i16; i22 < 3; ++i22) {
                        Test.dFld -= Test.iFld;
                        Test.fArrFld[i22] *= l;
                        dArr1 = dArr1;
                        i21 -= ((int) (Test.fFld));
                        Test.iFld -= i18;
                        i20 += Test.iFld;
                        i18 ^= Test.iFld1;
                        Test.instanceCount = Test.instanceCount;
                        i += i22 - i16;
                        {
                            final int ax$21 = Test.iFld2;
                            try {
                                Runtime ax$14 = null;
                                String[] ax$15 = new String[]{ "'{'", "'{", "{", "''", "}", "a", "'" };
                                File ax$16 = null;
                                char[] ax$18 = new char[]{ '疃', '씩', '棤', '꽡', '䆲', '놤' };
                                boolean ax$13 = false;
                                for (int ax$12 = -98; ax$12 < (-98 + 19802); ax$12 += 1) {
                                    Test.AxOutputRedirectionHelper.redirect();
                                    try {
                                        ax$14.exec("echo", ax$15, ax$16);
                                    } catch (Throwable ax$17) {
                                    } finally {
                                    }
                                    Test.AxOutputRedirectionHelper.recover();
                                    if (!ax$13) {
                                        i18 >>= 3;
                                        ax$13 = true;
                                    }
                                    Test.AxOutputRedirectionHelper.redirect();
                                    try {
                                        ax$18[iFld2] = ((char) (ax$18[20] + 2));
                                    } catch (Throwable ax$20) {
                                    } finally {
                                    }
                                    Test.AxOutputRedirectionHelper.recover();
                                }
                            } finally {
                                Test.iFld2 = ax$21;
                            }
                        }
                    }
                } else if (b3) {
                    i17 = i20;
                } else {
                    Test.iFld += Test.iFld;
                }
            }
        }
        vMeth_check_sum += (((((((((((((i + i16) + i17) + s2) + l) + i18) + i19) + i20) + Double.doubleToLongBits(d1)) + i21) + (b3 ? 1 : 0)) + i22) + i23) + FuzzerUtils.checkSum(bArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void mainTest(String[] strArr1) {
        if (Test.ax$0) {
            final int ax$3 = Test.iFld1;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                if (iFld1 > 0) {
                    iFld1--;
                }
            } catch (Throwable ax$2) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iFld1 = ax$3;
            return;
        }
        int i24 = -30881;
        int i25 = -14;
        int i26 = 11;
        int i27 = 37;
        int i28 = -59817;
        int i29 = 17;
        int i30 = 242;
        int i31 = -26;
        int i32 = 13;
        int i33 = 11760;
        int i34 = -4285;
        int i35 = 30754;
        short s3 = 2906;
        boolean b4 = false;
        boolean b5 = false;
        byte by1 = 116;
        byte byArr[] = new byte[N];
        double dArr2[] = new double[N];
        float fArr[][] = new float[N][N];
        FuzzerUtils.init(dArr2, -33.15377);
        FuzzerUtils.init(byArr, ((byte) (96)));
        FuzzerUtils.init(fArr, -125.116F);
        vMeth(Test.iFld);
        for (i24 = 5; i24 < 116; i24 += 2) {
            Test.iFld1 = ((int) (Test.instanceCount));
            Test.iArrFld1[i24] = Test.iFld;
            if (b4) {
                Test.iFld += i24 | i25;
                for (i26 = 4; i26 < 91; i26++) {
                    for (i28 = 1; i28 < 2; i28++) {
                        Test.byFld = ((byte) (Test.fFld));
                        Test.lArrFld[i26 + 1] = Test.instanceCount;
                        Test.iArrFld = FuzzerUtils.int1array(N, ((int) (0)));
                    }
                    Test.iArrFld[i24] += ((int) (Test.fFld));
                    for (i30 = 1; i30 < 2; i30++) {
                        Test.iFld = ((int) (Test.instanceCount));
                        Test.instanceCount += i30;
                        Test.instanceCount = i30;
                        s3 += ((short) (13 + (i30 * i30)));
                        Test.iFld2 += ((i30 * i28) + Test.instanceCount) - Test.fFld;
                        b4 = b4;
                        i29 += ((int) (-49L));
                        Test.instanceCount *= i27;
                        Test.instanceCount = -70;
                        if (b4)
                            continue;

                    }
                    Test.instanceCount *= i29;
                    Test.dFld += i27;
                    if (b4) {
                        Test.iFld = i25;
                        i25 *= s3;
                        dArr2[i24] = i28;
                        Test.lArrFld = Test.lArrFld;
                        try {
                            Test.iFld = 18285 % i30;
                            Test.iFld2 = Test.iArrFld1[i24 - 1] % (-215);
                            Test.iFld2 = i31 % 7797;
                        } catch (ArithmeticException a_e) {
                        }
                        Test.iFld3 = Test.iFld1;
                        for (i32 = 1; i32 < 2; i32++) {
                            s3 *= ((short) (Test.iFld1));
                            Test.iArrFld1[i32 + 1] += ((int) (Test.fFld));
                            i31 = i30;
                            Test.iFld += i32 * i25;
                            try {
                                i33 = 246 / i24;
                                i25 = (-6) / i30;
                                i25 = (-102) / i27;
                            } catch (ArithmeticException a_e) {
                            }
                            s3 += ((short) (Test.fFld));
                            i25 &= ((int) (-1032909561L));
                            if (b4) {
                                Test.lArrFld[i32 - 1] = i28;
                                s3 += ((short) (i32 * i32));
                                Test.iFld2 = i29;
                                i34 += 5;
                                Test.iFld3 >>>= ((int) (Test.instanceCount));
                                i25 *= ((int) (Test.dFld));
                                i29 |= i32;
                                Test.lArrFld[i24 + 1] >>= i32;
                                switch ((((i27 >>> 1) % 1) * 5) + 104) {
                                    case 108 :
                                        Test.instanceCount += i32 + Test.iFld2;
                                        break;
                                }
                                i25 = ((int) (Test.instanceCount));
                            } else if (b5) {
                                byArr[i26] = ((byte) (189));
                                switch ((((i32 >>> 1) % 9) * 5) + 116) {
                                    case 141 :
                                        i33 = i31;
                                        Test.iFld2 -= i29;
                                        s3 *= ((short) (i30));
                                        s3 += ((short) (236 + (i32 * i32)));
                                        Test.iArrFld1 = Test.iArrFld1;
                                        if (b5)
                                            continue;

                                    case 133 :
                                        switch (((i26 % 7) * 5) + 71) {
                                            case 73 :
                                                Test.instanceCount += -11L;
                                                Test.fFld -= Test.instanceCount;
                                                i25 += Test.iFld1;
                                                Test.fFld += (-10355) + (i32 * i32);
                                                break;
                                            case 75 :
                                                Test.fArrFld[i32] *= 2992947248L;
                                                Test.iArrFld[i26 - 1] *= i29;
                                                Test.byFld += ((byte) (((i32 * i33) + i27) - Test.instanceCount));
                                                i25 += -65480;
                                                b5 = b5;
                                                i34 += i32 - Test.instanceCount;
                                                dArr2[i26] = i26;
                                                Test.iFld1 = s3;
                                                i33 = ((int) (Test.instanceCount));
                                                by1 += ((byte) (182L));
                                            case 81 :
                                                Test.iFld3 += Test.iFld1;
                                                break;
                                            case 93 :
                                                fArr = fArr;
                                                break;
                                            case 90 :
                                                i31 = i26;
                                                break;
                                            case 83 :
                                                Test.fFld = Test.instanceCount;
                                                break;
                                            case 98 :
                                                Test.instanceCount -= Test.iFld3;
                                        }
                                        break;
                                    case 140 :
                                        i34 = Test.iFld1;
                                        break;
                                    case 156 :
                                        if (b4)
                                            continue;

                                        break;
                                    case 158 :
                                        Test.instanceCount = Test.iFld3;
                                        break;
                                    case 122 :
                                        Test.iArrFld[i26 - 1] >>>= i25;
                                    case 131 :
                                    case 138 :
                                        i25 += i27;
                                        break;
                                    case 153 :
                                        if (b4)
                                            continue;

                                        break;
                                    default :
                                        try {
                                            Test.iFld = i31 % i24;
                                            iFld4 = (-6176) / i34;
                                            i35 = Test.iArrFld1[i24] % 1083;
                                        } catch (ArithmeticException a_e) {
                                        }
                                }
                            }
                        }
                    } else if (b4) {
                        if (b5)
                            continue;

                    } else if (b4) {
                        i25 -= Test.byFld;
                    } else {
                        Test.iArrFld[i24] = i30;
                    }
                }
            } else if (b4) {
                Test.instanceCount /= 5;
            } else {
                i25 <<= i25;
            }
        }
        FuzzerUtils.out.println((((("i24 i25 i26 = " + i24) + ",") + i25) + ",") + i26);
        FuzzerUtils.out.println((((("i27 i28 i29 = " + i27) + ",") + i28) + ",") + i29);
        FuzzerUtils.out.println((((("i30 i31 s3 = " + i30) + ",") + i31) + ",") + s3);
        FuzzerUtils.out.println((((("b4 i32 i33 = " + (b4 ? 1 : 0)) + ",") + i32) + ",") + i33);
        FuzzerUtils.out.println((((("i34 b5 by1 = " + i34) + ",") + (b5 ? 1 : 0)) + ",") + by1);
        FuzzerUtils.out.println((((("i35 dArr2 byArr = " + i35) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2))) + ",") + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount) + ",") + Double.doubleToLongBits(Test.dFld)) + ",") + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println((((("Test.byFld Test.iFld Test.iFld1 = " + Test.byFld) + ",") + Test.iFld) + ",") + Test.iFld1);
        FuzzerUtils.out.println((((("Test.iFld2 Test.iFld3 iFld4 = " + Test.iFld2) + ",") + Test.iFld3) + ",") + iFld4);
        FuzzerUtils.out.println((((("Test.iArrFld Test.lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + FuzzerUtils.checkSum(Test.lArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld1));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                {
                    final int ax$11 = Test.iFld3;
                    try {
                        File ax$5 = null;
                        AtomicIntegerArray ax$7 = null;
                        for (int ax$4 = -434; ax$4 < (-434 + 8189); ax$4 += 1) {
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                if (!ax$5.exists()) {
                                    if (!ax$5.createNewFile());
                                }
                            } catch (Throwable ax$6) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                            Test.ax$0 = true;
                            _instance.mainTest(new String[]{ "s", "s", "s", "s" });
                            Test.ax$0 = false;
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                for (int ax$9 = 0; ax$9 < iFld3; ax$9++) {
                                    ax$7.lazySet(ax$9, -1);
                                }
                            } catch (Throwable ax$10) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                        }
                    } finally {
                        Test.iFld3 = ax$11;
                    }
                }
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}