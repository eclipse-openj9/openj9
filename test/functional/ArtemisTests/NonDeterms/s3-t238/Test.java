// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 7220201118216901637L;

    public static volatile float fFld = -90.500F;

    public short sFld = -28698;

    public static double dFld = -66.118032;

    public static volatile int iFld = -63620;

    public static short sFld1 = -5127;

    public static boolean bFld = false;

    public static int iFld1 = -4;

    public static byte byFld = 63;

    public boolean bFld1 = false;

    public static volatile int[] iArrFld = new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 10);
    }

    public static long vMeth_check_sum = 0;

    public static long dMeth_check_sum = 0;

    public static long sMeth_check_sum = 0;

    public static short sMeth(long l1, long l2) {
        int i5 = 7, i6 = 6314, i7 = 0, i8 = -2, i9 = 14, i11 = 0, i12 = 48054;
        boolean b = true;
        long[] lArr1 = new long[N];
        float[] fArr = new float[N];
        FuzzerUtils.init(lArr1, -23781L);
        FuzzerUtils.init(fArr, 103.645F);
        Test.iArrFld[(-1 >>> 1) % N] += (int) Test.dFld;
        lArr1[(Test.iFld >>> 1) % N] <<= i5;
        if (b) {
            i6 = 1;
            do {
                for (i7 = 1; 4 > i7; ++i7) {
                    int i10 = 172;
                    i8 += i7;
                    Test.fFld += (i7 * i7);
                    Test.iFld += (((i7 * i9) + Test.instanceCount) - Test.iFld);
                    i10 -= i10;
                    i5 = i7;
                    Test.iFld <<= 243;
                    i10 += i8;
                    i9 = Test.iFld;
                    fArr[i6] = Test.sFld1;
                    Test.iFld += (((i7 * Test.iFld) + i10) - l1);
                    switch((i6 % 6) + 13) {
                        case 13:
                            Test.instanceCount += (((i7 * i5) + i5) - Test.fFld);
                            Test.iArrFld[i6] = i10;
                            for (i11 = i6; i11 < 2; i11++) {
                                byte by = 14;
                                lArr1[i6 - 1] >>= by;
                                i8 += (int) -130L;
                                Test.sFld1 >>= (short) i8;
                                i10 = (int) l2;
                                i10 -= i10;
                                i5 += i11;
                                fArr[i6] += Test.iFld;
                                Test.instanceCount = (long) Test.fFld;
                                i8 = i11;
                                switch((i11 % 2) + 113) {
                                    case 113:
                                        Test.fFld += i8;
                                        i5 *= -55;
                                        l1 *= 163;
                                        Test.dFld *= 81;
                                        i5 *= i10;
                                        Test.dFld -= l1;
                                        Test.iArrFld[i6 + 1] += (int) Test.fFld;
                                        l2 += (long) Test.dFld;
                                        break;
                                    case 114:
                                }
                            }
                            break;
                        case 14:
                            i5 = -4;
                            break;
                        case 15:
                            if (i6 != 0) {
                            }
                            break;
                        case 16:
                            Test.dFld = i6;
                            break;
                        case 17:
                            Test.iFld -= (int) Test.dFld;
                        case 18:
                        default:
                            Test.iFld += (int) Test.instanceCount;
                    }
                }
            } while (++i6 < 157);
        } else {
            i8 *= i12;
        }
        long meth_res = l1 + l2 + i5 + i6 + i7 + i8 + i9 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        sMeth_check_sum += meth_res;
        return (short) meth_res;
    }

    public static double dMeth() {
        int i4 = -127, i13 = -10, i14 = -26914, i15 = 10057, i16 = -33235, i17 = -26322, i18 = 3, i19 = 12;
        byte by1 = 5;
        short[] sArr = new short[N];
        long[] lArr2 = new long[N];
        FuzzerUtils.init(sArr, (short) -30403);
        FuzzerUtils.init(lArr2, 7676219789134798472L);
        Test.dFld -= (-((-Math.min(i4, 33603)) - i4));
        i4 = sMeth(Test.instanceCount, Test.instanceCount);
        i13 = 1;
        while (++i13 < 169) {
            for (i14 = 1; i14 < 3; i14++) {
                for (i16 = 1; i16 < 2; i16++) {
                    Test.fFld = i4;
                    Test.iFld >>>= i15;
                    Test.sFld1 += (short) 9L;
                    i15 = (int) Test.instanceCount;
                    Test.iFld = (int) 94.267F;
                    i4 = Test.iFld;
                    sArr[i16] ^= by1;
                    Test.dFld += i14;
                    Test.iArrFld[i14] *= i16;
                    Test.instanceCount -= i14;
                    i17 += (int) Test.instanceCount;
                    Test.instanceCount += (-29558L + (i16 * i16));
                    Test.iFld += (-31935 + (i16 * i16));
                    lArr2 = lArr2;
                    Test.instanceCount = -49455;
                }
            }
            by1 = (byte) Test.fFld;
            for (i18 = 1; i18 < 3; i18 += 3) {
                i19 += (i18 - Test.instanceCount);
                i15 += (((i18 * i16) + i17) - Test.instanceCount);
                switch((i13 % 5) + 99) {
                    case 99:
                        i19 *= (int) Test.dFld;
                        Test.instanceCount = Test.instanceCount;
                        by1 <<= (byte) i4;
                        Test.instanceCount = i14;
                        i4 = 50303;
                        i17 *= (int) -12L;
                        Test.iArrFld[i13 - 1] -= i17;
                        i4 ^= (int) Test.instanceCount;
                        i15 = i19;
                        Test.instanceCount = Test.iFld;
                        Test.instanceCount = i17;
                        break;
                    case 100:
                        i17 = (int) Test.instanceCount;
                        break;
                    case 101:
                        Test.iArrFld[i18 - 1] += i16;
                        break;
                    case 102:
                        Test.fFld += i16;
                        break;
                    case 103:
                        Test.iArrFld[i18 + 1] = i16;
                        break;
                }
            }
        }
        long meth_res = i4 + i13 + i14 + i15 + i16 + i17 + by1 + i18 + i19 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr2);
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public void vMeth(double d, int i1, long l) {
        if (ax$25) {
            try {
                short[] ax$27 = new short[] { 20, 10, 0, -10, -20 };
                int ax$26 = 0x00400001;
                for (int ax$28 = 0; ax$28 < ax$26; ax$28++) {
                    ax$27[ax$28] = (short) ax$28;
                }
            } catch (Throwable ax$29) {
            } finally {
            }
            return;
        }
        int i2 = 12, i3 = 39, i20 = 4, i21 = -7, i22 = -150, i23 = 81;
        byte by2 = 34;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, 51419L);
        Test.fFld *= i1;
        sFld >>= (short) i1;
        for (i2 = 3; i2 < 190; ++i2) {
            i1 >>= (--i1);
            lArr[i2] = (long) (dMeth() * -8L);
            for (i20 = 3; i20 > 1; i20--) {
                Test.iFld += i20;
                l *= l;
                i21 -= -14;
                for (i22 = 1; i22 < 2; ++i22) {
                    i3 += (((i22 * by2) + sFld) - Test.iFld);
                    i21 -= i23;
                    l <<= i2;
                    l += -247;
                    if (true) {
                        i3 -= (int) Test.instanceCount;
                        Test.iFld += (i22 - i3);
                        Test.iArrFld = FuzzerUtils.int1array(N, (int) 3412);
                        if (true)
                            break;
                        Test.fFld += (i22 + Test.iFld);
                        Test.iArrFld[i2] = -2;
                        Test.bFld = Test.bFld;
                        vMeth_check_sum += Double.doubleToLongBits(d) + i1 + l + i2 + i3 + i20 + i21 + i22 + i23 + by2 + FuzzerUtils.checkSum(lArr);
                        return;
                    } else if (Test.bFld) {
                        i1 += (14 + (i22 * i22));
                        switch(((i22 >>> 1) % 3) + 81) {
                            case 81:
                                i3 -= sFld;
                                Test.instanceCount += (((i22 * l) + i2) - i21);
                                i3 += (25132 + (i22 * i22));
                                Test.iArrFld[i2 - 1] = i23;
                                Test.iArrFld[i20 - 1] -= i1;
                                Test.iFld += i22;
                                l = i23;
                                if (Test.bFld)
                                    break;
                                i23 = (int) Test.fFld;
                                Test.fFld += i22;
                                Test.iFld1 = i3;
                                i3 -= Test.iFld;
                                break;
                            case 82:
                                Test.iArrFld = Test.iArrFld;
                            case 83:
                                Test.instanceCount += (long) (1.668F + (i22 * i22));
                                break;
                        }
                    } else if (Test.bFld) {
                        Test.bFld = Test.bFld;
                    } else {
                        i23 = i1;
                    }
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i1 + l + i2 + i3 + i20 + i21 + i22 + i23 + by2 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {
        int i = -3, i24 = 34915, i25 = 7857, i26 = -162, i27 = -23, i28 = -10, i29 = 2, i30 = -33985, i31 = 62688, i32 = 7, i33 = -6, i34 = 205, i35 = 10;
        long l3 = 2605427931L, l4 = -4735314832160312499L, lArr3[] = new long[N];
        byte[] byArr = new byte[N];
        short[] sArr1 = new short[N];
        double[] dArr = new double[N];
        FuzzerUtils.init(byArr, (byte) 50);
        FuzzerUtils.init(lArr3, -135L);
        FuzzerUtils.init(sArr1, (short) 13595);
        FuzzerUtils.init(dArr, 0.64339);
        Test.fFld += ((9 + i) - ((i--) + Test.fFld));
        {
            java.io.PrintStream ax$32 = System.out;
            java.io.PrintStream ax$33 = System.err;
            java.io.PrintStream ax$34 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$34);
            System.setErr(ax$34);
            try {
                ax$25 = true;
                for (int ax$30 = 0; ax$30 < 8739; ax$30 += 1) vMeth(0.883668376019014, -1998816768, 1362934723546067882L);
            } catch (java.lang.Throwable ax$31) {
            } finally {
                ax$25 = false;
            }
            System.setOut(ax$32);
            System.setErr(ax$33);
        }
        vMeth(Test.dFld, Test.iFld1, Test.instanceCount);
        for (i24 = 10; i24 < 170; i24++) {
            Test.iFld1 += (((i24 * Test.byFld) + i25) - i);
            for (i26 = 1; i26 < 32; i26 += 2) {
                i = i24;
                Test.fFld += (i26 + Test.iFld);
                l3 = 1;
                while (++l3 < 3) {
                    i27 -= i26;
                    Test.instanceCount *= i25;
                    i = -242;
                    try {
                        i25 = (67169624 / Test.iFld1);
                        i = (i25 / Test.iFld1);
                        i25 = (i24 % 120);
                    } catch (ArithmeticException a_e) {
                    }
                    Test.dFld += i;
                    Test.instanceCount %= (Test.instanceCount | 1);
                    Test.instanceCount >>>= -55;
                    try {
                        i = (Test.iFld / 62988);
                        i25 = (i % i24);
                        Test.iFld1 = (Test.iFld / -1574555359);
                    } catch (ArithmeticException a_e) {
                    }
                    if (Test.bFld)
                        continue;
                    i27 = i24;
                    i += (int) l3;
                    i += (int) (l3 ^ Test.instanceCount);
                }
                {
                    java.io.PrintStream ax$6 = System.out;
                    java.io.PrintStream ax$7 = System.err;
                    java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$8);
                    System.setErr(ax$8);
                    try {
                        for (int ax$4 = -2313; ax$4 < 6857; ax$4 += 1) {
                            try {
                                long[] ax$1 = { // Long-range values
                                // Long-range values
                                // Long-range values
                                // Long-range values
                                // Long-range values
                                0L, // Long-range values
                                1L, // Long-range values
                                2L, // Long-range values
                                3L, // Long-range values
                                99999L, // Long-range values
                                100000L, // Long-range values
                                999999L, // Long-range values
                                100000L, // Long-range values
                                999999999L, // Long-range values
                                1000000000L, // Long-range values
                                0x1234_5678L, // Long-range values
                                0x8000_0000L, // Long-range values
                                0x8000_0001L, // Long-range values
                                0x8000_0002L, 0x8000_0003L, 0x8765_4321L, 0xFFFF_FFFEL, 0xFFFF_FFFFL, 999_999_999_999L, 1_000_000_000_000L, 999_999_999_999_999_999L, 1_000_000_000_000_000_000L, 0xFFFF_FFFF_FFFF_FFFEL, 0xFFFF_FFFF_FFFF_FFFFL };
                                long[] ax$0 = new long[] { 0x1122334455667788L, 0x8877665544332211L, 0L, 1L, -1l };
                                for (int ax$2 = 0; ax$2 < ax$0.length; ax$2++) {
                                    ax$0[ax$2] = ax$1[20] - 7;
                                }
                            } catch (Throwable ax$3) {
                            } finally {
                            }
                        }
                    } catch (Throwable ax$5) {
                    }
                    System.setOut(ax$6);
                    System.setErr(ax$7);
                }
                i = i25;
            }
            for (i28 = 1; i28 < 32; i28++) {
                for (i30 = 1; i30 < 2; i30++) {
                    Test.fFld = i29;
                    Test.iFld1 = 13581;
                    i += i30;
                    Test.iArrFld[i24 - 1] |= i24;
                    i31 += (i30 * i30);
                    Test.bFld = Test.bFld;
                    Test.instanceCount >>>= i27;
                }
                Test.dFld *= Test.iFld1;
                Test.instanceCount += i30;
                Test.iFld1 += (-9 + (i28 * i28));
                i25 >>= i30;
                i31 += i32;
                Test.fFld -= Test.fFld;
                Test.fFld -= 175;
                Test.iFld1 += (-170 + (i28 * i28));
                i25 += i;
                for (i33 = 1; i33 < 2; ++i33) {
                    if (Test.bFld) {
                        byArr[i33 + 1] = (byte) i;
                        Test.dFld = -33.701F;
                        Test.iArrFld[i28] >>= i;
                        i27 = i28;
                        i31 = (int) 1075602320L;
                        i29 += (int) Test.fFld;
                        i -= -765;
                        i32 += (i33 * i33);
                        Test.dFld += -6L;
                        Test.fFld = i30;
                    } else if (false) {
                        lArr3[i28 + 1] = i29;
                        if (Test.bFld) {
                            i25 += (int) (-1.1014F + (i33 * i33));
                            Test.bFld = Test.bFld;
                            if (Test.bFld) {
                                if (Test.bFld) {
                                    l4 >>= i32;
                                    i29 += Test.sFld1;
                                    sArr1[i28] += (short) Test.fFld;
                                    Test.fFld = i33;
                                    if (false) {
                                        if (Test.bFld) {
                                            i27 = (int) Test.fFld;
                                            lArr3[i28 + 1] = i30;
                                            Test.instanceCount = i35;
                                            sFld += (short) (64 + (i33 * i33));
                                        }
                                        i31 ^= i30;
                                        l4 += (i33 * i33);
                                        dArr[i24 - 1] -= i34;
                                        i35 >>= (int) l3;
                                        i35 = 9;
                                        i29 *= (int) Test.fFld;
                                        i29 += i30;
                                        i34 *= (int) Test.fFld;
                                    } else if (Test.bFld) {
                                        if (Test.bFld)
                                            break;
                                    } else {
                                        i31 += (int) Test.instanceCount;
                                    }
                                } else {
                                    Test.bFld = Test.bFld;
                                }
                            } else if (false) {
                                i31 = i24;
                            } else {
                                Test.dFld *= Test.byFld;
                            }
                        } else {
                            bFld1 = true;
                        }
                    } else {
                        sFld += (short) (i33 * i33);
                    }
                }
            }
        }
        FuzzerUtils.out.println("i i24 i25 = " + i + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 l3 = " + i26 + "," + i27 + "," + l3);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 l4 i35 = " + i34 + "," + l4 + "," + i35);
        FuzzerUtils.out.println("byArr lArr3 sArr1 = " + FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(lArr3) + "," + FuzzerUtils.checkSum(sArr1));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("Test.instanceCount Test.fFld sFld = " + Test.instanceCount + "," + Float.floatToIntBits(Test.fFld) + "," + sFld);
        FuzzerUtils.out.println("Test.dFld Test.iFld Test.sFld1 = " + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld + "," + Test.sFld1);
        FuzzerUtils.out.println("Test.bFld Test.iFld1 Test.byFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld1 + "," + Test.byFld);
        FuzzerUtils.out.println("bFld1 Test.iArrFld = " + (bFld1 ? 1 : 0) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
            {
                java.io.PrintStream ax$22 = System.out;
                java.io.PrintStream ax$23 = System.err;
                java.io.PrintStream ax$24 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$24);
                System.setErr(ax$24);
                try {
                    for (int ax$20 = -4147; ax$20 < 3381; ax$20 += 1) {
                        int ax$17 = iFld1;
                        int ax$18 = iFld;
                        try {
                            int[] ax$12 = new int[8];
                            int[] ax$13 = { 0, 1, 2, 3, 0x1234_5678, 0x8000_0000, 0x8000_0001, 0x8000_0002, 0x8000_0003, 0x8765_4321, 0xFFFF_FFFE, 0xFFFF_FFFF };
                            int[] ax$10 = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
                            int[] ax$11 = new int[] { 71994000, 71994000, 12000, 71994000, 71994000, 144000000, 144000000, 72018000, 144000000, 144000000, 71994000, 71994000, 12000, 71994000, 71994000, 72000000, 72000000, 36006000, 72000000, 72000000, 144012000, 144012000, 72030000, 144012000, 144012000, 72000000, 72000000, 36006000, 72000000, 72000000, 499501, 499501, 499501, 499501, 499501, 1000002, 1000002, 1000002, 1000002, 1000002, 499501, 499501, 499501, 499501, 499501, 1001, 1001, 1001, 1001, 1001, 3002, 3002, 3002, 3002, 3002, 1001, 1001, 1001, 1001, 1001, 501, 501, 501, 501, 501, 1502, 1502, 1502, 1502, 1502 };
                            int ax$16 = -11;
                            int ax$14 = 0x7fbfffff;
                            int ax$15 = 26295;
                            int ax$9 = (int) (iFld + ax$14);
                            ax$15 += ax$9;
                            ax$10[ax$14] = ax$9;
                            ax$11[ax$14] = (int) ax$16;
                            ax$12[ax$14] = (int) -ax$16;
                            ax$13[ax$14] = (int) iFld1;
                        } catch (Throwable ax$19) {
                        } finally {
                            iFld1 = ax$17;
                            iFld = ax$18;
                        }
                    }
                } catch (Throwable ax$21) {
                }
                System.setOut(ax$22);
                System.setErr(ax$23);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$25 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  dMeth ->  dMeth vMeth mainTest
// DEBUG  sMeth ->  sMeth dMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
