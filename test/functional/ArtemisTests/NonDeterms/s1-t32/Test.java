// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = -6L;

    public static volatile double dFld = -94.63998;

    public static int iFld = -194;

    public static long lFld = 2L;

    public static short sFld = 32472;

    public static float fFld = 0.895F;

    public volatile int iFld1 = 6;

    public static long[][] lArrFld = new long[N][N];

    public static int[] iArrFld = new int[N];

    public static float[] fArrFld = new float[N];

    public static double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 212L);
        FuzzerUtils.init(Test.iArrFld, 25087);
        FuzzerUtils.init(Test.fArrFld, 61.505F);
        FuzzerUtils.init(Test.dArrFld, 1.1130);
    }

    public static long vSmallMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static void vSmallMeth(long l) {
        if (ax$760) {
            try {
                long ax$762 = 479832084L;
                long ax$761 = 0xFFFFFFFFL;
                if (ax$761 != ax$762)
                    ;
            } catch (Throwable ax$763) {
            } finally {
            }
            return;
        }
        int i = 30263;
        short s = 10711;
        i *= (int) (((Test.dFld + l) + (Test.instanceCount + s)) + (-(i - i)));
        vSmallMeth_check_sum += l + i + s;
    }

    public static int iMeth1(float f, int i8) {
        long l2 = -2L, lArr1[] = new long[N];
        int i9 = -123, i10 = -113, i11 = -11, i12 = -103, i13 = -12, i14 = -45635, i15 = 8, i16 = -57067, i17 = 152;
        boolean b = true;
        byte by = 32;
        double[] dArr = new double[N];
        FuzzerUtils.init(dArr, 1.57060);
        FuzzerUtils.init(lArr1, 0L);
        Test.iFld = 4;
        for (l2 = 2; 88 > l2; ++l2) {
            Test.iFld = Test.iFld;
            for (i10 = (int) (l2); i10 < 6; ++i10) {
                i8 -= (int) l2;
                if (b)
                    break;
                dArr[i10 + 1] -= l2;
                i11 = (int) Test.lFld;
            }
            if (true) {
                Test.lArrFld[(int) (l2)][(int) (l2 + 1)] >>= Test.iFld;
                Test.iFld -= (int) Test.instanceCount;
                Test.iArrFld[(int) (l2)] >>>= i8;
                for (i12 = 1; i12 < 6; ++i12) {
                    i8 += (int) Test.instanceCount;
                    Test.iArrFld[(int) (l2 + 1)] <<= (int) l2;
                    Test.fArrFld[(int) (l2 + 1)] = i10;
                }
                Test.lFld += (((l2 * Test.iFld) + i11) - i14);
                if (b)
                    continue;
                i13 = i14;
                i9 *= i11;
                Test.iFld >>>= Test.iFld;
                i11 = i14;
                for (i15 = 1; i15 < 6; i15++) {
                    i16 += (((i15 * f) + i11) - l2);
                    Test.iArrFld[(int) (l2 - 1)] += i14;
                    Test.lArrFld[i15 + 1][i15] = -15718;
                    i9 = (int) f;
                    Test.instanceCount *= l2;
                    switch((i15 % 7) + 125) {
                        case 125:
                            i14 = (int) Test.dFld;
                            Test.iArrFld[i15 - 1] *= by;
                            switch(((i15 % 1) * 5) + 95) {
                                case 100:
                                    i8 += (i15 * l2);
                                    i17 = 1;
                                    do {
                                        i14 = i15;
                                    } while (++i17 < 2);
                                    Test.dFld += -34.95188;
                                    Test.lFld += (i15 + i10);
                                    break;
                            }
                        case 126:
                            i8 = i8;
                            break;
                        case 127:
                            Test.iArrFld[(int) (l2 - 1)] += i10;
                            break;
                        case 128:
                            Test.iArrFld[(int) (l2 - 1)] = 26166;
                            break;
                        case 129:
                            if (i14 != 0) {
                            }
                        case 130:
                            by += (byte) (i15 * i15);
                        case 131:
                            Test.iArrFld[i15 - 1] >>= i11;
                            break;
                        default:
                            Test.iArrFld[i15] = i10;
                    }
                }
                {
                    java.io.PrintStream ax$7 = System.out;
                    java.io.PrintStream ax$8 = System.err;
                    java.io.PrintStream ax$9 = new java.io.PrintStream(new java.io.OutputStream() {

                        @Override
                        public void write(int b) throws java.io.IOException {
                            // DO NOTHING: DISCARD ALL OUTPUTS
                        }
                    });
                    System.setOut(ax$9);
                    System.setErr(ax$9);
                    try {
                        for (int ax$5 = -1444; ax$5 < 4302; ax$5 += 1) {
                            int ax$2 = i9;
                            int ax$3 = i11;
                            try {
                                int[] ax$0 = new int[8];
                                for (int ax$1 = 1; ax$0[ax$1] != 0; ++ax$1) {
                                    i9 -= i11;
                                    i11 += ax$0[ax$1];
                                }
                            } catch (Throwable ax$4) {
                            } finally {
                                i9 = ax$2;
                                i11 = ax$3;
                            }
                        }
                    } catch (Throwable ax$6) {
                    }
                    System.setOut(ax$7);
                    System.setErr(ax$8);
                }
            } else {
                i9 = (int) f;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i8 + l2 + i9 + i10 + i11 + (b ? 1 : 0) + i12 + i13 + i14 + i15 + i16 + by + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(int i6, int i7, long l1) {
        if (ax$769) {
            try {
                java.lang.String ax$770 = "new";
                java.lang.String ax$771 = "2.158632457669644E+22";
                if (ax$770.compareToIgnoreCase(ax$771) > 0)
                    ;
            } catch (Throwable ax$772) {
            } finally {
            }
            return 1107091266;
        }
        int i18 = -50082, i19 = 5, i20 = -2, i21 = 13, i22 = -13, i23 = -196, i24 = 806, i25 = -13, i26 = 145;
        float f1 = -1.544F, f2 = -2.400F;
        boolean b1 = true;
        i6 = Test.iArrFld[(i7 >>> 1) % N];
        Test.lArrFld[(Test.iFld >>> 1) % N] = Test.lArrFld[(i6 >>> 1) % N];
        iMeth1(48.685F, i6);
        for (i18 = 14; i18 < 234; i18++) {
            for (i20 = i18; 3 > i20; i20++) {
                i21 -= (int) f1;
            }
            for (i22 = 1; i22 < 3; ++i22) {
                Test.dFld = f1;
                Test.iArrFld[i18 - 1] = (int) f1;
                Test.iArrFld[i22] += i7;
                l1 += i22;
                f1 += i22;
                b1 = b1;
                i19 += (((i22 * i6) + i19) - Test.lFld);
                i23 *= (int) Test.instanceCount;
                Test.instanceCount += (((i22 * Test.lFld) + i7) - i20);
                i19 -= (int) f1;
                i19 |= -12414;
                i7 ^= (int) Test.instanceCount;
                i19 += i22;
                i23 -= i19;
            }
            for (i24 = 1; i24 < 3; ++i24) {
                i6 = (int) -1382852025L;
                if (b1)
                    continue;
                i7 += i24;
                for (f2 = 1; f2 < 2; ++f2) {
                    i21 += i7;
                    i21 = -64795;
                    Test.dFld -= i6;
                    i21 -= (int) Test.instanceCount;
                    Test.iFld = (int) Test.lFld;
                    i19 = (int) 1610885994L;
                    f1 *= i24;
                }
            }
            Test.iFld = (int) 1.7839;
            Test.iArrFld[i18 - 1] >>= 66;
            i26 += i20;
            Test.instanceCount = -8;
        }
        long meth_res = i6 + i7 + l1 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f1) + i22 + i23 + (b1 ? 1 : 0) + i24 + i25 + Float.floatToIntBits(f2) + i26;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(int i2) {
        if (ax$778) {
            int ax$781 = i2;
            int ax$782 = iFld;
            long ax$783 = iMeth1_check_sum;
            try {
                java.lang.String ax$780 = "8.242052739990580E-44";
                java.lang.String ax$779 = "2.517200889984344E+17";
                if (iFld >= 0) {
                    ax$780 = ax$779.substring(0, iFld) + ax$779.substring(iFld + 1, i2);
                    iMeth1_check_sum -= 4 * (i2 - iFld - 1);
                } else {
                    ax$780 = ax$779.substring(0, i2);
                }
            } catch (Throwable ax$784) {
            } finally {
                i2 = ax$781;
                iFld = ax$782;
                iMeth1_check_sum = ax$783;
            }
            return;
        }
        int i3 = 128, i4 = -14, i5 = -3, i27 = 4, i28 = 57, i29 = -232, i30 = 94, iArr[] = new int[N];
        short s1 = -12997;
        double d1 = 84.8382;
        boolean b2 = true;
        byte by1 = 105;
        float[] fArr = new float[N];
        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(fArr, 0.317F);
        for (i3 = 110; 1 < i3; i3--) {
            Test.instanceCount = (iArr[i3 + 1] + Test.instanceCount);
            Test.iFld += (int) (-(Math.max(i2, i3) * fArr[i3 - 1]));
            i5 = 1;
            while (++i5 < 5) {
                float f3 = 0.34F;
                Test.instanceCount = (iMeth(i2, i3, Test.lFld) * 0);
                Test.dFld = f3;
                i2 = Test.iFld;
                i4 += (i5 + f3);
                i2 += (38 + (i5 * i5));
                fArr[i5 - 1] -= i4;
                Test.iArrFld[i3] -= s1;
                i27 = 1;
                while (++i27 < 1) {
                    i4 = i5;
                    Test.iFld = i2;
                }
                for (d1 = 1; d1 < 1; ++d1) {
                    f3 = s1;
                    f3 += (float) d1;
                    Test.iFld = i4;
                    Test.instanceCount |= i3;
                    i4 += (int) (d1 + i4);
                    Test.fArrFld[(int) (d1)] = Test.lFld;
                    Test.iFld -= -27756;
                    Test.dFld = i2;
                    Test.lFld = Test.lFld;
                    if (i27 != 0) {
                        vMeth_check_sum += i2 + i3 + i4 + i5 + s1 + i27 + Double.doubleToLongBits(d1) + i28 + i29 + i30 + (b2 ? 1 : 0) + by1 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                }
                i4 = i5;
                for (i29 = 1; 1 > i29; i29++) {
                    Test.lFld = i30;
                    i30 += i29;
                    iArr[i3 + 1] += 34557;
                    i30 >>>= Test.iFld;
                    if (b2)
                        continue;
                    if (i3 != 0) {
                        vMeth_check_sum += i2 + i3 + i4 + i5 + s1 + i27 + Double.doubleToLongBits(d1) + i28 + i29 + i30 + (b2 ? 1 : 0) + by1 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    f3 -= i29;
                    i28 = by1;
                    Test.iFld += (12869 + (i29 * i29));
                    Test.sFld >>= (short) i29;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + s1 + i27 + Double.doubleToLongBits(d1) + i28 + i29 + i30 + (b2 ? 1 : 0) + by1 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {
        double d = 1.64011;
        int i1 = -9057, i31 = 12801, i32 = 219, i33 = 168, i34 = -11694, i35 = 49690, i36 = -176;
        byte by2 = -104;
        boolean b3 = false;
        long[][] lArr = new long[N][N];
        FuzzerUtils.init(lArr, -2263L);
        for (int smallinvoc = 0; smallinvoc < 686; smallinvoc++) vSmallMeth((long) (-10.14F + Double.longBitsToDouble(Test.instanceCount * Test.iFld)));
        Test.iFld = Test.iFld;
        for (d = 4; 121 > d; d++) {
            i1 >>= Test.iFld;
            lArr = (lArr = (Test.lArrFld = (lArr = lArr)));
            {
                java.io.PrintStream ax$766 = System.out;
                java.io.PrintStream ax$767 = System.err;
                java.io.PrintStream ax$768 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$768);
                System.setErr(ax$768);
                try {
                    ax$760 = true;
                    for (int ax$764 = 0; ax$764 < 5596; ax$764 += 1) vSmallMeth(-4285308509791781387L);
                } catch (java.lang.Throwable ax$765) {
                } finally {
                    ax$760 = false;
                }
                System.setOut(ax$766);
                System.setErr(ax$767);
            }
            vSmallMeth(i1 * (Test.instanceCount -= (i1 ^= i1)));
            {
                java.io.PrintStream ax$787 = System.out;
                java.io.PrintStream ax$788 = System.err;
                java.io.PrintStream ax$789 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$789);
                System.setErr(ax$789);
                try {
                    ax$778 = true;
                    for (int ax$785 = 0; ax$785 < 8489; ax$785 += 1) vMeth(337594930);
                } catch (java.lang.Throwable ax$786) {
                } finally {
                    ax$778 = false;
                }
                System.setOut(ax$787);
                System.setErr(ax$788);
            }
            vMeth(i1);
            i1 -= Test.iFld;
        }
        Test.lFld = i1;
        i1 *= i1;
        for (i31 = 2; 178 > i31; i31++) {
            Test.dFld *= i31;
            Test.fFld += -218;
            Test.lArrFld[i31][i31 + 1] *= (long) Test.fFld;
            i32 /= 76;
            switch(((i31 % 5) * 5) + 92) {
                case 94:
                    i32 = (int) Test.instanceCount;
                    Test.dArrFld = Test.dArrFld;
                    break;
                case 108:
                    i32 += i31;
                    for (i33 = i31; 29 > i33; i33++) {
                        try {
                            Test.iArrFld[i31] = (-5 / i1);
                            Test.iArrFld[i31] = (i32 % i34);
                            i1 = (Test.iFld / 251);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.iArrFld = Test.iArrFld;
                        Test.iArrFld[i33] += Test.iFld;
                        Test.sFld = (short) i34;
                        by2 += (byte) (15732 + (i33 * i33));
                        i35 = 1;
                        while (--i35 > 0) {
                            switch(((Test.iFld >>> 1) % 5) + 101) {
                                case 101:
                                case 102:
                                case 103:
                                    i32 = by2;
                                    i34 = (int) -6473233459656899709L;
                                    i32 *= Test.iFld;
                                    Test.iFld *= -1;
                                    Test.iFld = i35;
                                    break;
                                case 104:
                                    Test.fArrFld[i31 - 1] -= Test.lFld;
                                    if (b3) {
                                        switch(((Test.iFld >>> 1) % 4) + 87) {
                                            case 87:
                                                try {
                                                    Test.iArrFld[i33 + 1] = (-1 / i1);
                                                    i32 = (5526 % i32);
                                                    i34 = (Test.iArrFld[i33] / 994543021);
                                                } catch (ArithmeticException a_e) {
                                                }
                                                Test.iFld = (int) Test.fFld;
                                                Test.lFld = (long) Test.fFld;
                                                Test.iFld += i35;
                                                break;
                                            case 88:
                                                if (b3)
                                                    break;
                                                i1 += (int) (0.769F + (i35 * i35));
                                                Test.instanceCount >>>= Test.instanceCount;
                                                Test.iArrFld[i31 - 1] -= 244;
                                                Test.iArrFld[i35 - 1] = (int) Test.lFld;
                                                switch((i31 % 1) + 52) {
                                                    case 52:
                                                        i34 -= -14;
                                                        Test.iFld -= (int) Test.dFld;
                                                        Test.dFld = i34;
                                                        Test.fFld *= i33;
                                                        i34 <<= -27978;
                                                        i1 += i1;
                                                        i1 -= (int) -61L;
                                                        Test.iArrFld[i35] = (int) Test.instanceCount;
                                                        i32 += (int) Test.lFld;
                                                        i34 += (int) 21L;
                                                        if (b3) {
                                                            i32 = (int) 2.437F;
                                                            Test.iFld *= 18694;
                                                            Test.iArrFld[i35] >>= (int) Test.instanceCount;
                                                            Test.fFld -= Test.fFld;
                                                            lArr[i33 + 1][i35] += (long) Test.fFld;
                                                            Test.iArrFld[i31 + 1] += (int) Test.instanceCount;
                                                            i34 += (i35 * iFld1);
                                                            Test.lFld = i35;
                                                            Test.dFld += -4098996840L;
                                                            iFld1 -= i33;
                                                            switch((i35 % 8) + 98) {
                                                                case 98:
                                                                    if (b3)
                                                                        continue;
                                                                    Test.instanceCount -= i32;
                                                                    if (b3)
                                                                        break;
                                                                    Test.instanceCount >>= Test.sFld;
                                                                    Test.iArrFld[i31 + 1] -= i1;
                                                                    Test.iArrFld[i35] *= i1;
                                                                    i34 = (int) Test.lFld;
                                                                    break;
                                                                case 99:
                                                                    Test.instanceCount *= Test.instanceCount;
                                                                    break;
                                                                case 100:
                                                                    Test.iArrFld[i31 - 1] >>>= i34;
                                                                    break;
                                                                case 101:
                                                                case 102:
                                                                    Test.iArrFld = Test.iArrFld;
                                                                case 103:
                                                                    iFld1 &= i34;
                                                                case 104:
                                                                    Test.lFld += (((i35 * i35) + i33) - i35);
                                                                    break;
                                                                case 105:
                                                                    i32 -= i33;
                                                                    break;
                                                                default:
                                                                    Test.fArrFld[i33 - 1] = Test.sFld;
                                                            }
                                                        } else if (b3) {
                                                            Test.fFld = i34;
                                                        } else if (b3) {
                                                            Test.iFld = i35;
                                                        }
                                                        break;
                                                    default:
                                                        iFld1 *= (int) Test.fFld;
                                                }
                                            case 89:
                                                Test.lArrFld[i31][i35] = 119;
                                                break;
                                            case 90:
                                                if (b3)
                                                    continue;
                                                break;
                                        }
                                    }
                                    break;
                                case 105:
                                    Test.iFld = (int) Test.lFld;
                                    break;
                                default:
                                    i34 *= i35;
                            }
                        }
                    }
                    {
                        java.io.PrintStream ax$757 = System.out;
                        java.io.PrintStream ax$758 = System.err;
                        java.io.PrintStream ax$759 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$759);
                        System.setErr(ax$759);
                        try {
                            for (int ax$755 = -1675; ax$755 < 3574; ax$755 += 1) {
                                try {
                                    long ax$752 = 9223371487098961920L;
                                    long ax$753 = 5592328L;
                                    if (ax$752 != ax$753)
                                        ;
                                } catch (Throwable ax$754) {
                                } finally {
                                }
                            }
                        } catch (Throwable ax$756) {
                        }
                        System.setOut(ax$757);
                        System.setErr(ax$758);
                    }
                    break;
                case 96:
                    Test.iArrFld[i31 + 1] -= i1;
                    break;
                case 113:
                    i36 += (-7 + (i31 * i31));
                    break;
                case 104:
                    iFld1 -= (int) 1.958F;
                    break;
                default:
                    Test.instanceCount += Test.iFld;
            }
        }
        FuzzerUtils.out.println("d i1 i31 = " + Double.doubleToLongBits(d) + "," + i1 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("by2 i35 b3 = " + by2 + "," + i35 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("i36 lArr = " + i36 + "," + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.lFld Test.sFld Test.fFld = " + Test.lFld + "," + Test.sFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("iFld1 Test.lArrFld Test.iArrFld = " + iFld1 + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$760 = false;

    private static Boolean ax$769 = false;

    private static Boolean ax$778 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
