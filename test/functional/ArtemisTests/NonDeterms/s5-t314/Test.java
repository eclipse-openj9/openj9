// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Locale.LanguageRange;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -26346L;

    public static byte byFld = -69;

    public static boolean bFld = true;

    public static volatile short sFld = -3083;

    public static float fArrFld[] = new float[N];

    public long lArrFld[] = new long[N];

    public short sArrFld[] = new short[N];

    public int iArrFld[] = new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.66F);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {
        int i5 = 0;
        int i6 = 37591;
        int i7 = 235;
        int i8 = 19076;
        int i9 = 0;
        int i10 = -108;
        int i11 = 8;
        int i12 = 4;
        int i13 = -9;
        int i14 = -16881;
        int iArr[][] = new int[N][N];
        float f = -66.792F;
        float f1 = -2.555F;
        short s = 26602;
        double d1 = 1.70281;
        double dArr[] = new double[N];
        FuzzerUtils.init(iArr, -2);
        FuzzerUtils.init(dArr, 17.100533);
        Test.instanceCount -= i5;
        for (i6 = 8; 144 > i6; i6++) {
            i5 += i7;
            for (f = i6; 4 > f; ++f) {
                Test.instanceCount <<= Test.instanceCount;
                i7 -= ((int) (-1.62337));
                f1 = i6;
                i5 -= i5;
                for (i9 = i6; 1 > i9; ++i9) {
                    Test.instanceCount = Test.instanceCount;
                    i10 <<= ((int) (Test.instanceCount));
                    i8 -= -12;
                    f1 *= i6;
                }
            }
            for (i11 = 1; i11 < 4; ++i11) {
                Test.byFld -= ((byte) (i11));
                i5 += i11 ^ i12;
                try {
                    i10 = i5 % i7;
                    iArr[i11 - 1][i11 - 1] = i9 / 26200;
                    i7 = (-30881) / i12;
                } catch (ArithmeticException a_e) {
                }
                for (i13 = 1; i13 < 2; i13++) {
                    i12 += i7;
                    s *= ((short) (Test.instanceCount));
                    i8 -= -247;
                    i12 += ((i13 * i13) + Test.instanceCount) - i8;
                    Test.instanceCount >>= i5;
                    i10 *= i8;
                    switch (((i11 % 1) * 5) + 23) {
                        case 28 :
                        default :
                            switch ((i13 % 9) + 39) {
                                case 39 :
                                    Test.fArrFld[i6] += i11;
                                    Test.instanceCount *= i10;
                                    i5 *= ((int) (Test.instanceCount));
                                    dArr[i6] *= i7;
                                    f1 += (-4461) + (i13 * i13);
                                    i10 += i13 + Test.byFld;
                                    iArr[i11][i11 - 1] -= i7;
                                    Test.instanceCount += i13 - Test.instanceCount;
                                    i12 = i6;
                                    i7 += ((int) (Test.instanceCount));
                                    iArr[i11][i6 + 1] -= ((int) (Test.instanceCount));
                                    break;
                                case 40 :
                                    if (false)
                                        continue;

                                case 41 :
                                    i8 -= ((int) (Test.instanceCount));
                                    break;
                                case 42 :
                                    i7 <<= ((int) (Test.instanceCount));
                                    break;
                                case 43 :
                                    iArr[i6 + 1][i11] = i11;
                                    break;
                                case 44 :
                                    i8 = i7;
                                    break;
                                case 45 :
                                    d1 -= i12;
                                case 46 :
                                    i7 += i13;
                                    break;
                                case 47 :
                                    d1 += i13;
                                    break;
                                default :
                                    i14 = 20093;
                            }
                    }
                }
            }
        }
        vMeth1_check_sum += ((((((((((((((i5 + i6) + i7) + Float.floatToIntBits(f)) + i8) + Float.floatToIntBits(f1)) + i9) + i10) + i11) + i12) + i13) + i14) + s) + Double.doubleToLongBits(d1)) + FuzzerUtils.checkSum(iArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public int iMeth(int i3, int i4) {
        int i15 = -10;
        int i16 = 43338;
        int i17 = -62477;
        int i18 = 9;
        int i19 = 0;
        int i20 = -8;
        int i21 = -8;
        int i22 = 103;
        int iArr1[] = new int[N];
        float f2 = 0.627F;
        boolean b = false;
        long lArr[][] = new long[N][N];
        FuzzerUtils.init(iArr1, -4959);
        FuzzerUtils.init(lArr, 14106L);
        vMeth1();
        i3 <<= i3;
        {
            final boolean ax$9 = Test.bFld;
            final boolean ax$10 = b;
            final int ax$11 = i19;
            try {
                char[] ax$2 = new char[]{ ((char) (0xf3f4)) };
                byte[] ax$3 = new byte[]{ ((byte) (-67)), ((byte) (57)), ((byte) (-45)), ((byte) (104)), ((byte) (-58)), ((byte) (80)), ((byte) (73)), ((byte) (112)) };
                byte[] ax$4 = new byte[]{ ((byte) (16)) };
                char[] ax$5 = new char[]{ ((char) (0xf3f4)) };
                for (int ax$0 = -748; ax$0 < (-748 + 16367); ax$0 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (((!b) || (!Arrays.equals(ax$3, ax$4))) || (!Arrays.equals(ax$2, ax$5))) {
                            bFld = true;
                        }
                    } catch (Throwable ax$8) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                Test.bFld = ax$9;
                b = ax$10;
                i19 = ax$11;
            }
        }
        i3 *= i4;
        i4 = i3;
        for (i15 = 8; i15 < 176; ++i15) {
            iArr1[i15 - 1] *= ((int) (Test.instanceCount));
            i16 = i3;
        }
        i16 *= ((int) (f2));
        i16 = ((int) (Test.instanceCount));
        Test.instanceCount = i3;
        Test.fArrFld[(i3 >>> 1) % N] += i4;
        b = b;
        i16 = ((int) (Test.instanceCount));
        i17 = 1;
        do {
            i4 += ((i17 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount;
            iArr1[i17] -= ((int) (Test.instanceCount));
        } while ((++i17) < 245 );
        Test.byFld -= ((byte) (Test.instanceCount));
        i4 += i17;
        lArrFld[(i16 >>> 1) % N] -= i3;
        i18 = 1;
        do {
            short s1 = -18378;
            s1 += ((short) (i4));
            for (i19 = 1; 2 > i19; ++i19) {
                iArr1[i18] = i17;
                for (i21 = 2; i21 > 1; --i21) {
                    i22 -= i16;
                    Test.instanceCount >>= i4;
                    iArr1[i19 + 1] += i16;
                    i20 -= ((int) (Test.instanceCount));
                    Test.instanceCount = i19;
                    if (b)
                        continue;

                    f2 *= i20;
                    sArrFld[i19] = ((short) (i16));
                    i20 *= i16;
                    if (i18 != 0) {
                    }
                    if (b) {
                        i4 <<= i21;
                        iArr1 = iArr1;
                    } else {
                        lArr[i21 + 1][((-54022) >>> 1) % N] <<= i4;
                    }
                }
            }
        } while ((++i18) < 253 );
        long meth_res = ((((((((((((i3 + i4) + i15) + i16) + Float.floatToIntBits(f2)) + (b ? 1 : 0)) + i17) + i18) + i19) + i20) + i21) + i22) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public void vMeth(int i) {
        int i1 = 42738;
        int i2 = -106;
        int i23 = 151;
        int i24 = -27570;
        int i25 = 1;
        int i26 = 56400;
        int i27 = 9447;
        int iArr2[] = new int[N];
        double d = 2.20902;
        float f3 = 76.16F;
        FuzzerUtils.init(iArr2, 0);
        for (i1 = 5; i1 < 87; ++i1) {
            Test.instanceCount += i1 + Test.instanceCount;
            d = -iMeth(i1, i);
            for (i23 = i1; i23 < 7; ++i23) {
                iArr2[i23 - 1] += ((int) (Test.instanceCount));
                i2 -= -47885;
                i *= i2;
                iArr2 = iArr2;
                if (Test.bFld)
                    continue;

                for (i25 = 1; i25 > 1; i25 -= 2) {
                    if (i2 != 0) {
                        vMeth_check_sum += (((((((((i + i1) + i2) + Double.doubleToLongBits(d)) + i23) + i24) + i25) + i26) + Float.floatToIntBits(f3)) + i27) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    i26 += ((i25 * i24) + i26) - i25;
                    i <<= ((int) (Test.instanceCount));
                    Test.instanceCount += ((i25 * Test.instanceCount) + f3) - i;
                    Test.byFld = Test.byFld;
                    Test.fArrFld = Test.fArrFld;
                    iArr2[i23 + 1] >>= ((int) (Test.instanceCount));
                    i &= i;
                    try {
                        i26 = iArr2[i1] % (-164);
                        i24 = (-191) % iArrFld[i25 - 1];
                        i2 = (-57980) % i23;
                    } catch (ArithmeticException a_e) {
                    }
                    iArrFld[i1] <<= i26;
                    i2 += ((i25 * Test.instanceCount) + f3) - Test.instanceCount;
                    d = 7250290259352524743L;
                    i2 <<= i1;
                    i24 = i;
                }
                i27 = 1;
                do {
                    d *= i1;
                    i += -221;
                    Test.sFld &= ((short) (i23));
                    i2 += i27 * i27;
                    i24 += i27 + i27;
                    i = ((int) (f3));
                    iArrFld = iArr2;
                    Test.instanceCount = -1266324639L;
                    i *= 25739;
                    if (i23 != 0) {
                        vMeth_check_sum += (((((((((i + i1) + i2) + Double.doubleToLongBits(d)) + i23) + i24) + i25) + i26) + Float.floatToIntBits(f3)) + i27) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    i26 += i27 ^ Test.instanceCount;
                    i24 += i27 * i27;
                } while ((++i27) < 1 );
            }
        }
        vMeth_check_sum += (((((((((i + i1) + i2) + Double.doubleToLongBits(d)) + i23) + i24) + i25) + i26) + Float.floatToIntBits(f3)) + i27) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {
        {
            final boolean ax$19 = Test.bFld;
            try {
                List<Locale.LanguageRange> ax$14 = null;
                ArrayList<Locale.LanguageRange> ax$15 = new ArrayList<Locale.LanguageRange>();
                for (int ax$12 = -816; ax$12 < (-816 + 9617); ax$12 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (!ax$15.equals(ax$14)) {
                            bFld = true;
                            for (LanguageRange ax$16 : ax$15) {
                            }
                            for (LanguageRange ax$17 : ax$14) {
                            }
                        }
                    } catch (Throwable ax$18) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                Test.bFld = ax$19;
            }
        }
        int i28 = -5;
        int i29 = -23;
        int i30 = 27;
        int i31 = 96;
        int i32 = 5;
        int i33 = -6;
        int i34 = 2;
        int i35 = 1534;
        int i36 = 11;
        int i37 = -2;
        int i38 = -14;
        int i39 = 47;
        int i40 = -50794;
        float f4 = 2.258F;
        float f5 = 31.289F;
        double d2 = -94.34127;
        double dArr1[] = new double[N];
        byte byArr[] = new byte[N];
        boolean bArr[] = new boolean[N];
        FuzzerUtils.init(byArr, ((byte) (-124)));
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr1, 1.46186);
        vMeth(i28);
        Test.instanceCount = i28;
        iArrFld[(i28 >>> 1) % N] -= i28;
        i29 = 1;
        do {
            Test.instanceCount += i29;
            i28 *= ((int) (Test.instanceCount));
            i28 += i29 | ((long) (f4));
            i28 *= ((int) (f4));
            for (i30 = 1; i30 < 54; ++i30) {
                i28 += ((int) ((-8557605522944200735L) + (i30 * i30)));
                i31 += i29;
                d2 = i28;
                i31 -= ((int) (f4));
                i31 = i31;
                Test.instanceCount += ((i30 * i30) + i29) - f4;
                Test.sFld = ((short) (Test.instanceCount));
                i28 += i28;
                byArr[i29 - 1] = ((byte) (i31));
                i28 <<= i29;
                if (Test.bFld)
                    break;

                for (i32 = 2; i32 > i29; i32--) {
                    i34 += (-12) + (i32 * i32);
                    iArrFld[i29 + 1] -= i28;
                    if (Test.bFld)
                        break;

                    Test.instanceCount *= i30;
                    i34 = i28;
                    i28 += 207 + (i32 * i32);
                    i31 >>>= ((int) (Test.instanceCount));
                    d2 = i33;
                    i31 -= i32;
                    i31 -= Test.byFld;
                    byArr[i30] += ((byte) (i28));
                    iArrFld[i30] -= i30;
                    i31 >>= -7;
                    Test.instanceCount = i31;
                }
                i31 <<= Test.sFld;
            }
            i33 = ((int) (f4));
            for (i35 = 2; i35 < 54; i35++) {
                for (i37 = 2; i37 > 1; --i37) {
                    Test.instanceCount = i28;
                    Test.fArrFld[i29 + 1] = ((float) (-2.44915));
                    bArr[i35 - 1] = true;
                    i38 >>= i28;
                    i33 *= i36;
                    i38 = Test.sFld;
                    Test.instanceCount = i33;
                    i36 = ((int) (12L));
                    iArrFld[i37] = i33;
                    i38 ^= ((int) (Test.instanceCount));
                    if (true)
                        break;

                    i33 += (-36963) + (i37 * i37);
                    dArr1[i29 + 1] += d2;
                    Test.bFld = Test.bFld;
                    try {
                        i36 = iArrFld[i35] / (-29323);
                        i31 = i34 / 44016;
                        i38 = i30 % 46649;
                    } catch (ArithmeticException a_e) {
                    }
                }
                for (f5 = 2; f5 > i35; f5 -= 2) {
                    i39 += ((int) (f5));
                    i38 -= ((int) (Test.instanceCount));
                    i34 += ((int) (f5 * f5));
                    i33 -= i35;
                    if (Test.bFld)
                        continue;

                    i33 += ((int) (f5));
                }
                Test.byFld = ((byte) (Test.instanceCount));
                try {
                    i31 = i33 % iArrFld[i35 - 1];
                    i33 = i31 % (-28930);
                    i34 = i33 / (-696106147);
                } catch (ArithmeticException a_e) {
                }
                Test.instanceCount += i35 - i39;
            }
            iArrFld[i29 - 1] = ((int) (d2));
            i36 -= ((int) (f4));
        } while ((++i29) < 94 );
        d2 = f4;
        sArrFld[(i34 >>> 1) % N] >>>= ((short) (Test.instanceCount));
        i40 = 1;
        while ((++i40) < 250) {
            lArrFld[(i29 >>> 1) % N] = i28;
            Test.byFld = ((byte) (52426));
            d2 = 9;
            i38 = ((int) (Test.instanceCount));
            Test.instanceCount = i32;
            i33 = ((int) (Test.instanceCount));
        }
        FuzzerUtils.out.println((((("i28 i29 f4 = " + i28) + ",") + i29) + ",") + Float.floatToIntBits(f4));
        FuzzerUtils.out.println((((("i30 i31 d2 = " + i30) + ",") + i31) + ",") + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println((((("i32 i33 i34 = " + i32) + ",") + i33) + ",") + i34);
        FuzzerUtils.out.println((((("i35 i36 i37 = " + i35) + ",") + i36) + ",") + i37);
        FuzzerUtils.out.println((((("i38 f5 i39 = " + i38) + ",") + Float.floatToIntBits(f5)) + ",") + i39);
        FuzzerUtils.out.println((((("i40 byArr bArr = " + i40) + ",") + FuzzerUtils.checkSum(byArr)) + ",") + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("dArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.byFld Test.bFld = " + Test.instanceCount) + ",") + Test.byFld) + ",") + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println((((("Test.sFld Test.fArrFld lArrFld = " + Test.sFld) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld))) + ",") + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println((("sArrFld iArrFld = " + FuzzerUtils.checkSum(sArrFld)) + ",") + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}