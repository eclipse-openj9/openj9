// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.nio.file.DirectoryIteratorException;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 6944L;

    public int iFld = -158;

    public static volatile boolean bFld = true;

    public static double dFld = 86.17959;

    public static boolean bFld1 = true;

    public static int iFld1 = 9;

    public static int[] iArrFld = new int[N];

    public static volatile long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -30);
        FuzzerUtils.init(Test.lArrFld, 6436L);
    }

    public static long vSmallMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(int i, int i1, long l) {
        float f = 6.194F;
        i1 = (int) ((i1++) - ((long) (f - i1) << i));
        {
            java.io.PrintStream ax$0 = System.out;
            java.io.PrintStream ax$1 = System.err;
            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$2);
            System.setErr(ax$2);
            {
                boolean ax$5 = false;
                for (int ax$4 = -780; ax$4 < 7291; ax$4 += 9) {
                    if (!ax$5) {
                        ax$5 = true;
                        {
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                            vSmallMeth_check_sum += i + i1 + l + Float.floatToIntBits(f);
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                        }
                    }
                    try {
                        new DirectoryIteratorException(null);
                    } catch (Throwable ax$3) {
                    } finally {
                    }
                }
            }
            System.setOut(ax$0);
            System.setErr(ax$1);
        }
    }

    public static void vMeth(int i7, int i8) {
        short s1 = 23639;
        int i10 = -14, i11 = -53069, i12 = -14, i13 = -24203, i14 = -4, i15 = 0, i16 = -6;
        byte by1 = 95;
        float f2 = -113.662F, f3 = 0.524F;
        boolean b1 = true;
        double d = -74.62574, dArr[] = new double[N];
        FuzzerUtils.init(dArr, 115.83368);
        vSmallMeth(i8, i8, 10L);
        s1 = (short) i7;
        for (int i9 : Test.iArrFld) {
            i10 = 1;
            {
                java.io.PrintStream ax$6 = System.out;
                java.io.PrintStream ax$7 = System.err;
                java.io.PrintStream ax$8 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$8);
                System.setErr(ax$8);
                {
                    boolean ax$12 = false;
                    for (int ax$11 = -3496; ax$11 < 4539; ax$11 += 1) {
                        if (!ax$12) {
                            ax$12 = true;
                            {
                                System.setOut(ax$6);
                                System.setErr(ax$7);
                                while (++i10 < 2) {
                                    by1 += (byte) (((i10 * i9) + i8) - Test.instanceCount);
                                    Test.instanceCount = i10;
                                    for (f2 = 1; f2 < 1; f2++) {
                                        switch((((i8 >>> 1) % 1) * 5) + 17) {
                                            case 21:
                                        }
                                        if (b1)
                                            continue;
                                        Test.lArrFld[(int) (f2 - 1)] = i8;
                                        i11 += (int) f2;
                                        f3 *= (float) d;
                                        Test.iArrFld = Test.iArrFld;
                                        i11 = -148;
                                        i7 += (int) (f2 * f2);
                                        Test.instanceCount = 163;
                                        i11 -= i11;
                                        i7 = i7;
                                        Test.instanceCount += (long) (((f2 * i9) + i9) - i10);
                                        Test.iArrFld[(int) (f2)] = (int) Test.instanceCount;
                                        Test.lArrFld[(i7 >>> 1) % N] = -3281794404L;
                                    }
                                    switch((i10 % 5) + 63) {
                                        case 63:
                                            i8 = (int) 236L;
                                            if (true)
                                                continue;
                                            if (false) {
                                                Test.iArrFld[i10 + 1] = (int) d;
                                                for (i12 = i10; i12 < 1; ++i12) {
                                                    f3 += (((i12 * Test.instanceCount) + i12) - i11);
                                                    Test.lArrFld[i12 - 1] = i7;
                                                    f3 -= i13;
                                                }
                                                b1 = true;
                                                switch((((i11 >>> 1) % 1) * 5) + 43) {
                                                    case 47:
                                                        for (i14 = 1; 1 > i14; ++i14) {
                                                            i7 = i16;
                                                            dArr[i10] *= i10;
                                                            i8 -= i13;
                                                            Test.iArrFld[i10] *= i9;
                                                        }
                                                        break;
                                                }
                                            } else {
                                                Test.instanceCount += i10;
                                            }
                                        case 64:
                                            i15 <<= (int) -17132L;
                                            break;
                                        case 65:
                                            if (b1)
                                                break;
                                            break;
                                        case 66:
                                            if (b1)
                                                break;
                                            break;
                                        case 67:
                                            f3 = Test.instanceCount;
                                            break;
                                    }
                                }
                                System.setOut(ax$8);
                                System.setErr(ax$8);
                            }
                        }
                        int ax$9 = i9;
                        try {
                            if (i9 != 0)
                                ;
                        } catch (Throwable ax$10) {
                        } finally {
                            i9 = ax$9;
                        }
                    }
                }
                System.setOut(ax$6);
                System.setErr(ax$7);
            }
        }
        vMeth_check_sum += i7 + i8 + s1 + i10 + by1 + Float.floatToIntBits(f2) + i11 + (b1 ? 1 : 0) + Float.floatToIntBits(f3) + Double.doubleToLongBits(d) + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth() {
        int i5 = -59, i6 = -7, i17 = 8, i18 = 5, i19 = -40787, i20 = -2, i21 = 64, i22 = 0, iArr1[][] = new int[N][N];
        byte by2 = -111;
        float f4 = 4.707F;
        boolean b2 = true;
        short[] sArr = new short[N];
        FuzzerUtils.init(iArr1, 60219);
        FuzzerUtils.init(sArr, (short) 12654);
        for (i5 = 4; i5 < 173; i5++) {
            i6 += (i5 - i6);
        }
        vMeth(i5, i6);
        for (i17 = 6; 115 > i17; i17++) {
            switch((i17 % 9) + 24) {
                case 24:
                    Test.lArrFld[i17] -= (long) -2.939F;
                    if (Test.bFld)
                        continue;
                    i19 = 1;
                    do {
                        i6 >>= -11209;
                        i6 = (int) Test.instanceCount;
                        Test.iArrFld[i19] *= (int) Test.instanceCount;
                        if (Test.bFld) {
                            iArr1 = iArr1;
                            sArr[i17 + 1] -= (short) 148L;
                            i6 += i19;
                            for (i20 = i17; i20 < 1; i20 += 3) {
                                Test.lArrFld[i20 - 1] |= i17;
                                i18 += i20;
                                i21 += (i20 * i20);
                                if (false)
                                    break;
                                i6 = by2;
                                Test.instanceCount <<= Test.instanceCount;
                                i21 -= 10;
                                i21 += i20;
                                i21 *= (int) f4;
                                i6 += (int) Test.instanceCount;
                                if (i5 != 0) {
                                }
                                i6 >>= (int) Test.instanceCount;
                            }
                        } else if (Test.bFld) {
                            if (Test.bFld) {
                                i6 += (i19 * i19);
                                f4 *= i17;
                                Test.instanceCount += (i19 + i18);
                                i18 += (int) (-5L + (i19 * i19));
                                i18 += (i19 * Test.instanceCount);
                                i22 = 1;
                                do {
                                    i21 = (int) Test.instanceCount;
                                    by2 += (byte) i18;
                                } while (--i22 > 0);
                            } else if (b2) {
                                Test.instanceCount >>= i17;
                            }
                        } else if (b2) {
                            i18 = by2;
                        } else {
                            i6 += i5;
                        }
                    } while (++i19 < 5);
                    break;
                case 25:
                    Test.instanceCount = (long) Test.dFld;
                    break;
                case 26:
                    i18 = (int) Test.instanceCount;
                    break;
                case 27:
                    i6 += i17;
                    break;
                case 28:
                    i21 = i6;
                    break;
                case 29:
                    Test.instanceCount = i5;
                    break;
                case 30:
                    i6 += (i17 * i17);
                    break;
                case 31:
                    try {
                        i6 = (i18 % i5);
                        i21 = (i17 % -5);
                        i18 = (25195 / Test.iArrFld[i17 + 1]);
                    } catch (ArithmeticException a_e) {
                    }
                    break;
                case 32:
                    i21 -= (int) 81.98460;
                    break;
            }
        }
        long meth_res = i5 + i6 + i17 + i18 + i19 + i20 + i21 + by2 + Float.floatToIntBits(f4) + i22 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        short s = -16703;
        int i2 = -4, i3 = 145, i4 = 8559, i23 = -3219, i24 = 65483, i25 = 30, i26 = 7, i27 = 245, i28 = 71, i29 = -10, i30 = 227, i31 = -5, i32 = 14, i33 = 23573, i34 = -3, i35 = 236, i36 = -11, i37 = -205, iArr[] = new int[N];
        byte by = 98, by3 = -56;
        boolean b = true;
        float f1 = -13.921F;
        double d1 = 2.46093, dArr1[] = new double[N];
        FuzzerUtils.init(iArr, -3686);
        FuzzerUtils.init(dArr1, -91.87503);
        for (int smallinvoc = 0; smallinvoc < 129; smallinvoc++) vSmallMeth(-201, -((iFld++) + (iFld + s)), ((-(Test.instanceCount + s)) + (i2 * iFld)) + (by * (iArr[(iFld >>> 1) % N]--)));
        for (i3 = 4; i3 < 113; i3++) {
            switch(((((++i2) >>> 1) % 1) * 5) + 83) {
                case 85:
                    b = (((f1 * -3) - iFld) <= (++iFld));
                    switch(((iMeth() >>> 1) % 5) + 13) {
                        case 13:
                            switch((i3 % 2) + 41) {
                                case 41:
                                    i23 = 1;
                                    while (++i23 < 46) {
                                        for (i24 = 1; i24 < 1; i24++) {
                                            if (Test.bFld1) {
                                                Test.instanceCount -= (long) Test.dFld;
                                            } else {
                                                dArr1[i3 - 1] += i3;
                                                Test.lArrFld = Test.lArrFld;
                                                iFld += (((i24 * Test.instanceCount) + i2) - Test.instanceCount);
                                                by = (byte) i3;
                                            }
                                            i2 *= iFld;
                                        }
                                        for (i26 = 1; i26 > 1; i26--) {
                                            i4 -= -43370;
                                        }
                                        i2 = by3;
                                        iArr[i3 + 1] = (int) Test.instanceCount;
                                        iFld = -47254;
                                        Test.dFld += -3463;
                                        i25 = i26;
                                        for (i28 = 1; i28 > 1; i28 -= 3) {
                                            i25 = (int) Test.instanceCount;
                                            i4 *= (int) f1;
                                            Test.instanceCount = i30;
                                            i27 = (int) Test.instanceCount;
                                            i25 += (i28 + Test.instanceCount);
                                        }
                                        Test.instanceCount |= -14;
                                    }
                                    i27 -= (int) f1;
                                    i25 = i25;
                                    for (d1 = 2; d1 < 46; d1++) {
                                        iArr[i3 + 1] -= (int) Test.dFld;
                                        Test.instanceCount += (long) (d1 + f1);
                                        i2 -= i23;
                                        i2 += (int) (((d1 * i23) + i25) - iFld);
                                        i25 = i4;
                                        Test.instanceCount >>= i3;
                                        i32 = 1;
                                        while (++i32 < 2) {
                                            i30 = i32;
                                            Test.dFld = by;
                                            by >>= (byte) i29;
                                            i4 >>= -45;
                                        }
                                        try {
                                            iArr[i3] = (i28 % -6357);
                                            iArr[i3 + 1] = (Test.iArrFld[i3 - 1] / -755096245);
                                            i2 = (29025 % i28);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        switch(((i3 % 1) * 5) + 123) {
                                            case 127:
                                                f1 += (float) d1;
                                                i33 = 1;
                                                do {
                                                    Test.instanceCount += (i33 ^ i28);
                                                    i4 >>>= i31;
                                                } while (++i33 < 2);
                                                Test.iArrFld[i3] += i27;
                                                i29 += i25;
                                                i2 = i27;
                                                break;
                                            default:
                                                Test.instanceCount = i3;
                                                Test.dFld -= i33;
                                                by += (byte) i29;
                                        }
                                        i4 = (int) Test.instanceCount;
                                        i34 = 1;
                                        while (++i34 < 2) {
                                            i2 += (int) Test.instanceCount;
                                            Test.instanceCount >>= i3;
                                            i2 += i34;
                                            iFld /= (int) ((long) (f1) | 1);
                                            Test.iArrFld[i34 + 1] += i4;
                                            Test.instanceCount /= ((long) (Test.dFld) | 1);
                                            i31 -= i31;
                                            Test.instanceCount += (i34 ^ (long) f1);
                                            i4 += i34;
                                            Test.instanceCount = Test.instanceCount;
                                            try {
                                                i4 = (-167 / i3);
                                                i2 = (i30 / iFld);
                                                i31 = (i3 % i35);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            f1 = i26;
                                            i29 = Test.iFld1;
                                        }
                                        for (i36 = 1; i36 < 2; ++i36) {
                                            Test.instanceCount -= Test.instanceCount;
                                            f1 += (((i36 * f1) + i32) - i3);
                                            Test.lArrFld[(int) (d1)] = iFld;
                                            i25 += (i36 * i36);
                                        }
                                    }
                                    break;
                                case 42:
                                    i2 += (i3 | (long) f1);
                                default:
                                    i31 *= i31;
                            }
                            break;
                        case 14:
                            i2 += (((i3 * Test.instanceCount) + Test.instanceCount) - Test.iFld1);
                            break;
                        case 15:
                            Test.instanceCount += (-159 + (i3 * i3));
                            break;
                        case 16:
                            f1 -= f1;
                            break;
                        case 17:
                            dArr1[i3] -= i30;
                            break;
                    }
                    break;
                default:
                    i31 = 9;
            }
        }
        FuzzerUtils.out.println("s i2 by = " + s + "," + i2 + "," + by);
        FuzzerUtils.out.println("i3 i4 b = " + i3 + "," + i4 + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("f1 i23 i24 = " + Float.floatToIntBits(f1) + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("by3 i28 i29 = " + by3 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 d1 i31 = " + i30 + "," + Double.doubleToLongBits(d1) + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 i37 = " + i35 + "," + i36 + "," + i37);
        FuzzerUtils.out.println("iArr dArr1 = " + FuzzerUtils.checkSum(iArr) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println("Test.instanceCount iFld Test.bFld = " + Test.instanceCount + "," + iFld + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld Test.bFld1 Test.iFld1 = " + Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld1 ? 1 : 0) + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth iMeth
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
