// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.net.InetSocketAddress;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 0L;

    public static volatile short sFld = -8973;

    public static double dFld = 32.29879;

    public volatile byte byFld = -85;

    public static boolean bFld = true;

    public static int[] iArrFld = new int[N];

    public static float[] fArrFld = new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 6);
        FuzzerUtils.init(Test.fArrFld, -1.263F);
    }

    public static long dMeth_check_sum = 0;

    public static long fMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long lMeth(short s) {
        if (ax$21) {
            try {
                InetSocketAddress ax$22 = InetSocketAddress.createUnresolved("unresolved", 1234);
                if (!ax$22.isUnresolved())
                    ;
            } catch (Throwable ax$23) {
            } finally {
            }
            return -1650441935454592318L;
        }
        byte by = -32;
        int i6 = -110, i8 = 51808, i9 = 139, i10 = -7659, i11 = 13, i12 = -10, i13 = 9;
        float f1 = -1.941F, fArr[] = new float[N];
        double d = 44.105516;
        boolean b = false;
        FuzzerUtils.init(fArr, -1.443F);
        Test.iArrFld[(183 >>> 1) % N] += by;
        fArr[(i6 >>> 1) % N] *= f1;
        for (int i7 : Test.iArrFld) {
            i6 = i6;
            for (i8 = 1; i8 < 2; i8++) {
                i10 = 1;
                while (++i10 < 2) {
                    i7 = -5;
                    i6 = i7;
                    i6 = i9;
                    i6 += (((i10 * i7) + i6) - i9);
                    switch(((i8 >>> 1) % 1) + 114) {
                        case 114:
                            d = i7;
                            i6 *= i6;
                            i9 += (((i10 * Test.instanceCount) + i6) - i8);
                            i9 <<= i10;
                            i9 *= i8;
                            i7 -= by;
                            i9 += i6;
                            i9 = (int) Test.instanceCount;
                            i11 += i8;
                            i9 += i10;
                    }
                    i6 += i10;
                    i11 *= (int) f1;
                }
                for (i12 = 2; i12 > 1; i12 -= 3) {
                    if (b)
                        continue;
                    i9 += (i12 | i11);
                    if (b)
                        continue;
                    if (b) {
                        by -= (byte) Test.instanceCount;
                    } else if (b) {
                        i7 = (int) f1;
                        f1 = -8;
                        Test.instanceCount += i6;
                        Test.instanceCount = i12;
                        Test.instanceCount *= (long) -1.68313;
                        i9 += (i12 * i7);
                    } else {
                        i9 -= i6;
                        if (b)
                            break;
                    }
                }
            }
        }
        long meth_res = s + by + i6 + Float.floatToIntBits(f1) + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 + i13 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static float fMeth(long l, int i4) {
        if (ax$29) {
            int ax$37 = i4;
            try {
                long[] ax$34 = { 0x7ff0000000000001L, 0x7ff4000000000000L, 0x7ff8000000000000L, 0x7fffffffffffffffL, 0xfff0000000000001L, 0xfff4000000000000L, 0xfff8000000000000L, 0xffffffffffffffffL };
                for (long ax$33 : ax$34) {
                    for (long ax$32 : ax$34) {
                        int ax$30;
                        long ax$36;
                        int ax$35;
                        long ax$31;
                        if (ax$32 == 0) {
                            try {
                                ax$30 = Integer.divideUnsigned((int) ax$33, (int) ax$32);
                                i4++;
                            } catch (ArithmeticException ea) {
                                // Expected
                                ;
                            }
                            try {
                                ax$35 = Integer.remainderUnsigned((int) ax$33, (int) ax$32);
                                i4++;
                            } catch (ArithmeticException ea) {
                                // Expected
                                ;
                            }
                        } else {
                            ax$30 = Integer.divideUnsigned((int) ax$33, (int) ax$32);
                            ax$36 = ax$33 / ax$32;
                            if (ax$30 != (int) ax$36) {
                                i4++;
                            }
                            ax$35 = Integer.remainderUnsigned((int) ax$33, (int) ax$32);
                            ax$31 = ax$33 % ax$32;
                            if (ax$35 != (int) ax$31) {
                                i4++;
                            }
                        }
                    }
                }
            } catch (Throwable ax$38) {
            } finally {
                i4 = ax$37;
            }
            return (float) 0.15660424855518862;
        }
        float f = -2.486F;
        int i14 = -46645, i15 = -3, i16 = -107, i17 = 10880;
        long l1 = -3069L, lArr[] = new long[N];
        byte by1 = -95;
        boolean b1 = false;
        double[] dArr = new double[N];
        FuzzerUtils.init(lArr, 4258420408L);
        FuzzerUtils.init(dArr, -28.119944);
        i4 <<= (++i4);
        for (int i5 : Test.iArrFld) {
            f += i4;
            lArr = (lArr = (lArr = FuzzerUtils.long1array(N, (long) 54466L)));
            {
                java.io.PrintStream ax$26 = System.out;
                java.io.PrintStream ax$27 = System.err;
                java.io.PrintStream ax$28 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$28);
                System.setErr(ax$28);
                try {
                    ax$21 = true;
                    for (int ax$24 = 0; ax$24 < 5895; ax$24 += 1) lMeth((short) -747737832);
                } catch (java.lang.Throwable ax$25) {
                } finally {
                    ax$21 = false;
                }
                System.setOut(ax$26);
                System.setErr(ax$27);
            }
            lMeth(Test.sFld);
        }
        i4 *= (int) 5934748297331634306L;
        f += f;
        for (i14 = 10; 227 > i14; ++i14) {
            i15 = i4;
            i15 = i15;
            i15 += i4;
            i16 = 1;
            do {
                l -= i4;
                Test.sFld -= (short) 164;
                i4 = i14;
                l1 = 1;
                while (++l1 < 1) {
                    Test.instanceCount >>= l;
                    i4 = i4;
                    i15 = 7;
                    i4 += (int) l1;
                    f += l1;
                    Test.instanceCount += (l1 + i14);
                    Test.fArrFld[i14 + 1] -= by1;
                    Test.iArrFld[i14 - 1] -= i4;
                    lArr = lArr;
                }
                i17 = 1;
                do {
                    int i18 = -7;
                    if (b1)
                        continue;
                    i15 += (i17 * i17);
                    i4 >>>= i16;
                    Test.iArrFld[i17 - 1] = i14;
                    l = i18;
                    Test.instanceCount = i18;
                    b1 = b1;
                    if (false)
                        continue;
                    i18 = (int) f;
                } while (++i17 < 1);
                i15 = -2;
            } while (++i16 < 3);
            Test.iArrFld[i14 - 1] *= i17;
        }
        long meth_res = l + i4 + Float.floatToIntBits(f) + i14 + i15 + i16 + l1 + by1 + i17 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public static double dMeth(int i1, int i2, int i3) {
        int i19 = -56608, i20 = -26819, i21 = 188, i22 = 7256, i23 = -13, i24 = 126, i25 = -60358, i26 = -51137, i27 = -251, i28 = 8;
        float f2 = 2.417F;
        boolean b2 = false, b3 = true;
        {
            java.io.PrintStream ax$41 = System.out;
            java.io.PrintStream ax$42 = System.err;
            java.io.PrintStream ax$43 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$43);
            System.setErr(ax$43);
            try {
                ax$29 = true;
                for (int ax$39 = 0; ax$39 < 7514; ax$39 += 1) fMeth(6144074981920128799L, 1242247860);
            } catch (java.lang.Throwable ax$40) {
            } finally {
                ax$29 = false;
            }
            System.setOut(ax$41);
            System.setErr(ax$42);
        }
        fMeth(Test.instanceCount, i1);
        Test.sFld <<= (short) Test.instanceCount;
        Test.instanceCount += i3;
        i19 = 187;
        while (--i19 > 0) {
            i20 = 1;
            while (++i20 < 3) {
                Test.instanceCount += i20;
                i2 = i20;
                i2 = (int) f2;
            }
            for (i21 = 1; i21 < 3; i21++) {
                Test.iArrFld[i21 - 1] = (int) Test.instanceCount;
                for (i23 = 1; 2 > i23; i23++) {
                    Test.instanceCount += (i23 ^ i23);
                    i24 >>= 2642;
                    i22 += (-22 + (i23 * i23));
                }
                i24 -= i20;
                i24 = i1;
                Test.instanceCount -= i1;
                i22 += (i21 * i1);
                i3 = -37;
                Test.sFld /= (short) (i23 | 1);
                i22 += (int) Test.instanceCount;
                i2 += (((i21 * i1) + i22) - Test.instanceCount);
            }
            for (i25 = 1; i25 < 3; i25++) {
                for (i27 = 1; i27 < 2; i27++) {
                    i2 *= i22;
                    i26 = i3;
                    Test.instanceCount += 1;
                    i2 += i23;
                    Test.instanceCount += (((i27 * i28) + Test.instanceCount) - i28);
                    if (b2) {
                        i24 = (int) Test.instanceCount;
                        i2 <<= (int) Test.instanceCount;
                        i24 -= (int) Test.dFld;
                    }
                    Test.instanceCount += i27;
                    if (b3)
                        break;
                }
                try {
                    i1 = (1216552636 / i20);
                    Test.iArrFld[i25 + 1] = (i24 % i27);
                    i22 = (42674 / i21);
                } catch (ArithmeticException a_e) {
                }
                i24 = i19;
            }
        }
        long meth_res = i1 + i2 + i3 + i19 + i20 + Float.floatToIntBits(f2) + i21 + i22 + i23 + i24 + i25 + i26 + i27 + i28 + (b2 ? 1 : 0) + (b3 ? 1 : 0);
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = 78, i29 = -205, i30 = 16924, i31 = 199, i32 = 29, i33 = -190, i34 = -118, i35 = 18343, i36 = 11, i37 = -12, iArr[] = new int[N];
        long l2 = 663326151L, lArr1[] = new long[N];
        float f3 = -2.924F, f4 = 4.257F;
        boolean b4 = true;
        double d2 = 16.39957;
        byte[] byArr = new byte[N];
        FuzzerUtils.init(iArr, 78);
        FuzzerUtils.init(lArr1, -240L);
        FuzzerUtils.init(byArr, (byte) -59);
        iArr[(i >>> 1) % N] = (int) ((dMeth(i, i, i) - Test.dFld) + 77.115F);
        Test.sFld = (short) Test.dFld;
        i = byFld;
        i ^= 14;
        Test.instanceCount = i;
        i *= -3635;
        for (i29 = 4; i29 < 78; i29++) {
            l2 = i29;
            for (i31 = 4; i31 < 68; ++i31) {
                for (i33 = 1; 2 > i33; i33++) {
                    Test.instanceCount += (i33 * i33);
                    i34 += (i33 * i33);
                }
                Test.iArrFld[i31] = i;
                Test.dFld += Test.instanceCount;
                switch((((i32 >>> 1) % 2) * 5) + 103) {
                    case 111:
                        i36 = 2;
                        while (--i36 > 0) {
                            Test.instanceCount = i29;
                            Test.sFld = (short) 9;
                            if (Test.bFld) {
                                i34 += Test.sFld;
                                f3 += i36;
                                lArr1[i29 + 1] *= (long) f3;
                                i30 <<= i32;
                                i35 <<= i31;
                                l2 += (((i36 * i29) + i29) - i35);
                                i34 += (int) 1966848646L;
                                if (false) {
                                    if (Test.bFld)
                                        continue;
                                    if (Test.bFld) {
                                        i32 -= (int) l2;
                                        iArr[i29] += byFld;
                                        i35 = i30;
                                        i34 *= (int) Test.dFld;
                                        i = Test.sFld;
                                    } else {
                                        i34 = Test.sFld;
                                        l2 += (i36 * byFld);
                                        i32 += i30;
                                        Test.sFld += (short) (i36 * i35);
                                        i37 += (int) 1.26F;
                                        i30 += (((i36 * f3) + i36) - l2);
                                        if (Test.bFld)
                                            continue;
                                        i34 -= (int) -11L;
                                        Test.iArrFld = Test.iArrFld;
                                        i34 += (((i36 * i32) + byFld) - f3);
                                        i34 += i37;
                                        i37 = (int) Test.dFld;
                                        f4 += (((i36 * i37) + l2) - i36);
                                    }
                                    i37 = i32;
                                    i34 += i36;
                                    switch(((i36 >>> 1) % 2) + 80) {
                                        case 80:
                                            byArr[i36 + 1] = (byte) Test.sFld;
                                            i += i36;
                                            if (Test.bFld)
                                                continue;
                                            Test.instanceCount *= i33;
                                            Test.dFld = i34;
                                            iArr[i29 - 1] |= i34;
                                            Test.iArrFld = iArr;
                                            iArr[i36 + 1] += -52833;
                                            i32 += (((i36 * l2) + l2) - l2);
                                            i34 -= i35;
                                            i35 += i30;
                                            if (Test.bFld)
                                                continue;
                                            i34 = i32;
                                            break;
                                        case 81:
                                            if (Test.bFld)
                                                break;
                                            i30 *= i;
                                            if (false) {
                                                f4 -= -13;
                                                Test.instanceCount = -8814;
                                                Test.dFld = f4;
                                                Test.dFld = byFld;
                                            } else if (Test.bFld) {
                                                f4 += (-17 + (i36 * i36));
                                                Test.instanceCount = i32;
                                            }
                                            if (Test.bFld) {
                                                i34 -= -29010;
                                                f3 = i32;
                                            } else if (Test.bFld) {
                                                Test.iArrFld[i29 - 1] += i32;
                                            } else {
                                                i30 = i33;
                                            }
                                            break;
                                    }
                                } else if (b4) {
                                    Test.iArrFld[i36 - 1] += (int) f3;
                                }
                            } else {
                                i30 = (int) Test.instanceCount;
                            }
                        }
                        break;
                    case 113:
                        Test.iArrFld[i31 + 1] += (int) d2;
                        break;
                    default:
                        iArr[i31 + 1] = (int) Test.instanceCount;
                }
            }
        }
        FuzzerUtils.out.println("i i29 i30 = " + i + "," + i29 + "," + i30);
        FuzzerUtils.out.println("l2 i31 i32 = " + l2 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 f3 i37 = " + i36 + "," + Float.floatToIntBits(f3) + "," + i37);
        FuzzerUtils.out.println("f4 b4 d2 = " + Float.floatToIntBits(f4) + "," + (b4 ? 1 : 0) + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("iArr lArr1 byArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("byFld Test.bFld Test.iArrFld = " + byFld + "," + (Test.bFld ? 1 : 0) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }

    public static void main(String[] strArr) {
        {
            java.io.PrintStream ax$0 = System.out;
            java.io.PrintStream ax$1 = System.err;
            java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$2);
            System.setErr(ax$2);
            {
                boolean ax$20 = false;
                for (int ax$19 = -4722; ax$19 < 893; ax$19 += 1) {
                    if (!ax$20) {
                        ax$20 = true;
                        {
                            System.setOut(ax$0);
                            System.setErr(ax$1);
                            try {
                                Test _instance = new Test();
                                for (int i = 0; i < 10; i++) {
                                    _instance.mainTest(strArr);
                                }
                            } catch (Exception ex) {
                                FuzzerUtils.out.println(ex.getClass().getCanonicalName());
                            }
                            System.setOut(ax$2);
                            System.setErr(ax$2);
                        }
                    }
                    try {
                        Thread.currentThread().interrupted();
                    } catch (Throwable ax$18) {
                    } finally {
                    }
                }
            }
            System.setOut(ax$0);
            System.setErr(ax$1);
        }
    }

    private static Boolean ax$21 = false;

    private static Boolean ax$29 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  dMeth ->  dMeth mainTest
// DEBUG  fMeth ->  fMeth dMeth mainTest
// DEBUG  lMeth ->  lMeth fMeth dMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
