// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -245L;

    public static byte byFld = -125;

    public static short sFld = 17021;

    public static boolean bFld = false;

    public static volatile double dFld = 122.18416;

    public int iFld = -18962;

    public float fFld = 0.839F;

    public int iArrFld[] = new int[N];

    public static long lArrFld[] = new long[N];

    public double dArrFld[] = new double[N];

    public byte byArrFld[] = new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 50L);
    }

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static void vMeth(int i4, int i5, int i6) {
        int i7 = -95;
        int i8 = -10;
        int i9 = -32625;
        int iArr[] = new int[N];
        float f = -54.421F;
        {
            final long ax$13 = Test.instanceCount;
            try {
                AtomicBoolean ax$11 = new AtomicBoolean();
                for (int ax$9 = -105; ax$9 < (-105 + 16812); ax$9 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        while (ax$11.get()) {
                            if ((System.nanoTime() - instanceCount) >= TimeUnit.SECONDS.toNanos(10)) {
                            }
                        }
                    } catch (Throwable ax$12) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                Test.instanceCount = ax$13;
            }
        }
        FuzzerUtils.init(iArr, 40142);
        i5 = i4;
        i7 = 1;
        do {
            Test.instanceCount = Test.byFld;
            i8 = 1;
            while ((++i8) < 3) {
                iArr = iArr;
                iArr[i8] <<= ((int) (Test.instanceCount));
                f *= i5;
                try {
                    i5 = iArr[i7 + 1] / (-1606700917);
                    i6 = i5 / (-1847366065);
                    i6 = i7 / 56545;
                } catch (ArithmeticException a_e) {
                }
                i9 = 1;
                do {
                    if (Test.bFld) {
                        i5 += Test.byFld;
                        i4 |= i8;
                        Test.sFld += ((short) (i9));
                        Test.sFld += ((short) (55920 + (i9 * i9)));
                        if (i4 != 0) {
                            vMeth_check_sum += ((((((i4 + i5) + i6) + i7) + i8) + Float.floatToIntBits(f)) + i9) + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                    } else {
                        i5 = i6;
                        i5 += i9;
                        i4 = ((int) (Test.instanceCount));
                        Test.instanceCount = -197;
                        i5 *= ((int) (Test.instanceCount));
                        iArr[(i6 >>> 1) % N] *= ((int) (Test.instanceCount));
                        iArr[i7] *= i6;
                        Test.instanceCount += i9 * i9;
                        i6 += i9;
                        Test.sFld -= ((short) (i4));
                        Test.dFld = f;
                        Test.instanceCount = Test.instanceCount;
                        i4 += i8;
                        Test.instanceCount += i9 + i5;
                    }
                    Test.instanceCount = i4;
                    i6 -= i5;
                    Test.instanceCount += 13;
                    i4 = i9;
                    Test.byFld |= ((byte) (-246));
                    Test.sFld += ((short) (i5));
                    i5 += ((int) (f));
                    Test.byFld += ((byte) ((-6) + (i9 * i9)));
                } while ((++i9) < 1 );
            }
        } while ((++i7) < 197 );
        vMeth_check_sum += ((((((i4 + i5) + i6) + i7) + i8) + Float.floatToIntBits(f)) + i9) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(int i2, int i3) {
        float f1 = 2.343F;
        float f2 = -2.669F;
        int i10 = -30475;
        int i11 = 12;
        int i12 = 2;
        int i13 = 122;
        int i14 = -3;
        int i16 = 8;
        int i17 = 26585;
        int iArr1[][] = new int[N][N];
        long lArr[] = new long[N];
        FuzzerUtils.init(iArr1, 65195);
        FuzzerUtils.init(lArr, 32L);
        vMeth(i2, i3, -110);
        for (f1 = 9; f1 < 152; f1++) {
            int i15 = -36;
            for (i11 = 1; 4 > i11; i11++) {
                i10 <<= i12;
                f2 = i10;
                iArr1[((int) (f1 - 1))][i11 - 1] ^= ((int) (-34L));
                Test.instanceCount = Test.instanceCount;
                for (i13 = 1; i13 < 2; i13++) {
                    iArr1[((int) (f1))][((int) (f1 - 1))] &= i3;
                    i3 += Test.sFld;
                    i14 += i13 - Test.instanceCount;
                    Test.dFld -= i14;
                    switch (((int) ((f1 % 1) + 118))) {
                        case 118 :
                            Test.instanceCount = -3993806945L;
                            i12 += i13;
                            Test.sFld -= ((short) (i11));
                            Test.sFld -= ((short) (i2));
                            Test.instanceCount = Test.sFld;
                            i14 <<= i13;
                            break;
                        default :
                            i2 -= ((int) (-2.627F));
                    }
                    iArr1[i11 + 1][i13 - 1] += i10;
                    i2 = i12;
                    i14 = i11;
                    if (i3 != 0) {
                    }
                    Test.dFld += i2;
                    i2 += i14;
                }
                f2 += i14;
                i3 = Test.sFld;
            }
            lArr[((int) (f1))] = i10;
            i12 -= Test.sFld;
            i2 += i13;
            switch ((((i15 >>> 1) % 3) * 5) + 41) {
                case 45 :
                    Test.instanceCount = i13;
                    for (i16 = 1; i16 < 4; ++i16) {
                        iArr1[i16 - 1][i16] = i12;
                        Test.instanceCount = i10;
                        Test.instanceCount = i14;
                    }
                    break;
                case 47 :
                    i12 += ((int) (f1 * f1));
                    break;
                case 52 :
                    iArr1[((int) (f1))][((int) (f1 - 1))] -= i12;
                    break;
            }
        }
        long meth_res = (((((((((((i2 + i3) + Float.floatToIntBits(f1)) + i10) + i11) + i12) + Float.floatToIntBits(f2)) + i13) + i14) + i16) + i17) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public int iMeth(int i1) {
        int i18 = -156;
        int i19 = 52;
        int i20 = -14848;
        int i22 = -22305;
        int i23 = 7;
        int i24 = -65028;
        int i25 = -244;
        int i26 = 15496;
        double d = 2.21898;
        long lArr1[][] = new long[N][N];
        float fArr1[] = new float[N];
        FuzzerUtils.init(lArr1, -1113093480L);
        FuzzerUtils.init(fArr1, 123.391F);
        iMeth1(i1, i1);
        i1 = i1;
        iArrFld[(i1 >>> 1) % N] = i1;
        for (i18 = 110; i18 > 4; i18 -= 2) {
            i19 = i1;
            i20 = 1;
            while ((++i20) < 10) {
                if (i20 != 0) {
                }
                iFld = iFld;
                iFld <<= -19995;
                fFld -= 0.544F;
                fFld *= i1;
            }
            Test.instanceCount = i18;
            for (i22 = 1; 10 > i22; i22++) {
                Test.sFld = ((short) (i18));
                i19 *= ((int) (Test.instanceCount));
                iArrFld[i18] += i20;
                if (i18 != 0) {
                }
                i1 += ((int) (Test.dFld));
            }
            for (d = i18; d < 10; d += 3) {
                if (i23 != 0) {
                }
                for (i25 = 1; i25 < 1; i25++) {
                    i1 = i24;
                    iArrFld[((int) (d + 1))] -= i20;
                    i24 += i22;
                    i19 = ((int) (fFld));
                    switch ((i25 * 5) + 26) {
                        case 180 :
                            i19 = i24;
                            Test.instanceCount += i25;
                            i26 += i25 + Test.sFld;
                            i24 = ((int) (Test.instanceCount));
                            i23 = ((int) (-11189L));
                            Test.bFld = Test.bFld;
                            if (Test.bFld) {
                                i24 /= 68;
                                Test.instanceCount -= Test.byFld;
                                Test.sFld <<= ((short) (i1));
                                i24 += i25;
                            } else if (Test.bFld) {
                                lArr1 = lArr1;
                            } else {
                                Test.instanceCount = iFld;
                            }
                        case 253 :
                            iFld = i26;
                            break;
                        case 296 :
                            iArrFld[((int) (d))] = i22;
                        case 107 :
                            iArrFld[i25 + 1] -= i20;
                            break;
                        case 160 :
                            i24 *= i25;
                            break;
                        case 263 :
                            Test.dFld = Test.instanceCount;
                            break;
                        case 221 :
                            i26 = ((int) (Test.instanceCount));
                            break;
                        case 370 :
                            if (Test.bFld)
                                break;

                        case 283 :
                            i24 += i23;
                            break;
                        case 34 :
                            Test.instanceCount >>= 125;
                            break;
                        case 144 :
                            i1 = i24;
                        case 215 :
                            iFld += i25;
                            break;
                        case 347 :
                            Test.instanceCount = Test.byFld;
                            break;
                        case 260 :
                            i19 -= -12;
                            break;
                        case 265 :
                            try {
                                i1 = i20 / i19;
                                i23 = i22 / i1;
                                i19 = i24 % iArrFld[(i23 >>> 1) % N];
                            } catch (ArithmeticException a_e) {
                            }
                        case 302 :
                            iArrFld[((int) (d))] = ((int) (21.92F));
                        case 247 :
                            i26 += ((int) ((-2121647921100788475L) + (i25 * i25)));
                            break;
                        case 200 :
                        case 128 :
                            Test.byFld -= ((byte) (-13));
                            break;
                        case 167 :
                            iFld <<= 6;
                        case 68 :
                            if (i20 != 0) {
                            }
                            break;
                        case 214 :
                            i26 += i25 ^ Test.instanceCount;
                            break;
                        case 248 :
                            Test.instanceCount += i25;
                            break;
                        case 145 :
                            try {
                                i19 = 1504819052 / i22;
                                i26 = i26 / i24;
                                i19 = iFld % i25;
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        case 219 :
                            i24 = -50831;
                            break;
                        case 311 :
                            iArrFld[i25 - 1] -= i20;
                            break;
                        case 270 :
                            Test.instanceCount += i25 ^ iFld;
                        case 88 :
                            iArrFld[i18 + 1] <<= iFld;
                        case 233 :
                            Test.sFld += ((short) (i25));
                            break;
                        case 163 :
                            i26 = i18;
                            break;
                        case 36 :
                            i23 = 80;
                            break;
                        case 64 :
                            i19 = i20;
                        case 31 :
                            i24 -= -63652;
                            break;
                        case 99 :
                            i23 = i26;
                            break;
                        case 174 :
                            fFld += ((i25 * Test.byFld) + iFld) - i1;
                            break;
                        case 345 :
                            iFld &= Test.sFld;
                            break;
                        case 355 :
                            Test.instanceCount += ((i25 * fFld) + i1) - Test.instanceCount;
                            break;
                        case 291 :
                            iFld += ((i25 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount;
                        case 115 :
                            fFld += ((long) (i25)) | ((long) (i25));
                            break;
                        case 67 :
                            i24 += i24;
                            break;
                        case 76 :
                            i1 += ((i25 * Test.instanceCount) + i24) - i20;
                            break;
                        case 151 :
                            Test.instanceCount += ((i25 * i23) + iFld) - i26;
                            break;
                        case 243 :
                            i19 <<= i18;
                        case 313 :
                            fFld += i20;
                            break;
                        case 83 :
                        case 374 :
                            i1 <<= -63;
                        case 267 :
                            i19 *= ((int) (fFld));
                        case 46 :
                        case 136 :
                            i24 = ((int) (-2304518112L));
                            break;
                        case 147 :
                            iFld = -16080;
                        case 162 :
                            iFld >>= i1;
                            break;
                        case 341 :
                            i1 -= i19;
                            break;
                        case 230 :
                            fArr1[(i1 >>> 1) % N] += fFld;
                            break;
                        case 350 :
                            iFld = i26;
                            break;
                        case 184 :
                            i26 = ((int) (Test.instanceCount));
                            break;
                        case 72 :
                            if (i20 != 0) {
                            }
                            break;
                        case 351 :
                            Test.instanceCount *= i19;
                        case 154 :
                            i19 >>>= i20;
                            break;
                        case 132 :
                            iFld = ((int) (Test.instanceCount));
                            break;
                        case 271 :
                            i1 += i22;
                        case 102 :
                            Test.instanceCount <<= i23;
                            break;
                        case 299 :
                            i19 -= ((int) (fFld));
                            break;
                        case 287 :
                            i19 -= ((int) (Test.instanceCount));
                            break;
                        case 373 :
                            i26 = i22;
                            break;
                        case 166 :
                            i24 -= ((int) (6786681664880501481L));
                        case 116 :
                            i24 += i19;
                            break;
                        case 59 :
                            i1 -= -93;
                            break;
                        case 318 :
                            lArr1[i25 + 1][((int) (d + 1))] *= i18;
                            break;
                        case 111 :
                            i1 *= i18;
                        case 277 :
                            if (Test.bFld)
                                continue;

                            break;
                    }
                }
            }
        }
        long meth_res = ((((((((((i1 + i18) + i19) + i20) + i22) + i23) + Double.doubleToLongBits(d)) + i24) + i25) + i26) + FuzzerUtils.checkSum(lArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public void mainTest(String[] strArr1) {
        int i = 96;
        int i27 = -63199;
        int i28 = -11;
        int i29 = 23701;
        int i30 = 58581;
        int i31 = 27;
        int i32 = 0;
        int i33 = 10;
        int i34 = -189;
        int i35 = -4;
        int i36 = 46;
        int i37 = 3;
        int i38 = -48663;
        int i39 = 47010;
        int i40 = 5;
        int i41 = 7;
        long l = -2722159973214740542L;
        float fArr[] = new float[N];
        FuzzerUtils.init(fArr, 0.308F);
        i = 201;
        while ((i -= 2) > 0) {
            fArr[i] -= iMeth(i);
        }
        for (i27 = 3; i27 < 117; ++i27) {
            switch (((13 >>> 1) % 8) + 68) {
                case 68 :
                    iArrFld[i27 + 1] = iFld;
                    break;
                case 69 :
                    iArrFld[i27] *= i;
                    Test.byFld = ((byte) (i27));
                    fFld += fFld;
                    i29 = ((int) (2953093810L));
                    iFld >>= i29;
                    for (l = 1; 44 > l; ++l) {
                        i28 += ((int) (Test.instanceCount));
                        iArrFld[((int) (l + 1))] |= iFld;
                        Test.instanceCount = iFld;
                        iArrFld[i27] -= i30;
                        i30 = ((int) (Test.dFld));
                        i30 >>= i;
                    }
                    fFld = 21635;
                    Test.lArrFld[i27] += Test.byFld;
                    {
                        final int ax$7 = i41;
                        final int ax$8 = i38;
                        try {
                            char[] ax$1 = new char[]{ '췆', '峰', '駊', '焎', '춀', '뜭' };
                            char[] ax$4 = new char[]{ '?', '檑', '鑴', 'ꕏ', '⬃', 'ଭ', '畾', 'ಬ', 'ㆤ' };
                            for (int ax$0 = -836; ax$0 < (-836 + 9782); ax$0 += 1) {
                                Test.AxOutputRedirectionHelper.redirect();
                                try {
                                    for (int ax$5 = 0; ax$5 < ax$4.length; ax$5 += 1) {
                                        ax$4[ax$5] = ((char) ((ax$1[ax$5] & i41) >>> i38));
                                    }
                                } catch (Throwable ax$6) {
                                } finally {
                                }
                                Test.AxOutputRedirectionHelper.recover();
                            }
                        } finally {
                            i41 = ax$7;
                            i38 = ax$8;
                        }
                    }
                    fFld += i27 * i27;
                    Test.dFld = i28;
                    fFld = fFld;
                    for (i31 = 1; 44 > i31; i31++) {
                        switch (((i31 % 6) * 5) + 98) {
                            case 120 :
                                i32 = i29;
                                break;
                            case 103 :
                            case 119 :
                                fFld += i;
                                for (i33 = 1; i33 < 2; i33++) {
                                    fFld -= fFld;
                                    Test.instanceCount = i27;
                                    Test.instanceCount = i;
                                }
                                try {
                                    i34 = iFld % (-30962);
                                    i32 = (-57600) / i30;
                                    i34 = i31 % (-194);
                                } catch (ArithmeticException a_e) {
                                }
                                if (false)
                                    break;

                                i29 -= i28;
                                Test.instanceCount += -58;
                                i30 += i29;
                                Test.instanceCount += Test.instanceCount;
                                for (i35 = 1; i35 < 2; i35++) {
                                    i34 *= i28;
                                    Test.bFld = Test.bFld;
                                    i28 = ((int) (Test.dFld));
                                    Test.instanceCount += ((i35 * i29) + iFld) - i33;
                                }
                                iFld = iFld;
                                i28 = i28;
                                break;
                            case 125 :
                                try {
                                    i30 = i33 % iFld;
                                    i32 = 55284 % i;
                                    iArrFld[i27] = i35 % i30;
                                } catch (ArithmeticException a_e) {
                                }
                                i29 >>>= i29;
                                iArrFld[i27 + 1] += 8;
                                break;
                            case 108 :
                                for (i37 = 2; i37 > 1; i37 -= 2) {
                                    i34 = ((int) (Test.instanceCount));
                                    Test.sFld >>= Test.sFld;
                                    dArrFld[i37] = iFld;
                                }
                                iFld = i27;
                                for (i39 = 1; 2 > i39; i39++) {
                                    int i42 = -64177;
                                    switch (((i31 % 9) * 5) + 99) {
                                        case 121 :
                                            i36 = i30;
                                            Test.instanceCount += ((i39 * Test.byFld) + Test.instanceCount) - Test.sFld;
                                            Test.instanceCount -= i33;
                                            i28 <<= i37;
                                            switch ((i39 % 6) + 102) {
                                                case 102 :
                                                    i30 = ((int) (Test.instanceCount));
                                                    break;
                                                case 103 :
                                                    i29 *= -14;
                                                    iArrFld[i31] = i41;
                                                    Test.instanceCount -= i27;
                                                    iFld = ((int) (l));
                                                    i29 += i39;
                                                    i30 -= ((int) (l));
                                                    Test.instanceCount -= 186;
                                                    Test.byFld *= ((byte) (i27));
                                                    i38 += i39 + Test.byFld;
                                                    if (Test.bFld)
                                                        break;

                                                    iArrFld[i39 + 1] -= i38;
                                                    i38 <<= i35;
                                                case 104 :
                                                    Test.bFld = Test.bFld;
                                                    iArrFld[i39 - 1] *= ((int) (Test.instanceCount));
                                                    i34 -= i41;
                                                    Test.instanceCount -= -52825;
                                                    break;
                                                case 105 :
                                                    if (false)
                                                        continue;

                                                    break;
                                                case 106 :
                                                case 107 :
                                                    iArrFld[i31 + 1] >>= i40;
                                                default :
                                                    Test.instanceCount = Test.sFld;
                                            }
                                            break;
                                        case 108 :
                                            i42 >>>= i29;
                                            break;
                                        case 118 :
                                            Test.instanceCount = i40;
                                            break;
                                        case 104 :
                                            i34 += ((i39 * fFld) + i38) - Test.instanceCount;
                                            break;
                                        case 119 :
                                            fFld -= -14;
                                            break;
                                        case 123 :
                                            byArrFld[i27 - 1] = ((byte) (i36));
                                            break;
                                        case 106 :
                                            i28 += i39;
                                            break;
                                        case 101 :
                                            iFld += iFld;
                                        case 136 :
                                            iArrFld[i31] += -10;
                                            break;
                                        default :
                                            fFld = -41335;
                                    }
                                }
                                break;
                            case 117 :
                                i36 = -6;
                            default :
                                i40 = Test.sFld;
                        }
                    }
                    break;
                case 70 :
                    iArrFld[i27] >>= i32;
                    break;
                case 71 :
                    try {
                        iFld = iArrFld[i27] / i30;
                        iArrFld[i27 + 1] = iArrFld[i27 + 1] / 255;
                        i28 = i37 / (-44578);
                    } catch (ArithmeticException a_e) {
                    }
                    break;
                case 72 :
                    Test.instanceCount = i27;
                    break;
                case 73 :
                    Test.instanceCount += ((i27 * i41) + fFld) - iFld;
                    break;
                case 74 :
                    Test.dFld -= i39;
                    break;
                case 75 :
                    i32 -= i30;
                    break;
            }
        }
        FuzzerUtils.out.println((((("i i27 i28 = " + i) + ",") + i27) + ",") + i28);
        FuzzerUtils.out.println((((("i29 l i30 = " + i29) + ",") + l) + ",") + i30);
        FuzzerUtils.out.println((((("i31 i32 i33 = " + i31) + ",") + i32) + ",") + i33);
        FuzzerUtils.out.println((((("i34 i35 i36 = " + i34) + ",") + i35) + ",") + i36);
        FuzzerUtils.out.println((((("i37 i38 i39 = " + i37) + ",") + i38) + ",") + i39);
        FuzzerUtils.out.println((((("i40 i41 fArr = " + i40) + ",") + i41) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.byFld Test.sFld = " + Test.instanceCount) + ",") + Test.byFld) + ",") + Test.sFld);
        FuzzerUtils.out.println((((("Test.bFld Test.dFld iFld = " + (Test.bFld ? 1 : 0)) + ",") + Double.doubleToLongBits(Test.dFld)) + ",") + iFld);
        FuzzerUtils.out.println((((("fFld iArrFld Test.lArrFld = " + Float.floatToIntBits(fFld)) + ",") + FuzzerUtils.checkSum(iArrFld)) + ",") + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println((("dArrFld byArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld))) + ",") + FuzzerUtils.checkSum(byArrFld));
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}