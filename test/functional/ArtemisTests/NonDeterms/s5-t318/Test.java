// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.channels.AsynchronousSocketChannel;
import java.util.List;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -62744L;

    public static byte byFld = 48;

    public static boolean bFld = false;

    public static short sFld = 31306;

    public static volatile long lFld = 14655L;

    public boolean bFld1 = false;

    public static int iArrFld[] = new int[N];

    public long lArrFld[] = new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -249);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {
        int i5 = 1;
        int i6 = 5416;
        int i7 = 110;
        int i8 = 63550;
        int i9 = -38086;
        int i10 = -175;
        int i11 = 18637;
        int iArr[] = new int[N];
        double d = -88.87853;
        float f2 = -116.76F;
        FuzzerUtils.init(iArr, 129);
        i5 = Test.byFld;
        for (i6 = 7; i6 < 112; ++i6) {
            d -= Test.instanceCount;
            for (i8 = i6; i8 < 5; i8++) {
                for (i10 = 1; i10 > 1; i10 -= 2) {
                    i5 = i7;
                    f2 += i5;
                    i11 += i10 * i10;
                    Test.bFld = Test.bFld;
                    iArr[i8 - 1] >>= ((int) (Test.instanceCount));
                    Test.instanceCount = i10;
                    Test.sFld += ((short) (d));
                    switch ((i6 % 2) + 55) {
                        case 55 :
                            i11 += ((int) (2.822F + (i10 * i10)));
                            i11 -= ((int) (-1368959409548843426L));
                            f2 *= f2;
                            if (false) {
                                Test.instanceCount = -1383043873L;
                                d = Test.instanceCount;
                                i7 -= -198;
                                iArr[i6] -= i11;
                                if (true)
                                    break;

                                try {
                                    i9 = i6 % i6;
                                    i7 = (-78) / i10;
                                    i7 = 21195 % i11;
                                } catch (ArithmeticException a_e) {
                                }
                                Test.instanceCount >>= i7;
                                if (i8 != 0) {
                                    vMeth2_check_sum += ((((((((i5 + i6) + i7) + Double.doubleToLongBits(d)) + i8) + i9) + i10) + i11) + Float.floatToIntBits(f2)) + FuzzerUtils.checkSum(iArr);
                                    return;
                                }
                            } else if (false) {
                                i9 = i10;
                                i9 = Test.sFld;
                                vMeth2_check_sum += ((((((((i5 + i6) + i7) + Double.doubleToLongBits(d)) + i8) + i9) + i10) + i11) + Float.floatToIntBits(f2)) + FuzzerUtils.checkSum(iArr);
                                return;
                            } else {
                                i11 += ((i10 * Test.instanceCount) + Test.byFld) - i6;
                                f2 *= i11;
                                iArr[i8] -= i7;
                                try {
                                    i7 = i6 / (-12820);
                                    i5 = 177 % i6;
                                    i11 = (-106) % i5;
                                } catch (ArithmeticException a_e) {
                                }
                                f2 += i10 * i11;
                                Test.byFld = ((byte) (Test.sFld));
                                i11 += i10 - i10;
                                f2 = i6;
                                Test.instanceCount += ((i10 * Test.instanceCount) + i9) - i5;
                                i5 += 46559;
                            }
                            break;
                        case 56 :
                            i9 = ((int) (d));
                        default :
                            Test.instanceCount <<= Test.instanceCount;
                    }
                }
            }
        }
        vMeth2_check_sum += ((((((((i5 + i6) + i7) + Double.doubleToLongBits(d)) + i8) + i9) + i10) + i11) + Float.floatToIntBits(f2)) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(float f1, int i3, int i4) {
        if (Test.ax$17) {
            final boolean ax$23 = Test.bFld;
            Throwable ax$18 = new Throwable();
            String ax$19 = "s";
            Throwable ax$21 = new Throwable();
            Test.AxOutputRedirectionHelper.redirect();
            try {
                bFld = false;
            } catch (Throwable ax$22) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.bFld = ax$23;
            return;
        }
        int i13 = 32605;
        int i14 = 19;
        int i15 = 34230;
        int i16 = -31052;
        int i17 = 11;
        int i18 = -71;
        int i19 = -95;
        int i21 = 11;
        long l = -839835311L;
        long lArr[] = new long[N];
        double d1 = 0.103945;
        FuzzerUtils.init(lArr, 20L);
        vMeth2();
        for (int i12 : Test.iArrFld) {
            switch ((((i13 >>> 1) % 3) * 5) + 75) {
                case 76 :
                    for (i14 = 1; i14 < 2; ++i14) {
                        for (l = 2; l > 1; l -= 3) {
                            Test.instanceCount += l;
                            i16 = ((int) (8384309095203582332L));
                            Test.byFld += ((byte) (-51558));
                        }
                        i12 = i4;
                        i12 += i16;
                        i17 = 2;
                        do {
                            f1 = Test.byFld;
                            Test.iArrFld = Test.iArrFld;
                            i3 >>= i12;
                            i15 = i17;
                            Test.iArrFld[i14 - 1] += i15;
                            i16 += i17;
                            i12 = -15974;
                            Test.instanceCount = Test.instanceCount;
                            if (Test.bFld)
                                break;

                            i13 *= ((int) (-106.35F));
                        } while ((--i17) > 0 );
                        switch ((i14 % 2) + 10) {
                            case 10 :
                                i13 += i14 | i12;
                                i4 <<= -128;
                                i13 |= i3;
                            case 11 :
                                i3 = -87;
                                for (i18 = i14; 2 > i18; i18++) {
                                    int i20 = 12;
                                    Test.byFld >>= ((byte) (l));
                                    i20 = Test.byFld;
                                    i20 -= i21;
                                    Test.instanceCount &= Test.sFld;
                                    Test.iArrFld[i14 + 1] *= ((int) (-2.883F));
                                    i12 = i15;
                                    if (Test.bFld)
                                        continue;

                                    Test.iArrFld[i14 + 1] *= ((int) (d1));
                                    i16 += i3;
                                    lArr[i18] ^= Test.byFld;
                                }
                                break;
                            default :
                                i4 = ((int) (f1));
                        }
                    }
                    break;
                case 82 :
                    i16 -= i14;
                    break;
                case 79 :
                    if (i18 != 0) {
                        vMeth1_check_sum += ((((((((((((Float.floatToIntBits(f1) + i3) + i4) + i13) + i14) + i15) + l) + i16) + i17) + i18) + i19) + i21) + Double.doubleToLongBits(d1)) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    break;
                default :
                    i13 *= ((int) (24L));
            }
        }
        vMeth1_check_sum += ((((((((((((Float.floatToIntBits(f1) + i3) + i4) + i13) + i14) + i15) + l) + i16) + i17) + i18) + i19) + i21) + Double.doubleToLongBits(d1)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i1, int i2) {
        if (Test.ax$0) {
            Deflater ax$1 = new Deflater();
            DeflaterOutputStream ax$2 = null;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                try {
                    ax$2 = new DeflaterOutputStream(null, ax$1);
                } catch (NullPointerException ax$3) {
                }
            } catch (Throwable ax$4) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return;
        }
        float f3 = -2.531F;
        float fArr[] = new float[N];
        int i22 = -205;
        int i23 = 214;
        int i24 = -8;
        int i25 = -13;
        int i26 = -8103;
        double d2 = 104.129122;
        long l1 = 21892L;
        FuzzerUtils.init(fArr, -21.11F);
        i2 -= Integer.reverseBytes(i1 + (-(i1 - i1)));
        {
            final int ax$32 = i22;
            final int ax$33 = i24;
            try {
                byte[] ax$25 = new byte[]{ ((byte) (-23)), ((byte) (-114)), ((byte) (-70)), ((byte) (5)) };
                byte[] ax$28 = new byte[]{ ((byte) (54)), ((byte) (-119)) };
                AtomicLongArray ax$30 = null;
                for (int ax$24 = -338; ax$24 < (-338 + 10637); ax$24 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$28[i24] = ((byte) (ax$25[i24] << i22));
                    } catch (Throwable ax$29) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$17 = true;
                    vMeth1(0.16378403F, 1717723243, 1385732659);
                    Test.ax$17 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$30.lazySet(0, 5L);
                    } catch (Throwable ax$31) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i22 = ax$32;
                i24 = ax$33;
            }
        }
        vMeth1(f3, i2, -9);
        for (i22 = 7; i22 < 147; i22++) {
            i24 = 1;
            do {
                i23 -= ((int) (d2));
                for (i25 = 1; i25 < 1; i25++) {
                    i1 = i24;
                    i1 >>= 3;
                    i2 -= i22;
                    i23 = i26;
                    i2 = ((int) (d2));
                    switch (((i24 >>> 1) % 1) + 55) {
                        case 55 :
                            i26 = ((int) (Test.instanceCount));
                            break;
                        default :
                            if (false)
                                break;

                            Test.iArrFld[i24] &= i2;
                            Test.lFld += -5;
                            fArr[i22 - 1] = Test.instanceCount;
                            Test.iArrFld[i25] &= -8;
                    }
                    i23 /= ((int) (Test.lFld | 1));
                    if (Test.bFld)
                        break;

                    f3 %= ((long) (d2)) | 1;
                    if (Test.bFld) {
                        Test.bFld = Test.bFld;
                        d2 -= -7.226F;
                        Test.instanceCount += i25 | i26;
                        Test.lFld = i24;
                        i23 += 231;
                        i2 *= ((int) (Test.lFld));
                        i1 -= i26;
                        i26 = ((int) (-2.24F));
                        i1 = i25;
                    } else if (Test.bFld) {
                        l1 = l1;
                        Test.sFld = ((short) (i25));
                        Test.sFld += ((short) (i25 + l1));
                        i26 >>= i22;
                        i23 = i23;
                        i23 = i2;
                    } else {
                        l1 *= i26;
                    }
                }
            } while ((++i24) < 4 );
        }
        vMeth_check_sum += (((((((((i1 + i2) + Float.floatToIntBits(f3)) + i22) + i23) + i24) + Double.doubleToLongBits(d2)) + i25) + i26) + l1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {
        int i = 55976;
        int i27 = -221;
        int i28 = 50257;
        int i29 = 4;
        int i30 = 11;
        int i31 = 114;
        int i32 = -194;
        int i33 = 57884;
        int i34 = -55459;
        int i36 = -39359;
        float f = 0.493F;
        long l2 = 0L;
        long l3 = -439323253L;
        double d3 = 2.110732;
        double dArr[] = new double[N];
        boolean bArr[] = new boolean[N];
        short sArr[] = new short[N];
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(dArr, 1.112084);
        FuzzerUtils.init(sArr, ((short) (16812)));
        i = -50199;
        i = ((int) (f++));
        i += --i;
        i -= 176 << Math.max(-33, i = i);
        {
            final int ax$15 = i29;
            final int ax$16 = i28;
            try {
                AsynchronousSocketChannel ax$6 = null;
                List<AsynchronousSocketChannel> ax$7 = null;
                boolean[][] ax$11 = new boolean[][]{ new boolean[]{ true, false }, new boolean[]{ true, false, false, false, false } };
                String ax$12 = "2.946131550536850E-39";
                for (int ax$5 = -386; ax$5 < (-386 + 10874); ax$5 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$7.add(ax$6);
                    } catch (Throwable ax$8) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    vMeth(364037060, -1815685353);
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$13 = 0; ax$13 < i29; ax$13++) {
                            ax$11[i28][ax$13] = ax$12.charAt(ax$13) == '.';
                        }
                    } catch (Throwable ax$14) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i29 = ax$15;
                i28 = ax$16;
            }
        }
        vMeth(-64563, i);
        Test.instanceCount %= Test.byFld | 1;
        for (i27 = 3; i27 < 114; i27++) {
            if (Test.bFld) {
                i *= i27;
                switch ((i27 % 4) + 31) {
                    case 31 :
                        for (i29 = 1; 46 > i29; i29++) {
                            i28 += ((i29 * i28) + i29) - i30;
                            for (i31 = 1; i31 < 2; ++i31) {
                                f += ((i31 * i31) + i30) - i27;
                                i32 += ((int) (70.607F));
                                i28 += i31 | ((long) (f));
                                l2 += i31;
                                i28 = ((int) (d3));
                                Test.iArrFld = FuzzerUtils.int1array(N, ((int) (7)));
                                Test.iArrFld[i27 + 1] = ((int) (14L));
                            }
                            Test.iArrFld = Test.iArrFld;
                            for (i33 = 2; i33 > 1; i33--) {
                                int i35 = 48890;
                                i34 += ((int) (-2.277F));
                                i35 >>= i28;
                                d3 += l2;
                                i35 <<= i35;
                                i34 *= i28;
                                switch ((((i34 >>> 1) % 3) * 5) + 106) {
                                    case 118 :
                                        switch (((i33 >>> 1) % 4) + 50) {
                                            case 50 :
                                                i += i30;
                                                if (Test.bFld)
                                                    break;

                                                bFld1 = bFld1;
                                                Test.instanceCount = -4;
                                                if (bFld1)
                                                    break;

                                                i *= i30;
                                                i30 &= -161;
                                                Test.iArrFld[i29 - 1] = i27;
                                                try {
                                                    i28 = i29 % i33;
                                                    Test.iArrFld[i27 + 1] = Test.iArrFld[i33 + 1] % i31;
                                                    i = i33 % (-403969606);
                                                } catch (ArithmeticException a_e) {
                                                }
                                                d3 = l2;
                                            case 51 :
                                                if (bFld1)
                                                    break;

                                                f += i33;
                                                Test.iArrFld[i27] = ((int) (l3));
                                                lArrFld = lArrFld;
                                                Test.byFld += ((byte) ((-145) + (i33 * i33)));
                                                i28 += ((int) (Test.instanceCount));
                                                i -= Test.sFld;
                                                try {
                                                    i34 = i35 % 865512719;
                                                    i = i32 / (-16175);
                                                    i32 = i28 % (-43374);
                                                } catch (ArithmeticException a_e) {
                                                }
                                                i = i29;
                                                i = i35;
                                                break;
                                            case 52 :
                                                i34 += i33;
                                                Test.iArrFld[i33 - 1] >>= Test.sFld;
                                                i -= ((int) (f));
                                                i34 += i33 * i33;
                                            case 53 :
                                                l3 = i32;
                                                i28 = i30;
                                                if (bFld1)
                                                    break;

                                                i30 -= i;
                                                i32 *= -34;
                                                if (bFld1)
                                                    continue;

                                                Test.iArrFld[i27] = i29;
                                                f -= 12;
                                                i30 %= ((int) (Test.byFld | 1));
                                                d3 = i30;
                                                bArr[i33] = Test.bFld;
                                                switch (((i27 % 3) * 5) + 78) {
                                                    case 84 :
                                                        bFld1 = bFld1;
                                                        Test.instanceCount += i33;
                                                        switch ((i27 % 9) + 34) {
                                                            case 34 :
                                                                f *= ((float) (d3));
                                                                i35 += i33;
                                                                lArrFld[i33 + 1] = Test.lFld;
                                                                i35 = ((int) (-3108625901L));
                                                                Test.byFld = ((byte) (i29));
                                                                dArr[i33] = i;
                                                                d3 *= Test.lFld;
                                                            case 35 :
                                                                l3 -= ((long) (f));
                                                                break;
                                                            case 36 :
                                                                bFld1 = bFld1;
                                                                break;
                                                            case 37 :
                                                                i28 += i35;
                                                            case 38 :
                                                                f = Test.sFld;
                                                            case 39 :
                                                                i30 = ((int) (l3));
                                                                break;
                                                            case 40 :
                                                                Test.lFld *= i35;
                                                                break;
                                                            case 41 :
                                                                Test.instanceCount += Test.lFld;
                                                                break;
                                                            case 42 :
                                                                Test.instanceCount <<= i;
                                                        }
                                                        break;
                                                    case 93 :
                                                        i30 += ((i33 * i30) + i27) - i34;
                                                        break;
                                                    case 89 :
                                                        if (Test.bFld)
                                                            continue;

                                                        break;
                                                    default :
                                                        i28 -= i34;
                                                }
                                        }
                                        break;
                                    case 115 :
                                        l3 += i35;
                                        break;
                                    case 108 :
                                        sArr[i29] += Test.byFld;
                                    default :
                                        i36 <<= ((int) (-145L));
                                }
                            }
                        }
                        break;
                    case 32 :
                        i30 -= i31;
                        break;
                    case 33 :
                        Test.iArrFld = FuzzerUtils.int1array(N, ((int) (2475)));
                        break;
                    case 34 :
                        lArrFld[i27 + 1] += i30;
                    default :
                        i34 -= i30;
                }
            } else if (false) {
                Test.sFld += ((short) (11 + (i27 * i27)));
            } else {
                l2 += (-1) + (i27 * i27);
            }
        }
        FuzzerUtils.out.println((((("i f i27 = " + i) + ",") + Float.floatToIntBits(f)) + ",") + i27);
        FuzzerUtils.out.println((((("i28 i29 i30 = " + i28) + ",") + i29) + ",") + i30);
        FuzzerUtils.out.println((((("i31 i32 l2 = " + i31) + ",") + i32) + ",") + l2);
        FuzzerUtils.out.println((((("d3 i33 i34 = " + Double.doubleToLongBits(d3)) + ",") + i33) + ",") + i34);
        FuzzerUtils.out.println((((("l3 i36 bArr = " + l3) + ",") + i36) + ",") + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println((("dArr sArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + ",") + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println((((("Test.instanceCount Test.byFld Test.bFld = " + Test.instanceCount) + ",") + Test.byFld) + ",") + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println((((("Test.sFld Test.lFld bFld1 = " + Test.sFld) + ",") + Test.lFld) + ",") + (bFld1 ? 1 : 0));
        FuzzerUtils.out.println((("Test.iArrFld lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$17 = false;
}