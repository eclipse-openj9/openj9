// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.DataInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Arrays;

public class Test {
    public static final int N = 256;

    public static volatile long instanceCount = -8329019657635740199L;

    public static byte byFld = -122;

    public static boolean bFld = true;

    public static float fFld = 0.591F;

    public static float fFld1 = 2.3F;

    public static volatile int iFld = 27366;

    public static int iFld1 = 10;

    public static volatile float fArrFld[] = new float[N];

    public static volatile boolean bArrFld[][] = new boolean[N][N];

    public static double dArrFld[] = new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.461F);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.dArrFld, 89.63259);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth() {
        if (Test.ax$0) {
            final float ax$8 = Test.fFld;
            final int ax$7 = Test.iFld1;
            int[][] ax$2 = new int[][]{ new int[]{ -604307863, 1315463673, 1180294224, -53507653, 1927577105 }, new int[]{ 386877178, -2034366256, -580453926, 1078867506, -1985742146, 1560988625, 1379784611, 2063746095 } };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                for (int ax$5 = 0; ax$5 < 2; ax$5++) {
                    do {
                        fFld++;
                        iFld1 += ax$2[ax$5][ax$5];
                    } while ((++iFld1) < ax$5 );
                }
            } catch (Throwable ax$6) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iFld1 = ax$7;
            Test.fFld = ax$8;
            return -251420785;
        }
        boolean b = false;
        int i6 = -12188;
        int i7 = 192;
        int i8 = 9;
        int i9 = 45835;
        int i10 = -4715;
        int i11 = 168;
        int i12 = -1;
        int i13 = 9;
        int iArr3[] = new int[N];
        double d1 = 58.93029;
        float f2 = 73.933F;
        float f3 = 0.101F;
        FuzzerUtils.init(iArr3, 12);
        b = b;
        i6 = 1;
        while ((++i6) < 163) {
            Test.fArrFld[i6] += 0;
            for (i7 = 1; 4 > i7; i7 += 3) {
                short s = 14937;
                i8 -= ((int) (0L));
                d1 -= -38267;
                i8 <<= -34052;
                switch ((i6 % 5) + 28) {
                    case 28 :
                        iArr3[i6] = ((int) (Test.instanceCount));
                        if (b)
                            break;

                        try {
                            i8 = i7 % iArr3[i7 + 1];
                            i9 = i9 / (-112);
                            i8 = i8 / 153;
                        } catch (ArithmeticException a_e) {
                        }
                        switch (((i7 % 2) * 5) + 44) {
                            case 52 :
                                i9 *= ((int) (Test.instanceCount));
                                i8 = ((int) (Test.instanceCount));
                                i10 = 1;
                                do {
                                    float f1 = -22.243F;
                                    i8 = i7;
                                    i8 &= i9;
                                    i8 += ((int) (f1));
                                    iArr3[i6 + 1] = ((int) (Test.instanceCount));
                                    i8 >>= ((int) (Test.instanceCount));
                                } while ((++i10) < 4 );
                                for (i11 = 1; i11 < 4; i11++) {
                                    Test.instanceCount += ((i11 * Test.instanceCount) + f2) - Test.instanceCount;
                                    if (b) {
                                        f2 += i11 * i11;
                                        switch (((i6 % 2) * 5) + 61) {
                                            case 71 :
                                                i9 += i11 ^ Test.byFld;
                                                if (b)
                                                    break;

                                                i8 += i11 + i7;
                                                break;
                                            case 65 :
                                                f3 *= i8;
                                                Test.instanceCount &= -3362064405L;
                                                if (b)
                                                    continue;

                                                break;
                                        }
                                        i8 = i10;
                                        if (i13 != 0) {
                                        }
                                        Test.instanceCount += ((i11 * i9) + i13) - i9;
                                        i13 -= ((int) (-70.90455));
                                        d1 = Test.instanceCount;
                                    } else if (b) {
                                        i13 += i10;
                                    }
                                }
                            case 51 :
                                s += ((short) (i7));
                            default :
                                i13 *= Test.byFld;
                        }
                        break;
                    case 29 :
                        i12 += i8;
                    case 30 :
                        Test.instanceCount = 2669333539L;
                        break;
                    case 31 :
                        if (b)
                            continue;

                        break;
                    case 32 :
                        Test.instanceCount *= ((long) (f3));
                        break;
                }
            }
        }
        long meth_res = ((((((((((((b ? 1 : 0) + i6) + i7) + i8) + Double.doubleToLongBits(d1)) + i9) + i10) + i11) + i12) + Float.floatToIntBits(f2)) + Float.floatToIntBits(f3)) + i13) + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static void vMeth1(long l, int i5) {
        float f4 = -25.128F;
        short s1 = 27117;
        int i14 = -8;
        int i15 = 234;
        int i16 = 151;
        int i17 = -141;
        int i18 = 10;
        int i19 = -32859;
        int i20 = -14;
        int iArr2[] = new int[N];
        int iArr4[][] = new int[N][N];
        double d2 = 2.19904;
        double dArr[] = new double[N];
        long lArr1[] = new long[N];
        FuzzerUtils.init(iArr2, 15);
        FuzzerUtils.init(dArr, 41.21318);
        FuzzerUtils.init(lArr1, -7L);
        FuzzerUtils.init(iArr4, 12);
        iArr2[(i5 >>> 1) % N] *= ((int) (--dArr[(i5 >>> 1) % N]));
        i5 <<= --i5;
        {
            final int ax$17 = i16;
            try {
                DataInputStream ax$10 = null;
                char[] ax$13 = new char[]{ '鎀', '斘', '놃', '瀳', 'ᒘ', '쿋', '댇', 'ᤶ', '䓏' };
                char[] ax$14 = new char[]{ '犙', '垏', '谦', '䑜', '' };
                for (int ax$9 = -762; ax$9 < (-762 + 9255); ax$9 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$10.available();
                    } catch (Throwable ax$11) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    iMeth();
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$15 = 0; ax$15 < i16; ax$15++) {
                            ax$13[ax$15] = ((char) (((ax$14[ax$15] & 0xffff) + 0xffff) >>> 1));
                        }
                    } catch (Throwable ax$16) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i16 = ax$17;
            }
        }
        iMeth();
        if (Test.bFld) {
            switch (((i5 >>> 1) % 10) + 122) {
                case 122 :
                    i5 += ((int) (l));
                    break;
                case 123 :
                    i5 = ((int) (f4));
                    i5 = ((int) (f4));
                    iArr2[(i5 >>> 1) % N] ^= i5;
                    i5 <<= -26964;
                    s1 += ((short) (i5));
                    i14 = 1;
                    while ((++i14) < 194) {
                        i5 = 10698;
                        s1 = ((short) (d2));
                        switch (((i14 % 9) * 5) + 28) {
                            case 34 :
                                d2 -= i5;
                                i5 %= -5;
                                for (i15 = i14; i15 < 3; i15++) {
                                    Test.byFld <<= ((byte) (i17));
                                    i16 += ((i15 * l) + i5) - i16;
                                    for (i18 = 1; i18 < 1; i18++) {
                                        if (true) {
                                            if (Test.bFld) {
                                                Test.bFld = Test.bFld;
                                                Test.instanceCount = i20;
                                                s1 += ((short) (f4));
                                                i5 = i16;
                                                i20 <<= Test.byFld;
                                                if (i15 != 0) {
                                                    vMeth1_check_sum += ((((((((((((((l + i5) + Float.floatToIntBits(f4)) + s1) + i14) + Double.doubleToLongBits(d2)) + i15) + i16) + i17) + i18) + i19) + i20) + FuzzerUtils.checkSum(iArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(lArr1)) + FuzzerUtils.checkSum(iArr4);
                                                    return;
                                                }
                                                switch ((i15 % 1) + 122) {
                                                    case 122 :
                                                        i16 += ((i18 * i15) + f4) - Test.instanceCount;
                                                        break;
                                                    default :
                                                        if (Test.bFld)
                                                            break;

                                                        f4 -= l;
                                                        i20 += i16;
                                                        i19 += ((int) (l));
                                                        i20 = i14;
                                                        l <<= -15764;
                                                }
                                                vMeth1_check_sum += ((((((((((((((l + i5) + Float.floatToIntBits(f4)) + s1) + i14) + Double.doubleToLongBits(d2)) + i15) + i16) + i17) + i18) + i19) + i20) + FuzzerUtils.checkSum(iArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(lArr1)) + FuzzerUtils.checkSum(iArr4);
                                                return;
                                            } else {
                                                Test.fArrFld[i14 + 1] *= s1;
                                            }
                                        } else {
                                            lArr1[i18] -= i5;
                                        }
                                    }
                                }
                                break;
                            case 71 :
                                {
                                    final boolean ax$50 = Test.bFld;
                                    final int ax$51 = i17;
                                    final int ax$52 = i5;
                                    final int ax$53 = i16;
                                    try {
                                        byte[] ax$44 = new byte[]{ ((byte) (-105)), ((byte) (-28)) };
                                        byte[] ax$45 = new byte[]{ ((byte) (87)), ((byte) (-105)), ((byte) (-123)), ((byte) (-5)), ((byte) (44)), ((byte) (47)) };
                                        boolean ax$38 = false;
                                        for (int ax$37 = -804; ax$37 < (-804 + 12117); ax$37 += 1) {
                                            Test.AxOutputRedirectionHelper.redirect();
                                            try {
                                                for (long ax$40 = System.nanoTime(); ax$40 < 42; ++ax$40) {
                                                    for (long ax$41 = System.currentTimeMillis(); ax$41 != 42; ++ax$41) {
                                                    }
                                                }
                                            } catch (Throwable ax$42) {
                                            } finally {
                                            }
                                            Test.AxOutputRedirectionHelper.recover();
                                            if (!ax$38) {
                                                i20 /= ((int) (i18 | 1));
                                                ax$38 = true;
                                            }
                                            Test.AxOutputRedirectionHelper.redirect();
                                            try {
                                                for (int ax$48 = 0; ax$48 < i16; ax$48++) {
                                                    ax$45[i5] = ((byte) (i17));
                                                    ax$44[i5] = ((byte) (ax$48));
                                                    i5++;
                                                }
                                            } catch (Throwable ax$49) {
                                            } finally {
                                            }
                                            Test.AxOutputRedirectionHelper.recover();
                                        }
                                    } finally {
                                        Test.bFld = ax$50;
                                        i17 = ax$51;
                                        i5 = ax$52;
                                        i16 = ax$53;
                                    }
                                }
                            case 37 :
                                iArr4 = FuzzerUtils.int2array(N, ((int) (-7)));
                                break;
                            case 64 :
                                i16 <<= i14;
                                break;
                            case 70 :
                            case 51 :
                                i20 <<= i15;
                                break;
                            case 30 :
                                f4 = i20;
                                break;
                            case 29 :
                                i17 = ((int) (Test.instanceCount));
                                break;
                            case 47 :
                                l |= i18;
                            default :
                                iArr4[i14][i14] = i20;
                        }
                    }
                    break;
                case 124 :
                    Test.bFld = Test.bFld;
                case 125 :
                    i16 = i17;
                    break;
                case 126 :
                    i16 = i20;
                    break;
                case 127 :
                    l *= ((long) (d2));
                    break;
                case 128 :
                    i20 += i19;
                    break;
                case 129 :
                    i19 = 115;
                case 130 :
                    l = 35628;
                    break;
                case 131 :
                    f4 = 55324L;
                    break;
                default :
                    lArr1[(i14 >>> 1) % N] -= i19;
            }
        }
        vMeth1_check_sum += ((((((((((((((l + i5) + Float.floatToIntBits(f4)) + s1) + i14) + Double.doubleToLongBits(d2)) + i15) + i16) + i17) + i18) + i19) + i20) + FuzzerUtils.checkSum(iArr2)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(lArr1)) + FuzzerUtils.checkSum(iArr4);
    }

    public static void vMeth(int i1, int i2) {
        int i3 = 11;
        int i4 = 2;
        int i22 = -46439;
        int i23 = 10;
        int i24 = -11;
        int i25 = 36861;
        int i26 = 234;
        int i27 = -41298;
        int i28 = 166;
        int iArr1[] = new int[N];
        float f = -85.86F;
        float f5 = -91.754F;
        double d = 50.61221;
        short s3 = 21385;
        boolean bArr[] = new boolean[N];
        FuzzerUtils.init(iArr1, 146);
        FuzzerUtils.init(bArr, true);
        i3 -= ((int) ((f++) - ((Test.instanceCount * i2) - (--iArr1[(i1 >>> 1) % N]))));
        i4 = 1;
        while ((++i4) < 124) {
            i2 <<= iArr1[i4 + 1];
            i2 = ((int) (++Test.instanceCount));
            d -= ((d + Test.instanceCount) % (((long) (d = f)) | 1)) * (f - i1);
            vMeth1(Test.instanceCount, i4);
            {
                final int ax$36 = Test.iFld1;
                try {
                    char[] ax$20 = new char[1];
                    long[] ax$22 = new long[]{ 6 };
                    float[] ax$28 = new float[]{ 0.43038994F, 0.6232537F, 0.8139142F };
                    boolean ax$19 = false;
                    for (int ax$18 = -862; ax$18 < (-862 + 7321); ax$18 += 1) {
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            long ax$23 = ((long) (ax$20[(iFld1 * 4) + 0]));
                            long ax$24 = ((long) (ax$20[(iFld1 * 4) + 1]));
                            long ax$25 = ((long) (ax$20[(iFld1 * 4) + 2]));
                            long ax$26 = ((long) (ax$20[(iFld1 * 4) + 3]));
                            ax$22[iFld1] = (((ax$23 & 0xffffL) | ((ax$24 & 0xffffL) << 16)) | ((ax$25 & 0xffffL) << 32)) | ((ax$26 & 0xffffL) << 48);
                        } catch (Throwable ax$27) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                        if (!ax$19) {
                            i2 = Test.byFld;
                            ax$19 = true;
                        }
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            for (int ax$29 = 0; ax$29 < 200000; ax$29++) {
                                int ax$30 = ax$29 & 7;
                                int ax$31 = ax$30 + ((ax$29 >> 4) & 7);
                                float ax$32 = ((float) (ax$29));
                                if ((ax$29 & 1) == 1) {
                                    ax$32 = -ax$32;
                                }
                                Arrays.fill(ax$28, ax$30, ax$31, ax$32);
                                boolean ax$33 = false;
                                for (int ax$34 = ax$30; ax$34 < ax$31; ax$34++) {
                                    if (ax$28[ax$34] != ax$32) {
                                        ax$33 = true;
                                    }
                                }
                                if (ax$33);
                            }
                        } catch (Throwable ax$35) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                    }
                } finally {
                    Test.iFld1 = ax$36;
                }
            }
            if (i3 != 0) {
                vMeth_check_sum += (((((((((((((((i1 + i2) + i3) + Float.floatToIntBits(f)) + i4) + Double.doubleToLongBits(d)) + i22) + i23) + i24) + i25) + i26) + s3) + Float.floatToIntBits(f5)) + i27) + i28) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(bArr);
                return;
            }
            for (i22 = 1; i22 < 5; ++i22) {
                for (i24 = 1; i24 < 2; ++i24) {
                    short s2 = 17784;
                    bArr[i22 + 1] = false;
                    f += i24 * s2;
                    i23 += ((int) (Test.instanceCount));
                    i26 = ((int) (d));
                    d *= Test.instanceCount;
                    s2 += ((short) (i2));
                    i25 += ((i24 * f) + i24) - s2;
                    i23 = ((int) (39913L));
                    i2 += i24 * i24;
                }
                i25 = s3;
                for (f5 = 1; f5 < 2; f5 += 2) {
                    i25 <<= i3;
                    i3 += ((int) (-1.651F));
                    f %= i1 | 1;
                    if (i27 != 0) {
                        vMeth_check_sum += (((((((((((((((i1 + i2) + i3) + Float.floatToIntBits(f)) + i4) + Double.doubleToLongBits(d)) + i22) + i23) + i24) + i25) + i26) + s3) + Float.floatToIntBits(f5)) + i27) + i28) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(bArr);
                        return;
                    }
                    i3 += ((int) (9L + (f5 * f5)));
                    i3 += 0 + (f5 * f5);
                    Test.instanceCount *= i24;
                    Test.instanceCount = i28;
                    i27 -= i26;
                    if (i1 != 0) {
                        vMeth_check_sum += (((((((((((((((i1 + i2) + i3) + Float.floatToIntBits(f)) + i4) + Double.doubleToLongBits(d)) + i22) + i23) + i24) + i25) + i26) + s3) + Float.floatToIntBits(f5)) + i27) + i28) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(bArr);
                        return;
                    }
                    iArr1[((int) (f5 + 1))] += 100;
                }
                i1 ^= Test.byFld;
            }
            iArr1[i4] >>= Test.byFld;
            d = d;
        }
        Test.instanceCount = i28;
        i28 *= i27;
        vMeth_check_sum += (((((((((((((((i1 + i2) + i3) + Float.floatToIntBits(f)) + i4) + Double.doubleToLongBits(d)) + i22) + i23) + i24) + i25) + i26) + s3) + Float.floatToIntBits(f5)) + i27) + i28) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {
        int i = -14;
        int i29 = -47266;
        int i30 = 3449;
        int i31 = -9;
        int i32 = 31314;
        int i33 = -6;
        int i34 = -3;
        int i35 = -60805;
        int i36 = 4;
        int i37 = -54911;
        int iArr[][] = new int[N][N];
        short s4 = -23495;
        double d3 = 5.13095;
        double d4 = 0.20299;
        long lArr[] = new long[N];
        long lArr2[][] = new long[N][N];
        long lArr3[] = new long[N];
        FuzzerUtils.init(iArr, -249);
        FuzzerUtils.init(lArr, -1314975308340007250L);
        FuzzerUtils.init(lArr2, -323828508L);
        FuzzerUtils.init(lArr3, 557762087947316667L);
        iArr[(i >>> 1) % N][(i >>> 1) % N] = ((int) (-(++lArr[(i >>> 1) % N])));
        vMeth(i, i);
        for (i29 = 2; i29 < 172; i29++) {
            i *= i29;
            Test.instanceCount = i29;
            Test.instanceCount *= i30;
            s4 -= ((short) (202));
            i30 ^= i30;
            try {
                i30 = i % iArr[i29][i29];
                i30 = i30 / (-4794);
                iArr[i29][i29 + 1] = i % (-31800);
            } catch (ArithmeticException a_e) {
            }
            i31 = 1;
            while ((++i31) < 30) {
                d3 += i;
                i = i30;
            }
            for (i32 = 1; i32 < 30; ++i32) {
                i30 -= 45;
                lArr[i32] ^= i29;
                Test.fFld -= i29;
                i30 += ((i32 * Test.instanceCount) + i32) - i29;
            }
            for (i34 = 1; i34 < 30; i34++) {
                Test.instanceCount += i34 + i30;
                lArr[i34 - 1] = i31;
                switch ((((1 >>> 1) % 4) * 5) + 122) {
                    case 137 :
                        i30 += i32;
                        i33 >>= i30;
                        i33 *= ((int) (1033379529803213671L));
                        i33 <<= i;
                        i36 = 2;
                        while ((--i36) > 0) {
                            i30 *= ((int) (Test.instanceCount));
                            i35 *= ((int) (Test.instanceCount));
                            i33 += ((int) (Test.instanceCount));
                            Test.byFld += ((byte) (i));
                            i += ((i36 * i34) + i34) - Test.instanceCount;
                            switch (((6 >>> 1) % 3) + 29) {
                                case 29 :
                                    Test.fFld1 = i36;
                                    Test.bFld = Test.bFld;
                                    i35 &= i36;
                                case 30 :
                                    i30 = ((int) (d4));
                                    Test.bArrFld = Test.bArrFld;
                                    d3 -= i33;
                                    iArr = iArr;
                                    lArr2[i36 + 1][i34 - 1] -= i32;
                                    i35 *= ((int) (Test.instanceCount));
                                    i30 *= ((int) (Test.instanceCount));
                                    i35 += i;
                                    i35 += i36;
                                    i = i29;
                                    s4 *= ((short) (-7));
                                    i35 >>>= i30;
                                    iArr[i29 + 1][i36 + 1] = ((int) (Test.instanceCount));
                                    i30 += ((int) (Test.instanceCount));
                                    break;
                                case 31 :
                                    i35 *= i34;
                                    s4 = ((short) (i34));
                                    iArr[i29 + 1][i29 - 1] -= -30622;
                                    i35 >>= i36;
                                    i35 = ((int) (Test.instanceCount));
                                    i35 += i36 * i36;
                                    d4 = i29;
                                    i = i35;
                            }
                            Test.bFld = true;
                            lArr3[i34 - 1] >>= i35;
                            i30 = 5;
                            i37 >>= i35;
                            i = 25971;
                            Test.instanceCount -= i31;
                            i33 = i34;
                        }
                        switch (((i34 % 1) * 5) + 80) {
                            case 82 :
                                try {
                                    i35 = i34 / 937915187;
                                    i35 = 50677 / i29;
                                    i37 = i29 % i35;
                                } catch (ArithmeticException a_e) {
                                }
                                Test.instanceCount += Test.iFld;
                                if (Test.bFld) {
                                    Test.dArrFld[i29] = i37;
                                    lArr[i34] = i37;
                                    Test.fArrFld = Test.fArrFld;
                                    i = ((int) (Test.instanceCount));
                                    lArr[i34 - 1] ^= i37;
                                    iArr[i34][i29 + 1] -= ((int) (Test.instanceCount));
                                    d4 -= -248L;
                                } else {
                                    lArr = lArr2[i29 - 1];
                                }
                                break;
                        }
                        break;
                    case 132 :
                        i33 -= Test.iFld1;
                    case 140 :
                        d3 *= Test.instanceCount;
                        break;
                    case 124 :
                        Test.instanceCount = Test.iFld;
                        break;
                    default :
                        if (Test.bFld)
                            break;

                }
            }
        }
        FuzzerUtils.out.println((((("i i29 i30 = " + i) + ",") + i29) + ",") + i30);
        FuzzerUtils.out.println((((("s4 i31 d3 = " + s4) + ",") + i31) + ",") + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println((((("i32 i33 i34 = " + i32) + ",") + i33) + ",") + i34);
        FuzzerUtils.out.println((((("i35 i36 d4 = " + i35) + ",") + i36) + ",") + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println((((("i37 iArr lArr = " + i37) + ",") + FuzzerUtils.checkSum(iArr)) + ",") + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println((("lArr2 lArr3 = " + FuzzerUtils.checkSum(lArr2)) + ",") + FuzzerUtils.checkSum(lArr3));
        FuzzerUtils.out.println((((("Test.instanceCount Test.byFld Test.bFld = " + Test.instanceCount) + ",") + Test.byFld) + ",") + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println((((("Test.fFld Test.fFld1 Test.iFld = " + Float.floatToIntBits(Test.fFld)) + ",") + Float.floatToIntBits(Test.fFld1)) + ",") + Test.iFld);
        FuzzerUtils.out.println((((("Test.iFld1 Test.fArrFld Test.bArrFld = " + Test.iFld1) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld))) + ",") + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}