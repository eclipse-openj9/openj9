// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

public class Test {

    public static final int N = 256;

    public static long instanceCount = 2486945943L;

    public static boolean bFld = false;

    public int iFld = 0;

    public int iFld1 = -63256;

    public static byte byFld = 106;

    public short sFld = -4692;

    public double dFld = -119.75516;

    public static long[] lArrFld = new long[N];

    public volatile boolean[] bArrFld = new boolean[N];

    public static float[] fArrFld = new float[N];

    public static double[] dArrFld = new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2L);
        FuzzerUtils.init(Test.fArrFld, 100.290F);
        FuzzerUtils.init(Test.dArrFld, 1.38543);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d1, double d2) {
        float f = -1.475F, f1 = -1.20F;
        int i8 = 144, i9 = 177, i10 = 87, i11 = 24994, i12 = 163, i13 = 6, iArr1[] = new int[N], iArr2[] = new int[N];
        short s = 2746;
        long l3 = 133L, lArr[][] = new long[N][N];
        FuzzerUtils.init(iArr1, 43);
        FuzzerUtils.init(iArr2, 1);
        FuzzerUtils.init(lArr, 5534454484340277253L);
        for (f = 2; f < 80; ++f) {
            i8 += (int) (f * f);
            i8 >>= i8;
            i8 -= i8;
            i8 += i8;
            if (Test.bFld)
                continue;
            i8 += (int) (((f * Test.instanceCount) + s) - i8);
            i9 = 1;
            while (++i9 < 7) {
                Test.instanceCount -= (long) f;
                switch((int) ((f % 4) + 113)) {
                    case 113:
                        i8 >>= i8;
                        if (Test.bFld) {
                            {
                                java.io.PrintStream ax$0 = System.out;
                                java.io.PrintStream ax$1 = System.err;
                                java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                    @Override
                                    public void write(int b) throws java.io.IOException {
                                        // DO NOTHING: DISCARD ALL OUTPUTS
                                    }
                                });
                                System.setOut(ax$2);
                                System.setErr(ax$2);
                                {
                                    boolean ax$4 = false;
                                    for (int ax$3 = -4431; ax$3 < 4893; ax$3 += 5) {
                                        if (!ax$4) {
                                            ax$4 = true;
                                            {
                                                System.setOut(ax$0);
                                                System.setErr(ax$1);
                                                for (i10 = 1; 1 > i10; ++i10) {
                                                    i11 -= (int) Test.instanceCount;
                                                    f1 = s;
                                                    Test.lArrFld[(int) (f)] = i11;
                                                    Test.instanceCount = i9;
                                                    i11 += i11;
                                                    iArr1[i10 + 1] >>= i11;
                                                }
                                                System.setOut(ax$2);
                                                System.setErr(ax$2);
                                            }
                                        }
                                    }
                                }
                                System.setOut(ax$0);
                                System.setErr(ax$1);
                            }
                            f1 -= i8;
                            Test.instanceCount += (i9 - i11);
                            f1 += (((i9 * Test.instanceCount) + i8) - i9);
                            iArr2[(int) (f + 1)] = i11;
                            i8 *= i11;
                            i8 += (i9 * i9);
                        } else if (Test.bFld) {
                            for (i12 = 1; i12 < 1; i12++) {
                                if (false)
                                    break;
                                d1 = i10;
                                i13 -= i13;
                                i13 += (i12 * Test.instanceCount);
                                s *= (short) i13;
                                f1 += i12;
                                if (i10 != 0) {
                                    vMeth1_check_sum += Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + Float.floatToIntBits(f) + i8 + s + i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 + l3 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
                                    return;
                                }
                                lArr = lArr;
                                if (i10 != 0) {
                                    vMeth1_check_sum += Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + Float.floatToIntBits(f) + i8 + s + i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 + l3 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
                                    return;
                                }
                                d2 -= i13;
                            }
                            Test.instanceCount >>= 12;
                        } else {
                            i13 <<= (int) Test.instanceCount;
                            vMeth1_check_sum += Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + Float.floatToIntBits(f) + i8 + s + i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 + l3 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
                            return;
                        }
                        break;
                    case 114:
                        i13 += (i9 ^ Test.instanceCount);
                    case 115:
                        l3 += (7 + (i9 * i9));
                        break;
                    case 116:
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + Float.floatToIntBits(f) + i8 + s + i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 + l3 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth() {
        double d3 = 1.36874, d4 = -1.109064;
        int i14 = -59, i15 = 11, i16 = 35645, i17 = -14, i18 = -158, i19 = -198, iArr3[][] = new int[N][N];
        long l4 = 7740L;
        short s1 = -21125;
        float f2 = 0.69F;
        byte by = -32;
        FuzzerUtils.init(iArr3, 6);
        vMeth1(d3, d4);
        i14 = 1;
        while (++i14 < 139) {
            l4 = 4;
            while (--l4 > 0) {
                if (Test.bFld)
                    break;
                switch((int) (((l4 % 10) * 5) + 32)) {
                    case 42:
                        Test.instanceCount = i14;
                        s1 = (short) i14;
                        iFld += (int) l4;
                        iFld &= iFld;
                        Test.instanceCount >>= iFld;
                        iFld *= i15;
                        Test.lArrFld = Test.lArrFld;
                        iFld += (16541 + (l4 * l4));
                        Test.instanceCount = i15;
                        bArrFld[i14] = Test.bFld;
                        break;
                    case 37:
                    case 74:
                        i15 = (int) Test.instanceCount;
                        i15 = i15;
                        for (i16 = 1; i16 > 1; i16--) {
                            Test.instanceCount += (i16 - i14);
                            i17 = (int) Test.instanceCount;
                            i17 = i16;
                            iFld += (int) -9L;
                            Test.instanceCount &= i15;
                        }
                        i15 += (int) (((l4 * i14) + f2) - s1);
                        Test.instanceCount += (long) (-64.761F + (l4 * l4));
                        Test.instanceCount = -204;
                        try {
                            iFld = (i16 % i15);
                            iArr3[(int) (l4 + 1)][(int) (l4)] = (iFld / i16);
                            iFld = (i16 / i16);
                        } catch (ArithmeticException a_e) {
                        }
                        Test.instanceCount += iFld1;
                        iFld1 = (int) f2;
                        iFld1 = i17;
                        iFld1 = i14;
                        iFld1 = (int) d3;
                        i17 &= (int) Test.instanceCount;
                        {
                            java.io.PrintStream ax$5 = System.out;
                            java.io.PrintStream ax$6 = System.err;
                            java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

                                @Override
                                public void write(int b) throws java.io.IOException {
                                    // DO NOTHING: DISCARD ALL OUTPUTS
                                }
                            });
                            System.setOut(ax$7);
                            System.setErr(ax$7);
                            {
                                boolean ax$13 = false;
                                for (int ax$12 = -1578; ax$12 < 6603; ax$12 += 8) {
                                    if (!ax$13) {
                                        ax$13 = true;
                                        {
                                            System.setOut(ax$5);
                                            System.setErr(ax$6);
                                            for (i18 = 1; i18 < 1; ++i18) {
                                                by *= (byte) l4;
                                                Test.instanceCount += (-17664 + (i18 * i18));
                                                i17 += iFld1;
                                            }
                                            System.setOut(ax$7);
                                            System.setErr(ax$7);
                                        }
                                    }
                                    int ax$8 = i19;
                                    int ax$9 = i18;
                                    int ax$10 = i15;
                                    try {
                                        i19 = i19 & ~i15;
                                        i18 = i18 | i15;
                                    } catch (Throwable ax$11) {
                                    } finally {
                                        i19 = ax$8;
                                        i18 = ax$9;
                                        i15 = ax$10;
                                    }
                                }
                            }
                            System.setOut(ax$5);
                            System.setErr(ax$6);
                        }
                    case 72:
                        iFld1 <<= (int) Test.instanceCount;
                        break;
                    case 69:
                        iFld1 = 8083;
                        break;
                    case 78:
                        iArr3[(int) (l4)] = iArr3[i14 - 1];
                    case 66:
                        i15 += (-5 + (l4 * l4));
                    case 51:
                        i15 = iFld;
                        break;
                    case 50:
                        iFld1 >>= i19;
                        break;
                    case 43:
                        iFld = -101;
                        break;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d3) + Double.doubleToLongBits(d4) + i14 + l4 + s1 + i15 + i16 + i17 + Float.floatToIntBits(f2) + i18 + i19 + by + FuzzerUtils.checkSum(iArr3);
    }

    public int iMeth(int i3) {
        if (ax$25) {
            long ax$26 = vMeth1_check_sum;
            try {
                vMeth1_check_sum = 0;
            } catch (Throwable ax$27) {
            } finally {
                vMeth1_check_sum = ax$26;
            }
            return 604739845;
        }
        long l2 = 0L;
        int i4 = -6, i5 = 22402, i6 = 10302, i7 = 1, i20 = 251, i21 = -119, i22 = 12, i23 = -59288, i24 = -2, i25 = -11949, i26 = 140, iArr4[][] = new int[N][N];
        float f3 = 85.169F;
        double[] dArr = new double[N];
        FuzzerUtils.init(iArr4, 41579);
        FuzzerUtils.init(dArr, 0.15290);
        l2 = 1;
        do {
            i3 += (233 + (l2 * l2));
            for (i4 = 1; i4 < 5; i4++) {
                for (i6 = (int) (l2); 2 > i6; ++i6) {
                    Test.instanceCount *= ((++i7) - i6);
                    vMeth();
                    i7 ^= i6;
                    iArr4[i6][(int) (l2)] = (int) Test.instanceCount;
                    iFld1 = 7;
                }
                for (i20 = 1; i20 < 2; i20++) {
                    Test.instanceCount = Test.instanceCount;
                }
            }
            switch(((i20 >>> 1) % 5) + 64) {
                case 64:
                    if (i7 != 0) {
                    }
                    i3 = (int) Test.instanceCount;
                    bArrFld[(int) (l2 - 1)] = Test.bFld;
                    for (i22 = 1; i22 < 5; i22++) {
                        i7 += (((i22 * i21) + i22) - Test.instanceCount);
                        Test.fArrFld[i22 + 1] -= Test.byFld;
                        iArr4[(int) (l2)][(int) (l2 + 1)] += i7;
                    }
                    i24 = 1;
                    while ((i24 += 3) < 5) {
                        for (i25 = 1; 5 > i25; i25++) {
                            Test.instanceCount = iFld1;
                            Test.instanceCount += i25;
                            i23 += i25;
                            switch(((i25 % 2) * 5) + 54) {
                                case 57:
                                    iArr4[(int) (l2)][(i7 >>> 1) % N] *= Test.byFld;
                                    i23 = i3;
                                    i26 = (int) Test.instanceCount;
                                    iArr4[(int) (l2 + 1)][i25 + 1] >>= i21;
                                    dArr = dArr;
                                    if (Test.bFld) {
                                        if (i3 != 0) {
                                        }
                                        iFld = -234;
                                        i26 += (int) (50.418F + (i25 * i25));
                                        iFld1 >>= 73;
                                        f3 = (float) -1.83743;
                                        Test.instanceCount += (i25 ^ i4);
                                    } else if (false) {
                                        iFld1 = (int) -3511479058L;
                                    } else if (false) {
                                        iArr4[(int) (l2)][i24] = i24;
                                    } else {
                                        iFld += (((i25 * i7) + iFld) - f3);
                                    }
                                    break;
                                case 60:
                                    i3 += (i25 * i25);
                                    break;
                                default:
                                    f3 += f3;
                            }
                        }
                    }
                    break;
                case 65:
                    f3 = -166;
                    break;
                case 66:
                    i3 += (int) (l2 + iFld1);
                    break;
                case 67:
                    iFld *= i20;
                case 68:
                    Test.instanceCount += (-4033 + (l2 * l2));
                default:
                    Test.instanceCount >>= i4;
            }
        } while (++l2 < 116);
        long meth_res = i3 + l2 + i4 + i5 + i6 + i7 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(iArr4) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i = -3814, i1 = 96, i2 = 11, i27 = 11, i28 = -17645, i29 = 637, i30 = 7, i31 = -45255, i32 = -5, i33 = -226, i34 = -238, i35 = 7, i36 = 3, i37 = -150, iArr[] = new int[N], iArr5[][] = new int[N][N];
        long l = -65203L, l1 = 5467774402679960918L, l5 = -211L;
        float f4 = -1.588F;
        short[] sArr = new short[N];
        FuzzerUtils.init(sArr, (short) -10064);
        FuzzerUtils.init(iArr, -33008);
        FuzzerUtils.init(iArr5, -23464);
        for (i = 103; i > 6; i -= 3) {
            double d = 2.6114;
            for (l = 3; l < 157; ++l) {
                Test.instanceCount = (((++i1) * (i1 + i)) * (sArr[i]--));
                i2 += (((i2 = i2) + (iArr[i + 1] += i1)) - (--i1));
                Test.bFld = Test.bFld;
                iArr[i - 1] = (++i1);
            }
            Test.instanceCount = (long) (--d);
            i1 >>= (int) ((l1--) * (l1 + (l + d)));
            Test.lArrFld[i + 1] = iMeth(-118);
            f4 += i2;
            Test.dArrFld[i - 1] += i2;
            iArr = iArr;
            i2 += (((i * iFld1) + Test.byFld) - sFld);
            i2 -= iFld;
            i2 <<= i1;
            for (i27 = i; i27 < 157; ++i27) {
                iFld ^= 19172;
                Test.byFld = (byte) i;
                i1 &= iFld;
                Test.dArrFld[i27 + 1] = iFld;
                Test.instanceCount -= iFld1;
                l1 += i1;
            }
            f4 += (i * i2);
            if (Test.bFld) {
                sFld = (short) f4;
            } else if (Test.bFld) {
                iFld1 += (((i * i2) + l1) - i);
                i29 = 1;
                do {
                    iFld = 17060;
                    for (i30 = 1; i30 < 1; ++i30) {
                        iArr5 = iArr5;
                        f4 = l1;
                        l1 = 31L;
                    }
                    Test.byFld = (byte) sFld;
                    i31 = sFld;
                    d -= iFld;
                    i31 += Test.byFld;
                    for (i32 = 1; i32 < 1; i32++) {
                        iArr5[i + 1] = iArr5[(i27 >>> 1) % N];
                        iArr5[i + 1][i] >>>= i1;
                        Test.fArrFld[i29 - 1] = 14987;
                    }
                    i28 = i30;
                    Test.bFld = Test.bFld;
                    for (i34 = 1; i34 > 1; i34--) {
                        i28 = (int) Test.instanceCount;
                        Test.lArrFld[i + 1] *= i31;
                        l1 += i34;
                    }
                    i1 = sFld;
                    Test.fArrFld = Test.fArrFld;
                    for (i36 = 1; 1 > i36; i36++) {
                        Test.instanceCount = i33;
                        l1 = i30;
                        f4 = i32;
                        iArr[i36] = i1;
                        sFld += (short) i36;
                        l1 = i35;
                        switch((i36 % 4) + 33) {
                            case 33:
                                i35 >>>= iFld1;
                                i2 += (i36 * i36);
                                d = i2;
                                Test.bFld = Test.bFld;
                                l5 += (i36 ^ i1);
                                i28 -= i29;
                                d += f4;
                                Test.bFld = Test.bFld;
                                l5 = -79;
                                l5 += (i36 + f4);
                                d = i28;
                                f4 -= f4;
                                iArr[i - 1] = i;
                            case 34:
                                switch((i36 % 4) + 94) {
                                    case 94:
                                        iArr5[i36 + 1][i29] >>= i33;
                                        bArrFld[i29] = Test.bFld;
                                        try {
                                            iFld1 = (iFld1 / iArr5[i36 + 1][i]);
                                            i1 = (i30 / 177);
                                            i28 = (169 / i33);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        dFld = i34;
                                        l5 *= -3478;
                                        break;
                                    case 95:
                                        iFld1 = (int) l5;
                                        break;
                                    case 96:
                                        iArr5[i36 + 1][i36 - 1] = 6;
                                        break;
                                    case 97:
                                        i2 += i36;
                                        break;
                                    default:
                                        iArr5[i - 1][i + 1] = (int) l;
                                }
                                break;
                            case 35:
                                l1 += (long) f4;
                                break;
                            case 36:
                                i2 += (i36 * i36);
                                break;
                            default:
                                f4 += i28;
                        }
                    }
                } while (++i29 < 157);
            } else if (false) {
                i1 += (int) f4;
            }
            {
                java.io.PrintStream ax$22 = System.out;
                java.io.PrintStream ax$23 = System.err;
                java.io.PrintStream ax$24 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$24);
                System.setErr(ax$24);
                try {
                    for (int ax$20 = -486; ax$20 < 7302; ax$20 += 1) {
                        int ax$17 = i31;
                        int ax$18 = i30;
                        try {
                            int[] ax$14 = { -11 };
                            for (int ax$15 = 0; ax$15 < i30; ) {
                                int ax$16 = ax$14[ax$15];
                                i31 += ax$16;
                                ++ax$15;
                                ax$14[ax$15] = ax$16;
                            }
                        } catch (Throwable ax$19) {
                        } finally {
                            i31 = ax$17;
                            i30 = ax$18;
                        }
                    }
                } catch (Throwable ax$21) {
                }
                System.setOut(ax$22);
                System.setErr(ax$23);
            }
        }
        FuzzerUtils.out.println("i i1 l = " + i + "," + i1 + "," + l);
        FuzzerUtils.out.println("i2 l1 f4 = " + i2 + "," + l1 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 i37 l5 = " + i36 + "," + i37 + "," + l5);
        FuzzerUtils.out.println("sArr iArr iArr5 = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(iArr5));
        FuzzerUtils.out.println("Test.instanceCount Test.bFld iFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0) + "," + iFld);
        FuzzerUtils.out.println("iFld1 Test.byFld sFld = " + iFld1 + "," + Test.byFld + "," + sFld);
        FuzzerUtils.out.println("dFld Test.lArrFld bArrFld = " + Double.doubleToLongBits(dFld) + "," + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(bArrFld));
        FuzzerUtils.out.println("Test.fArrFld Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$25 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest
// DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
