// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.channels.AsynchronousSocketChannel;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -46194L;

    public static volatile short sFld = 3820;

    public static float fFld = -90.984F;

    public static boolean bFld = true;

    public static byte byFld = 41;

    public static double dFld = 1.7039;

    public float fFld1 = -104.75F;

    public static int iFld = -10;

    public float fArrFld[][] = new float[N][N];

    public long lArrFld[] = new long[N];

    public static long vMeth_check_sum = 0;

    public static long lMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, int i5, long l2) {
        long l3 = 1078820949L;
        long lArr[][] = new long[N][N];
        int i6 = -1;
        int i7 = 6;
        int i8 = 4720;
        int i9 = 9;
        int i10 = 12;
        int i11 = 16412;
        int i12 = 171;
        int i13 = 6;
        int i14 = -55756;
        int i15 = -27236;
        int i16 = 134;
        int i17 = -25399;
        int iArr[] = new int[N];
        byte by = -113;
        double d1 = 107.26935;
        float fArr[] = new float[N];
        FuzzerUtils.init(fArr, -1.394F);
        FuzzerUtils.init(iArr, 196);
        FuzzerUtils.init(lArr, 46L);
        l3 = 1;
        while ((++l3) < 162) {
            for (i6 = 1; i6 < 4; ++i6) {
                Test.instanceCount = by;
                for (i8 = ((int) (l3)); i8 < 2; ++i8) {
                    i5 = i4;
                    i9 = ((int) (Test.instanceCount));
                    i9 += i5;
                    Test.sFld <<= ((short) (i7));
                }
                i9 = i9;
                fArr = fArr;
                for (i10 = 1; i10 < 2; i10++) {
                    i9 += i5;
                    i11 += ((i10 * l2) + i4) - i5;
                    iArr = FuzzerUtils.int1array(N, ((int) (-217)));
                    i9 *= i5;
                }
                i5 += ((i6 * i8) + l3) - i4;
                lArr[i6 - 1][i6 - 1] /= i10 | 1;
                d1 = i9;
                if (i8 != 0) {
                    vMeth1_check_sum += (((((((((((((((((((i4 + i5) + l2) + l3) + i6) + i7) + by) + i8) + i9) + i10) + i11) + Double.doubleToLongBits(d1)) + i12) + i13) + i14) + i15) + i16) + i17) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr);
                    return;
                }
            }
            for (i12 = 1; i12 < 4; ++i12) {
                i4 -= ((int) (Test.fFld));
                i14 >>= i13;
                d1 *= l2;
                for (i15 = 1; 2 > i15; ++i15) {
                    i7 = ((int) (l2));
                    iArr[((int) (l3))] -= i10;
                    i16 = i5;
                    iArr[i12] *= ((int) (Test.instanceCount));
                }
                i14 = i14;
                iArr[i12] -= ((int) (Test.fFld));
                i17 = 1;
                while ((++i17) < 2) {
                    i7 = i8;
                    i14 += i15;
                    i9 = i4;
                    i14 *= i12;
                    i9 = i12;
                    i11 -= ((int) (-1.51334));
                }
            }
        }
        vMeth1_check_sum += (((((((((((((((((((i4 + i5) + l2) + l3) + i6) + i7) + by) + i8) + i9) + i10) + i11) + Double.doubleToLongBits(d1)) + i12) + i13) + i14) + i15) + i16) + i17) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(int i3) {
        int i18 = -13;
        int i19 = 61509;
        int i20 = 2;
        int i21 = 6;
        int i22 = 46030;
        int i23 = 13;
        int i24 = -8;
        int i25 = 96;
        int i26 = 1;
        int i27 = 8;
        int i28 = 90;
        int iArr1[] = new int[N];
        double dArr[] = new double[N];
        long lArr1[] = new long[N];
        short sArr[] = new short[N];
        FuzzerUtils.init(iArr1, -53343);
        FuzzerUtils.init(dArr, -2.93475);
        FuzzerUtils.init(lArr1, -158675037L);
        FuzzerUtils.init(sArr, ((short) (25757)));
        vMeth1(i3, i3, Test.instanceCount);
        for (i18 = 200; i18 > 10; i18--) {
            double d2 = 1.37316;
            Test.sFld += ((short) (i18));
            Test.fFld = ((float) (d2));
            i3 += -191;
            Test.instanceCount += i18 ^ Test.instanceCount;
            if (Test.bFld) {
                Test.instanceCount = i19;
                for (i20 = 1; i20 < 3; ++i20) {
                    if (Test.bFld)
                        break;

                }
                iArr1[i18 - 1] *= ((int) (Test.instanceCount));
                Test.sFld = ((short) (Test.instanceCount));
                for (i22 = 1; i22 < 3; ++i22) {
                    for (i24 = 2; i24 > 1; --i24) {
                        Test.instanceCount += i24;
                        i23 *= i22;
                        i21 = -6;
                        d2 = d2;
                        i23 += i19;
                        dArr[i22] /= i22 | 1;
                    }
                }
                i21 += i18;
                for (i26 = 3; i26 > 1; i26--) {
                    i28 = 1;
                    do {
                        Test.byFld += ((byte) (i28 * i28));
                        switch ((i28 % 8) + 22) {
                            case 22 :
                                lArr1[i28] -= -60535L;
                                Test.sFld += ((short) (i25));
                                i27 = -57207;
                                Test.fFld *= Test.fFld;
                                i23 = 63685;
                                i3 &= ((int) (-7L));
                                d2 += i25;
                                if (Test.bFld) {
                                    i27 = Test.sFld;
                                    i27 -= ((int) (Test.instanceCount));
                                    d2 += 110.81633;
                                    sArr[i28] *= ((short) (-43190));
                                } else {
                                    i21 += i28 | Test.instanceCount;
                                }
                            case 23 :
                                Test.instanceCount += Test.instanceCount;
                            case 24 :
                                Test.fFld += Test.instanceCount;
                                break;
                            case 25 :
                                i23 >>= ((int) (Test.instanceCount));
                                break;
                            case 26 :
                                i25 = i26;
                                break;
                            case 27 :
                                Test.instanceCount += ((i28 * i20) + Test.instanceCount) - Test.instanceCount;
                                break;
                            case 28 :
                                iArr1[i18 - 1] = ((int) (-11L));
                            case 29 :
                                i21 -= i27;
                                break;
                            default :
                                iArr1[i18 - 1] *= i22;
                        }
                    } while ((i28 += 3) < 2 );
                }
            }
        }
        long meth_res = ((((((((((((((i3 + i18) + i19) + i20) + i21) + i22) + i23) + i24) + i25) + i26) + i27) + i28) + FuzzerUtils.checkSum(iArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))) + FuzzerUtils.checkSum(lArr1)) + FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return ((long) (meth_res));
    }

    public void vMeth(long l, int i) {
        if (Test.ax$9) {
            final long ax$16 = l;
            final int ax$15 = i;
            long[] ax$10 = new long[10];
            long[] ax$13 = new long[10];
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$13[i] = ((long) (ax$10[i] & l));
            } catch (Throwable ax$14) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            i = ax$15;
            l = ax$16;
            return;
        }
        int i1 = 14587;
        int i2 = 43148;
        int i29 = -117;
        int i30 = -250;
        int iArr2[] = new int[N];
        double d = -2.96405;
        double d3 = 0.114648;
        double dArr1[] = new double[N];
        long l1 = 40103L;
        long lArr2[][] = new long[N][N];
        short sArr1[] = new short[N];
        FuzzerUtils.init(dArr1, -2.35947);
        FuzzerUtils.init(iArr2, -39296);
        FuzzerUtils.init(lArr2, -152L);
        FuzzerUtils.init(sArr1, ((short) (-25308)));
        i1 = 115;
        do {
            i >>= 27;
            for (d = 1; d < 9; d += 2) {
                i <<= ((int) (8 << ((-(--Test.instanceCount)) << (l1--))));
                i %= ((int) ((lMeth(i1) * i1) | 1));
                for (i29 = ((int) (d)); i29 < 3; ++i29) {
                    dArr1[(i1 >>> 1) % N] -= d;
                    i30 >>= i1;
                    switch ((((i29 >>> 1) % 4) * 5) + 27) {
                        case 28 :
                            iArr2[((int) (d))] -= i;
                            break;
                        case 34 :
                            i30 = i30;
                            i2 &= i;
                            i2 += i29 * i29;
                            break;
                        case 29 :
                            l1 += Test.instanceCount;
                            break;
                        case 36 :
                            i2 *= -23695;
                            if (Test.bFld)
                                continue;

                            i2 += ((int) ((-12L) + (i29 * i29)));
                            Test.fFld += ((i29 * i1) + Test.fFld) - i;
                            try {
                                iArr2[((int) (d))] = i / (-161);
                                i = (-8932) % i2;
                                i = 34 / i30;
                            } catch (ArithmeticException a_e) {
                            }
                            lArr2[((int) (d + 1))][i1 - 1] |= -10881;
                            if (Test.bFld)
                                continue;

                            if (Test.bFld) {
                                Test.bFld = Test.bFld;
                                i >>>= i29;
                                i2 -= i30;
                                iArr2[((int) (d + 1))] = ((int) (l));
                                sArr1[((int) (d - 1))] += ((short) (i29));
                                d3 *= 8;
                                i2 = ((int) (d3));
                                i2 += i29;
                                l1 += ((i29 * l) + i2) - i2;
                                i = ((int) (Test.fFld));
                                fArrFld[i29][((int) (d))] = 19835;
                                i += i29;
                                l -= i2;
                                i2 += ((i29 * i29) + i1) - i30;
                                i30 = i;
                            } else if (true) {
                                i = i;
                                vMeth_check_sum += (((((((((((l + i) + i1) + Double.doubleToLongBits(d)) + i2) + l1) + i29) + i30) + Double.doubleToLongBits(d3)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1))) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(lArr2)) + FuzzerUtils.checkSum(sArr1);
                                return;
                            } else {
                                i2 -= 3;
                            }
                            break;
                    }
                }
            }
        } while ((i1 -= 2) > 0 );
        vMeth_check_sum += (((((((((((l + i) + i1) + Double.doubleToLongBits(d)) + i2) + l1) + i29) + i30) + Double.doubleToLongBits(d3)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1))) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(lArr2)) + FuzzerUtils.checkSum(sArr1);
    }

    public void mainTest(String[] strArr1) {
        int i31 = -4372;
        int i32 = -4;
        int i33 = 146;
        int i34 = -33595;
        int i35 = 12;
        int i36 = -3;
        int i37 = -7;
        int i38 = 2;
        int i39 = -2;
        int i40 = 14;
        int i42 = -13;
        int i43 = -49330;
        int iArr3[] = new int[N];
        float f = -35.418F;
        double d4 = -127.56085;
        short s = -2579;
        byte byArr[] = new byte[N];
        FuzzerUtils.init(iArr3, -12);
        FuzzerUtils.init(byArr, ((byte) (-82)));
        {
            try {
                short[] ax$19 = new short[]{ ((short) (17863)), ((short) (-18003)), ((short) (24223)), ((short) (-11563)), ((short) (27487)) };
                for (int ax$17 = -50; ax$17 < (-50 + 13938); ax$17 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (Character.toUpperCase('￿') != '￿') {
                        }
                    } catch (Throwable ax$18) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$9 = true;
                    vMeth(-5401457990023241677L, -2126561664);
                    Test.ax$9 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$19[20] = 11;
                        for (int ax$20 = 0; ax$20 < ax$19.length; ax$20++) {
                            ax$19[ax$20] = ((short) (ax$19[20] + 2));
                        }
                    } catch (Throwable ax$21) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        vMeth(Test.instanceCount, i31);
        i31 |= i31;
        for (i32 = 174; 1 < i32; --i32) {
            iArr3[i32 + 1] = i32;
        }
        for (i34 = 3; i34 < 79; i34++) {
            i35 += i34;
            Test.instanceCount >>>= Test.sFld;
            f = 66;
            do {
                Test.instanceCount %= ((long) (82.22078));
                Test.dFld -= Test.fFld;
                for (i36 = i34; 1 > i36; i36++) {
                    i33 = i36;
                }
                for (i38 = ((int) (f)); i38 < 1; i38++) {
                    Test.dFld += Test.sFld;
                    iArr3[i38 - 1] *= -11;
                    Test.bFld = Test.bFld;
                }
                i39 = i39;
                i39 <<= i32;
                switch (((i34 % 1) * 5) + 18) {
                    case 22 :
                        Test.instanceCount = Test.byFld;
                        Test.fFld += f * f;
                        for (d4 = 1; 1 > d4; ++d4) {
                            int i41 = -13;
                            i33 -= i33;
                            switch ((i34 % 10) + 71) {
                                case 71 :
                                case 72 :
                                    iArr3[((int) (d4 + 1))] >>>= ((int) (Test.instanceCount));
                                    i40 += ((int) (d4 * d4));
                                    try {
                                        i33 = i40 % (-10925);
                                        i33 = i39 / 48;
                                        iArr3[((int) (d4 - 1))] = i38 % i41;
                                    } catch (ArithmeticException a_e) {
                                    }
                                    break;
                                case 73 :
                                    i40 = i34;
                                    break;
                                case 74 :
                                    if (false)
                                        continue;

                                    Test.instanceCount += ((long) (((d4 * Test.fFld) + i37) - i31));
                                    i35 |= i41;
                                    Test.byFld += ((byte) (d4 * i36));
                                    try {
                                        iArr3[i34 + 1] = i32 / iArr3[((int) (f - 1))];
                                        i33 = 42249 / i41;
                                        i39 = iArr3[((int) (d4 - 1))] / (-60473);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    Test.instanceCount += ((long) (((d4 * i38) + Test.instanceCount) - i38));
                                    Test.instanceCount = i37;
                                    i33 += ((int) (-1.74735));
                                    Test.bFld = Test.bFld;
                                    Test.dFld = Test.instanceCount;
                                    i39 = ((int) (d4));
                                    i37 = i42;
                                    Test.instanceCount -= i37;
                                case 75 :
                                    fFld1 -= Test.iFld;
                                    i42 = i41;
                                    Test.iFld *= -17701;
                                    Test.instanceCount += ((long) (d4));
                                    i35 = -64643;
                                    Test.iFld += ((int) (Test.instanceCount));
                                    Test.byFld = ((byte) (42388));
                                    Test.instanceCount += Test.byFld;
                                    Test.instanceCount = i35;
                                    lArrFld[((int) (d4 - 1))] = i40;
                                    i42 *= Test.byFld;
                                    if (Test.bFld)
                                        break;

                                case 76 :
                                    if (true) {
                                        switch (((int) (((d4 % 8) * 5) + 77))) {
                                            case 88 :
                                                s += ((short) (54795));
                                                Test.instanceCount += i39;
                                                i41 -= ((int) (-122L));
                                                fFld1 -= -23378;
                                                i40 >>= i32;
                                                i37 -= ((int) (Test.dFld));
                                                iArr3[((int) (f - 1))] -= 35719;
                                                i39 -= i35;
                                                i42 += ((int) (72.81F));
                                                i37 = ((int) (Test.fFld));
                                                break;
                                            case 78 :
                                                i39 = i35;
                                                Test.fFld *= i38;
                                                i40 >>= i39;
                                                i35 = i43;
                                                s += ((short) (d4 * d4));
                                                iArr3[i34 + 1] = s;
                                                i42 <<= i40;
                                            case 94 :
                                                byArr = byArr;
                                                fFld1 += ((float) (d4 + i39));
                                                Test.instanceCount += ((long) (d4 * d4));
                                                break;
                                            case 81 :
                                                i31 &= i32;
                                            case 106 :
                                                iArr3[((int) (f))] = ((int) (Test.fFld));
                                                break;
                                            case 80 :
                                                Test.sFld += ((short) (i35));
                                                break;
                                            case 112 :
                                                s += ((short) (41229 + (d4 * d4)));
                                                break;
                                            case 83 :
                                                Test.iFld -= ((int) (d4));
                                                break;
                                        }
                                    } else if (Test.bFld) {
                                        i33 += ((int) (d4 * d4));
                                    }
                                    break;
                                case 77 :
                                    i33 = i42;
                                    break;
                                case 78 :
                                    i41 += ((int) (((d4 * i42) + Test.instanceCount) - Test.instanceCount));
                                    break;
                                case 79 :
                                case 80 :
                                    i35 = i35;
                                    break;
                                default :
                                    {
                                        final boolean ax$8 = Test.bFld;
                                        try {
                                            Double ax$2 = 0.3950988192453444;
                                            AsynchronousSocketChannel ax$6 = null;
                                            boolean ax$1 = false;
                                            for (int ax$0 = -277; ax$0 < (-277 + 3762); ax$0 += 1) {
                                                Test.AxOutputRedirectionHelper.redirect();
                                                try {
                                                    for (int ax$3 = 0; ax$3 < 1000; ax$3++) {
                                                        if ((ax$3 & 1) == 0) {
                                                            ax$2 = ax$2 + 1.0;
                                                        }
                                                    }
                                                } catch (Throwable ax$4) {
                                                } finally {
                                                }
                                                Test.AxOutputRedirectionHelper.recover();
                                                if (!ax$1) {
                                                    Test.byFld *= ((byte) (i36));
                                                    ax$1 = true;
                                                }
                                                Test.AxOutputRedirectionHelper.redirect();
                                                try {
                                                    if (bFld) {
                                                        ax$6.close();
                                                    }
                                                } catch (Throwable ax$7) {
                                                } finally {
                                                }
                                                Test.AxOutputRedirectionHelper.recover();
                                            }
                                        } finally {
                                            Test.bFld = ax$8;
                                        }
                                    }
                            }
                        }
                    default :
                        i33 = 11466;
                }
            } while ((--f) > 0 );
        }
        FuzzerUtils.out.println((((("i31 i32 i33 = " + i31) + ",") + i32) + ",") + i33);
        FuzzerUtils.out.println((((("i34 i35 f = " + i34) + ",") + i35) + ",") + Float.floatToIntBits(f));
        FuzzerUtils.out.println((((("i36 i37 i38 = " + i36) + ",") + i37) + ",") + i38);
        FuzzerUtils.out.println((((("i39 d4 i40 = " + i39) + ",") + Double.doubleToLongBits(d4)) + ",") + i40);
        FuzzerUtils.out.println((((("i42 s i43 = " + i42) + ",") + s) + ",") + i43);
        FuzzerUtils.out.println((("iArr3 byArr = " + FuzzerUtils.checkSum(iArr3)) + ",") + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println((((("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount) + ",") + Test.sFld) + ",") + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println((((("Test.bFld Test.byFld Test.dFld = " + (Test.bFld ? 1 : 0)) + ",") + Test.byFld) + ",") + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println((((("fFld1 Test.iFld fArrFld = " + Float.floatToIntBits(fFld1)) + ",") + Test.iFld) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$9 = false;
}