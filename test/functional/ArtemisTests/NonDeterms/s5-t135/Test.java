// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Set;

public class Test {
    public static final int N = 256;

    public static volatile long instanceCount = -6742262214713655661L;

    public static boolean bFld = true;

    public static int iFld = 47038;

    public static int iArrFld[] = new int[N];

    public static float fArrFld[] = new float[N];

    public int iArrFld1[] = new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -6);
        FuzzerUtils.init(Test.fArrFld, -1.56F);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static int iMeth(int i1, int i2) {
        if (Test.ax$0) {
            final int ax$8 = i2;
            final long ax$7 = Test.vMeth_check_sum;
            final boolean ax$6 = Test.bFld;
            String ax$3 = "12.27602131180330";
            Test.AxOutputRedirectionHelper.redirect();
            try {
                if (bFld);
            } catch (Throwable ax$5) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.bFld = ax$6;
            Test.vMeth_check_sum = ax$7;
            i2 = ax$8;
            return -726380993;
        }
        float f = 0.431F;
        float f1 = 120.833F;
        float f2 = 2.373F;
        int i3 = -114;
        int i4 = -156;
        int i5 = 4;
        int i6 = 128;
        int i7 = 11;
        byte by = 43;
        double d = 0.10609;
        boolean b = false;
        short s = 30253;
        Test.instanceCount <<= Test.instanceCount;
        switch ((((i1 >>> 1) % 8) * 5) + 92) {
            case 114 :
                i2 -= i2;
                f = -15065;
                Test.instanceCount = Test.instanceCount;
                f1 = 1;
                do {
                    i2 = ((int) (Test.instanceCount));
                    i2 = ((int) (Test.instanceCount));
                    i1 += ((int) (((f1 * i1) + Test.instanceCount) - Test.instanceCount));
                    Test.instanceCount *= i2;
                    for (i3 = 1; i3 < 4; ++i3) {
                        try {
                            i1 = (-1724022296) / i4;
                            Test.iArrFld[i3] = 2105643815 / i1;
                            i2 = Test.iArrFld[i3 + 1] / (-62375);
                        } catch (ArithmeticException a_e) {
                        }
                        for (f2 = 1; f2 < 2; f2++) {
                            Test.instanceCount -= i3;
                            i1 = 148;
                            Test.instanceCount += ((long) (f2));
                            i2 += ((int) (((long) (f2)) | by));
                            Test.iArrFld[((int) (f1))] = i2;
                            switch (((i2 >>> 1) % 6) * 5) {
                                case 24 :
                                    i1 += ((int) (f2 * i2));
                                    switch (((int) ((f1 % 10) + 61))) {
                                        case 61 :
                                            Test.iArrFld[((int) (f2))] += i5;
                                            i1 = i4;
                                            if (i3 != 0) {
                                            }
                                            Test.fArrFld[((int) (f1 - 1))] += f;
                                            i4 -= i2;
                                            by += ((byte) (i4));
                                            i6 += ((int) (d));
                                            i7 |= i1;
                                            try {
                                                i7 = Test.iArrFld[((int) (f2))] % (-49466);
                                                i2 = (-167) % i7;
                                                i7 = i7 % i5;
                                            } catch (ArithmeticException a_e) {
                                            }
                                            b = b;
                                            i2 += ((int) ((-2.47F) + (f2 * f2)));
                                            break;
                                        case 62 :
                                            i5 >>>= i4;
                                            f *= f;
                                            try {
                                                i4 = i4 % 36;
                                                i5 = i6 % i2;
                                                i1 = i5 % (-39709);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            i7 -= i4;
                                            s *= ((short) (i7));
                                            break;
                                        case 63 :
                                            d += 0.124F;
                                        case 64 :
                                            f *= ((float) (d));
                                            break;
                                        case 65 :
                                            f += Test.instanceCount;
                                            break;
                                        case 66 :
                                        case 67 :
                                            i1 = ((int) (f));
                                            break;
                                        case 68 :
                                            Test.instanceCount <<= i1;
                                            break;
                                        case 69 :
                                            i2 = 20293;
                                            break;
                                        case 70 :
                                            i1 = i3;
                                            break;
                                    }
                                case 23 :
                                    f -= i3;
                                    break;
                                case 28 :
                                    f += f2 - s;
                                    break;
                                case 16 :
                                    i6 += i1;
                                    break;
                                case 14 :
                                    by = ((byte) (i7));
                                    break;
                                case 10 :
                                    i2 += 9;
                                default :
                                    if (i2 != 0) {
                                    }
                            }
                        }
                    }
                } while ((++f1) < 135 );
                break;
            case 99 :
                i5 *= ((int) (Test.instanceCount));
            case 115 :
                Test.instanceCount = ((long) (f));
                break;
            case 109 :
                Test.instanceCount += i1;
                break;
            case 96 :
                Test.instanceCount -= i2;
                break;
            case 100 :
                by = ((byte) (i2));
                break;
            case 105 :
                Test.fArrFld[(i5 >>> 1) % N] /= ((long) (d)) | 1;
                break;
            case 119 :
                Test.instanceCount = i4;
                break;
            default :
                i4 *= i1;
        }
        long meth_res = ((((((((((((i1 + i2) + Float.floatToIntBits(f)) + Float.floatToIntBits(f1)) + i3) + i4) + Float.floatToIntBits(f2)) + i5) + by) + i6) + Double.doubleToLongBits(d)) + i7) + (b ? 1 : 0)) + s;
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public static void vMeth1(long l, int i) {
        double d1 = 111.6492;
        int i8 = 208;
        int i9 = -39078;
        int i10 = -6;
        int i11 = -120;
        int i12 = 18;
        int i13 = 8282;
        int i14 = 55820;
        long l1 = 7928123696333897502L;
        long lArr[][] = new long[N][N];
        short s1 = 19705;
        byte by1 = 5;
        float f3 = 1.107F;
        boolean b1 = true;
        boolean bArr[] = new boolean[N];
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, 1896182438L);
        i -= ((i--) - (i * i)) * 201;
        {
            final int ax$19 = i14;
            try {
                char[] ax$13 = new char[]{ '迳' };
                char[] ax$15 = new char[]{ '隖', '' };
                char[] ax$16 = new char[100];
                for (int ax$9 = -51; ax$9 < (-51 + 13628); ax$9 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$11 = 0; ax$11 < 4; ++ax$11) {
                        }
                    } catch (Throwable ax$12) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    iMeth(-1643183440, -825352715);
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$17 = 0; ax$17 < i14; ax$17++) {
                            ax$15[ax$17] = ((char) ((ax$16[ax$17] + ax$13[ax$17]) >>> 1));
                        }
                    } catch (Throwable ax$18) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i14 = ax$19;
            }
        }
        i -= iMeth(i, 130);
        i -= ((int) (d1));
        {
            final int ax$29 = i10;
            try {
                Integer ax$22 = 5788;
                Set<Integer> ax$23 = null;
                int[] ax$25 = new int[]{ 168399659, -1721101338, -613880765 };
                boolean ax$21 = false;
                for (int ax$20 = -673; ax$20 < (-673 + 17415); ax$20 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$23.add(ax$22);
                        ax$23.remove(ax$22);
                    } catch (Throwable ax$24) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    if (!ax$21) {
                        Test.iArrFld[(i >>> 1) % N] = i;
                        ax$21 = true;
                    }
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        int ax$27 = ax$25[i10];
                        ax$25[i10] = ax$25[i10 + 1];
                        ax$25[i10 + 1] = ax$27;
                    } catch (Throwable ax$28) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i10 = ax$29;
            }
        }
        Test.iArrFld[(i >>> 1) % N] = 0;
        for (i8 = 195; i8 > 3; i8 -= 2) {
            l = -167;
            i += i9;
            l += i8 | i8;
            for (l1 = 1; l1 < 6; ++l1) {
                s1 += ((short) (218));
                by1 += ((byte) (((l1 * f3) + i8) - i9));
                i10 -= ((int) (-1.18F));
                for (i11 = 1; 2 > i11; i11 += 3) {
                    Test.iArrFld[i11 - 1] -= by1;
                    bArr[i11 + 1] = b1;
                    i10 = ((int) (l));
                    i *= ((int) (928638718L));
                }
                i = i10;
                switch (((int) ((l1 % 1) + 29))) {
                    case 29 :
                        i9 *= 6005;
                        for (i13 = 1; 2 > i13; i13++) {
                            i10 %= ((int) (-42.105097));
                            i10 += i12;
                        }
                        lArr[i8 - 1][i8 - 1] *= i13;
                        break;
                    default :
                        Test.instanceCount += ((long) (f3));
                        i14 *= ((int) (11L));
                        i14 += ((int) (d1));
                        l |= i;
                        by1 += ((byte) (i12));
                        i = -20;
                        by1 += ((byte) (((l1 * Test.instanceCount) + i8) - i13));
                        i10 += ((int) (l1));
                        i12 >>= by1;
                        d1 -= Test.instanceCount;
                        Test.iArrFld = Test.iArrFld;
                }
                Test.instanceCount = i;
            }
        }
        vMeth1_check_sum += (((((((((((((((l + i) + Double.doubleToLongBits(d1)) + i8) + i9) + l1) + i10) + s1) + by1) + Float.floatToIntBits(f3)) + i11) + i12) + (b1 ? 1 : 0)) + i13) + i14) + FuzzerUtils.checkSum(bArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {
        int i15 = -27178;
        int i16 = 14;
        int i17 = -67;
        int i18 = -250;
        int i19 = -160;
        float f4 = 106.471F;
        float f5 = 0.972F;
        boolean b2 = true;
        byte by2 = 87;
        double dArr[] = new double[N];
        FuzzerUtils.init(dArr, -1.5283);
        vMeth1(Test.instanceCount, i15);
        for (double d2 : dArr) {
            f4 = 1;
            do {
                try {
                    i15 = (-7194) % i15;
                    i15 = i15 / 379287387;
                    i15 = i15 % Test.iArrFld[((int) (f4))];
                } catch (ArithmeticException a_e) {
                }
                i15 = i15;
                Test.bFld = Test.bFld;
                for (i16 = 1; i16 < 1; ++i16) {
                    i17 ^= i16;
                    i17 = i16;
                    i17 += i16;
                    i15 += ((i16 * i17) + i16) - i16;
                    dArr[((int) (f4 - 1))] -= i17;
                    f5 = Test.instanceCount;
                    if (i15 != 0) {
                        vMeth_check_sum += ((((((((i15 + Float.floatToIntBits(f4)) + i16) + i17) + Float.floatToIntBits(f5)) + i18) + (b2 ? 1 : 0)) + i19) + by2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                }
                i18 = 1;
                do {
                    i15 *= ((int) (f5));
                    try {
                        i17 = i16 % i17;
                        Test.iArrFld[i18 - 1] = Test.iArrFld[((int) (f4 - 1))] % 125;
                        i17 = i18 / 39714;
                    } catch (ArithmeticException a_e) {
                    }
                    if (b2)
                        break;

                    Test.fArrFld[i18 - 1] = Test.instanceCount;
                    i15 = i15;
                    Test.iArrFld[((int) (f4))] = i18;
                    i15 -= ((int) (Test.instanceCount));
                    i15 ^= i17;
                    i15 += ((i18 * Test.instanceCount) + i19) - f5;
                    Test.fArrFld[((int) (f4 + 1))] *= 3;
                    f5 *= i16;
                    by2 -= ((byte) (f5));
                    i15 += i18 * i18;
                    i15 += i19;
                    f5 = i16;
                } while ((++i18) < 1 );
                i15 += ((int) (Test.instanceCount));
                i15 -= i19;
            } while ((++f4) < 2 );
            f5 -= 212;
            Test.fArrFld[(i15 >>> 1) % N] -= Test.instanceCount;
            Test.iArrFld[(i19 >>> 1) % N] = i15;
            Test.fArrFld[(i18 >>> 1) % N] += Test.instanceCount;
            i17 >>= ((int) (Test.instanceCount));
        }
        vMeth_check_sum += ((((((((i15 + Float.floatToIntBits(f4)) + i16) + i17) + Float.floatToIntBits(f5)) + i18) + (b2 ? 1 : 0)) + i19) + by2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {
        float f6 = 68.29F;
        int i20 = -19625;
        int i21 = 161;
        int i22 = -13;
        int i23 = -17063;
        int i24 = -68;
        int i25 = 48119;
        int i26 = 10;
        int i27 = 46;
        int i28 = -117;
        double d3 = 90.105758;
        double d4 = 2.107652;
        short s2 = -11929;
        long l2 = -56982L;
        byte by3 = 26;
        boolean b3 = false;
        boolean bArr1[] = new boolean[N];
        FuzzerUtils.init(bArr1, true);
        vMeth();
        if (true) {
            f6 -= i20;
            Test.iArrFld[(i20 >>> 1) % N] = i20;
            f6 -= ((float) (d3));
            i20 += ((int) (12L));
            i20 -= s2;
            i20 = 10;
            i20 = ((int) (f6));
            i20 >>>= i20;
        }
        Test.fArrFld[(i20 >>> 1) % N] += i20;
        i20 = i20;
        for (i21 = 3; i21 < 230; i21++) {
            for (l2 = 1; l2 < 23; ++l2) {
                Test.instanceCount *= -5;
                i23 *= ((int) (d3));
                if (true) {
                    Test.instanceCount += ((l2 * i20) + i21) - i21;
                    Test.instanceCount /= l2 | 1;
                    switch (((((-14) >>> 1) % 1) * 5) + 114) {
                        case 115 :
                            Test.instanceCount = i21;
                            Test.iArrFld = Test.iArrFld;
                            break;
                    }
                    switch (((122 >>> 1) % 1) + 33) {
                        case 33 :
                            i23 *= ((int) (Test.instanceCount));
                            Test.iArrFld[i21 - 1] -= ((int) (f6));
                            Test.instanceCount += 2133804014L;
                            Test.iArrFld[i21] -= 12;
                            i20 = 63944;
                    }
                    Test.instanceCount += l2;
                    d3 *= i21;
                    f6 *= i22;
                    Test.iArrFld[((int) (l2 + 1))] >>= s2;
                    for (i24 = 1; 2 > i24; i24++) {
                        i23 += (-212) + (i24 * i24);
                        i22 += i24 * i24;
                        i22 += ((int) (164L));
                        i22 += i24 ^ i24;
                        Test.bFld = Test.bFld;
                        Test.instanceCount += ((long) (f6));
                        i25 = i22;
                        i20 += ((int) (-2.199F));
                        i20 += ((i24 * l2) + i25) - l2;
                        f6 += i24;
                    }
                } else {
                    if (Test.bFld)
                        break;

                    i26 = 1;
                    do {
                        i23 = ((int) (f6));
                    } while ((++i26) < 2 );
                    i27 = 1;
                    do {
                        i22 += i27 | i23;
                        if (Test.bFld)
                            break;

                        i23 = ((int) (1.70144));
                        i23 += i21;
                        f6 *= i21;
                        Test.instanceCount += -6;
                        i23 -= s2;
                        Test.iArrFld[i21] -= i24;
                        Test.iArrFld[i21 - 1] -= i24;
                        f6 *= i21;
                    } while ((++i27) < 2 );
                    i23 = i22;
                    for (d4 = 1; 2 > d4; d4++) {
                        Test.instanceCount = Test.instanceCount;
                        if (true) {
                            Test.instanceCount -= by3;
                            i23 += ((int) (d4 * d4));
                            Test.iArrFld = Test.iArrFld;
                            if (b3) {
                                bArr1[((int) (d4))] = b3;
                                d3 = -5;
                                switch (((1 >>> 1) % 10) + 110) {
                                    case 110 :
                                        i20 = ((int) (d3));
                                        switch (((i24 >>> 1) % 2) + 31) {
                                            case 31 :
                                                Test.iArrFld[((int) (d4))] <<= i28;
                                                i22 += ((int) (d4));
                                                Test.iFld = s2;
                                                f6 += Test.instanceCount;
                                                try {
                                                    i20 = 32456 % Test.iArrFld[((int) (d4))];
                                                    Test.iFld = i23 / (-55483);
                                                    i28 = i26 % i27;
                                                } catch (ArithmeticException a_e) {
                                                }
                                                break;
                                            case 32 :
                                                i23 = Test.iFld;
                                                break;
                                        }
                                        break;
                                    case 111 :
                                        i25 += (-211) + (d4 * d4);
                                        break;
                                    case 112 :
                                        Test.instanceCount = i27;
                                    case 113 :
                                        i22 *= i20;
                                        break;
                                    case 114 :
                                        Test.instanceCount = Test.instanceCount;
                                        break;
                                    case 115 :
                                        Test.instanceCount += Test.instanceCount;
                                        break;
                                    case 116 :
                                        try {
                                            Test.iArrFld[i21] = i25 / (-87);
                                            i25 = i20 / i27;
                                            i20 = i22 % Test.iArrFld[((int) (d4))];
                                        } catch (ArithmeticException a_e) {
                                        }
                                        break;
                                    case 117 :
                                        i25 -= i25;
                                        break;
                                    case 118 :
                                        f6 = i28;
                                    case 119 :
                                        i23 = Test.iFld;
                                        break;
                                    default :
                                        try {
                                            Test.iArrFld[((int) (l2 - 1))] = (-64727) % Test.iFld;
                                            iArrFld1[((int) (d4 - 1))] = 8211 / Test.iArrFld[((int) (d4))];
                                            iArrFld1[i21 + 1] = 1150212501 / i24;
                                        } catch (ArithmeticException a_e) {
                                        }
                                }
                            }
                        } else {
                            i25 = i21;
                        }
                    }
                }
            }
        }
        FuzzerUtils.out.println((((("f6 i20 d3 = " + Float.floatToIntBits(f6)) + ",") + i20) + ",") + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println((((("s2 i21 i22 = " + s2) + ",") + i21) + ",") + i22);
        FuzzerUtils.out.println((((("l2 i23 i24 = " + l2) + ",") + i23) + ",") + i24);
        FuzzerUtils.out.println((((("i25 i26 i27 = " + i25) + ",") + i26) + ",") + i27);
        FuzzerUtils.out.println((((("d4 i28 by3 = " + Double.doubleToLongBits(d4)) + ",") + i28) + ",") + by3);
        FuzzerUtils.out.println((("b3 bArr1 = " + (b3 ? 1 : 0)) + ",") + FuzzerUtils.checkSum(bArr1));
        FuzzerUtils.out.println((((("Test.instanceCount Test.bFld Test.iFld = " + Test.instanceCount) + ",") + (Test.bFld ? 1 : 0)) + ",") + Test.iFld);
        FuzzerUtils.out.println((((("Test.iArrFld Test.fArrFld iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld))) + ",") + FuzzerUtils.checkSum(iArrFld1));
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}