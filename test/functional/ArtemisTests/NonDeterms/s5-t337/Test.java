// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 3216820852989504608L;

    public static boolean bFld = false;

    public static int iFld = -54762;

    public static volatile double dFld = -2.20933;

    public static byte byFld = -70;

    public static long lFld = 9L;

    public int iFld1 = -244;

    public static float fArrFld[] = new float[N];

    public static int iArrFld[] = new int[N];

    public static long lArrFld[] = new long[N];

    public float fArrFld1[][] = new float[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.777F);
        FuzzerUtils.init(Test.iArrFld, 13141);
        FuzzerUtils.init(Test.lArrFld, 47160L);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long bMeth_check_sum = 0;

    public static boolean bMeth() {
        int i3 = 6;
        int i4 = -6;
        int i5 = 56;
        int i6 = -7;
        int i7 = -136;
        int iArr[] = new int[N];
        int iArr1[] = new int[N];
        double d = -2.81468;
        short s = 17649;
        byte by1 = 43;
        {
            final int ax$5 = i5;
            final int ax$6 = i6;
            try {
                for (int ax$0 = -102; ax$0 < (-102 + 9147); ax$0 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$3 = 0; ax$3 < i5; ax$3++) {
                            i6 = 1 - i6;
                        }
                    } catch (Throwable ax$4) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i5 = ax$5;
                i6 = ax$6;
            }
        }
        FuzzerUtils.init(iArr, 12);
        FuzzerUtils.init(iArr1, 70);
        for (float f : Test.fArrFld) {
            if (Test.bFld)
                break;

            for (i3 = 1; 2 > i3; ++i3) {
                for (i5 = 1; i5 < 2; ++i5) {
                    byte by = -103;
                    by -= ((byte) (i5));
                    i6 += 95;
                    i4 = -72;
                    d += i5;
                    by <<= ((byte) (Test.instanceCount));
                    i6 += ((i5 * i3) + i3) - i6;
                    s |= ((short) (Test.instanceCount));
                    i4 += i5 ^ Test.instanceCount;
                }
                Test.instanceCount -= i6;
                Test.instanceCount += ((i3 * i3) + i6) - i6;
                i4 = by1;
                i4 += i3;
                i7 = 1;
                while ((++i7) < 2) {
                    iArr[i3 - 1] = ((int) (Test.instanceCount));
                    if (Test.bFld) {
                        Test.instanceCount = Test.instanceCount;
                        switch ((i7 % 5) + 107) {
                            case 107 :
                                iArr1[i3 + 1] >>= ((int) (Test.instanceCount));
                                break;
                            case 108 :
                                i6 += ((int) (d));
                                iArr1[i3] += i7;
                                if (Test.bFld)
                                    break;

                                i6 = i7;
                                i4 += i7;
                                i4 -= -231;
                                iArr1[i7 - 1] *= s;
                                d = i3;
                                i4 += i7;
                                break;
                            case 109 :
                                iArr[i7 + 1] = s;
                                Test.instanceCount >>= i6;
                                i6 >>= i7;
                                i6 -= i3;
                                i4 += i7 ^ i5;
                                Test.instanceCount += Test.instanceCount;
                            case 110 :
                            case 111 :
                                i6 += 10 + (i7 * i7);
                            default :
                                i6 += ((i7 * Test.instanceCount) + i6) - i5;
                        }
                        return (((int) (((((((((i3 + i4) + i5) + i6) + Double.doubleToLongBits(d)) + s) + by1) + i7) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(iArr1))) % 2) > 0;
                    } else {
                        Test.instanceCount <<= i3;
                    }
                }
            }
        }
        long meth_res = ((((((((i3 + i4) + i5) + i6) + Double.doubleToLongBits(d)) + s) + by1) + i7) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(iArr1);
        bMeth_check_sum += meth_res;
        return (meth_res % 2) > 0;
    }

    public static void vMeth1(long l1) {
        if (Test.ax$7) {
            final int ax$11 = Test.iFld;
            int[][] ax$8 = new int[1][1];
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$8[1][iFld] = 1;
                ax$8[2][iFld] = 2;
                ax$8[99][iFld] = 3;
            } catch (Throwable ax$10) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iFld = ax$11;
            return;
        }
        int i8 = 10567;
        int i9 = 27832;
        int i10 = -247;
        int i11 = 53523;
        int i12 = 13582;
        int i13 = 131;
        int i14 = -31929;
        int i15 = -196;
        int i16 = -40;
        int i17 = 211;
        float f1 = -7.88F;
        byte by2 = -71;
        double dArr[] = new double[N];
        FuzzerUtils.init(dArr, 86.24523);
        Test.bFld = (!bMeth()) || Test.bFld;
        Test.iFld = Test.iFld;
        Test.iFld += ((int) (l1));
        l1 *= Test.iFld;
        for (i8 = 12; i8 < 227; ++i8) {
            short s1 = 1391;
            Test.instanceCount += i9;
            Test.iArrFld[i8 - 1] <<= i9;
            Test.iFld = ((int) (f1));
            switch ((i8 % 7) + 114) {
                case 114 :
                    f1 += -135;
                    break;
                case 115 :
                    i10 = 1;
                    do {
                        Test.bFld = Test.bFld;
                        for (i11 = 1; i11 < 3; i11++) {
                            Test.iArrFld[i8] ^= i11;
                            f1 += ((float) (Test.dFld));
                        }
                        try {
                            i9 = i8 / i9;
                            i12 = 65131 % i10;
                            i9 = Test.iFld % i12;
                        } catch (ArithmeticException a_e) {
                        }
                        i9 -= ((int) (f1));
                        i13 = 3;
                        while ((--i13) > 0) {
                            Test.lArrFld[i8 + 1] += i13;
                            Test.dFld += f1;
                            i12 = i10;
                            Test.dFld -= i12;
                            Test.iFld -= i8;
                            l1 = i8;
                            l1 = l1;
                        }
                        Test.iFld += i10;
                    } while ((i10 += 2) < 3 );
                    for (i14 = i8; i14 < 3; i14++) {
                        i15 += i14;
                        i9 >>= ((int) (l1));
                        if (i13 != 0) {
                            vMeth1_check_sum += ((((((((((((l1 + i8) + i9) + Float.floatToIntBits(f1)) + i10) + i11) + i12) + i13) + i14) + i15) + i16) + i17) + by2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                            return;
                        }
                        if (false) {
                            for (i16 = 1; i14 < i16; i16--) {
                                Test.iFld -= i8;
                                Test.dFld -= -167;
                                dArr[i14] *= 10;
                                f1 += by2;
                                Test.iArrFld = Test.iArrFld;
                            }
                        } else if (Test.bFld) {
                            i15 = ((int) (l1));
                        } else if (Test.bFld) {
                            f1 -= -1;
                        }
                    }
                    break;
                case 116 :
                    Test.iFld -= ((int) (l1));
                    break;
                case 117 :
                    i15 += ((i8 * i14) + i15) - Test.iFld;
                    break;
                case 118 :
                    Test.iFld *= s1;
                case 119 :
                case 120 :
                    Test.bFld = Test.bFld;
                    break;
            }
        }
        vMeth1_check_sum += ((((((((((((l1 + i8) + i9) + Float.floatToIntBits(f1)) + i10) + i11) + i12) + i13) + i14) + i15) + i16) + i17) + by2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i2, long l) {
        float f2 = 0.7F;
        float f3 = 26.275F;
        int i18 = 3;
        int i19 = -44070;
        int i20 = 0;
        int i21 = 123;
        int i22 = -95;
        int i23 = 16828;
        double d1 = 103.29231;
        short s2 = 27488;
        long l2 = -1934319429L;
        i2 -= --i2;
        {
            final int ax$24 = i19;
            final int ax$25 = i20;
            try {
                byte[] ax$13 = new byte[10];
                ZipEntry ax$14 = new ZipEntry("one");
                ZipInputStream ax$15 = null;
                ZipOutputStream ax$16 = null;
                for (int ax$12 = -114; ax$12 < (-114 + 7327); ax$12 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        ax$16.putNextEntry(ax$14);
                        for (int ax$17; 0 < (ax$17 = ax$15.read(ax$13));) {
                            ax$16.write(ax$13, 0, ax$17);
                        }
                    } catch (Throwable ax$18) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$7 = true;
                    vMeth1(-2135009886520650669L);
                    Test.ax$7 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$21 = 0; ax$21 < i20; ax$21++) {
                            for (int ax$22 = 0; ax$22 < 10; ax$22++) {
                                i19++;
                            }
                        }
                    } catch (Throwable ax$23) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i19 = ax$24;
                i20 = ax$25;
            }
        }
        vMeth1(l);
        f2 -= f2;
        for (i18 = 7; i18 < 199; i18++) {
            Test.instanceCount = -143;
        }
        i19 = i18;
        for (i20 = 5; 209 > i20; i20++) {
            d1 = 1;
            do {
                Test.instanceCount += ((long) (d1));
                i21 = Test.iFld;
                Test.iArrFld[((int) (d1))] = s2;
                l -= i19;
                l = i19;
                Test.iFld += ((int) (d1));
            } while ((++d1) < 3 );
            for (i22 = i20; i22 < 3; i22++) {
                f2 += i22;
                s2 = ((short) (-4));
                l = 46239L;
                l2 = 1;
                while ((--l2) > 0) {
                    Test.lArrFld[((int) (l2 - 1))] ^= -8L;
                    Test.iArrFld = Test.iArrFld;
                    if (i19 != 0) {
                        vMeth_check_sum += (((((((((((i2 + l) + Float.floatToIntBits(f2)) + i18) + i19) + i20) + i21) + Double.doubleToLongBits(d1)) + s2) + i22) + i23) + l2) + Float.floatToIntBits(f3);
                        return;
                    }
                    i23 += i23;
                    i2 += i23;
                    i2 <<= ((int) (l2));
                    f2 = i2;
                    if (Test.bFld)
                        continue;

                    if (Test.bFld)
                        break;

                    l += l2 | ((long) (f2));
                    Test.iArrFld[i22 - 1] = i2;
                    Test.iFld += ((int) (l2));
                    if (Test.bFld)
                        continue;

                }
                f3 = 1;
                while ((--f3) > 0) {
                    Test.dFld += Test.instanceCount;
                    l -= i21;
                    Test.iFld = ((int) (13L));
                    l -= s2;
                }
            }
        }
        vMeth_check_sum += (((((((((((i2 + l) + Float.floatToIntBits(f2)) + i18) + i19) + i20) + i21) + Double.doubleToLongBits(d1)) + s2) + i22) + i23) + l2) + Float.floatToIntBits(f3);
    }

    public void mainTest(String[] strArr1) {
        int i = 169;
        int i1 = 5;
        int i24 = -251;
        double d2 = 121.63685;
        float f4 = 74.811F;
        float f5 = -69.322F;
        short s3 = -25266;
        short sArr[] = new short[N];
        long lArr[] = new long[N];
        byte byArr[][] = new byte[N][N];
        FuzzerUtils.init(lArr, 50L);
        FuzzerUtils.init(sArr, ((short) (28187)));
        FuzzerUtils.init(byArr, ((byte) (2)));
        for (i = 3; i < 149; i++) {
            vMeth(i, -4242107808L);
            if (Test.bFld)
                break;

            for (d2 = i; d2 < 35; ++d2) {
                try {
                    i1 = 8476 % Test.iArrFld[((int) (d2))];
                    Test.iArrFld[((int) (d2 - 1))] = (-1783483920) % i1;
                    i24 = (-56189) % i1;
                } catch (ArithmeticException a_e) {
                }
                if (Test.bFld) {
                    i24 *= i1;
                    switch (((int) (((d2 % 9) * 5) + 123))) {
                        case 132 :
                            Test.dFld += 43936L;
                            i24 *= Test.byFld;
                            i1 = i;
                            Test.iArrFld[((int) (d2 - 1))] = ((int) (Test.instanceCount));
                            Test.iArrFld[((int) (d2))] >>= ((int) (Test.instanceCount));
                            Test.iFld += ((int) ((-102.382F) + (d2 * d2)));
                            break;
                        case 137 :
                            Test.iArrFld[((int) (d2))] += i1;
                            f4 = 1;
                            while ((++f4) < 1) {
                                Test.bFld = false;
                                i1 = ((int) (d2));
                                Test.fArrFld[((int) (d2 - 1))] -= Test.instanceCount;
                                if (Test.bFld) {
                                    Test.lArrFld[((int) (f4))] >>= i1;
                                    Test.iFld -= s3;
                                    Test.instanceCount = i24;
                                    switch (((int) (((f4 % 6) * 5) + 53))) {
                                        case 68 :
                                            Test.iArrFld = Test.iArrFld;
                                            try {
                                                Test.iArrFld[((int) (d2 + 1))] = Test.iArrFld[((int) (d2 - 1))] / 238;
                                                i24 = 79 % Test.iFld;
                                                Test.iFld = Test.iFld % i;
                                            } catch (ArithmeticException a_e) {
                                            }
                                            lArr[(i >>> 1) % N] = i24;
                                            f5 = i24;
                                            f5 -= Test.lFld;
                                            f5 -= i24;
                                            s3 += ((short) (207 + (f4 * f4)));
                                            Test.iFld -= Test.iFld;
                                            switch (((int) (((d2 % 2) * 5) + 52))) {
                                                case 57 :
                                                case 61 :
                                                    i24 = -99;
                                                    try {
                                                        Test.iArrFld[i - 1] = 217513295 % i24;
                                                        Test.iArrFld[i + 1] = (-630337911) % i;
                                                        i1 = i1 % (-23645);
                                                    } catch (ArithmeticException a_e) {
                                                    }
                                                    if (Test.bFld) {
                                                        Test.iFld = ((int) (Test.lFld));
                                                        f5 *= Test.instanceCount;
                                                        s3 = ((short) (i1));
                                                        i24 += ((int) (((f4 * i1) + Test.instanceCount) - Test.lFld));
                                                        f5 += f4;
                                                        Test.lArrFld[i] *= Test.iFld;
                                                        i24 = i;
                                                        i1 += ((int) (f4));
                                                    } else if (Test.bFld) {
                                                        sArr = FuzzerUtils.short1array(N, ((short) (14197)));
                                                        Test.lFld = i;
                                                        i1 = ((int) (Test.instanceCount));
                                                        Test.instanceCount = -11;
                                                        switch (((int) (((f4 % 1) * 5) + 82))) {
                                                            case 87 :
                                                                i1 -= i24;
                                                                Test.lFld = i24;
                                                                break;
                                                            default :
                                                                i24 = i24;
                                                                Test.iArrFld[i - 1] += -4;
                                                                Test.iFld = Test.iFld;
                                                                i1 >>= i24;
                                                                lArr[((int) (f4 - 1))] >>= i24;
                                                                i1 = ((int) (Test.instanceCount));
                                                                i24 -= Test.iFld;
                                                                Test.lFld += ((long) (f4 + i));
                                                                i24 = i1;
                                                                Test.fArrFld[((int) (d2 - 1))] *= Test.lFld;
                                                        }
                                                        i1 = ((int) (Test.instanceCount));
                                                        f5 -= f4;
                                                    }
                                                    Test.lArrFld = Test.lArrFld;
                                                    i1 = i1;
                                                    i1 += ((int) (((long) (f4)) | i24));
                                                    Test.iFld *= i1;
                                                    byArr[((int) (d2))][i - 1] *= ((byte) (f5));
                                                    Test.iFld *= Test.iFld;
                                                    Test.lFld *= i24;
                                                    Test.iArrFld[i] += ((int) (d2));
                                                    f5 = iFld1;
                                                    Test.instanceCount += ((long) (f4 * f4));
                                                    i24 += i24;
                                            }
                                            Test.instanceCount += ((long) (((f4 * Test.iFld) + Test.iFld) - Test.iFld));
                                            break;
                                        case 75 :
                                            s3 -= ((short) (-52566));
                                            break;
                                        case 56 :
                                            Test.lFld = iFld1;
                                        case 72 :
                                            sArr[i + 1] -= ((short) (i));
                                            break;
                                        case 77 :
                                            Test.iArrFld[((int) (f4 - 1))] -= iFld1;
                                            break;
                                        case 74 :
                                            i24 <<= i;
                                            break;
                                        default :
                                            Test.iFld = ((int) (Test.instanceCount));
                                    }
                                } else if (Test.bFld) {
                                    i24 *= Test.byFld;
                                } else {
                                    i24 += i;
                                }
                            }
                            break;
                        case 141 :
                            i1 = ((int) (Test.lFld));
                            break;
                        case 139 :
                            Test.iFld >>>= i;
                            break;
                        case 140 :
                            Test.iFld *= i;
                            break;
                        case 134 :
                            fArrFld1 = fArrFld1;
                            break;
                        case 146 :
                            Test.lArrFld[((int) (d2))] = i1;
                            break;
                        case 143 :
                            Test.instanceCount >>= Test.iFld;
                            break;
                        case 142 :
                            Test.instanceCount -= i;
                            break;
                        default :
                            i24 = ((int) (Test.instanceCount));
                    }
                } else {
                    Test.lFld *= Test.lFld;
                }
            }
        }
        FuzzerUtils.out.println((((("i i1 d2 = " + i) + ",") + i1) + ",") + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println((((("i24 f4 s3 = " + i24) + ",") + Float.floatToIntBits(f4)) + ",") + s3);
        FuzzerUtils.out.println((((("f5 lArr sArr = " + Float.floatToIntBits(f5)) + ",") + FuzzerUtils.checkSum(lArr)) + ",") + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println((((("Test.instanceCount Test.bFld Test.iFld = " + Test.instanceCount) + ",") + (Test.bFld ? 1 : 0)) + ",") + Test.iFld);
        FuzzerUtils.out.println((((("Test.dFld Test.byFld Test.lFld = " + Double.doubleToLongBits(Test.dFld)) + ",") + Test.byFld) + ",") + Test.lFld);
        FuzzerUtils.out.println((((("iFld1 Test.fArrFld Test.iArrFld = " + iFld1) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld))) + ",") + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println((("Test.lArrFld fArrFld1 = " + FuzzerUtils.checkSum(Test.lArrFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld1)));
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$7 = false;
}