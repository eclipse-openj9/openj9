// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 1493270183L;

    public static int iFld = -38;

    public static volatile byte byFld = -88;

    public static short sFld = 2736;

    public static float fFld = -86.8F;

    public static int iArrFld[] = new int[N];

    public static long lArrFld[] = new long[N];

    public static volatile boolean bArrFld[] = new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 60437);
        FuzzerUtils.init(Test.lArrFld, -8080778231008960197L);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {
        int i8 = -2605;
        int i9 = 125;
        int i10 = -136;
        int i11 = 61;
        int i12 = 6410;
        int i14 = -16518;
        int i15 = -22;
        int i16 = 12;
        int i17 = -2;
        int iArr[][] = new int[N][N];
        float f = 3.183F;
        float f1 = -2.266F;
        float fArr[] = new float[N];
        short s1 = -6946;
        double d2 = 2.1688;
        long l = -3441616120L;
        boolean b = false;
        boolean bArr[] = new boolean[N];
        FuzzerUtils.init(iArr, 9);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr, -91.293F);
        for (i8 = 2; 84 > i8; i8 += 3) {
            int i13 = -90;
            for (i10 = 1; i10 < 19; i10++) {
                Test.iFld -= i11;
                Test.iFld = i8;
                Test.byFld += ((byte) (i10 * i10));
                i11 = i8;
                i9 &= i8;
                i11 *= ((int) (6752744400975604026L));
                i12 = 1;
                do {
                    Test.instanceCount += ((long) (f));
                    Test.instanceCount = i9;
                    Test.iFld = i8;
                    i9 = -3922;
                    s1 += ((short) (i9));
                } while ((++i12) < 2 );
            }
            Test.instanceCount = i11;
            i9 = i13;
        }
        i14 = 1;
        do {
            i11 = ((int) (Test.instanceCount));
            d2 = 4197337439701253905L;
            Test.instanceCount += Test.iFld;
            Test.instanceCount ^= i8;
            Test.iFld += ((int) (Test.instanceCount));
            for (l = 1; l < 3; l++) {
                for (i16 = ((int) (l)); i16 < 2; i16++) {
                    iArr[(i15 >>> 1) % N][((int) (l))] *= i16;
                    bArr[(i14 >>> 1) % N] = b;
                    iArr[i16 - 1] = FuzzerUtils.int1array(N, ((int) (83)));
                    i15 = i16;
                    if (b)
                        continue;

                    Test.instanceCount = i10;
                    Test.iFld -= i10;
                    i9 = ((int) (l));
                    Test.byFld = ((byte) (i14));
                    i15 = ((int) (d2));
                }
                f1 += Test.iFld;
                fArr[((int) (l + 1))] = i12;
                iArr[i14][i14] = i12;
            }
        } while ((++i14) < 173 );
        vMeth1_check_sum += ((((((((((((((((i8 + i9) + i10) + i11) + i12) + Float.floatToIntBits(f)) + s1) + i14) + Double.doubleToLongBits(d2)) + l) + i15) + i16) + i17) + (b ? 1 : 0)) + Float.floatToIntBits(f1)) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(bArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i7) {
        int i18 = -117;
        int i19 = 43585;
        int i20 = -6;
        int i21 = 252;
        int i22 = -130;
        int i23 = -6;
        int i24 = -23484;
        int i25 = -11;
        int i26 = -169;
        int i27 = 27531;
        int i28 = -6851;
        int i29 = -14;
        float f2 = 1.31F;
        float fArr1[] = new float[N];
        double d3 = 71.98158;
        double d4 = -1.95831;
        double dArr1[] = new double[N];
        long lArr1[] = new long[N];
        FuzzerUtils.init(dArr1, -46.15625);
        FuzzerUtils.init(fArr1, -18.844F);
        FuzzerUtils.init(lArr1, 56618L);
        i7 = ((int) ((i7++) - ((8 * (dArr1[(Test.iFld >>> 1) % N]--)) * (i7 = i7))));
        vMeth1();
        for (i18 = 10; 248 > i18; i18++) {
            Test.instanceCount -= i18;
            dArr1[i18] *= f2;
            i19 &= ((int) (Test.instanceCount));
            Test.sFld *= ((short) (i19));
            Test.iArrFld = Test.iArrFld;
            i19 = 72;
            fArr1[i18] = i19;
            Test.instanceCount = i19;
            i19 += ((i18 * i19) + i19) - Test.instanceCount;
            i19 >>= 57;
            Test.iArrFld[i18 - 1] -= ((int) (f2));
        }
        switch ((((i18 >>> 1) % 2) * 5) + 13) {
            case 18 :
                i19 -= 0;
                lArr1[(2 >>> 1) % N] = Test.iFld;
                for (i20 = 10; i20 < 165; i20++) {
                    i19 = i21;
                    for (i22 = 1; i22 < 4; ++i22) {
                        Test.instanceCount += Test.instanceCount;
                    }
                    dArr1[i20 + 1] -= i23;
                }
                for (i24 = 5; i24 < 152; i24++) {
                    Test.instanceCount /= i19 | 1;
                    Test.instanceCount -= -9815;
                    Test.instanceCount |= Test.instanceCount;
                    for (i26 = 4; i26 > i24; i26--) {
                        for (d3 = 1; d3 < 1; d3++) {
                            Test.byFld = Test.byFld;
                        }
                        i29 = 1;
                        do {
                            if (i21 != 0) {
                                vMeth_check_sum += (((((((((((((((((i7 + i18) + i19) + Float.floatToIntBits(f2)) + i20) + i21) + i22) + i23) + i24) + i25) + i26) + i27) + Double.doubleToLongBits(d3)) + i28) + i29) + Double.doubleToLongBits(d4)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1))) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(lArr1);
                                return;
                            }
                            Test.iFld *= i22;
                            Test.iFld = Test.iFld;
                            i25 += i29;
                            d4 += Test.instanceCount;
                            i19 = i19;
                            i23 = i29;
                        } while ((i29 += 2) < 1 );
                    }
                }
            case 23 :
                i28 -= i26;
        }
        vMeth_check_sum += (((((((((((((((((i7 + i18) + i19) + Float.floatToIntBits(f2)) + i20) + i21) + i22) + i23) + i24) + i25) + i26) + i27) + Double.doubleToLongBits(d3)) + i28) + i29) + Double.doubleToLongBits(d4)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1))) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))) + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth(int i1, int i2, int i3) {
        int i4 = -60040;
        int i5 = -117;
        int i6 = 8;
        int i30 = -8;
        int i31 = -230;
        int i32 = 17656;
        int i33 = -9;
        int i34 = -151;
        short s = -31618;
        double d1 = -1.12013;
        double dArr[][] = new double[N][N];
        boolean b1 = true;
        float f4 = -100.523F;
        FuzzerUtils.init(dArr, 45.117724);
        i4 = 1;
        do {
            float f3 = 117.328F;
            if (b1) {
                for (i5 = 1; i5 < 3; i5++) {
                    Test.instanceCount *= ((long) (i6 * (0.398F - (i2 - s))));
                }
                i2 -= ((int) ((i3 / (((long) (d1 - Test.iFld)) | 1)) * dArr[i4 - 1][i4]));
                vMeth(i4);
                i3 >>>= Test.byFld;
                f3 -= i3;
            }
            i6 -= -5;
        } while ((++i4) < 220 );
        for (i30 = 133; i30 > 6; i30 -= 3) {
            i3 += (-16398) + (i30 * i30);
            for (i32 = 1; i32 < 12; i32++) {
                f4 += i32;
                Test.instanceCount = Test.instanceCount;
                Test.byFld *= ((byte) (f4));
                try {
                    i2 = i32 / i1;
                    Test.iArrFld[i30 + 1] = i32 % (-4367);
                    i6 = i4 / (-6926);
                } catch (ArithmeticException a_e) {
                }
                b1 = b1;
                Test.instanceCount += ((long) (d1));
                i3 = i2;
                i1 += i32;
                i6 = i5;
                switch ((((-9) >>> 1) % 3) + 109) {
                    case 109 :
                        i34 = 1;
                        while ((++i34) < 2) {
                            i3 += ((i34 * s) + i31) - i32;
                            d1 += 5796L;
                            Test.instanceCount += 12;
                            i3 += i34;
                            i33 += i34 * i34;
                            if (b1) {
                                i33 = Test.iFld;
                                f4 -= i2;
                                switch ((((Test.iFld >>> 1) % 2) * 5) + 27) {
                                    case 37 :
                                        f4 += i6;
                                    case 34 :
                                        Test.instanceCount *= i3;
                                        i1 = Test.iFld;
                                        Test.iFld += i34;
                                        i6 = i3;
                                        break;
                                    default :
                                        Test.iFld *= ((int) (-2987537068L));
                                }
                            }
                        }
                        break;
                    case 110 :
                        i2 += i32;
                        break;
                    case 111 :
                        i6 >>= ((int) (Test.instanceCount));
                        break;
                    default :
                        Test.byFld += ((byte) (((i32 * f4) + i31) - Test.iFld));
                }
            }
        }
        long meth_res = ((((((((((((((i1 + i2) + i3) + i4) + i5) + i6) + s) + Double.doubleToLongBits(d1)) + (b1 ? 1 : 0)) + i30) + i31) + i32) + i33) + Float.floatToIntBits(f4)) + i34) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public void mainTest(String[] strArr1) {
        int i = 225;
        int i35 = 2;
        int i36 = -2;
        int i37 = 243;
        int i38 = 41377;
        int i39 = 237;
        int i40 = -16172;
        double d = -1.79673;
        double dArr2[] = new double[N];
        boolean b2 = true;
        long lArr[][] = new long[N][N];
        float fArr2[][] = new float[N][N];
        FuzzerUtils.init(lArr, 11L);
        FuzzerUtils.init(fArr2, -111.714F);
        FuzzerUtils.init(dArr2, 2.40202);
        lArr[(i >>> 1) % N] = lArr[(i >>> 1) % N] = lArr[(36 >>> 1) % N] = lArr[(i >>> 1) % N] = FuzzerUtils.long1array(N, ((long) (-200L)));
        i = ((int) (((i - Test.instanceCount) * (i--)) * ((d + 1.227F) / (iMeth(i, i, i) | 1))));
        i = Test.iFld;
        for (i35 = 6; i35 < 172; ++i35) {
            for (i37 = 1; i37 < 31; i37++) {
                Test.instanceCount += i37 * i37;
                for (i39 = 1; 2 > i39; i39++) {
                    Test.fFld += i39 + Test.iFld;
                    i38 = i;
                    Test.sFld = ((short) (i37));
                    i40 = ((int) (Test.instanceCount));
                    Test.iArrFld[i39 - 1] -= Test.iFld;
                    switch ((i37 % 4) + 45) {
                        case 45 :
                            Test.iFld = i39;
                            Test.byFld <<= ((byte) (81));
                            i38 -= Test.iFld;
                            if (b2)
                                continue;

                            fArr2[i37 - 1][(i >>> 1) % N] += i39;
                            Test.instanceCount -= i37;
                            i += i39 ^ i40;
                            Test.iArrFld[i37 - 1] = ((int) (-1011917967L));
                            Test.iFld += i38;
                            Test.instanceCount *= -21982;
                            Test.instanceCount = Test.instanceCount;
                            Test.iArrFld[i37 + 1] += i40;
                            i38 = i37;
                            Test.instanceCount >>= Test.iFld;
                            i38 -= Test.iFld;
                            break;
                        case 46 :
                            i38 = i38;
                            Test.iFld = ((int) (Test.instanceCount));
                            i *= ((int) (d));
                            i40 += i37;
                            if (b2) {
                                Test.iFld = i40;
                                fArr2[i39][i35 - 1] = -16;
                                if (b2) {
                                    i38 = 58859;
                                    Test.iFld += i39 * i39;
                                } else if (b2) {
                                    Test.byFld += ((byte) (i39 | i));
                                    Test.instanceCount += i39;
                                    Test.iArrFld[i39] = ((int) (-8285712485483632830L));
                                    Test.bArrFld[i37] = b2;
                                    Test.instanceCount = i39;
                                }
                                Test.iArrFld[i37 - 1] += i38;
                                i40 -= Test.iFld;
                                Test.fFld *= -228;
                                switch ((((i35 >>> 1) % 2) * 5) + 55) {
                                    case 62 :
                                        Test.instanceCount -= i37;
                                        switch (((i37 % 2) * 5) + 13) {
                                            case 19 :
                                                Test.iFld -= ((int) (Test.fFld));
                                                Test.iFld = ((int) (Test.fFld));
                                                Test.iArrFld = Test.iArrFld;
                                                break;
                                            case 17 :
                                                Test.iFld += i39 * i39;
                                                d += -2.833F;
                                                i36 = Test.iFld;
                                                break;
                                            default :
                                                Test.instanceCount <<= Test.instanceCount;
                                                switch (((i35 % 6) * 5) + 72) {
                                                    case 89 :
                                                        if (b2) {
                                                            Test.iFld -= ((int) (1.165F));
                                                            i += i39 * i39;
                                                            i40 += ((int) (24.735F + (i39 * i39)));
                                                            i40 += i39 * Test.fFld;
                                                            Test.fFld -= i36;
                                                            d = Test.instanceCount;
                                                        } else if (false) {
                                                            switch (((i35 % 1) * 5) + 125) {
                                                                case 126 :
                                                                    Test.fFld *= Test.instanceCount;
                                                                    if (true)
                                                                        continue;

                                                                    if (true) {
                                                                        Test.instanceCount = i40;
                                                                        i -= i40;
                                                                        switch ((i35 % 6) + 110) {
                                                                            case 110 :
                                                                                i38 >>= ((int) (Test.instanceCount));
                                                                                i40 -= i35;
                                                                                if (b2)
                                                                                    break;

                                                                                Test.instanceCount += i39;
                                                                                break;
                                                                            case 111 :
                                                                                i38 = i39;
                                                                                break;
                                                                            case 112 :
                                                                                Test.iArrFld[i37] -= ((int) (d));
                                                                                break;
                                                                            case 113 :
                                                                                i38 += i39;
                                                                                break;
                                                                            case 114 :
                                                                                Test.fFld = ((float) (d));
                                                                                break;
                                                                            case 115 :
                                                                            default :
                                                                                Test.iFld += i39 * i39;
                                                                        }
                                                                    } else if (b2) {
                                                                        Test.iArrFld[i37 + 1] += i;
                                                                    } else {
                                                                        i += i40;
                                                                    }
                                                                    break;
                                                                default :
                                                            }
                                                        } else {
                                                            i38 *= i38;
                                                        }
                                                        break;
                                                    case 85 :
                                                        Test.sFld *= Test.sFld;
                                                    case 98 :
                                                        lArr[i39 - 1][i35] -= -14;
                                                        break;
                                                    case 80 :
                                                        i += i39 * i39;
                                                        break;
                                                    case 97 :
                                                        dArr2[i39 - 1] += i35;
                                                    case 77 :
                                                        i36 = i;
                                                        break;
                                                }
                                        }
                                    case 58 :
                                        d += i38;
                                }
                            }
                            break;
                        case 47 :
                            Test.fFld = i39;
                        case 48 :
                            i40 |= i;
                        default :
                            Test.instanceCount = Test.iFld;
                    }
                }
            }
        }
        FuzzerUtils.out.println((((("i d i35 = " + i) + ",") + Double.doubleToLongBits(d)) + ",") + i35);
        FuzzerUtils.out.println((((("i36 i37 i38 = " + i36) + ",") + i37) + ",") + i38);
        FuzzerUtils.out.println((((("i39 i40 b2 = " + i39) + ",") + i40) + ",") + (b2 ? 1 : 0));
        FuzzerUtils.out.println((((("lArr fArr2 dArr2 = " + FuzzerUtils.checkSum(lArr)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2))) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount) + ",") + Test.iFld) + ",") + Test.byFld);
        FuzzerUtils.out.println((((("Test.sFld Test.fFld Test.iArrFld = " + Test.sFld) + ",") + Float.floatToIntBits(Test.fFld)) + ",") + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println((("Test.lArrFld Test.bArrFld = " + FuzzerUtils.checkSum(Test.lArrFld)) + ",") + FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            {
                try {
                    Long ax$1 = 365749L;
                    for (int ax$0 = -376; ax$0 < (-376 + 4798); ax$0 += 1) {
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            for (int ax$2 = 0; ax$2 < 1000; ax$2++) {
                                if ((ax$2 & 1) == 0) {
                                    ax$1 = ax$1 + 1;
                                }
                            }
                        } catch (Throwable ax$3) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                    }
                } finally {
                }
            }
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}