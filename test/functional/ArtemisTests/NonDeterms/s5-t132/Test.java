// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.text.Bidi;
import java.text.DateFormat;
import java.util.ListIterator;
import java.util.concurrent.CountDownLatch;

public class Test {
    public static final int N = 256;

    public static long instanceCount = -6L;

    public static int iFld = -74;

    public static byte byFld = 32;

    public static double dFld = -32.100486;

    public float fFld = -113.44F;

    public static volatile boolean bFld = false;

    public int iArrFld[] = new int[N];

    public static int iArrFld1[] = new int[N];

    public static long lArrFld[] = new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -7982);
        FuzzerUtils.init(Test.lArrFld, 77L);
    }

    public static long vMeth_check_sum = 0;

    public static long vMeth1_check_sum = 0;

    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8) {
        if (Test.ax$29) {
            CharSequence ax$30 = null;
            String ax$31 = "/sdcard";
            Test.AxOutputRedirectionHelper.redirect();
            try {
                new StringBuilder(ax$31).insert(7, ax$30);
            } catch (Throwable ax$32) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return;
        }
        int i9 = 26374;
        int i10 = 60544;
        int i11 = -55094;
        int i12 = -41;
        int i13 = 32754;
        int i14 = 243;
        int i15 = -127;
        int iArr[] = new int[N];
        boolean b = true;
        boolean bArr[] = new boolean[N];
        float f2 = -115.688F;
        long lArr[] = new long[N];
        short sArr[] = new short[N];
        FuzzerUtils.init(iArr, -37);
        FuzzerUtils.init(lArr, 115L);
        FuzzerUtils.init(sArr, ((short) (14287)));
        FuzzerUtils.init(bArr, true);
        Test.instanceCount >>= -7;
        for (i9 = 10; 195 > i9; ++i9) {
            if (b)
                continue;

            Test.iFld -= -51796;
            for (i11 = i9; i11 < 3; ++i11) {
                try {
                    iArr[i11] = iArr[i9] % 36652;
                    i8 = i11 / i12;
                    Test.iFld = 3 % i10;
                } catch (ArithmeticException a_e) {
                }
                i12 += i9;
                lArr[i11 - 1] += ((long) (f2));
                Test.instanceCount >>>= i10;
                f2 = Test.iFld;
            }
            b = b;
            Test.instanceCount += i12;
            i12 = 3;
            sArr[i9 - 1] = ((short) (51124));
            i10 += Test.iFld;
            for (i13 = i9; i13 < 3; i13++) {
                Test.iFld -= i13;
                Test.iFld -= ((int) (Test.instanceCount));
                i15 = 1;
                do {
                    Test.iFld = Test.byFld;
                    f2 -= i11;
                    f2 += 8;
                    f2 = i15;
                    if (i11 != 0) {
                        vMeth2_check_sum += ((((((((((((i8 + i9) + i10) + (b ? 1 : 0)) + i11) + i12) + Float.floatToIntBits(f2)) + i13) + i14) + i15) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(sArr)) + FuzzerUtils.checkSum(bArr);
                        return;
                    }
                    i12 = i15;
                    if (b)
                        break;

                    switch ((i9 % 8) + 77) {
                        case 77 :
                            Test.instanceCount -= i15;
                            bArr[i13 - 1] = b;
                            i12 += ((i15 * Test.instanceCount) + i9) - i9;
                            iArr[i13 - 1] = ((int) (-231L));
                            f2 -= i15;
                            sArr[i15 - 1] = ((short) (-4047130040023039484L));
                            Test.instanceCount = i10;
                            i10 += i14;
                            f2 = i10;
                            break;
                        case 78 :
                            Test.iFld >>= ((int) (105L));
                            break;
                        case 79 :
                            b = b;
                        case 80 :
                            i12 <<= i11;
                            break;
                        case 81 :
                            Test.instanceCount = i9;
                            break;
                        case 82 :
                        case 83 :
                            i14 += ((int) (Test.instanceCount));
                            break;
                        case 84 :
                            Test.iFld += ((int) (Test.instanceCount));
                    }
                } while ((++i15) < 1 );
            }
        }
        vMeth2_check_sum += ((((((((((((i8 + i9) + i10) + (b ? 1 : 0)) + i11) + i12) + Float.floatToIntBits(f2)) + i13) + i14) + i15) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr)) + FuzzerUtils.checkSum(sArr)) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1(int i7, long l, float f1) {
        int i16 = -62983;
        int i17 = -12;
        int i18 = 36851;
        int i19 = 5415;
        int i20 = -8406;
        int i21 = 22;
        int i22 = 52900;
        int i23 = 21380;
        int iArr1[] = new int[N];
        int iArr2[][] = new int[N][N];
        byte by = -7;
        boolean b1 = true;
        short s = 1633;
        long l1 = 767336633L;
        long lArr1[] = new long[N];
        FuzzerUtils.init(iArr1, -215);
        FuzzerUtils.init(iArr2, -46725);
        FuzzerUtils.init(lArr1, 1012800945L);
        {
            final int ax$42 = i18;
            final int ax$43 = i17;
            try {
                float[] ax$34 = new float[]{ 0.8474089F, 0.8420023F, 0.35322237F, 0.021729529F, 0.4605636F, 0.6096891F, 0.97967166F, 0.7796391F };
                float[] ax$35 = new float[]{ 0.25386828F, 0.8537271F, 0.13985944F };
                int[] ax$38 = new int[]{ 71994000, 71994000, 12000, 71994000, 71994000, 144000000, 144000000, 72018000, 144000000, 144000000, 71994000, 71994000, 12000, 71994000, 71994000, 72000000, 72000000, 36006000, 72000000, 72000000, 144012000, 144012000, 72030000, 144012000, 144012000, 72000000, 72000000, 36006000, 72000000, 72000000, 499501, 499501, 499501, 499501, 499501, 1000002, 1000002, 1000002, 1000002, 1000002, 499501, 499501, 499501, 499501, 499501, 1001, 1001, 1001, 1001, 1001, 3002, 3002, 3002, 3002, 3002, 1001, 1001, 1001, 1001, 1001, 501, 501, 501, 501, 501, 1502, 1502, 1502, 1502, 1502 };
                for (int ax$33 = -59; ax$33 < (-59 + 17836); ax$33 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$36 = 0; ax$36 < 100; ax$36++) {
                            ax$34[ax$36] = ax$35[ax$36] * 2.5F;
                        }
                    } catch (Throwable ax$37) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$29 = true;
                    vMeth2(-946980611);
                    Test.ax$29 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (ax$38 != null) {
                            i18 = ax$38[i17];
                        }
                    } catch (Throwable ax$41) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i18 = ax$42;
                i17 = ax$43;
            }
        }
        vMeth2(i7);
        i16 = 1;
        do {
            i7 += ((i16 * l) + i16) - Test.iFld;
            i17 = 4;
            while ((--i17) > 0) {
                iArr1[i17 - 1] <<= i7;
                i7 = ((int) (Test.dFld));
            }
            for (i18 = 1; i18 < 4; ++i18) {
                i19 = i19;
                for (i20 = 1; i20 < 2; ++i20) {
                    i21 >>>= -92;
                    l -= 44;
                    iArr2 = FuzzerUtils.int2array(N, ((int) (13)));
                    l = Test.iFld;
                    Test.instanceCount *= ((long) (24.801F));
                    i7 -= ((int) (Test.instanceCount));
                    f1 += i20 * i20;
                    if (b1) {
                        i7 |= ((int) (l));
                        by += ((byte) (i20));
                        Test.instanceCount += Test.iFld;
                        lArr1[i18] = i17;
                    } else {
                        i7 *= ((int) (l));
                        Test.iFld += 0;
                        i21 -= -47;
                        l *= Test.byFld;
                        iArr2[i20 + 1][i20] += ((int) (l));
                        i22 &= i18;
                        try {
                            Test.iFld = iArr2[i20 - 1][i20 + 1] % (-12);
                            Test.iFld = 129 % i21;
                            i23 = i18 % (-120);
                        } catch (ArithmeticException a_e) {
                        }
                        i23 *= i23;
                        if (b1)
                            continue;

                    }
                    iArr1[i16] <<= -27495;
                    if (b1)
                        break;

                    Test.byFld = ((byte) (218));
                    switch ((i20 % 10) + 55) {
                        case 55 :
                            i7 -= i16;
                            f1 = f1;
                            break;
                        case 56 :
                            Test.iFld *= Test.iFld;
                        case 57 :
                        case 58 :
                            i21 -= s;
                            break;
                        case 59 :
                            l += i18;
                            break;
                        case 60 :
                            i19 |= 4;
                            break;
                        case 61 :
                            iArr2[i20 - 1][i20 + 1] = ((int) (Test.dFld));
                            break;
                        case 62 :
                            l1 -= i20;
                            break;
                        case 63 :
                            i23 += i20 | ((long) (f1));
                        case 64 :
                            l1 += i23;
                        default :
                            l = i19;
                    }
                }
            }
        } while ((++i16) < 164 );
        vMeth1_check_sum += ((((((((((((((((i7 + l) + Float.floatToIntBits(f1)) + i16) + i17) + i18) + i19) + i20) + i21) + by) + (b1 ? 1 : 0)) + i22) + i23) + s) + l1) + FuzzerUtils.checkSum(iArr1)) + FuzzerUtils.checkSum(iArr2)) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth() {
        if (Test.ax$18) {
            final int ax$22 = Test.iFld;
            double[] ax$19 = new double[]{ 0.6088244082613248, 0.2298941241576855, 0.05264106669896951, 0.957029591037164, 0.2376193094222141, 0.0806720956409307, 0.5138843103240855, 0.4253774683234447, 0.8161380442888246 };
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$19[iFld] = 0.0;
            } catch (Throwable ax$21) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            Test.iFld = ax$22;
            return;
        }
        float f = 1.369F;
        int i3 = -13416;
        int i4 = -69;
        int i5 = -43;
        int i6 = 9;
        int i24 = -4;
        int i25 = 13;
        int i26 = -5;
        int i27 = -4;
        boolean b2 = true;
        long l2 = -182191666894042385L;
        short s1 = 2834;
        if (b2) {
            Test.instanceCount = ((long) (Test.iFld * ((13 * Math.max(Test.iFld, Test.iFld)) - (f - Test.instanceCount))));
            i3 = 1;
            while ((++i3) < 126) {
                for (i4 = 1; i4 < 4; ++i4) {
                    switch ((((((int) (i3 - f)) >>> 1) % 2) * 5) + 13) {
                        case 15 :
                            i6 = 1;
                            do {
                                i5 = 25;
                                if (b2) {
                                    if (i6 >= (++Test.iFld))
                                        continue;

                                    vMeth1(i6, Test.instanceCount, f);
                                }
                                Test.iFld <<= Test.iFld;
                                Test.iArrFld1[i4 + 1] -= ((int) (Test.instanceCount));
                                Test.iArrFld1[i6] = i5;
                            } while ((++i6) < 2 );
                            Test.instanceCount >>= 24;
                            Test.iFld -= i4;
                            for (i24 = i3; i24 < 2; ++i24) {
                                Test.iFld += i4;
                                i5 -= i25;
                                Test.iFld >>= ((int) (Test.instanceCount));
                            }
                            i25 += ((int) (170L + (i4 * i4)));
                            i25 += i4 * i4;
                            for (i26 = i4; i26 < 2; ++i26) {
                                Test.byFld += ((byte) (i26 * i26));
                            }
                            Test.iArrFld1[i4] = Test.byFld;
                            i27 >>= ((int) (l2));
                            Test.instanceCount += i26;
                            i5 += i4 | i24;
                        case 19 :
                            i27 = i24;
                            if (b2)
                                break;

                            i27 = ((int) (2615189199L));
                            i25 >>= i5;
                            s1 = ((short) (Test.dFld));
                            i5 -= ((int) (Test.dFld));
                            Test.iFld -= i5;
                            Test.instanceCount += ((i4 * Test.instanceCount) + Test.instanceCount) - Test.byFld;
                            if (b2)
                                continue;

                            s1 += ((short) (i4 - i3));
                            break;
                        default :
                            Test.instanceCount += ((i4 * Test.byFld) + Test.byFld) - Test.instanceCount;
                    }
                }
            }
        } else {
            l2 = -8;
        }
        vMeth_check_sum += ((((((((((Float.floatToIntBits(f) + i3) + i4) + i5) + i6) + (b2 ? 1 : 0)) + i24) + i25) + i26) + i27) + l2) + s1;
    }

    public void mainTest(String[] strArr1) {
        if (Test.ax$0) {
            ListIterator ax$1 = null;
            ListIterator ax$2 = null;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                ax$2.previous();
                ax$2.add(ax$1.previous());
                ax$2.previous();
            } catch (Throwable ax$3) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return;
        }
        int i = -221;
        int i1 = 82;
        int i2 = 193;
        int i28 = -12;
        int i29 = -15378;
        int i30 = 6;
        int i31 = 96;
        int i32 = 40;
        double d = 0.85526;
        double dArr[][] = new double[N][N];
        short s2 = -24233;
        float fArr[] = new float[N];
        FuzzerUtils.init(fArr, 86.124F);
        FuzzerUtils.init(dArr, 2.2159);
        iArrFld[(7534 >>> 1) % N] = ((int) ((--i) + d));
        d -= i;
        for (i1 = 3; i1 < 94; ++i1) {
            {
                try {
                    CountDownLatch ax$26 = null;
                    CountDownLatch ax$27 = new CountDownLatch(1000);
                    for (int ax$23 = -118; ax$23 < (-118 + 1015); ax$23 += 1) {
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            try {
                                DateFormat.getDateInstance(DateFormat.FULL, null);
                            } catch (NullPointerException ax$24) {
                            }
                        } catch (Throwable ax$25) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                        Test.ax$18 = true;
                        vMeth();
                        Test.ax$18 = false;
                        Test.AxOutputRedirectionHelper.redirect();
                        try {
                            ax$26.countDown();
                            ax$27.await();
                        } catch (Throwable ax$28) {
                        } finally {
                        }
                        Test.AxOutputRedirectionHelper.recover();
                    }
                } finally {
                }
            }
            vMeth();
            i = Test.iFld;
            i += ((i1 * Test.instanceCount) + i2) - i1;
            Test.instanceCount = Test.instanceCount;
            for (i28 = 1; i28 < 55; i28++) {
                i2 += i28 | i30;
                for (i31 = 2; 1 < i31; --i31) {
                    i30 += i31;
                    i30 *= s2;
                    fFld *= i28;
                    fArr[i1] -= s2;
                    Test.instanceCount += Test.byFld;
                    fFld += 14884 + (i31 * i31);
                    switch ((i31 % 4) + 63) {
                        case 63 :
                            Test.iArrFld1[i28 - 1] -= i31;
                            i30 = i31;
                            i2 &= 4;
                            Test.iFld += i32;
                            fFld += ((i31 * i31) + Test.instanceCount) - Test.instanceCount;
                            Test.iFld += i31;
                            i = i31;
                            i = i28;
                            i29 += ((int) (609233439895090309L + (i31 * i31)));
                            i32 += i28;
                            i += i31 * i31;
                            Test.lArrFld[i31] >>= 31194;
                            break;
                        case 64 :
                            i29 += i31 * i31;
                            if (Test.bFld)
                                continue;

                            Test.instanceCount = i1;
                            Test.iFld *= i30;
                            break;
                        case 65 :
                            i = s2;
                            iArrFld[i31] = i30;
                            Test.iFld += i31 | i29;
                            i += i31 - i1;
                            switch (((i31 % 2) * 5) + 87) {
                                case 93 :
                                case 92 :
                                    i30 += ((int) (80.388F));
                                    break;
                                default :
                                    fFld = Test.byFld;
                                    Test.iArrFld1[i28] = ((int) (Test.dFld));
                                    i30 += ((int) (Test.instanceCount));
                                    Test.instanceCount -= -9;
                                    Test.iArrFld1[i1 - 1] -= i1;
                                    fFld += i31 * i28;
                                    i29 <<= i;
                                    i2 |= i1;
                                    Test.instanceCount = i;
                                    i30 += ((i31 * s2) + i29) - i31;
                                    Test.byFld = ((byte) (s2));
                                    i32 *= 1;
                            }
                            fFld = fFld;
                            Test.dFld *= -2.10942;
                            Test.iArrFld1[i28 + 1] -= i31;
                            i30 &= i30;
                            Test.bFld = false;
                            Test.instanceCount += i31 - i30;
                            i |= i30;
                            break;
                        case 66 :
                    }
                    i29 >>= i;
                    Test.instanceCount >>= -1798279941L;
                    switch ((i31 % 5) + 48) {
                        case 48 :
                            Test.iFld *= -14964;
                            i30 += i;
                            dArr[i1 - 1][i28 - 1] /= 13;
                            i = ((int) (fFld));
                            i += i31;
                            d *= Test.instanceCount;
                            fFld -= ((float) (Test.dFld));
                            i += i31;
                            s2 = ((short) (fFld));
                            Test.bFld = Test.bFld;
                            Test.instanceCount += ((long) (1.12266));
                            fFld -= i1;
                            break;
                        case 49 :
                            Test.iFld = i1;
                            i29 = ((int) (Test.instanceCount));
                        case 50 :
                            i2 += i31;
                            break;
                        case 51 :
                            d -= -3640399378L;
                            break;
                        case 52 :
                            if (Test.bFld)
                                continue;

                            break;
                        default :
                            Test.iFld = i28;
                    }
                }
            }
        }
        FuzzerUtils.out.println((((("i d i1 = " + i) + ",") + Double.doubleToLongBits(d)) + ",") + i1);
        FuzzerUtils.out.println((((("i2 i28 i29 = " + i2) + ",") + i28) + ",") + i29);
        FuzzerUtils.out.println((((("i30 i31 i32 = " + i30) + ",") + i31) + ",") + i32);
        FuzzerUtils.out.println((((("s2 fArr dArr = " + s2) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount) + ",") + Test.iFld) + ",") + Test.byFld);
        FuzzerUtils.out.println((((("Test.dFld fFld Test.bFld = " + Double.doubleToLongBits(Test.dFld)) + ",") + Float.floatToIntBits(fFld)) + ",") + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println((((("iArrFld Test.iArrFld1 Test.lArrFld = " + FuzzerUtils.checkSum(iArrFld)) + ",") + FuzzerUtils.checkSum(Test.iArrFld1)) + ",") + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                {
                    final boolean ax$16 = Test.bFld;
                    final int ax$17 = i;
                    try {
                        String ax$7 = "1.487759894419769E-18";
                        Bidi ax$8 = null;
                        int[] ax$9 = new int[]{ 1339834958, 1497442656 };
                        int[] ax$10 = new int[]{ 7 };
                        for (int ax$4 = -146; ax$4 < (-146 + 1042); ax$4 += 1) {
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                if (i != 65535);
                            } catch (Throwable ax$6) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                            Test.ax$0 = true;
                            _instance.mainTest(new String[]{ "s", "s", "s", "s", "s", "s", "s" });
                            Test.ax$0 = false;
                            Test.AxOutputRedirectionHelper.redirect();
                            try {
                                for (int ax$13 = 0; ax$13 < ax$7.length(); ax$13++) {
                                    int ax$14 = ax$8.getLevelAt(ax$13);
                                    if (ax$14 != ax$9[ax$13]) {
                                        bFld = true;
                                    }
                                }
                            } catch (Throwable ax$15) {
                            } finally {
                            }
                            Test.AxOutputRedirectionHelper.recover();
                        }
                    } finally {
                        Test.bFld = ax$16;
                        i = ax$17;
                    }
                }
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }

    static Boolean ax$18 = false;

    static Boolean ax$29 = false;
}