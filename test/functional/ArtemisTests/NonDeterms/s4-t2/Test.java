// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.net.InetAddress;
import java.net.ServerSocket;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import java.util.Date;
import java.time.ZonedDateTime;
import java.time.LocalDateTime;
import java.util.Random;
import java.time.ZoneOffset;
import java.time.Instant;
import java.time.ZoneId;

public class Test {

    public static final int N = 256;

    public static long instanceCount = 4L;

    public static short sFld = -23980;

    public static float fFld = -81.892F;

    public static byte byFld = -113;

    public volatile double dFld = 92.95040;

    public static double[] dArrFld = new double[N];

    public static int[][] iArrFld = new int[N][N];

    public static byte[] byArrFld = new byte[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -70.3657);
        FuzzerUtils.init(Test.iArrFld, -32);
        FuzzerUtils.init(Test.byArrFld, (byte) 54);
    }

    public static long vMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l1, int i2) {
        if (ax$17) {
            int ax$35 = i2;
            long ax$36 = l1;
            try {
                java.util.Random ax$27 = new Random(69);
                int ax$31 = ax$27.nextInt(50) * 365 + ax$27.nextInt(365);
                long ax$28 = l1 + ax$31 * 86400 + ax$27.nextInt(86400);
                int ax$19 = ax$27.nextInt(i2);
                // millis precision
                int ax$18 = ax$19 / 1000000 * 1000000;
                long ax$32 = ax$28 * 1000 + ax$27.nextInt(1000);
                LocalDateTime ax$33 = LocalDateTime.ofEpochSecond(ax$28, ax$19, ZoneOffset.UTC);
                LocalDateTime ax$21 = LocalDateTime.ofEpochSecond(ax$28, ax$18, ZoneOffset.UTC);
                Instant ax$29 = Instant.ofEpochSecond(ax$28, ax$19);
                Instant ax$26 = Instant.ofEpochSecond(ax$28, ax$18);
                // /////////// java.util.Date /////////////////////////
                Date ax$30 = new java.util.Date(ax$32);
                Instant ax$25 = ax$30.toInstant();
                if (ax$30.getTime() != ax$25.toEpochMilli() || !ax$30.equals(Date.from(ax$25))) {
                }
                // roundtrip only with millis precision
                Date ax$20 = Date.from(ax$26);
                if (ax$20.getTime() != ax$26.toEpochMilli() || !ax$26.equals(ax$20.toInstant())) {
                }
                // ////////// java.util.GregorianCalendar /////////////
                GregorianCalendar ax$24 = new GregorianCalendar();
                // non-roundtrip of tz name between j.u.tz and j.t.zid
                ax$24.setTimeZone(TimeZone.getTimeZone(ZoneId.systemDefault()));
                ax$24.setGregorianChange(new java.util.Date(Long.MIN_VALUE));
                ax$24.setFirstDayOfWeek(Calendar.MONDAY);
                ax$24.setMinimalDaysInFirstWeek(4);
                ax$24.setTimeInMillis(ax$32);
                ZonedDateTime ax$34 = ax$24.toZonedDateTime();
                if (ax$24.getTimeInMillis() != ax$34.toInstant().toEpochMilli() || !ax$24.equals(GregorianCalendar.from(ax$34))) {
                }
                ax$25 = ax$24.toInstant();
                if (ax$24.getTimeInMillis() != ax$25.toEpochMilli()) {
                }
                ZonedDateTime ax$22 = ZonedDateTime.of(ax$21, ZoneId.systemDefault());
                GregorianCalendar ax$23 = GregorianCalendar.from(ax$22);
                if (ax$22.toInstant().toEpochMilli() != ax$23.getTimeInMillis() || !ax$22.equals(GregorianCalendar.from(ax$22).toZonedDateTime())) {
                }
            } catch (Throwable ax$37) {
            } finally {
                i2 = ax$35;
                l1 = ax$36;
            }
            return 333763451;
        }
        int i3 = 0, i4 = -4, i5 = 26728, i6 = 219, i7 = 10, iArr[] = new int[N];
        double d1 = 118.68100, d2 = 10.42737;
        float f = -2.308F, f1 = -50.931F, fArr[] = new float[N];
        byte by = -59;
        short s1 = -20491;
        long l2 = 229323083L;
        FuzzerUtils.init(iArr, -7);
        FuzzerUtils.init(fArr, -10.580F);
        i3 = 1;
        while ((i3 += 2) < 252) {
            i2 += (i3 | i3);
            if (i3 != 0) {
            }
            iArr[i3 - 1] += (int) l1;
            fArr[i3] = i2;
            d1 = 1;
            do {
                fArr[(int) (d1 + 1)] += i3;
                f = 1;
                while (++f < 1) {
                    d2 -= l1;
                    if (i3 != 0) {
                    }
                    i2 += i3;
                    l1 *= 3;
                    try {
                        i2 = (iArr[i3] % 37654);
                        i2 = (-101 % i3);
                        i2 = (iArr[(int) (f + 1)] % i2);
                    } catch (ArithmeticException a_e) {
                    }
                }
                d2 = f;
                try {
                    i2 = (i3 / 149);
                    iArr[i3] = (i2 / iArr[i3]);
                    iArr[(int) (d1)] = (i2 % 1380656359);
                } catch (ArithmeticException a_e) {
                }
                fArr[(int) (d1 + 1)] = Test.instanceCount;
                Test.instanceCount = by;
                Test.dArrFld[i3 + 1] -= i2;
                f1 += (float) d1;
                i2 += -49882;
            } while (++d1 < 4);
            i2 = i3;
            for (i4 = 1; i4 < 4; i4++) {
                s1 += (short) -194;
                s1 += (short) Test.instanceCount;
                i5 = (int) -96.1012F;
                i5 = i2;
                Test.dArrFld[i4 - 1] = s1;
                switch((i3 % 2) + 67) {
                    case 67:
                        iArr = iArr;
                        i2 += i4;
                        i2 -= i3;
                        for (i6 = 1; i6 < 2; i6++) {
                            i7 += (i6 * i6);
                            l2 <<= i7;
                            iArr[i6] -= i4;
                            f1 += i6;
                            Test.iArrFld = Test.iArrFld;
                        }
                    case 68:
                        i5 += (3972 + (i4 * i4));
                }
            }
        }
        long meth_res = l1 + i2 + i3 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + Double.doubleToLongBits(d2) + by + Float.floatToIntBits(f1) + i4 + i5 + s1 + i6 + i7 + l2 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(int i1, double d) {
        int i8 = 154, i9 = -44589, i10 = -204, i11 = 8, i12 = -10, i13 = 210, i14 = 33404, i15 = -117;
        long[] lArr = new long[N];
        FuzzerUtils.init(lArr, -65L);
        i1 *= iMeth1(50583L, 32583);
        for (i8 = 216; 6 < i8; --i8) {
            i1 = Test.sFld;
            if (true) {
                for (i10 = 3; i10 > 1; --i10) {
                    lArr[i10] = Test.instanceCount;
                    if (i10 != 0) {
                    }
                    i11 >>= i9;
                    Test.fFld += i10;
                    i11 *= Test.byFld;
                }
            }
            Test.byFld = (byte) i9;
            lArr[i8 + 1] -= Test.instanceCount;
            i9 += (92 + (i8 * i8));
            for (i12 = i8; i12 < 3; i12++) {
                Test.instanceCount += (i12 * i12);
                if (i10 != 0) {
                }
                i11 /= (int) (i10 | 1);
                i13 *= (int) Test.instanceCount;
                for (i14 = 1; i14 < 1; ++i14) {
                    switch((i12 % 1) + 102) {
                        case 102:
                            i9 += -1;
                            {
                                java.io.PrintStream ax$0 = System.out;
                                java.io.PrintStream ax$1 = System.err;
                                java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                                    @Override
                                    public void write(int b) throws java.io.IOException {
                                        // DO NOTHING: DISCARD ALL OUTPUTS
                                    }
                                });
                                System.setOut(ax$2);
                                System.setErr(ax$2);
                                {
                                    boolean ax$7 = false;
                                    for (int ax$6 = -3598; ax$6 < 2166; ax$6 += 3) {
                                        if (!ax$7) {
                                            ax$7 = true;
                                            {
                                                System.setOut(ax$0);
                                                System.setErr(ax$1);
                                                switch((i12 % 4) + 90) {
                                                    case 90:
                                                        i9 += i14;
                                                        Test.sFld -= (short) d;
                                                        i9 = (int) Test.fFld;
                                                        i9 <<= i13;
                                                        switch(((4 >>> 1) % 2) + 119) {
                                                            case 119:
                                                                Test.iArrFld[i14][i12 + 1] -= 64547;
                                                                i11 <<= i12;
                                                                lArr[i12] += i10;
                                                                i11 = i8;
                                                                Test.byFld -= (byte) i10;
                                                                lArr[i12 - 1] = i8;
                                                                Test.byFld ^= (byte) Test.instanceCount;
                                                                Test.instanceCount += (i14 + Test.byFld);
                                                                i15 -= -216;
                                                                i13 %= 29274;
                                                                break;
                                                            case 120:
                                                        }
                                                        break;
                                                    case 91:
                                                        Test.instanceCount += i14;
                                                        break;
                                                    case 92:
                                                        lArr[i8 - 1] = i13;
                                                        break;
                                                    case 93:
                                                        Test.iArrFld[i8 - 1][i12 + 1] -= Test.sFld;
                                                        break;
                                                }
                                                System.setOut(ax$2);
                                                System.setErr(ax$2);
                                            }
                                        }
                                        try {
                                            boolean ax$4 = false;
                                            int ax$3 = 100077;
                                            if (ax$3 == 4175) {
                                            } else {
                                                ax$4 = true;
                                            }
                                        } catch (Throwable ax$5) {
                                        } finally {
                                        }
                                    }
                                }
                                System.setOut(ax$0);
                                System.setErr(ax$1);
                            }
                    }
                }
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(short s, long l) {
        int i = -155, i16 = -107, i17 = 22, i18 = 245, i19 = -26590, i20 = 88, i21 = -233, i22 = -164, i23 = -5;
        double d3 = 0.128967, d4 = -1.59051;
        boolean b = true;
        float f2 = 111.524F;
        long l3 = -16584L, lArr1[] = new long[N];
        FuzzerUtils.init(lArr1, 13L);
        i &= (iMeth(-179, d3) >> i);
        Test.fFld -= Test.instanceCount;
        l = i;
        {
            java.io.PrintStream ax$8 = System.out;
            java.io.PrintStream ax$9 = System.err;
            java.io.PrintStream ax$10 = new java.io.PrintStream(new java.io.OutputStream() {

                @Override
                public void write(int b) throws java.io.IOException {
                    // DO NOTHING: DISCARD ALL OUTPUTS
                }
            });
            System.setOut(ax$10);
            System.setErr(ax$10);
            {
                boolean ax$16 = false;
                for (int ax$15 = -2047; ax$15 < 3464; ax$15 += 1) {
                    if (!ax$16) {
                        ax$16 = true;
                        {
                            System.setOut(ax$8);
                            System.setErr(ax$9);
                            for (i16 = 2; i16 < 103; ++i16) {
                                i += i16;
                                i18 = 1;
                                while (++i18 < 5) {
                                    if (b) {
                                        l -= i17;
                                        if (false)
                                            continue;
                                        if (b)
                                            break;
                                        i17 = (int) Test.instanceCount;
                                        Test.iArrFld[i16 - 1][i18] >>= i;
                                        Test.instanceCount += (i18 | i16);
                                        for (d4 = 1; d4 > 1; --d4) {
                                            i19 = (int) -114.45247;
                                            Test.sFld += (short) (((d4 * l) + f2) - Test.sFld);
                                            d3 += l;
                                            i19 += (int) (((d4 * i18) + i16) - Test.instanceCount);
                                            lArr1 = lArr1;
                                            i = i19;
                                            Test.iArrFld[i18 + 1][i16 - 1] += i16;
                                            i = (int) -11L;
                                        }
                                        i17 += (((i18 * l) + i19) - i19);
                                        switch(((-1 >>> 1) % 4) + 84) {
                                            case 84:
                                                for (i20 = i18; i20 < 1; ++i20) {
                                                    try {
                                                        i21 = (31598 / i21);
                                                        Test.iArrFld[i18][i18] = (-248 % i19);
                                                        i21 = (-20845 % i17);
                                                    } catch (ArithmeticException a_e) {
                                                    }
                                                    i19 += (i20 * i20);
                                                    i17 |= s;
                                                    i += (i20 - i17);
                                                    i17 >>= (int) l;
                                                    i21 = i16;
                                                    i *= i;
                                                }
                                                Test.fFld = -51116;
                                                for (l3 = 1; l3 < 1; ++l3) {
                                                    lArr1[i18] = i22;
                                                    Test.instanceCount += (l3 ^ i22);
                                                    i = i22;
                                                }
                                            case 85:
                                                i += (i18 * i19);
                                            case 86:
                                                i = (int) l;
                                            case 87:
                                                Test.byArrFld[i16] = (byte) i16;
                                                break;
                                        }
                                    } else if (b) {
                                        i22 = i23;
                                    } else if (b) {
                                        Test.instanceCount += (i18 * i18);
                                    }
                                }
                            }
                            System.setOut(ax$10);
                            System.setErr(ax$10);
                        }
                    }
                    int ax$13 = i19;
                    try {
                        java.net.InetAddress ax$12 = null;
                        java.lang.String ax$11 = "6e-6";
                        if (ax$11.equals("ServerSocket")) {
                            try (ServerSocket ss2 = new ServerSocket(i19, 0, ax$12)) {
                            }
                        }
                    } catch (Throwable ax$14) {
                    } finally {
                        i19 = ax$13;
                    }
                }
            }
            System.setOut(ax$8);
            System.setErr(ax$9);
        }
        vMeth_check_sum += s + l + i + Double.doubleToLongBits(d3) + i16 + i17 + i18 + (b ? 1 : 0) + Double.doubleToLongBits(d4) + i19 + Float.floatToIntBits(f2) + i20 + i21 + l3 + i22 + i23 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {
        int i24 = 7, i25 = -12, i26 = 5, i27 = -19180, i28 = -7, i29 = 0, i30 = 0, i31 = -15140, i32 = -3, i33 = 3, i34 = -201, i35 = -148, i36 = -36062;
        boolean b1 = true, bArr[] = new boolean[N];
        long l4 = 235L, lArr2[] = new long[N];
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr2, 10159356L);
        vMeth(Test.sFld, Test.instanceCount);
        for (i24 = 10; i24 < 205; i24++) {
            for (i26 = 1; i26 < 26; ++i26) {
                Test.iArrFld[i26] = Test.iArrFld[i24 - 1];
                Test.instanceCount -= i28;
                for (i29 = 1; 2 > i29; ++i29) {
                    i28 += (int) (229L + (i29 * i29));
                    Test.fFld = Test.fFld;
                    Test.byFld -= (byte) dFld;
                    if (b1)
                        continue;
                }
                for (i31 = 1; i31 < 2; ++i31) {
                    try {
                        i28 = (i26 / i33);
                        i32 = (-239 / i31);
                        i27 = (i34 / i30);
                    } catch (ArithmeticException a_e) {
                    }
                    i28 -= Test.sFld;
                    dFld *= 12466;
                    i27 *= (int) 679217370L;
                    i34 += (((i31 * i28) + Test.instanceCount) - i32);
                }
                for (i35 = 2; i35 > 1; i35--) {
                    i25 += (-8 + (i35 * i35));
                    if (b1) {
                        Test.iArrFld[(i26 >>> 1) % N][i26 + 1] += i30;
                        if (b1) {
                            i36 *= i32;
                            i33 *= (int) dFld;
                            Test.iArrFld[i26] = Test.iArrFld[i35 + 1];
                            Test.byArrFld[i26 - 1] -= (byte) i31;
                            Test.instanceCount -= -188;
                            if (b1) {
                                i30 *= i24;
                                i27 += (i35 | i34);
                                i25 += (((i35 * i34) + i24) - i28);
                                Test.fFld = -11985;
                                switch((i26 % 3) + 6) {
                                    case 6:
                                        i33 += (((i35 * i35) + Test.instanceCount) - i36);
                                        i32 += i33;
                                        Test.iArrFld = Test.iArrFld;
                                        i34 += i36;
                                        Test.byFld >>= (byte) 23611;
                                        i27 *= -21725;
                                        i27 -= i26;
                                        Test.instanceCount = 5;
                                        break;
                                    case 7:
                                        i32 += (int) Test.instanceCount;
                                        try {
                                            i34 = (i31 % 53);
                                            i33 = (-39838 % i30);
                                            i27 = (214 / i28);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        i27 *= i33;
                                        i33 = (int) 53.113729;
                                        dFld = Test.instanceCount;
                                        i25 = i32;
                                        Test.instanceCount = (long) 1.634F;
                                        bArr[i26] = b1;
                                        lArr2[i35 + 1] <<= i32;
                                        break;
                                    case 8:
                                        i27 *= (int) Test.instanceCount;
                                        i27 -= (int) 43L;
                                        Test.byArrFld[i24 - 1] += (byte) i35;
                                        i25 |= -227;
                                        i32 *= i27;
                                        i33 *= Test.sFld;
                                        Test.fFld = 0.955F;
                                        Test.fFld += i25;
                                        try {
                                            i25 = (1675702192 / i25);
                                            i25 = (120 % i35);
                                            i30 = (i29 / i26);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        Test.byFld -= (byte) Test.instanceCount;
                                        i33 >>= i30;
                                        i36 += (i35 * i27);
                                        Test.instanceCount >>>= i26;
                                        i32 /= (int) (i34 | 1);
                                        Test.instanceCount &= i34;
                                    default:
                                        l4 += (i35 * i31);
                                        try {
                                            i30 = (i28 / -1382347991);
                                            Test.iArrFld[(-156 >>> 1) % N][i35 - 1] = (223 / i28);
                                            i33 = (i27 / Test.iArrFld[i35 - 1][i26 - 1]);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        Test.instanceCount -= (long) Test.fFld;
                                        Test.fFld = i31;
                                        if (b1) {
                                            Test.byFld -= (byte) i33;
                                            i36 >>= i25;
                                        } else {
                                            i33 -= 12;
                                            try {
                                                i27 = (i36 / 64807);
                                                i34 = (i34 % i24);
                                                i32 = (Test.iArrFld[i35 + 1][i35 - 1] / 26156);
                                            } catch (ArithmeticException a_e) {
                                            }
                                            i30 += i35;
                                            Test.fFld = Test.instanceCount;
                                        }
                                }
                            } else if (false) {
                                i32 += (i35 * i34);
                            } else {
                                Test.fFld = Test.fFld;
                            }
                        } else if (b1) {
                            i32 -= (int) Test.instanceCount;
                        } else {
                            i36 *= (int) Test.fFld;
                        }
                    } else if (b1) {
                        b1 = b1;
                    }
                }
            }
        }
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 b1 i31 = " + i30 + "," + (b1 ? 1 : 0) + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 l4 = " + i35 + "," + i36 + "," + l4);
        FuzzerUtils.out.println("bArr lArr2 = " + FuzzerUtils.checkSum(bArr) + "," + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld dFld Test.dArrFld = " + Test.byFld + "," + Double.doubleToLongBits(dFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.iArrFld Test.byArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$17 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  vMeth ->  vMeth mainTest
// DEBUG  iMeth ->  iMeth vMeth mainTest
// DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
