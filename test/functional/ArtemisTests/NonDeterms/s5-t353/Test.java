// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.concurrent.CountDownLatch;

public class Test {
    public static final int N = 256;

    public static long instanceCount = 253L;

    public static volatile int iFld = -11;

    public static double dFld = 1.31315;

    public static boolean bFld = false;

    public long lFld = 1142449301L;

    public byte byFld = 119;

    public static float fFld = 2.51F;

    public static double dArrFld[] = new double[N];

    public int iArrFld[] = new int[N];

    public static float fArrFld[] = new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 90.40995);
        FuzzerUtils.init(Test.fArrFld, -96.801F);
    }

    public static long dMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {
        float f1 = 1.376F;
        float fArr[] = new float[N];
        int i2 = -4;
        int i3 = 246;
        int i4 = 8;
        int i5 = 0;
        int i6 = 60886;
        int iArr1[] = new int[N];
        byte by = -81;
        short s1 = -18152;
        short sArr[] = new short[N];
        FuzzerUtils.init(sArr, ((short) (11999)));
        FuzzerUtils.init(iArr1, 225);
        FuzzerUtils.init(fArr, 2.9F);
        f1 += Test.iFld;
        for (i2 = 4; i2 < 124; i2++) {
            sArr[i2] = ((short) (Test.iFld));
            for (i4 = 1; i4 < 5; i4++) {
                i6 = 1;
                do {
                    Test.instanceCount = 8;
                    i5 = ((int) (-171L));
                    if (Test.bFld) {
                        iArr1[i2] = ((int) (Test.instanceCount));
                        i3 += i6;
                        i5 += ((i6 * i2) + Test.instanceCount) - i3;
                        by += ((byte) (Test.instanceCount));
                        Test.iFld = ((int) (Test.instanceCount));
                        i3 = ((int) (Test.instanceCount));
                        i5 += i6;
                        i3 += i4;
                        Test.instanceCount >>= i3;
                        Test.dFld -= i6;
                        Test.iFld *= ((int) (f1));
                        Test.dFld -= i5;
                    }
                    if (Test.bFld)
                        break;

                    i3 = ((int) (f1));
                    Test.dFld = i3;
                    i3 += i4;
                } while ((++i6) < 2 );
                i3 >>>= i6;
                Test.dArrFld[i2 + 1] -= s1;
                Test.dFld *= Test.instanceCount;
                i5 >>= Test.iFld;
                fArr = fArr;
                Test.iFld = i4;
                Test.iFld += i2;
                Test.iFld += i2;
                i3 += ((int) (-2.28372));
                Test.bFld = Test.bFld;
                i3 += i4;
            }
            if (i5 != 0) {
            }
            iArr1 = iArr1;
        }
        long meth_res = (((((((((Float.floatToIntBits(f1) + i2) + i3) + i4) + i5) + i6) + by) + s1) + FuzzerUtils.checkSum(sArr)) + FuzzerUtils.checkSum(iArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public int iMeth(long l, int i1) {
        int i7 = 1;
        int i8 = -2;
        int i9 = 62043;
        int i10 = 10;
        int i11 = -54;
        int i12 = 9;
        float f2 = -9.69F;
        float fArr1[] = new float[N];
        short s2 = -18964;
        FuzzerUtils.init(fArr1, 0.959F);
        Test.iFld = ++i1;
        iMeth1();
        Test.iFld = i1;
        Test.iFld |= Test.iFld;
        Test.bFld = Test.bFld;
        for (i7 = 1; 183 > i7; ++i7) {
            fArr1[i7 + 1] += f2;
            i1 = i8;
            for (i9 = 1; i9 < 3; i9++) {
                Test.iFld = 35509;
                i1 += ((i9 * lFld) + f2) - byFld;
                iArrFld[i9 + 1] = Test.iFld;
                lFld += i9 | lFld;
                if (Test.bFld)
                    continue;

                i11 = 1;
                while ((++i11) < 2) {
                    i1 += i11;
                    iArrFld = iArrFld;
                    Test.iFld += i11;
                    i8 += i11 * i11;
                    iArrFld[i11 + 1] = Test.iFld;
                    i8 = ((int) (1.22467));
                    i8 |= -232;
                }
                i1 += 28798;
                i12 = 1;
                do {
                    f2 -= Test.iFld;
                    i10 -= s2;
                    i8 += i9;
                    iArrFld[i9 - 1] += i8;
                    lFld = i11;
                    if (true)
                        continue;

                    if (Test.bFld) {
                        l <<= i7;
                        lFld -= i9;
                        i8 >>>= ((int) (-3L));
                        i1 += 0 + (i12 * i12);
                        i1 += -15909;
                        i8 = s2;
                    }
                } while ((++i12) < 2 );
            }
        }
        long meth_res = (((((((((l + i1) + i7) + i8) + Float.floatToIntBits(f2)) + i9) + i10) + i11) + i12) + s2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return ((int) (meth_res));
    }

    public double dMeth(short s, float f, int i) {
        if (Test.ax$0) {
            CountDownLatch ax$1 = null;
            Test.AxOutputRedirectionHelper.redirect();
            try {
                try {
                    ax$1.await();
                } catch (InterruptedException ax$2) {
                }
            } catch (Throwable ax$3) {
            } finally {
            }
            Test.AxOutputRedirectionHelper.recover();
            return 0.15794843707882722;
        }
        int i13 = 5;
        int i14 = 38224;
        int i15 = -109;
        int i16 = -221;
        int i17 = 100;
        int i18 = -10;
        int iArr[] = new int[N];
        double d = -121.105199;
        double dArr[] = new double[N];
        long lArr[] = new long[N];
        FuzzerUtils.init(iArr, 1682);
        FuzzerUtils.init(lArr, 3201984085L);
        FuzzerUtils.init(dArr, -2.104098);
        s >>= ((short) ((iArr[(Test.iFld >>> 1) % N] = iMeth(lFld, Test.iFld)) + Test.iFld));
        i = i;
        i = ((int) (Test.dFld));
        lFld = ((long) (-2.286F));
        Test.instanceCount = i;
        for (i13 = 3; i13 < 217; ++i13) {
            i15 = 1;
            do {
                i = -26719;
                switch ((i13 % 6) + 104) {
                    case 104 :
                        lFld *= ((long) (Test.dFld));
                        Test.instanceCount <<= Test.iFld;
                    case 105 :
                    case 106 :
                        for (d = 1; d < 1; ++d) {
                            i16 >>= ((int) (-8941244680348488207L));
                            if (Test.bFld)
                                continue;

                            f += ((float) (d * i15));
                            Test.iFld += i13;
                            i -= i16;
                            i16 += i;
                            Test.iFld += ((int) (d * i14));
                        }
                        Test.instanceCount *= 43573;
                        iArr[i15 - 1] = i13;
                        break;
                    case 107 :
                        for (i17 = 1; i17 < 1; i17++) {
                            s -= ((short) (i17));
                            Test.instanceCount = i17;
                            Test.fArrFld = Test.fArrFld;
                            lArr[i17 + 1] = Test.instanceCount;
                            i >>= ((int) (lFld));
                            i18 &= ((int) (-1376061507L));
                            Test.dFld += lFld;
                            f = i16;
                            iArr[i13] = i14;
                            i18 %= ((int) (i17 | 1));
                            i14 >>= i13;
                            Test.bFld = true;
                            i = ((int) (-3240470457L));
                            Test.dFld *= 11;
                            i14 += i18;
                        }
                    case 108 :
                        dArr[i15 - 1] = -17;
                        break;
                    case 109 :
                        iArrFld[i15 - 1] = -10;
                        break;
                    default :
                        i16 %= ((int) (Test.instanceCount | 1));
                }
            } while ((++i15) < 3 );
        }
        long meth_res = (((((((((((s + Float.floatToIntBits(f)) + i) + i13) + i14) + i15) + Double.doubleToLongBits(d)) + i16) + i17) + i18) + FuzzerUtils.checkSum(iArr)) + FuzzerUtils.checkSum(lArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return ((double) (meth_res));
    }

    public void mainTest(String[] strArr1) {
        {
            try {
                float[] ax$16 = new float[10];
                float[] ax$17 = new float[]{ 0.034088075F, 0.71140397F, 0.532373F, 0.41502523F };
                for (int ax$15 = -149; ax$15 < (-149 + 17583); ax$15 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        int ax$18 = 0;
                        for (; ax$18 < (ax$17.length - 4); ax$18 += 4) {
                            ax$17[ax$18 + 0] = ax$16[ax$18 + 0] / 1.0F;
                            ax$17[ax$18 + 1] = ax$16[ax$18 + 1] / 2.0F;
                            ax$17[ax$18 + 2] = ax$16[ax$18 + 2] / 3.0F;
                            ax$17[ax$18 + 3] = ax$16[ax$18 + 3] / 4.0F;
                        }
                        for (; ax$18 < ax$17.length; ax$18++) {
                            ax$17[ax$18] = ax$16[ax$18] / ((float) ((ax$18 & 3) + 1));
                        }
                    } catch (Throwable ax$19) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
            }
        }
        int i19 = -1;
        int i20 = -21441;
        int i21 = -114;
        int i22 = 124;
        int i23 = 2;
        int i24 = 203;
        int i25 = 28559;
        int i26 = 0;
        int i27 = 2;
        int i28 = -85;
        float f3 = 105.173F;
        float fArr2[] = new float[N];
        short s3 = 7195;
        long lArr1[] = new long[N];
        FuzzerUtils.init(lArr1, -6128375658921653268L);
        FuzzerUtils.init(fArr2, -17.63F);
        Test.instanceCount -= Test.instanceCount;
        Test.iFld -= ((int) (Test.instanceCount++));
        {
            final int ax$14 = i20;
            try {
                StackTraceElement ax$5 = null;
                int[] ax$8 = new int[20];
                int[] ax$9 = new int[]{ -443572534, -780033094, 17552610, 1012588608, 2028853545, 1485332695, -1015403603 };
                for (int ax$4 = -368; ax$4 < (-368 + 17703); ax$4 += 1) {
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        if (ax$5.isNativeMethod());
                    } catch (Throwable ax$6) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                    Test.ax$0 = true;
                    dMeth(((short) (-25560)), 0.5986396F, 570363394);
                    Test.ax$0 = false;
                    Test.AxOutputRedirectionHelper.redirect();
                    try {
                        for (int ax$10 = 0; ax$10 < 16; ax$10++) {
                            for (int ax$11 = 0; ax$11 < 16; ax$11++) {
                                for (int ax$12 = 0; ax$12 < 128; ax$12++) {
                                    ax$9[i20]++;
                                    ax$8[ax$12] = ax$8[ax$12] + 1;
                                }
                            }
                        }
                    } catch (Throwable ax$13) {
                    } finally {
                    }
                    Test.AxOutputRedirectionHelper.recover();
                }
            } finally {
                i20 = ax$14;
            }
        }
        Test.dArrFld[(Test.iFld >>> 1) % N] -= 5129223275374797187L + (dMeth(((short) (-30444)), Test.fFld, Test.iFld) * Test.iFld);
        for (i19 = 12; i19 < 239; i19++) {
            lArr1[i19 - 1] = Test.instanceCount;
            i20 >>>= i20;
            i20 = i19;
            for (i21 = 1; i21 < 23; ++i21) {
                if (Test.bFld)
                    continue;

                Test.iFld >>= Test.iFld;
                lArr1[i19] -= Test.instanceCount;
                i22 = i20;
                try {
                    i20 = i20 / i19;
                    Test.iFld = (-47933) / iArrFld[i21 + 1];
                    i20 = (-2106200006) / iArrFld[i19 + 1];
                } catch (ArithmeticException a_e) {
                }
            }
            for (i23 = 1; i23 < 23; ++i23) {
                Test.instanceCount += ((i23 * i22) + i21) - Test.fFld;
                lArr1[i19] += 72;
                fArr2[(i19 >>> 1) % N] = 0;
                lFld -= Test.iFld;
                for (i25 = 1; i25 < 2; ++i25) {
                    i27 = i21;
                    Test.fArrFld = fArr2;
                    i20 += i25 * i25;
                    byFld = ((byte) (i25));
                    Test.iFld |= -200;
                    switch (((i25 >>> 1) % 4) + 19) {
                        case 19 :
                            i20 += i25;
                            i20 += i25 - i23;
                            Test.iFld -= 4;
                            i27 -= i24;
                            break;
                        case 20 :
                            i24 = i26;
                            i20 *= -16;
                            i24 *= i20;
                            Test.fFld -= lFld;
                            break;
                        case 21 :
                            i22 = ((int) (lFld));
                            try {
                                i24 = iArrFld[i23 + 1] / 26099;
                                iArrFld[i25 - 1] = iArrFld[i19 - 1] / i25;
                                i20 = i23 / i22;
                            } catch (ArithmeticException a_e) {
                            }
                            Test.iFld += i25;
                            Test.instanceCount <<= Test.iFld;
                            lFld *= -58444;
                            i26 = i21;
                            i24 += ((int) (Test.fFld));
                            i27 = 37291;
                            i22 += 28;
                            i22 += ((i25 * Test.instanceCount) + i27) - i25;
                            iArrFld[i19 - 1] = i19;
                            Test.instanceCount += ((i25 * i27) + i21) - i22;
                            iArrFld[i19 - 1] = i22;
                            i27 = i26;
                            Test.instanceCount += i25 * i20;
                        case 22 :
                            if (Test.bFld)
                                break;

                            Test.fFld *= lFld;
                            Test.dFld += Test.fFld;
                            i27 += ((int) (-142L));
                            iArrFld[i19 - 1] = ((int) (874137819308730335L));
                            i24 += i25 * Test.fFld;
                            break;
                    }
                    lFld += ((long) (104.120261));
                }
                i20 = 0;
                i26 <<= i27;
                Test.iFld = i25;
                Test.iFld = ((int) (lFld));
                i20 = -42338;
                Test.fFld += i23;
            }
            i24 += ((i19 * Test.instanceCount) + Test.fFld) - i27;
            f3 = 23;
            while ((f3 -= 3) > 0) {
                Test.fFld += s3;
                i27 += (-8) + (f3 * f3);
                i24 += ((int) (f3 * f3));
                i28 = 1;
                while ((++i28) < 3) {
                    i22 -= ((int) (Test.instanceCount));
                    Test.fArrFld[i28] = i28;
                    Test.dFld += Test.fFld;
                    Test.bFld = Test.bFld;
                    if (false)
                        continue;

                }
                i24 ^= ((int) (Test.instanceCount));
                iArrFld[i19 + 1] <<= i20;
                i27 += ((int) (f3 * f3));
            }
        }
        FuzzerUtils.out.println((((("i19 i20 i21 = " + i19) + ",") + i20) + ",") + i21);
        FuzzerUtils.out.println((((("i22 i23 i24 = " + i22) + ",") + i23) + ",") + i24);
        FuzzerUtils.out.println((((("i25 i26 i27 = " + i25) + ",") + i26) + ",") + i27);
        FuzzerUtils.out.println((((("f3 s3 i28 = " + Float.floatToIntBits(f3)) + ",") + s3) + ",") + i28);
        FuzzerUtils.out.println((("lArr1 fArr2 = " + FuzzerUtils.checkSum(lArr1)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));
        FuzzerUtils.out.println((((("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount) + ",") + Test.iFld) + ",") + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println((((("Test.bFld lFld byFld = " + (Test.bFld ? 1 : 0)) + ",") + lFld) + ",") + byFld);
        FuzzerUtils.out.println((((("Test.fFld Test.dArrFld iArrFld = " + Float.floatToIntBits(Test.fFld)) + ",") + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld))) + ",") + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    static Boolean ax$0 = false;

    public static final class AxOutputRedirectionHelper {
        private static final PrintStream devNull = new PrintStream(new OutputStream() {
            @Override
            public void write(int i) throws IOException {
            }
        });

        private static final PrintStream stdOutBk = System.out;

        private static final PrintStream stdErrBk = System.err;

        public static void redirect() {
            System.setOut(AxOutputRedirectionHelper.devNull);
            System.setErr(AxOutputRedirectionHelper.devNull);
        }

        public static void recover() {
            System.setOut(AxOutputRedirectionHelper.stdOutBk);
            System.setErr(AxOutputRedirectionHelper.stdErrBk);
        }
    }
}