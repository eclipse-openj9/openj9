// Generated by Java* Fuzzer test generator (1.0.001) and Artemis program mutator.

import java.math.BigDecimal;

public class Test {

    public static final int N = 256;

    public static volatile long instanceCount = 189L;

    public static int iFld = -3;

    public static float fFld = -2.907F;

    public static boolean bFld = true;

    public volatile int[] iArrFld = new int[N];

    public static volatile byte[][] byArrFld = new byte[N][N];

    public long[] lArrFld = new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte) 110);
    }

    public static long fMeth_check_sum = 0;

    public static long iMeth_check_sum = 0;

    public static long dMeth_check_sum = 0;

    public static long vMeth_check_sum = 0;

    public static long iMeth1_check_sum = 0;

    public static float fMeth(boolean b, float f) {
        if (ax$12) {
            int ax$14 = iFld;
            try {
                iFld++;
                try {
                    for (int ax$13 = 0; ax$13 < 10; ax$13++) (new byte[((byte) -1 << ax$13)])[0] = 0;
                } catch (Exception e) {
                }
            } catch (Throwable ax$15) {
            } finally {
                iFld = ax$14;
            }
            return (float) 0.2851815945341778;
        }
        int i = -34522;
        byte by = 30;
        i >>>= i;
        f %= ((by--) | 1);
        long meth_res = (b ? 1 : 0) + Float.floatToIntBits(f) + i + by;
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public static double dMeth() {
        if (ax$21) {
            int ax$24 = iFld;
            try {
                java.lang.String ax$23 = "9.184299380979178E-33";
                try {
                    BigDecimal ax$22 = new BigDecimal(ax$23);
                    long longValueExact = ax$22.longValueExact();
                    iFld++;
                } catch (ArithmeticException e) {
                    // Success;
                }
            } catch (Throwable ax$25) {
            } finally {
                iFld = ax$24;
            }
            return 0.16668854522655774;
        }
        Test.iFld -= (Test.iFld--);
        long meth_res = 0;
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public static void vMeth(int i7, int i8, long l) {
        float f2 = 0.643F;
        int i9 = 222;
        double[] dArr = new double[N];
        FuzzerUtils.init(dArr, 0.111572);
        i7 |= ((--Test.iFld) * (++i8));
        f2 = (float) (378536L + ((l--) - dArr[(i9 >>> 1) % N]));
        l = ((--i8) + i8);
        vMeth_check_sum += i7 + i8 + l + Float.floatToIntBits(f2) + i9 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth1(int i10) {
        if (ax$31) {
            int ax$35 = i10;
            try {
                byte[] ax$34 = new byte[5];
                byte[] ax$32 = new byte[5];
                byte[] ax$33 = new byte[10];
                ax$33[i10] = (byte) (((ax$34[i10] & 0xff) + (ax$32[i10] & 0xff)) >> 1);
            } catch (Throwable ax$36) {
            } finally {
                i10 = ax$35;
            }
            return 432313705;
        }
        boolean b2 = true;
        vMeth(28168, Test.iFld, 23832L);
        b2 = b2;
        long meth_res = i10 + (b2 ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(boolean b1) {
        int i3 = -4237, i4 = -26153, i5 = 120, i6 = -34121, i11 = -11, i12 = -20, i13 = 64857, i14 = 70, i15 = 12, i16 = 16264, iArr[] = new int[N];
        double d = 123.122724, dArr1[] = new double[N];
        short s = 9392;
        byte by1 = 23;
        long[] lArr = new long[N];
        FuzzerUtils.init(iArr, 1277);
        FuzzerUtils.init(lArr, 2272383589L);
        FuzzerUtils.init(dArr1, -2.4783);
        Test.iFld = (int) dMeth();
        Test.instanceCount += (Integer.reverseBytes(Test.iFld = Test.iFld) - -8787);
        for (i3 = 4; i3 < 190; i3++) {
            for (i5 = 1; i5 < 3; i5++) {
                vMeth(i6, (int) (((d + i6) * i3) / ((i3 + Math.max(Test.instanceCount, Test.instanceCount)) | 1)), (long) (i3 + (Test.instanceCount - (d++))));
                iArr = (iArr = (iArr = (iArr = iArr)));
                Test.instanceCount = (-(lArr[i5 + 1] <<= (i3 - i6)));
                Test.instanceCount = Integer.reverseBytes(++Test.iFld);
                i4 = iMeth1(i5);
                Test.iFld += i3;
                d = 64.513F;
                dArr1[i5] -= Test.instanceCount;
                b1 = b1;
                i6 |= i6;
                Test.byArrFld = Test.byArrFld;
                for (i11 = 1; i11 < 2; ++i11) {
                    Test.fFld *= -11;
                    i12 = -55979;
                    {
                        java.io.PrintStream ax$0 = System.out;
                        java.io.PrintStream ax$1 = System.err;
                        java.io.PrintStream ax$2 = new java.io.PrintStream(new java.io.OutputStream() {

                            @Override
                            public void write(int b) throws java.io.IOException {
                                // DO NOTHING: DISCARD ALL OUTPUTS
                            }
                        });
                        System.setOut(ax$2);
                        System.setErr(ax$2);
                        {
                            boolean ax$4 = false;
                            for (int ax$3 = -4592; ax$3 < 1347; ax$3 += 1) {
                                if (!ax$4) {
                                    ax$4 = true;
                                    {
                                        System.setOut(ax$0);
                                        System.setErr(ax$1);
                                        try {
                                            i6 = (Test.iFld % i5);
                                            i13 = (22916 / i3);
                                            Test.iFld = (i11 / 22);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        System.setOut(ax$2);
                                        System.setErr(ax$2);
                                    }
                                }
                            }
                        }
                        System.setOut(ax$0);
                        System.setErr(ax$1);
                    }
                    s = (short) Test.iFld;
                    i12 += i4;
                    i13 = 206;
                    iArr[i3] -= i12;
                    Test.iFld += (i11 + i11);
                    Test.instanceCount += (i11 - i14);
                    i14 -= i6;
                    if (b1)
                        continue;
                    b1 = b1;
                    i14 += i11;
                }
                i4 += (((i5 * Test.instanceCount) + by1) - i3);
                Test.instanceCount = i4;
                if (b1)
                    continue;
            }
            Test.instanceCount *= Test.instanceCount;
            for (i15 = 1; i15 < 3; ++i15) {
                i6 = Test.iFld;
            }
            b1 = b1;
            iArr[i3] += i4;
        }
        long meth_res = (b1 ? 1 : 0) + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + i11 + i12 + i13 + s + i14 + by1 + i15 + i16 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {
        int i1 = -42937, i2 = 7, i17 = 0, i18 = 48074, i19 = 72, i20 = -39386, i21 = 8, i22 = 9, i23 = 42025, i24 = 24055, i25 = 25335, i26 = -3, iArr1[][] = new int[N][N];
        float f1 = 13.724F, f3 = 110.44F, fArr[] = new float[N];
        double d1 = 1.44726, d2 = 2.85857, dArr2[] = new double[N];
        long l1 = -11L, l2 = 2975053753679320934L;
        byte by2 = -20;
        short s1 = -14105, sArr[] = new short[N];
        FuzzerUtils.init(iArr1, 146);
        FuzzerUtils.init(dArr2, -2.8143);
        FuzzerUtils.init(fArr, 75.763F);
        FuzzerUtils.init(sArr, (short) 23055);
        Test.instanceCount = (long) (fMeth(111 != (i1 + f1), f1--) * Math.min(--i1, i1));
        i2 = 1;
        do {
            iArrFld[i2] = (int) (Test.instanceCount++);
            i1 &= (int) ((long) ((f1 - i1) + (Test.instanceCount--)) & iMeth(Test.bFld));
            d1 = 1;
            while (++d1 < 43) {
                for (i17 = 1; i17 < 1; ++i17) {
                    i18 = (int) 51235L;
                    Test.iFld -= (int) Test.fFld;
                    Test.instanceCount = Test.instanceCount;
                    iArrFld = iArrFld;
                    i18 += i1;
                    Test.iFld -= (int) f1;
                    Test.instanceCount <<= -13L;
                }
                iArrFld[i2 + 1] = (int) f1;
                for (f3 = 1; f3 < 1; f3++) {
                    Test.instanceCount = i2;
                    iArrFld[(int) (d1 + 1)] = i2;
                    if (Test.bFld) {
                        iArr1 = FuzzerUtils.int2array(N, (int) -45161);
                        Test.fFld -= Test.fFld;
                        i18 *= (int) Test.fFld;
                        i18 += (int) Test.instanceCount;
                        i18 = (int) Test.instanceCount;
                        d2 = f1;
                    } else if (false) {
                        i19 = 152;
                    } else {
                        d2 = f3;
                        i18 += Test.iFld;
                        if (Test.bFld)
                            continue;
                        if (Test.bFld)
                            continue;
                        iArrFld[(int) (d1 - 1)] -= i18;
                        Test.instanceCount = i17;
                        i18 += (int) f3;
                        l1 >>>= i18;
                        Test.iFld += i17;
                        dArr2[(int) (d1 - 1)] -= i2;
                        i1 += (int) 45.3F;
                        Test.iFld = by2;
                        i1 = Test.iFld;
                    }
                    fArr[(int) (d1 - 1)] -= 112;
                    i18 = (int) -397848129L;
                    Test.iFld >>= 17185;
                    i1 = i19;
                }
                d2 -= i18;
                Test.byArrFld[(int) (d1)][i2 + 1] <<= (byte) i18;
                d2 -= d1;
                for (i20 = 1; i20 < 1; i20++) {
                    if (true)
                        break;
                }
                Test.instanceCount <<= i18;
                Test.iFld += (int) (((d1 * i19) + i17) - Test.instanceCount);
                i19 <<= i1;
                lArrFld[(int) (d1)] = i1;
                s1 -= (short) i21;
            }
            i19 = i20;
            Test.iFld = i18;
            lArrFld[i2 - 1] += (long) 1.83056;
            s1 *= (short) i21;
            i19 <<= (int) Test.instanceCount;
            for (l2 = i2; l2 < 43; ++l2) {
                i18 = Test.iFld;
                i22 += (int) (((l2 * Test.instanceCount) + f3) - Test.iFld);
                i19 = i19;
                lArrFld[i2] += 0;
                fArr[(i20 >>> 1) % N] += i17;
                iArr1[i2 + 1][i2] += (int) l2;
                sArr[(int) (l2 - 1)] = (short) i2;
                i18 = by2;
                i18 <<= i20;
                for (i23 = (int) (l2); i23 < 1; i23++) {
                    i18 += i23;
                    i24 += (int) Test.instanceCount;
                }
                for (i25 = i2; 1 > i25; ++i25) {
                    dArr2[(int) (l2 + 1)] = i25;
                    try {
                        i1 = (i21 / 180);
                        Test.iFld = (iArrFld[i25] % -19785);
                        iArrFld[(int) (l2 + 1)] = (iArrFld[i25 + 1] / Test.iFld);
                    } catch (ArithmeticException a_e) {
                    }
                }
            }
            iArr1[i2][i2] *= (int) l1;
            Test.iFld += (i2 ^ l2);
        } while (++i2 < 117);
        FuzzerUtils.out.println("i1 f1 i2 = " + i1 + "," + Float.floatToIntBits(f1) + "," + i2);
        FuzzerUtils.out.println("d1 i17 i18 = " + Double.doubleToLongBits(d1) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("f3 i19 d2 = " + Float.floatToIntBits(f3) + "," + i19 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("l1 by2 i20 = " + l1 + "," + by2 + "," + i20);
        FuzzerUtils.out.println("i21 s1 l2 = " + i21 + "," + s1 + "," + l2);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 iArr1 = " + i25 + "," + i26 + "," + FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("dArr2 fArr sArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld iArrFld Test.byArrFld = " + (Test.bFld ? 1 : 0) + "," + FuzzerUtils.checkSum(iArrFld) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }

    public static void main(String[] strArr) {
        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
            {
                java.io.PrintStream ax$9 = System.out;
                java.io.PrintStream ax$10 = System.err;
                java.io.PrintStream ax$11 = new java.io.PrintStream(new java.io.OutputStream() {

                    @Override
                    public void write(int b) throws java.io.IOException {
                        // DO NOTHING: DISCARD ALL OUTPUTS
                    }
                });
                System.setOut(ax$11);
                System.setErr(ax$11);
                try {
                    for (int ax$7 = -3777; ax$7 < 5388; ax$7 += 1) {
                        try {
                            // Run long enough to trigger an OSR
                            for (int ax$5 = 200000; ax$5 != 0; ax$5--) {
                            }
                        } catch (Throwable ax$6) {
                        } finally {
                        }
                    }
                } catch (Throwable ax$8) {
                }
                System.setOut(ax$9);
                System.setErr(ax$10);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    private static Boolean ax$12 = false;

    private static Boolean ax$21 = false;

    private static Boolean ax$31 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG  Test ->  Test
// DEBUG  main ->  main
// DEBUG  mainTest ->  mainTest
// DEBUG  fMeth ->  fMeth mainTest
// DEBUG  iMeth ->  iMeth mainTest
// DEBUG  dMeth ->  dMeth iMeth mainTest
// DEBUG  vMeth ->  vMeth iMeth mainTest iMeth1
// DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
// DEBUG  Depth = 3
// DEBUG  Classes = 1
// DEBUG  static objects = {}
