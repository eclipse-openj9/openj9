<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (c) 2016, 2018 IBM Corp. and others

  This program and the accompanying materials are made available under
  the terms of the Eclipse Public License 2.0 which accompanies this
  distribution and is available at https://www.eclipse.org/legal/epl-2.0/
  or the Apache License, Version 2.0 which accompanies this distribution and
  is available at https://www.apache.org/licenses/LICENSE-2.0.

  This Source Code may also be made available under the following
  Secondary Licenses when the conditions for such availability set
  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
  General Public License, version 2 with the GNU Classpath
  Exception [1] and GNU General Public License, version 2 with the
  OpenJDK Assembly Exception [2].

  [1] https://www.gnu.org/software/classpath/license.html
  [2] http://openjdk.java.net/legal/assembly-exception.html

  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->

<playlist xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../TestConfig/playlist.xsd">
	<test>
		<testCaseName>generalSanityTest_SE80</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames generalTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<subsets>
			<subset>SE80</subset>
		</subsets>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
	</test>

	<test>
		<testCaseName>generalSanityTest</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames generalTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
	</test>

	<test>
		<testCaseName>generalExtendedTest</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames generalTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>regressionFastresolve_mode110</testCaseName>
		<variations>
			<variation> Mode110 -Xfastresolve0</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) -Xss1536k \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames regression \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
	</test>

	<test>
		<testCaseName>regressionFastresolve_mode150</testCaseName>
		<variations>
			<variation>Mode150 -Xfastresolve0</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) -Xss1536k \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames regression \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
	</test>

	<test>
		<testCaseName>regressionBucketDefault</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode150</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(LIB_DIR)$(D)asm-all.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames regression \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>jsr335_interfacePrivateMethod_mode100</testCaseName>
		<variations>
			<variation>Mode100</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(LIB_DIR)$(D)asm-all.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames jsr335InterfacePrivateMethod \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
	</test>

	<!-- Attach API tests -->
	<test>
		<testCaseName>AttachAPISanity_SE80</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(JDK_HOME)$(D)lib$(D)tools.jar$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	-Dcom.ibm.tools.attach.enable=yes \
	-Dcom.ibm.tools.attach.timeout=15000 \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames AttachAPISanity \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>AttachAPISanity</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	--add-exports=java.base/com.ibm.tools.attach.target=ALL-UNNAMED \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	-Dcom.ibm.tools.attach.enable=yes \
	-Djdk.attach.allowAttachSelf=true \
	-Dcom.ibm.tools.attach.timeout=15000 \
	-Djava.sidecar="--add-exports=java.base/com.ibm.tools.attach.target=ALL-UNNAMED" \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames AttachAPISanity \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>TestAttachAPI_SE80</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(JDK_HOME)$(D)lib$(D)tools.jar$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	-Dcom.ibm.tools.attach.enable=yes \
	-Dcom.ibm.tools.attach.timeout=15000 \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames TestAttachAPI \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>TestAttachAPI</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	--add-exports=java.base/com.ibm.tools.attach.target=ALL-UNNAMED \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	-Djava.sidecar="--add-exports=java.base/com.ibm.tools.attach.target=ALL-UNNAMED" \
	-Dcom.ibm.tools.attach.enable=yes \
	-Dcom.ibm.tools.attach.timeout=15000 \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames TestAttachAPI \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>TestAttachAPIEnabling_SE80</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(JDK_HOME)$(D)lib$(D)tools.jar$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames TestAttachAPIEnabling \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>TestAttachAPIEnabling</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	--add-exports=java.base/com.ibm.tools.attach.target=ALL-UNNAMED \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	-Dcom.ibm.tools.attach.enable=yes \
	-Djdk.attach.allowAttachSelf=true \
	-Dcom.ibm.tools.attach.timeout=15000 \
	-Djava.sidecar="--add-exports=java.base/com.ibm.tools.attach.target=ALL-UNNAMED" \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames TestAttachAPIEnabling \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>TestAttachErrorHandling_SE80</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(JDK_HOME)$(D)lib$(D)tools.jar$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	-Dcom.ibm.tools.attach.enable=yes \
	-Dcom.ibm.tools.attach.timeout=15000 \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames TestAttachErrorHandling \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>TestAttachErrorHandling</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	--add-exports=java.base/com.ibm.tools.attach.target=ALL-UNNAMED \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	-Dcom.ibm.tools.attach.enable=yes \
	-Dcom.ibm.tools.attach.timeout=15000 \
	-Djava.sidecar="--add-exports=java.base/com.ibm.tools.attach.target=ALL-UNNAMED" \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames TestAttachErrorHandling \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>TestSunAttachClasses_SE80</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(JDK_HOME)$(D)lib$(D)tools.jar$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	-Dcom.ibm.tools.attach.enable=yes \
	-Dcom.ibm.tools.attach.timeout=15000 \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames TestSunAttachClasses \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>TestSunAttachClasses</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	--add-exports=java.base/com.ibm.tools.attach.target=ALL-UNNAMED \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	-Dcom.ibm.tools.attach.enable=yes \
	-Dcom.ibm.tools.attach.timeout=15000 \
	-Djdk.attach.allowAttachSelf=true \
	-Djava.sidecar="--add-exports=java.base/com.ibm.tools.attach.target=ALL-UNNAMED" \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames TestSunAttachClasses \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>TestManagementAgent_SE80</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(JDK_HOME)$(D)lib$(D)tools.jar$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	-Dcom.ibm.tools.attach.enable=yes \
	-Dcom.ibm.tools.attach.timeout=15000 \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames TestManagementAgent \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>TestManagementAgent</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	--add-exports=java.base/com.ibm.tools.attach.target=ALL-UNNAMED \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	-Dcom.ibm.tools.attach.enable=yes \
	-Dcom.ibm.tools.attach.timeout=15000 \
	-Djava.sidecar="--add-exports=java.base/com.ibm.tools.attach.target=ALL-UNNAMED" \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames TestManagementAgent \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>
	<!-- Attach API tests -->

	<test>
		<testCaseName>TestFileLocking_SE80</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	-Dcom.ibm.tools.attach.enable=no \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames TestFileLocking \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>TestFileLocking</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	--add-exports=java.base/com.ibm.tools.attach.target=ALL-UNNAMED \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	-Dcom.ibm.tools.attach.enable=no \
	-Djava.sidecar="--add-exports=java.base/com.ibm.tools.attach.target=ALL-UNNAMED" \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames TestFileLocking \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>gcNotificationTest_GenCon</testCaseName>
		<variations>
			<variation>-Xgcpolicy:gencon -Xmx512m</variation>
			<variation>-Xgcpolicy:gencon -XX:+HeapManagementMXBeanCompatibility -Xmx512m</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames gcNotificationTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>gcNotificationTest_Optthruput</testCaseName>
		<variations>
			<variation>-Xgcpolicy:optthruput -Xmx512m</variation>
			<variation>-Xgcpolicy:optthruput -XX:+HeapManagementMXBeanCompatibility -Xmx512m</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames gcNotificationTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>gcNotificationTest_OptAvgpause</testCaseName>
		<variations>
			<variation>-Xgcpolicy:optavgpause -Xmx512m</variation>
			<variation>-Xgcpolicy:optavgpause -XX:+HeapManagementMXBeanCompatibility -Xmx512m</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames gcNotificationTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>gcNotificationTest_Balanced</testCaseName>
		<variations>
			<variation>Mode551 -Xmx512m</variation>
			<variation>Mode551 -XX:+HeapManagementMXBeanCompatibility -Xmx512m</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames gcNotificationTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>gcNotificationTest_Metronome</testCaseName>
		<variations>
			<variation>Mode351 -Xmx512m</variation>
			<variation>Mode351 -XX:+HeapManagementMXBeanCompatibility -Xmx512m</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames gcNotificationTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>ContendedFieldsTests_80</testCaseName>
		<variations>
			<variation></variation>
			<variation>-XX:-RestrictContended</variation>
			<variation>-XX:+RestrictContended</variation>
			<variation>-XX:-EnableContended</variation>
		</variations>
		<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) $(JAVA_COMMAND) $(JVM_OPTIONS) \
		-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(JVM_TEST_ROOT)$(D)InstrumentationAgent$(D)instrumentation.jar$(Q) \
		-javaagent:$(Q)$(JVM_TEST_ROOT)$(D)functional$(D)InstrumentationAgent$(D)instrumentation.jar$(Q) \
		org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
		-testnames ContendedFieldsTests \
		-groups $(TEST_GROUP) \
		-excludegroups $(DEFAULT_EXCLUDE); \
		$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>ContendedFieldsTests_90</testCaseName>
		<variations>
			<variation></variation>
			<variation>-XX:-RestrictContended</variation>
			<variation>-XX:+RestrictContended</variation>
			<variation>-XX:-EnableContended</variation>
		</variations>
		<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) $(JAVA_COMMAND) $(JVM_OPTIONS) \
		--add-exports=java.base/com.ibm.oti.vm=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.math=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.ref=ALL-UNNAMED --add-exports=java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
		-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(JVM_TEST_ROOT)$(D)InstrumentationAgent$(D)instrumentation.jar$(Q) \
		 -javaagent:$(Q)$(JVM_TEST_ROOT)$(D)functional$(D)InstrumentationAgent$(D)instrumentation.jar$(Q) \
		org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
		-testnames ContendedFieldsTests \
		-groups $(TEST_GROUP) \
		-excludegroups $(DEFAULT_EXCLUDE); \
		$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>CtorBCVTests</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(LIB_DIR)$(D)asm-all.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames ConstructorVerifierTests \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
	</test>

	<test>
		<testCaseName>JCL_Test</testCaseName>
		<variations>
			<variation>NoOptions</variation>
			<variation>-XX:RecreateClassfileOnload</variation>
		</variations>
		<command>$(MKTREE) $(REPORTDIR); \
	cd $(REPORTDIR); \
	$(JAVA_COMMAND) $(JVM_OPTIONS) -verbose:stacktrace -Djava.security.policy=$(Q)$(TEST_RESROOT)$(D)java.policy$(Q) \
	-Drowset.provider.classname=org.openj9.resources.classloader.CustomSyncProvider \
	--add-modules java.se.ee,openj9.sharedclasses \
	--add-exports java.base/com.ibm.tools.attach.target=ALL-UNNAMED \
	--add-exports java.base/com.ibm.oti.vm=ALL-UNNAMED \
	--add-exports java.base/com.ibm.oti.util=ALL-UNNAMED \
	--add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
	--add-exports java.base/jdk.internal.misc=ALL-UNNAMED \
	--add-exports java.base/com.ibm.jit.crypto=ALL-UNNAMED \
	--add-exports java.base/com.ibm.oti.reflect=ALL-UNNAMED \
	--add-opens=java.base/java.lang=ALL-UNNAMED \
	--add-opens=java.base/java.security=ALL-UNNAMED \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(TEST_RESROOT)$(D)TestResources.jar$(P)$(LIB_DIR)$(D)asm-all.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	JCL_TEST_Test-TypeAnnotation,\
	JCL_TEST_Test-Annotation,\
	JCL_TEST_Test-Annotation-Identity,\
	JCL_TEST_Test-Annotation-ClassLoader,\
	JCL_TEST_Java-Lang_ClassLoader,\
	JCL_TEST_Test-Annotation-Package,\
	JCL_TEST_Test-Defects,\
	JCL_TEST_Test-UnsafeFence,\
	JCL_TEST_IBM-VM,\
	JCL_TEST_Java-Lang,\
	JCL_TEST_Java-Lang-Invoke,\
	JCL_TEST_Java-Lang-Ref,\
	JCL_TEST_Java-Lang-Reflect,\
	JCL_TEST_Java-Math,\
	JCL_TEST_Test-RunLast \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^vm.hrt</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>JCL_Test_OutOfMemoryError</testCaseName>
		<variations>
			<variation>NoOptions</variation>
			<variation>-XX:RecreateClassfileOnload</variation>
		</variations>
		<command>$(MKTREE) $(REPORTDIR); \
	cd $(REPORTDIR); \
	$(JAVA_COMMAND) $(JVM_OPTIONS) -Xdump:none -verbose:stacktrace -Djava.security.policy=$(Q)$(TEST_RESROOT)$(D)java.policy$(Q) \
	-Drowset.provider.classname=org.openj9.resources.classloader.CustomSyncProvider \
	--add-modules java.se.ee,openj9.sharedclasses \
	--add-exports java.base/com.ibm.tools.attach.target=ALL-UNNAMED \
	--add-exports java.base/com.ibm.oti.vm=ALL-UNNAMED \
	--add-exports java.base/com.ibm.oti.util=ALL-UNNAMED \
	--add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
	--add-exports java.base/jdk.internal.misc=ALL-UNNAMED \
	--add-exports java.base/com.ibm.jit.crypto=ALL-UNNAMED \
	--add-exports java.base/com.ibm.oti.reflect=ALL-UNNAMED \
	--add-opens=java.base/java.lang=ALL-UNNAMED \
	--add-opens=java.base/java.security=ALL-UNNAMED \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(TEST_RESROOT)$(D)TestResources.jar$(P)$(LIB_DIR)$(D)asm-all.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	JCL_TEST_Java-Lang_OutOfMemoryError \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^vm.hrt</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>JCL_Test_SE80</testCaseName>
		<variations>
			<variation>NoOptions</variation>
			<variation>-XX:RecreateClassfileOnload</variation>
		</variations>
		<command>$(MKTREE) $(REPORTDIR); \
	cd $(REPORTDIR); \
	$(JAVA_COMMAND) $(JVM_OPTIONS) -verbose:stacktrace -Djava.security.policy=$(Q)$(TEST_RESROOT)$(D)java.policy$(Q) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(TEST_RESROOT)$(D)TestResources.jar$(P)$(LIB_DIR)$(D)asm-all.jar$(Q) \
	-Drowset.provider.classname=org.openj9.resources.classloader.CustomSyncProvider \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	JCL_TEST_Test-TypeAnnotation,\
	JCL_TEST_Test-Annotation,\
	JCL_TEST_Test-Annotation-Identity,\
	JCL_TEST_Test-Annotation-ClassLoader,\
	JCL_TEST_Java-Lang_ClassLoader,\
	JCL_TEST_Test-Annotation-Package,\
	JCL_TEST_Test-Defects,\
	JCL_TEST_Test-UnsafeFence,\
	JCL_TEST_IBM-VM,\
	JCL_TEST_Java-Lang,\
	JCL_TEST_Java-Lang-Invoke,\
	JCL_TEST_Java-Lang-Ref,\
	JCL_TEST_Java-Lang-Reflect,\
	JCL_TEST_Java-Math,\
	JCL_TEST_Test-RunLast \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^vm.hrt</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>JCL_Test_OutOfMemoryError_SE80</testCaseName>
		<variations>
			<variation>NoOptions</variation>
			<variation>-XX:RecreateClassfileOnload</variation>
		</variations>
		<command>$(MKTREE) $(REPORTDIR); \
	cd $(REPORTDIR); \
	$(JAVA_COMMAND) $(JVM_OPTIONS) -Xdump:none -verbose:stacktrace -Djava.security.policy=$(Q)$(TEST_RESROOT)$(D)java.policy$(Q) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(TEST_RESROOT)$(D)TestResources.jar$(P)$(LIB_DIR)$(D)asm-all.jar$(Q) \
	-Drowset.provider.classname=org.openj9.resources.classloader.CustomSyncProvider \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	JCL_TEST_Java-Lang_OutOfMemoryError \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^vm.hrt</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>J9VMInternals_Test</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(MKDIR) -p $(REPORTDIR); \
	cd $(REPORTDIR); \
	$(JAVA_COMMAND) $(JVM_OPTIONS) -verbose:stacktrace \
	-Djava.security.policy=$(Q)$(TEST_RESROOT)$(D)java.policy$(Q) \
	-Xbootclasspath/a:$(TEST_RESROOT)$(D)TestResources.jar \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(TEST_RESROOT)$(D)TestResources.jar$(P)$(LIB_DIR)$(D)asm-all.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames JCL_TEST_Java-Internals \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^vm.hrt</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>J9VMInternals_Test_SE80</testCaseName>
		<variations>
			<variation>NoOptions</variation>
			<variation>-XX:RecreateClassfileOnload</variation>
		</variations>
		<command>$(MKDIR) -p $(REPORTDIR); \
	cd $(REPORTDIR); \
	$(JAVA_COMMAND) $(JVM_OPTIONS) -verbose:stacktrace \
	-Djava.security.policy=$(Q)$(TEST_RESROOT)$(D)java.policy$(Q) \
	-Xbootclasspath/a:$(TEST_RESROOT)$(D)TestResources.jar \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(TEST_RESROOT)$(D)TestResources.jar$(P)$(LIB_DIR)$(D)asm-all.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames  JCL_TEST_Java-Internals \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^vm.hrt</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
		</subsets>
	</test>
<!--
	Java 8 specific test case.
	Java 9 and above require VM options not available in Java 8.
-->
	<test>
		<testCaseName>JCL_TEST_Java-Security_SE80</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(MKTREE) $(REPORTDIR); \
	cd $(REPORTDIR); \
	$(JAVA_COMMAND) $(JVM_OPTIONS) -verbose:stacktrace \
	-Djava.security.policy=$(Q)$(TEST_RESROOT)$(D)testacc.policy$(Q) \
	-Xbootclasspath/a:$(TEST_RESROOT)$(D)TestResources.jar \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(TEST_RESROOT)$(D)TestResources.jar$(P)$(LIB_DIR)$(D)asm-all.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames JCL_TEST_Java-Security \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^vm.hrt</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
		</subsets>
	</test>

<!--
	Java 9 and above.
-->
	<test>
		<testCaseName>JCL_TEST_Java-Security</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(MKTREE) $(REPORTDIR); \
	cd $(REPORTDIR); \
	$(JAVA_COMMAND) $(JVM_OPTIONS) -verbose:stacktrace \
	--add-modules java.se.ee,openj9.sharedclasses \
	--add-exports java.base/com.ibm.tools.attach.target=ALL-UNNAMED \
	--add-exports java.base/com.ibm.oti.vm=ALL-UNNAMED \
	--add-exports java.base/com.ibm.oti.util=ALL-UNNAMED \
	--add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED \
	--add-exports java.base/jdk.internal.misc=ALL-UNNAMED \
	--add-exports java.base/com.ibm.jit.crypto=ALL-UNNAMED \
	--add-exports java.base/com.ibm.oti.reflect=ALL-UNNAMED \
	--add-opens=java.base/java.lang=ALL-UNNAMED \
	--add-opens=java.base/java.security=ALL-UNNAMED \
	-Djava.security.policy=$(Q)$(TEST_RESROOT)$(D)testacc.policy$(Q) \
	-Xbootclasspath/a:$(TEST_RESROOT)$(D)TestResources.jar \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(TEST_RESROOT)$(D)TestResources.jar$(P)$(LIB_DIR)$(D)asm-all.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames JCL_TEST_Java-Security \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^vm.hrt</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>JCL_Test_JIT_Helper_SE80</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-Xbootclasspath/a:$(Q)$(TEST_RESROOT)$(D)TestResources.jar$(Q) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames JCL_TEST_JIT_Helper \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<subsets>
			<subset>SE80</subset>
		</subsets>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
	</test>

	<test>
		<testCaseName>JCL_Test_JIT_Helper</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) --add-exports=java.base/com.ibm.jit=ALL-UNNAMED \
	-Xbootclasspath/a:$(Q)$(TEST_RESROOT)$(D)TestResources.jar$(Q) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames JCL_TEST_JIT_Helper \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
	</test>

	<test>
		<testCaseName>VmArgumentTests</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	-Dcom.ibm.tools.attach.enable=yes \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) -testnames VmArgumentTests \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>threadMXBeanTestSuite1</testCaseName>
		<variations>
			<variation>Mode110 -Xint</variation>
			<variation>Mode301 -Xint</variation>
			<variation>Mode351 -Xint</variation>
			<variation>Mode610 -Xint</variation>
			<variation>Mode110 -Xjit:noJitUntilMain,count=0,optlevel=warm</variation>
			<variation>Mode301 -Xjit:noJitUntilMain,count=0,optlevel=warm</variation>
			<variation>Mode351 -Xjit:noJitUntilMain,count=0,optlevel=warm</variation>
			<variation>Mode610 -Xjit:noJitUntilMain,count=0,optlevel=warm</variation>
		</variations>
		<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) $(JAVA_COMMAND) $(JVM_OPTIONS)\
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	threadMXBeanTestSuite1 \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.arm</platformRequirements>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>threadMXBeanTestSuite2</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode301</variation>
			<variation>Mode351</variation>
			<variation>Mode610</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS)\
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	threadMXBeanTestSuite2 \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.arm</platformRequirements>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>threadMXBeanTimedParkTest</testCaseName>
		<variations>
			<variation>Mode110 -Xthr:minimizeUserCPU</variation>
			<variation>Mode301 -Xthr:minimizeUserCPU</variation>
			<variation>Mode351 -Xthr:minimizeUserCPU</variation>
			<variation>Mode610 -Xthr:minimizeUserCPU</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS)\
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	threadMXBeanTimedParkTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.arm</platformRequirements>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>threadMXBeanTimersTest</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode301</variation>
			<variation>Mode351</variation>
			<variation>Mode610</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS)\
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	threadMXBeanTimersTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.arm</platformRequirements>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>TestArrayCopy</testCaseName>
		<variations>
			<variation>Mode100</variation>
			<variation>Mode101</variation>
			<variation>Mode600</variation>
			<variation>Mode619</variation>
		</variations>
		<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) $(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames TestArrayCopy \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.arm</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>memoryCategories</testCaseName>
		<command>$(MKDIR) -p $(REPORTDIR); \
		cd $(REPORTDIR); \
		$(ADD_JVM_LIB_DIR_TO_LIBPATH) \
		$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames memoryCategories \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.arm</platformRequirements>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>HashConsistency</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames HashConsistency \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.arm</platformRequirements>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>HashPerformance</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) -Xmx1000M \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames HashPerformance \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.arm,^os.linux_390</platformRequirements>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>
	
	<test>
		<testCaseName>HashPerformance_zlinux</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) -Xmx1000M \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames HashPerformance \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>os.linux_390,bits.64</platformRequirements>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>jniOnLoadExceptions</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode301</variation>
			<variation>Mode351</variation>
			<variation>Mode551</variation>
		</variations>
		<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) $(JAVA_COMMAND) $(JVM_OPTIONS)  \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames jniOnLoadExceptions \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.arm</platformRequirements>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>badUTF8inJNI</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
			<variation>Mode551</variation>
		</variations>
		<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) $(JAVA_COMMAND) $(JVM_OPTIONS)  \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames badUTF8inJNI \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>os.linux,^arch.arm</platformRequirements>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>pthreadDestructor</testCaseName>
		<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) $(JAVA_COMMAND) $(JVM_OPTIONS)  \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames pthreadDestructor \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<!-- OpenJ9 issue 1421, failed on zos:
		z/OS documentation indicates the destructor supplied 
		with pthread_key_create() may not be run on thread exit.
		-->
		<platformRequirements>^arch.arm,^os.zos</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>testReflectInvoke</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames testReflectInvoke \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.arm</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>testInvokeSpecialInsideInterface</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames testInvokeSpecialInsideInterface \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>testContendedClassLoading</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames testContendedClassLoading \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>testClassLoadingDelegation</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames testClassLoadingDelegation \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.arm</platformRequirements>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>testvmcheck</testCaseName>
		<variations>
			<variation>NoOptions</variation>
			<variation>Mode110</variation>
			<variation>Mode301</variation>
			<variation>Mode351</variation>
			<variation>Mode610</variation>
			<variation>Mode501</variation>
			<variation>Mode551</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames testvmcheck \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>TestSoftMxCallBackOOM</testCaseName>
		<variations>
			<variation>Mode101</variation>
			<variation>Mode601</variation>
		</variations>
		<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) \
	$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-Xdump:none -Xmx512m -Xsoftmx256m -Xmn1m -agentlib:$(Q)softmxtest=testCallback:OOM$(Q) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames testSoftMxCallback \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>TestSoftMxCallBackExtend</testCaseName>
		<variations>
			<variation>Mode101</variation>
			<variation>Mode601</variation>
		</variations>
		<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) \
	$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-Xdump:none -Xmx512m -Xsoftmx256m -Xmn1m -agentlib:$(Q)softmxtest=testCallback:Expand$(Q) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames testSoftMxCallback \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>reflect_getMethods</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(LIB_DIR)$(D)asm-all.jar$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames reflect_getMethods \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>NoSuchMethodTests</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(LIB_DIR)$(D)asm-all.jar$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames NoSuchMethodTests \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>reattachAfterExit</testCaseName>
		<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) $(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames reattachAfterExit \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
	<platformRequirements>^os.win</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>JCL_Test_Package</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-Xbootclasspath/a:$(Q)$(TEST_RESROOT)$(D)TestResources.jar$(Q) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(LIB_DIR)$(D)asm-all.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames JCL_TEST_Java-Lang-Package \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>hanoiTest</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) -Xdump  \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames hanoiTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<!--hanoiTM_* tests : This is the same regular hanoi test but we set JAVA_THREAD_MODEL
	before the test. These tests were added just to make sure the VM will not fail to
	start when the customer sets JAVA_THREAD_MODEL (PR 100512)-->
	<test>
		<testCaseName>hanoiTestTM_NATIVE</testCaseName>
		<command>JAVA_THREAD_MODEL=NATIVE \
	$(JAVA_COMMAND) $(JVM_OPTIONS) -Xdump  \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames hanoiTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>os.zos</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>hanoiTestTM_MEDIUM</testCaseName>
		<command>JAVA_THREAD_MODEL=MEDIUM \
	$(JAVA_COMMAND) $(JVM_OPTIONS) -Xdump  \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames hanoiTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>os.zos</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>hanoiTestTM_HEAVY</testCaseName>
		<command>JAVA_THREAD_MODEL=HEAVY \
	$(JAVA_COMMAND) $(JVM_OPTIONS) -Xdump  \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames hanoiTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>os.zos</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>
	
	<!-- This test should fail, so a wrapper is used to wrap the return non-zero code -->
	<test>
		<testCaseName>hanoiTestTM_SHOULDFAIL</testCaseName>
		<command>JAVA_THREAD_MODEL=SHOULDFAIL \
	$(JAVA_COMMAND) $(JVM_OPTIONS) -Xdump  \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames hanoiTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	if [ $$? -ne 0 ] ; then echo "hanoiTestTM_SHOULDFAIL test failed as expected"; else sh triggerAFailure.sh ; fi; \
	$(TEST_STATUS)</command>
		<platformRequirements>os.zos</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>memleaksTest</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-Xint -verbose:shutdown -Dibm.java9.forceCommonCleanerShutdown=true -Xcheck:memory:ignoreUnfreedCallsite=zip/:dbgwrapper:unknown:wrapper -Dcom.ibm.tools.attach.logging=yes \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames memleaksTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>fibTest</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) -Xint -Xdump  \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames fibTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>testStringInterning</testCaseName>
		<variations>
			<variation>Mode110</variation>
			<variation>Mode610</variation>
		</variations>
		<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) $(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames testStringInterning \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>floatSanityTests</testCaseName>
		<variations>
			<variation>NoOptions</variation>
			<variation>Mode110</variation>
			<variation>Mode150</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS)  \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames floatSanityTests \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>

	<test>
		<testCaseName>memoryMXBeanShutdownTest</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
			-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(P)$(LIB_DIR)$(D)asm-all.jar$(Q) \
			org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
			-testnames memoryMXBeanShutdownTest \
			-groups $(TEST_GROUP) \
			-excludegroups $(DEFAULT_EXCLUDE); \
			$(TEST_STATUS)</command>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>
	
	<test>
		<testCaseName>FileSystem-isAccessUserOnlyTests</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
			--add-exports=jdk.management.agent/jdk.internal.agent=ALL-UNNAMED \
			-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
			org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
			-testnames FileSystem-isAccessUserOnlyTests \
			-groups $(TEST_GROUP) \
			-excludegroups $(DEFAULT_EXCLUDE); \
			$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE90</subset>
			<subset>SE100</subset>
			<subset>SE110</subset>
		</subsets>
	</test>
	
	<test>
		<testCaseName>FileSystem-isAccessUserOnlyTests_SE80</testCaseName>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
			-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)GeneralTest.jar$(Q) \
			org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
			-testnames FileSystem-isAccessUserOnlyTests \
			-groups $(TEST_GROUP) \
			-excludegroups $(DEFAULT_EXCLUDE); \
			$(TEST_STATUS)</command>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>SE80</subset>
		</subsets>
	</test>

</playlist>
