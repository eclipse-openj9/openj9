<?xml version="1.0"?>
<!--
Copyright IBM Corp. and others 2016

This program and the accompanying materials are made available under
the terms of the Eclipse Public License 2.0 which accompanies this
distribution and is available at https://www.eclipse.org/legal/epl-2.0/
or the Apache License, Version 2.0 which accompanies this distribution and
is available at https://www.apache.org/licenses/LICENSE-2.0.

This Source Code may also be made available under the following
Secondary Licenses when the conditions for such availability set
forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
General Public License, version 2 with the GNU Classpath
Exception [1] and GNU General Public License, version 2 with the
OpenJDK Assembly Exception [2].

[1] https://www.gnu.org/software/classpath/license.html
[2] https://openjdk.org/legal/assembly-exception.html

SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->
<project name="J9 VM Java8andUp General Bucket" default="build" basedir=".">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<description>
		Build J9 VM Java8andUp General Bucket
	</description>

	<!-- set global properties for this build -->
	<property name="DEST" value="${BUILD_ROOT}/functional/Java8andUp" />

	<!--Properties for this particular build -->
	<property name="src" location="src" />
	<property name="src_80" location="src_80" />
	<property name="src_90" location="src_90" />
	<property name="src_110_up" location="src_110_up" />
	<property name="scr_DupClassNameTest" location="scr_DupClassNameTest" />
	<property name="build" location="bin" />
	<property name="build_resource" location="resource" />
	<property name="transformerListener" location="${TEST_ROOT}/Utils/src" />
	<property name="TestUtilities" location="../TestUtilities/src" />
	<property name="TestUtilitiesJ9" location="../TestUtilitiesJ9/src" />
	<if>
		<equals arg1="${JCL_VERSION}" arg2="current" />
		<then>
			<property name="src_90_jcl" location="src_90_current" />
			<property name="addExports_90_jcl" value="--add-exports java.management/sun.management=ALL-UNNAMED" />
		</then>
		<else>
			<property name="src_90_jcl" location="src_90_latest" />
			<property name="addExports_90_jcl" value="--add-exports jdk.management.agent/jdk.internal.agent=ALL-UNNAMED" />
		</else>
	</if>

	<if>
		<equals arg1="${JDK_VERSION}" arg2="8" />
		<then>
			<property name="src_access" location="${TEST_ROOT}/functional/UnsafeAccess/src" />
		</then>
		<else>
			<if>
				<matches string="${JDK_VERSION}" pattern="^1[1-6]$$" />
				<then>
					<!-- Java 11-16 -->
					<property name="src_access" location="${TEST_ROOT}/functional/UnsafeAccess/src_110" />
				</then>
				<else>
					<!-- Java 17+ -->
					<property name="src_access" location="${TEST_ROOT}/functional/UnsafeAccess/src_170" />
				</else>
			</if>
		</else>
	</if>

	<if>
		<matches string="${JDK_VERSION}" pattern="^(9|10)$$" />
		<then>
			<property name="addModules" value="--add-modules java.se.ee" />
		</then>
		<else>
			<property name="addModules" value="" />
		</else>
	</if>
	<property name="LIB" value="asm_all,javassist,testng,jcommander,commons_cli,jaxb_api,asmtools" />
	<import file="${TEST_ROOT}/TKG/scripts/getDependencies.xml" />

	<target name="init">
		<mkdir dir="${DEST}" />
		<mkdir dir="${build}" />
		<mkdir dir="${build_resource}" />
		<mkdir dir="${build}/DupClassNameTest" />
		<mkdir dir="${build}/DupClassNameTest/version1" />
		<mkdir dir="${build}/DupClassNameTest/version2" />
	</target>

	<!--compiles the NoSuchMethod test classes. Multiple steps are needed to create classes that call non-existent methods -->
	<target name="compileNoSuchMethod" depends="compile" description="compile NoSuchMethod tests in multiple steps">
		<property name="NoSuchMethod_src" location="${src}/org/openj9/test/NoSuchMethod" />
		<property name="NoSuchMethod_build" location="${build}/org/openj9/test/NoSuchMethod" />
		<!-- copy a fake java.lang.string impl and AppLoaderCallee into source folder -->
		<copy overwrite="true" file="${NoSuchMethod_src}/java/lang/String.java.hide" tofile="${NoSuchMethod_src}/java/lang/String.java" />
		<copy overwrite="true" file="${NoSuchMethod_src}/AppLoaderCallee.java.fake" tofile="${NoSuchMethod_src}/AppLoaderCallee.java" />
		<!-- Compile the fake string impl and AppLoader caller with it -->
		<if>
			<equals arg1="${JDK_VERSION}" arg2="8" />
			<then>
				<javac srcdir="${NoSuchMethod_src}" destdir="${build}" includes="**/String.java,*AppLoaderCaller2.java" fork="true"
						debug="on" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
					<src path="${src_access}" />
					<classpath>
						<pathelement location="${LIB_DIR}/asm-all.jar" />
						<pathelement location="${LIB_DIR}/testng.jar" />
						<pathelement location="${LIB_DIR}/jcommander.jar" />
					</classpath>
				</javac>
			</then>
			<else>
				<javac srcdir="${NoSuchMethod_src}" destdir="${build}" includes="**/String.java,*AppLoaderCaller2.java" fork="true"
						debug="on" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
					<compilerarg line ="--patch-module java.base=${NoSuchMethod_src}/java/lang" />
					<src path="${src_access}" />
					<classpath>
						<pathelement location="${LIB_DIR}/asm-all.jar" />
						<pathelement location="${LIB_DIR}/testng.jar" />
						<pathelement location="${LIB_DIR}/jcommander.jar" />
					</classpath>
				</javac>
			</else>
		</if>
		<!-- remove our fake java.lang.string impl -->
		<delete file="${NoSuchMethod_src}/java/lang/String.java" />
		<!-- compile the rest of test code -->
		<javac srcdir="${NoSuchMethod_src}" destdir="${build}" excludes="*/java/*,*AppLoaderCaller2.java" fork="true"
				debug="on" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
			<src path="${src_access}" />
			<classpath>
				<pathelement location="${LIB_DIR}/asm-all.jar" />
				<pathelement location="${LIB_DIR}/testng.jar" />
				<pathelement location="${LIB_DIR}/jcommander.jar" />
			</classpath>
		</javac>
		<!-- un-hide our fake string impl -->
		<copy overwrite="true" file="${NoSuchMethod_src}/java/lang/String.java.hide" tofile="${NoSuchMethod_src}/java/lang/String.java" />
		<!-- Replace fake AppLoaderCallee impl with real impl -->
		<copy overwrite="true" file="${NoSuchMethod_src}/AppLoaderCallee.java.real" tofile="${NoSuchMethod_src}/AppLoaderCallee.java" />
		<delete file="${NoSuchMethod_build}/AppLoaderCallee.class" />
		<javac srcdir="${NoSuchMethod_src}" destdir="${build}" includes="*AppLoaderCallee.java" fork="true"
				debug="on" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
			<src path="${src_access}" />
			<classpath>
				<pathelement location="${LIB_DIR}/asm-all.jar" />
				<pathelement location="${LIB_DIR}/testng.jar" />
				<pathelement location="${LIB_DIR}/jcommander.jar" />
			</classpath>
		</javac>
		<delete file="${NoSuchMethod_src}/AppLoaderCallee.java" />
		<!-- Restore the source for our fake AppLoaderCallee -->
		<copy overwrite="true" file="${NoSuchMethod_src}/AppLoaderCallee.java.fake" tofile="${NoSuchMethod_src}/AppLoaderCallee.java" />
		<!-- hide our fake java.lang.string impl -->
		<delete file="${NoSuchMethod_src}/java/lang/String.java" />
	</target>

	<target name="compile" depends="jasm_generator" description="using java ${JDK_VERSION} to compile the source">
		<echo>Ant version is ${ant.version}</echo>
		<echo>============COMPILER SETTINGS============</echo>
		<echo>===fork:                         yes</echo>
		<echo>===executable:                   ${compiler.javac}</echo>
		<echo>===debug:                        on</echo>
		<echo>===destdir:                      ${DEST}</echo>
		<javac srcdir="${scr_DupClassNameTest}/version1" destdir="${build}/DupClassNameTest/version1" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
			<classpath>
				<pathelement location="${LIB_DIR}/testng.jar" />
			</classpath>
		</javac>
		<javac srcdir="${scr_DupClassNameTest}/version2" destdir="${build}/DupClassNameTest/version2" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
			<classpath>
				<pathelement location="${LIB_DIR}/testng.jar" />
			</classpath>
		</javac>
		<if>
			<equals arg1="${JDK_VERSION}" arg2="8" />
			<then>
				<javac srcdir="${src}" destdir="${build}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
					<src path="${src}" />
					<src path="${src_80}" />
					<src path="${src_access}" />
					<src path="${TestUtilities}" />
					<src path="${TestUtilitiesJ9}" />
					<src path="${transformerListener}" />
					<exclude name="**/Cmvc194280.java" />
					<exclude name="**/resources/**" />
					<!-- requires special compilation methods -->
					<exclude name="**/NoSuchMethod/**" />
					<classpath>
						<pathelement location="${LIB_DIR}/asm-all.jar" />
						<pathelement location="${LIB_DIR}/testng.jar" />
						<pathelement location="${LIB_DIR}/jcommander.jar" />
						<pathelement location="${TEST_JDK_HOME}/lib/tools.jar" />
						<pathelement location="${LIB_DIR}/commons-cli.jar" />
						<pathelement location="${LIB_DIR}/javassist.jar" />
					</classpath>
				</javac>
			</then>
			<elseif>
				<matches string="${JDK_VERSION}" pattern="^(9|10)$$" />
				<then>
					<property name="addExports" value="--add-exports java.base/com.ibm.oti.vm=ALL-UNNAMED --add-exports java.base/com.ibm.oti.util=ALL-UNNAMED --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/com.ibm.jit.crypto=ALL-UNNAMED --add-exports java.base/com.ibm.jit=ALL-UNNAMED --add-exports java.base/com.ibm.oti.reflect=ALL-UNNAMED --add-exports java.xml.bind/javax.xml.bind.annotation=ALL-UNNAMED --add-exports java.xml.bind/javax.xml.bind=ALL-UNNAMED" />
					<echo>===addExports:        ${addExports}</echo>
					<javac srcdir="${src}" destdir="${build}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
						<src path="${src}" />
						<src path="${src_90}" />
						<src path="${src_90_jcl}" />
						<src path="${src_access}" />
						<src path="${TestUtilities}" />
						<src path="${TestUtilitiesJ9}" />
						<src path="${transformerListener}" />
						<compilerarg line='${addExports}' />
						<compilerarg line='${addExports_90_jcl}' />
						<compilerarg line='${addModules}' />
						<compilerarg line='--add-modules openj9.sharedclasses' />
						<!-- PR117298 -->
						<exclude name="**/Cmvc194280.java" />
						<exclude name="**/resources/**" />
						<!-- requires special compilation methods -->
						<exclude name="**/NoSuchMethod/**" />
						<classpath>
							<pathelement location="${LIB_DIR}/asm-all.jar" />
							<pathelement location="${LIB_DIR}/testng.jar" />
							<pathelement location="${LIB_DIR}/jcommander.jar" />
							<pathelement location="${LIB_DIR}/commons-cli.jar" />
							<pathelement location="${LIB_DIR}/javassist.jar" />
						</classpath>
					</javac>
					<javac srcdir="${src_80}" destdir="${build}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
						<include name="org/openj9/test/java/lang/Test_Thread_Extra.java" />
						<src path="${src_access}" />
						<classpath>
							<pathelement location="${LIB_DIR}/testng.jar" />
						</classpath>
					</javac>
				</then>
			</elseif>
			<else>
				<if>
					<equals arg1="${JDK_VERSION}" arg2="11" />
					<then>
						<!-- Java 11 -->
						<property name="src_version" location="src_110" />
						<property name="addExports_version" value="" />
					</then>
					<elseif>
						<matches string="${JDK_VERSION}" pattern="^1[2-6]$$" />
						<then>
							<!-- Java 12-16 -->
							<property name="src_version" location="src_120" />
							<property name="addExports_version" value="--add-exports java.base/jdk.internal.access=ALL-UNNAMED" />
						</then>
					</elseif>
					<else>
						<!-- Java 17+ -->
						<property name="src_version" location="src_170" />
						<property name="addExports_version" value="--add-exports java.base/jdk.internal.access=ALL-UNNAMED" />
					</else>
				</if>

				<property name="addExports" value="--add-exports java.base/com.ibm.oti.vm=ALL-UNNAMED --add-exports java.base/com.ibm.oti.util=ALL-UNNAMED --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/jdk.internal.reflect=ALL-UNNAMED --add-exports java.base/com.ibm.jit.crypto=ALL-UNNAMED --add-exports java.base/com.ibm.jit=ALL-UNNAMED --add-exports java.base/com.ibm.oti.reflect=ALL-UNNAMED --add-exports java.base/openj9.internal.tools.attach.target=ALL-UNNAMED --add-exports jdk.attach/com.ibm.tools.attach.attacher=ALL-UNNAMED" />
				<echo>===addExports:        ${addExports}</echo>

				<property name="srcpath" location="${src}:${src_110_up}:${src_version}:${src_90_jcl}:${src_access}:${TestUtilities}:${TestUtilitiesJ9}:${transformerListener}" />
				<!-- first two excludes are from PR117298, third exclude requires special compilation methods -->
				<property name="commonExcludes" value="**/Cmvc194280.java,**/resources/**,**/NoSuchMethod/**" />
				<path id="build.cp">
					<fileset dir="${LIB_DIR}/" includes="asm-all.jar"/>
					<fileset dir="${LIB_DIR}/" includes="testng.jar"/>
					<fileset dir="${LIB_DIR}/" includes="jcommander.jar"/>
					<fileset dir="${LIB_DIR}/" includes="commons-cli.jar"/>
					<fileset dir="${LIB_DIR}/" includes="javassist.jar"/>
					<fileset dir="${LIB_DIR}/" includes="jaxb-api.jar"/>
				</path>
				<property name="commonArgs" value="${addExports} ${addExports_90_jcl} ${addExports_version} --add-modules openj9.sharedclasses" />
				<if>
					<matches string="${JDK_VERSION}" pattern="^(1[1-8])$$" />
					<then>
						<!-- Java 11-18 -->
						<javac srcdir="${srcpath}" excludes="${commonExcludes}" destdir="${build}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1" classpathref="build.cp">
							<compilerarg line='${commonArgs}' />
						</javac>
					</then>
					<else>
						<!-- Java 19+ (SecurityManager removed) -->
						<javac srcdir="${srcpath}" excludes="${commonExcludes}" destdir="${build}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1" classpathref="build.cp">
							<compilerarg line='${commonArgs}' />
							<!-- exclude tests that depend on SecurityManager -->
							<exclude name="org/openj9/test/java/security/Test_AccessController.java" />
							<exclude name="org/openj9/test/java/security/Test_AccessControlContext.java" />
							<exclude name="org/openj9/test/java/lang/Test_Class_SM.java" />
							<exclude name="org/openj9/test/java/lang/Test_System_SM.java" />
							<exclude name="org/openj9/test/java/lang/Test_Thread_SM.java" />
							<exclude name="org/openj9/test/java/lang/Test_ThreadGroup_SM.java" />
							<exclude name="org/openj9/test/java/lang/invoke/Test_MethodHandleInfo_SM.java" />
							<exclude name="org/openj9/test/java/lang/Test_ClassLoader_SM.java" />
							<exclude name="org/openj9/test/java/lang/Test_J9VMInternals_SM.java" />
							<exclude name="org/openj9/test/java/lang/Test_J9VMInternalsImpl_SM.java" />
							<exclude name="org/openj9/test/vm/Test_VM.java" />
						</javac>
					</else>
				</if>
			</else>
		</if>
	</target>

	<target name="jasm_generator" depends="init,getDependentLibs" description="prepare jasm files">
		<property name="jasm_class_destination" location="${build}/j9vm/test/invoker" />
		<mkdir dir="${jasm_class_destination}" />
		<exec executable="${TEST_JDK_HOME}/bin/java" dir="${jasm_class_destination}">
			<arg line="-jar ${LIB_DIR}/asmtools.jar jasm ${src}/j9vm/test/invoker/NodeClass.jasm" />
		</exec>
		<exec executable="${TEST_JDK_HOME}/bin/java" dir="${jasm_class_destination}">
			<arg line="-jar ${LIB_DIR}/asmtools.jar jasm ${src}/j9vm/test/invoker/NodeInterface.jasm" />
		</exec>
	</target>

	<!-- This target is used to prepare test resource which is located in org/openj9/resources -->
	<target name="pack_resources" depends="compileNoSuchMethod" description="prepare JCL test resources">
		<!-- compile java files within resources dir without '-parameter' flag in javac command line, README in '${src}/org/openj9/resources/methodparameters/README' -->
		<javac srcdir="${src}" destdir="${build_resource}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
			<include name ="org/openj9/resources/**" />
			<exclude name ="org/openj9/resources/methodparameters/WithParams.java" />
			<compilerarg line='${addModules}' />
			<src path="${src_access}" />
			<classpath>
				<pathelement location="${LIB_DIR}/jaxb-api.jar" />
			</classpath>
		</javac>

		<!-- compile java files within resources dir with '-parameter' flag in javac command line, README in '${src}/org/openj9/resources/methodparameters/README' -->
		<javac srcdir="${src}" destdir="${build_resource}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
			<compilerarg value='-parameters' />
			<src path="${src_access}" />
			<include name ="org/openj9/resources/methodparameters/WithParams.java" />
		</javac>

		<jar jarfile="${build_resource}/org/openj9/resources/openj9tr_general.jar">
			<fileset dir="${build_resource}" includes="org/openj9/resources/classinheritance/**" />
			<fileset dir="${build_resource}" includes="org/openj9/resources/methodparameters/**" />
			<fileset dir="${build_resource}" includes="org/openj9/resources/security/**" />
		</jar>

		<!-- generate child.jar -->
		<jar jarfile="${build_resource}/org/openj9/resources/openj9tr_child.jar">
			<fileset dir="${src}/org/openj9/resources/classloader/child/" />
		</jar>

		<!-- generate parent.jar -->
		<jar jarfile="${build_resource}/org/openj9/resources/openj9tr_parent.jar">
			<fileset dir="${src}/org/openj9/resources/classloader/parent/" />
		</jar>

		<!-- generate A.jar and B.jar for org.openj9.test.annotationPackage tests -->
		<jar jarfile="${build_resource}/org/openj9/resources/openj9tr_annotationPackage_A.jar">
			<fileset dir="${build_resource}" includes="org/openj9/resources/annotationPackage/A.class" />
			<fileset dir="${build_resource}" includes="org/openj9/resources/annotationPackage/package-info.class" />
		</jar>
		<jar jarfile="${build_resource}/org/openj9/resources/openj9tr_annotationPackage_B.jar">
			<fileset dir="${build_resource}" includes="org/openj9/resources/annotationPackage/B.class" />
		</jar>

		<!-- copy extra test related files into build_resource dir -->
		<copy todir="${build_resource}/org/openj9/resources">
			<fileset dir="${src}/org/openj9/resources/misc" />
		</copy>

		<!-- copy Test_JITHelper dependencies to ${build_resource}, and add them into -Xbootclasspath/a -->
		<copy file="${build}/org/openj9/test/com/ibm/jit/Test_JITHelpersImpl.class" todir="${build_resource}/org/openj9/test/com/ibm/jit" />

		<!-- move classfiles in a restricted package to ${build_resource} so they can be added to a module -->
		<move file="${build}/sun" todir="${build_resource}" />
	</target>

	<target name="dist" depends="pack_resources" description="generate the distribution">
		<jar jarfile="${DEST}/GeneralTest.jar" filesonly="true">
			<fileset dir="${build}" />
			<fileset dir="${src}/../" includes="*.properties,*.xml" />
		</jar>
		<jar jarfile="${DEST}/TestResources.jar" filesonly="true">
			<fileset dir="${build_resource}" />
		</jar>
		<jar jarfile="${RESOURCES_DIR}/vmargs.jar" filesonly="true" manifest="META-INF/MANIFEST.MF">
			<fileset dir="${build}" includes="org/openj9/test/vmArguments/*.class" />
		</jar>
		<copy todir="${DEST}">
			<fileset dir="${src}/../" includes="*.xml,*.policy" />
			<fileset dir="${src}/../" includes="*.mk" />
		</copy>
		<mkdir dir="${DEST}/DupClassNameTest" />
		<mkdir dir="${DEST}/DupClassNameTest/version1" />
		<mkdir dir="${DEST}/DupClassNameTest/version2" />
		<copy todir="${DEST}/DupClassNameTest/version1/">
			<fileset dir="${build}/DupClassNameTest/version1" includes="*.class" />
		</copy>
		<copy todir="${DEST}/DupClassNameTest/version2/">
			<fileset dir="${build}/DupClassNameTest/version2" includes="*.class" />
		</copy>
	</target>

	<target name="clean" depends="dist" description="clean up">
		<!-- Delete the ${build} and ${build_resource} directory trees -->
		<delete dir="${build}" />
		<delete dir="${build_resource}" />
	</target>

	<target name="build" >
		<if>
			<or>
				<equals arg1="${JDK_IMPL}" arg2="ibm" />
				<equals arg1="${JDK_IMPL}" arg2="openj9" />
			</or>
			<then>
				<subant target="build">
					<fileset dir="${TEST_ROOT}/functional/InstrumentationAgent" includes="build.xml" />
				</subant>
				<antcall target="clean" inheritall="true" />
			</then>
		</if>
	</target>
</project>
