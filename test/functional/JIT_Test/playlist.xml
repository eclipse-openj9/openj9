<?xml version="1.0" encoding="UTF-8"?>

<!--
	Copyright (c) 2016, 2020 IBM Corp. and others

	This program and the accompanying materials are made available under
	the terms of the Eclipse Public License 2.0 which accompanies this
	distribution and is available at https://www.eclipse.org/legal/epl-2.0/
	or the Apache License, Version 2.0 which accompanies this distribution and
	is available at https://www.apache.org/licenses/LICENSE-2.0.

	This Source Code may also be made available under the following
	Secondary Licenses when the conditions for such availability set
	forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
	General Public License, version 2 with the GNU Classpath
	Exception [1] and GNU General Public License, version 2 with the
	OpenJDK Assembly Exception [2].

	[1] https://www.gnu.org/software/classpath/license.html
	[2] http://openjdk.java.net/legal/assembly-exception.html

	SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->

<playlist xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../TKG/playlist.xsd">
	<!-- jit.test.jitt tests start here -->
	<test>
		<testCaseName>finalizerTest</testCaseName>
		<variations>
			<variation>Mode100</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames finalizerTest -groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.riscv</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<impls>
			<impl>openj9</impl>
			<impl>ibm</impl>
		</impls>
	</test>

	<test>
		<testCaseName>stringConcatOptTest</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) -Xjit:count=1,disableAsyncCompilation,verbose,vlog=$(Q)$(REPORTDIR)$(D)jitv.log$(Q) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames stringConcatOptTest -groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.riscv</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<impls>
			<impl>openj9</impl>
			<impl>ibm</impl>
		</impls>
	</test>

	<test>
		<testCaseName>jit_jitt</testCaseName>
		<variations>
			<variation>-Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump</variation>
			<variation>-Xrs -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump</variation>
			<variation>-Xrs:sync -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump</variation>
			<variation>-Xrs:async -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	arrayTest,\
	assemblerTest,\
	castingTest,\
	cfgTest,\
	crashesTest,\
	ctresolvesTest,\
	exceptionsTest,\
	fieldsTest,\
	floatsTest,\
	gcTest,\
	geCastingTest,\
	immedOpTest,\
	invokeTest,\
	mathTest,\
	math2Test,\
	miscTest,\
	os390LinkageTest,\
	promotionTest,\
	resolvesTest,\
	sieveTest,\
	transitionsTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.riscv</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<impls>
			<impl>openj9</impl>
			<impl>ibm</impl>
		</impls>
	</test>

	<test>
		<testCaseName>jit_compareAndBranch</testCaseName>
		<variations>
			<variation>-Xjit:count=1,limit={*testAddressCompare*},optlevel=hot,disableCFGSimplification,disableGRA,disableAsyncCompilation</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	compareAndBranchTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.riscv</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<impls>
			<impl>openj9</impl>
			<impl>ibm</impl>
		</impls>
	</test>

	<test>
		<testCaseName>jit_jitt_openj9_none_SCC</testCaseName>
		<variations>
			<variation>-Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump</variation>
			<variation>-Xrs -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump</variation>
			<variation>-Xrs:sync -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump</variation>
			<variation>-Xrs:async -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) -Xshareclasses:none \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	arrayTest,\
	assemblerTest,\
	castingTest,\
	cfgTest,\
	crashesTest,\
	ctresolvesTest,\
	exceptionsTest,\
	fieldsTest,\
	floatsTest,\
	gcTest,\
	geCastingTest,\
	immedOpTest,\
	invokeTest,\
	mathTest,\
	math2Test,\
	miscTest,\
	os390LinkageTest,\
	promotionTest,\
	resolvesTest,\
	sieveTest,\
	transitionsTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.riscv</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<impls>
			<impl>openj9</impl>
		</impls>
	</test>

	<test>
		<testCaseName>jit_jitt_XCEEHDLR</testCaseName>
		<variations>
			<variation>-XCEEHDLR -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump</variation>
			<variation>-Xrs -XCEEHDLR -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump</variation>
			<variation>-Xrs:sync -XCEEHDLR -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump</variation>
			<variation>-Xrs:async -XCEEHDLR -Xjit:noJitUntilMain,count=0,assumeStrictFP,optlevel=warm,gcOnResolve,rtResolve -verbose:stackwalk=0 -Xdump</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	arrayTest,\
	assemblerTest,\
	castingTest,\
	cfgTest,\
	crashesTest,\
	ctresolvesTest,\
	exceptionsTest,\
	fieldsTest,\
	floatsTest,\
	gcTest,\
	geCastingTest,\
	immedOpTest,\
	invokeTest,\
	mathTest,\
	math2Test,\
	miscTest,\
	os390LinkageTest,\
	promotionTest,\
	resolvesTest,\
	sieveTest,\
	transitionsTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>os.zos,bits.31</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<impls>
			<impl>openj9</impl>
			<impl>ibm</impl>
		</impls>
	</test>

	<!-- jit.test.jar tests start here -->
	<test>
		<testCaseName>jit_jar</testCaseName>
		<variations>
			<variation>-Xjit:optlevel=warm,count=0 -DjarTesterArgs=$(Q)$(TEST_RESROOT)$(D)jitt.jar$(Q)</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	JarTesterTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.riscv</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<impls>
			<impl>openj9</impl>
			<impl>ibm</impl>
		</impls>
	</test>

	<!-- jit.test.tr start here -->
	<test>
		<testCaseName>jit_tr</testCaseName>
		<variations>
			<variation>-Xjit:noJitUntilMain -Xdump:java</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	BigDecimalTest,\
	chtableTest,\
	decompositionTest,\
	explicitNewInitTest,\
	findLeftMostOneTest,\
	fprToGprTest,\
	FPSimplifyTest,\
	IpaTest,\
	liveMonitorTest,\
	LoadReverseTest,\
	LongAddTest,\
	LongDivisionTest,\
	LoopTransferTest,\
	mathSimplifyTest,\
	NewInstanceTest,\
	signExtensionATest,\
	VPTypeTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.arm,^arch.riscv</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<impls>
			<impl>openj9</impl>
			<impl>ibm</impl>
		</impls>
	</test>

	<test>
		<testCaseName>StringPeepholeTest</testCaseName>
		<variations>
			<variation>-XX:-EnableHCR -Xjit:count=0,optLevel=hot</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	StringPeepholeTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.arm,^arch.riscv</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<aot>nonapplicable</aot>
		<impls>
			<impl>openj9</impl>
			<impl>ibm</impl>
		</impls>
	</test>

	<!-- jit.test.hw tests start here -->
	<test>
		<testCaseName>jit_hw</testCaseName>
		<variations>
			<variation>-Xdump:java -Xgcpolicy:gencon -Xjit:count=0,optLevel=hot</variation>
			<variation>-Xdump:java -Xgcpolicy:optavgpause -Xjit:count=0</variation>
			<variation>-Xdump:java -Xjit:enableHCR,enableOSR,count=0</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	hwTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.arm,^arch.riscv</platformRequirements>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<impls>
			<impl>openj9</impl>
			<impl>ibm</impl>
		</impls>
	</test>

	<test>
		<testCaseName>jit_hwWarm</testCaseName>
		<variations>
			<variation>-Xdump:java -Xjit:optlevel=warm,count=0</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	hwTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>os.linux,^vm.cmprssptrs,^arch.arm,^arch.riscv</platformRequirements>
		<levels>
			<level>extended</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<impls>
			<impl>openj9</impl>
			<impl>ibm</impl>
		</impls>
	</test>

	<!-- jit.test.ra tests start here -->
	<test>
		<testCaseName>jit_ra</testCaseName>
		<variations>
			<variation>-Xmn1M -Xjit:$(SQ){*powerOfTenBI*}(count=7),disableasynccompilation,tryToInline={java/lang/String.&lt;init&gt;([C)V|java/lang/String.&lt;init&gt;([CII)V|java/lang/Object.&lt;init&gt;()V|java/math/BigInteger.&lt;init&gt;(Ljava/lang/String;)V|java/math/BigInteger.&lt;init&gt;(Ljava/lang/String;I)V|java/lang/Object.&lt;init&gt;()V|java/lang/String.length()I|java/lang/String.lengthInternal()I},dontInline={java/util/Arrays.fill([CC)V}$(SQ)</variation>
		</variations>
		<command>
			$(JAVA_COMMAND) $(JVM_OPTIONS) \
			-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
			org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
			-testnames \
			raTest \
			-groups $(TEST_GROUP) \
			-excludegroups $(DEFAULT_EXCLUDE); \
			$(TEST_STATUS)
		</command>
		<platformRequirements>^arch.arm,^arch.riscv</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<impls>
			<impl>openj9</impl>
			<impl>ibm</impl>
		</impls>
	</test>

	<!-- jit.test.vich tests start here -->
	<test>
		<testCaseName>jit_vich</testCaseName>
		<variations>
			<variation>-Xdump</variation>
		</variations>
		<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) $(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	AllocationTest,\
	EqualsImplementationsTest,\
	ExceptionsTest,\
	FibonacciTest,\
	GCTest,\
	HashEfficiencyTest,\
	HashtableTest,\
	JNITest,\
	JNIArrayTest,\
	JNICallInTest,\
	JNIFieldsTest,\
	JNILocalRefTest,\
	JNIObjectArrayTest,\
	MethodInvocationTest,\
	MicrobenchTest,\
	StringsTest,\
	ThreadsTest,\
	CurrentTimeMillisTest,\
	ReadTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.riscv</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<types>
			<type>native</type>
		</types>
		<impls>
			<impl>openj9</impl>
			<impl>ibm</impl>
		</impls>
	</test>

<!-- jit.test.recognizedMethod tests start here -->
	<test>
		<testCaseName>jit_recognizedMethod</testCaseName>
		<variations>
			<variation>-Xint</variation>
			<variation>-Xjit:count=1,disableAsyncCompilation</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	RecognizedMethodTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>^arch.riscv</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<impls>
			<impl>openj9</impl>
			<impl>ibm</impl>
		</impls>
	</test>
	<test>
		<testCaseName>jit_recognizedMethod_RISCV</testCaseName>
		<variations>
			<variation>NoOptions</variation>
		</variations>
		<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \
	-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
	org.testng.TestNG -d $(REPORTDIR) $(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
	-testnames \
	RecognizedMethodTest \
	-groups $(TEST_GROUP) \
	-excludegroups $(DEFAULT_EXCLUDE); \
	$(TEST_STATUS)</command>
		<platformRequirements>arch.riscv</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<subsets>
			<subset>11</subset>
		</subsets>
		<impls>
			<impl>openj9</impl>
		</impls>
	</test>

	<!-- JITServer tests start here. -->
	<test>
		<testCaseName>testJITServer</testCaseName>
		<!-- Variations are passed to the client via the CLIENT_PROGRAM property from $JVM_OPTIONS; neither the test harness nor the server care about these. -->
		<variations>
			<variation>NoOptions</variation>
			<variation>-Xshareclasses:none -Xjit:optLevel=hot</variation>
		</variations>
		<!-- Check if the JITServer launcher exists and if so start the test and
			 - specify the executables for the client and server via the CLIENT_EXE and SERVER_EXE properties respectively,
			 - specify what the client will run via the CLIENT_PROGRAM property.
			 If the launcher doesn't exist we assume that the build doesn't support JITServer and trivially pass the test. -->
		<command>if [ -x $(Q)$(TEST_JDK_BIN)$(D)jitserver$(Q) ]; \
	then \
		$(JAVA_COMMAND) \
		-cp $(Q)$(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar$(Q) \
		-DSERVER_EXE=$(Q)$(TEST_JDK_BIN)$(D)jitserver$(Q) \
		-DCLIENT_EXE=$(JAVA_COMMAND) \
		-DCLIENT_PROGRAM=$(SQ)$(JVM_OPTIONS) -cp $(RESOURCES_DIR)$(P)$(TESTNG)$(P)$(TEST_RESROOT)$(D)jitt.jar -DjarTesterArgs=$(Q)-loopforever $(TEST_RESROOT)$(D)jitt.jar$(Q) org.testng.TestNG -d $(REPORTDIR)$(D)client $(TEST_RESROOT)$(D)testng.xml -testnames JarTesterTest -groups $(TEST_GROUP) -excludegroups $(DEFAULT_EXCLUDE)$(SQ) \
		org.testng.TestNG \
		-d $(REPORTDIR) \
		$(Q)$(TEST_RESROOT)$(D)testng.xml$(Q) \
		-testnames JITServerTest \
		-groups $(TEST_GROUP) \
		-excludegroups $(DEFAULT_EXCLUDE); \
	else \
		echo; \
		echo $(Q)$(TEST_JDK_BIN)$(D)jitserver doesn't exist; assuming this JDK does not support JITServer and trivially passing the test.$(Q); \
	fi; \
	$(TEST_STATUS)</command>
		<platformRequirements>os.linux,arch.x86,bits.64,vm.cmprssptrs</platformRequirements>
		<levels>
			<level>sanity</level>
		</levels>
		<groups>
			<group>functional</group>
		</groups>
		<impls>
			<impl>openj9</impl>
		</impls>
	</test>
</playlist>
