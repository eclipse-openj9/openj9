<?xml version="1.0"?>

<!--
  Copyright (c) 2021, 2021 IBM Corp. and others

  This program and the accompanying materials are made available under
  the terms of the Eclipse Public License 2.0 which accompanies this
  distribution and is available at https://www.eclipse.org/legal/epl-2.0/
  or the Apache License, Version 2.0 which accompanies this distribution and
  is available at https://www.apache.org/licenses/LICENSE-2.0.

  This Source Code may also be made available under the following
  Secondary Licenses when the conditions for such availability set
  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
  General Public License, version 2 with the GNU Classpath
  Exception [1] and GNU General Public License, version 2 with the
  OpenJDK Assembly Exception [2].

  [1] https://www.gnu.org/software/classpath/license.html
  [2] http://openjdk.java.net/legal/assembly-exception.html

  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->

<project name="Java16AndUp" default="build" basedir=".">
	<taskdef resource='net/sf/antcontrib/antlib.xml'/>
	<description>
		Tests for Java 16 and up
	</description>

	<!-- set global properties for this build -->
	<property name="DEST" value="${BUILD_ROOT}/functional/Java16andUp" />

	<!--Properties for this particular build-->
	<property name="src" location="./src"/>
	<property name="build" location="./bin"/>
	<property name="module_src_root" location="./modules"/>
	<property name="module_bin_root" location="./module_bin"/>
	<property name="dest_module_bin" location="${DEST}/module_bin"/>
	<property name="TestUtilities" location="../TestUtilities/src"/>
	<property name="LIB" value="asm,testng,jcommander"/>
	<import file="${TEST_ROOT}/TKG/scripts/getDependencies.xml"/>

	<target name="init">
		<mkdir dir="${DEST}" />
		<mkdir dir="${build}"/>
	</target>
	
	<property name="MODULE_NAME_ROOT" value="org.openj9test.modularity" />
	<property name="MODULE_PATH_ROOT" value="org/openj9/test/modularity"/>
	
	<target name="compile_modules" depends="init" description="Create the base modules for the sealed classes">
		<mkdir dir="${module_bin_root}" />
		<copy file="${LIB_DIR}/testng.jar" todir="${module_bin_root}" />
		<copy file="${LIB_DIR}/jcommander.jar" todir="${module_bin_root}" />
		<copy file="${LIB_DIR}/asm.jar" todir="${module_bin_root}" />
		<for list="moduleX,moduleY" param="mod">
			<sequential>
				<var name="module_src_dir" value="${module_src_root}/${MODULE_NAME_ROOT}.@{mod}" />
				<var name="module_bin_dir" value="${module_bin_root}/${MODULE_NAME_ROOT}.@{mod}" />
				<mkdir dir="${module_bin_dir}" />
				<if>
					<equals arg1="@{mod}" arg2="moduleY"/>
					<then>
						<var name="TestUtilitiesModule" value="${TestUtilities}" />
						<var name="moduleCompilerarg" value="--add-modules java.management,jdk.management,jdk.attach,java.instrument --add-reads ${MODULE_NAME_ROOT}.@{mod}=java.management --add-reads ${MODULE_NAME_ROOT}.@{mod}=jdk.management --add-reads ${MODULE_NAME_ROOT}.@{mod}=jdk.attach --add-reads ${MODULE_NAME_ROOT}.@{mod}=java.instrument" />
					</then>
					<else>
						<var name="TestUtilitiesModule" value=""/>
						<var name="moduleCompilerarg" value="" />
					</else>
				</if>
				<var name="modpath" value="--module-path ${module_bin_root} -d ${module_bin_dir}" />
				<javac srcdir="${module_src_dir}" destdir="${module_bin_dir}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
					<src path="${module_src_dir}" />
					<src path="${TestUtilitiesModule}" />
					<compilerarg line="${moduleCompilerarg}" />
					<compilerarg line='--add-exports java.base/jdk.internal.misc=ALL-UNNAMED' />
					<compilerarg line='--enable-preview --source ${JDK_VERSION}' />
					<compilerarg line="${modpath}" />
					<classpath>
						<pathelement location="${LIB_DIR}/testng.jar"/>
						<pathelement location="${LIB_DIR}/jcommander.jar"/>
						<pathelement location="${LIB_DIR}/asm.jar" />
						<pathelement location="${build}" />
					</classpath>
				</javac>
			</sequential>
		</for>
	</target>

	<target name="compile" depends="init,getDependentLibs" description="Using java ${JDK_VERSION} to compile the source" >
		<echo>Ant version is ${ant.version}</echo>
		<echo>============COMPILER SETTINGS============</echo>
		<echo>===fork:                         yes</echo>
		<echo>===executable:                   ${compiler.javac}</echo>
		<echo>===debug:                        on</echo>
		<echo>===destdir:                      ${DEST}</echo>

		<javac srcdir="${src}" destdir="${build}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
			<src path="${src}"/>
			<src path="${TestUtilities}" />
			<exclude name="**/modules/**" />
			<compilerarg line='--add-exports java.base/jdk.internal.misc=ALL-UNNAMED' />
			<compilerarg line='--enable-preview --source ${JDK_VERSION}' />
			<compilerarg line='--add-opens jdk.incubator.foreign/jdk.internal.foreign=ALL-UNNAMED' />
			<compilerarg line='--add-opens java.base/jdk.internal.misc=ALL-UNNAMED' />
			<compilerarg line='--add-opens java.base/java.lang=ALL-UNNAMED' />
			<compilerarg line='--add-modules jdk.incubator.foreign' />
			<classpath>
				<pathelement location="${LIB_DIR}/testng.jar"/>
				<pathelement location="${LIB_DIR}/jcommander.jar"/>
				<pathelement location="${LIB_DIR}/asm.jar" />
				<pathelement location="${build}" />
			</classpath>
		</javac>
	</target>

	<target name="dist" depends="compile,compile_modules" description="generate the distribution" >
		<echo>copy ${module_bin_root} to ${dest_module_bin}</echo>
		<mkdir dir="${dest_module_bin}"/>
		<copy todir="${dest_module_bin}">
			<fileset dir="${module_bin_root}"/>
		</copy>
		<mkdir dir="${DEST}"/>
		<jar jarfile="${DEST}/GeneralTest.jar" filesonly="true">
			<fileset dir="${build}"/>
			<fileset dir="${dest_module_bin}"/>
			<fileset dir="${src}/../" includes="*.properties,*.xml"/>
		</jar>
		<copy todir="${DEST}">
			<fileset dir="${src}/../" includes="*.xml" />
			<fileset dir="${src}/../" includes="*.mk" />
		</copy>
	</target>

	<target name="build" >
		<if>
			<not>
				<matches string="${JDK_VERSION}" pattern="^(8|9|10|11|12|13|14|15)$$" />
			</not>
			<then>
				<antcall target="clean" inheritall="true" />
			</then>
		</if>
	</target>

	<target name="clean" depends="dist" description="clean up" >
		<delete dir="${build}"/>
	</target>
</project>
