<?xml version="1.0"?>
<!--
Copyright IBM Corp. and others 2018

This program and the accompanying materials are made available under
the terms of the Eclipse Public License 2.0 which accompanies this
distribution and is available at https://www.eclipse.org/legal/epl-2.0/
or the Apache License, Version 2.0 which accompanies this distribution and
is available at https://www.apache.org/licenses/LICENSE-2.0.

This Source Code may also be made available under the following
Secondary Licenses when the conditions for such availability set
forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
General Public License, version 2 with the GNU Classpath
Exception [1] and GNU General Public License, version 2 with the
OpenJDK Assembly Exception [2].

[1] https://www.gnu.org/software/classpath/license.html
[2] https://openjdk.org/legal/assembly-exception.html

SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->
<project name="DDR_Test" default="build" basedir=".">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<description>
		DDR_Test
	</description>

	<!-- set global properties for this build -->
	<property name="DEST" value="${BUILD_ROOT}/functional/DDR_Test" />

	<!--Properties for this particular build-->
	<property name="src" location="./src" />
	<property name="TestUtilities" location="../TestUtilities/src"/>
	<property name="build" location="./bin" />
	<property name="transformerListener" location="${TEST_ROOT}/Utils/src" />
	<property name="LIB" value="junit4,asm_all,testng" />
	<import file="${TEST_ROOT}/TKG/scripts/getDependencies.xml" />

	<target name="init">
		<mkdir dir="${DEST}" />
		<mkdir dir="${build}" />
	</target>

	<target name="compile" depends="init,getDependentLibs" description="Using java ${JDK_VERSION} to compile the source">
		<echo>Ant version is ${ant.version}</echo>
		<echo>============COMPILER SETTINGS============</echo>
		<echo>===fork:                         yes</echo>
		<echo>===executable:                   ${compiler.javac}</echo>
		<echo>===debug:                        on</echo>
		<echo>===destdir:                      ${DEST}</echo>
		<if>
			<equals arg1="${JDK_VERSION}" arg2="8" />
			<then>
				<javac srcdir="${src}" destdir="${build}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
					<src path="${src}" />
					<src path="${transformerListener}" />
					<src path="${TestUtilities}" />
					<classpath>
						<pathelement location="${LIB_DIR}/junit4.jar" />
						<pathelement location="${LIB_DIR}/testng.jar" />
						<pathelement location="${LIB_DIR}/asm-all.jar" />
						<pathelement location="${TEST_JDK_HOME}/jre/lib/ddr/j9ddr.jar" />
					</classpath>
				</javac>
			</then>
			<else>
				<javac srcdir="${src}" destdir="${build}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1">
					<src path="${src}" />
					<src path="${transformerListener}" />
					<src path="${TestUtilities}" />
					<classpath>
						<pathelement location="${LIB_DIR}/junit4.jar" />
						<pathelement location="${LIB_DIR}/testng.jar" />
						<pathelement location="${LIB_DIR}/asm-all.jar" />
					</classpath>
					<compilerarg value="--add-exports=openj9.dtfj/com.ibm.j9ddr=ALL-UNNAMED" />
					<compilerarg value="--add-exports=openj9.dtfj/com.ibm.j9ddr.tools.ddrinteractive=ALL-UNNAMED" />
					<compilerarg value="--add-exports=openj9.dtfj/com.ibm.j9ddr.tools.ddrinteractive.annotations=ALL-UNNAMED" />
					<compilerarg value="--add-exports=openj9.dtfj/com.ibm.j9ddr.vm29.j9=ALL-UNNAMED" />
					<compilerarg value="--add-exports=openj9.dtfj/com.ibm.j9ddr.vm29.j9.gc=ALL-UNNAMED" />
					<compilerarg value="--add-exports=openj9.dtfj/com.ibm.j9ddr.vm29.j9.walkers=ALL-UNNAMED" />
					<compilerarg value="--add-exports=openj9.dtfj/com.ibm.j9ddr.vm29.pointer=ALL-UNNAMED" />
					<compilerarg value="--add-exports=openj9.dtfj/com.ibm.j9ddr.vm29.pointer.generated=ALL-UNNAMED" />
					<compilerarg value="--add-exports=openj9.dtfj/com.ibm.j9ddr.vm29.pointer.helper=ALL-UNNAMED" />
					<compilerarg value="--add-exports=openj9.dtfj/com.ibm.j9ddr.vm29.types=ALL-UNNAMED" />
				</javac>
			</else>
		</if>
	</target>

	<target name="dist" depends="compile" description="generate the distribution">
		<jar jarfile="${DEST}/ddrplugin.jar" filesonly="true">
			<fileset dir="${build}">
				<include name="j9vm/test/ddrext/plugin/**" />
			</fileset>
			<fileset dir="${src}">
				<include name="j9vm/test/ddrext/plugin/**" />
			</fileset>
		</jar>
		<jar jarfile="${DEST}/DDR_Test.jar" filesonly="true">
			<fileset dir="${build}">
				<exclude name="j9vm/test/ddrext/plugin/**" />
			</fileset>
			<fileset dir="${src}">
				<exclude name="j9vm/test/ddrext/plugin/**" />
			</fileset>
		</jar>
		<copy todir="${DEST}">
			<fileset dir="${src}/../" includes="*.xml" />
			<fileset dir="${src}/../" includes="*.mk" />
		</copy>
	</target>

	<target name="clean" depends="dist" description="clean up">
		<!-- Delete the ${build} directory trees -->
		<delete dir="${build}" />
	</target>

	<target name="build">
		<echo>os.name: ${os.name}</echo>
		<if>
			<or>
				<equals arg1="${JDK_IMPL}" arg2="ibm" />
				<equals arg1="${JDK_IMPL}" arg2="openj9" />
			</or>
			<then>
				<if>
					<resourcecount when="greater" count="0">
						<fileset dir="${TEST_JDK_HOME}">
							<include name="**/j9ddr.dat" />
						</fileset>
					</resourcecount>
					<then>
						<antcall target="clean" inheritall="true" />
					</then>
					<else>
						<echo>File 'j9ddr.dat' not found; assuming JDK '${TEST_JDK_HOME}' does not support DDR.</echo>
					</else>
				</if>
			</then>
		</if>
	</target>
</project>
