<?xml version="1.0"?>

<!--
  Copyright IBM Corp. and others 2016

  This program and the accompanying materials are made available under
  the terms of the Eclipse Public License 2.0 which accompanies this
  distribution and is available at https://www.eclipse.org/legal/epl-2.0/
  or the Apache License, Version 2.0 which accompanies this distribution and
  is available at https://www.apache.org/licenses/LICENSE-2.0.

  This Source Code may also be made available under the following
  Secondary Licenses when the conditions for such availability set
  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
  General Public License, version 2 with the GNU Classpath
  Exception [1] and GNU General Public License, version 2 with the
  OpenJDK Assembly Exception [2].

  [1] https://www.gnu.org/software/classpath/license.html
  [2] https://openjdk.org/legal/assembly-exception.html

  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->

<project name="VM_Test" default="build" basedir=".">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<description>
		Build VM_Test
	</description>
	<property name="LIB" value="junit4,asm_all,javassist,testng"/>
	<import file="${TEST_ROOT}/TKG/scripts/getDependencies.xml"/>

	<!-- set global properties for this build -->
	<property name="DEST" value="${BUILD_ROOT}/functional/VM_Test" />
	<property name="jarfile" value="${DEST}/VM_Test.jar" />
	<property name="excludeFiles" location="../J9 Exclude File Support/src"/>
	<property name="data" location="./data" />
	<property name="databin" location="./data/bin" />
	<property name="properties" location="./properties" />

	<!--Properties for this particular build-->
	<property name="src" location="./src" />
	<property name="build" location="./bin" />
	<property name="transformerListener" location="${TEST_ROOT}/Utils/src"/>
	<property name="TestUtilities" location="../TestUtilities/src"/>
	<property name="classUnloadingSupportTests" location="./classUnloadingSupportTests/src"/>
	<property name="classUnloadingBin" location="./classUnloadingSupportTests/bin"/>

	<path id="build.cp">
		<fileset  dir="${LIB_DIR}/" includes="junit4.jar" />
		<fileset dir="${LIB_DIR}/" includes="asm-all.jar"/>
		<fileset dir="${LIB_DIR}/" includes="javassist.jar"/>
	</path>

	<target name="init">
		<mkdir dir="${DEST}" />
		<mkdir dir="${build}" />
		<mkdir dir="${databin}" />
		<mkdir dir="${classUnloadingBin}"/>
		<mkdir dir="${databin}/InvalidClasspathResource1" />
		<mkdir dir="${databin}/InvalidClasspathResource2" />
		<mkdir dir="${databin}/InvalidClasspathResource3" />
		<mkdir dir="${databin}/JarFileUpdateTestRunnerResource1" />
		<mkdir dir="${databin}/JarFileUpdateTestRunnerResource2" />
	</target>

	<target name="compile" depends="init,getDependentLibs" description="Using java ${JDK_VERSION} to compile the source  ">
		<echo>Ant version is ${ant.version}</echo>
		<echo>============COMPILER SETTINGS============</echo>
		<echo>===fork:                         yes</echo>
		<echo>===executable:                   ${compiler.javac}</echo>
		<echo>===debug:                        on</echo>
		<echo>===destdir:                      ${DEST}</echo>

		<javac srcdir="${data}/InvalidClasspathResource1" destdir="${databin}/InvalidClasspathResource1" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1" classpathref="build.cp" />
		<javac srcdir="${data}/InvalidClasspathResource2" destdir="${databin}/InvalidClasspathResource2" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1" classpathref="build.cp" />
		<javac srcdir="${data}/InvalidClasspathResource3" destdir="${databin}/InvalidClasspathResource3" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1" classpathref="build.cp" />
		<javac srcdir="${data}/JarFileUpdateTestRunnerResource1" destdir="${databin}/JarFileUpdateTestRunnerResource1" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1" classpathref="build.cp" />
		<javac srcdir="${data}/JarFileUpdateTestRunnerResource2" destdir="${databin}/JarFileUpdateTestRunnerResource2" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1" classpathref="build.cp" />
		<javac srcdir="${data}" destdir="${data}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1" classpathref="build.cp" >
			<include name="ParentlessChild.java" />
			<include name="ParentOfChild.java" />
		</javac>

		<property name="addExports" value="--add-modules openj9.sharedclasses --add-exports java.base/com.ibm.oti.vm=ALL-UNNAMED --add-exports java.base/com.ibm.oti.util=ALL-UNNAMED --add-exports=java.management/com.ibm.java.lang.management.internal=ALL-UNNAMED --add-exports=jdk.management/com.ibm.lang.management.internal=ALL-UNNAMED" />

		<if>
			<equals arg1="${JDK_VERSION}" arg2="8"/>
			<then>
				<javac destdir="${classUnloadingBin}" nowarn="on" debug="true" fork="true" executable="${compiler.javac}" classpathref="build.cp" encoding="ISO-8859-1">
					<src path="${classUnloadingSupportTests}"/>
					<src path="${src}"/>
					<include name="j9vm/test/classunloading/**"/>
				</javac>
			</then>
			<else>
				<javac destdir="${classUnloadingBin}" nowarn="on" debug="true" fork="true" executable="${compiler.javac}" classpathref="build.cp" encoding="ISO-8859-1">
					<src path="${classUnloadingSupportTests}"/>
					<src path="${src}"/>
					<include name="j9vm/test/classunloading/**"/>
					<compilerarg line='${addExports}' />
				</javac>
			</else>
		</if>

		<if>
			<equals arg1="${JDK_VERSION}" arg2="8"/>
			<then>
				<javac destdir="${build}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1" classpathref="build.cp">
					<src path="${src}" />
					<src path="${excludeFiles}"/>
					<src path="${TestUtilities}" />
					<exclude name="**/attachAPI/**" />
					<classpath>
						<pathelement location="${LIB_DIR}/testng.jar"/>
					</classpath>
				</javac>
			</then>
			<elseif>
					<matches string="${JDK_VERSION}" pattern="^(9|10)$$" />
				<then>
					<javac destdir="${build}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1" classpathref="build.cp">
						<src path="${src}" />
						<src path="${excludeFiles}"/>
						<src path="${TestUtilities}" />
						<exclude name="**/attachAPI/**" />
						<!-- 133609: ClassPathSettingClassLoaderTest failed in jdk9 -->
						<exclude name="**/ClassPathSettingClassLoader.java" />
						<exclude name="**/ClassPathSettingClassLoaderTest.java" />
						<compilerarg line='${addExports}' />
						<classpath>
							<pathelement location="${LIB_DIR}/testng.jar"/>
						</classpath>
					</javac>
				</then>
			</elseif>
			<else>
				<javac destdir="${build}" debug="true" fork="true" executable="${compiler.javac}" includeAntRuntime="false" encoding="ISO-8859-1" classpathref="build.cp">
					<src path="${src}" />
					<src path="${excludeFiles}"/>
					<src path="${TestUtilities}" />
					<exclude name="**/attachAPI/**" />
					<!-- 133609: ClassPathSettingClassLoaderTest failed in jdk9 -->
					<exclude name="**/ClassPathSettingClassLoader.java" />
					<exclude name="**/ClassPathSettingClassLoaderTest.java" />
					<compilerarg line='${addExports}' />
					<classpath>
						<pathelement location="${LIB_DIR}/testng.jar"/>
					</classpath>
				</javac>
			</else>
		</if>
	</target>

	<target name="dist" depends="compile" description="generate the distribution">
		<jar jarfile="${databin}/InvalidClasspathResource1.jar" filesonly="true" manifest="./META-INF/MANIFEST.MF">
			<fileset dir="${databin}/InvalidClasspathResource1"/>
		</jar>
		<jar jarfile="${databin}/InvalidClasspathResource2.jar" filesonly="true" manifest="./META-INF/MANIFEST.MF">
			<fileset dir="${databin}/InvalidClasspathResource2"/>
		</jar>
		<jar jarfile="${databin}/InvalidClasspathResource3.jar" filesonly="true" manifest="./META-INF/MANIFEST.MF">
			<fileset dir="${databin}/InvalidClasspathResource3"/>
		</jar>
		<jar jarfile="${databin}/JarFileUpdateTestRunnerResource1.jar" filesonly="true" manifest="./META-INF/MANIFEST.MF">
			<fileset dir="${databin}/JarFileUpdateTestRunnerResource1"/>
		</jar>
		<jar jarfile="${databin}/JarFileUpdateTestRunnerResource2.jar" filesonly="true" manifest="./META-INF/MANIFEST.MF">
			<fileset dir="${databin}/JarFileUpdateTestRunnerResource2"/>
		</jar>
		<jar jarfile="${jarfile}" filesonly="true" manifest="./META-INF/MANIFEST.MF">
			<fileset dir="${build}" />
			<fileset dir="${excludeFiles}"/>
			<fileset dir="${src}/../" includes="*.properties,*.xml" />
			<fileset dir="${databin}"/>
			<fileset dir="${data}" includes="ParentlessChild.class" />
			<fileset dir="${properties}"/>
		</jar>
		<jar jarfile="${DEST}/classestoload.jar" filesonly="true">
			<fileset dir="${classUnloadingBin}"/>
			<fileset dir="${classUnloadingSupportTests}"/>
			<fileset dir="${src}">
				<include name="j9vm/test/classunloading/**"/>
			</fileset>
		</jar>
		<copy todir="${DEST}">
			<fileset dir="${src}/../" includes="*.xml" />
			<!--copy SharedClassesSysVTesting perl script -->
			<fileset dir="${src}/../" includes=",**/*.pl" />
			<fileset dir="${src}/../" includes="*.mk" />
		</copy>
	</target>

	<target name="clean" depends="dist" description="clean up">
		<!-- Delete the ${build} directory trees -->
		<delete dir="${build}" />
		<delete>
			<fileset dir="${data}" includes="**/*.class" />
		</delete>
		<delete dir="${databin}" />
		<delete dir="${classUnloadingBin}" />
	</target>

	<target name="check-jar">
		<available file="${jarfile}" property="jar.exist"/>
	</target>

	<target name="build" depends="check-jar" unless="jar.exist">
		<if>
			<or>
				<equals arg1="${JDK_IMPL}" arg2="ibm"  />
				<equals arg1="${JDK_IMPL}" arg2="openj9" />
			</or>
			<then>
				<antcall target="clean" inheritall="true" />
			</then>
		</if>
	</target>
</project>
