<?xml version="1.0" encoding="UTF-8" standalone="no" ?>

<!--
  Copyright (c) 2001, 2018 IBM Corp. and others

  This program and the accompanying materials are made available under
  the terms of the Eclipse Public License 2.0 which accompanies this
  distribution and is available at https://www.eclipse.org/legal/epl-2.0/
  or the Apache License, Version 2.0 which accompanies this distribution and
  is available at https://www.apache.org/licenses/LICENSE-2.0.

  This Source Code may also be made available under the following
  Secondary Licenses when the conditions for such availability set
  forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
  General Public License, version 2 with the GNU Classpath
  Exception [1] and GNU General Public License, version 2 with the
  OpenJDK Assembly Exception [2].

  [1] https://www.gnu.org/software/classpath/license.html
  [2] http://openjdk.java.net/legal/assembly-exception.html

  SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->

<!DOCTYPE suite SYSTEM "cmdlinetester.dtd">

<suite id="J9 GC Regression Tests" timeout="900">

 <!-- Arguments used in all tests -->
 <!-- "-XX:fatalassert" should be re-added to this ARGS_FOR_ALL_TESTS once it is properly supported on non-sidecar specs (see CMVC 130850) -->
 <variable name="ARGS_FOR_ALL_TESTS" value=" -Dcom.ibm.tools.attach.enable=no -Xdump:system:events=systhrow,filter=java/lang/OutOfMemoryError" />
 <variable name="CP" value="-cp $TESTSJARPATH$" />
 <variable name="XINT" value="-Xint" />
 
 <!-- Arguments specific to the class unloading tests -->
 <variable name="PROGRAM" value="com.ibm.tests.garbagecollector.TestClassLoaderMain" />
 <variable name="MEM" value="4m" />
 <variable name="VMARGS" value="-Xmx$MEM$ -Xms$MEM$ -Xalwaysclassgc -Xdisableexcessivegc" />
 <variable name="EXTRAVMARG" value="-Xgc:fvtest=forceFinalizeClassLoaders" />
 <variable name="EXCESSIVE_STRING" value="excessive gc activity detected, will fail on allocate" />
 
 <!-- by default, allocation context count is based on the number of CPUs but this can cause non-deterministic pass/fail conditions -->
 <variable name="RT_ALLOCATION_CONTEXT_ARG" value=" " />
 <variable name="RT_ALLOCATION_CONTEXT_ARG" value="-XXgc:allocationContextCount=1" platforms="Mode301" />

 <!-- CMVC 152737: Verify that we can bootstrap the VM even with odd heap sizing parameters (proves that we correctly and consistently round Xms and Xmx) -->
 <test id="Odd memory parameters are accepted">
 	<command>$EXE$ $XINT$ $RT_ALLOCATION_CONTEXT_ARG$ -Xmx4500123 -Xms4500123 NON_EXISTENT_CLASS_TO_TEST_BOOTSTRAP</command>
 	<output regex="no" type="success">NON_EXISTENT_CLASS_TO_TEST_BOOTSTRAP</output><!-- VM bootstrapped but this isn't a real class -->
 	<output regex="no" type="failure">JVMJ9GC019E</output><!-- JVMJ9GC019E -Xms too large for -Xmx (happens if we applied inconsistent rounding) -->
 </test>

 <!-- CMVC 137486: Verify that we can bootstrap the VM with default memory parameters under the gencon policy (since gencon uses multiple subspaces,
      it is good at catching subtle sizing bugs which tend to be related to default heap sizing -->
 <test id="Default memory parameters work with gencon">
 	<command>$EXE$ $XINT$ -Xgcpolicy:gencon NON_EXISTENT_CLASS_TO_TEST_BOOTSTRAP</command>
 	<output regex="no" type="success">NON_EXISTENT_CLASS_TO_TEST_BOOTSTRAP</output><!-- VM bootstrapped but this isn't a real class -->
 	<output regex="no" type="success">JVMJ9VM007E</output><!-- Command line option not recognized (will occur if this is a spec without gencon) -->
 </test>
      
 <!-- CMVC 137192: Verify that invalid percentage values are rejected as input.  A percentage value can
 	  range from 0.00 to 1.00, and has a precision of two decimal digits.  For example, 0.30 is a valid
 	  percentage value, whereas, 1a, 1.0a, and 1.00a are considered invalid input -->
 <test id="-Xmaxf1a">
 	<command>$EXE$ -Xmaxf1a -version</command>
 	<output regex="no" type="success">JVMJ9GC035E</output><!-- -Xmaxf must be followed by a number -->
 	<output regex="no" type="success">JVMJ9VM007E</output><!--  Command-line option unrecognised, required since -Xmaxf is not supported when gc_realtime is enabled -->
 	<output regex="no" type="success">JVMJ9VM081W</output><!--  Malformed option value warning stating that the option contains trailing characters which have been ignored -->
 	<output regex="no" type="success">JVMVMUT010W</output><!--  Malformed option value warning stating that the option contains trailing characters which have been ignored -->
 </test>
 <test id="-Xmaxf1.0a">
 	<command>$EXE$ -Xmaxf1.0a -version</command>
 	<output regex="no" type="success">JVMJ9GC035E</output><!-- -Xmaxf must be followed by a number -->
 	<output regex="no" type="success">JVMJ9VM007E</output><!--  Command-line option unrecognised, required since -Xmaxf is not supported when gc_realtime is enabled -->
 	<output regex="no" type="success">JVMJ9VM081W</output><!--  Malformed option value warning stating that the option contains trailing characters which have been ignored -->
 	<output regex="no" type="success">JVMVMUT010W</output><!--  Malformed option value warning stating that the option contains trailing characters which have been ignored -->
 </test>
 <test id="-Xmaxf1.00a">
 	<command>$EXE$ -Xmaxf1.00a -version</command>
 	<output regex="no" type="success">JVMJ9GC035E</output><!-- -Xmaxf must be followed by a number -->
	<output regex="no" type="success">JVMJ9VM007E</output><!--  Command-line option unrecognised, required since -Xmaxf is not supported when gc_realtime is enabled -->
 	<output regex="no" type="success">JVMJ9VM081W</output><!--  Malformed option value warning stating that the option contains trailing characters which have been ignored -->
  	<output regex="no" type="success">JVMVMUT010W</output><!--  Malformed option value warning stating that the option contains trailing characters which have been ignored -->
 </test>
 <test id="-Xmaxf0.50a">
 	<command>$EXE$ -Xmaxf0.50a -version</command>
 	<output regex="no" type="success">JVMJ9GC035E</output><!-- -Xmaxf must be followed by a number -->
 	<output regex="no" type="success">JVMJ9VM007E</output><!--  Command-line option unrecognised, required since -Xmaxf is not supported when gc_realtime is enabled -->
 	<output regex="no" type="success">JVMJ9VM081W</output><!--  Malformed option value warning stating that the option contains trailing characters which have been ignored -->
  	<output regex="no" type="success">JVMVMUT010W</output><!--  Malformed option value warning stating that the option contains trailing characters which have been ignored -->
 </test>
 <test id="-Xmaxf0.501">
 	<command>$EXE$ -Xmaxf0.501 -version</command>
 	<output regex="no" type="success">JVMJ9GC035E</output><!-- -Xmaxf must be followed by a number -->
 	<output regex="no" type="success">JVMJ9VM007E</output><!--  Command-line option unrecognised, required since -Xmaxf is not supported when gc_realtime is enabled -->
 	<output regex="no" type="success">JVMJ9VM081W</output><!--  Malformed option value warning stating that the option contains trailing characters which have been ignored -->
 	<output regex="no" type="success">JVMVMUT010W</output><!--  Malformed option value warning stating that the option contains trailing characters which have been ignored -->
 </test>
 <test id="-Xmaxf1.01">
 	<command>$EXE$ -Xmaxf1.01 -version</command>
 	<output regex="no" type="success">JVMJ9GC033E</output><!-- -Xmaxf value must be between 0.00 and 1.00 (inclusive) -->
 	<output regex="no" type="success">JVMJ9VM007E</output><!--  Command-line option unrecognised, required since -Xmaxf is not supported when gc_realtime is enabled -->
 </test>
 <test id="-Xmaxf2">
 	<command>$EXE$ -Xmaxf2 -version</command>
 	<output regex="no" type="success">JVMJ9GC033E</output><!-- -Xmaxf value must be between 0.00 and 1.00 (inclusive) -->
 	<output regex="no" type="success">JVMJ9VM007E</output><!--  Command-line option unrecognised, required since -Xmaxf is not supported when gc_realtime is enabled -->
 </test>
 <test id="-Xmaxf0.75">
 	<command>$EXE$ -Xmaxf0.75 -version</command>
 	<output regex="no" type="success">version</output><!-- Ensure 0.75 is accepted as a valid input -->
 	<output regex="no" type="success">JVMJ9VM007E</output><!--  Command-line option unrecognised, required since -Xmaxf is not supported when gc_realtime is enabled -->
 </test>
 <test id="-Xmaxf1">
 	<command>$EXE$ -Xmaxf1 -version</command>
 	<output regex="no" type="success">version</output><!-- Ensure 1 is accepted as a valid input -->
 	<output regex="no" type="success">JVMJ9VM007E</output><!--  Command-line option unrecognised, required since -Xmaxf is not supported when gc_realtime is enabled -->
 </test>
 <test id="-Xmaxf1.0">
 	<command>$EXE$ -Xmaxf1.0 -version</command>
 	<output regex="no" type="success">version</output><!-- Ensure 1.0 is accepted as a valid input -->
 	<output regex="no" type="success">JVMJ9VM007E</output><!--  Command-line option unrecognised, required since -Xmaxf is not supported when gc_realtime is enabled -->
 </test>
 <test id="-Xmaxf1.00">
 	<command>$EXE$ -Xmaxf1.00 -version</command>
 	<output regex="no" type="success">version</output<!-- Ensure 1.00 is accepted as a valid input -->
 	<output regex="no" type="success">JVMJ9VM007E</output><!-- Command-line option unrecognised, required since -Xmaxf is not supported when gc_realtime is enabled -->
 </test>

 <!-- VM Design 1869:  verify that fvtest options for verifyHeapAbove and verifyHeapBelow work as expected -->
 <test id="verifyHeapAbove works">
 	<command>$EXE$ $XINT$ -Xgc:fvtest=verifyHeapAbove=1 NON_EXISTENT_CLASS_TO_TEST_BOOTSTRAP</command>
 	<output regex="no" type="success">NON_EXISTENT_CLASS_TO_TEST_BOOTSTRAP</output> <!-- managed to bootstrap -->
 	<output regex="no" type="failure">JVMJ9VM015W</output> <!-- failed to bootstrap -->
 </test>
 <test id="verifyHeapAbove and verifyHeapBelow force failure">
 	<command>$EXE$ $XINT$ -Xgc:fvtest=verifyHeapAbove=2g,fvtest=verifyHeapBelow=2g NON_EXISTENT_CLASS_TO_TEST_BOOTSTRAP</command>
 	<output regex="no" type="success">JVMJ9VM015W</output> <!-- should fail to bootstrap -->
 	<output regex="no" type="failure">NON_EXISTENT_CLASS_TO_TEST_BOOTSTRAP</output> <!-- shouldn't bootstrap -->
 </test>
  
 <!-- Tests that we either succeed or fail gracefully when trying to bootstrap with a 6G heap.
 	This was originally created for CMVC 134503 since we were concerned that we would lose the ability 
 	top bootstrap compressed refs with a >4G heap, at some point.  Timeout or crash is incorrect. -->
 <test id="-Xmx6g either succeeds or fails with the appropriate error message">
 	<command>$EXE$ $XINT$ -Xmx6g -Xms6g -Xdump:none NON_EXISTENT_CLASS_TO_TEST_BOOTSTRAP</command>
	<output regex="no" type="success"></output> <!-- take any output as valid except Unhandled exception and ASSERTION FAILED -->
 	<output regex="no" type="success">JVMJ9GC028E</output> <!-- JVMJ9GC028E Option too large: '-Xmx6g' -->
 	<output regex="no" type="success">JVMJ9VM015W</output> <!-- JVMJ9VM015W Initialization error for library j9gc25(5): Failed to allocate default memory space -->
 	<output regex="no" type="success">NON_EXISTENT_CLASS_TO_TEST_BOOTSTRAP</output>
 	<output regex="no" type="success">java.lang.OutOfMemoryError</output>
 	<output regex="no" type="failure">java.lang.OutOfMemoryError: Java heap space</output>
 	<output regex="no" type="failure">Unhandled exception</output>
 	<output regex="no" type="failure">ASSERTION FAILED</output>
 </test>
 
 <!-- Tests that we can bootstrap and  run a few GCs when -Xsoftrefthreshold0 is specified (we use the contraction
 	test class since it does lots of allocation and then calls System.gc() several times which is exactly what we 
 	need to test) -->
 <test id="-Xsoftrefthreshold0 can bootstrap and run without assertion failures">
 	<command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -Xsoftrefthreshold0 $RT_ALLOCATION_CONTEXT_ARG$ -Xmx16m -Xms1m -Xgc:globalMaximumContraction=100 -Xgc:globalMinimumContraction=99 $CP$ com.ibm.tests.garbagecollector.TestContractionMain --noContract</command>
 	<!-- we don't really care if this test printed PASS or FAIL since we are testing a more generic situation than the test was originally
 		built for and it will differ across specs due to different default behaviour or contraction limits -->
 	<output regex="no" type="success">PASS</output>
 	<output regex="no" type="success">FAIL</output>
 	<output regex="no" type="success">Test error</output>
 	<output regex="no" type="failure">ASSERTION FAILED</output>
 </test>
 
 <!-- Tests Work Packet Overflow handler - limit number of available work packets to minimum  -->
 <test id="Work PacketOverflow can be handled without assertion failures">
 	<command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -Xgcworkpackets20 -Xsoftrefthreshold0 $RT_ALLOCATION_CONTEXT_ARG$ -Xmx16m -Xms1m -Xgc:globalMaximumContraction=100 -Xgc:globalMinimumContraction=99 $CP$ com.ibm.tests.garbagecollector.TestContractionMain --noContract</command>
 	<!-- we don't really care if this test printed PASS or FAIL since we are testing a more generic situation than the test was originally
 		built for and it will differ across specs due to different default behaviour or contraction limits -->
 	<output regex="no" type="success">PASS</output>
 	<output regex="no" type="success">FAIL</output>
 	<output regex="no" type="success">Test error</output>
 	<output regex="no" type="failure">ASSERTION FAILED</output>
 </test>
 
 <!-- Tests Remembered Set Overflow handler - limit maximum size of RS  -->
 <test id="Remembered Set Overflow can be handled without assertion failures">
 	<command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -Xmrx1K -Xsoftrefthreshold0 $RT_ALLOCATION_CONTEXT_ARG$ -Xmx16m -Xms1m -Xgc:globalMaximumContraction=100 -Xgc:globalMinimumContraction=99 $CP$ com.ibm.tests.garbagecollector.TestContractionMain --noContract</command>
 	<!-- we don't really care if this test printed PASS or FAIL since we are testing a more generic situation than the test was originally
 		built for and it will differ across specs due to different default behaviour or contraction limits -->
 	<output regex="no" type="success">PASS</output>
 	<output regex="no" type="success">FAIL</output>
 	<output regex="no" type="success">Test error</output>
	<output regex="no" type="success">JVMJ9VM007E</output>
 	<output regex="no" type="failure">ASSERTION FAILED</output>
 </test>
 
 <!-- Tests Scavenger Backout - push every 3rd scavege be backout  -->
 <test id="Scavenger Backout can be handled without assertion failures">
 	<command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -Xgc:fvtest=forceScavengerBackout -Xsoftrefthreshold0 $RT_ALLOCATION_CONTEXT_ARG$ -Xmx16m -Xms1m -Xgc:globalMaximumContraction=100 -Xgc:globalMinimumContraction=99 $CP$ com.ibm.tests.garbagecollector.TestContractionMain --noContract</command>
 	<!-- we don't really care if this test printed PASS or FAIL since we are testing a more generic situation than the test was originally
 		built for and it will differ across specs due to different default behaviour or contraction limits -->
 	<output regex="no" type="success">PASS</output>
 	<output regex="no" type="success">FAIL</output>
 	<output regex="no" type="success">Test error</output>
 	<output regex="no" type="success">JVMJ9VM015W</output>
 	<output regex="no" type="failure">ASSERTION FAILED</output>
 </test>
 
 <!-- Tests Run-Time object alignment for Compressed Refs. Non-CR platforms just reports Unknown option -->
 <test id="Run Time object alignment for Compressed Refs can be handled without assertion failures">
 	<command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -XXgc:forcedShiftingCompressionAmount=4 -Xsoftrefthreshold0 $RT_ALLOCATION_CONTEXT_ARG$ -Xmx16m -Xms1m -Xgc:globalMaximumContraction=100 -Xgc:globalMinimumContraction=99 $CP$ com.ibm.tests.garbagecollector.TestContractionMain --noContract</command>
 	<!-- we don't really care if this test printed PASS or FAIL since we are testing a more generic situation than the test was originally
 		built for and it will differ across specs due to different default behaviour or contraction limits -->
 	<output regex="no" type="success">PASS</output>
 	<output regex="no" type="success">FAIL</output>
 	<output regex="no" type="success">Test error</output>
 	<output regex="no" type="success">JVMJ9VM015W</output>
 	<output regex="no" type="success">JVMJ9GC040E</output>
 	<output regex="no" type="failure">ASSERTION FAILED</output>
 </test>
 
 <!-- Tests for excessive GC handling -->
 <!-- This test should cause excessive with the FVT option and force an OOM.  We must make sure that the verbose log
 includes the excessive and the probgram output doesn't claim successful execution -->
 <!-- We do this as two tests since we want to see both parts of this output individually -->
 <!-- -Xdump:none so that the OOM doesn't produce any diagnostic files -->
 <test id="Excessive GC throws OOM">
 	<echo value="CMVC 148977:  Excessive GC throws OOM may fail if there is other activity on the machine - at least 5 GCs are required, in the 20 second test" />
 	<!-- does the test fail to run (thus implying that we encountered excessive GC)? -->
 	<command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -Xdump:none -Xms8m -Xmx8m -Xgc:fvtest=forceExcessiveAllocFailureAfter=5 -verbose:gc -Xverbosegclog:foo.log $CP$ com.ibm.tests.garbagecollector.SpinAllocate 20</command>
 	<output regex="no" type="failure">Test ran to completion</output>
 	<output regex="no" type="success">java.lang.OutOfMemoryError</output>
 </test>
 <test id="Excessive GC appears in verbose log">
 	<!-- did the test record this excessive behaviour in the verbose logs? -->
 	<command command="grep">
 		<arg>$EXCESSIVE_STRING$</arg>
 		<arg>foo.log</arg>
 	</command>
 	<output regex="no" type="success">$EXCESSIVE_STRING$</output>
 </test>
 
 <!-- Tests for verbose gc -->
 <test id="-verbose:gc">
  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -version</command>
  <output regex="no" type="success">&lt;/verbosegc&gt;</output>
 </test>
 <test id="-verbose:gc -Xverbosegclog creates file">
  <exec command="sh">
  	<arg>-c</arg>
  	<arg>rm verbosegc.????????.*.*.txt static_temp.txt</arg>
  </exec>
  <exec command="$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog -version" />
  <!-- This use of static_temp.txt is a hack to account for how the "command" tag seems to be implemented differently from exec
       to the point where getting consistent wildcard use on different shells is not possible -->
  <exec command="sh">
  	<arg>-c</arg>
  	<arg>mv verbosegc.????????.*.*.txt static_temp.txt</arg>
  </exec>
  <command>cat static_temp.txt</command>
  <output regex="no" type="success">&lt;/verbosegc&gt;</output>
 </test>
 <test id="-verbose:gc -Xverbosegclog not on console">
  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog -version</command>
  <!-- verbose GC output shouldn't appear on the console -->
  <output regex="no" type="failure">&lt;verbosegc</output>
  <output regex="no" type="success"></output>
 </test>
 <test id="-verbose:gc -Xverbosegclog:foo.log">
  <exec command="rm foo.log" />
  <exec command="$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog:foo.log -version" />
  <command>cat foo.log</command>
  <output regex="no" type="success">&lt;/verbosegc&gt;</output>
 </test>
 <test id="-verbose:gc -Xverbosegclog:foo.log,10,10 - first file">
  <!-- check the first file created is named foo.log.001 -->
  <exec command="rm foo.log.*" />
  <exec command="$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog:foo.log,10,10 -version" />
  <command>cat foo.log.001</command>
  <output regex="no" type="success">&lt;/verbosegc&gt;</output>
 </test>
 <test id="-verbose:gc -Xverbosegclog:foo.log,10,10 - second file">
  <!-- check the second file created is named foo.log.002 -->
  <exec command="rm foo.log.*" />
  <exec command="$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog:foo.log,10,10 -version" />
  <exec command="$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog:foo.log,10,10 -version" />
  <command>cat foo.log.002</command>
  <output regex="no" type="success">&lt;/verbosegc&gt;</output>
 </test>
 <test id="-verbose:gc -Xverbosegclog:foo.log,3,10 - oldest file">
  <!-- check the second file created is named foo.log.002 -->
  <exec command="rm foo.log.*" />
  <exec command="touch foo.log.002" /> 
  <exec command="sleep 2" /> 
  <exec command="touch foo.log.001" />
  <exec command="touch foo.log.003" />
  <exec command="$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog:foo.log,3,10 -version" />
  <command>cat foo.log.002</command>
  <output regex="no" type="success">&lt;/verbosegc&gt;</output>
 </test>
 <test id="-verbose:gc -Xverbosegclog:foo.#.log,10,10 - use hash">
  <!-- check the file created is named foo.001.log -->
  <exec command="rm foo.*.log" />
  <exec command="$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog:foo.#.log,10,10 -version" />
  <command>cat foo.001.log</command>
  <output regex="no" type="success">&lt;/verbosegc&gt;</output>
 </test>
 <test id="-verbose:gc -Xverbosegclog:foo.%#.log,10,10 - use percent hash">
  <!-- check the file created is named foo.001.log -->
  <exec command="rm foo.*.log" />
  <exec command="$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog:foo.%#.log,10,10 -version" />
  <command>cat foo.001.log</command>
  <output regex="no" type="success">&lt;/verbosegc&gt;</output>
 </test>
 <test id="-verbose:gc -Xverbosegclog:foo.%%#.log,10,10 - use percent percent hash">
  <!-- check the file created is named foo.%001.log -->
  <exec command="rm foo.*.log" />
  <exec command="$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog:foo.%%#.log,10,10 -version" />
  <command>cat foo.%001.log</command>
  <output regex="no" type="success">&lt;/verbosegc&gt;</output>
 </test>
 <test id="-verbose:gc -Xverbosegclog:foo.#.log - use hash without rotating logs">
  <!-- check the file created is named foo.#.log -->
  <exec command="rm foo.*.log" />
  <exec command="$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog:foo.#.log -version" />
  <command>cat foo.#.log</command>
  <output regex="no" type="success">&lt;/verbosegc&gt;</output>
 </test>
 
 <!-- CMVC 178000 - disable until a new version of the test can be added after the GC promotes
 <test id="-verbose:gc -Xverbosegclog:<invalid> - use a file name in a directory that doesn't exist">
  <exec command="rm foo.*.log" />
  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog:foo/bar/foo.log -version</command>
  <output regex="yes" type="success">JVMJ9GC063E.*'foo/bar/foo\.log'.*</output>
  <output regex="no" type="failure">version</output>
 </test>
  -->
  
 <test id="-verbose:gc -Xverbosegclog:<verylong>,10,10 - use a very long log file name">
  <exec command="rm foo.*.log" />
  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog:foo.#######################################################################################################################################################################################################################################################################################################################.log,10,10 -version</command>
  <!-- two success modes -- unable to open file (with correct name), or version printed -->
  <!-- use a regex to allow for translated messages -->
  <output regex="yes" type="success">JVMJ9GC063E.*'foo\.001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001\.log'.*</output>
  <output regex="no" type="success">version</output>
 </test>
 <test id="-verbose:gc -Xcheck:memory - check for memory corruption">
  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Dibm.java9.forceCommonCleanerShutdown=true -Xcheck:memory:quick,ignoreUnfreedCallsite=zip/:dbgwrapper:unknown:wrapper -version</command>
  <output regex="no" type="required">&lt;/verbosegc&gt;</output>
  <output regex="no" type="success">All allocated blocks were freed.</output>
  <!-- allow memory leaks since the JIT leaks, unfortunately -->
  <output regex="yes" type="success">[0-9]* allocated blocks totaling [0-9]* bytes were not freed before shutdown!</output>
  <output regex="no" type="failure">Unhandled exception</output>
 </test>
 <test id="-verbose:gc -Xcheck:memory -Xverbosegclog:foo.log - check for memory corruption">
  <exec command="rm foo.*.log" />
  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog -Dibm.java9.forceCommonCleanerShutdown=true -Xcheck:memory:quick,ignoreUnfreedCallsite=zip/:dbgwrapper:unknown:wrapper -version</command>
  <output regex="no" type="success">All allocated blocks were freed.</output>
  <!-- allow memory leaks since the JIT leaks, unfortunately -->
  <output regex="yes" type="success">[0-9]* allocated blocks totaling [0-9]* bytes were not freed before shutdown!</output>
  <output regex="no" type="failure">Unhandled exception</output>
 </test>

 <!-- CMVC 158304 virtualized machines which over commit the CPUs cause this test to fail
      Tests related to verifying that heap contraction arguments work as expected
 <test id="Run with arguments which will make contraction very unlikely">
  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -Xmx16m -Xms1m -Xminf0.01 -Xmaxf0.1 -Xmaxe512k -Xgc:globalMaximumContraction=100 -Xgc:globalMinimumContraction=99 $CP$ com.ibm.tests.garbagecollector.TestContractionMain --verbose --noContract</command>
  <output regex="no" type="success">PASS</output>
 </test>
 <test id="Run with arguments which will make contraction occur very quickly">
  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -Xmx16m -Xms1m -Xminf0.01 -Xmaxf0.1 -Xmaxe512k -Xgc:globalMaximumContraction=100 -Xgc:globalMinimumContraction=1 $CP$ com.ibm.tests.garbagecollector.TestContractionMain --verbose --fastContract</command>
  <output regex="no" type="success">PASS</output>
 </test>
 <test id="Run with arguments which will make contraction happen slowly">
  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -Xmx16m -Xms1m -Xminf0.01 -Xmaxf0.1 -Xmaxe512k -Xgc:globalMaximumContraction=5 -Xgc:globalMinimumContraction=1 $CP$ com.ibm.tests.garbagecollector.TestContractionMain --verbose --slowContract</command>
  <output regex="no" type="success">PASS</output>
 </test>
 <test id="Run with arguments which will make contraction occur very quickly and will cause workpacket overflow">
  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -Xgcworkpackets1 -Xmx16m -Xms1m -Xminf0.01 -Xmaxf0.1 -Xmaxe512k -Xgc:globalMaximumContraction=100 -Xgc:globalMinimumContraction=1 $CP$ com.ibm.tests.garbagecollector.TestContractionMain --verbose --fastContract</command>
  <output regex="no" type="success">PASS</output>
 </test>
  -->

 <!-- Tests related to heavy classunloading -->
 <test id="Unload lots of classes using normal behaviour (JIT Disabled)">
  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ $VMARGS$ $RT_ALLOCATION_CONTEXT_ARG$ $CP$ $PROGRAM$ - - -</command>
  <output regex="no" "success">Successful test run!</output>
 </test>
 <test id="Unload lots of classes using FVT stress argument to force finalization (JIT Disabled)">
  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ $VMARGS$ $EXTRAVMARG$ $RT_ALLOCATION_CONTEXT_ARG$ $CP$ $PROGRAM$ - - -</command>
  <output regex="no" type="success">Successful test run!</output>
 </test>
 <test id="Unload lots of classes using normal behaviour (with JIT if JIT is Enabled)">
  <command>$EXE$ $ARGS_FOR_ALL_TESTS$ $VMARGS$ $RT_ALLOCATION_CONTEXT_ARG$ $CP$ $PROGRAM$ - - -</command>
  <output regex="no" type="success">Successful test run!</output>
  <!-- let the test pass even if we couldn't load the JIT since this test failing when the JIT can't compile is not a useful piece of information -->
  <output regex="no" type="success">Cannot load library required by: -Xjit</output>
 </test>
 <test id="Unload lots of classes using FVT stress argument to force finalization (with JIT if JIT is Enabled)">
  <command>$EXE$ $ARGS_FOR_ALL_TESTS$ $VMARGS$ $EXTRAVMARG$ $RT_ALLOCATION_CONTEXT_ARG$ $CP$ $PROGRAM$ - - -</command>
  <output regex="no" type="success">Successful test run!</output>
  <!-- let the test pass even if we couldn't load the JIT since this test failing when the JIT can't compile is not a useful piece of information -->
  <output regex="no" type="success">Cannot load library required by: -Xjit</output>
 </test>

	<!-- Ensure that none of these tests left core files behind (introduced because -XX:fatalassert isn't properly supported in all specs) -->
	<test id="Ensure no core files have been produced by the preceding tests">
		<command command="sh">
			<arg>-c</arg>
			<arg>ls</arg>
		</command>
		<output regex="no" type="success"></output>
		<output regex="yes" type="failure">core.*</output>
	</test>
</suite>
