/*******************************************************************************
 * Copyright (c) 2001, 2014 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_ibm_j9ddr_corereaders_debugger_JniMemory */

#ifndef _Included_com_ibm_j9ddr_corereaders_debugger_JniMemory
#define _Included_com_ibm_j9ddr_corereaders_debugger_JniMemory
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_ibm_j9ddr_corereaders_debugger_JniMemory
 * Method:    getByteAt
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_com_ibm_j9ddr_corereaders_debugger_JniMemory_getByteAt
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_ibm_j9ddr_corereaders_debugger_JniMemory
 * Method:    getByteOrder
 * Signature: ()Ljava/nio/ByteOrder;
 */
JNIEXPORT jobject JNICALL Java_com_ibm_j9ddr_corereaders_debugger_JniMemory_getByteOrder
  (JNIEnv *, jobject);

/*
 * Class:     com_ibm_j9ddr_corereaders_debugger_JniMemory
 * Method:    getBytesAt
 * Signature: (J[B)I
 */
JNIEXPORT jint JNICALL Java_com_ibm_j9ddr_corereaders_debugger_JniMemory_getBytesAt__J_3B
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     com_ibm_j9ddr_corereaders_debugger_JniMemory
 * Method:    getBytesAt
 * Signature: (J[BII)I
 */
JNIEXPORT jint JNICALL Java_com_ibm_j9ddr_corereaders_debugger_JniMemory_getBytesAt__J_3BII
  (JNIEnv *, jobject, jlong, jbyteArray, jint, jint);

/*
 * Class:     com_ibm_j9ddr_corereaders_debugger_JniMemory
 * Method:    getIntAt
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_ibm_j9ddr_corereaders_debugger_JniMemory_getIntAt
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_ibm_j9ddr_corereaders_debugger_JniMemory
 * Method:    getLongAt
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_ibm_j9ddr_corereaders_debugger_JniMemory_getLongAt
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_ibm_j9ddr_corereaders_debugger_JniMemory
 * Method:    getShortAt
 * Signature: (J)S
 */
JNIEXPORT jshort JNICALL Java_com_ibm_j9ddr_corereaders_debugger_JniMemory_getShortAt
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_ibm_j9ddr_corereaders_debugger_JniMemory
 * Method:    isExecutable
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_com_ibm_j9ddr_corereaders_debugger_JniMemory_isExecutable
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_ibm_j9ddr_corereaders_debugger_JniMemory
 * Method:    isReadOnly
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_com_ibm_j9ddr_corereaders_debugger_JniMemory_isReadOnly
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_ibm_j9ddr_corereaders_debugger_JniMemory
 * Method:    isShared
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_com_ibm_j9ddr_corereaders_debugger_JniMemory_isShared
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_ibm_j9ddr_corereaders_debugger_JniMemory
 * Method:    readAddress
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_ibm_j9ddr_corereaders_debugger_JniMemory_readAddress
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_ibm_j9ddr_corereaders_debugger_JniMemory
 * Method:    getValidRegionVirtual
 * Signature: (JJ)Lcom/ibm/j9ddr/corereaders/memory/MemoryRange;
 */
JNIEXPORT jobject JNICALL Java_com_ibm_j9ddr_corereaders_debugger_JniMemory_getValidRegionVirtual
  (JNIEnv *, jclass, jlong, jlong);

#ifdef __cplusplus
}
#endif
#endif
