################################################################################
# Copyright (c) 2017, 2019 IBM Corp. and others
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which accompanies this
# distribution and is available at https://www.eclipse.org/legal/epl-2.0/
# or the Apache License, Version 2.0 which accompanies this distribution and
# is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# This Source Code may also be made available under the following
# Secondary Licenses when the conditions for such availability set
# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
# General Public License, version 2 with the GNU Classpath
# Exception [1] and GNU General Public License, version 2 with the
# OpenJDK Assembly Exception [2].
#
# [1] https://www.gnu.org/software/classpath/license.html
# [2] http://openjdk.java.net/legal/assembly-exception.html
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
################################################################################

set(J9VM_JCL_BIN_DIR "${CMAKE_CURRENT_BINARY_DIR}")

add_tracegen(j9jcl.tdf)

add_library(jclse SHARED
	${CMAKE_CURRENT_BINARY_DIR}/ut_j9jcl.c
)

target_include_directories(jclse
	PRIVATE
		${CMAKE_CURRENT_SOURCE_DIR}
		${CMAKE_CURRENT_SOURCE_DIR}/common
		${j9vm_SOURCE_DIR}/shared_common/include
		${CMAKE_CURRENT_BINARY_DIR}
)

if(OMR_HOST_OS STREQUAL "win")
	target_include_directories(jclse INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/win32)
else()
	target_include_directories(jclse INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/unix)
endif()

# Generate constant pool files
if(J9VM_IS_NON_STAGING)
	set(CONST_POOL_OUT_DIR "${j9vm_BINARY_DIR}")

	# List of files generated by J9VMCPTool
	set(gen_constpool_files "${CONST_POOL_OUT_DIR}/j9vmconstantpool.c")
	if(OMR_HOST_OS STREQUAL "win")
		set(JAVA_PATH_SEP ";")
	else()
		set(JAVA_PATH_SEP ":")
	endif()

	# Dump the current cmake cache to text file
	# We could just use CMakeCache.txt, but this way filters out advanced/internal variables and comments
	add_custom_command(
		OUTPUT parsed_cache.txt
		COMMAND "${CMAKE_COMMAND}" -N -L > "${CMAKE_CURRENT_BINARY_DIR}/parsed_cache.txt"
		VERBATIM
		WORKING_DIRECTORY "${CMAKE_BINARY_DIR}"
	)
	add_custom_command(
		OUTPUT
			${gen_constpool_files}
		COMMAND "${Java_JAVA_EXECUTABLE}"
			-cp "$<TARGET_PROPERTY:j9vmcp,JAR_FILE>${JAVA_PATH_SEP}$<TARGET_PROPERTY:objectmodel,JAR_FILE>"
			com.ibm.oti.VMCPTool.Main
				-rootDir "${j9vm_SOURCE_DIR}"
				-outputDir "${CONST_POOL_OUT_DIR}"
				-cmakeCache "${CMAKE_CURRENT_BINARY_DIR}/parsed_cache.txt"
				-version ${JAVA_SPEC_VERSION}
		VERBATIM
		DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/parsed_cache.txt" j9vmcp objectmodel
	)
	add_custom_target(run_cptool
		DEPENDS ${gen_constpool_files}
	)
	add_dependencies(j9vm_interface run_cptool)
	set(cp_file_name ${CONST_POOL_OUT_DIR}/j9vmconstantpool.c)
	set_source_files_properties(${cp_file_name} PROPERTIES GENERATED TRUE)
	target_sources(jclse PRIVATE ${cp_file_name})
else()
	# Create dummy target for run_cptool
	add_custom_target(run_cptool)
	target_sources(jclse PRIVATE j9vmconstantpool.c)
endif()

target_link_libraries(jclse
	PRIVATE
		j9vm_interface
		j9vm_gc_includes

		omrsig
		j9hookable
		j9zlib
		j9util
		j9utilcore
		j9avl
		j9hashtable
		j9pool
		j9thr
		j9vmi
		sunvmi
)

target_sources(jclse
	PRIVATE
		${CMAKE_CURRENT_SOURCE_DIR}/common/acccont.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/annparser.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/attach.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/bootstrp.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/bpinit.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/clsldr.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/common/com_ibm_jvm_Stats.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/com_ibm_oti_vm_VM.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/compiler.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/dump.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/exhelp
		${CMAKE_CURRENT_SOURCE_DIR}/common/extendedosmbean.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/getstacktrace
		${CMAKE_CURRENT_SOURCE_DIR}/common/gpu.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/iohelp.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/java_lang_Access.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/java_lang_Class.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/common/java_lang_J9VMInternals.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/common/java_lang_ref_Finalizer.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/java_lang_ref_Reference.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/common/jclcinit.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/jcldefine.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/jclexception.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/jclglob.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/jclreflect.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/jcltrace.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/jclvm.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/jithelpers.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/jniidcacheinit.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/log.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/mgmtclassloading.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/mgmtcompilation.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/mgmtgc.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/mgmthypervisor.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/mgmtinit.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/mgmtmemmgr.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/mgmtmemory.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/mgmtmempool.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/mgmtos.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/mgmtosext.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/mgmtprocessor.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/mgmtruntime.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/mgmtthread.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/orbvmhelpers.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/proxy.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/reflecthelp.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/shared.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/sigquit.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/stdinit
		${CMAKE_CURRENT_SOURCE_DIR}/common/sun_misc_Perf.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/sun_misc_Unsafe.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/common/sun_reflect_ConstantPool.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/system.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/thread.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/common/unsafe_mem.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/vminternals.c
		${CMAKE_CURRENT_SOURCE_DIR}/common/vm_scar.c
		${CMAKE_CURRENT_SOURCE_DIR}/filesys/vmfilesys.c
)

if(OMR_HOST_OS STREQUAL "win")
	target_sources(jclse PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/win32/syshelp.c)
else()
	target_sources(jclse PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/unix/syshelp.c)
endif()

if(J9VM_OPT_METHOD_HANDLE)
	target_sources(jclse
		PRIVATE
			${CMAKE_CURRENT_SOURCE_DIR}/common/java_dyn_methodhandle.c
			${CMAKE_CURRENT_SOURCE_DIR}/common/java_dyn_methodtype.c
	)
endif()

if(JAVA_SPEC_VERSION EQUAL 8)
	# sources for Java 8 only
	target_sources(jclse
		PRIVATE
			${CMAKE_CURRENT_SOURCE_DIR}/common/sun_misc_URLClassPath.c
	)
endif()

# We'd like to use GREATER_EQUAL here (and below), but that operator requires
# cmake version 3.7 or better; the minimum version we require is 3.4.
if(NOT JAVA_SPEC_VERSION LESS 9)
	# sources for Java 9+
	target_sources(jclse
		PRIVATE
			${CMAKE_CURRENT_SOURCE_DIR}/common/java_lang_invoke_VarHandle.c
			${CMAKE_CURRENT_SOURCE_DIR}/common/java_lang_StackWalker.cpp
	)
endif()

if(NOT JAVA_SPEC_VERSION LESS 10)
	# sources for Java 10+
endif()

if(NOT JAVA_SPEC_VERSION LESS 11)
	# sources for Java 11+
endif()

if(NOT JAVA_SPEC_VERSION LESS 12)
	# sources for Java 12+
endif()

include(exports.cmake)

target_enable_ddr(jclse)
ddr_set_add_targets(j9ddr jclse)

install(
	TARGETS jclse
	LIBRARY DESTINATION ${j9vm_SOURCE_DIR}
	RUNTIME DESTINATION ${j9vm_SOURCE_DIR}
)
