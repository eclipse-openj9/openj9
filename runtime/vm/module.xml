<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) 2001, 2021 IBM Corp. and others

This program and the accompanying materials are made available under
the terms of the Eclipse Public License 2.0 which accompanies this
distribution and is available at https://www.eclipse.org/legal/epl-2.0/
or the Apache License, Version 2.0 which accompanies this distribution and
is available at https://www.apache.org/licenses/LICENSE-2.0.

This Source Code may also be made available under the following
Secondary Licenses when the conditions for such availability set
forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
General Public License, version 2 with the GNU Classpath
Exception [1] and GNU General Public License, version 2 with the
OpenJDK Assembly Exception [2].

[1] https://www.gnu.org/software/classpath/license.html
[2] http://openjdk.java.net/legal/assembly-exception.html

SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->
<module>

	<exports group="all">
		<export name="trace">
			<include-if condition="spec.flags.J9VM_INTERP_TRACING"/>
		</export>
	</exports>

	<exports group="standard">
		<export name="J9_CreateJavaVM"/>
		<export name="J9_GetCreatedJavaVMs"/>
		<export name="J9_GetInterface"/>
	</exports>

	<exports group="bundled">
		<export name="J9_CreateJavaVM"/>
		<export name="J9_GetCreatedJavaVMs"/>
		<export name="J9_GetDefaultJavaVMInitArgs"/>
		<export name="J9_GetInterface"/>
	</exports>

	<artifact type="shared" name="j9vm" bundle="jvm" loadgroup="">
		<include-if condition="spec.flags.module_vm" />
		<options>
			<option name="isCPlusPlus"/>
			<option name="requiresLockFixups386"/>
			<option name="dllDescription" data="VM"/>
			<option name="prototypeHeaderFileNames" data="jvm.h"/>
		</options>
		<phase>core quick j2se</phase>
		<exports>
			<group name="all"/>
			<group name="standard"/>
		</exports>
		<flags>
			<!-- Suppress warning "Infinite loop. Program may not stop" on xlc -->
			<flag name="-qsuppress=1500-010" asmflag="false" definition="false">
				<include-if condition="spec.aix.*"/>
			</flag>
		</flags>
		<includes>
			<include path="j9include"/>
			<include path="j9oti"/>
			<include path="j9util"/>
			<include path="j9gcinclude"/>
			<include path="$(OMR_DIR)/gc/include" type="relativepath"/>
			<include path="j9shr_include"/>
			<include path="port/zos390" type="rootpath">
				<include-if condition="spec.zos_390.*"/>
			</include>
			<include path="j9gcgluejava"/>
		</includes>
		<makefilestubs>
			<makefilestub data="UMA_ENABLE_ALL_WARNINGS=1"/>
			<makefilestub data="UMA_TREAT_WARNINGS_AS_ERRORS=1"/>
			<makefilestub data="UMA_OBJECTS:=$(filter-out xcinterp%,$(UMA_OBJECTS))">
				<exclude-if condition="spec.flags.arch_x86"/>
			</makefilestub>
			<makefilestub data="UMA_OBJECTS:=$(filter-out armcinterp%,$(UMA_OBJECTS))">
				<exclude-if condition="spec.flags.arch_arm"/>
			</makefilestub>
			<makefilestub data="UMA_OBJECTS:=$(filter-out arm64cinterp%,$(UMA_OBJECTS))">
				<exclude-if condition="spec.flags.arch_aarch64"/>
			</makefilestub>
			<makefilestub data="UMA_OBJECTS:=$(filter-out pcinterp%,$(UMA_OBJECTS))">
				<exclude-if condition="spec.flags.arch_power"/>
			</makefilestub>
			<makefilestub data="UMA_OBJECTS:=$(filter-out zcinterp%,$(UMA_OBJECTS))">
				<exclude-if condition="spec.flags.arch_s390"/>
			</makefilestub>
			<makefilestub data="UMA_OBJECTS:=$(filter-out rv64cinterp%,$(UMA_OBJECTS))">
				<exclude-if condition="spec.flags.arch_riscv and spec.flags.J9VM_ENV_DATA64"/>
			</makefilestub>
			<makefilestub data="UMA_OBJECTS:=$(filter-out rv64cinterpnojit%,$(UMA_OBJECTS))">
				<exclude-if condition="spec.flags.arch_riscv and spec.flags.J9VM_ENV_DATA64"/>
			</makefilestub>
			<makefilestub data="UMA_OBJECTS:=$(filter-out leconditionexceptionsup$(UMA_DOT_O),$(UMA_OBJECTS))">
				<exclude-if condition="spec.zos_390.* and not spec.flags.J9VM_ENV_DATA64"/>
			</makefilestub>
			<makefilestub data="UMA_OBJECTS:=$(filter-out inlineleconditionhandler$(UMA_DOT_O),$(UMA_OBJECTS))">
				<exclude-if condition="spec.zos_390.* and not spec.flags.J9VM_ENV_DATA64"/>
			</makefilestub>
			<makefilestub data="UMA_OBJECTS:=$(filter-out safeseh$(UMA_DOT_O),$(UMA_OBJECTS))">
				<exclude-if condition="spec.win_x86.* and not spec.flags.J9VM_ENV_DATA64"/>
			</makefilestub>
		</makefilestubs>
		<vpaths>
			<vpath pattern="stackswap.m4" path="wi32" augmentObjects="true" type="relativepath">
				<include-if condition="spec.win_x86.* and not spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="inlineseh.c" path="wi32" augmentObjects="true" type="relativepath">
				<include-if condition="spec.win_x86.* and not spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="stackswap.m4" path="wa64" augmentObjects="true" type="relativepath">
				<include-if condition="spec.win_x86.* and spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="stackswap.m4" path="xi32" augmentObjects="true" type="relativepath">
				<include-if condition="spec.linux_x86.* and not spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="stackswap.m4" path="xa64" augmentObjects="true" type="relativepath">
				<include-if condition="spec.linux_x86.* and spec.flags.J9VM_ENV_DATA64"/>
				<include-if condition="spec.osx_x86.* and spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="unsafeHelper.m4" path="xa64" augmentObjects="true" type="relativepath">
				<include-if condition="spec.linux_x86.* and spec.flags.J9VM_ENV_DATA64"/>
				<include-if condition="spec.osx_x86.* and spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="unsafeHelper.s" path="xi32" augmentObjects="true" type="relativepath">
				<include-if condition="spec.linux_x86.* and not spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="unsafeHelper.s" path="xl64" augmentObjects="true" type="relativepath">
				<include-if condition="spec.linux_ppc-64.* and spec.flags.env_littleEndian"/>
			</vpath>
			<vpath pattern="unsafeHelper.s" path="ap32" augmentObjects="true" type="relativepath">
				<include-if condition="spec.aix_ppc.* and not spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="unsafeHelper.s" path="ap64" augmentObjects="true" type="relativepath">
				<include-if condition="spec.aix_ppc.* and spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="unsafeHelper.s" path="xz31" augmentObjects="true" type="relativepath">
				<include-if condition="spec.linux_390.* and not spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="unsafeHelper.s" path="xz64" augmentObjects="true" type="relativepath">
				<include-if condition="spec.linux_390.* and spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="unsafeHelper.s" path="xz64" augmentObjects="true" type="relativepath">
				<include-if condition="spec.linux_ztpf_390-64.* and spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="unsafeHelper.s" path="mz31" augmentObjects="true" type="relativepath">
				<include-if condition="spec.zos_390.* and not spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="unsafeHelper.s" path="mz64" augmentObjects="true" type="relativepath">
				<include-if condition="spec.zos_390.* and spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="unsafeHelper.s" path="xr32" augmentObjects="true" type="relativepath">
				<include-if condition="spec.linux_arm.* and not spec.flags.J9VM_ENV_DATA64"/>
			</vpath>
			<vpath pattern="unsafeHelper.s" path="xr64" augmentObjects="true" type="relativepath">
				<include-if condition="spec.linux_aarch64.*"/>
			</vpath>
			<vpath pattern="unsafeHelper.s" path="rv64" augmentObjects="true" type="relativepath">
				<include-if condition="spec.linux_riscv64.*"/>
			</vpath>
		</vpaths>
		<libraries>
			<library name="j9verutil"/>
			<library name="j9thr"/>
			<library name="j9util"/>
			<library name="j9utilcore"/>
			<library name="j9avl" type="external"/>
			<library name="j9hashtable" type="external"/>
			<library name="j9pool" type="external"/>
			<library name="j9stackmap"/>
			<library name="j9hookable"/>
			<library name="j9omr" type="external"/>
			<library name="j9prt"/>
			<library name="omrsig">
				<include-if condition="spec.flags.J9VM_PORT_OMRSIG_SUPPORT"/>
			</library>
			<library name="j9bcv"/>
			<library name="j9dyn"/>
			<library name="j9simplepool"/>
			<library name="j9zip">
				<include-if condition="spec.flags.J9VM_OPT_ZIP_SUPPORT"/>
			</library>
			<library name="ffi"/>
		</libraries>
	</artifact>
</module>
