!! Copyright (c) 2000, 2017 IBM Corp. and others
!!
!! This program and the accompanying materials are made available under
!! the terms of the Eclipse Public License 2.0 which accompanies this
!! distribution and is available at https://www.eclipse.org/legal/epl-2.0/
!! or the Apache License, Version 2.0 which accompanies this distribution and
!! is available at https://www.apache.org/licenses/LICENSE-2.0.
!!
!! This Source Code may also be made available under the following
!! Secondary Licenses when the conditions for such availability set
!! forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
!! General Public License, version 2 with the GNU Classpath
!! Exception [1] and GNU General Public License, version 2 with the
!! OpenJDK Assembly Exception [2].
!!
!! [1] https://www.gnu.org/software/classpath/license.html
!! [2] http://openjdk.java.net/legal/assembly-exception.html
!!
!! SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception

#include "j9cfg.h"
#include "jilconsts.inc"
#include "p/runtime/ppcasmdefines.inc"

#define SURR_MASK_RES_SWAP   0xD8
#define SURR_MASK_RES   0xD800

#ifdef AIXPPC
        .globl    .__encodeUTF16Big
        .globl    __encodeUTF16Big{DS}
        .globl    .__encodeUTF16Little
        .globl    __encodeUTF16Little{DS}

#elif defined(LINUXPPC64)
        .globl    FUNC_LABEL(__encodeUTF16Big)
        .type     FUNC_LABEL(__encodeUTF16Big),@function
        .globl    FUNC_LABEL(__encodeUTF16Little)
        .type     FUNC_LABEL(__encodeUTF16Little),@function

#elif defined(LINUX) || defined(NEUTRINO)
   .globl    __encodeUTF16Big
   .globl    __encodeUTF16Little
#endif

#ifdef AIXPPC
! .text section
      .align    5
   .csect    Utf16ToByte_TEXT{PR}
#elif defined(LINUXPPC64)
   .section  ".text"
      .align    5
#else
      .align    5
#endif

!-------------------------------------------------------------------------------
! entry encodeUTF16Big
!-------------------------------------------------------------------------------
! The conversion process copies 2-byte UTF16 characters to the destination
! unless a surrogate pair is encountered, when the process stops. A surrogate
! pair is a pair of UTF16 code points in range U+10000 - U+10FFF, represented by
! a sequence of 4 bytes in range 0xD800 - 0xDBFF and 0xDC00 - 0xDFFF (2 bytes
! per respective code point). The surrogate pair can appear swapped in a text
! stream or missing one of the code points. We can generalize the test for it
! by masking a code points with 0xF800 and checking if the result is equal to
! 0xD800.
! The conversion process is implemented as follows:
!
!    size_t i = 0;
!    while (i < n) {
!        uint16_t u16 = *(src + i);
!
!        // surrogate check
!        if ((u16 & 0xF800) == 0xD800) break;
!
!        *(dest++) = u16;
!        ++i;
!    }
!
!    return i;

#ifdef AIXPPC
.__encodeUTF16Big:
   .function .__encodeUTF16Big,startproc.__encodeUTF16Big,16,0,(endproc.__encodeUTF16Big-startproc.__encodeUTF16Big)
        .machine "push"
        .machine "pwr7"
#elif defined(LINUXPPC64)
FUNC_LABEL(__encodeUTF16Big):
#else
__encodeUTF16Big:
#endif

!----------------------------------------------------------------------
! input:
! r3 = input ptr
! r4 = output ptr
! r5 = num_elements
! output:
! r3 = number_elements_processed
! r4 = input ptr
! clobbered:
! r3 = input ptr
! r4 = output ptr
! r5 = element to process count
! r6 = elements to process in vec loop
! r7 = elements to process in residue loop
! r8 = temp storage area
! r9 = result of masking code points with 0xF800
! r11 = 0xD800 mask result for half word reads
! vr0 = 0xF800 mask for the vector reads
! vr1 = 0xD800 mask result for vector reads
! vr2 = input half words 0 - 7
! vr3 = input half words 8 - 15
! vr4 = temp mask generation reg
! vr5 = half word rotate amount register for endian correction (0008)
! fp0-3 = output registers (using FP registers to perform 16-byte misaligned stores)
! cr0 = all sorts of condition checks

      startproc.__encodeUTF16Big:

#ifdef STANDALONE
        ! Prologue
        stdu            1, -112(1)
        mflr            r0
        std             r0, 128(1)
        std             r4, 160(1)
#else
        staddr          r4, -ALen(J9SP)                 ! preserve start of output buffer for number of elements processed calculation
#endif

        cmpi            cr0, 0, r5, 0                      ! done if no elements to process
        beq             .L.__done_big
        li              r11, 0                          ! load surrogate masking result

#if !defined(__LITTLE_ENDIAN__)
        ori             r11, r11, SURR_MASK_RES
#else
        ori             r11, r11, SURR_MASK_RES_SWAP
#endif

.L.__align_loop_big:
        andi.           r8, r3, 0xF                     ! bits in 0xf?
        beq             cr0, .L.__main_big              ! 16 byte aligned if clear
#if !defined(__LITTLE_ENDIAN__)
        lhz             r8, 0(r3)                       ! load code pt
        rlwinm          r9, r8, 0, 16, 20               ! mask out equivalent of 0xF800 from code point
#else
        lhbrx           r8, 0, r3
        rlwinm          r9, r8, 0, 24, 28               ! mask out equivalent of 0xF800 from code point
#endif
        cmpw            cr0, r9, r11                    ! surrogate if == 0xD800
        beq             cr0, .L.__done_big              ! skip processing if surrogate
        sth             r8, 0(r4)                       ! store hb at dest
        addi            r4, r4, 2
        addi            r3, r3, 2
        addi            r5, r5, -1
        cmpi            cr0, 0, r5, 0
        beq             .L.__done_big                   ! the count reached zero before alignment
        b               .L.__align_loop_big
.L.__main_big:
        cmpi            cr0, 0, r5, 16                  ! if we have less than 16 items to process, jump into the alignment residue loop
        ble             cr0, .L.__alignResidue_big
        rlwinm          r6, r5, 32-4, 4, 31             ! r6 = n / 16, processed in vector loop
        mtctr           r6
        rlwinm          r7, r5, 0, 28, 31               ! r7 = n % 16, processed in residue loop

    ! set up HB and LB permute masks
        vspltisb        vr0, -8                 ! vr0: F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8
        vspltisb        vr4, 8                  ! vr4: 08080808080808080808080808080808
        vslh            vr0, vr0, vr4           ! vr0: F800F800F800F800F800F800F800F800
        li              r8, 0xD                 ! r8: 0xD
        lvsl            vr1, 0, r8              ! vr1: 0D0E0F101112131415161718191A1B1C
        vspltisb        vr4, 4                  ! vr4: 04040404040404040404040404040404
        vslb            vr1, vr1, vr4           ! vr1: D0E0F101112131415161718191A1B1C0
        li              r8, 0x8                 ! r8: 0x8
        lvsl            vr4, 0, r8              ! vr4: 08090A0B0C0D0E0F1011121314151617
        vaddubs         vr1, vr1, vr4           ! vr1: D8E9FB0C1D2E3F5061728394A5B6C7D7
        vspltb          vr1, vr1, 0             ! vr1: D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8
        vspltisb        vr4, 8                  ! vr4: 08080808080808080808080808080808
        vslh            vr1, vr1, vr4           ! vr1: D800D800D800D800D800D800D800D800
        li              r8, 16                  ! r8:  input/output ptr increment

#if defined(__LITTLE_ENDIAN__)
        vspltish        vr5, 8                  ! vr5: 00080008000800080008000800080008
#endif

.L.__vectorLoop_big:
        lvx             vr2, 0, r3              ! vr2: hw 0 - 7
        lvx             vr3, r3, r8             ! vr3: hw 8 - 15
        vand            vr4, vr2, vr0           ! vr4: high bytes masked with F8
        vcmpequh_r      vr4, vr4, vr1           ! vr4: all 0 if no HB & F8 == D8
        bne             cr6, .L.__alignResidue_big  ! skip to residue processing if we have a surrogate
        vand            vr4, vr3, vr0           ! vr4: high bytes masked with F8
        vcmpequh_r      vr4, vr4, vr1           ! vr4: all 0 if no HB & F8 == D8
        bne             cr6, .L.__alignResidue_big  ! skip to residue processing if we have a surrogate

#if defined(__LITTLE_ENDIAN__)
        vrlh            vr2, vr2, vr5           ! vr2: hw 0 - 7 byte-swapped
        vrlh            vr3, vr3, vr5           ! vr3: hw 8 - 15 byte-swapped
        xxlor           vs1, vs34, vs34         ! least significant double word of vr2
        xxpermdi        vs0, vs34, vs34, 2      ! most significant double word of vr2
#else
        xxlor           vs0, vs34, vs34         ! most significant double word of vr2
        xxpermdi        vs1, vs34, vs34, 2      ! least significant double word of vr2
#endif
        stfd            fp0, 0(r4)              ! hw 0 - 7 stored at the output ptr
        stfd            fp1, 8(r4)              ! hw 8 - 15 stored at the output ptr
#if defined(__LITTLE_ENDIAN__)
        xxlor           vs3, vs35, vs35         ! least significant double word of vr3
        xxpermdi        vs2, vs35, vs35, 2      ! most significant double word of vr3
#else
        xxlor           vs2, vs35, vs35         ! most significant double word of vr3
        xxpermdi        vs3, vs35, vs35, 2      ! least significant double word of vr3
#endif
        stfd            fp2, 16(r4)             ! hw 16 - 23 stored at the output ptr
        stfd            fp3, 24(r4)             ! hw 16 - 23 stored at the output ptr
        addi            r3, r3, 32              ! bump input ptr
        addi            r4, r4, 32              ! bump output ptr
        subi            r5, r5, 16              ! decrement the element count
        bdnz            .L.__vectorLoop_big
        cmpi            cr0, 0, r5, 0           ! check for work to be done in residue loop
        beq             cr0, .L.__done_big      ! nothing to do, return

!  residue work starts here
.L.__alignResidue_big:
        mtctr           r5                      ! move count of remaining elements into ctr
        addi            r3, r3, -2              ! dec. input ptr so we use lhzu instruction to load
        addi            r4, r4, -2              ! ditto for the output ptr.

.L.__residueLoop_big:
#if !defined(__LITTLE_ENDIAN__)
        lhzu            r8, 2(r3)               ! load utf16 code point and bump src
        rlwinm          r9, r8, 0, 16, 20       ! repeat test against surrogate mask
#else
        addi            r3, r3, 2
        lhbrx           r8, 0, r3
        rlwinm          r9, r8, 0, 24, 28       ! repeat test against surrogate mask
#endif
        cmpw            cr0, r9, r11
        beq             cr0, .L.__doneResidue_big   ! stop copying if we have a surrogate
        sthu            r8, 2(r4)
        addi            r5, r5, -1
        bdnz            .L.__residueLoop_big

.L.__doneResidue_big:
        addi            r4, r4, 2               ! inc. output ptr so we can use it for calculating number of elements processed

.L.__done_big:
#ifdef STANDALONE
        ld              r8, 160(1)
#else
        laddr           r8, -ALen(J9SP)
#endif
        sub             r3, r4, r8              ! r3 = output_ptr - output_base_ptr = 2x num elements processed
        srwi            r3, r3, 1               ! divide diff by 2 to obtain num elements processed

#ifdef STANDALONE
        ! Prologue
        ld              0, 128(1)
        mtlr            0
        ld              1, 0(1)
#endif
        blr

#ifdef AIXPPC
        .machine "pop"
#endif
      endproc.__encodeUTF16Big:


!-------------------------------------------------------------------------------
! entry encodeUTF16Little
!-------------------------------------------------------------------------------
! The conversion process copies 2-byte UTF16 characters to the destination
! unless a surrogate pair is encountered, when the process stops. A surrogate
! pair is a pair of UTF16 code points in range U+10000 - U+10FFF, represented by
! a sequence of 4 bytes in range 0xD800 - 0xDBFF and 0xDC00 - 0xDFFF (2 bytes
! per respective code point). The surrogate pair can appear swapped in a text
! stream or missing one of the code points. We can generalize the test for it
! by masking a code points with 0xF800 and checking if the result is equal to
! 0xD800.
! The conversion process is implemented as follows:
!
!    size_t i = 0;
!    while (i < n) {
!        uint16_t u16 = *(src + i);
!
!        // surrogate check
!        if ((u16 & 0xF800) == 0xD800) break;
!
!        *(dest++) = u16;
!        ++i;
!    }
!
!    return i;

#ifdef AIXPPC
.__encodeUTF16Little:
   .function .__encodeUTF16Little,startproc.__encodeUTF16Little,16,0,(endproc.__encodeUTF16Little-startproc.__encodeUTF16Little)
        .machine "push"
        .machine "pwr7"
#elif defined(LINUXPPC64)
FUNC_LABEL(__encodeUTF16Little):
#else
__encodeUTF16Little:
#endif

!----------------------------------------------------------------------
! input:
! r3 = input ptr
! r4 = output ptr
! r5 = num_elements
! output:
! r3 = number_elements_processed
! clobbered:
! r3 = output ptr
! r4 = input ptr
! r5 = element to process count
! r6 = elements to process in vec loop
! r7 = elements to process in residue loop
! r8 = temp storage area
! r9 = result of masking code points with 0xF800
! r11 = 0xD800 mask result for half word reads
! vr0 = 0xF800 mask for the vector reads
! vr1 = 0xD800 mask result for vector reads
! vr2 = input half words 0 - 7
! vr3 = input half words 8 - 15
! vr4 = temp mask generation reg
! vr5 = half word rotate amount register for endian correction (0008)
! fp0-3 = output registers (using FP registers to perform 16-byte misaligned stores)
! cr0 = all sorts of condition checks

      startproc.__encodeUTF16Little:

#ifdef STANDALONE
        ! Prologue
        stdu            1, -112(1)
        mflr            r0
        std             r0, 128(1)
        std             r4, 160(1)
#else
        staddr          r4, -ALen(J9SP)                 ! preserve start of output buffer for number of elements processed calculation
#endif

        cmpi            cr0, 0, r5, 0                      ! done if no elements to process
        beq             .L.__done
        li              r11, 0                          ! load surrogate masking result

#if defined(__LITTLE_ENDIAN__)
        ori             r11, r11, SURR_MASK_RES
#else
        ori             r11, r11, SURR_MASK_RES_SWAP
#endif

.L.__align_loop:
        andi.           r8, r3, 0xF                     ! bits in 0xf?
        beq             cr0, .L.__main                  ! 16 byte aligned if clear

#if defined(__LITTLE_ENDIAN__)
        lhz             r8, 0(r3)                       ! load code pt
        rlwinm          r9, r8, 0, 16, 20               ! mask out equivalent of 0xF800 from code point
#else
        lhbrx           r8, r0, r3
        rlwinm          r9, r8, 0, 24, 28               ! mask out equivalent of 0xF8 from code point
#endif

        cmpw            cr0, r9, r11                    ! surrogate if == 0xD8
        beq             cr0, .L.__done                  ! skip processing if surrogate
        sth             r8, 0(r4)                       ! store hb at dest
        addi            r3, r3, 2
        addi            r4, r4, 2
        addi            r5, r5, -1
        cmpi            cr0, 0, r5, 0
        beq             .L.__done                       ! the count reached zero before alignment
        b               .L.__align_loop
.L.__main:
        cmpi            cr0, 0, r5, 16                  ! if we have less than 16 items to process, jump into the alignment residue loop
        ble             cr0, .L.__alignResidue
        rlwinm          r6, r5, 32-4, 4, 31             ! r6 = n / 16, processed in vector loop
        mtctr           r6
        rlwinm          r7, r5, 0, 28, 31               ! r7 = n % 16, processed in residue loop
    ! set up HB and LB permute masks
        vspltisb        vr0, -8                 ! vr0: F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8
        vspltisb        vr4, 8                  ! vr4: 08080808080808080808080808080808
        vslh            vr0, vr0, vr4           ! vr0: F800F800F800F800F800F800F800F800
        li              r8, 0xD                 ! r8: 0xD
        lvsl            vr1, 0, r8              ! vr1: 0D0E0F101112131415161718191A1B1C
        vspltisb        vr4, 4                  ! vr4: 04040404040404040404040404040404
        vslb            vr1, vr1, vr4           ! vr1: D0E0F101112131415161718191A1B1C0
        li              r8, 0x8                 ! r8: 0x8
        lvsl            vr4, 0, r8              ! vr4: 08090A0B0C0D0E0F1011121314151617
        vaddubs         vr1, vr1, vr4           ! vr1: D8E9FB0C1D2E3F5061728394A5B6C7D7
        vspltb          vr1, vr1, 0             ! vr1: D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8
        vspltisb        vr4, 8                  ! vr4: 08080808080808080808080808080808
        vslh            vr1, vr1, vr4           ! vr1: D800D800D800D800D800D800D800D800

#if !defined(__LITTLE_ENDIAN__)
        vspltish        vr5, 8                  ! vr5: 00080008000800080008000800080008
#endif

        li              r8, 16                  ! r8:  input/output ptr increment
.L.__vectorLoop:
        lvx             vr2, 0, r3              ! vr2: hw 0 - 7
        lvx             vr3, r3, r8             ! vr3: hw 8 - 15
        vand            vr4, vr2, vr0           ! vr4: high bytes masked with F8
        vcmpequh_r      vr4, vr4, vr1           ! vr4: all 0 if no HB & F8 == D8
        bne             cr6, .L.__alignResidue  ! skip to residue processing if we have a surrogate
        vand            vr4, vr3, vr0           ! vr4: high bytes masked with F8
        vcmpequh_r      vr4, vr4, vr1           ! vr4: all 0 if no HB & F8 == D8
        bne             cr6, .L.__alignResidue  ! skip to residue processing if we have a surrogate

#if !defined(__LITTLE_ENDIAN__)
        vrlh            vr2, vr2, vr5           ! vr2: hw 0 - 7 byte-swapped
        vrlh            vr3, vr3, vr5           ! vr3: hw 8 - 15 byte-swapped
        xxlor           vs1, vs34, vs34         ! MSDW of vr2
        xxpermdi        vs0, vs34, vs34, 2
#else
        xxlor           vs0, vs34, vs34         ! LSDW of vr2
        xxpermdi        vs1, vs34, vs34, 2
#endif
        stfd            fp0, 0(r4)              ! hw 0 - 7 stored at the output ptr
        stfd            fp1, 8(r4)              ! hw 8 - 15 stored at the output ptr

#if !defined(__LITTLE_ENDIAN__)
        xxlor           vs3, vs35, vs35         ! MSDW of vr3
        xxpermdi        vs2, vs35, vs35, 2      ! LSDW of vr3
#else
        xxlor           vs2, vs35, vs35         ! LSDW of vr3
        xxpermdi        vs3, vs35, vs35, 2      ! MSDW of vr3
#endif
        stfd            fp2, 16(r4)             ! hw 16 - 23 stored at the output ptr
        stfd            fp3, 24(r4)             ! hw 16 - 23 stored at the output ptr

        addi            r3, r3, 32              ! bump output ptr
        addi            r4, r4, 32              ! bump input ptr
        subi            r5, r5, 16              ! decrement the element count
        bdnz            .L.__vectorLoop
        cmpi            cr0, 0, r5, 0           ! check for work to be done in residue loop
        beq             cr0, .L.__done          ! nothing to do, return

!  residue work starts here
.L.__alignResidue:
        mtctr           r5                      ! move count of remaining elements into ctr
        addi            r3, r3, -2              ! dec. input ptr so we use lhzu instruction to load
        addi            r4, r4, -2              ! ditto for the output ptr.

.L.__residueLoop:
#if defined(__LITTLE_ENDIAN__)
        lhzu            r8, 2(r3)               ! load utf16 code point and bump src
        rlwinm          r9, r8, 0, 16, 20       ! repeat test against surrogate mask
#else
        addi            r3, r3, 2
        lhbrx           r8, r0, r3
        rlwinm          r9, r8, 0, 24, 28       ! repeat test against surrogate mask
#endif

        cmpw            cr0, r9, r11
        beq             cr0, .L.__doneResidue   ! stop copying if we have a surrogate
        sthu            r8, 2(r4)               ! store lw at dest
        addi            r5, r5, -1
        bdnz            .L.__residueLoop

.L.__doneResidue:
        addi            r4, r4, 2               ! inc. output ptr so we can use it for calculating number of elements processed

.L.__done:
#ifdef STANDALONE
        ld              r8, 160(1)
#else
        laddr           r8, -ALen(J9SP)
#endif
        sub             r3, r4, r8              ! r3 = output_ptr - output_base_ptr = 2x num elements processed
        srwi            r3, r3, 1               ! divide diff by 2 to obtain num elements processed

#ifdef STANDALONE
        ! Prologue
        ld              0, 128(1)
        mtlr            0
        ld              1, 0(1)
#endif
        blr

#ifdef AIXPPC
        .machine "pop"
#endif
      endproc.__encodeUTF16Little:

! .data section
#ifdef AIXPPC
   .toc
   .csect    __encodeUTF16Big{DS}
   ADDR      .__encodeUTF16Big
   ADDR      TOC{TC0}
   ADDR      0x00000000
! End   csect     __encodeUTF16Big{DS}

   .csect    __encodeUTF16Little{DS}
   ADDR      .__encodeUTF16Little
   ADDR      TOC{TC0}
   ADDR      0x00000000
! End   csect     __encodeUTF16Little{DS}

#elif defined(LINUXPPC64)
   .section  ".toc"
#if !defined(__LITTLE_ENDIAN__)
   .section  ".opd","aw"
   .align    3
   .globl    __encodeUTF16Big
   .size     __encodeUTF16Big,24
__encodeUTF16Big:
   .quad     .__encodeUTF16Big
   .quad     .TOC.@tocbase
   .long     0x00000000
   .long     0x00000000
   .globl    __encodeUTF16Little
   .size     __encodeUTF16Little,24
__encodeUTF16Little:
   .quad     .__encodeUTF16Little
   .quad     .TOC.@tocbase
   .long     0x00000000
   .long     0x00000000
#endif
#endif
