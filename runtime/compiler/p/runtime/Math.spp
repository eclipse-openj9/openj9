!! Copyright (c) 2000, 2017 IBM Corp. and others
!!
!! This program and the accompanying materials are made available under
!! the terms of the Eclipse Public License 2.0 which accompanies this
!! distribution and is available at https://www.eclipse.org/legal/epl-2.0/
!! or the Apache License, Version 2.0 which accompanies this distribution and
!! is available at https://www.apache.org/licenses/LICENSE-2.0.
!!
!! This Source Code may also be made available under the following
!! Secondary Licenses when the conditions for such availability set
!! forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
!! General Public License, version 2 with the GNU Classpath
!! Exception [1] and GNU General Public License, version 2 with the
!! OpenJDK Assembly Exception [2].
!!
!! [1] https://www.gnu.org/software/classpath/license.html
!! [2] http://openjdk.java.net/legal/assembly-exception.html
!!
!! SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception

! __longDivide (does remainder as well)(only used in 32-bit mode)
!     inputs   r3,r4,r5,r6
!     outputs  r3,r4,r5,r6 (quotient and remainder)
!     kills    r0,r5,r6,r7,r8,r9,r11
!              cr0,cr1,cr5,cr6,cr7
! __longDivideEP (does remainder as well)(only used in 32-bit mode where divwe/divweu are present)
!     inputs   r3,r4,r5,r6
!     outputs  r3,r4,r5,r6 (quotient and remainder)
!     kills    r0,r7,r8,r9,r11
!              cr0,cr1
! __unsignedLongDivide (does remainder as well)(only used in 32-bit mode)
!     inputs   r3,r4,r5,r6
!     outputs  r3,r4,r5,r6 (quotient and remainder)
!     kills    r0,r5,r6,r7,r8,r9,r11
!              cr0,cr7
! __unsignedLongDivideEP (does remainder as well)(only used in 32-bit mode where divwe/divweu are present)
!     inputs   r3,r4,r5,r6
!     outputs  r3,r4,r5,r6 (quotient and remainder)
!     kills    r7,r8,r9,r11
!              cr0,cr1
! __double2Long (32 bit target)(only used in 32-bit mode)
!     inputs   fp0
!     outputs  r3,r4
!     kills    r0,r5,r6,r11
!              cr0,cr1,cr6
!              fp0,fp1,fp2,fp3,fp4,fp5,fp6,fp7
! __integer2Double (32 bit target)(only used in 32-bit mode)
!     inputs   r3
!     outputs  fp0
!     kills    r0,r3,r4,r11
!              fp1
! __long2Double (32 bit target)(only used in 32-bit mode)
!     inputs   r3,r4
!     outputs  fp0
!     kills    r0,r3,r4,r5,r11
!              fp1,fp2
! __long2Float  (32 bit target)
!     inputs   r3,r4
!     outputs  fp0
!     kills    r0,r3,r4,r5,r6,r7,r11
!              fp1,fp2
! __long2Float  (64 bit target)
!     inputs   r3
!     outputs  fp0
!     kills    r0,r4,r11
! __long2Float_mv (64 bit target. long2Float for p6 processor only)
!     inputs   r3
!     outputs  fp0
!     kill     r0,r4
! __doubleRemainder
!     inputs   fp0,fp1
!     outputs  fp0
!     kills    r0,r3,r4,r8,r11
!              cr0,cr1,cr6
!              fp1,fp2,fp3,fp4,fp5
!

#include "j9cfg.h"
#include "jilconsts.inc"
#include "p/runtime/ppcasmdefines.inc"
#include "p/runtime/ppccdefines.inc"

#ifdef AIXPPC
	  .rename H.10.NO_SYMBOL{PR},""
	  .rename H.18.__longDivide{TC},"__longDivide"
          .rename H.19.__longDivideEP{TC},"__longDivideEP"
	  .rename H.20.__double2Long{TC},"__double2Long"
	  .rename H.22.__integer2Double{TC},"__integer2Double"
	  .rename H.23.__long2Double{TC},"__long2Double"
	  .rename H.25.__doubleRemainder{TC},"__doubleRemainder"
	  .rename H.26.__long2Float{TC},"__long2Float"
	  .rename H.27.__long2Float_mv{TC},"__long2Float_mv"
          .rename H.28.__unsignedLongDivide{TC},"__unsignedLongDivide"
          .rename H.29.__unsignedLongDivideEP{TC},"__unsignedLongDivideEP"
	  .lglobl H.10.NO_SYMBOL{PR}
	  .globl  .__longDivide
          .globl  .__longDivideEP
	  .globl  .__unsignedLongDivide
          .globl  .__unsignedLongDivideEP
          .globl  .__double2Long
	  .globl  .__integer2Double
	  .globl  .__long2Double
	  .globl  .__long2Float
          .globl  .__long2Float_mv
	  .globl  .__doubleRemainder
	  .globl  __longDivide{DS}
          .globl  __longDivideEP{DS}
	  .globl  __unsignedLongDivide{DS}
          .globl  __unsignedLongDivideEP{DS}
	  .globl  __double2Long{DS}
	  .globl  __integer2Double{DS}
	  .globl  __long2Double{DS}
	  .globl  __long2Float{DS}
          .globl  __long2Float_mv{DS}
	  .globl  __doubleRemainder{DS}

#elif defined(LINUXPPC64)
	  .globl  FUNC_LABEL(__longDivide)
          .globl  FUNC_LABEL(__longDivideEP)
	  .globl  FUNC_LABEL(__unsignedLongDivide)
          .globl  FUNC_LABEL(__unsignedLongDivideEP)
          .type   FUNC_LABEL(__longDivide),@function
          .type   FUNC_LABEL(__longDivideEP),@function
          .type   FUNC_LABEL(__unsignedLongDivide),@function
          .type   FUNC_LABEL(__unsignedLongDivideEP),@function
	  .globl  FUNC_LABEL(__double2Long)
	  .type   FUNC_LABEL(__double2Long),@function
	  .globl  FUNC_LABEL(__integer2Double)
	  .type   FUNC_LABEL(__integer2Double),@function
	  .globl  FUNC_LABEL(__long2Double)
	  .type   FUNC_LABEL(__long2Double),@function
	  .globl  FUNC_LABEL(__long2Float)
	  .type   FUNC_LABEL(__long2Float),@function
	  .globl  FUNC_LABEL(__long2Float_mv)
          .type   FUNC_LABEL(__long2Float_mv),@function
          .globl  FUNC_LABEL(__doubleRemainder)
	  .type   FUNC_LABEL(__doubleRemainder),@function

#elif defined(LINUXPPC)
	  .global  __longDivide
          .global  __longDivideEP
	  .global  __unsignedLongDivide
          .global  __unsignedLongDivideEP
	  .global  __double2Long
	  .global  __integer2Double
	  .global  __long2Double
	  .global  __long2Float
          .global  __long2Float_mv
	  .global  __doubleRemainder
#endif


	.file   "Math.s"

#ifdef AIXPPC
! .text section
	.csect  H.10.NO_SYMBOL{PR}
#elif defined (LINUXPPC64)
	.section  ".text"
	.align    2
#endif

#ifdef AIXPPC
.__longDivide:                           ! 0x00000000 (H.10.NO_SYMBOL)
		.function .__longDivide,startproc.__longDivide,16,0,(endproc.__longDivide-startproc.__longDivide)
#elif defined (LINUXPPC64)
FUNC_LABEL(__longDivide):
#else
__longDivide:
#endif
		startproc.__longDivide:
#ifdef TR_HOST_64BIT
! This function does long divide for 32 bit mode.  In 64 bit
! mode we should never get here, so cause a crash.
                stw    r0,0(r0)
#else
	cmpi   cr7,0x0,r3,0x0
	cmpi   cr1,0x0,r5,0x0
	xor    r0,r3,r5
	cmpi   cr6,0x0,r0,0x0
	bge    cr7,__L1
	subfic   r4,r4,0x0
	subfze   r3,r3
__L1:
	bge    cr1,__L2
	subfic   r6,r6,0x0
	subfze   r5,r5
__L2:
	cmpi    cr0,0x0,r3,0x0
	cntlzw   r0,r3
	cntlzw   r9,r4
	bne   cr0,__L3
	add   r0,r0,r9
__L3:
	cmpi   cr5,0x0,r5,0x0
	cntlzw   r9,r5
	cntlzw   r8,r6
	bne   cr5,__L4
	add   r9,r9,r8
	beq   cr0,__L0
__L4:
	cmp   cr0,0x0,r0,r9
	subfic   r8,r0,0x40
	bgt   cr0,__L13
!	addi   r9,r9,0x1
!	subfic   r9,r9,0x40
	subfic   r9,r9,0x3f
	add   r0,r0,r9
	subf   r9,r9,r8
	mtctr   r9
	cmpi   cr0,0x0,r9,0x20
	addi   r7,r9,-32
	blt   cr0,__L5
	srw   r8,r3,r7
	li   r7,0x0
	b   __L6
__L5:
	srw   r8,r4,r9
	subfic   r7,r9,0x20
	slw   r7,r3,r7
	or   r8,r8,r7
	srw   r7,r3,r9
__L6:
	cmpi   cr0,0x0,r0,0x20
	addic   r9,r0,-32
	blt   cr0,__L7
	slw   r3,r4,r9
	li   r4,0x0
	b   __L8
__L7:
	slw   r3,r3,r0
	subfic   r9,r0,0x20
	srw   r9,r4,r9
	or   r3,r3,r9
	slw   r4,r4,r0
__L8:
	li   r11,-1
	addic   r7,r7,0x0
__L9:
	adde   r4,r4,r4
	adde   r3,r3,r3
	adde   r8,r8,r8
	adde   r7,r7,r7
	subfc   r0,r6,r8
	subfe.   r9,r5,r7
	blt   cr0,__L10
	ori   r8,r0,0x0
	ori   r7,r9,0x0
	addic   r0,r11,0x1
__L10:
	bdnz   __L9
	adde   r4,r4,r4
	adde   r3,r3,r3
__L11:
	bge   cr6,__L12
	subfic   r4,r4,0x0
	subfze   r3,r3
__L12:
	ori   r6,r8,0x0
	ori   r5,r7,0x0
	bgelr   cr7
	subfic   r6,r6,0x0
	subfze   r5,r5
	blr
__L13:
	ori   r8,r4,0x0
	ori   r7,r3,0x0
	li   r4,0x0
	li   r3,0x0
	b   __L11
__L0:
! both the dividend and divisor are positive (unsigned) 32-bit values
	divwu   r5,r4,r6
	li      r7,0x0
	mullw   r8,r5,r6
	subf    r8,r8,r4
	ori     r4,r5,0x0
	b   __L11
#endif
endproc.__longDivide:

#ifdef AIXPPC
.__unsignedLongDivide:                           ! 0x00000000 (H.10.NO_SYMBOL)
		.function .__unsignedLongDivide,startproc.__unsignedLongDivide,16,0,(endproc.__unsignedLongDivide-startproc.__unsignedLongDivide)
#elif defined (LINUXPPC64)
FUNC_LABEL(__unsignedLongDivide):
#else
__unsignedLongDivide:
#endif
		startproc.__unsignedLongDivide:
#ifdef TR_HOST_64BIT
! This function does long divide for 32 bit mode.  In 64 bit
! mode we should never get here, so cause a crash.
                stw    r0,0(r0)
#else
	cntlzw	r0,r3
	cmpi	cr0,0x0,r0,0x20
	cntlzw	r9,r4
	bne	cr0,__UL1
	addc	r0,r0,r9
__UL1:
	cntlzw	r9,r5
	cmpi	cr7,0x0,r9,0x20
	cntlzw	r11,r6
	bne	cr7,__UL2
	addc	r9,r9,r11
__UL2:
	cmp	cr0,0x0,r0,r9
	subfic	r11,r0,0x40
	bgt	cr0,__UL9
	addic	r9,r9,0x1
	subfic	r9,r9,0x40
	addc	r0,r0,r9
	subfc	r9,r9,r11
	mtctr	r9
	cmpi	cr0,0x0,r9,0x20
	addic	r7,r9,-32
	blt	cr0,__UL3
	srw	r8,r3,r7
	li	r7,0x0
	b	__UL4
__UL3:
	srw	r8,r4,r9
	subfic	r7,r9,0x20
	slw	r7,r3,r7
	or	r8,r8,r7
	srw	r7,r3,r9
__UL4:
	cmpi	cr0,0x0,r0,0x20
	addic	r9,r0,-32
	blt	cr0,__UL5
	slw	r3,r4,r9
	li	r4,0x0
	b	__UL6
__UL5:
	slw	r3,r3,r0
	subfic	r9,r0,0x20
	srw	r9,r4,r9
	or	r3,r3,r9
	slw	r4,r4,r0
__UL6:
	li	r11,-1
	addic	r7,r7,0x0
__UL7:
	adde	r4,r4,r4
	adde	r3,r3,r3
	adde	r8,r8,r8
	adde	r7,r7,r7
	subfc	r0,r6,r8
	subfe.	r9,r5,r7
	blt	cr0,__UL8
	ori	r8,r0,0x0
	ori	r7,r9,0x0
	addic	r0,r11,0x1
__UL8:
	bdnz	__UL7

	adde	r4,r4,r4
	adde	r3,r3,r3
	ori	r6,r8,0x0
	ori	r5,r7,0x0
	blr
__UL9:
	ori	r6,r4,0x0
	ori	r5,r3,0x0
	li	r4,0x0
	ori	r3,r4,0x0
	blr
#endif
endproc.__unsignedLongDivide:

! Defined so that EP division routines will reduce dd when necessary
! in order to avoid overflow, instead of falling back to the regular helpers
#define EP_REDUCE_DD

#ifdef AIXPPC
.__longDivideEP:                                 ! 0x00000000 (H.10.NO_SYMBOL)
		.function .__longDivideEP,startproc.__longDivideEP,16,0,(endproc.__longDivideEP-startproc.__longDivideEP)
#elif defined (LINUXPPC64)
FUNC_LABEL(__longDivideEP):
#else
__longDivideEP:
#endif
		startproc.__longDivideEP:
#ifdef TR_HOST_64BIT
! This function does long divide for 32 bit mode.  In 64 bit
! mode we should never get here, so cause a crash.
                stw    r0,0(r0)
#else
   ! Calculate abs(dr) hi,lo in r9,r8
   srawi        r7,r5,31
   xor          r8,r7,r6
   xor          r9,r7,r5
   subfc        r8,r7,r8
   subfe        r9,r7,r9
   cmpli        cr0,r9,0
   ! Revert to regular long divide if |dr| > 32 bits
   bne          cr0,startproc.__longDivide

   ! Calculate abs(dd) hi,lo in r11,r0
   srawi        r9,r3,31
   xor          r0,r9,r4
   xor          r11,r9,r3
   subfc        r0,r9,r0
   subfe        r11,r9,r11
   cmplw        cr0,r11,r8
#ifndef EP_REDUCE_DD
   ! Revert to regular long divide if |dd| is too large (quotient will be > 32 bits)
   bge          cr0,startproc.__longDivide
#else
   ! Reduce |dd| so that result will not overflow
   bge          __EP_reduceDD
#endif

   !divweu       r4,r11,r8 ! r4 = hi(|dd|)/|dr| = |quo1|
   .long 0x7c8b4316
   divwu        r6,r0,r8   ! r6 = lo(|dd|)/|dr| = |quo2|
   xor          r3,r7,r9   ! r3 = partially calculated hi part of final quotient
   mr           r5,r9      ! r5 = partially calculated hi part of final remainder
   mullw        r7,r4,r8   ! r7 = |rem1|
   mullw        r9,r6,r8
   subf         r7,r7,r0
   add          r11,r4,r6  ! r11= |quo1|+|quo2| = |quo|
   subf         r7,r9,r7   ! r7 = |rem1|+|rem2| = |rem|
   subf         r9,r9,r0   ! r9 = |rem2|

   ! If |rem| > |dr| or |rem| < |rem2|, quo and rem need to be adjusted
   cmplw        cr0,r7,r8
   cmplw        cr1,r7,r9
   addi         r4,r11,1
   subf         r6,r8,r7
   bge          cr0,__EP_signSwap
   blt          cr1,__EP_signSwap
   ! Adjustments were not necessary, restore previous |quo|, |rem|
   mr           r4,r11
   mr           r6,r7

__EP_signSwap:
   xor          r4,r3,r4
   xor          r6,r5,r6
   subfc        r4,r3,r4   ! r4 = lo(quo)
   subfe        r3,r3,r3   ! r3 = hi(quo)
   subfc        r6,r5,r6   ! r6 = lo(rem)
   subfe        r5,r5,r5   ! r7 = hi(rem)
   blr

#ifdef EP_REDUCE_DD
   ! Reduce |dd| by calculating quotient in 3 parts, as opposed to 2 parts in non-reduc case
__EP_reduceDD:
   divwu        r3,r11,r8  ! r3 = hi(|dd|)/|dr| = |quoA|
   mullw        r5,r3,r8
   subf         r11,r5,r11 ! r11= |remA| = new hi(|dd|)

   !divweu       r4,r11,r8 ! r4 = hi(|dd|)/|dr| = |quo1|
   .long 0x7c8b4316
   divwu        r6,r0,r8   ! r6 = lo(|dd|)/|dr| = |quo2|
   mr           r5,r9      ! r5 = partially calculated hi part of final remainder
   xor          r9,r7,r9
   stw          r9,-4(RSTACK)
   xor          r3,r3,r9   ! r3 = partially calculated hi part of final quotient
   mullw        r7,r4,r8   ! r7 = |rem1|
   mullw        r9,r6,r8
   subf         r7,r7,r0
   add          r11,r4,r6  ! r11= |quo1|+|quo2| = |quoB|
   subf         r7,r9,r7   ! r7 = |rem1|+|rem2| = |rem|
   subf         r9,r9,r0   ! r9 = |rem2|

   lwz          r0,-4(RSTACK)
   ! If |rem| > |dr| or |rem| < |rem2|, |quo| and |rem| need to be adjusted
   cmplw        cr0,r7,r8
   cmplw        cr1,r7,r9
   addi         r4,r11,1
   subf         r6,r8,r7
   bge          cr0,__EP_reduceDD_signSwap
   blt          cr1,__EP_reduceDD_signSwap
   ! Adjustments were not necessary, restore previous |quo|, |rem|
   mr           r4,r11
   mr           r6,r7

__EP_reduceDD_signSwap:
   xor          r4,r0,r4
   xor          r6,r5,r6
   subfc        r4,r0,r4  ! r4 = lo(quo)
   subfe        r3,r0,r3  ! r3 = hi(quo)
   subfc        r6,r5,r6  ! r6 = lo(rem)
   subfe        r5,r5,r5  ! r5 = hi(rem)
   blr
#endif
#endif
endproc.__longDivideEP:

#ifdef AIXPPC
.__unsignedLongDivideEP:                         ! 0x00000000 (H.10.NO_SYMBOL)
		.function .__unsignedLongDivideEP,startproc.__unsignedLongDivideEP,16,0,(endproc.__unsignedLongDivideEP-startproc.__unsignedLongDivideEP)
#elif defined (LINUXPPC64)
FUNC_LABEL(__unsignedLongDivideEP):
#else
__unsignedLongDivideEP:
#endif
		startproc.__unsignedLongDivideEP:
#ifdef TR_HOST_64BIT
! This function does long divide for 32 bit mode.  In 64 bit
! mode we should never get here, so cause a crash.
                stw    r0,0(r0)
#else
   cmpli        cr0,r5,0
   ! Revert to regular long divide if dr > 32 bits
   bne          cr0,startproc.__unsignedLongDivide
   cmplw        cr0,r3,r6
#ifndef EP_REDUCE_DD
   ! Revert to regular long divide if dd is too large (quotient will be > 32 bits)
   bge          cr0,startproc.__unsignedLongDivide
#else
   ! Reduce dd so that result will not overflow
   bge          cr0,__UEP_reduceDD
#endif

   !divweu       r7,r3,r6  ! r7 = hi(dd)/dr = quo1
   .long 0x7ce33316
   divwu        r8,r4,r6   ! r8 = lo(dd)/dr = quo2
   li           r3,0       ! r3 = hi part of final quotient
   li           r5,0       ! r5 = hi part of final remainder
__UEP_calcRest:
   mullw        r9,r7,r6   ! r9 = rem1
   mullw        r11,r8,r6
   subf         r9,r9,r4
   add          r7,r7,r8   ! r7 = quo1+quo2 = quo
   subf         r9,r11,r9  ! r9 = rem1+rem2 = rem
   subf         r11,r11,r4 ! r11= rem2

   ! If rem > dr or rem < rem2, quo and rem need to be adjusted
   cmplw        cr0,r9,r6
   cmplw        cr1,r9,r11
   addi         r4,r7,1
   subf         r6,r6,r9
   bge          cr0,__UEP_done
   blt          cr1,__UEP_done
   ! Adjustments were not necessary, restore previous quo, rem
   mr           r4,r7
   mr           r6,r9
__UEP_done:
   blr

#ifdef EP_REDUCE_DD
__UEP_reduceDD:
   divwu        r9,r3,r6   ! r9 = hi(dd)/dr = quoA
   mullw        r11,r9,r6
   subf         r3,r11,r3  ! r3 = remA = new hi(dd)

   !divweu       r7,r3,r6  ! r7 = hi(dd)/dr = quo1
   .long 0x7ce33316
   divwu        r8,r4,r6   ! r8 = lo(dd)/dr = quo2
   mr           r3,r9      ! r3 = hi part of final quotient
   li           r5,0       ! r5 = hi part of final remainder
   b            __UEP_calcRest
#endif
#endif
endproc.__unsignedLongDivideEP:




#ifndef NO_FPU
! ==================================== FLOAT/DOUBLE CODE BEGINS ======================================

#ifdef AIXPPC
.__double2Long:                           ! 0x00000000 (H.10.NO_SYMBOL)
		.function .__double2Long,startproc.__double2Long,16,0,(endproc.__double2Long-startproc.__double2Long)
#elif defined (LINUXPPC64)
FUNC_LABEL(__double2Long):
#else
__double2Long:
#endif
		startproc.__double2Long:
#ifdef TR_HOST_64BIT
! In 64 bit mode we should never get here, so cause a crash.
                stw    r0,0(r0)
#else
	 fcmpu   cr0,fp0,fp0
		li   r3,0
		li   r4,0
	  fabs   fp1,fp0
	 bnelr                               ! return 0 if NaN
	  stwu   RSTACK,-32(RSTACK)
		li   r0,0x0
        laddr   r11, J9TR_VMThreadRTOCOffset(J9VM_STRUCT)       ! Restore TOC/GOT
#ifdef AIXPPC
        laddr   r11, TOC__mathConst(r11)
#elif defined(LINUXPPC64)
        laddr   r11, TOC__mathConst@toc(r11)
#else
        laddr   r11, __mathConst@got(r11)
#endif

         lfd   fp2,0x0(r11)                ! 0x43dfffff ffffffff (max long)

	 fcmpu   cr0,fp0,fp2
		li   r3,0x100
	   lfs   fp2,0x10(r11)                ! 0xc3e00000 00000000 (min long)
	 fcmpu   cr6,fp0,fp2
	   bgt   cr0,__L22
	   lfs   fp2,0x14(r11)                ! 0x41e00000 00000000 (max int)
	  fsub   fp3,fp0,fp0                 ! 0.0 because we know it is not NaN
	 fcmpu   cr0,fp1,fp2
	 fcmpu   cr1,fp3,fp0
	   blt   cr6,__L23
	   lfs   fp7,0x18(r11)                ! 0x43300800 00000000
	   lfd   fp2,0x8(r11)                 ! 0x00000000 00000001
	   fmr   fp6,fp7
	   lfs   fp3,0x24(r11)                ! 0x43300000 00000000
	   lfs   fp4,0x1c(r11)                ! 0x3df00000 00000000
	   lfs   fp5,0x20(r11)                ! 0x41f00000 00000000
	   bge   cr0,__L17
	   bgt   cr1,__L15
	  mffs   fp1                         ! save FPSCR
	  stfd   fp1,8(RSTACK)
	mtfsb1   0x1f                        ! set rounding mode to
	mtfsb1   0x1e                        !   round to -infinity
	  fadd   fp0,fp0,fp6
	   lwz   r0,12(RSTACK)
	mtfsb0   0x1f                        ! set rounding mode to
	mtfsb0   0x1e                        !   round to nearest
	  stfd   fp0,16(RSTACK)
	  mffs   fp0                         ! save FPSCR
	  stfd   fp0,24(RSTACK)
	   lwz   r4,20(RSTACK)
	 srawi   r3,r4,0x1f
	   lwz   r11,28(RSTACK)
	rlwimi   r11,r0,0x0,0x1e,0x1f
	   stw   r11,28(RSTACK)
	   lfd   fp0,24(RSTACK)
#ifdef AIXPPC
	  mtfs   fp0                         ! restore rounding mode
#else
	 mtfsf   0xFF,fp0                    ! restore rounding mode
#endif
		 b   __L24
__L15:
		li   r3,0x0
	  mffs   fp1                         ! save FPSCR
	  stfd   fp1,8(RSTACK)
	mtfsb0   0x1f                        ! set rounding mode to
	mtfsb1   0x1e                        !   round to +infinity
	  fadd   fp0,fp0,fp6
	   lwz   r0,12(RSTACK)
	  mffs   fp1                         ! save FPSCR
	  stfd   fp0,16(RSTACK)
	  stfd   fp1,24(RSTACK)
	   lwz   r4,20(RSTACK)
	   lwz   r11,28(RSTACK)
	  cmpi   cr0,0x0,r4,0x0
	 rlwimi   r11,r0,0x0,0x1e,0x1f
		stw   r11,28(RSTACK)
		lfd   fp0,24(RSTACK)
#ifdef AIXPPC
	  mtfs   fp0                         ! restore rounding mode
#else
	 mtfsf   0xFF,fp0                    ! restore rounding mode
#endif
		beq   cr0,__L16
		 li   r3,-1
		  b   __L24
__L16:
		ori   r4,r3,0x0
		  b   __L24
__L17:
		 li   r6,0x0
	   mffs   fp0                         ! save FPSCR
#ifdef AIXPPC
	   mtfs   fp2                         ! restore rounding mode
#else
	  mtfsf   0xFF,fp2                    ! restore rounding mode
#endif
	  fcmpu   cr0,fp1,fp3
	   stfd   fp0,8(RSTACK)
		fmr   fp2,fp1
		ble   cr1,__L18
		 li   r6,0x1
__L18:
		lwz   r11,12(RSTACK)
		bge   cr0,__L19
	   fadd   fp2,fp1,fp3
	   fsub   fp2,fp2,fp3
	  fcmpu   cr0,fp1,fp2
		beq   cr0,__L19
		 li   r0,0x1
__L19:
	   cmpi   cr0,0x0,r0,0x0
	   fmul   fp1,fp2,fp4
	   fadd   fp4,fp3,fp1
	   fadd   fp1,fp7,fp1
	   stfd   fp1,16(RSTACK)
	   fsub   fp3,fp4,fp3
	   fmul   fp1,fp5,fp3
	   fsub   fp1,fp2,fp1
		lwz   r3,20(RSTACK)
	   fadd   fp1,fp7,fp1
	   stfd   fp1,16(RSTACK)
		lwz   r4,20(RSTACK)
		beq   cr0,__L20
	   oris   r0,r11,0x8200
		stw   r0,12(RSTACK)
		lfd   fp0,8(RSTACK)
__L20:
	   cmpi   cr0,0x0,r6,0x0
#ifdef AIXPPC
	   mtfs   fp0                         ! restore rounding mode
#else
	  mtfsf   0xFF,fp0                    ! restore rounding mode
#endif
		beq   cr0,__L24
	   cmpi   cr0,0x0,r4,0x0
		bne   cr0,__L21
		neg   r3,r3
		 li   r4,0x0
		  b   __L24
__L21:
		neg   r4,r4
	 subfic   r3,r3,-1
		  b   __L24
__L22:                                    ! large positive operand
		lis   r0,0x8000
	  addic   r3,r0,-1
		 li   r4,-1
		  b   __L24                      ! return 0x7fffffff ffffffff
__L23:                                    ! large negative operand
		lis   r3,0x8000
		 li   r4,0x0                     ! return 0x80000000 00000000
__L24:
		 la   RSTACK,32(RSTACK)
		blr
#endif
endproc.__double2Long:

#ifdef AIXPPC
.__integer2Double:                        ! 0x00000000 (H.14.NO_SYMBOL)
		.function .__integer2Double,startproc.__integer2Double,16,0,(endproc.__integer2Double-startproc.__integer2Double)
#elif defined (LINUXPPC64)
FUNC_LABEL(__integer2Double):
#else
__integer2Double:
#endif
		startproc.__integer2Double:
#ifdef TR_HOST_64BIT
! In 64 bit mode we should never get here, so cause a crash.
                stw    r0,0(r0)
#else
		xoris   r0,r3,0x8000
        laddr   r11, J9TR_VMThreadRTOCOffset(J9VM_STRUCT)       ! Restore TOC/GOT
#ifdef AIXPPC
        laddr   r11, TOC__mathConst(r11)
#elif defined(LINUXPPC64)
        laddr   r11, TOC__mathConst@toc(r11)
#else
        laddr   r11, __mathConst@got(r11)
#endif

		lis     r3,17200
		lfs     fp1,0x28(r11)
		stw     r3,J9TR_VMThread_floatTemp1(J9VM_STRUCT)
		stw     r0,(J9TR_VMThread_floatTemp1+4)(J9VM_STRUCT)
		lfd     fp0,J9TR_VMThread_floatTemp1(J9VM_STRUCT)
		fadd    fp0,fp0,fp1
		blr
#endif
endproc.__integer2Double:

#ifdef AIXPPC
.__long2Double:
		.function .__long2Double,startproc.__long2Double,16,0,(endproc.__long2Double-startproc.__long2Double)
#elif defined (LINUXPPC64)
FUNC_LABEL(__long2Double):
#else
__long2Double:
#endif
		startproc.__long2Double:
#ifdef TR_HOST_64BIT
! In 64 bit mode we should never get here, so cause a crash.
                stw    r0,0(r0)
#else
        laddr   r11, J9TR_VMThreadRTOCOffset(J9VM_STRUCT)       ! Restore TOC/GOT
#ifdef AIXPPC
        laddr   r5, TOC__mathConst(r11)
#elif defined(LINUXPPC64)
        laddr   r5, TOC__mathConst@toc(r11)
#else
        laddr   r5, __mathConst@got(r11)
#endif

	addis	r0,0,17200
	addis	r11,0,17712
        stw	r4,(J9TR_VMThread_floatTemp1+4)(J9VM_STRUCT)
	xoris	r3,r3,0x8000
	lfs	fp0,0x2c(r5)
	stw	r0,J9TR_VMThread_floatTemp1(J9VM_STRUCT)
	stw	r11,(J9TR_VMThread_floatTemp1+8)(J9VM_STRUCT)
	stw	r3,(J9TR_VMThread_floatTemp1+12)(J9VM_STRUCT)
	lfd	fp2,0x30(r5)
	lfd	fp1,J9TR_VMThread_floatTemp1(J9VM_STRUCT)
	fadd	fp1,fp1,fp0
	lfd	fp0,(J9TR_VMThread_floatTemp1+8)(J9VM_STRUCT)
	fadd	fp0,fp0,fp2
	fadd	fp0,fp0,fp1
	blr
#endif
endproc.__long2Double:

#ifdef AIXPPC
.__long2Float:
		.function .__long2Float,startproc.__long2Float,16,0,(endproc.__long2Float-startproc.__long2Float)
#elif defined (LINUXPPC64)
FUNC_LABEL(__long2Float):
#else
__long2Float:
#endif
		startproc.__long2Float:
#ifdef TR_HOST_64BIT
        li     r11,-1
        sradi  r0,r3,63
        xor    r4,r3,r0
        subf   r0,r0,r4
        cntlzd r0,r0
        subfic r0,r0,11
        sradi  r4,r0,63
        andc   r0,r0,r4
        sld    r0,r11,r0
        nand   r4,r0,r0
	and    r0,r3,r4
        add    r0,r4,r0
        or     r0,r3,r0
	andc   r0,r0,r4
	std    r0,J9TR_VMThread_floatTemp1(J9VM_STRUCT)
	ori    r0,r0,0x0
	ori    r0,r0,0x0
	ori    r0,r0,0x0
	lfd    fp0,J9TR_VMThread_floatTemp1(J9VM_STRUCT)
        fcfid  fp0,fp0
        frsp   fp0,fp0
        blr
#else
        laddr   r11, J9TR_VMThreadRTOCOffset(J9VM_STRUCT)       ! Restore TOC/GOT
#ifdef AIXPPC
        laddr   r5, TOC__mathConst(r11)
#elif defined(LINUXPPC64)
        laddr   r5, TOC__mathConst@toc(r11)
#else
        laddr   r5, __mathConst@got(r11)
#endif
        srawi   r0,r3,31
        addis   r6,0,17712
        xor     r7,r3,r0
        xoris   r3,r3,0x8000
        subf    r0,r0,r7
        lfd     fp0,0x30(r5)
        addis   r7,0,17200
        cntlzw  r0,r0
	stw     r6,J9TR_VMThread_floatTemp1(J9VM_STRUCT)
	addi    r6,0,-1
        subfic  r0,r0,11
        stw     r3,J9TR_VMThread_floatTemp1+4(J9VM_STRUCT)
        srawi   r3,r0,31
        stw     r7,J9TR_VMThread_floatTemp3(J9VM_STRUCT)
	andc    r0,r0,r3
        lfs     fp2,0x2c(r5)
        slw     r0,r6,r0
        nand    r3,r0,r0
        lfd     fp1,J9TR_VMThread_floatTemp1(J9VM_STRUCT)
	and     r0,r4,r3
        add     r0,r3,r0
        fadd    fp1,fp1,fp0
        or      r0,r4,r0
        andc    r0,r0,r3
	stw     r0,J9TR_VMThread_floatTemp3+4(J9VM_STRUCT)
        ori r0,r0,0x0
        ori r0,r0,0x0
        ori r0,r0,0x0
        lfd     fp0,J9TR_VMThread_floatTemp3(J9VM_STRUCT)
	fadd    fp0,fp0,fp2
        fadd    fp0,fp1,fp0
        frsp    fp0,fp0
	blr
#endif
endproc.__long2Float:

!The following method utilizes the mtfpr instruction for p6 or newer processors running in 64-bit mode.
#ifdef AIXPPC
.__long2Float_mv:
                .function .__long2Float_mv,startproc.__long2Float_mv,16,0,(endproc.__long2Float_mv-startproc.__long2Float_mv)
#elif defined (LINUXPPC64)
FUNC_LABEL(__long2Float_mv):
#else
__long2Float_mv:
#endif
                startproc.__long2Float_mv:
#ifdef TR_HOST_64BIT
        li     r11,-1
        sradi  r0,r3,63
        xor    r4,r3,r0
        subf   r0,r0,r4
        cntlzd r0,r0
        subfic r0,r0,11
        sradi  r4,r0,63
        andc   r0,r0,r4
        sld    r0,r11,r0
        nand   r4,r0,r0
        and    r0,r3,r4
        add    r0,r4,r0
        or     r0,r3,r0
        andc   r0,r0,r4
        .long  0x7c0004be                   !Replace with mffgpr fp0, r0 once assembler supports this instruction.
        fcfid  fp0,fp0
        frsp   fp0,fp0
        blr
#else
        stw    r0,0(0)                     !In 32-bit mode we should never get here, so cause a crash.
#endif
endproc.__long2Float_mv:

#ifdef AIXPPC
.__doubleRemainder:
   .function .__doubleRemainder,startproc.__doubleRemainder,16,0,(endproc.__doubleRemainder-startproc.__doubleRemainder)
#elif defined (LINUXPPC64)
FUNC_LABEL(__doubleRemainder):
#else
__doubleRemainder:
#endif
	startproc.__doubleRemainder:
	fcmpu	cr0,fp0,fp1
	mflr	r0
        addi    RSTACK,RSTACK,-32
        staddr  r0, 0(RSTACK)
	stfd	fp0,8(RSTACK)             ! store dividend
	stfd	fp1,16(RSTACK)             ! store divisor
	addis	r0,0,0x7ff0
	bnu     cr0,__L2c                  ! branch if not unordered
	addi	RSTACK,RSTACK,32
	fmul	fp0,fp0,fp1
	blr                                ! return nan if unordered
__L2c:
#if defined(__LITTLE_ENDIAN__)
	lwz	r3,12(RSTACK)
#else
	lwz	r3,8(RSTACK)
#endif
        laddr   r11, J9TR_VMThreadRTOCOffset(J9VM_STRUCT)       ! Restore TOC/GOT
#ifdef AIXPPC
        laddr   r11, TOC__mathConst(r11)
#elif defined(LINUXPPC64)
        laddr   r11, TOC__mathConst@toc(r11)
#else
        laddr   r11, __mathConst@got(r11)
#endif
	rlwinm	r3,r3,0,1,31               ! mask out the sign bitd
	cmpl	cr0,0,r3,r0                ! check dividend for infinity
	lfs	fp2,8(r11)                 ! 0x00000000
#if defined(__LITTLE_ENDIAN__)
	lwz	r3,8(RSTACK)
#else
	lwz	r3,12(RSTACK)
#endif
	fcmpu	cr6,fp2,fp1                ! check divisor for 0
	cmpi	cr1,0,r3,0
	bne     cr0,__L58
	beq     cr1,__L68
__L58:
#if defined(__LITTLE_ENDIAN__)
	lwz	r3,20(RSTACK)
#else
	lwz	r3,16(RSTACK)
#endif
	rlwinm	r3,r3,0,1,31
	cmpl	cr0,0,r3,r0               ! check divisor for infinity
	bne     cr6,__L74
__L68:
	lfd	fp0,0x38(r11)             ! load qnan into fp0
	b	__La0                     ! return
__L74:
	fcmpu	cr1,fp2,fp0
#if defined(__LITTLE_ENDIAN__)
	lwz	r0,16(RSTACK)
#else
	lwz	r0,20(RSTACK)
#endif
	bne     cr0,__L88
	cmpi	cr0,0,r0,0
	beq     cr0,__La0
__L88:
		! dblremain gives the wrong answer if the dividend is a denorm and
		! the divisor is very large so check for all cases where
		! abs(dividend) < abs(divisor) and return dividend
		fabs    fp2,fp0
		fabs    fp3,fp1
		fcmpu   cr0,fp2,fp3
	beq     cr1,__La0
		blt     cr0,__La0
	bl	.dblRemain
__La0:
	laddr	r11,0(RSTACK)
	mtlr	r11
	addi	RSTACK,RSTACK,32
	blr

!+++++++++++++++++++++++++++++++++=======
.dblRemain:
	mflr	r0
	addi	RSTACK,RSTACK,-48
	staddr	r0,0(RSTACK)
        fabs    fp1,fp1
	stfd	fp1,8(RSTACK)
	stfd	fp0,16(RSTACK)
	lfd	fp3,0x40(r11)        ! 7FDE42D1 30773B76 = 8.5E307
	lfs	fp5,0x48(r11)        ! 5A800000 = 2^54
#if defined(__LITTLE_ENDIAN__)
	lwz	r0,12(RSTACK)
#else
	lwz	r0,8(RSTACK)       ! high word of divisor
#endif
	rlwinm	r0,r0,12,21,31
	lfs	fp2,8(r11)           ! 00000000
	cmpli	cr0,0,r0,0x0001
	fcmpu	cr1,fp3,fp1
	bgt	cr0,__L144
                                                                         ! deal with small numbers
	fmul	fp1,fp1,fp5
	stfd	fp1,8(RSTACK)
	bl	.dblRemain
	fmul	fp0,fp0,fp5
	stfd	fp0,16(RSTACK)
	lfd	fp1,8(RSTACK)
	bl	.dblRemain
	lfs	fp2,0x4c(r11)       ! 24800000 = 1/2^54
	fmul	fp0,fp0,fp2
	laddr	r11,0(RSTACK)
	addi	RSTACK,RSTACK,48
	mtlr	r11
	blr
__L144:
	lfs	fp2,0x50(r11)       ! 3f000000 = 0.5
	fabs	fp4,fp0
	fmul	fp3,fp1,fp2
	bgt     cr1,__L184          ! go to normal algorithm
                                                                        ! deal with large numbers
	fmr	fp1,fp3
	fmul	fp0,fp0,fp2
	stfd	fp0,16(RSTACK)
        stfd    fp3,8(RSTACK)
	bl	.dblRemain
	fadd	fp0,fp0,fp0
	laddr	r11,0(RSTACK)
	addi	RSTACK,RSTACK,48
	mtlr	r11
	blr
__L184:                             ! normal algorithm
	fadd	fp2,fp1,fp1
	stfd	fp2,32(RSTACK)
	fcmpu	cr0,fp4,fp2
#if defined(__LITTLE_ENDIAN__)
	lwz	r0,20(RSTACK)
#else
	lwz	r0,16(RSTACK)
#endif
	stfd	fp4,16(RSTACK)
	rlwinm	r8,r0,0,0,0
	bng     cr0,__L234
#if defined(__LITTLE_ENDIAN__)
	lwz	r0,20(RSTACK)
#else
	lwz	r0,16(RSTACK)
#endif
	stfd	fp2,24(RSTACK)
#if defined(__LITTLE_ENDIAN__)
	lwz	r4,36(RSTACK)
#else
	lwz	r4,32(RSTACK)
#endif
	subf	r0,r4,r0
	rlwinm	r0,r0,0,1,11
#if defined(__LITTLE_ENDIAN__)
	lwz	r4,28(RSTACK)
#else
	lwz	r4,24(RSTACK)
#endif
	add	r4,r4,r0
#if defined(__LITTLE_ENDIAN__)
	stw	r4,28(RSTACK)
#else
	stw	r4,24(RSTACK)
#endif
	lfd	fp2,16(RSTACK)
	ori	r0,r0,0x0          !Break stw 24(RSTacK) lfd 24(RSTACK) into 2 groups
	addis	r0,r4,-16
	lfd	fp0,24(RSTACK)
	fcmpu	cr0,fp2,fp0
__L1d8:
	bge     cr0,__L1e8
#if defined(__LITTLE_ENDIAN__)
	stw	r0,28(RSTACK)
#else
	stw	r0,24(RSTACK)
#endif
	lfd	fp2,16(RSTACK)
	lfd	fp0,24(RSTACK)
__L1e8:
	fsub	fp4,fp2,fp0
	stfd	fp4,16(RSTACK)
	lfd	fp2,32(RSTACK)
	fcmpu	cr0,fp4,fp2
	bng     cr0,__L230
#if defined(__LITTLE_ENDIAN__)
	lwz	r0,20(RSTACK)
	lwz	r4,36(RSTACK)
#else
	lwz	r0,16(RSTACK)
	lwz	r4,32(RSTACK)
#endif
	stfd	fp2,24(RSTACK)
	subf	r0,r4,r0
#if defined(__LITTLE_ENDIAN__)
	lwz	r4,28(RSTACK)
#else
	lwz	r4,24(RSTACK)
#endif
	rlwinm	r0,r0,0,1,11
	add	r4,r4,r0
	addis	r0,r4,-16
#if defined(__LITTLE_ENDIAN__)
	stw	r4,28(RSTACK)
#else
	stw	r4,24(RSTACK)
#endif
	ori	r0,r0,0x0
        ori     r0,r0,0x0
	lfd	fp2,16(RSTACK)
	lfd	fp0,24(RSTACK)
	fcmpu	0,fp2,fp0
	b       __L1d8
__L230:
	lfd	fp1,8(RSTACK)
__L234:
	fcmpu	cr0,fp4,fp1
	lfs	fp2,8(r11)           ! 00000000
	blt     cr0,__L258
	fsub	fp4,fp4,fp1
	stfd	fp4,16(RSTACK)
	fcmpu	cr0,fp4,fp1
	blt     cr0,__L258
	fsub	fp4,fp4,fp1
	stfd	fp4,16(RSTACK)
__L258:
	fcmpu	cr0,fp2,fp4
#if defined(__LITTLE_ENDIAN__)
	lwz	r0,20(RSTACK)
#else
	lwz	r0,16(RSTACK)
#endif
	bne     cr0,__L280
	or	r0,r0,r8
#if defined(__LITTLE_ENDIAN__)
	stw	r0,20(RSTACK)
#else
	stw	r0,16(RSTACK)
#endif
	ori	r0,r0,0x0		!Break store and load into separate groups to eliminate flush
	ori	r0,r0,0x0
	ori	r0,r0,0x0
	lfd	fp0,16(RSTACK)
	addi	RSTACK,RSTACK,48
	blr
__L280:
	xor	r0,r0,r8
#if defined(__LITTLE_ENDIAN__)
	stw	r0,20(RSTACK)
#else
	stw	r0,16(RSTACK)
#endif
	ori	r0,r0,0x0		!Break store and load into separate groups to eliminate flush
	ori	r0,r0,0x0
	ori	r0,r0,0x0
	lfd	fp0,16(RSTACK)
	addi	RSTACK,RSTACK,48
	blr
endproc.__doubleRemainder:
! ==================================== FLOAT/DOUBLE CODE ENDS ======================================
#else
__double2Long:
   startproc.__double2Long:
   endproc.__double2Long:
__long2Double:
   startproc.__long2Double:
   endproc.__long2Double:
__long2Float:
   startproc.__long2Float:
   endproc.__long2Float:
__long2Float_mv:
   startproc.__long2Float_mv:
   endproc.__long2Float_mv:
__integer2Double:
   startproc.__integer2Double:
   endproc.__integer2Double:
__doubleRemainder:
	startproc.__doubleRemainder:
	endproc.__doubleRemainder:
#endif


! End   csect   H.10.NO_SYMBOL{PR}

! .data section

#ifdef AIXPPC
		.toc                            ! 0x00000030
  T.18.__longDivide:
		.tc     H.18.__longDivide{TC},__longDivide{DS}
  T.19.__longDivideEP:
		.tc     H.19.__longDivideEP{TC},__longDivideEP{DS}
  T.20.__double2Long:
		.tc     H.20.__double2Long{TC},__double2Long{DS}
  T.22.__integer2Double:
		.tc     H.22.__integer2Double{TC},__integer2Double{DS}
  T.23.__long2Double:
		.tc     H.23.__long2Double{TC},__long2Double{DS}
  T.25.__doubleRemainder:
		.tc     H.25.__doubleRemainder{TC},__doubleRemainder{DS}
  T.26.__long2Float:
		.tc     H.26.__long2Float{TC},__long2Float{DS}
  T.27.__long2Float_mv:
                .tc     H.27.__long2Float_mv{TC},__long2Float_mv{DS}
  T.28.__unsignedLongDivide:
		.tc     H.28.__unsignedLongDivide{TC},__unsignedLongDivide{DS}
  T.29.__unsignedLongDivideEP:
		.tc     H.29.__unsignedLongDivideEP{TC},__unsignedLongDivideEP{DS}
  TOC__mathConst:
                .tc     __mathConst[TC],__mathConst

		.csect  __longDivide{DS}
		ADDR    .__longDivide           ! "\0\0\0\0"
		ADDR    TOC{TC0}                ! "\0\0\0000"
		ADDR    0x00000000              ! "\0\0\0\0"
  ! End   csect   __longDivide{DS}

		.csect  __longDivideEP{DS}
		ADDR    .__longDivideEP         ! "\0\0\0\0"
		ADDR    TOC{TC0}                ! "\0\0\0000"
		ADDR    0x00000000              ! "\0\0\0\0"
  ! End   csect   __longDivideEP{DS}

		.csect  __unsignedLongDivide{DS}
		ADDR    .__unsignedLongDivide           ! "\0\0\0\0"
		ADDR    TOC{TC0}                ! "\0\0\0000"
		ADDR    0x00000000              ! "\0\0\0\0"
  ! End   csect   __unsignedLongDivide{DS}

		.csect  __unsignedLongDivideEP{DS}
		ADDR    .__unsignedLongDivideEP         ! "\0\0\0\0"
		ADDR    TOC{TC0}                ! "\0\0\0000"
		ADDR    0x00000000              ! "\0\0\0\0"
  ! End   csect   __unsignedLongDivideEP{DS}

		.csect  __double2Long{DS}
		ADDR    .__double2Long          ! "\0\0\0\0"
		ADDR    TOC{TC0}                ! "\0\0\0000"
		ADDR    0x00000000              ! "\0\0\0\0"
  ! End   csect   __double2Long{DS}

		.csect  __integer2Double{DS}
		ADDR    .__integer2Double       ! "\0\0\0\0"
		ADDR    TOC{TC0}                ! "\0\0\0000"
		ADDR    0x00000000              ! "\0\0\0\0"
  ! End   csect   __integer2Double{DS}

		.csect  __long2Double{DS}
		ADDR    .__long2Double          ! "\0\0\0\0"
		ADDR    TOC{TC0}                ! "\0\0\0000"
		ADDR    0x00000000              ! "\0\0\0\0"
  ! End   csect   __long2Double{DS}

		.csect  __long2Float{DS}
		ADDR    .__long2Float           ! "\0\0\0\0"
		ADDR    TOC{TC0}                ! "\0\0\0000"
		ADDR    0x00000000              ! "\0\0\0\0"
  ! End   csect   __long2Float{DS}

                .csect  __long2Float_mv{DS}
                ADDR    .__long2Float_mv        ! "\0\0\0\0"
                ADDR    TOC{TC0}                ! "\0\0\0000"
                ADDR    0x00000000              ! "\0\0\0\0"
  ! End   csect   __long2Float_mv{DS}

		.csect  __doubleRemainder{DS}
		ADDR    .__doubleRemainder          ! "\0\0\0\0"
		ADDR    TOC{TC0}                ! "\0\0\0000"
		ADDR    0x00000000              ! "\0\0\0\0"
  ! End   csect   __doubleRemainder{DS}

#elif defined(LINUXPPC64)
          .section  ".toc"
TOC__mathConst:
          .tc       __mathConst[TC],__mathConst

#if !defined(__LITTLE_ENDIAN__)
	  .section  ".opd","aw"
	  .align  3

	  .globl  __longDivide
	  .size   __longDivide,24
__longDivide:
	  .quad   .__longDivide
	  .quad   .TOC.@tocbase
	  .long   0x00000000
	  .long   0x00000000

	  .globl  __longDivideEP
	  .size   __longDivideEP,24
__longDivideEP:
	  .quad   .__longDivideEP
	  .quad   .TOC.@tocbase
	  .long   0x00000000
	  .long   0x00000000

	  .globl  __unsignedLongDivide
	  .size   __unsignedLongDivide,24
__unsignedLongDivide:
	  .quad   .__unsignedLongDivide
	  .quad   .TOC.@tocbase
	  .long   0x00000000
	  .long   0x00000000

	  .globl  __unsignedLongDivideEP
	  .size   __unsignedLongDivideEP,24
__unsignedLongDivideEP:
	  .quad   .__unsignedLongDivideEP
	  .quad   .TOC.@tocbase
	  .long   0x00000000
	  .long   0x00000000

	  .globl  __double2Long
	  .size   __double2Long,24
__double2Long:
	  .quad   .__double2Long
	  .quad   .TOC.@tocbase
	  .long   0x00000000
	  .long   0x00000000

	  .globl  __integer2Double
	  .size   __integer2Double,24
__integer2Double:
	  .quad   .__integer2Double
	  .quad   .TOC.@tocbase
	  .long   0x00000000
	  .long   0x00000000

	  .globl  __long2Double
	  .size   __long2Double,24
__long2Double:
	  .quad   .__long2Double
	  .quad   .TOC.@tocbase
	  .long   0x00000000
	  .long   0x00000000

	  .globl  __long2Float
	  .size   __long2Float,24
__long2Float:
	  .quad   .__long2Float
	  .quad   .TOC.@tocbase
	  .long   0x00000000
	  .long   0x00000000

          .globl  __long2Float_mv
          .size   __long2Float_mv,24
__long2Float_mv:
          .quad   .__long2Float_mv
          .quad   .TOC.@tocbase
          .long   0x00000000
          .long   0x00000000

	  .globl  __doubleRemainder
	  .size   __doubleRemainder,24
__doubleRemainder:
	  .quad   .__doubleRemainder
	  .quad   .TOC.@tocbase
	  .long   0x00000000
	  .long   0x00000000
#endif
#endif

#if defined(AIXPPC)
        .csect    Math_const{RW}
#elif defined (LINUXPPC64)
        .section ".data"
        .align   4
        .type __mathConst,@object
        .size __mathConst,88
#endif
__mathConst:
        .long   0x43dfffff    ! 0
        .long   0xffffffff
        .long   0x00000000    ! 8
        .long   0x00000001
        .long   0xdf000000    ! 10
        .long   0x4f000000    ! 14
        .long   0x59804000    ! 18
        .long   0x2f800000    ! 1c
        .long   0x4f800000    ! 20
        .long   0x59800000    ! 24
        .long   0xd9800004    ! 28
        .long   0xd9800008    ! 2c
        .long   0xc5300000    ! 30
        .long   0x7fffffff
#if defined(__LITTLE_ENDIAN__)
	.long	0x00000000    ! 38 double qnan
	.long	0x7ff80000
#else
        .long   0x7ff80000    ! 38 double qnan
        .long   0x00000000
#endif
        .long   0x7fde42d1    ! 40
        .long   0x30773b76
        .long   0x5a800000    ! 48 single 2^54
        .long   0x24800000    ! 4c single 1/(2^54)
        .long   0x3f000000    ! 50 single 0.5
        .long   0x00000000
! End   csect    Math_const{RW}

