/*******************************************************************************
 * Copyright (c) 2020, 2022 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

#include "jilconsts.inc"

	.file "Recompilation.s"

	.globl	_countingRecompileMethod
	.globl	_samplingRecompileMethod
	.globl	_countingPatchCallSite
	.globl	_samplingPatchCallSite
	.globl	_induceRecompilation
	.globl	_revertToInterpreterGlue
	.globl	_initialInvokeExactThunkGlue

	.extern	jitCallCFunction
	.extern	jitRetranslateMethod // in cnathelp.cpp
	.extern	mcc_callPointPatching_unwrapper // in J9CodeCache.cpp
	.extern	arm64IndirectCallPatching_unwrapper // in Recomp.cpp
	.extern	induceRecompilation_unwrapper // in JitRuntime.cpp
	.extern	initialInvokeExactThunk_unwrapper // in JitRuntime.cpp

	.set	J9TR_CountingLR_BodyInfo, 0
	.set	J9TR_CountingLR_StartPC, 8
	.set	J9TR_CountingPrologueSize, 40 // 10 instructions
	.set	J9TR_SamplingLR_BodyInfo, 0
	.set	J9TR_SamplingLR_StartPC, 16
	.set	J9TR_BodyInfo_MethodInfo, 8
	.set	J9TR_MethodInfo_J9Method, 0
	.set	J9TR_InterpreterEntryOffset, -2 // always little endian

#define J9VMTHREAD s10
#define J9SP s11

#define hlt ld zero, 0(zero)

_countingRecompileMethod:
	hlt

_samplingRecompileMethod:
	hlt

	.align	3
const_jitRetranslateMethod:
	.dword	jitRetranslateMethod

_countingPatchCallSite:
	hlt

_samplingPatchCallSite:
	hlt

	.align	3
const_mcc_callPointPatching_unwrapper:
	.dword	mcc_callPointPatching_unwrapper
const_riscvIndirectCallPatching_unwrapper:
	.dword	riscvIndirectCallPatching_unwrapper

// _induceRecompilation

_induceRecompilation:
	hlt

	.align	3
const_induceRecompilation_unwrapper:
	.dword	induceRecompilation_unwrapper

// revertToInterpreterGlue

_revertToInterpreterGlue:
	hlt

// _initialInvokeExactThunkGlue
//
// trash:	x8

_initialInvokeExactThunkGlue:
	hlt

	.align	3
const_initialInvokeExactThunk_unwrapper:
	.dword	initialInvokeExactThunk_unwrapper
