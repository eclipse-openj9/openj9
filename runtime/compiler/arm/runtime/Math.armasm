/*******************************************************************************
 * Copyright (c) 2000, 2016 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

AREA Math_c, CODE, READONLY

	EXPORT	__intDivide
	EXPORT	__longDivide
	EXPORT	__intRemainder
	EXPORT	__longRemainder
	EXPORT	__double2Long
	EXPORT  __float2Long
	EXPORT	__integer2Double
	EXPORT	__long2Double
	EXPORT  __long2Float
	EXPORT	__double2Integer
	EXPORT	__doubleRemainder
	EXPORT  __floatRemainder
	EXPORT	__longShiftRightArithmetic
	EXPORT	__longShiftRightLogical
	EXPORT	__longShiftLeftLogical

	IMPORT	__intDivideC
	IMPORT	__longDivideC
	IMPORT	__intRemainderC
	IMPORT	__longRemainderC
#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
	IMPORT  __convertDouble2Long
	IMPORT  __convertLong2Double
	IMPORT  __convertLong2Float
	IMPORT  __convertFloat2Long
	IMPORT  __doubleRemainderC
	IMPORT  __floatRemainderC
#endif

constTable
	DCD	0xffffffff     ; 0 max long (to double precision, not exact) 9,223,372,036,854,775,000 
	DCD	0x43dfffff 
	DCD	0x00000000     ; 8 min long (to double precision, not exact) -9,223,372,036,854,776,000
	DCD	0xC3E00000
	DCD     0x5EFFFFFF     ; 16 max long (to float)
	DCD     0xDF000000     ; 20 min long (to float)
	DCD	0x00000000     ; 24 double 0.0
	DCD	0x00000000
	DCD	0x00000000     ; 32 double QNaN
	DCD	0x7FF80000

; in:	r0 = dividend
;	r1 = divisor
;
; out:	r0 = quotient
;
; trash:	none

__intDivide
	cmp		r0,#0x80000000
	beq		_intDivSpecial
_intDivResume
	stmdb	r13!,{r2-r3,r14}
	bl			__intDivideC
	ldmia	r13!,{r2-r3,r14}
	mov		r15,r14
_intDivSpecial
	cmn		r1,#1
	bne		_intDivResume
; leave r0 alone - it already has the right value (0x80000000)
	mov		r15,r14

__longDivide
	stmdb	r13!,{r4-r10,r14}
	mov		r4,r0
	mov		r5,r1
	mov		r6,r2
	mov		r7,r3
	bl			__longDivideC
	mov		r8,r0
	mov		r9,r1
	mov		r0,r4
	mov		r1,r5
	mov		r2,r6
	mov		r3,r7
	bl			__longRemainderC
	mov		r2,r0
	mov		r3,r1
	mov		r0,r8
	mov		r1,r9
	ldmia	r13!,{r4-r10,r14}
	mov		r15,r14

; in:		r0 = dividend
;			r1 = divisor
;
; out:	r0 = remainder
;
; trash:	none

__intRemainder
	cmp		r0,#0x80000000
	beq		_intRemSpecial
_intRemResume
	stmdb	r13!,{r2-r3,r14}
	bl			__intRemainderC
	ldmia	r13!,{r2-r3,r14}
	mov		r15,r14
_intRemSpecial
	cmn		r1,#1
	bne		_intRemResume
	mov		r0,#0
	mov		r15,r14

__longRemainder
	stmdb	r13!,{r14}
	bl			__longRemainderC
	ldmia	r13!,{r14}
	mov		r15,r14	

__double2Long
#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
	ldr	r2, __L7
	fcmpd	d0, d0
	fmstat
	bvc	__L0
	mov	r0, #0			; return 0 for NaN
	mov	r1, #0
	mov	r15,r14
__L0
	vldr    d1, [r2]		; 0x43dfffff ffffffff
	fcmpd	d0, d1
	fmstat
	bls	__L1
	mov	r1, #0
	sub	r0, r1, #1		; Largest long representable. r0 = 0xFFFFFFFF (little-endian)
	mov	r1, r0, lsr #1		; r1 = 0x7FFFFFFFF
	mov	r15,r14
__L1
	vldr	d1, [r2, #+8]		; 0xC3E00000 00000000
	fcmpd	d0, d1
	fmstat
	bge	__L2
	mov	r1, #0x80000000		; Smallest long representable r1 = 0x80000000 (Little-endian)
	mov	r0, #0			; r0 = 0x000000000
	mov	r15,r14
__L2					; regular conversion
	stmdb	r13!,{r2-r10,r14}
	bl	__convertDouble2Long    ; result in (r0, r1)
	ldmia	r13!,{r2-r10,r14}
#endif
	mov		r15,r14

__float2Long
#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
	ldr	r2, __L7
	fcmps	s0, s0
	fmstat
	bvc	__L4
	mov	r0, #0			; return 0 for NaN
	mov	r1, #0
	mov	r15,r14
__L4	
	vldr    s1, [r2, #+16]		; 0x5EFFFFFF
	fcmps	s0, s1
	fmstat
	bls	__L5
	mov	r1, #0                  ; Little endian representation
	sub	r0, r1, #1		; Largest long representable. r0 = 0xFFFFFFFF
	mov	r1, r0, lsr #1		; r1 = 0x7FFFFFFFF
	mov	r15,r14
__L5
	vldr	s1, [r2, #+20]		; 0xDF000000
	fcmps	s0, s1
	fmstat
	bge	__L6
	mov	r1, #0x80000000		; Smallest long representable r0 = 0x00000000
	mov	r0, #0			; r1 = 0x800000000
	mov	r15,r14
__L6					; regular conversion		
	stmdb	r13!,{r2-r10,r14}
	bl	__convertFloat2Long	; result in (r0, r1)
	ldmia	r13!,{r2-r10,r14}
#endif
	mov	r15,r14

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
__L7
	DCD	constTable	
#endif

__integer2Double
	mov		r15,r14

__long2Double
#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
	stmdb	r13!,{r2-r10,r14}
	bl	__convertLong2Double
	ldmia	r13!,{r2-r10,r14}
#endif
	mov	r15,r14

__long2Float
#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
	stmdb	r13!,{r2-r10,r14}
	bl	__convertLong2Float
	ldmia	r13!,{r2-r10,r14}
#endif
	mov	r15,r14

__double2Integer
	mov		r15,r14

__doubleRemainder
#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
	stmdb	r13!,{r2-r10,r14}
	bl	__doubleRemainderC
	ldmia	r13!,{r2-r10,r14}
#endif
	mov	r15,r14

__floatRemainder
#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
	stmdb	r13!,{r2-r10,r14}
	bl	__floatRemainderC
	ldmia	r13!,{r2-r10,r14}
#endif
	mov	r15,r14

; in:
;	r0 - low 32 bits to shift
;	r1 - high 32 bits to shift
;	r2 - shift count (destroyed in call)
;
; out:
;	r0 - low 32 bits shifted
;	r1 - high 32 bits shifted

__longShiftRightArithmetic
	and	R2, R2, #63
	cmp	R2, #31
	bgt	L_31_or_greater_ASR
; needed?
	cmp	R2, #0
	moveq	r15,r14
; shift by 1 to 31
	stmdb	r13!,{r3-r6}
	and	R2, R2, #31
	mov	R3, R0, LSR R2
	mov	R4, R1, ASR R2
	rsb	R5, R2, #32
	mvn	R6, #0
	mov	R6, R6, LSR R5		; now have a low bit mask of 32 - shiftCount
	and	R1, R6, R1
	mov	R1, R1, LSL R5
	orr	R0, R1, R3
	mov	R1, R4
	ldmia	r13!,{r3-r6}
	mov	r15,r14			; return
L_31_or_greater_ASR
	sub	R2, R2, #32
	movs	R0, R1, ASR R2
	mvnlt	R1, #0
	movge	R1, #0
	mov	r15,r14			; return

; in:
;	r0 - low 32 bits to shift
;	r1 - high 32 bits to shift
;	r2 - shift count (destroyed in call)
;
; out:
;	r0 - low 32 bits shifted
;	r1 - high 32 bits shifted

__longShiftRightLogical
	and	R2, R2, #63
	cmp	R2, #31
	bgt	L_31_or_greater_LSR
; needed?
	cmp	R2, #0
	moveq	r15,r14
; shift by 1 to 31
	stmdb	r13!,{r3-r6}
	and	R2, R2, #31
	mov	R3, R0, LSR R2
	mov	R4, R1, LSR R2
	rsb	R5, R2, #32
	mvn	R6, #0
	mov	R6, R6, LSR R5		; now have a low bit mask of 32 - shiftCount
	and	R1, R6, R1
	mov	R1, R1, LSL R5
	orr	R0, R1, R3					; masked old low bits of high | new low
	mov	R1, R4
	ldmia	r13!,{r3-r6}
	mov	r15,r14			; return
L_31_or_greater_LSR
	sub	R2, R2, #32
	mov	R0, R1, LSR R2
	mov	R1, #0
	mov	r15,r14			; return

; in:
;	r0 - low 32 bits to shift
;	r1 - high 32 bits to shift
;	r2 - shift count (destroyed in call)
;
; out:
;	r0 - low 32 bits shifted
;	r1 - high 32 bits shifted

__longShiftLeftLogical
	and	R2, R2, #63
	cmp	R2, #31
	bgt	L_31_or_greater_LSL
; needed?
	cmp	R2, #0
	moveq	r15,r14
; shift by 1 to 31
	stmdb	r13!,{r3-r6}
	and	R2, R2, #31
	mov	R3, R0, LSL R2
	mov	R4, R1, LSL R2
	rsb	R5, R5, #32
	mvn	R6, #0
	mov	R6, R2, LSL R5		; now have a high bit mask of 32 - shiftCount
	and	R0, R6, R0
	mov	R0, R0, LSR R5
	orr	R1, R4, R0
	mov	R0, R3
	ldmia	r13!,{r3-r6}
	mov	r15,r14			; return
L_31_or_greater_LSL
	sub	R2, R2, #32
	mov	R1, R0, LSL R2
	mov	R0, #0
	mov	r15,r14			; return

	END

