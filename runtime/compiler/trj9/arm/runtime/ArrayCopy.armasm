/*******************************************************************************
 * Copyright (c) 2000, 2016 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

#include "j9cfg.h"
   AREA ArrayCopy_c, CODE, READONLY  
   EXPORT   __arrayCopy
   

;r0 - length in bytes
;r1 - src addr
;r2 - dst addr


__arrayCopy
      tst   r0, r0
      bne   testArrayCopy
      mov   r15, r14                      ;return if no bytes to copy      
testArrayCopy
      stmdb r13!,{r1-r8}                  ;preserve killed registers on stack
      subs  r3, r2, r1
      cmpne r3, r0                        ;if src == dst, do forward array copy
      blo   _reverseArrayCopy             ;byteLength > dstAddr - srcAddr , must do reverse array copy
forwardArrayCopy
      tst   r1, #3                        ;check alignment of source array
      beq   srcWordAlignCopy
      tst   r2, #3            
      beq   dstWordAlignCopy
      tst   r1, #1
      bne   byteCopyLoop
      tst   r2, #1
      beq   bothHalfWordAlignedCopy
byteCopyLoop
      ldrb  r3, [r1], #1
      subs  r0, r0, #1
      strb  r3, [r2], #1
      bne   byteCopyLoop
      ldmia r13!,{r1-r8}                  ;restore killed register before return
      mov r15, r14                        ;return
            
srcWordAlignCopy
      tst   r2, #3                        ;check for dst having 1, 2 or 3 byte alignment
      beq   bothWordAlignedCopy           ;if dst is also word aligned branch to fast copy loop      
      tst   r2, #1
      bne   byteCopyLoop                  ;branch to catch all byte copy loop
srcWordAlignDstHalfAlign
      movs  r7, r0, LSR #2                ;get number of words
      beq   dstHalfAlign2ByteLeft
dstHalfAlignCopyLoop
      ldr   r3, [r1], #4                  ;load whole word           
      subs  r7, r7, #1
#if defined(J9VM_ENV_LITTLE_ENDIAN)
      strh  r3, [r2], #2                  ;store lower nibble
      mov   r3, r3, LSR #16
#else
      mov   r4, r3, LSR #16               
      strh  r4, [r2], #2                  ;store upper nibble
#endif
      strh  r3, [r2], #2                  ;store lower nibble (on big endian), store upper nibble (on little endian)
      bne   dstHalfAlignCopyLoop
dstHalfAlign2ByteLeft
      tst   r0, #2
      beq   dstHalfAlign1ByteLeft
      ldrh  r3, [r1], #2
      strh  r3, [r2], #2
dstHalfAlign1ByteLeft
      tst   r0, #1
      beq   doneDstHalfAlignArrayCopy
      ldrb  r3, [r1]
      strb  r3, [r2]
doneDstHalfAlignArrayCopy
      ldmia r13!,{r1-r8}                  ;restore killed register before return
      mov r15, r14                        ;return      
      
dstWordAlignCopy
      tst   r1, #1                        ; do not have to check if src is word aligned as that was already checked in forwardArrayCopy
      bne   byteCopyLoop                  ; branch to catch all byte copy loop
dstWordAlignSrcHalfAlign
      movs  r7, r0, LSR #2                ;get number of words
      beq   srcHalfAlign2BytesLeft
srcHalfAlignCopyLoop
      ldrh  r3, [r1], #2
      ldrh  r4, [r1], #2
#if defined(J9VM_ENV_LITTLE_ENDIAN)
      orr   r3, r3, r4, LSL #16           ; combine separate half loaded values into one register
#else
      orr   r3, r4, r3, LSL #16           ; combine separate half loaded values into one register
#endif      
      subs  r7, r7, #1
      str   r3, [r2], #4                  ; now source is word aligned but must store in dest at unaligned addresses
      bne   srcHalfAlignCopyLoop
srcHalfAlign2BytesLeft
      tst   r0, #2
      beq   dstHalfAlign1ByteLeft
      ldrh  r3, [r1], #2
      strh  r3, [r2], #2
srcHalfAlign1ByteLeft
      tst   r0, #1
      beq   doneSrcHalfAlignArrayCopy
      ldrb  r3, [r1]
      strb  r3, [r2]
doneSrcHalfAlignArrayCopy
      ldmia r13!,{r1-r8}                  ;restore killed register before return
      mov r15, r14                        ;return      

bothHalfWordAlignedCopy
      cmp   r0, #4
      andmi r8, r0, #0xF                  ;get left over bytes
      bmi   testHalfWordCopy
      ldrh  r3, [r1], #2
      strh  r3, [r2], #2
      sub   r0, #2
bothWordAlignedCopy
      and   r8, r0, #0xF                  ;get left over bytes
      movs  r7, r0, LSR #4                ;get number of groups of 16 bytes
      beq   testWordCopy                  ;if r7 == 0 then less than 16 bytes to copy
wordCopyLoop
      ldmia r1!, {r3-r6}                  ;load 16 bytes starting at r1 into r3-r6
      subs  r7, r7, #1 
      stmia r2!, {r3-r6}                  ;store 16 bytes starting at r2 from r3-r6
      bne   wordCopyLoop                  ;still some groups of 16 bytes left
testWordCopy
      movs   r4, r8, LSR #2               ;how many word loads left
      beq   testHalfWordCopy
wordCopy
      ldr   r3, [r1], #4
      subs  r4, r4, #1
      str   r3, [r2], #4
      bne   wordCopy
testHalfWordCopy
      tst   r8, #2                        ;how many half word loads, 0 or 1
      beq   testByteCopy
      ldrh  r3, [r1], #2
      strh  r3, [r2], #2
testByteCopy
      tst   r8, #1                        ;how many byte loads, 0 or 1
      beq   doneForwardArrayCopy
      ldrb  r3, [r1]
      strb  r3, [r2]
doneForwardArrayCopy
      ldmia r13!,{r1-r8}                  ;restore killed register before return
      mov r15, r14                        ;return
                        
_reverseArrayCopy
      add   r1, r1, r0
      add   r2, r2, r0
      tst   r3, #1                        ;byte array copy
      bne   initReverseByteCopy
      tst   r3, #2
      bne   initReverseHalfWordCopy       ;short array copy
reverseTestByteCopy
      tst   r1, #1                        ;if r1 is odd, copy 1 byte
      beq   reverseTestHalfWordCopy
      ldrb  r3, [r1, #-1]!                ; ! -> write back into base (saves an instruction for decrementing for r1 and r2)
      strb  r3, [r2, #-1]!
      sub   r0, r0, #1
reverseTestHalfWordCopy
      tst   r1, #2                        ;if r1 is not 4 byte aligned, copy 2 bytes
      beq   reverseTestWordCopy
      ldrh  r3, [r1, #-2]!                ; ! -> write back into base (saves an instruction for decrementing for r1 and r2)
      strh  r3, [r2, #-2]!
      sub   r0, r0, #2
reverseTestWordCopy
      and   r8, r0, #0xF                  ;get left over bytes
      movs  r7, r0, LSR #4                ;get number of groups of 16 bytes
      beq   reverseTestReminderWordCopy
reverseWordCopyLoop
      ldmdb r1!, {r3-r6}                  ;load 16 bytes starting at r1 into r3-r6  ldmda to ldmdb
      subs  r7, r7, #1 
      stmdb r2!, {r3-r6}                  ;store 16 bytes starting at r2 from r3-r6 stmda to stmdb
      bne   reverseWordCopyLoop           ;still some groups of 16 bytes left
reverseTestReminderWordCopy
      movs   r4, r8, LSR #2               ;how many word loads left
      beq   reverseTestReminderHalfWordCopy
reverseReminderWordCopy
      ldr   r3, [r1, #-4]!
      subs  r4, r4, #1
      str   r3, [r2, #-4]!
      bne   reverseReminderWordCopy
reverseTestReminderHalfWordCopy
      tst   r8, #2                        ;how many half word loads, 0 or 1
      beq   reverseTestReminderByteCopy
      ldrh  r3, [r1, #-2]!
      strh  r3, [r2, #-2]!
reverseTestReminderByteCopy
      tst   r8, #1                        ;how many byte loads, 0 or 1
      beq   doneReverseArrayCopy
      ldrb  r3, [r1, #-1]
      strb  r3, [r2, #-1]
doneReverseArrayCopy
      ldmia r13!,{r1-r8}                  ;restore killed register before return
      mov r15, r14                        ;return             

initReverseHalfWordCopy
reverseHalfWordTestByteCopy
      tst   r1, #1                        ;if r1 is odd, copy 1 byte
      beq   reverseHalfWordTestHalfWordCopy
      ldrb  r3, [r1, #-1]!                ; ! -> write back into base (saves an instruction for decrementing for r1 and r2)
      strb  r3, [r2, #-1]!
      sub   r0, r0, #1
reverseHalfWordTestHalfWordCopy
      and   r8, r0, #1
      movs  r7, r0, LSR #1                ;get number of groups of short
      beq   reverseHalfWordTestReminderByteCopy
reverseHalfWordTestHalfWordCopyLoop
      ldrh  r3, [r1, #-2]!                ; ! -> write back into base (saves an instruction for decrementing for r1 and r2)
      subs  r7, r7, #1
      strh  r3, [r2, #-2]!
      bne   reverseHalfWordTestHalfWordCopyLoop
reverseHalfWordTestReminderByteCopy
      tst   r8, #1                        ;how many byte loads, 0 or 1
      beq   doneReverseHalfWordArrayCopy
      ldrb  r3, [r1, #-1]
      strb  r3, [r2, #-1]
doneReverseHalfWordArrayCopy
      ldmia r13!,{r1-r8}                  ;restore killed register before return
      mov r15, r14                        ;return

initReverseByteCopy
reverseByteCopyLoop
      ldrb  r3, [r1, #-1]!
      subs  r0, r0, #1
      strb  r3, [r2, #-1]!
      bne   reverseByteCopyLoop
      ldmia r13!,{r1-r8}                  ;restore killed register before return
      mov r15, r14                        ;return       
      
   END



