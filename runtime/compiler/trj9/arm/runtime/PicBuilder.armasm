/*******************************************************************************
 * Copyright (c) 2000, 2016 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

#include "j9cfg.h"
#include "jilconsts.inc"

	AREA	PicBuilder_c, CODE, READONLY

; OLD NAMES - delete

	EXPORT	_interpreterVoidStaticGlue
	EXPORT	_interpreterSyncVoidStaticGlue
	EXPORT	_interpreterGPR3StaticGlue
	EXPORT	_interpreterSyncGPR3StaticGlue
	EXPORT	_interpreterGPR3GPR4StaticGlue
	EXPORT	_interpreterSyncGPR3GPR4StaticGlue
	EXPORT	_interpreterFPR0FStaticGlue
	EXPORT	_interpreterSyncFPR0FStaticGlue
	EXPORT	_interpreterFPR0DStaticGlue
	EXPORT	_interpreterSyncFPR0DStaticGlue

	EXPORT	_interpreterUnresolvedInstanceDataGlue
	EXPORT	_interpreterUnresolvedInstanceDataStoreGlue
	EXPORT	_interpreterUnresolvedClassGlue
	EXPORT	_interpreterUnresolvedClassGlue2
	EXPORT	_interpreterUnresolvedStringGlue
	EXPORT	_interpreterUnresolvedMethodTypeGlue
	EXPORT	_interpreterUnresolvedMethodHandleGlue
	EXPORT	_interpreterUnresolvedCallSiteTableEntryGlue
	EXPORT	_interpreterUnresolvedMethodTypeTableEntryGlue
	EXPORT	_interpreterUnresolvedStaticDataGlue
	EXPORT	_interpreterUnresolvedStaticDataStoreGlue
	EXPORT	_interpreterStaticGlue0
	EXPORT	_interpreterStaticGlue1
	EXPORT	_interpreterStaticGlueJ
	EXPORT	_interpreterStaticGlueF
	EXPORT	_interpreterStaticGlueD
	EXPORT	_interpreterSyncStaticGlue0
	EXPORT	_interpreterSyncStaticGlue1
	EXPORT	_interpreterSyncStaticGlueJ
	EXPORT	_interpreterSyncStaticGlueF
	EXPORT	_interpreterSyncStaticGlueD
	EXPORT	_nativeStaticHelper
	EXPORT	_interpreterUnresolvedStaticGlue
	EXPORT	_interpreterUnresolvedSpecialGlue
	EXPORT	_interpreterUnresolvedDirectVirtualGlue
	EXPORT	_virtualUnresolvedHelper
	EXPORT	_interfaceCallHelper
	EXPORT	_interfaceCompeteSlot2
	EXPORT	_interfaceSlotsUnavailable
	EXPORT  _compareAndSwap
	EXPORT  _compareAndSwapSMP
	EXPORT	__staticGlueTable

	IMPORT	jitResolveField
	IMPORT	jitResolveFieldSetter
	IMPORT	jitResolveClass
	IMPORT	jitResolveClassFromStaticField
	IMPORT	jitResolveString
	IMPORT	jitResolveMethodType
	IMPORT	jitResolveMethodHandle
	IMPORT	jitResolveInvokeDynamic
	IMPORT	jitResolveHandleMethod
	IMPORT	jitResolveStaticField
	IMPORT	jitResolveStaticFieldSetter
	IMPORT	jitResolveStaticMethod
	IMPORT	jitResolveSpecialMethod
	IMPORT	jitMethodIsSync
	IMPORT	jitMethodIsNative
	IMPORT	icallVMprJavaSendNativeStatic
	IMPORT	icallVMprJavaSendStatic0
	IMPORT	icallVMprJavaSendStatic1
	IMPORT	icallVMprJavaSendStaticJ
	IMPORT	icallVMprJavaSendStaticF
	IMPORT	icallVMprJavaSendStaticD
	IMPORT	icallVMprJavaSendStaticSync0
	IMPORT	icallVMprJavaSendStaticSync1
	IMPORT	icallVMprJavaSendStaticSyncJ
	IMPORT	icallVMprJavaSendStaticSyncF
	IMPORT	icallVMprJavaSendStaticSyncD
	IMPORT	jitResolveVirtualMethod
	IMPORT	jitThrowException
	IMPORT	jitResolveInterfaceMethod
	IMPORT	jitLookupInterfaceMethod
	IMPORT	flushICache
	IMPORT	jitCallCFunction
	IMPORT	mcc_reservationAdjustment_unwrapper
	IMPORT	mcc_callPointPatching_unwrapper
	IMPORT	mcc_lookupHelperTrampoline_unwrapper

; BL to PicBuilder from every snippet is always the instruction previous to LR

J9TR_Snippet_CallInstruction		EQU -4

; Static/special call snippet (and additional fields for unresolved snippet)

J9TR_SCSnippet_returnAddress		EQU 0
J9TR_SCSnippet_method			EQU 4
J9TR_USCSnippet_CPIndex			EQU 12
J9TR_USCSnippet_CP			EQU 16

; Unresvoled virtual call snippet

J9TR_UVCSnippet_returnAddress		EQU 0
J9TR_UVCSnippet_CP			EQU 4
J9TR_UVCSnippet_CPIndex			EQU 8

; Interface call snippet

J9TR_ICSnippet_returnAddress		EQU 0
J9TR_UICSnippet_CP			EQU 4
J9TR_UICSnippet_CPIndex			EQU 8
J9TR_ICSnippet_InterfaceClass		EQU 12
J9TR_ICSnippet_MethodIndex		EQU 16

; Encoding of CPIndex field in USC snippet (helperOffset: 8 bits, JVMPIEnabled: 1 bit, cpIndex: 23 bits)

J9TR_USCSnippet_JVMPIEnabled		EQU 0x00800000
J9TR_USCSnippet_HelperOffset		EQU 0xFF000000
J9TR_USCSnippet_HelperOffsetShift	EQU 24

; Unresolved data snippet

J9TR_UDSnippet_instructionAddr		EQU 0
J9TR_UDSnippet_CPIndex			EQU 4
J9TR_UDSnippet_CP			EQU 8
J9TR_UDSnippet_offset			EQU 12
J9TR_UDSnippet_template			EQU 16

; Static glue target table is laid out as:
;
; 00: 5 helpers
; 20: 5 sync helpers

J9TR_SyncJ2ITableOffset			EQU 20

// Ref:Raspi2
#define __ARM_ARCH_7A__

#ifdef ARMGNU
#define SETVAL(A,B) A = B
#else
#define SETVAL(A,B) A EQU B
#endif
#include "runtime/Helpers.inc"
#undef SETVAL


; in:		r0 = address of branch instruction
;			r1 = target of branch
;			r14 = return address
;
; out:	r0 = address of branch instruction
;
; trash:	r1, r2
;
; assumes branch target is in range of the branch instruction

L_rewriteBranch
	add	r2, r0, #8			; branchBase = branchInstructionAddress + 8
	sub	r1, r1, r2			; byteOffset = target - branchBase
	mov	r1, r1, LSR #2			; branchDistance = byteOffset >> 2
	bic	r1, r1, #0xFF000000		; mask out sign bits from instruction encoding
	ldr	r2, [r0]			; fetch branch instruction
	and	r2, r2, #0xFF000000		; mask out branch distance
	orr	r2, r2, r1			; or in new branch distance
	str	r2, [r0]			; rewrite branch instruction
	mov	r1, #4				; 1 instruction to flush
	b	flushICache

; in:     r0  = address of branch instruction
;         r1  = target of branch
;         r2  = helper Index
;         r14 = return address
;
; out:    r0  = address of branch instruction
;         r1  = target of branch
;         r14 = return address
;
; branches to rewriteBranch guaranting that target is in range

L_refreshHelper
							; check if distance is within range
	sub	r4, r1, r0				; distance = (target - (callSite+8)) >> 2
	sub	r4, r4, #8
	mov	r4, r4, ASR #2				; r4=distance
	mov	r5, r4, LSL #8
	subs	r4, r4, r5, ASR #8
	beq	L_rewriteBranch

L_outOfRange
	stmdb	r7!, {r0, r14}				; save registers
	stmdb	r7!, {r0, r2}				; push helper index (r2) and call site addr (r0)
	ldr	r0, const_mcc_lookupHelperTrampoline_unwrapper	; r0 <- addr of mcc_lookupHelperTrampoline_unwrapper
	mov	r1, r7					; r1 <- addr of the first arg for mcc_lookupHelperTrampoline_unwrapper
	mov	r2, r7					; r2 <- addr of the return value from mcc_lookupHelperTrampoline_unwrapper
	bl	jitCallCFunction
	ldr	r1, [r7]				; r1 <- new target
	add	r7, r7, #8				; restore sp
	ldmia	r7!, {r0, r14}				; restore registers
	b	L_rewriteBranch
const_mcc_lookupHelperTrampoline_unwrapper
	DCD	mcc_lookupHelperTrampoline_unwrapper

; in:		r3 = resolve helper address
;		r14 = snippet data
; out:
; trash:

L_mergedDataResolve
	ldr	r0, [r14, #J9TR_UDSnippet_CP]		; load CP
	ldr	r1, [r14, #J9TR_UDSnippet_CPIndex]	; load CP index
	ldr	r5, [r14, #J9TR_UDSnippet_template]	; load instruction template
	ldr	r4, [r14, #J9TR_UDSnippet_instructionAddr]	; load code cache RA
	ldr	r6, [r14, #J9TR_UDSnippet_offset]	; load offset
	add	r2, r4, #1				; increment for EX search
	mov	r14, r15				; call helper
	mov	r15, r3
	tst	r0, #1					; branch if the LSB (the "clinit" bit) was set in the resolved address
	bne	L_UDclinitCase
	add	r0, r0, r6				; add in offset to return value
#if defined(J9VM_ENV_LITTLE_ENDIAN)
	and   r2, r0, #0xFF				; encode bits 0-7 using the instruction template from the snippet
	orr   r5, r5, r2
	mov   r0, r0, LSR #8				; encode bits 8-15
	strb  r0, [r4, #4]
	mov   r0, r0, LSR #8				; encode bits 16-23
	strb  r0, [r4, #8]
	mov   r0, r0, LSR #8				; encode bits 24-31
	strb  r0, [r4, #12]
#else
        and   r2, r0, #0xFF                             ; encode bits 0-7 using the instruction template from the snippet
        orr   r5, r5, r2
        mov   r0, r0, LSR #8                            ; encode bits 8-15
        strb  r0, [r4, #7]
        mov   r0, r0, LSR #8                            ; encode bits 16-23
        strb  r0, [r4, #11]
        mov   r0, r0, LSR #8                            ; encode bits 24-31
        strb  r0, [r4, #15]
#endif
	mov   r0, r4					; flush from second instruction
	add   r0,r0,#4
	mov   r1, #12					; for 3 instructions
	bl    flushICache

	str   r5, [r4]					; store the first instruction now
	mov   r0, r4					; flush first instruction
	mov   r1, #4
	bl    flushICache

	mov	r14, r4
	ldmia	r7!, {r0-r6}				; restore r0-r6
	add	r7, r7, #8				; skip restore of r7, r8 -- stack might have moved
	   	          	 			; have to not restore r7
	ldmia	r7!, {r9-r11}				; restore r9-r11
	mov	r15, r14				; jump back to newly-written instruction sequence
L_UDclinitCase
	bic	r0, r0, #1		; clear the "clinit" bit
	mov	r11, #0x3c
	add     r0, r6, r0              ; Memory offset has to be added
	and	r11, r11, r5, LSR #10	; find the number of target register from the instruction template
	                             	; and have it multiplied by 4
	str 	r0, [r7, r11] 		; store resolved address where the target reg will load it from
	add	r14, r4, #4		; point to instruction following the branch to snippet
	ldmia 	r7!, {r0-r6} 		; restore r0-r6
	add 	r7, r7, #8 		; skip restore of r7, r8
	ldmia 	r7!, {r9-r11} 		; restore r9-r11
	mov 	r15, r14

const_jitResolveString
	DCD	jitResolveString
_interpreterUnresolvedStringGlue
	stmdb	r7!, {r0-r11}
	ldr	r3, const_jitResolveString			; load resolve helper address
	b	L_mergedDataResolve

const_jitResolveMethodType
	DCD	jitResolveMethodType
_interpreterUnresolvedMethodTypeGlue
	stmdb	r7!, {r0-r11}
	ldr	r3, const_jitResolveMethodType			; load resolve helper address
	b	L_mergedDataResolve

const_jitResolveMethodHandle
	DCD	jitResolveMethodHandle
_interpreterUnresolvedMethodHandleGlue
	stmdb	r7!, {r0-r11}
	ldr	r3, const_jitResolveMethodHandle			; load resolve helper address
	b	L_mergedDataResolve

const_jitResolveInvokeDynamic
	DCD	jitResolveInvokeDynamic
_interpreterUnresolvedCallSiteTableEntryGlue
	stmdb	r7!, {r0-r11}
	ldr	r3, const_jitResolveInvokeDynamic			; load resolve helper address
	b	L_mergedDataResolve

const_jitResolveHandleMethod
	DCD	jitResolveHandleMethod
_interpreterUnresolvedMethodTypeTableEntryGlue
	stmdb	r7!, {r0-r11}
	ldr	r3, const_jitResolveHandleMethod			; load resolve helper address
	b	L_mergedDataResolve

const_jitResolveField
	DCD	jitResolveField
_interpreterUnresolvedInstanceDataGlue
	stmdb	r7!, {r0-r11}
	ldr	r3, const_jitResolveField			; load resolve helper address
	b	L_mergedDataResolve

const_jitResolveFieldSetter
	DCD	jitResolveFieldSetter
_interpreterUnresolvedInstanceDataStoreGlue
	stmdb	r7!, {r0-r11}
	ldr	r3, const_jitResolveFieldSetter			; load resolve helper address
	b	L_mergedDataResolve

const_jitResolveClass
	DCD	jitResolveClass
_interpreterUnresolvedClassGlue
	stmdb	r7!, {r0-r11}
	ldr	r3, const_jitResolveClass			; load resolve helper address
	b	L_mergedDataResolve

const_jitResolveClassFromStaticField
	DCD	jitResolveClassFromStaticField
_interpreterUnresolvedClassGlue2
	stmdb	r7!, {r0-r11}
	ldr	r3, const_jitResolveClassFromStaticField			; load resolve helper address
	b	L_mergedDataResolve

const_jitResolveStaticField
	DCD	jitResolveStaticField
_interpreterUnresolvedStaticDataGlue
	stmdb	r7!, {r0-r11}
	ldr	r3, const_jitResolveStaticField			; load resolve helper address
	b	L_mergedDataResolve

const_jitResolveStaticFieldSetter
	DCD	jitResolveStaticFieldSetter
_interpreterUnresolvedStaticDataStoreGlue
	stmdb	r7!, {r0-r11}
	ldr	r3, const_jitResolveStaticFieldSetter		; load resolve helper address
	b	L_mergedDataResolve

_nativeStaticHelper
	ldr	r0, [r14, #J9TR_SCSnippet_method]		; get method
	ldr	r14, [r14, #J9TR_SCSnippet_returnAddress]	; get code cache return address
	bic	r0, r0, #1					; clear low bit if set for <clinit>
	b	icallVMprJavaSendNativeStatic			; jump to VM helper

; in:   r1    = snippet data
;       r14   = return address if not compiled
;
; out:  r0    = method
;       r14   = code cache return address
;
; trash:   r1, r2
;
; If this code does not return (i.e. it jumps to JIT code), r0-r3 contain garbage

L_mergedStaticGlueCallFixer
	ldr	r0, [r1, #J9TR_SCSnippet_method]		; get method
	mov	r2, r14						; save static glue return address
	ldr	r14, [r1, #J9TR_SCSnippet_returnAddress]	; get code cache return address
	tst	r0, #1						; branch if the LSB (the "clinit" bit) was set in the resolved address
	bne	L_SGCclinitCase
	ldr	r1, [r0, #J9TR_MethodPCStartOffset]		; get I->J start address
	tst	r1, #J9TR_MethodNotCompiledBit			; is method now compiled?
	movne	r15, r2						; if not, return to static glue to call interpreter
	ldr	r5, [r0, #J9TR_MethodPCStartOffset]		; get I->J start address
	sub	r4, r14, #4					; get address of BL instruction (code cache RA points to instruction following BL)
	stmdb	r7!, {r0, r4, r5}				; push:	addr of the callee (MethodPCStartOffset)
								;	addr of BL instr
								;	method
								; prepare args for jitCallCFunction:
	ldr	r0, const_mcc_callPointPatching_unwrapper	; addr of mcc_callPointPatching_unwrapper
	mov	r1, r7						; addr of the first arg for patchCallPoint
	mov	r2, r7						; where to put the return value
	bl	jitCallCFunction
	add	r7, r7, #12					; restore SP
	add	r14, r4, #4					; set LR to code cache RA
	mov	r15, r5						; jump to the I->J start address
const_mcc_callPointPatching_unwrapper
	DCD	mcc_callPointPatching_unwrapper
L_SGCclinitCase
	bic	r0, r0, #1					; clear the "clinit" bit
	ldr	r1, [r0, #J9TR_MethodPCStartOffset]		; get I->J start address
	tst	r1, #J9TR_MethodNotCompiledBit			; is method now compiled?
	movne	r15, r2						; if not, return to static glue to call interpreter
	mov	r15, r1						; in <clinit> case, dispatch method directly without patching

_interpreterVoidStaticGlue
_interpreterStaticGlue0
	mov	r1, r14
	bl	L_mergedStaticGlueCallFixer
	b	icallVMprJavaSendStatic0

_interpreterSyncVoidStaticGlue
_interpreterSyncStaticGlue0
	mov	r1, r14
	bl	L_mergedStaticGlueCallFixer
	b	icallVMprJavaSendStaticSync0

_interpreterGPR3StaticGlue
_interpreterStaticGlue1
	mov	r1, r14
	bl	L_mergedStaticGlueCallFixer
	b	icallVMprJavaSendStatic1

_interpreterSyncGPR3StaticGlue
_interpreterSyncStaticGlue1
	mov	r1, r14
	bl	L_mergedStaticGlueCallFixer
	b	icallVMprJavaSendStaticSync1

_interpreterGPR3GPR4StaticGlue
_interpreterStaticGlueJ
	mov	r1, r14
	bl	L_mergedStaticGlueCallFixer
	b	icallVMprJavaSendStaticJ

_interpreterSyncGPR3GPR4StaticGlue
_interpreterSyncStaticGlueJ
	mov	r1, r14
	bl	L_mergedStaticGlueCallFixer
	b	icallVMprJavaSendStaticSyncJ

_interpreterFPR0FStaticGlue
_interpreterStaticGlueF
	mov	r1, r14
	bl	L_mergedStaticGlueCallFixer
	b	icallVMprJavaSendStaticF

_interpreterSyncFPR0FStaticGlue
_interpreterSyncStaticGlueF
	mov	r1, r14
	bl	L_mergedStaticGlueCallFixer
	b	icallVMprJavaSendStaticSyncF

_interpreterFPR0DStaticGlue
_interpreterStaticGlueD
	mov	r1, r14
	bl	L_mergedStaticGlueCallFixer
	b	icallVMprJavaSendStaticD

_interpreterSyncFPR0DStaticGlue
_interpreterSyncStaticGlueD
	mov	r1, r14
	bl	L_mergedStaticGlueCallFixer
	b	icallVMprJavaSendStaticSyncD

const_jitResolveStaticMethod
	DCD	jitResolveStaticMethod
_interpreterUnresolvedStaticGlue
	ldr	r3, const_jitResolveStaticMethod
	b	L_mergedUnresolvedSpecialStaticGlue

const_jitResolveSpecialMethod
	DCD	jitResolveSpecialMethod
_interpreterUnresolvedDirectVirtualGlue
_interpreterUnresolvedSpecialGlue
	ldr	r3, const_jitResolveSpecialMethod

; in:     r3  = address of resolve helper function
;         r14 = snippet
; out:
; trash:

L_mergedUnresolvedSpecialStaticGlue
	mov	r4, r14						; save snippet address
	ldr	r0, [r4, #J9TR_SCSnippet_returnAddress]		; Fetch code cache EIP
	ldr	r1, [r4, #J9TR_USCSnippet_CP]			; get CP
	ldr	r5, [r4, #J9TR_USCSnippet_CPIndex]		; get CP index & flags
	bic	r2, r5, #J9TR_USCSnippet_HelperOffset		; remove helper offset from CP index
	bic	r2, r2, #J9TR_USCSnippet_JVMPIEnabled		; remove JVMPI bit from CP index
	mov	r14, r15
	mov	r15, r3						; call resolve helper
	str	r0, [r4, #J9TR_SCSnippet_method]		; update snippet with resolved method
	bic	r0, r0, #1					; clear the clinit bit in the returned address
	mov	r2, r0						; save method (r0 trashed by following call)
	bl	jitMethodIsNative				; is the method native?
	cmp	r0, #0
	beq	L_notNative
	ldr	r1, const_nativeStaticHelper			; if so, use nativeStaticHelper
	mov	r2, #TR_transactionExit ; #TR_ARMnativeStaticHelper
	add	r2, r2, #(TR_ARMnativeStaticHelper - TR_transactionExit)
	b	L_gotHelper					; and skip to writing the address into the instruction
L_notNative
	ldr	r3, const_staticGlueTable			; get helper table address
	mov	r1, r5, LSR #J9TR_USCSnippet_HelperOffsetShift	; get helper offset
	mov	r0, r2						; recover method
	bl	jitMethodIsSync					; is method synchronized?
	mov	r2, r5, LSR #(J9TR_USCSnippet_HelperOffsetShift+1)	; save helper offset for refreshHelper
	cmp	r0, #0
	beq	L_notSync
	add	r1, r1, #J9TR_SyncJ2ITableOffset		; if so, adjust helper offset
	add	r2, r2, #1
L_notSync
	add	r2, r2, #TR_transactionExit ; #TR_ARMinterpreterVoidStaticGlue
	add	r2, r2, #(TR_ARMinterpreterVoidStaticGlue - TR_transactionExit)
	ldr	r1, [r3, r1]					; fetch static glue helper from table
L_gotHelper
	ldr	r0, [r4, #J9TR_SCSnippet_returnAddress]		; Fetch code cache EIP
	ldr	r3, [r4, #J9TR_SCSnippet_method]
	tst	r3, #1						; branch if the LSB (the "clinit" bit) was set in the resolved address
	bne	L_USSGclinitCase
	ldr	r5, [r4, #J9TR_USCSnippet_CP]			; get CP
	ldr	r11, [r4, #J9TR_USCSnippet_CPIndex]		; get CP index & flags
	bic	r11, r11, #J9TR_USCSnippet_HelperOffset		; remove helper offset from CP index
	stmdb	r7!, {r1, r2}
	stmdb	r7!, {r0, r3, r5, r11}
	ldr	r0, const_mcc_reservationAdjustment_unwrapper
	mov	r1, r7
	mov	r2, r7
	bl	jitCallCFunction
	add	r7, r7, #16
	ldmia	r7!, {r1, r2}
	add	r0, r4, #J9TR_Snippet_CallInstruction		; get address of BL instruction in snippet
	mov	r14, r0						; execute the BL after rewriting it
	b	L_refreshHelper					; update branch instruction to new target
L_USSGclinitCase
	mov	r14, r4						; send helpers expect link register to contain snippet return address
	mov	r15, r1						; in <clinit> case, dispatch method directly without patching

const_mcc_reservationAdjustment_unwrapper
	DCD	mcc_reservationAdjustment_unwrapper

const_staticGlueTable
	DCD	__staticGlueTable
const_nativeStaticHelper
	DCD	_nativeStaticHelper

; For vitual unresolved call, we generate following instructions
;  mov   r11, #0
;  add   r11, r11, #0 << 8
;  add   r11, r11, #0 << 16
;  add   r11, r11, #0 << 24
;  b     VirtualUnresolvedSnippet; change this to mov r14, r15
;  ldr   r15, [vftReg, #0]
;
;  If resolved index is in 12bit range, we encode the immediate value to the ldr instruction.
;  If resolved index is wider, we encode the immediate value to mov and add instructions and change the ldr instruction to ldr r15, [vftReg, r11]
;  Then, we change the b instruction to "mov r14, r15"
;
const_nop
   DCD   0xE1A00000
const_movr14r15
	DCD	0xE1A0E00F
_virtualUnresolvedHelper
	str	r3, [r7, #-16]!					; save parameter regs
	str	r2, [r7, #4]
	str	r1, [r7, #8]
	str	r0, [r7, #12]
	add	r0, r14, #J9TR_UVCSnippet_CP			; get CP/index pair pointer
	ldr	r1, [r14, #J9TR_UVCSnippet_returnAddress]	; get code cache RA
	mov	r4, r1						; protect LR in r4 (in L_commonLookupException, it is expected)
	mov	r2, r1						; preserve code cache RA
	bl	jitResolveVirtualMethod				; resolve the method, return value = vTable offset
	rsbs	r1, r0, #0					; convert vTable offset to positive value
	beq	L_commonLookupException				; if resolve failed, throw the exception
	mov   r3, #0xff000000
	tst   r1, r3, ASR #12         ; test if index is within the 12bit range
	bne   L_virtualUnresolvedHelperWideIndex ; If index >= 4096
	add	r0, r2, #-4					; get address of second instruction
	ldr	r3, [r0, #0]					; fetch second instruction
	orr	r3, r3, r1					; mask offset into the instruction
	str	r3, [r0, #0]					; store instruction back
	mov	r1, #4						; 1 instruction to flush
	bl	flushICache
	add   r0, r2, #-24            ; get the address of the first instruction
	ldr   r3, const_nop            ; fetch constant for nop
	str   r3, [r0, #0]
	str   r3, [r0, #4]
	str   r3, [r0, #8]
	str   r3, [r0, #12]
	mov   r1, #16                 ; 4 instruction to flush
   bl    flushICache
	add	r4, r2, #-8					; get the address of the b instruction (mov r14, r15)
L_virtualUnresolveHelperPatchBranch; r4 = the address to return
   add   r0, r2, #-8             ; get the address of the first instruction (mov r14, r15)
	ldr	r3, const_movr14r15				; fetch constant for mov r14, r15
	str	r3, [r0]					; store instruction
	mov	r1, #4						; 1 instruction to flush
	bl	flushICache
	mov	r14, r4
	ldr	r0, [r7, #12]					; restore parameter regs
	ldr	r1, [r7, #8]
	ldr	r2, [r7, #4]
	ldr	r3, [r7], #16
	mov	r15, r14					; jump back to the mov r14, r15
L_virtualUnresolvedHelperWideIndex
	mov   r4, r0                  ; save vTable offset
	add   r0, r2, #-4             ; get the address of the ldr instruction
	ldr   r3, [r0, #0]            ; fetch the ldr instruction
	orr   r3, r3, #0x02800000     ; set bit 23 and 25 (positive, register offset)
	orr   r3, r3, #11             ; encode r11
	str   r3, [r0, #0]            ; store the instruction back
	mov   r1, #4                  ; 1 instruction to flush
	bl    flushICache
	add   r0, r2, #-24            ; get the address of the first instruction
	strb  r4, [r0, #0]            ; encode bits 0-7
	mov   r4, r4, LSR #8          ; encode bits 8-15
	strb  r4, [r0, #4]
	mov   r4, r4, LSR #8          ; encode bits 16-23
	strb  r4, [r0, #8]
	mov   r4, r4, LSR #8          ; encode bits 24-31
	strb  r4, [r0, #12]
	mov   r1, #16                 ; 4 instruction to flush
	bl    flushICache
	add   r4, r2, #-24            ; get the address of the first instruction
	b L_virtualUnresolveHelperPatchBranch
L_commonLookupException
	add	r7, r7, #16					; clean up stack but do not restore register values
	ldr	r0, [r8, #J9TR_VMThreadCurrentException]	; load pending exception from vmStruct
	mov	r14, r4						; move correct LR in to get exception throw.
	b	jitThrowException				; throw it

const_interfaceCompeteSlot2
	DCD	_interfaceCompeteSlot2
_interfaceCallHelper
	str	r3, [r7, #-16]!					; save parameter regs
	str	r2, [r7, #4]
	str	r1, [r7, #8]
	str	r0, [r7, #12]
	mov	r3, r14						; preserve LR
	add	r0, r14, #J9TR_UICSnippet_CP			; get CP/index pair pointer
	ldr	r1, [r14, #J9TR_ICSnippet_returnAddress]	; get code cache RA
	mov	r4, r1						; protect LR in r4 (in L_commonLookupException, it is expected)
	bl	jitResolveInterfaceMethod			; call the helper
	cmp	r0, #0						; did resolve fail?
	beq	L_commonLookupException				; if so, throw the exception
	add	r0, r3, #J9TR_Snippet_CallInstruction		; get address of BL instruction in snippet
	ldr	r1, const_interfaceCompeteSlot2			; get new snippet branch target
	mov	r2, #TR_transactionExit ; #TR_ARMinterfaceCompeteSlot2
	add	r2, r2, #(TR_ARMinterfaceCompeteSlot2 - TR_transactionExit)
	bl	L_refreshHelper					; rewrite the BL
	mov	r14, r3						; restore LR
	ldr	r0, [r7, #12]					; refetch 'this'
	b	L_continueInterfaceSend				; lookup interface method and send

_interfaceCompeteSlot2
_interfaceSlotsUnavailable
	str	r3, [r7, #-16]!					; save parameter regs
	str	r2, [r7, #4]
	str	r1, [r7, #8]
	str	r0, [r7, #12]
L_continueInterfaceSend
	ldr	r0, [r0, #J9TR_ObjectHeader_class]		; load class of receiver
	bic	r0, r0, #J9TR_RequiredClassAlignment-1		; mask VFT bits
	add	r1, r14, #J9TR_ICSnippet_InterfaceClass		; get InterfaceClass/MethodIndex pair pointer
	ldr	r2, [r14, #J9TR_ICSnippet_returnAddress]	; get code cache RA
	mov	r4, r2						; protect LR in r4 (in L_commonLookupException, it is expected)
	bl	jitLookupInterfaceMethod			; call the helper
	cmp	r0, #0						; did lookup fail?
	beq	L_commonLookupException				; if so, throw the exception
	rsb	r11, r0, #J9TR_InterpVTableOffset		; convert interp vTableIndex to jit index (must be in r11 for patch virtual)
	mov	r14, r2						; set LR = code cache RA
	ldr	r0, [r7, #12]					; refetch 'this'
	ldr	r4, [r0, #J9TR_ObjectHeader_class]		; load class of receiver
	bic	r4, r4, #J9TR_RequiredClassAlignment-1		; mask VFT bits
	ldr	r1, [r7, #8]					; restore other parameter regs
	ldr	r2, [r7, #4]
	ldr	r3, [r7], #16
	ldr	r15, [r4, r11]					; jump thru vtable


; _compareAndSwap is called from C code so must obey system linkage
; only r0-r3 are volatile
_compareAndSwap
; on entry r0 = jitEntry address, r1 = old instruction encoding, r2 = new instruction encoding
#if defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_7A__)
   ldrex    r3, [r0]                   ; Using the newer version
   cmp      r1, r3
   strexeq  r1, r2, [r0]               ; replacing the swp
   cmpeq    r1, #0
   moveq    r0, #1                     ; (r0 == 0) strex updated memory successfully
   movne    r0, #0                     ; (r0 == 1) strex fails to update memory or jitEntry does not match old instruction (r1 != r3)
#else
   swp   r2, r2, [r0]                  ; after swp, r2 = old contents of [r0], [r0] = original contents of r2
   cmp   r1, r2                        ; if jitEntry did not already contain the old instruction encoding have lost race
   moveq r0, #1
   movne r0, #0
#endif
   mov   r15,r14

_compareAndSwapSMP
; on entry r0 = jitEntry address, r1 = old instruction encoding, r2 = new instruction encoding
#if defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_7A__)
   ldrex    r3, [r0]                   ; Using the newer version
   cmp      r1, r3
   strexeq  r1, r2, [r0]               ; replacing the swp
   cmpeq    r1, #0
   moveq    r0, #1                     ; (r0 == 0) strex updated memory successfully
   movne    r0, #0                     ; (r0 == 1) strex fails to update memory or jitEntry does not match old instruction (r1 != r3)
#ifdef __ARM_ARCH_6__
   .word    0xee070f9a                 ; mcr      p15, 0, r0, c7, c10, 4
#else
   dsb                                 ; dsb - data synchronization barrier as we are patching instructions
#endif
   mov      r15, r14
#else
   swp   r2, r2, [r0]                  ; after swp, r2 = old contents of [r0], [r0] = original contents of r2
   .word 0xee070f9a                    ; data memory barrier
   cmp   r1, r2                        ; if jitEntry did not already contain the old instruction encoding have lost race
   moveq r0, #1
   movne r0, #0
   mov   r15,r14
#endif

	ALIGN 4
__staticGlueTable
	DCD     _interpreterStaticGlue0
	DCD     _interpreterStaticGlue1
	DCD     _interpreterStaticGlueJ
	DCD     _interpreterStaticGlueF
	DCD     _interpreterStaticGlueD
	DCD     _interpreterSyncStaticGlue0
	DCD     _interpreterSyncStaticGlue1
	DCD     _interpreterSyncStaticGlueJ
	DCD     _interpreterSyncStaticGlueF
	DCD     _interpreterSyncStaticGlueD

	END
