!! Copyright (c) 2000, 2017 IBM Corp. and others
!!
!! This program and the accompanying materials are made available under
!! the terms of the Eclipse Public License 2.0 which accompanies this
!! distribution and is available at https://www.eclipse.org/legal/epl-2.0/
!! or the Apache License, Version 2.0 which accompanies this distribution and
!! is available at https://www.apache.org/licenses/LICENSE-2.0.
!!
!! This Source Code may also be made available under the following
!! Secondary Licenses when the conditions for such availability set
!! forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
!! General Public License, version 2 with the GNU Classpath
!! Exception [1] and GNU General Public License, version 2 with the
!! OpenJDK Assembly Exception [2].
!!
!! [1] https://www.gnu.org/software/classpath/license.html
!! [2] http://openjdk.java.net/legal/assembly-exception.html
!!
!! SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception

! generalArrayCopy and referenceArrayCopy have:
!       srcObj         -- r5
!       dstObj         -- r6
!       copyByteLength -- r7
!       srcByteAddr    -- r8
!       dstByteAddr    -- r9
!
!
! Reference:
!	kills: r0, r3, r4, r5, r6, r7, r8, r9, r10, r11, cr0

#include "j9cfg.h"
#include "jilconsts.inc"
#include "p/runtime/PPCArrayCopy.inc"

.file "J9PPCArrayCopy.s"

#ifdef AIXPPC
	.globl    .__referenceArrayCopy
	.globl    __referenceArrayCopy{DS}
	.globl    .__generalArrayCopy
	.globl    __generalArrayCopy{DS}
#elif defined(LINUXPPC64)
	.globl    FUNC_LABEL(__referenceArrayCopy)
	.type     FUNC_LABEL(__referenceArrayCopy),@function
	.globl    FUNC_LABEL(__generalArrayCopy)
	.type     FUNC_LABEL(__generalArrayCopy),@function
#else
	.globl    __referenceArrayCopy
	.globl    __generalArrayCopy
#endif

        .extern   jitWriteBarrierStore
        .extern   jitWriteBarrierBatchStore
	.extern   jitInstanceOf
	.extern   jitThrowArrayStoreExceptionWithIP


#ifdef AIXPPC
! .text section
	.csect    ArrayCopy_TEXT{PR}
#elif defined(LINUXPPC64)
	.section  ".text"
	.align    2
#endif

#ifdef AIXPPC
.__generalArrayCopy:
	.function .__generalArrayCopy,startproc.__generalArrayCopy,16,0,(endproc.__generalArrayCopy-startproc.__generalArrayCopy)
#elif defined(LINUXPPC64)
FUNC_LABEL(__generalArrayCopy):
#else
__generalArrayCopy:
#endif
	startproc.__generalArrayCopy:
	bc	BO_IF, CR0_EQ, .L.__referenceArrayCopy
	b	L.__arrayCopy
	endproc.__generalArrayCopy:


#ifdef AIXPPC
.__referenceArrayCopy:
	.function .__referenceArrayCopy,startproc.__referenceArrayCopy,16,0,(endproc.__referenceArrayCopy-startproc.__referenceArrayCopy)
#elif defined(LINUXPPC64)
FUNC_LABEL(__referenceArrayCopy):
#else
__referenceArrayCopy:
#endif
	startproc.__referenceArrayCopy:
.L.__referenceArrayCopy:
	cmpli	cr0, CmpAddr, r7, 0				! If length is 0, return
	bclr	BO_IF, CR0_EQ
	cmpl	cr0, CmpAddr, r5, r6				! Same array, no arrayStoreCheck
	mflr	r0						! Preserve return address
	laddr	r11, J9TR_VMThreadRTOCOffset(J9VM_STRUCT)	! Restore TOC/GOT
	bc	BO_IF_NOT, CR0_EQ, .L.notSameArray

.L.sameArray:
	! no ArrayStoreCheck or old/new check for same array
	subf	r3, r8, r9					! See if we need reversed copy
	cmpl	cr0, CmpAddr, r3, r7
	bc	BO_IF, CR0_LT, .L.doReversed_CopyLoop
	b	.L.do_CopyLoop

.L.notSameArray:
#ifdef AIXPPC
	laddr	r3, TOCjitInstanceOf(r11)
	laddr	r4, 0(r3)
#elif defined (LINUXPPC64)
	laddr	r3, TOCjitInstanceOf@toc(r11)
	laddr	r4, 0(r3)
#else
	laddr	r4, jitInstanceOf@got(r11)
#endif
	mtctr	r4
	laddr	r3, J9TR_ObjectHeader_class(r6)			! dst array type
	mr	r4, r5
	bctrl							! Call jitInstanceOf
	cmpli	cr0, 0, r3, 0					! If src instanceOf dstType, no arrayStoreCheck
	bc	BO_IF, CR0_EQ, .L.differentType

.L.sameType:							! no arrayStoreCheck for same type arrays
	! need to add check:  if no generational write barriers needed goto L.do_CopyLoop
	bc	BO_IF_NOT, CR0_EQ, .L.do_CopyLoop		! then, old/new and card marking check

	! Do array element copy while doing old/new check
.L.do_ON_CopyLoop:
	laddr	r4, 0(r8)
	cmpli	cr0, CmpAddr, r4, 0				! Test for NULL reference
	staddr	r4, 0(r9)
	bc	BO_IF, CR0_EQ, .L.do_ON_Copy_loopCtl		! If NULL, loop
	bc	BO_IF, CR0_EQ, .L.callWB_Copy			! if elem is new, call WB, then no old/new check
.L.do_ON_Copy_loopCtl:
	addic.	r7, r7, -ALen
	addi	r8, r8, ALen
	addi	r9, r9, ALen
	bc	BO_IF_NOT, CR0_EQ, .L.do_ON_CopyLoop
	b       .L.checkForOldDestinationAfterCopying
.L.callWB_Copy:
#ifdef AIXPPC
        laddr   r10, TOCjitWriteBarrierStore(r11)
        laddr   r10, 0(r10)
#elif defined(LINUXPPC64)
        laddr   r10, TOCjitWriteBarrierStore@toc(r11)
        laddr   r10, 0(r10)
#else
        laddr   r10, jitWriteBarrierStore@got(r11)
#endif
	mtctr	r10
	mr	r3, r6
	bctrl

	addic.	r7, r7, -ALen
	addi	r8, r8, ALen
	addi	r9, r9, ALen
	bc	BO_IF, CR0_EQ, .L.checkForOldDestinationAfterCopying

	! Do array element copy followed by card marking check
.L.do_CopyLoop:
	cmpli	cr0, CmpAddr, r7, 8*ALen
	bc	BO_IF_NOT, CR0_LT, .L.do_CopyLoop_preUnroll
.L.do_CopyLoop1:
        laddr   r4, 0(r8)                                       ! Copy one element
        staddr  r4, 0(r9)
        addic.  r7, r7, -ALen
        addi    r8, r8, ALen
        addi    r9, r9, ALen
        bc      BO_IF_NOT, CR0_EQ, .L.do_CopyLoop1
	b	.L.checkForOldDestinationAfterCopying
.L.do_CopyLoop_preUnroll:
#ifdef TR_HOST_64BIT
	srdi	r3, r7, 6
	andi.	r7, r7, 63	! residue bytes
#else
	srwi	r3, r7, 5
	andi.	r7, r7, 31	! residue bytes
#endif
	mtctr	r3
.L.do_CopyLoop_Unroll:
        laddr	r3, 0(r8)
        laddr	r4, ALen(r8)
        laddr	r5, ALen*2(r8)
        laddr	r10, ALen*3(r8)
        staddr	r3, 0(r9)
        staddr	r4, ALen(r9)
        staddr	r5, ALen*2(r9)
        staddr	r10, ALen*3(r9)
        laddr	r3, ALen*4(r8)
        laddr	r4, ALen*5(r8)
        laddr	r5, ALen*6(r8)
        laddr	r10, ALen*7(r8)
        addi	r8, r8, ALen*8
        staddr	r3, ALen*4(r9)
        staddr	r4, ALen*5(r9)
        staddr	r5, ALen*6(r9)
        staddr	r10, ALen*7(r9)
        addi	r9, r9, ALen*8
	bdnz	.L.do_CopyLoop_Unroll

	bc	BO_IF, CR0_EQ, .L.checkForOldDestinationAfterCopying
.L.do_CopyLoop_Residue:
        laddr   r4, 0(r8)
        staddr  r4, 0(r9)
        addic.  r7, r7, -ALen
        addi    r8, r8, ALen
        addi    r9, r9, ALen
        bc      BO_IF_NOT, CR0_EQ, .L.do_CopyLoop_Residue

	! check the destination age after copying as a crude check that a
	! card marking may be required
.L.checkForOldDestinationAfterCopying:
	! need to add check:  if no card marking needed then return
	! should be a check on OLD and !NON_CM_CANDIATE
	! however there is no define of NON_CM_CANDIATE available
	bc	BO_IF_NOT, CR0_EQ, .L.destinationOldAfterCopying
	mtlr	r0
	blr
.L.destinationOldAfterCopying:
#ifdef AIXPPC
        laddr   r10, TOCjitWriteBarrierBatchStore(r11)
        laddr   r10, 0(r10)
#elif defined(LINUXPPC64)
        laddr   r10, TOCjitWriteBarrierBatchStore@toc(r11)
        laddr   r10, 0(r10)
#else
        laddr   r10, jitWriteBarrierBatchStore@got(r11)
#endif
	mr	r3, r6
	mtctr	r10
	bctrl
	mtlr	r0
	blr


	! Do reversed array element copy with card marking check
.L.doReversed_CopyLoop:
	cmpli	cr0, CmpAddr, r7, 8*ALen
        add     r8, r8, r7
        add     r9, r9, r7
	bc	BO_IF_NOT, CR0_LT, .L.doReversed_CopyLoop_preUnroll
.L.doReversed_CopyLoop1:
        addic.  r7, r7, -ALen
	laddru	r4, -ALen(r8)
	staddru	r4, -ALen(r9)
        bc      BO_IF_NOT, CR0_EQ, .L.doReversed_CopyLoop1
	b	.L.checkForOldDestinationAfterCopying
.L.doReversed_CopyLoop_preUnroll:
#ifdef TR_HOST_64BIT
	srdi	r3, r7, 6
	andi.	r7, r7, 63	! residue bytes
#else
	srwi	r3, r7, 5
	andi.	r7, r7, 31	! residue bytes
#endif
	mtctr	r3
.L.doReversed_CopyLoop_Unroll:
        laddr	r3, -ALen(r8)
        laddr	r4, -ALen*2(r8)
        laddr	r5, -ALen*3(r8)
        laddr	r10, -ALen*4(r8)
        staddr	r3, -ALen(r9)
        staddr	r4, -ALen*2(r9)
        staddr	r5, -ALen*3(r9)
        staddr	r10, -ALen*4(r9)
        laddr	r3, -ALen*5(r8)
        laddr	r4, -ALen*6(r8)
        laddr	r5, -ALen*7(r8)
        laddru	r10, -ALen*8(r8)
        staddr	r3, -ALen*5(r9)
        staddr	r4, -ALen*6(r9)
        staddr	r5, -ALen*7(r9)
        staddru	r10, -ALen*8(r9)
	bdnz	.L.doReversed_CopyLoop_Unroll

	bc	BO_IF, CR0_EQ, .L.checkForOldDestinationAfterCopying
.L.doReversed_CopyLoop_Residue:
        addic.  r7, r7, -ALen
	laddru	r4, -ALen(r8)
	staddru	r4, -ALen(r9)
        bc      BO_IF_NOT, CR0_EQ, .L.doReversed_CopyLoop_Residue
	b	.L.checkForOldDestinationAfterCopying

.L.differentType:
        and     r4, r3, r10                                     ! Test old/new and remembered bit
	laddr	r3, J9TR_ObjectHeader_class(r6)
	laddr	r10, J9TR_ArrayClass_componentType(r3)		! Get the array element type
#ifdef AIXPPC
	laddr	r5, TOCjitInstanceOf(r11)			! r5 with addr of jitInstanceOf
	laddr	r5, 0(r5)
#elif defined(LINUXPPC64)
	laddr	r5, TOCjitInstanceOf@toc(r11)
	laddr	r5, 0(r5)
#else
	laddr	r5, jitInstanceOf@got(r11)
#endif
        bc      BO_IF, CR0_EQ, .L.doAS_ON_CopyLoop              ! then, type, old/new, and card marking check

	! Do element copy with array store check and card marking check
.L.doAS_CopyLoop:
	laddr	r4, 0(r8)					! Get one element
	cmpli	cr0, CmpAddr, r4, 0				! Is a NULL ref???
	bc	BO_IF, CR0_EQ, .L.doAS_Copy_StoreIt
	mtctr	r5
	mr	r3, r10
	bctrl							! Call instanceOf
	cmpli	cr0, 0, r3, 0
	bc	BO_IF, CR0_EQ,	.L.raiseArrayStoreException	! Not an instance, fire off
.L.doAS_Copy_StoreIt:
	staddr	r4, 0(r9)
.L.doAS_Copy_loopCtl:
	addic.	r7, r7, -ALen
	addi	r8, r8, ALen
	addi	r9, r9, ALen
	bc	BO_IF_NOT, CR0_EQ, .L.doAS_CopyLoop		! Loop to copy next element
	b       .L.checkForOldDestinationAfterCopying

	! Do element copy with arrayStore and old/new check
.L.doAS_ON_CopyLoop:
	laddr	r4, 0(r8)					! Get one element
	cmpli	cr0, CmpAddr, r4, 0				! Is it a NULL ref???
	bc	BO_IF, CR0_EQ, .L.doAS_ON_Copy_StoreIt
	mtctr	r5
	mr	r3, r10
	bctrl							! Call instanceOf
	cmpli	cr0, 0, r3, 0
	bc	BO_IF, CR0_EQ, .L.raiseArrayStoreException	! Not a instance, fire off
	staddr	r4, 0(r9)
	bc	BO_IF, CR0_EQ, .L.callWB_AS_Copy		! and no more old/new check
.L.doAS_ON_Copy_loopCtl:
	addic.	r7, r7, -ALen
	addi	r8, r8, ALen
	addi	r9, r9, ALen
	bc	BO_IF_NOT, CR0_EQ, .L.doAS_ON_CopyLoop
	b       .L.checkForOldDestinationAfterCopying
.L.callWB_AS_Copy:
#ifdef AIXPPC
        laddr   r3, TOCjitWriteBarrierStore(r11)                ! r3 with addr of jitWriteBarrierStore
        laddr   r3, 0(r3)
#elif defined(LINUXPPC64)
        laddr   r3, TOCjitWriteBarrierStore@toc(r11)
        laddr   r3, 0(r3)
#else
        laddr   r3, jitWriteBarrierStore@got(r11)
#endif
	mtctr	r3
	mr	r3, r6
	bctrl
	b	.L.doAS_Copy_loopCtl
.L.doAS_ON_Copy_StoreIt:
	staddr	r4, 0(r9)
	b	.L.doAS_ON_Copy_loopCtl


.L.raiseArrayStoreException:
	laddr	r11, J9TR_VMThreadRTOCOffset(J9VM_STRUCT)	! Restore TOC/GOT
#ifdef AIXPPC
	laddr	r4, TOCjitThrowArrayStoreExceptionWithIP(r11)
	laddr	r4, 0(r4)					! Prepare to call the thrower
#elif defined(LINUXPPC64)
	laddr	r4, TOCjitThrowArrayStoreExceptionWithIP@toc(r11)
	laddr	r4, 0(r4)
#else
	laddr	r4, jitThrowArrayStoreExceptionWithIP@got(r11)
#endif
	mtctr	r4
	mtlr	r0
	mr	r3, r0						! r3 contains the caller address
	bctr							! Gone with the wind
	endproc.__referenceArrayCopy:

! .data section
#ifdef AIXPPC
	.toc
TOCjitWriteBarrierStore:
	.tc       jitWriteBarrierStore[TC],jitWriteBarrierStore
TOCjitWriteBarrierBatchStore:
	.tc       jitWriteBarrierBatchStore[TC],jitWriteBarrierBatchStore
TOCjitInstanceOf:
	.tc       jitInstanceOf[TC],jitInstanceOf
TOCjitThrowArrayStoreExceptionWithIP:
	.tc       jitThrowArrayStoreExceptionWithIP[TC],jitThrowArrayStoreExceptionWithIP


	.csect    __generalArrayCopy{DS}
	ADDR      .__generalArrayCopy
	ADDR      TOC{TC0}
	ADDR      0x00000000
! End   csect     __generalArrayCopy{DS}

	.csect    __referenceArrayCopy{DS}
	ADDR      .__referenceArrayCopy
	ADDR      TOC{TC0}
	ADDR      0x00000000
! End   csect     __referenceArrayCopy{DS}

#elif defined(LINUXPPC64)
	.section  ".toc"
TOCjitWriteBarrierStore:
	.tc       jitWriteBarrierStore[TC],jitWriteBarrierStore
TOCjitWriteBarrierBatchStore:
	.tc       jitWriteBarrierBatchStore[TC],jitWriteBarrierBatchStore
TOCjitInstanceOf:
	.tc       jitInstanceOf[TC],jitInstanceOf
TOCjitThrowArrayStoreExceptionWithIP:
	.tc       jitThrowArrayStoreExceptionWithIP[TC],jitThrowArrayStoreExceptionWithIP

#if !defined(__LITTLE_ENDIAN__)
	.globl    __generalArrayCopy
	.size     __generalArrayCopy,24
__generalArrayCopy:
	.quad     .__generalArrayCopy
	.quad     .TOC.@tocbase
	.long     0x00000000
	.long     0x00000000

	.globl    __referenceArrayCopy
	.size     __referenceArrayCopy,24
__referenceArrayCopy:
	.quad     .__referenceArrayCopy
	.quad     .TOC.@tocbase
	.long     0x00000000
	.long     0x00000000
#endif
#endif
