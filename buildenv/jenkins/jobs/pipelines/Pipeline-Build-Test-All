/*******************************************************************************
 * Copyright (c) 2018, 2018 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

/*
* It builds and tests the Eclipse OpenJ9 extensions for OpenJDK for one or more
* versions and platforms by launching Pipeline-Build-Test-JDK${SDK_VERSION}-${SPEC}
* builds. Multiple pipelines are executed in parallel.
* When TESTS_TARGETS=none, it only builds the Eclipse OpenJ9 extensions for OpenJDK.
* VARIABLE_FILE allows to run it in a custom configuration on a different server.
*
* Parameters:
*   PLATFORMS: String - Comma separated platforms to build.
*              Expected values: all or any of the following: 
*              aix_ppc-64_cmprssptrs,
*              linux_x86-64,
*              linux_x86-64_cmprssptrs,
*              linux_ppc-64_cmprssptrs_le,
*              linux_390-64_cmprssptrs,
*              win_x86-64_cmprssptrs,
*              win_x86 (Java 8 support only)
*   Java8: Boolean
*   Java9: Boolean 
*   Java10: Boolean (at least one of the Java8, Java9, Java10 is required)
*   OPENJ9_REPO: String - the OpenJ9 git repository URL: e.g. https://github.com/eclipse/openj9.git (default)
*   OPENJ9_BRANCH: String - the OpenJ9 branch to clone from: e.g. master (default)
*   OPENJ9_SHA: String - the last commit SHA of the OpenJ9 repository
*   OMR_REPO: String - the OMR git repository URL: e.g. https://github.com/eclipse/openj9-omr.git (default)
*   OMR_BRANCH: String - the OMR branch to clone from: e.g. openj9 (default)
*   OMR_SHA: the last commit SHA of the OMR repository
*   OPENJDK8_REPO: String - the OpenJDK8 repository URL: e.g. https://github.com/ibmruntimes/openj9-openjdk-jdk8.git (default)
*   OPENJDK8_BRANCH: String - the OpenJDK8 branch to clone from: e.g. openj9 (default)
*   OPENJDK8_SHA: String - the OpenJDK8 last commit SHA
*   OPENJDK9_REPO: String - the OpenJDK9 repository URL: e.g. https://github.com/ibmruntimes/openj9-openjdk-jdk9.git (default)
*   OPENJDK9_BRANCH: String - the OpenJDK9 branch to clone from: e.g. openj9 (default)
*   OPENJDK9_SHA: String - the OpenJDK9 last commit SHA 
*   OPENJDK10_REPO: String - the OpenJDK10 repository URL: e.g. https://github.com/ibmruntimes/openj9-openjdk-jdk10.git (default)
*   OPENJDK10_BRANCH: String - the OpenJDK10 branch to clone from: e.g. openj9 (default)
*   OPENJDK10_SHA: String - the OpenJDK10 last commit SHA
*   TESTS_TARGETS: String - The test targets to run. Expected values: _sanity, _extended, none
*   VARIABLE_FILE: String - the custom variables file. Uses defaults.yml when no value is provided.
*   VENDOR_REPO: String - the repository URL of a Git repository that stores a custom variables file
*   VENDOR_BRANCH: String - the vendor branch to clone from
*   VENDOR_CREDENTIALS_ID: String - the Jenkis credentials to connect to the vendor Git repository if VENDOR_REPO is a private repository
*   LABEL: String - the node label(s) to run this job on; could be any node that has Git installed on it
*   BUILD_NODE_LABELS: String - the labels of a node to compile and build the Eclipse OpenJ9 extensions for OpenJDK
*   TEST_NODE_LABELS: String - the labels of a node to run tests on
*
*   Node labels could be a single label or node name or a boolean expression(e.g. hw.arch.x86 && sw.os.windows)
*   Expected value for multiple platforms builds: platform.1=labels.1,platform.2=labels.2,...,etc
*   e.g. aix_ppc-64_cmprssptrs=csp70027,linux_x86-64=(ci.project.openj9 && hw.arch.x86 && sw.os.ubuntu.14)
*   Expected value for single platforms builds: label (no platform name required), e.g. csp70027
*
*   PERSONAL_BUILD: Choice: true, false - Indicates if is a personal build or not
*/

RELEASES = ['8', '9', '10', '11', 'next']
CURRENT_RELEASES = ['8', '10', '11', 'next']

SPECS = ['aix_ppc-64_cmprssptrs'      : CURRENT_RELEASES,
         'linux_390-64_cmprssptrs'    : CURRENT_RELEASES,
         'linux_ppc-64_cmprssptrs_le' : CURRENT_RELEASES,
         'linux_x86-64'               : CURRENT_RELEASES,
         'linux_x86-64_cmprssptrs'    : CURRENT_RELEASES,
         'linux_x86-64_cmprssptrs_cmake' : ['9'],
         'win_x86'                    : ['8'],
         'win_x86-64_cmprssptrs'      : CURRENT_RELEASES]

LABEL = params.LABEL
if (!LABEL) {
    LABEL = 'worker'
}

OPENJDK_REPO = [:]
OPENJDK_BRANCH = [:]
OPENJDK_SHA = [:]

BUILD_RELEASES = []
builds = [:]

timeout(time: 10, unit: 'HOURS') {
    timestamps {
        node(LABEL) {
            try {
                checkout scm
                def variableFile = load 'buildenv/jenkins/common/variables-functions'
                buildFile = load 'buildenv/jenkins/common/pipeline-functions'

                def BUILD_SPECS = get_specs(SPECS)
                // find releases to build based on given specs
                BUILD_RELEASES.addAll(get_build_releases(BUILD_SPECS))

                // parse variables file and initialize variables
                variableFile.set_job_variables('wrapper')
                SHAS = buildFile.get_shas(OPENJDK_REPO, OPENJDK_BRANCH, OPENJ9_REPO, OPENJ9_BRANCH, OMR_REPO, OMR_BRANCH)

                if (params.PERSONAL_BUILD) {
                    // update build name
                    wrap([$class: 'BuildUser']) {
                        currentBuild.displayName = "#${BUILD_NUMBER} - ${BUILD_USER_EMAIL}"
                    }

                    // update build description
                    currentBuild.description += "<br/>${params.PLATFORMS}"
                }

                def BUILD_NODES = get_node_labels(params.BUILD_NODE_LABELS, BUILD_SPECS.keySet())
                def TEST_NODES = get_node_labels(params.TEST_NODE_LABELS, BUILD_SPECS.keySet())

                BUILD_SPECS.each { SPEC, SDK_VERSIONS ->
                    SDK_VERSIONS.each { SDK_VERSION ->
                        // set OpenJDK repos and branch for the downstream build
                        def REPO = OPENJDK_REPO[SDK_VERSION]
                        def BRANCH = OPENJDK_BRANCH[SDK_VERSION]

                        // set nodes for the downstream builds
                        def BUILD_NODE = ''
                        if (BUILD_NODES[SPEC]) {
                            BUILD_NODE = BUILD_NODES[SPEC]
                        }
                        def TEST_NODE = ''
                        if (TEST_NODES[SPEC]) {
                            TEST_NODE = TEST_NODES[SPEC]
                        }

                        builds["build_test_JDK${SDK_VERSION}_${SPEC}"] = { build(REPO, BRANCH, SHAS, OPENJ9_REPO, OPENJ9_BRANCH, OMR_REPO, OMR_BRANCH, SPEC, SDK_VERSION, BUILD_NODE, TEST_NODE) }
                    }
                }
            } finally {
                try{
                    cleanWs()
                } catch(e) {
                    if (variableFile) {
                        printStackTrace(e)
                    } else {
                        echo e.toString()
                    }
                }
            }
        }

        // launch all pipeline builds
        parallel builds

        if (params.PROMOTE_OMR) {
            stage('Promote') {
                PROMOTE_JOB = buildFile.build_with_slack('Promote-OpenJ9-OMR-master-to-openj9',
                                                        [string(name: 'OMR_COMMIT', value: "${SHAS['OMR']}"),
                                                        string(name: 'OPENJ9_COMMIT', value: "${SHAS['OPENJ9']}"),
                                                        string(name: 'OPENJDK8_COMMIT', value: "${SHAS['OPENJDK'].get(8)}"),
                                                        string(name: 'OPENJDK10_COMMIT', value: "${SHAS['OPENJDK'].get(10)}")])
            }
        }
    }
}

def build(OPENJDK_REPO, OPENJDK_BRANCH, SHAS, OPENJ9_REPO, OPENJ9_BRANCH, OMR_REPO, OMR_BRANCH, SPEC, SDK_VERSION, BUILD_NODE, TEST_NODE) {
    def JOB_NAME = "Pipeline-Build-Test-JDK${SDK_VERSION}-${SPEC}"

    TESTS_TARGETS = params.TESTS_TARGETS    
    if (!TESTS_TARGETS) {
        TESTS_TARGETS = ''
    }
    VARIABLE_FILE = params.VARIABLE_FILE    
    if (!VARIABLE_FILE) {
        VARIABLE_FILE = ''
    }
    VENDOR_REPO = params.VENDOR_REPO    
    if (!VENDOR_REPO) {
        VENDOR_REPO = ''
    }
    VENDOR_BRANCH = params.VENDOR_BRANCH    
    if (!VENDOR_BRANCH) {
        VENDOR_BRANCH = ''
    }
    VENDOR_CREDENTIALS_ID = params.VENDOR_CREDENTIALS_ID    
    if (!VENDOR_CREDENTIALS_ID) {
        VENDOR_CREDENTIALS_ID = ''
    }
    PERSONAL_BUILD = params.PERSONAL_BUILD    
    if (!PERSONAL_BUILD) {
        PERSONAL_BUILD = ''
    }
    SLACK_HANDLE = params.SLACK_HANDLE    
    if (!SLACK_HANDLE) {
        SLACK_HANDLE = ''
    }
    stage ("${JOB_NAME}") {
        JOB = build job: JOB_NAME,
                parameters: [
                    string(name: 'OPENJDK_REPO', value: OPENJDK_REPO),
                    string(name: 'OPENJDK_BRANCH', value: OPENJDK_BRANCH),
                    string(name: 'OPENJDK_SHA', value: SHAS['OPENJDK'].get(SDK_VERSION)),
                    string(name: 'OPENJ9_REPO', value: OPENJ9_REPO),
                    string(name: 'OPENJ9_BRANCH', value: OPENJ9_BRANCH),
                    string(name: 'OPENJ9_SHA', value: SHAS['OPENJ9']),
                    string(name: 'OMR_REPO', value: OMR_REPO),
                    string(name: 'OMR_BRANCH', value: OMR_BRANCH),
                    string(name: 'OMR_SHA', value: SHAS['OMR']),
                    string(name: 'TESTS_TARGETS', value: TESTS_TARGETS),
                    string(name: 'VARIABLE_FILE', value: VARIABLE_FILE),
                    string(name: 'VENDOR_REPO', value: VENDOR_REPO),
                    string(name: 'VENDOR_BRANCH', value: VENDOR_BRANCH),
                    string(name: 'VENDOR_CREDENTIALS_ID', value: VENDOR_CREDENTIALS_ID),
                    string(name: 'BUILD_NODE', value: BUILD_NODE),
                    string(name: 'TEST_NODE', value: TEST_NODE),
                    string(name: 'PERSONAL_BUILD', value: PERSONAL_BUILD),
                    string(name: 'SLACK_CHANNEL', value: SLACK_HANDLE)]
        return JOB
    }
}

/*
* Parses the build parameters to identify the specs and the releases to build
* and test. Returns a map of releases by specs.
*/
def get_specs(SUPPORTED_SPECS) {
    def RELEASES = []
    def PLATFORMS = []
    def SPECS = [:]

    // get releases 
    params.each { key, value  ->
        if ((key.indexOf('Java') != -1) && (value == true)) {
            RELEASES.add(key.substring(4))
        }
    }

    // get specs
    if (!params.PLATFORMS || (params.PLATFORMS.trim() == 'all')) {
        // build and test all supported specs
        PLATFORMS.addAll(SUPPORTED_SPECS.keySet())
    } else {
        PLATFORMS.addAll(params.PLATFORMS.split(","))
    }

    def RELEASES_STR = RELEASES.join(',')

    PLATFORMS.each { SPEC ->
        SPEC = SPEC.trim()
        if (!SUPPORTED_SPECS.keySet().contains(SPEC)) {
            echo "Warning: Unknown or unsupported platform: ${SPEC}"
            continue
        }

        if (RELEASES) {
            // personal build
            SPEC_RELEASES = SUPPORTED_SPECS[SPEC].intersect(RELEASES)
         } else {
            SPEC_RELEASES = SUPPORTED_SPECS[SPEC]
         }

        if (SPEC_RELEASES) {
            // populate the releases by specs map
            SPECS[SPEC] = SPEC_RELEASES
        } else {
            echo "Warning: Selected Java versions (${RELEASES_STR}) for ${SPEC} is not supported(nothing to do)!"
        }
    }

    if (!SPECS) {
        error("Invalid PLATFORMS (${params.PLATFORMS}) and/or Java versions selections(${RELEASES_STR})!")
    }

    return SPECS
}

/*
* Returns a list of releases to build.
*/
def get_build_releases(BUILD_SPECS) {
    def BUILD_RELEASES = []

    BUILD_SPECS.values().each { SDK_VERSIONS ->
        BUILD_RELEASES.addAll(SDK_VERSIONS)
    }

    return BUILD_RELEASES.unique()
}

/*
* Returns a map containing node labels per platform.
*
* Labels can be single machine labels - e.g. ub14hcxrt2 or boolean expressions
* of machine's labels - e.g. sw.os.linux && hw.arch.x66 && !sw.ubuntu14.
* Multiple platform node labels can be specified as comma separated labels per
* platform:
* e.g. linux_x86-64=sw.os.linux && hw.arhc.x66 && !sw.ubuntu14,aix_ppc-64_cmprssptrs=csp700003.
* For a single platform build, the platform is optional:
* e.g. sw.os.linux && hw.arch.x66 && !sw.ubuntu14
*/
def get_node_labels(NODE_LABELS, SPECS) {
    def LABELS = [:]

    if (!NODE_LABELS) {
        return LABELS
    }

    if ((SPECS.size() == 1) && (NODE_LABELS.indexOf("=") == -1) ){
        // single platform labels, e.g. NODE_LABELS = label1 && label2
        LABELS.put(SPECS[0], NODE_LABELS.trim())
    } else {
        // multiple platform expected labels:
        // e.g. linux_xx86-64=label1 && label2, linux_ppc-64_cmprssptrs_le=label3, win_x86=label4
        NODE_LABELS.trim().split(",").each { ITEM ->
            def ENTRY = ITEM.trim().split("=")
            if (ENTRY.size() != 2) {
                error("Invalid format for node labels: ${ITEM}! Expected value: spec1=labels1,spec2=labels2,...,specNe=labelsN e.g. aix_ppc-64_cmprssptrs=csp70027,linux_x86-64=(ci.project.openj9 && hw.arch.x86 && sw.os.ubuntu.14)")
            }

            if (!SPECS.contains(ENTRY[0].trim())) {
                error("Wrong node labels platform: ${ENTRY[0]} in ${ITEM}! It does not match any of your selected platforms: ${params.PLATFORMS}")
            }

            LABELS.put(ENTRY[0].trim(), ENTRY[1].trim())
        }
    }

    return LABELS
}
