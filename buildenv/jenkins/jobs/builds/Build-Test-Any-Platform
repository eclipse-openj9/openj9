/*******************************************************************************
 * Copyright (c) 2018, 2018 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

ARGS = ['SDK_VERSION', 'PLATFORM']

timeout(time: 10, unit: 'HOURS') {
    timestamps {
        node('master') {
            try{
                retry(5){
                    checkout scm
                }

                variableFile = load 'buildenv/jenkins/common/variables-functions'

                // identify the pipeline type: build, test or pull request and
                // initialize required variables
                if (run_tests()) {
                    if (!params.ghprbPullId) {
                        // test pipeline
                        variableFile.set_job_variables('test')
                    } else {
                        // pull request pipeline
                        variableFile.set_job_variables('pullRequest')
                    }
                } else {
                    // build or pull request compile only pipeline 
                    variableFile.set_job_variables('build')
                }

                if (!params.UPSTREAM_JOB_NAME && !params.UPSTREAM_JOB_NAME) {
                    // the test pipeline requires resources(e.g. a jdk) from an
                    // upstream build pipeline identified by the UPSTREAM_JOB_NAME,
                    // UPSTREAM_JOB_NAME parameters
                    // if they are not set then it is not a test pipeline, could be
                    // a build or a pull request pipeline, thus load resource here
                    // to avoid another source checkout on the slave
                    buildFile = load 'buildenv/jenkins/common/build'
                }
            } finally {
                try{
                    cleanWs()
                } catch(e) {
                    variableFile.printStackTrace(e)
                }
            }
        }
    }
    stage ('Queue') {
        node("${NODE}") {
            if (!run_tests()) {
                // build or pull request compile only pipeline: compile, archive,
                // clean up
                buildFile.build_all()
            } else {
                checkout scm
                testFile = load 'buildenv/jenkins/common/test'
                cleanWs()
                if (params.UPSTREAM_JOB_NAME && params.UPSTREAM_JOB_NUMBER) {
                    // test pipeline: fetch resources from upstream job, run tests,
                    // archive results, clean up
                    testFile.test_all_with_fetch()
                } else {
                    // pull request pipeline: compile, run tests, archive results,
                    // clean up
                    buildFile.build_pr()
                    testFile.test_all()
                }
            }
        }
    }
}

/*
* Returns true if TEST_TARGET Jenkins build parameter is set to any value
* except 'none', otherwise returns false.
*/
def run_tests() {
    return (params.TEST_TARGET && (params.TEST_TARGET != 'none'))
}
