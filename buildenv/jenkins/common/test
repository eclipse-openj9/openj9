/*******************************************************************************
 * Copyright (c) 2017, 2018 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

// Set JAVA_BIN here not in the variables-functions.set_job_variables() function
// to ensure a correct JAVA_BIN path. JAVA_BIN should be available on the
// machine the tests run.
// set_job_variables() is usually called on the master not on the node (where
// the tests run) and the master's WORKSPACE is different than the node's WORKSPACE
JRE_FOLDER = (SDK_VERSION == '8') ? '/jre' : ''
JAVA_BIN = "${WORKSPACE}/build/${RELEASE}/images/${JDK_FOLDER}${JRE_FOLDER}/bin"

def fetch_artifacts(){
    stage('Fetch Artifacts') {
        timestamps {
            cleanWs()
            step([$class: 'CopyArtifact',
                fingerprintArtifacts: true,
                projectName: "$UPSTREAM_JOB_NAME",
                selector: [$class: 'SpecificBuildSelector',
                            buildNumber: "${params.UPSTREAM_JOB_NUMBER}"]])
            sh 'for filename in *.tar.gz; do tar zxf $filename; done'
        }
    }
}

def configure() {
    stage('Configure Test') {
        timestamps {
            dir ('openj9/test/TestConfig') {
                withEnv(["SPEC=${SPEC}", "JAVA_BIN=${JAVA_BIN}", "JAVA_VERSION=${JAVA_VERSION}"]) {
                    sh 'make -f run_configure.mk'
                }
            }
        }
    }
}

def get_dependencies() {
    stage('Get Test Dependencies') {
        timestamps {
            copyArtifacts fingerprintArtifacts: true, projectName: "${TEST_DEPENDENCIES_JOB_NAME}", selector: lastSuccessful(), target: 'openj9/test/TestConfig/lib'
        }
    }
}

def compile() {
    stage('Compile Test') {
        timestamps {
            dir ('openj9/test/TestConfig') {
                withEnv(["SPEC=${SPEC}", "JAVA_BIN=${JAVA_BIN}", "JAVA_VERSION=${JAVA_VERSION}"]) {
                    sh 'make compile'
                }
            }
        }
    }
}

def test() {
    stage('Test') {
        timestamps {
            dir ('openj9/test/TestConfig') {
                withEnv(["SPEC=${SPEC}", "JAVA_BIN=${JAVA_BIN}", "JAVA_VERSION=${JAVA_VERSION}"]) {
                    sh "make ${TEST_TARGET}"
                }
            }
        }
    }
}

def publish() {
    stage('Publish Test Results') {
        timestamps {
            junit allowEmptyResults: true, keepLongStdio: true, testResults: '**/junitreports/**/*.xml'
            step([$class: 'Publisher', reportFilenamePattern: '**/testng-results.xml'])
            step([$class: "TapPublisher", testResults: "**/*.tap"])
        }
    }
}

def test_all() {
    configure()
    get_dependencies()
    compile()
    test()
    publish()
}

def test_all_with_fetch() {
    fetch_artifacts()
    test_all()
    cleanWs()
}
return this
