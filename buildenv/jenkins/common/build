/*******************************************************************************
 * Copyright (c) 2017, 2018 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

def git_clean() {
    script {
        if (fileExists('.git')) {
            sh "git clean -ffxd"
        }
    }
}

def get_source() {
    stage('Get Source') {
        timestamps {
            git_clean()

            // Setup REPO variables
            OPENJ9_REPO_OPTION = (OPENJ9_REPO != "") ? "-openj9-repo=${OPENJ9_REPO}" : ""
            OPENJ9_BRANCH_OPTION = (OPENJ9_BRANCH != "") ? "-openj9-branch=${OPENJ9_BRANCH}" : ""
            OPENJ9_SHA_OPTION = (OPENJ9_SHA != "") ? "-openj9-sha=${OPENJ9_SHA}" : ""
            OMR_REPO_OPTION = (OMR_REPO != "") ? "-omr-repo=${OMR_REPO}" : ""
            OMR_BRANCH_OPTION = (OMR_BRANCH != "")? "-omr-branch=${OMR_BRANCH}" : ""
            OMR_SHA_OPTION = (OMR_SHA != "") ? "-omr-sha=${OMR_SHA}" : ""

            if (USER_CREDENTIALS_ID != '') {
                get_sources_with_authentication()
            } else {
                get_sources()
            }
        }
    }
}

def get_sources() {
    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${OPENJDK_BRANCH}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: false, timeout: 30]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "${USER_CREDENTIALS_ID}", url: "${OPENJDK_REPO}"]]]
    sh "git checkout ${OPENJDK_SHA}"
    sh "bash ./get_source.sh ${OPENJ9_REPO_OPTION} ${OPENJ9_BRANCH_OPTION} ${OPENJ9_SHA_OPTION} ${OMR_REPO_OPTION} ${OMR_BRANCH_OPTION} ${OMR_SHA_OPTION}"
}

def get_sources_with_authentication() {
    sshagent(credentials:["${USER_CREDENTIALS_ID}"]) {
        get_sources()
    }
}

def checkout_pullrequest() {
    stage('Checkout Pull Request') {
        timestamps {
            echo 'Look for Dependent Changes'
            script {
                def KEYWORD = "depends"
                def COMMENT = ghprbCommentBody.toLowerCase(Locale.US);
                def OJDK_PR
                def OMR_PR
                omr_bool = false
                omr_upstream = false
                openjdk_bool = false

                if (COMMENT.contains(KEYWORD)) {

                    // Gather everything after KEYWORD. Assumes a whitespace after KEYWORD, hence +1
                    def DEPENDS_BLOB  = COMMENT.substring(COMMENT.indexOf(KEYWORD) + KEYWORD.length() + 1 , COMMENT.length())
                    def DEPENDS_ARRAY = DEPENDS_BLOB.tokenize(' ')


                    for (DEPEND in DEPENDS_ARRAY) {
                        String REPO  = DEPEND.substring(DEPEND.indexOf("/") + 1, DEPEND.indexOf("#"));
                        String PR_ID = DEPEND.substring(DEPEND.indexOf("#") + 1, DEPEND.length());
                        switch(REPO) {
                            case "omr":
                                if (!omr_bool) {
                                    omr_bool = true
                                    omr_upstream = true
                                    OMR_PR="${PR_ID}"
                                    echo "Dependent OMR change found: #${PR_ID}"
                                } else {
                                    echo "error: Cannot specify 2 OMR Repos"
                                    error()
                                }
                                break
                            case "openj9-omr":
                                if (!omr_bool) {
                                    omr_bool = true
                                    OMR_PR="${PR_ID}"
                                    echo "Dependent OMR change found: #${PR_ID}"
                                } else {
                                    echo "error: Cannot specify 2 OMR Repos"
                                    error()
                                }
                                break
                            case "openj9-openjdk-jdk9":
                                if (!openjdk_bool) {
                                    openjdk_bool = true
                                    OJDK_PR="${PR_ID}"
                                    echo "Dependent OopenJDK change found: #${PR_ID}"
                                } else {
                                    echo "error: Cannot specify 2 OpenJDK Repos"
                                    error()
                                }
                                break
                            default:
                                echo "error: Bad Depends Repo: '${REPO}' in '${DEPEND}'"
                                error()
                        }
                    }
                }
                if (openjdk_bool) {
                    sh "git fetch --tags --progress origin +refs/pull/*:refs/remotes/origin/pr/*"
                    sh "git checkout refs/remotes/origin/pr/${OJDK_PR}/merge"
                }
                sh 'bash ./get_source.sh'
                dir ('openj9') {
                    sh "git fetch --tags --progress origin +refs/pull/*:refs/remotes/origin/pr/*"
                    sh "git checkout ${sha1}"
                }
                if (omr_bool) {
                    dir ('omr') {
                        if (omr_upstream) {
                            sh "git config remote.origin.url https://github.com/eclipse/omr.git"
                        }
                        sh "git fetch --tags --progress origin +refs/pull/*:refs/remotes/origin/pr/*"
                        sh "git checkout refs/remotes/origin/pr/${OMR_PR}/merge"
                    }
                }
            }
        }
    }
}

def build() {
    stage('Compile') {
        timestamps {
            sh "bash ./configure --with-freemarker-jar=$FREEMARKER --with-boot-jdk=$BOOT_JDK"
            sh "make all"
        }
    }
    stage('Java Version') {
        timestamps {
            sh "build/$RELEASE/images/${(SDK_VERSION == '8') ? 'j2sdk-image' : 'jdk'}/bin/java -version"
        }
    }
}

def archive() {
    stage('Archive') {
        timestamps {
            sh "tar -zcvf ${WORKSPACE}/${SDK_PREFIX}`date +%Y%d%m%H%M`${SDK_SUFFIX} build/$RELEASE/images/${JDK_FOLDER}"
            sh "tar -zcvf ${WORKSPACE}/${TEST_PREFIX}`git -C openj9 rev-parse --short HEAD`${TEST_SUFFIX} openj9/test/"
            archiveArtifacts artifacts: "**/${SDK_PREFIX}*${SDK_SUFFIX}, **/${TEST_PREFIX}*${TEST_SUFFIX}", fingerprint: true, onlyIfSuccessful: true
        }
    }
}

def build_all() {

    // Typically called by Build jobs

    get_source()
    build()
    archive()
    git_clean()
}

def build_pr() {

    // Called by PR Compile and Test jobs
    // Does not cleanup as it is expected testing will occur, followed by cleanup

    get_source()
    checkout_pullrequest()
    build()
}

def build_pr_compile_only() {

    // Called by Compile only PRs.
    // Archive and cleanup after build.

    build_pr()
    archive()
    git_clean()
}
return this
