<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) 2010, 2019 IBM Corp. and others

This program and the accompanying materials are made available under
the terms of the Eclipse Public License 2.0 which accompanies this
distribution and is available at https://www.eclipse.org/legal/epl-2.0/
or the Apache License, Version 2.0 which accompanies this distribution and
is available at https://www.apache.org/licenses/LICENSE-2.0.

This Source Code may also be made available under the following
Secondary Licenses when the conditions for such availability set
forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
General Public License, version 2 with the GNU Classpath
Exception [1] and GNU General Public License, version 2 with the
OpenJDK Assembly Exception [2].

[1] https://www.gnu.org/software/classpath/license.html
[2] http://openjdk.java.net/legal/assembly-exception.html

SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->
<project name="DDR_Tools" default="generate">

	<!-- To be used via AXXON only -->
	<!-- To be used via AXXON only -->
	<!-- To be used via AXXON only -->
	<fail unless="BUILD_ID" message="Missing BUILD_ID." />
	<fail unless="JOB_ID" message="Missing JOB_ID." />
	<property name="TMP_DIR" location="${java.io.tmpdir}${file.separator}bld_${BUILD_ID}${file.separator}job_${JOB_ID}" />
	<mkdir dir="${TMP_DIR}" />

	<taskdef resource='net/sf/antcontrib/antlib.xml' />

	<stopwatch name="timer" />

	<property name="WORKSPACE" value="${basedir}/../.." />
	<property name="DDR_VM" location="${WORKSPACE}/debugtools/DDR_VM" />
	<property name="DDR_ARTIFACTS" location="${WORKSPACE}/debugtools/DDR_Artifacts" />

	<if>
		<!-- VM_VERSION is inherited from DDR_VM/generate.xml -->
		<equals arg1="${VM_VERSION}" arg2="24" />
		<then>
			<!-- the RAS jars are in RASTools folder in 2.4 VM infrastructure -->
			<property name="RAS_BINARIES" location="${WORKSPACE}/../external/RASTools" />
		</then>
		<else>
			<property name="RAS_BINARIES" location="${TMP_DIR}/RAS_Binaries" />
		</else>
	</if>

	<property name="DDR_LIBS" location="${DDR_ARTIFACTS}/libs" />
	<property name="DDR_TOOLS_LIB" location="${DDR_LIBS}/j9ddr-tools.jar" />
	<property name="DDR_CORE_LIB" location="${DDR_LIBS}/j9ddr-core.jar" />
	<property name="DDR_AUTOBLOB_LIB" location="${DDR_LIBS}/j9ddr-autoblob.jar" />

	<property name="BLOBS_DIR" location="${BUILD_ROOT}/build/blobs" />
	<property name="SPEC_SUPERSET_DIR" location="${BUILD_ROOT}/build/supersets" />
	<property name="INTREL_DIR" location="${BUILD_ROOT}/build/${SPEC_ID}" />
	<property name="SUPERSET_SRC_DIR" location="${DDR_ARTIFACTS}/supersets/${VM_VERSION}" />
	<property name="SUPERSET_DEST_DIR" location="${BUILD_ROOT}/build/${SPEC_ID}" />
	<property name="STUBS_PACKAGE_NAME" value="com.ibm.j9ddr.vm${VM_VERSION}.structure" />
	<property name="POINTERS_PACKAGE_NAME" value="com.ibm.j9ddr.vm${VM_VERSION}.pointer.generated" />
	<property name="PACKAGE_NAME_PREFIX" value="com.ibm.j9ddr.vm" />
	<property name="STUBS_NAME" value=".structure" />
	<property name="POINTERS_NAME" value=".pointer.generated" />

	<property name="with-boot-jdk" value="/bluebird/bin/platform/linux386/ibm-jdk-1.8.0" />
	<property name="spec.level" value="1.6" />

	<import file="${DDR_VM}/compile_ddr.xml" />

	<target name="generate">

		<fail unless="BUILD_ROOT" message="Missing BUILD_ROOT, e.g. /bluebird/builds/bld_12345" />
		<fail unless="SPEC_ID" message="Missing SPEC_ID, e.g. linux_x86" />
		<fail unless="BLOB_FILE" message="Missing BLOB_FILE, e.g. /tmp/.../jre/lib/i386/default/j9ddr.dat" />

		<antcall target="setup" />

		<antcall target="add_structure_blob">
			<param name="superset.dir" value="${SUPERSET_DEST_DIR}" />
			<param name="blob.file" value="${BLOB_FILE}" />
		</antcall>

		<antcall target="generate_stubs">
			<param name="superset.dir" value="${SUPERSET_DEST_DIR}" />
		</antcall>

		<antcall target="generate_pointer_classes">
			<param name="superset.dir" value="${SUPERSET_DEST_DIR}" />
		</antcall>

		<stopwatch name="timer" action="elapsed" />
	</target>

	<target name="setup">
		<copy file="${SUPERSET_SRC_DIR}/superset.dat" todir="${SUPERSET_DEST_DIR}" />
		<stopwatch name="timer" action="elapsed" />
	</target>

	<!-- Take the provided blob and add it to the latest superset.
		 End result is a superset containing latest blob data for that spec _only_ -->

	<target name="add_structure_blob">
		<tstamp>
			<format property="TIMESTAMP" pattern="yyyy_MM_dd" locale="en,US" />
		</tstamp>

		<property name="BLOB_KEY" value="${SPEC_ID}.vm${VM_VERSION}_${TIMESTAMP}" />

		<java classname="com.ibm.j9ddr.tools.AddStructureBlob">
			<arg line="-d ${superset.dir} -f ${blob.file} -k ${BLOB_KEY}" />
			<classpath>
				<pathelement location="${DDR_CORE_LIB}" />
				<pathelement location="${DDR_TOOLS_LIB}" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>

		<stopwatch name="timer" action="elapsed" />
	</target>

	<target name="generate_stubs">
		<java classname="com.ibm.j9ddr.tools.StructureStubGenerator">
			<arg line="-o ${DDR_VM}/src -p ${STUBS_PACKAGE_NAME} -f ${superset.dir} -l true" />
			<classpath>
				<pathelement location="${DDR_TOOLS_LIB}" />
				<pathelement location="${DDR_CORE_LIB}" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>

		<stopwatch name="timer" action="elapsed" />
	</target>

	<target name="generate_pointer_classes">
		<java classname="com.ibm.j9ddr.tools.PointerGenerator">
			<arg line="-o ${DDR_VM}/src -p ${POINTERS_PACKAGE_NAME} -f ${superset.dir} -v ${VM_VERSION} -u false -c ${basedir}/generate.properties -l true" />
			<classpath>
				<pathelement location="${DDR_TOOLS_LIB}" />
				<pathelement location="${DDR_CORE_LIB}" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>

		<stopwatch name="timer" action="elapsed" />
	</target>

	<!-- Copy everything DDR to temp prior to any generation which is done on a per spec basis and
		 once we promote; for all blobs -->

	<target name="stage">
		<fail unless="BUILD_ID" message="Missing BUILD_ID." />
		<fail unless="JOB_ID" message="Missing JOB_ID." />
		<fail unless="VM_VERSION" message="Missing VM_VERSION, e.g. 27,28,29" />

		<echo>Copying files</echo>
		<echo>  from: ${WORKSPACE}</echo>
		<echo>    to: ${TMP_DIR}</echo>

		<if>
			<!-- VM_VERSION is inherited from DDR_VM/generate.xml -->
			<equals arg1="${VM_VERSION}" arg2="24" />
			<then>
				<shellscript shell="bash" dir="${TMP_DIR}">
					mkdir ${TMP_DIR}/debugtools
					cp -af ${WORKSPACE}/debugtools/DDR_* ${TMP_DIR}/debugtools
					cp -af ${RAS_BINARIES} ${TMP_DIR}
				</shellscript>
			</then>
			<else>
				<shellscript shell="bash" dir="${TMP_DIR}">
					mkdir ${TMP_DIR}/debugtools
					cp -af ${WORKSPACE}/debugtools/DDR_* ${TMP_DIR}/debugtools
					cp -af ${WORKSPACE}/jcl ${TMP_DIR}
					cp -af ${WORKSPACE}/../build/RAS_Binaries/*.jar ${TMP_DIR}/RAS_Binaries
					mkdir ${TMP_DIR}/sourcetools/
					cp -af ${WORKSPACE}/sourcetools/lib ${TMP_DIR}/sourcetools/
					cp -af ${WORKSPACE}/sourcetools/*.mk ${TMP_DIR}/sourcetools/
				</shellscript>
				<if>
					<or>
						<equals arg1="${VM_VERSION}" arg2="26" />
						<equals arg1="${VM_VERSION}" arg2="27" />
					</or>
					<then>
						<shellscript shell="bash" dir="${TMP_DIR}">
							cp -af ${WORKSPACE}/JFormat ${TMP_DIR}
						</shellscript>
					</then>
				</if>
			</else>
		</if>

		<!-- CMVC 198819: Zombie fields in DDR kept alive by out of date build specs -->
		<if>
			<and>
				<available file="${WORKSPACE}/debugtools/DDR_Artifacts/specs/${VM_VERSION}" type="dir" />
				<or>
					<equals arg1="${build.type}" arg2="acceptance" />
					<equals arg1="${build.type}" arg2="codecoverage" />
					<equals arg1="${build.type}" arg2="customized" />
					<equals arg1="${build.type}" arg2="developer" />
					<equals arg1="${build.type}" arg2="service" />
				</or>
			</and>
			<then>
				<echo>Copy spec superset to: ${WORKSPACE}/../build/supersets</echo>
				<echo> from: ${WORKSPACE}/debugtools/DDR_Artifacts/specs/${VM_VERSION}</echo>
				<copy todir="${WORKSPACE}/../build/supersets" verbose="true">
					<fileset dir="${WORKSPACE}/debugtools/DDR_Artifacts/specs/${VM_VERSION}" />
				</copy>
			</then>
		</if>

		<stopwatch name="timer" action="elapsed" />
	</target>

	<!-- Extracts a blob from intrel.zip and copies it to bluebird. To be used by builds only -->

	<target name="copy_blob">
		<fail unless="BUILD_ROOT" message="Missing BUILD_ROOT, e.g. /bluebird/builds/bld_12345" />
		<fail unless="SPEC_ID" message="Missing SPEC_ID, e.g. linux_x86" />

		<unzip src="${INTREL_DIR}/source.zip" dest="${TMP_DIR}">
			<patternset>
				<include name="**/ddr/superset/superset.${SPEC_ID}.dat" />
			</patternset>
		</unzip>

		<move file="${TMP_DIR}/bld_${SPEC_ID}/ddr/superset/superset.${SPEC_ID}.dat" tofile="${SPEC_SUPERSET_DIR}/${SPEC_ID}" />

		<stopwatch name="timer" action="elapsed" />
	</target>

	<!-- Generate a j9ddr.jar based on a blob for one spec only -->

	<target name="generate_spec_j9ddr">
		<fail unless="output.dir" message="Missing output.dir, e.g. /bluebird/builds/bld_63055/workspace/debugtools/DDR_Artifacts/bin" />

		<!-- create stubs and pointer classes for the specified spec -->
		<antcall target="generate" />

		<!-- compile j9ddr.jar using the new generated classes -->
		<!-- output.dir should be set on the command line to specify where we want to drop all the jars -->
		<antcall target="dist" />

		<!-- copy the j9ddr.jar to the spec build directory. it will be later picked up by the compose scripts -->
		<move file="${output.dir}/libs/j9ddr.jar" todir="${INTREL_DIR}" />
	</target>

	<target name="generate_and_inter_spec_j9ddr">
		<antcall target="generate_spec_j9ddr" />

		<echo>Adding ${BUILD_ROOT}/build/${SPEC_ID}/j9ddr.jar</echo>
		<echo>   to: ${BUILD_ROOT}/build/${SPEC_ID}/source.zip</echo>

		<shellscript shell="bash" dir="${BUILD_ROOT}/build/${SPEC_ID}/" failonerror="true">
			cd ${BUILD_ROOT}/build/${SPEC_ID}/ &amp;&amp;\
			mkdir bld_${SPEC_ID}/ &amp;&amp;\
			cp -f j9ddr.jar bld_${SPEC_ID}/ &amp;&amp;\
			zip source.zip bld_${SPEC_ID}/j9ddr.jar &amp;&amp;\
			rm -rf bld_${SPEC_ID}
		</shellscript>

		<echo>Adding ${BUILD_ROOT}/build/${SPEC_ID}/j9ddr.jar</echo>
		<echo>   to: ${BUILD_ROOT}/build/${SPEC_ID}/intrel.zip</echo>

		<shellscript shell="bash" dir="${BUILD_ROOT}/build/${SPEC_ID}/" failonerror="true">
			cd ${BUILD_ROOT}/build/${SPEC_ID}/ &amp;&amp;\
			zip intrel.zip j9ddr.jar
		</shellscript>
	</target>

	<target name="generate_full_j9ddr" description="This is an axxon build target to generate a j9ddr.jar from all spec blobs">
		<fail unless="BUILD_ID" message="Missing BUILD_ID, e.g. 56012" />
		<fail unless="BUILD_ROOT" message="Missing BUILD_ROOT, e.g. /bluebird/builds/bld_12345" />
		<fail unless="BLOBS_DIR" message="Missing BLOBS_DIR, e.g. /bluebird/builds/bld_12345/build/blobs" />
		<fail unless="VM_VERSION" message="Missing VM_VERSION, e.g. 27,28,29" />

		<!-- output.dir is used and set if not already set by compile_ddr.xml to write out jar files etc -->
		<fail unless="output.dir" message="Missing output.dir, location to place compiled artifacts" />

		<property name="superset.dir" value="${BUILD_ROOT}/debugtools/DDR_Artifacts/supersets/${VM_VERSION}" />

		<tstamp>
			<format property="TIMESTAMP" pattern="yyyy_MM_dd" locale="en,US" />
		</tstamp>

		<echo />
		<echo>Adding blobs to the superset</echo>
		<echo />

		<echo />
		<echo>Processing spec supersets</echo>
		<echo />

		<echo>com.ibm.j9ddr.tools.AddStructureBlob -d ${superset.dir} -f ${BLOBS_DIR}/../supersets -k vm${VM_VERSION}_${TIMESTAMP} -s superset.base.dat -c ${basedir}/generate.properties</echo>
		<echo>classpath: ${DDR_AUTOBLOB_LIB}</echo>
		<echo>classpath: ${java.class.path}</echo>
		<java classname="com.ibm.j9ddr.tools.AddStructureBlob">
			<arg line="-d ${superset.dir} -f ${BLOBS_DIR}/../supersets -k vm${VM_VERSION}_${TIMESTAMP} -s superset.base.dat -c ${basedir}/generate.properties" />
			<classpath>
				<pathelement location="${DDR_AUTOBLOB_LIB}" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>

		<switch value="${VM_VERSION}">
			<case value="24">
				<property name="streamList" value="24,23" />
			</case>
			<case value="26">
				<property name="streamList" value="26,24,23" />
			</case>
			<case value="27">
				<property name="streamList" value="27,26,24,23" />
			</case>
			<case value="28">
				<property name="streamList" value="28,27,26,24,23" />
			</case>
			<case value="29_00">
				<property name="streamList" value="29_00,28,27,26,24,23" />
			</case>
			<case value="29">
				<property name="streamList" value="29,29_00,28,27,26,24,23" />
			</case>
			<default>
				<property name="streamList" value="29,29_00,28,27,26,24,23" />
			</default>
		</switch>

		<echo />
		<echo>VM_VERSION: ${VM_VERSION}</echo>
		<echo>streamList: ${streamList}</echo>
		<echo />

		<for list="${streamList}" param="vmnbr">
			<sequential>
				<echo>${PACKAGE_NAME_PREFIX}@{vmnbr}${STUBS_NAME}</echo>
				<echo>${PACKAGE_NAME_PREFIX}@{vmnbr}${POINTERS_NAME}</echo>

				<switch value="${VM_VERSION}">
					<case value="24">
						<var name="SUPERSET_NAME" unset="true" />
						<property name="SUPERSET_NAME" value="superset.base.dat" />
					</case>
					<case value="26">
						<if>
							<equals arg1="@{vmnbr}" arg2="24" />
							<then>
								<var name="SUPERSET_NAME" unset="true" />
								<property name="SUPERSET_NAME" value="superset.ibuild.dat" />
							</then>
							<else>
								<var name="SUPERSET_NAME" unset="true" />
								<property name="SUPERSET_NAME" value="superset.base.dat" />
							</else>
						</if>
					</case>
					<case value="27">
						<if>
							<or>
								<equals arg1="@{vmnbr}" arg2="26" />
								<equals arg1="@{vmnbr}" arg2="24" />
							</or>
							<then>
								<var name="SUPERSET_NAME" unset="true" />
								<property name="SUPERSET_NAME" value="superset.ibuild.dat" />
							</then>
							<else>
								<var name="SUPERSET_NAME" unset="true" />
								<property name="SUPERSET_NAME" value="superset.base.dat" />
							</else>
						</if>
					</case>
					<case value="28">
							<if>
								<or>
									<equals arg1="@{vmnbr}" arg2="27" />
									<equals arg1="@{vmnbr}" arg2="26" />
									<equals arg1="@{vmnbr}" arg2="24" />
								</or>
								<then>
									<var name="SUPERSET_NAME" unset="true" />
									<property name="SUPERSET_NAME" value="superset.ibuild.dat" />
								</then>
								<else>
									<var name="SUPERSET_NAME" unset="true" />
									<property name="SUPERSET_NAME" value="superset.base.dat" />
								</else>
							</if>
					</case>
					<case value="29">
							<if>
								<or>
									<equals arg1="@{vmnbr}" arg2="29_00" />
									<equals arg1="@{vmnbr}" arg2="28" />
									<equals arg1="@{vmnbr}" arg2="27" />
									<equals arg1="@{vmnbr}" arg2="26" />
									<equals arg1="@{vmnbr}" arg2="24" />
								</or>
								<then>
									<var name="SUPERSET_NAME" unset="true" />
									<property name="SUPERSET_NAME" value="superset.ibuild.dat" />
								</then>
								<else>
									<var name="SUPERSET_NAME" unset="true" />
									<property name="SUPERSET_NAME" value="superset.base.dat" />
								</else>
							</if>
					</case>
					<case value="29_00">
							<if>
								<or>
									<equals arg1="@{vmnbr}" arg2="29" />
									<equals arg1="@{vmnbr}" arg2="28" />
									<equals arg1="@{vmnbr}" arg2="27" />
									<equals arg1="@{vmnbr}" arg2="26" />
									<equals arg1="@{vmnbr}" arg2="24" />
								</or>
								<then>
									<var name="SUPERSET_NAME" unset="true" />
									<property name="SUPERSET_NAME" value="superset.ibuild.dat" />
								</then>
								<else>
									<var name="SUPERSET_NAME" unset="true" />
									<property name="SUPERSET_NAME" value="superset.base.dat" />
								</else>
							</if>
					</case>
					<default>
						<var name="SUPERSET_NAME" unset="true" />
						<property name="SUPERSET_NAME" value="superset.base.dat" />
					</default>
				</switch>

				<echo />
				<echo>Generating Stubs in ${DDR_VM}</echo>
				<echo />

				<echo>com.ibm.j9ddr.tools.StructureStubGenerator -o ${DDR_VM}/src -p ${PACKAGE_NAME_PREFIX}@{vmnbr}${STUBS_NAME} -f ${superset.dir}/../@{vmnbr} -s ${SUPERSET_NAME}</echo>
				<echo>classpath: ${DDR_AUTOBLOB_LIB}</echo>
				<echo>classpath: ${java.class.path}</echo>
				<java classname="com.ibm.j9ddr.tools.StructureStubGenerator">
					<arg line="-o ${DDR_VM}/src -p ${PACKAGE_NAME_PREFIX}@{vmnbr}${STUBS_NAME} -f ${superset.dir}/../@{vmnbr} -s ${SUPERSET_NAME}" />
					<classpath>
						<pathelement location="${DDR_AUTOBLOB_LIB}" />
						<pathelement path="${java.class.path}" />
					</classpath>
				</java>

				<echo />
				<echo>Generating Pointer Classes in ${DDR_VM}</echo>
				<echo />

				<echo>com.ibm.j9ddr.tools.PointerGenerator -o ${DDR_VM}/src -p ${PACKAGE_NAME_PREFIX}@{vmnbr}${POINTERS_NAME} -f ${superset.dir}/../@{vmnbr} -s ${SUPERSET_NAME} -v @{vmnbr}</echo>
				<echo>classpath: ${DDR_AUTOBLOB_LIB}</echo>
				<echo>classpath: ${java.class.path}</echo>
				<java classname="com.ibm.j9ddr.tools.PointerGenerator">
					<arg line="-o ${DDR_VM}/src -p ${PACKAGE_NAME_PREFIX}@{vmnbr}${POINTERS_NAME} -f ${superset.dir}/../@{vmnbr} -s ${SUPERSET_NAME} -v @{vmnbr}" />
					<classpath>
						<pathelement location="${DDR_AUTOBLOB_LIB}" />
						<pathelement path="${java.class.path}" />
					</classpath>
				</java>
			</sequential>
		</for>

		<echo />
		<echo>Compiling full j9ddr.jar</echo>
		<echo />

		<antcall target="dist" />

		<for list="${streamList}" param="vmnbr">
			<sequential>
				<echo />
				<if>
					<equals arg1="${product}" arg2="java8" />
					<then>
						<echo>Adding blob fragments for [@{vmnbr} stream] to ${output.dir}/libs/j9ddr.jar</echo>
						<jar update="true" destfile="${output.dir}/libs/j9ddr.jar">
							<fileset dir="${output.dir}">
								<include name="fragments/@{vmnbr}/*.dat" />
								<include name="fragments/fragments.properties" />
							</fileset>
						</jar>
						<copy file="${output.dir}/libs/j9ddr.jar" todir="${target.dir}/libs" verbose="true" />
					</then>
					<else>
						<echo>Adding blob fragments for [@{vmnbr} stream] to ${output.dir}/libs/java9_j9ddr.jar</echo>
						<jar update="true" destfile="${output.dir}/libs/java9_j9ddr.jar">
							<fileset dir="${output.dir}">
								<include name="fragments/@{vmnbr}/*.dat" />
								<include name="fragments/fragments.properties" />
							</fileset>
						</jar>
						<copy file="${output.dir}/libs/java9_j9ddr.jar" todir="${target.dir}/libs" verbose="true" />
					</else>
				</if>
				<echo />
			</sequential>
		</for>

		<switch value="${build.type}">
			<case value="integration">
				<antcall target="sync_superset">
					<param name="build.id" value="${BUILD_ID}" />
					<param name="artifacts.dir" value="${output.dir}" />
				</antcall>
				<if>
					<equals arg1="${VM_VERSION}" arg2="29" />
					<then>
						<antcall target="stage_ddr_jar">
							<param name="output.dir" value="${output.dir}" />
						</antcall>
					</then>
				</if>
			</case>
			<default />
		</switch>

		<antcall target="cleanup" />
	</target>

	<target name="cleanup" >
		<echo message="Deleting directory ${java.io.tmpdir}${file.separator}bld_${BUILD_ID}" />
		<shellscript shell="bash" >
				rm -rf ${java.io.tmpdir}${file.separator}bld_${BUILD_ID}
		</shellscript>
	</target>

	<target name="sync_superset">

		<fail unless="artifacts.dir" message="Missing artifacts.dir" />
		<fail unless="J9_ROOT" message="Missing J9_ROOT" />

		<echo>Syncing superset.ibuild.dat including spec superset in ${superset.dir}</echo>

		<for param="file">
			<path>
				<fileset dir="${BLOBS_DIR}/../supersets" includes="*" />
			</path>
			<sequential>
				<propertyregex property="specsuperset" override="true" input="@{file}" regexp="\/bluebird\/builds\/bld_[0-9]*\/build\/supersets/([^\.]*)" select="\1" casesensitive="false" />
				<copy file="@{file}" todir="${J9_ROOT}/workspace/debugtools/DDR_Artifacts/specs/${VM_VERSION}" verbose="true" overwrite="true" failonerror="true" />
			</sequential>
		</for>

		<copy file="${superset.dir}/superset.base.dat" tofile="${J9_ROOT}/workspace/debugtools/DDR_Artifacts/supersets/${VM_VERSION}/superset.ibuild.dat" verbose="true" overwrite="true" failonerror="true" />
	</target>

	<target name="stage_ddr_jar">
		<fail unless="output.dir" message="Missing output.dir, location to place compiled artifacts" />

		<if>
			<equals arg1="${product}" arg2="java8" />
			<then>
				<copy file="${output.dir}/libs/j9ddr.jar" tofile="/bluebird/tools/ddr/j9ddr_jvm29.jar" />
			</then>
		</if>
	</target>

	<target name="promote_ddr">
		<shellscript shell="bash" dir="${J9_ROOT}/workspace/debugtools/DDR_Artifacts" outputproperty="scm.status.output">
			${RTC_COMMAND} status --verbose
		</shellscript>

		<echo message="scm status: ${scm.status.output}" />

		<propertyregex property="should.checkin" override="true" input="${scm.status.output}" regexp=".*DDR_Artifacts/supersets/[0-9_]{2,5}/(superset.ibuild.dat).*" select="\1" casesensitive="false" />

		<echo message="should.checking: ${should.checkin}" />

		<if>
			<equals arg1="${should.checkin}" arg2="superset.ibuild.dat" />
			<then>
				<shellscript shell="bash" dir="${J9_ROOT}/workspace/debugtools/DDR_Artifacts/specs/${VM_VERSION}" outputproperty="create.changeset.output" failonerror="true">
					${RTC_COMMAND} -u y create changeset --component jvm.ddr 'Spec superset and superset.ibuild.dat for build ${BUILD_ID}'
				</shellscript>

				<!-- parse output to find alias for changeset: Created change set (2999:_IAtjcakZEeKW0MLoxfkxGQ). -->
				<propertyregex property="changeset.alias" override="true" input="${create.changeset.output}" regexp="Created change set \(\d*:(.*)\)\..*" select="\1" casesensitive="false" />

				<shellscript shell="bash" dir="${J9_ROOT}/workspace/debugtools/DDR_Artifacts/" failonerror="true">
					${RTC_COMMAND} checkin --verbose specs
					${RTC_COMMAND} checkin --verbose supersets
					${RTC_COMMAND} changeset complete ${changeset.alias}
				</shellscript>

				<propertyfile file="${J9_ROOT}/ddr_changeset_uuid.property">
					<entry key="ddr.changeset.uuid" value="${changeset.alias}" />
				</propertyfile>
			</then>
			<else>
				<echo>There is nothing to sync (superset.ibuild.dat unchanged).</echo>
			</else>
		</if>
	</target>

</project>
