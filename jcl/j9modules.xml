<!--
/*******************************************************************************
 * Copyright (c) 2016, 2018 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/
 -->

<project name="j9modules" default="prepare-module" basedir=".">

	<!-- Add optional tasks. -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" />

	<target name="prepare-module">
		<fail unless="module.dir" message="internal error, module.dir not defined" />
		<fail unless="module.name" message="internal error, module.name not defined" />
		<fail unless="module.platform" message="internal error, module.platform not defined" />

		<echo message="Preparing module ${module.name} for platform ${module.platform}" />

		<switch value="${module.name}">
			<case value="java.management">
				<removeexportsoropens action="exports" package="com.ibm.lang.management" />
				<removeexportsoropens action="exports" package="com.ibm.virtualization.management" />
				<removeexportsoropens action="exports" package="com.ibm.java.lang.management.internal" />
				<removeexportsoropens action="opens" package="java.lang.management" />
				<replaceexportsoropens module.old="com.ibm.management" module.new="" action="exports" />

				<delete verbose="true">
					<fileset dir="${module.dir}/classes">
						<include name="com/ibm/lang/management/*" />
						<include name="com/ibm/virtualization/management/*" />
					</fileset>
				</delete>
			</case>
			<case value="java.base">
				<removeexportsoropens action="exports" package="com.ibm.cuda" />
				<removeexportsoropens action="exports" package="com.ibm.dataaccess" />
				<removeexportsoropens action="exports" package="com.ibm.jvm" />
				<removeexportsoropens action="exports" package="com.ibm.oti.shared" />
				<removeexportsoropens action="exports" package="com.ibm.oti.util" />
				<removeexportsoropens action="exports" package="com.ibm.oti.vm" />
				<removeexportsoropens action="exports" package="com.ibm.sharedclasses.spi" />
				<removeexportsoropens action="exports" package="com.ibm.le.conditionhandling" />
				<replaceexportsoropens action="exports" module.old="com.ibm.dtfj" module.new="" />
				<replaceexportsoropens action="exports" module.old="com.ibm.dtfjview" module.new="" />

				<delete verbose="true">
					<fileset dir="${module.dir}/classes">
						<include name="com/ibm/cuda/**" />
						<include name="com/ibm/dataaccess/*" />
						<include name="com/ibm/gpu/*" />
						<include name="com/ibm/oti/shared/*" />
						<include name="com/ibm/jvm/*" />
						<include name="com/ibm/le/**" />
					</fileset>
				</delete>
				
				<property name="patch-b148.zip" location="../sourcetools/J9_JCL_Build_Tools/lib/patch-b148.zip" />
				<if>
					<and>
						<available file="${patch-b148.zip}" type="file" />
						<not>
							<equals arg1="${module.platform}" arg2="futurejeps_xa64" />
						</not>
						<not>
							<isset property="rawbuild.level" />
						</not>
					</and>	
					<then>
						<echo message="Applying b148 patch." level="info" />
						<unzip src="${patch-b148.zip}" dest="${module.dir}/classes" overwrite="true" />
					</then>
					<else>
						<echo message="Can't find b148 patch file: ${patch-b148.zip} or skipped for ${module.platform}" level="info" />
					</else>
				</if>
			</case>
			<case value="com.ibm.dtfj">
				<replaceexportsoropens action="exports" module.old="com.ibm.dtfjview" module.new="" />
			</case>
			<case value="com.ibm.dtfjview">
				<replaceexportsoropens action="exports" module.old="com.ibm.dtfj" module.new="" />
				<replacerequires module.old="com.ibm.dtfj" module.new="openj9.dtfj" />
			</case>
			<case value="jdk.jconsole">
				<replacerequires module.old="com.ibm.management" module.new="jdk.management" />
			</case>
			<case value="jdk.management">
				<removeexportsoropens action="exports" package="com.sun.management.internal" />
			</case>
			<case value="openj9.sfj">
				<replacerequires module.old="com.ibm.management" module.new="jdk.management" />
			</case>
			<default>
				<echo message="No preparation required for module ${module.name}" />
			</default>
		</switch>
	</target>

	<property name="moduleinfofile" value="${module.dir}/classes/module-info.java" />

	<!-- Removes an exports or opens line based on the package it exports -->
	<macrodef name="removeexportsoropens">
		<attribute name="package" />
		<attribute name="action" />
		<sequential>
			<echo message="Removing @{action} of package @{package}" />
			<loadresource property="regexp.@{package}">
				<string value="@{package}" />
				<filterchain>
					<replaceregex pattern="\." replace="\\\\." flags="g" />
				</filterchain>
			</loadresource>
			<replaceregexp file="${moduleinfofile}" replace="" flags="gs">
				<regexp pattern="\s*\b@{action}\s+${regexp.@{package}}\b[^;]*;" />
			</replaceregexp>
		</sequential>
	</macrodef>

	<!-- Replaces the module in an exports or opens line with another module or empty string -->
	<macrodef name="replaceexportsoropens">
		<attribute name="module.old" />
		<attribute name="module.new" />
		<attribute name="action" />
		<sequential>
			<echo message="Replacing @{module.old} with @{module.new} in @{action} statements" />
			<loadresource property="regexp.@{module.old}">
				<string value="@{module.old}" />
				<filterchain>
					<replaceregex pattern="\." replace="\\\\." flags="g" />
				</filterchain>
			</loadresource>
			<if>
				<length string="@{module.new}" trim="true" length="0" />
				<then>
					<replaceregexp file="${moduleinfofile}" replace="\1\3" flags="g">
						<regexp pattern="(@{action}\s[^;]*?to[^;]*?)(, ${regexp.@{module.old}}\b|${regexp.@{module.old}}, )([^;]*?;)" />
					</replaceregexp>
					<!-- deletes entire line if replacement string is empty and module is the only target -->
					<replaceregexp file="${moduleinfofile}" replace="" flags="g">
						<regexp pattern="(@{action}\s[^;]*?to\s+?)(${regexp.@{module.old}})(;)" />
					</replaceregexp>
				</then>
				<else>
					<replaceregexp file="${moduleinfofile}" replace="\1@{module.new}\3" flags="g">
						<regexp pattern="(@{action}\s[^;]*?to[^;]*?)(${regexp.@{module.old}}\b)([^;]*?;)" />
					</replaceregexp>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="removeprovides">
		<attribute name="interface" />
		<sequential>
			<echo message="Removing provides for interface @{interface}" />
			<loadresource property="regexp.@{interface}">
				<string value="@{interface}" />
				<filterchain>
					<replaceregex pattern="\." replace="\\\\." flags="g" />
				</filterchain>
			</loadresource>
			<replaceregexp file="${moduleinfofile}" replace="" flags="gs">
				<regexp pattern="\s*\bprovides\s+${regexp.@{interface}}\s+with[^;]*;" />
			</replaceregexp>
		</sequential>
	</macrodef>

	<macrodef name="replacerequires">
		<attribute name="module.old" />
		<attribute name="module.new" />
		<sequential>
			<echo message="Replaces requiring @{module.old} with @{module.new}" />
			<loadresource property="regexp.@{module.old}">
				<string value="@{module.old}" />
				<filterchain>
					<replaceregex pattern="\." replace="\\\\." flags="g" />
				</filterchain>
			</loadresource>
			<replaceregexp file="${moduleinfofile}" replace="\1@{module.new}" flags="gs">
				<regexp pattern="((?:requires\stransitive|requires)\s+)${regexp.@{module.old}}\b" />
			</replaceregexp>
		</sequential>
	</macrodef>

</project>
